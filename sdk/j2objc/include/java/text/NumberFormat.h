//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/text/NumberFormat.java
//
//  Created by tball on 11/23/13.
//

#ifndef _JavaTextNumberFormat_H_
#define _JavaTextNumberFormat_H_

@class IOSObjectArray;
@class JavaLangStringBuffer;
@class JavaMathRoundingModeEnum;
@class JavaTextFieldPosition;
@class JavaTextParsePosition;
@class JavaUtilCurrency;
@class JavaUtilLocale;

#import "JreEmulation.h"
#include "java/text/Format.h"

#define JavaTextNumberFormat_FRACTION_FIELD 1
#define JavaTextNumberFormat_INTEGER_FIELD 0
#define JavaTextNumberFormat_serialVersionUID -2308460125733713944

@interface JavaTextNumberFormat : JavaTextFormat {
 @public
  BOOL groupingUsed_, parseIntegerOnly_;
  int maximumIntegerDigits_, minimumIntegerDigits_, maximumFractionDigits_, minimumFractionDigits_;
}

+ (int)INTEGER_FIELD;
+ (int)FRACTION_FIELD;
- (id)init;
- (id)clone;
- (BOOL)isEqual:(id)object;
- (NSString *)formatWithDouble:(double)value;
- (JavaLangStringBuffer *)formatWithDouble:(double)value
                  withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                 withJavaTextFieldPosition:(JavaTextFieldPosition *)field;
- (NSString *)formatWithLong:(long long int)value;
- (JavaLangStringBuffer *)formatWithLong:(long long int)value
                withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
               withJavaTextFieldPosition:(JavaTextFieldPosition *)field;
- (JavaLangStringBuffer *)formatWithId:(id)object
              withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
             withJavaTextFieldPosition:(JavaTextFieldPosition *)field;
+ (IOSObjectArray *)getAvailableLocales;
- (JavaUtilCurrency *)getCurrency;
+ (JavaTextNumberFormat *)getCurrencyInstance;
+ (JavaTextNumberFormat *)getCurrencyInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;
+ (JavaTextNumberFormat *)getIntegerInstance;
+ (JavaTextNumberFormat *)getIntegerInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;
+ (JavaTextNumberFormat *)getInstance;
+ (JavaTextNumberFormat *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;
+ (JavaTextNumberFormat *)getInstanceWithNSString:(NSString *)pattern
                               withJavaUtilLocale:(JavaUtilLocale *)locale;
- (int)getMaximumFractionDigits;
- (int)getMaximumIntegerDigits;
- (int)getMinimumFractionDigits;
- (int)getMinimumIntegerDigits;
+ (JavaTextNumberFormat *)getNumberInstance;
+ (JavaTextNumberFormat *)getNumberInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;
+ (JavaTextNumberFormat *)getPercentInstance;
+ (JavaTextNumberFormat *)getPercentInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;
- (NSUInteger)hash;
- (BOOL)isGroupingUsed;
- (BOOL)isParseIntegerOnly;
- (NSNumber *)parseWithNSString:(NSString *)string;
- (NSNumber *)parseWithNSString:(NSString *)string
      withJavaTextParsePosition:(JavaTextParsePosition *)position;
- (id)parseObjectWithNSString:(NSString *)string
    withJavaTextParsePosition:(JavaTextParsePosition *)position;
- (void)setCurrencyWithJavaUtilCurrency:(JavaUtilCurrency *)currency;
- (void)setGroupingUsedWithBoolean:(BOOL)value;
- (void)setMaximumFractionDigitsWithInt:(int)value;
- (void)setMaximumIntegerDigitsWithInt:(int)value;
- (void)setMinimumFractionDigitsWithInt:(int)value;
- (void)setMinimumIntegerDigitsWithInt:(int)value;
- (void)setParseIntegerOnlyWithBoolean:(BOOL)value;
- (JavaMathRoundingModeEnum *)getRoundingMode;
- (void)setRoundingModeWithJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode;
- (void)copyAllFieldsTo:(JavaTextNumberFormat *)other;
@end

#define JavaTextNumberFormat_Field_serialVersionUID 7494728892700160890

@interface JavaTextNumberFormat_Field : JavaTextFormat_Field {
}

+ (JavaTextNumberFormat_Field *)SIGN;
+ (JavaTextNumberFormat_Field *)INTEGER;
+ (JavaTextNumberFormat_Field *)FRACTION;
+ (JavaTextNumberFormat_Field *)EXPONENT;
+ (JavaTextNumberFormat_Field *)EXPONENT_SIGN;
+ (JavaTextNumberFormat_Field *)EXPONENT_SYMBOL;
+ (JavaTextNumberFormat_Field *)DECIMAL_SEPARATOR;
+ (JavaTextNumberFormat_Field *)GROUPING_SEPARATOR;
+ (JavaTextNumberFormat_Field *)PERCENT;
+ (JavaTextNumberFormat_Field *)PERMILLE;
+ (JavaTextNumberFormat_Field *)CURRENCY;
- (id)initWithNSString:(NSString *)fieldName;
@end

#endif // _JavaTextNumberFormat_H_
