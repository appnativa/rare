//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ForkJoinTask.java
//
//  Created by tball on 11/23/13.
//

#ifndef _JavaUtilConcurrentForkJoinTask_H_
#define _JavaUtilConcurrentForkJoinTask_H_

@class IOSObjectArray;
@class JavaLangRefReferenceQueue;
@class JavaLangThrowable;
@class JavaUtilConcurrentForkJoinPool;
@class JavaUtilConcurrentForkJoinTask;
@class JavaUtilConcurrentLocksReentrantLock;
@class JavaUtilConcurrentTimeUnitEnum;
@class SunMiscUnsafe;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;

#import "JreEmulation.h"
#include "java/io/Serializable.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/RunnableFuture.h"

@interface JavaUtilConcurrentForkJoinTask_ExceptionNode : JavaLangRefWeakReference {
 @public
  JavaLangThrowable *ex_;
  JavaUtilConcurrentForkJoinTask_ExceptionNode *next_;
  long long int thrower_;
}

- (id)initWithJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)task
                       withJavaLangThrowable:(JavaLangThrowable *)ex
withJavaUtilConcurrentForkJoinTask_ExceptionNode:(JavaUtilConcurrentForkJoinTask_ExceptionNode *)next;
- (void)copyAllFieldsTo:(JavaUtilConcurrentForkJoinTask_ExceptionNode *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_ExceptionNode, ex_, JavaLangThrowable *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_ExceptionNode, next_, JavaUtilConcurrentForkJoinTask_ExceptionNode *)

#define JavaUtilConcurrentForkJoinTask_CANCELLED -2
#define JavaUtilConcurrentForkJoinTask_EXCEPTIONAL -3
#define JavaUtilConcurrentForkJoinTask_EXCEPTION_MAP_CAPACITY 32
#define JavaUtilConcurrentForkJoinTask_NORMAL -1
#define JavaUtilConcurrentForkJoinTask_SIGNAL 1
#define JavaUtilConcurrentForkJoinTask_serialVersionUID -7721805057305804111

@interface JavaUtilConcurrentForkJoinTask : NSObject < JavaUtilConcurrentFuture, JavaIoSerializable > {
 @public
  int status_;
}

+ (IOSObjectArray *)exceptionTable;
+ (JavaUtilConcurrentLocksReentrantLock *)exceptionTableLock;
+ (JavaLangRefReferenceQueue *)exceptionTableRefQueue;
+ (SunMiscUnsafe *)UNSAFE;
+ (long long int)statusOffset;
- (int)setCompletionWithInt:(int)completion;
- (void)tryAwaitDoneWithLong:(long long int)millis;
- (int)externalAwaitDone;
- (int)externalInterruptibleAwaitDoneWithLong:(long long int)millis;
- (void)doExec;
- (int)doJoin;
- (int)doInvoke;
- (int)setExceptionalCompletionWithJavaLangThrowable:(JavaLangThrowable *)ex;
- (void)clearExceptionalCompletion;
- (JavaLangThrowable *)getThrowableException;
+ (void)expungeStaleExceptions;
+ (void)helpExpungeStaleExceptions;
- (id)reportResult;
- (JavaUtilConcurrentForkJoinTask *)fork;
- (id)join;
- (id)invoke;
+ (void)invokeAllWithJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)t1
                 withJavaUtilConcurrentForkJoinTask:(JavaUtilConcurrentForkJoinTask *)t2;
+ (void)invokeAllWithJavaUtilConcurrentForkJoinTaskArray:(IOSObjectArray *)tasks;
+ (id<JavaUtilCollection>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;
- (BOOL)cancelWithBoolean:(BOOL)mayInterruptIfRunning;
- (void)cancelIgnoringExceptions;
- (BOOL)isDone;
- (BOOL)isCancelled;
- (BOOL)isCompletedAbnormally;
- (BOOL)isCompletedNormally;
- (JavaLangThrowable *)getException;
- (void)completeExceptionallyWithJavaLangThrowable:(JavaLangThrowable *)ex;
- (void)completeWithId:(id)value;
- (id)get;
- (id)getWithLong:(long long int)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
- (void)quietlyJoin;
- (void)quietlyInvoke;
+ (void)helpQuiesce;
- (void)reinitialize;
+ (JavaUtilConcurrentForkJoinPool *)getPool;
+ (BOOL)inForkJoinPool;
- (BOOL)tryUnfork;
+ (int)getQueuedTaskCount;
+ (int)getSurplusQueuedTaskCount;
- (id)getRawResult;
- (void)setRawResultWithId:(id)value;
- (BOOL)exec;
+ (JavaUtilConcurrentForkJoinTask *)peekNextLocalTask;
+ (JavaUtilConcurrentForkJoinTask *)pollNextLocalTask;
+ (JavaUtilConcurrentForkJoinTask *)pollTask;
+ (JavaUtilConcurrentForkJoinTask *)adaptWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;
+ (JavaUtilConcurrentForkJoinTask *)adaptWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                                                       withId:(id)result;
+ (JavaUtilConcurrentForkJoinTask *)adaptWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;
- (id)init;
- (void)copyAllFieldsTo:(JavaUtilConcurrentForkJoinTask *)other;
@end

#define JavaUtilConcurrentForkJoinTask_AdaptedRunnable_serialVersionUID 5232453952276885070

@interface JavaUtilConcurrentForkJoinTask_AdaptedRunnable : JavaUtilConcurrentForkJoinTask < JavaUtilConcurrentRunnableFuture > {
 @public
  id<JavaLangRunnable> runnable_;
  id resultOnCompletion_;
  id result_;
}

- (id)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                        withId:(id)result;
- (id)getRawResult;
- (void)setRawResultWithId:(id)v;
- (BOOL)exec;
- (void)run;
- (void)copyAllFieldsTo:(JavaUtilConcurrentForkJoinTask_AdaptedRunnable *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable, runnable_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable, resultOnCompletion_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedRunnable, result_, id)

#define JavaUtilConcurrentForkJoinTask_AdaptedCallable_serialVersionUID 2838392045355241008

@interface JavaUtilConcurrentForkJoinTask_AdaptedCallable : JavaUtilConcurrentForkJoinTask < JavaUtilConcurrentRunnableFuture > {
 @public
  id<JavaUtilConcurrentCallable> callable_;
  id result_;
}

- (id)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;
- (id)getRawResult;
- (void)setRawResultWithId:(id)v;
- (BOOL)exec;
- (void)run;
- (void)copyAllFieldsTo:(JavaUtilConcurrentForkJoinTask_AdaptedCallable *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedCallable, callable_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinTask_AdaptedCallable, result_, id)

#endif // _JavaUtilConcurrentForkJoinTask_H_
