//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ConcurrentHashMap.java
//
//  Created by tball on 11/23/13.
//

#ifndef _JavaUtilConcurrentConcurrentHashMap_H_
#define _JavaUtilConcurrentConcurrentHashMap_H_

@class IOSObjectArray;
@class JavaUtilConcurrentConcurrentHashMap_HashEntry;
@class JavaUtilConcurrentConcurrentHashMap_Segment;
@class SunMiscUnsafe;
@protocol JavaUtilCollection;
@protocol JavaUtilMap;
@protocol JavaUtilMap_Entry;
@protocol JavaUtilSet;

#import "JreEmulation.h"
#include "java/io/Serializable.h"
#include "java/util/AbstractCollection.h"
#include "java/util/AbstractMap.h"
#include "java/util/AbstractSet.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

#define JavaUtilConcurrentConcurrentHashMap_DEFAULT_CONCURRENCY_LEVEL 16
#define JavaUtilConcurrentConcurrentHashMap_DEFAULT_INITIAL_CAPACITY 16
#define JavaUtilConcurrentConcurrentHashMap_DEFAULT_LOAD_FACTOR 0.75
#define JavaUtilConcurrentConcurrentHashMap_MAXIMUM_CAPACITY 1073741824
#define JavaUtilConcurrentConcurrentHashMap_MAX_SEGMENTS 65536
#define JavaUtilConcurrentConcurrentHashMap_MIN_SEGMENT_TABLE_CAPACITY 2
#define JavaUtilConcurrentConcurrentHashMap_RETRIES_BEFORE_LOCK 2
#define JavaUtilConcurrentConcurrentHashMap_serialVersionUID 7249069246763182397

@interface JavaUtilConcurrentConcurrentHashMap : JavaUtilAbstractMap < JavaUtilConcurrentConcurrentMap, JavaIoSerializable > {
 @public
  int segmentMask_;
  int segmentShift_;
  IOSObjectArray *segments_;
  id<JavaUtilSet> keySet_ConcurrentHashMap_;
  id<JavaUtilSet> entrySet__;
  id<JavaUtilCollection> values__;
}

+ (int)DEFAULT_INITIAL_CAPACITY;
+ (float)DEFAULT_LOAD_FACTOR;
+ (int)DEFAULT_CONCURRENCY_LEVEL;
+ (int)MAXIMUM_CAPACITY;
+ (int)MIN_SEGMENT_TABLE_CAPACITY;
+ (int)MAX_SEGMENTS;
+ (int)RETRIES_BEFORE_LOCK;
+ (SunMiscUnsafe *)UNSAFE;
+ (JavaUtilConcurrentConcurrentHashMap_HashEntry *)entryAtWithJavaUtilConcurrentConcurrentHashMap_HashEntryArray:(IOSObjectArray *)tab
                                                                                                         withInt:(int)i;
+ (void)setEntryAtWithJavaUtilConcurrentConcurrentHashMap_HashEntryArray:(IOSObjectArray *)tab
                                                                 withInt:(int)i
                       withJavaUtilConcurrentConcurrentHashMap_HashEntry:(JavaUtilConcurrentConcurrentHashMap_HashEntry *)e;
+ (int)hash__WithInt:(int)h;
+ (JavaUtilConcurrentConcurrentHashMap_Segment *)segmentAtWithJavaUtilConcurrentConcurrentHashMap_SegmentArray:(IOSObjectArray *)ss
                                                                                                       withInt:(int)j;
- (JavaUtilConcurrentConcurrentHashMap_Segment *)ensureSegmentWithInt:(int)k;
- (JavaUtilConcurrentConcurrentHashMap_Segment *)segmentForHashWithInt:(int)h;
+ (JavaUtilConcurrentConcurrentHashMap_HashEntry *)entryForHashWithJavaUtilConcurrentConcurrentHashMap_Segment:(JavaUtilConcurrentConcurrentHashMap_Segment *)seg
                                                                                                       withInt:(int)h;
- (id)initWithInt:(int)initialCapacity
        withFloat:(float)loadFactor
          withInt:(int)concurrencyLevel;
- (id)initWithInt:(int)initialCapacity
        withFloat:(float)loadFactor;
- (id)initWithInt:(int)initialCapacity;
- (id)init;
- (id)initWithJavaUtilMap:(id<JavaUtilMap>)m;
- (BOOL)isEmpty;
- (int)size;
- (id)getWithId:(id)key;
- (BOOL)containsKeyWithId:(id)key;
- (BOOL)containsValueWithId:(id)value;
- (BOOL)containsWithId:(id)value;
- (id)putWithId:(id)key
         withId:(id)value;
- (id)putIfAbsentWithId:(id)key
                 withId:(id)value;
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m;
- (id)removeWithId:(id)key;
- (BOOL)removeWithId:(id)key
              withId:(id)value;
- (BOOL)replaceWithId:(id)key
               withId:(id)oldValue
               withId:(id)newValue;
- (id)replaceWithId:(id)key
             withId:(id)value;
- (void)clear;
- (id<JavaUtilSet>)keySet;
- (id<JavaUtilCollection>)values;
- (id<JavaUtilSet>)entrySet;
- (id<JavaUtilEnumeration>)keys;
- (id<JavaUtilEnumeration>)elements;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentHashMap *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap, segments_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap, keySet_ConcurrentHashMap_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap, entrySet__, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap, values__, id<JavaUtilCollection>)

@interface JavaUtilConcurrentConcurrentHashMap_HashEntry : NSObject {
 @public
  int hash__;
  id key_;
  id value_;
  JavaUtilConcurrentConcurrentHashMap_HashEntry *next_;
}

+ (SunMiscUnsafe *)UNSAFE;
+ (long long int)nextOffset;
- (id)initWithInt:(int)hash_
           withId:(id)key
           withId:(id)value
withJavaUtilConcurrentConcurrentHashMap_HashEntry:(JavaUtilConcurrentConcurrentHashMap_HashEntry *)next;
- (void)setNextWithJavaUtilConcurrentConcurrentHashMap_HashEntry:(JavaUtilConcurrentConcurrentHashMap_HashEntry *)n;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentHashMap_HashEntry *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap_HashEntry, key_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap_HashEntry, value_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap_HashEntry, next_, JavaUtilConcurrentConcurrentHashMap_HashEntry *)

#define JavaUtilConcurrentConcurrentHashMap_Segment_serialVersionUID 2249069246763182397

@interface JavaUtilConcurrentConcurrentHashMap_Segment : JavaUtilConcurrentLocksReentrantLock < JavaIoSerializable > {
 @public
  IOSObjectArray *table_;
  int count_;
  int modCount_;
  int threshold_;
  float loadFactor_;
}

+ (int)MAX_SCAN_RETRIES;
- (id)initWithFloat:(float)lf
            withInt:(int)threshold
withJavaUtilConcurrentConcurrentHashMap_HashEntryArray:(IOSObjectArray *)tab;
- (id)putWithId:(id)key
        withInt:(int)hash_
         withId:(id)value
    withBoolean:(BOOL)onlyIfAbsent;
- (void)rehashWithJavaUtilConcurrentConcurrentHashMap_HashEntry:(JavaUtilConcurrentConcurrentHashMap_HashEntry *)node;
- (JavaUtilConcurrentConcurrentHashMap_HashEntry *)scanAndLockForPutWithId:(id)key
                                                                   withInt:(int)hash_
                                                                    withId:(id)value;
- (void)scanAndLockWithId:(id)key
                  withInt:(int)hash_;
- (id)removeWithId:(id)key
           withInt:(int)hash_
            withId:(id)value;
- (BOOL)replaceWithId:(id)key
              withInt:(int)hash_
               withId:(id)oldValue
               withId:(id)newValue;
- (id)replaceWithId:(id)key
            withInt:(int)hash_
             withId:(id)value;
- (void)clear;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentHashMap_Segment *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap_Segment, table_, IOSObjectArray *)

@interface JavaUtilConcurrentConcurrentHashMap_HashIterator : NSObject {
 @public
  JavaUtilConcurrentConcurrentHashMap *this$0_;
  int nextSegmentIndex_;
  int nextTableIndex_;
  IOSObjectArray *currentTable_;
  JavaUtilConcurrentConcurrentHashMap_HashEntry *nextEntry__;
  JavaUtilConcurrentConcurrentHashMap_HashEntry *lastReturned_;
}

- (id)initWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)outer$;
- (void)advance;
- (JavaUtilConcurrentConcurrentHashMap_HashEntry *)nextEntry;
- (BOOL)hasNext;
- (BOOL)hasMoreElements;
- (void)remove;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentHashMap_HashIterator *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap_HashIterator, this$0_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap_HashIterator, currentTable_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap_HashIterator, nextEntry__, JavaUtilConcurrentConcurrentHashMap_HashEntry *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap_HashIterator, lastReturned_, JavaUtilConcurrentConcurrentHashMap_HashEntry *)

@interface JavaUtilConcurrentConcurrentHashMap_KeyIterator : JavaUtilConcurrentConcurrentHashMap_HashIterator < JavaUtilIterator, JavaUtilEnumeration > {
}

- (id)next;
- (id)nextElement;
- (id)initWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)outer$;
@end

@interface JavaUtilConcurrentConcurrentHashMap_ValueIterator : JavaUtilConcurrentConcurrentHashMap_HashIterator < JavaUtilIterator, JavaUtilEnumeration > {
}

- (id)next;
- (id)nextElement;
- (id)initWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)outer$;
@end

@interface JavaUtilConcurrentConcurrentHashMap_WriteThroughEntry : JavaUtilAbstractMap_SimpleEntry {
 @public
  JavaUtilConcurrentConcurrentHashMap *this$0_;
}

- (id)initWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)outer$
                                           withId:(id)k
                                           withId:(id)v;
- (id)setValueWithId:(id)value;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap_WriteThroughEntry, this$0_, JavaUtilConcurrentConcurrentHashMap *)

@interface JavaUtilConcurrentConcurrentHashMap_EntryIterator : JavaUtilConcurrentConcurrentHashMap_HashIterator < JavaUtilIterator > {
 @public
  JavaUtilConcurrentConcurrentHashMap *this$1_;
}

- (id<JavaUtilMap_Entry>)next;
- (id)initWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)outer$;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentHashMap_EntryIterator, this$1_, JavaUtilConcurrentConcurrentHashMap *)

@interface JavaUtilConcurrentConcurrentHashMap_KeySet : JavaUtilAbstractSet {
 @public
  __weak JavaUtilConcurrentConcurrentHashMap *this$0_;
}

- (id<JavaUtilIterator>)iterator;
- (int)size;
- (BOOL)isEmpty;
- (BOOL)containsWithId:(id)o;
- (BOOL)removeWithId:(id)o;
- (void)clear;
- (id)initWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)outer$;
@end

@interface JavaUtilConcurrentConcurrentHashMap_Values : JavaUtilAbstractCollection {
 @public
  __weak JavaUtilConcurrentConcurrentHashMap *this$0_;
}

- (id<JavaUtilIterator>)iterator;
- (int)size;
- (BOOL)isEmpty;
- (BOOL)containsWithId:(id)o;
- (void)clear;
- (id)initWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)outer$;
@end

@interface JavaUtilConcurrentConcurrentHashMap_EntrySet : JavaUtilAbstractSet {
 @public
  __weak JavaUtilConcurrentConcurrentHashMap *this$0_;
}

- (id<JavaUtilIterator>)iterator;
- (BOOL)containsWithId:(id)o;
- (BOOL)removeWithId:(id)o;
- (int)size;
- (BOOL)isEmpty;
- (void)clear;
- (id)initWithJavaUtilConcurrentConcurrentHashMap:(JavaUtilConcurrentConcurrentHashMap *)outer$;
@end

#endif // _JavaUtilConcurrentConcurrentHashMap_H_
