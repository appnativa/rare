//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ConcurrentSkipListMap.java
//
//  Created by tball on 11/23/13.
//

#ifndef _JavaUtilConcurrentConcurrentSkipListMap_H_
#define _JavaUtilConcurrentConcurrentSkipListMap_H_

@class IOSObjectArray;
@class JavaUtilAbstractMap_SimpleImmutableEntry;
@class JavaUtilConcurrentConcurrentSkipListMap_EntrySet;
@class JavaUtilConcurrentConcurrentSkipListMap_HeadIndex;
@class JavaUtilConcurrentConcurrentSkipListMap_Index;
@class JavaUtilConcurrentConcurrentSkipListMap_KeySet;
@class JavaUtilConcurrentConcurrentSkipListMap_Node;
@class JavaUtilConcurrentConcurrentSkipListMap_Values;
@class JavaUtilRandom;
@class SunMiscUnsafe;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilMap_Entry;
@protocol JavaUtilSet;
@protocol JavaUtilSortedMap;

#import "JreEmulation.h"
#include "java/io/Serializable.h"
#include "java/lang/Comparable.h"
#include "java/util/AbstractCollection.h"
#include "java/util/AbstractMap.h"
#include "java/util/AbstractSet.h"
#include "java/util/Iterator.h"
#include "java/util/NavigableSet.h"
#include "java/util/concurrent/ConcurrentNavigableMap.h"

#define JavaUtilConcurrentConcurrentSkipListMap_EQ 1
#define JavaUtilConcurrentConcurrentSkipListMap_GT 0
#define JavaUtilConcurrentConcurrentSkipListMap_LT 2
#define JavaUtilConcurrentConcurrentSkipListMap_serialVersionUID -8627078645895051609

@interface JavaUtilConcurrentConcurrentSkipListMap : JavaUtilAbstractMap < JavaUtilConcurrentConcurrentNavigableMap, NSCopying, JavaIoSerializable > {
 @public
  JavaUtilConcurrentConcurrentSkipListMap_HeadIndex *head_;
  id<JavaUtilComparator> comparator__;
  int randomSeed_;
  JavaUtilConcurrentConcurrentSkipListMap_KeySet *keySet_ConcurrentSkipListMap_;
  JavaUtilConcurrentConcurrentSkipListMap_EntrySet *entrySet__;
  JavaUtilConcurrentConcurrentSkipListMap_Values *values__;
  id<JavaUtilConcurrentConcurrentNavigableMap> descendingMap__;
}

+ (JavaUtilRandom *)seedGenerator;
+ (id)BASE_HEADER;
+ (SunMiscUnsafe *)UNSAFE;
+ (long long int)headOffset;
- (void)initialize__ OBJC_METHOD_FAMILY_NONE;
- (BOOL)casHeadWithJavaUtilConcurrentConcurrentSkipListMap_HeadIndex:(JavaUtilConcurrentConcurrentSkipListMap_HeadIndex *)cmp
               withJavaUtilConcurrentConcurrentSkipListMap_HeadIndex:(JavaUtilConcurrentConcurrentSkipListMap_HeadIndex *)val;
- (id<JavaLangComparable>)comparableWithId:(id)key;
- (int)compareWithId:(id)k1
              withId:(id)k2;
- (BOOL)inHalfOpenRangeWithId:(id)key
                       withId:(id)least
                       withId:(id)fence;
- (BOOL)inOpenRangeWithId:(id)key
                   withId:(id)least
                   withId:(id)fence;
- (JavaUtilConcurrentConcurrentSkipListMap_Node *)findPredecessorWithJavaLangComparable:(id<JavaLangComparable>)key;
- (JavaUtilConcurrentConcurrentSkipListMap_Node *)findNodeWithJavaLangComparable:(id<JavaLangComparable>)key;
- (id)doGetWithId:(id)okey;
- (id)doPutWithId:(id)kkey
           withId:(id)value
      withBoolean:(BOOL)onlyIfAbsent;
- (int)randomLevel;
- (void)insertIndexWithJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)z
                                                            withInt:(int)level;
- (void)addIndexWithJavaUtilConcurrentConcurrentSkipListMap_Index:(JavaUtilConcurrentConcurrentSkipListMap_Index *)idx
            withJavaUtilConcurrentConcurrentSkipListMap_HeadIndex:(JavaUtilConcurrentConcurrentSkipListMap_HeadIndex *)h
                                                          withInt:(int)indexLevel;
- (id)doRemoveWithId:(id)okey
              withId:(id)value;
- (void)tryReduceLevel;
- (JavaUtilConcurrentConcurrentSkipListMap_Node *)findFirst;
- (id<JavaUtilMap_Entry>)doRemoveFirstEntry;
- (void)clearIndexToFirst;
- (JavaUtilConcurrentConcurrentSkipListMap_Node *)findLast;
- (JavaUtilConcurrentConcurrentSkipListMap_Node *)findPredecessorOfLast;
- (id<JavaUtilMap_Entry>)doRemoveLastEntry;
- (JavaUtilConcurrentConcurrentSkipListMap_Node *)findNearWithId:(id)kkey
                                                         withInt:(int)rel;
- (JavaUtilAbstractMap_SimpleImmutableEntry *)getNearWithId:(id)key
                                                    withInt:(int)rel;
- (id)init;
- (id)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;
- (id)initWithJavaUtilMap:(id<JavaUtilMap>)m;
- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)m;
- (JavaUtilConcurrentConcurrentSkipListMap *)clone;
- (void)buildFromSortedWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;
- (BOOL)containsKeyWithId:(id)key;
- (id)getWithId:(id)key;
- (id)putWithId:(id)key
         withId:(id)value;
- (id)removeWithId:(id)key;
- (BOOL)containsValueWithId:(id)value;
- (int)size;
- (BOOL)isEmpty;
- (void)clear;
- (id<JavaUtilNavigableSet>)keySet;
- (id<JavaUtilNavigableSet>)navigableKeySet;
- (id<JavaUtilCollection>)values;
- (id<JavaUtilSet>)entrySet;
- (id<JavaUtilConcurrentConcurrentNavigableMap>)descendingMap;
- (id<JavaUtilNavigableSet>)descendingKeySet;
- (BOOL)isEqual:(id)o;
- (id)putIfAbsentWithId:(id)key
                 withId:(id)value;
- (BOOL)removeWithId:(id)key
              withId:(id)value;
- (BOOL)replaceWithId:(id)key
               withId:(id)oldValue
               withId:(id)newValue;
- (id)replaceWithId:(id)key
             withId:(id)value;
- (id<JavaUtilComparator>)comparator;
- (id)firstKey;
- (id)lastKey;
- (id<JavaUtilConcurrentConcurrentNavigableMap>)subMapWithId:(id)fromKey
                                                 withBoolean:(BOOL)fromInclusive
                                                      withId:(id)toKey
                                                 withBoolean:(BOOL)toInclusive;
- (id<JavaUtilConcurrentConcurrentNavigableMap>)headMapWithId:(id)toKey
                                                  withBoolean:(BOOL)inclusive;
- (id<JavaUtilConcurrentConcurrentNavigableMap>)tailMapWithId:(id)fromKey
                                                  withBoolean:(BOOL)inclusive;
- (id<JavaUtilConcurrentConcurrentNavigableMap>)subMapWithId:(id)fromKey
                                                      withId:(id)toKey;
- (id<JavaUtilConcurrentConcurrentNavigableMap>)headMapWithId:(id)toKey;
- (id<JavaUtilConcurrentConcurrentNavigableMap>)tailMapWithId:(id)fromKey;
- (id<JavaUtilMap_Entry>)lowerEntryWithId:(id)key;
- (id)lowerKeyWithId:(id)key;
- (id<JavaUtilMap_Entry>)floorEntryWithId:(id)key;
- (id)floorKeyWithId:(id)key;
- (id<JavaUtilMap_Entry>)ceilingEntryWithId:(id)key;
- (id)ceilingKeyWithId:(id)key;
- (id<JavaUtilMap_Entry>)higherEntryWithId:(id)key;
- (id)higherKeyWithId:(id)key;
- (id<JavaUtilMap_Entry>)firstEntry;
- (id<JavaUtilMap_Entry>)lastEntry;
- (id<JavaUtilMap_Entry>)pollFirstEntry;
- (id<JavaUtilMap_Entry>)pollLastEntry;
- (id<JavaUtilIterator>)keyIterator;
- (id<JavaUtilIterator>)valueIterator;
- (id<JavaUtilIterator>)entryIterator;
+ (id<JavaUtilList>)toListWithJavaUtilCollection:(id<JavaUtilCollection>)c;
- (id)copyWithZone:(NSZone *)zone;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap, head_, JavaUtilConcurrentConcurrentSkipListMap_HeadIndex *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap, comparator__, id<JavaUtilComparator>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap, keySet_ConcurrentSkipListMap_, JavaUtilConcurrentConcurrentSkipListMap_KeySet *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap, entrySet__, JavaUtilConcurrentConcurrentSkipListMap_EntrySet *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap, values__, JavaUtilConcurrentConcurrentSkipListMap_Values *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap, descendingMap__, id<JavaUtilConcurrentConcurrentNavigableMap>)

@interface JavaUtilConcurrentConcurrentSkipListMap_Node : NSObject {
 @public
  id key_;
  id value_;
  JavaUtilConcurrentConcurrentSkipListMap_Node *next_;
}

+ (SunMiscUnsafe *)UNSAFE;
+ (long long int)valueOffset;
+ (long long int)nextOffset;
- (id)initWithId:(id)key
          withId:(id)value
withJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)next;
- (id)initWithJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)next;
- (BOOL)casValueWithId:(id)cmp
                withId:(id)val;
- (BOOL)casNextWithJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)cmp
               withJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)val;
- (BOOL)isMarker;
- (BOOL)isBaseHeader;
- (BOOL)appendMarkerWithJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)f;
- (void)helpDeleteWithJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)b
                  withJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)f;
- (id)getValidValue;
- (JavaUtilAbstractMap_SimpleImmutableEntry *)createSnapshot;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap_Node *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_Node, key_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_Node, value_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_Node, next_, JavaUtilConcurrentConcurrentSkipListMap_Node *)

@interface JavaUtilConcurrentConcurrentSkipListMap_Index : NSObject {
 @public
  JavaUtilConcurrentConcurrentSkipListMap_Node *node_;
  JavaUtilConcurrentConcurrentSkipListMap_Index *down_;
  JavaUtilConcurrentConcurrentSkipListMap_Index *right_;
}

+ (SunMiscUnsafe *)UNSAFE;
+ (long long int)rightOffset;
- (id)initWithJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)node
         withJavaUtilConcurrentConcurrentSkipListMap_Index:(JavaUtilConcurrentConcurrentSkipListMap_Index *)down
         withJavaUtilConcurrentConcurrentSkipListMap_Index:(JavaUtilConcurrentConcurrentSkipListMap_Index *)right;
- (BOOL)casRightWithJavaUtilConcurrentConcurrentSkipListMap_Index:(JavaUtilConcurrentConcurrentSkipListMap_Index *)cmp
                withJavaUtilConcurrentConcurrentSkipListMap_Index:(JavaUtilConcurrentConcurrentSkipListMap_Index *)val;
- (BOOL)indexesDeletedNode;
- (BOOL)linkWithJavaUtilConcurrentConcurrentSkipListMap_Index:(JavaUtilConcurrentConcurrentSkipListMap_Index *)succ
            withJavaUtilConcurrentConcurrentSkipListMap_Index:(JavaUtilConcurrentConcurrentSkipListMap_Index *)newSucc;
- (BOOL)unlinkWithJavaUtilConcurrentConcurrentSkipListMap_Index:(JavaUtilConcurrentConcurrentSkipListMap_Index *)succ;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap_Index *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_Index, node_, JavaUtilConcurrentConcurrentSkipListMap_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_Index, down_, JavaUtilConcurrentConcurrentSkipListMap_Index *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_Index, right_, JavaUtilConcurrentConcurrentSkipListMap_Index *)

@interface JavaUtilConcurrentConcurrentSkipListMap_HeadIndex : JavaUtilConcurrentConcurrentSkipListMap_Index {
 @public
  int level_;
}

- (id)initWithJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)node
         withJavaUtilConcurrentConcurrentSkipListMap_Index:(JavaUtilConcurrentConcurrentSkipListMap_Index *)down
         withJavaUtilConcurrentConcurrentSkipListMap_Index:(JavaUtilConcurrentConcurrentSkipListMap_Index *)right
                                                   withInt:(int)level;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap_HeadIndex *)other;
@end

@interface JavaUtilConcurrentConcurrentSkipListMap_ComparableUsingComparator : NSObject < JavaLangComparable > {
 @public
  id actualKey_;
  id<JavaUtilComparator> cmp_;
}

- (id)initWithId:(id)key
withJavaUtilComparator:(id<JavaUtilComparator>)cmp;
- (int)compareToWithId:(id)k2;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap_ComparableUsingComparator *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_ComparableUsingComparator, actualKey_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_ComparableUsingComparator, cmp_, id<JavaUtilComparator>)

@interface JavaUtilConcurrentConcurrentSkipListMap_Iter : NSObject < JavaUtilIterator > {
 @public
  JavaUtilConcurrentConcurrentSkipListMap *this$0_;
  JavaUtilConcurrentConcurrentSkipListMap_Node *lastReturned_;
  JavaUtilConcurrentConcurrentSkipListMap_Node *next_;
  id nextValue_;
}

- (id)initWithJavaUtilConcurrentConcurrentSkipListMap:(JavaUtilConcurrentConcurrentSkipListMap *)outer$;
- (BOOL)hasNext;
- (void)advance;
- (void)remove;
- (id)next;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap_Iter *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_Iter, this$0_, JavaUtilConcurrentConcurrentSkipListMap *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_Iter, lastReturned_, JavaUtilConcurrentConcurrentSkipListMap_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_Iter, next_, JavaUtilConcurrentConcurrentSkipListMap_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_Iter, nextValue_, id)

@interface JavaUtilConcurrentConcurrentSkipListMap_ValueIterator : JavaUtilConcurrentConcurrentSkipListMap_Iter {
}

- (id)next;
- (id)initWithJavaUtilConcurrentConcurrentSkipListMap:(JavaUtilConcurrentConcurrentSkipListMap *)outer$;
@end

@interface JavaUtilConcurrentConcurrentSkipListMap_KeyIterator : JavaUtilConcurrentConcurrentSkipListMap_Iter {
}

- (id)next;
- (id)initWithJavaUtilConcurrentConcurrentSkipListMap:(JavaUtilConcurrentConcurrentSkipListMap *)outer$;
@end

@interface JavaUtilConcurrentConcurrentSkipListMap_EntryIterator : JavaUtilConcurrentConcurrentSkipListMap_Iter {
}

- (id<JavaUtilMap_Entry>)next;
- (id)initWithJavaUtilConcurrentConcurrentSkipListMap:(JavaUtilConcurrentConcurrentSkipListMap *)outer$;
@end

@interface JavaUtilConcurrentConcurrentSkipListMap_KeySet : JavaUtilAbstractSet < JavaUtilNavigableSet > {
 @public
  __weak id<JavaUtilConcurrentConcurrentNavigableMap> m_;
}

- (id)initWithJavaUtilConcurrentConcurrentNavigableMap:(id<JavaUtilConcurrentConcurrentNavigableMap>)map;
- (int)size;
- (BOOL)isEmpty;
- (BOOL)containsWithId:(id)o;
- (BOOL)removeWithId:(id)o;
- (void)clear;
- (id)lowerWithId:(id)e;
- (id)floorWithId:(id)e;
- (id)ceilingWithId:(id)e;
- (id)higherWithId:(id)e;
- (id<JavaUtilComparator>)comparator;
- (id)first;
- (id)last;
- (id)pollFirst;
- (id)pollLast;
- (id<JavaUtilIterator>)iterator;
- (BOOL)isEqual:(id)o;
- (IOSObjectArray *)toArray;
- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;
- (id<JavaUtilIterator>)descendingIterator;
- (id<JavaUtilNavigableSet>)subSetWithId:(id)fromElement
                             withBoolean:(BOOL)fromInclusive
                                  withId:(id)toElement
                             withBoolean:(BOOL)toInclusive;
- (id<JavaUtilNavigableSet>)headSetWithId:(id)toElement
                              withBoolean:(BOOL)inclusive;
- (id<JavaUtilNavigableSet>)tailSetWithId:(id)fromElement
                              withBoolean:(BOOL)inclusive;
- (id<JavaUtilNavigableSet>)subSetWithId:(id)fromElement
                                  withId:(id)toElement;
- (id<JavaUtilNavigableSet>)headSetWithId:(id)toElement;
- (id<JavaUtilNavigableSet>)tailSetWithId:(id)fromElement;
- (id<JavaUtilNavigableSet>)descendingSet;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap_KeySet *)other;
@end

@interface JavaUtilConcurrentConcurrentSkipListMap_Values : JavaUtilAbstractCollection {
 @public
  __weak id<JavaUtilConcurrentConcurrentNavigableMap> m_;
}

- (id)initWithJavaUtilConcurrentConcurrentNavigableMap:(id<JavaUtilConcurrentConcurrentNavigableMap>)map;
- (id<JavaUtilIterator>)iterator;
- (BOOL)isEmpty;
- (int)size;
- (BOOL)containsWithId:(id)o;
- (void)clear;
- (IOSObjectArray *)toArray;
- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap_Values *)other;
@end

@interface JavaUtilConcurrentConcurrentSkipListMap_EntrySet : JavaUtilAbstractSet {
 @public
  __weak id<JavaUtilConcurrentConcurrentNavigableMap> m_;
}

- (id)initWithJavaUtilConcurrentConcurrentNavigableMap:(id<JavaUtilConcurrentConcurrentNavigableMap>)map;
- (id<JavaUtilIterator>)iterator;
- (BOOL)containsWithId:(id)o;
- (BOOL)removeWithId:(id)o;
- (BOOL)isEmpty;
- (int)size;
- (void)clear;
- (BOOL)isEqual:(id)o;
- (IOSObjectArray *)toArray;
- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap_EntrySet *)other;
@end

#define JavaUtilConcurrentConcurrentSkipListMap_SubMap_serialVersionUID -7647078645895051609

@interface JavaUtilConcurrentConcurrentSkipListMap_SubMap : JavaUtilAbstractMap < JavaUtilConcurrentConcurrentNavigableMap, NSCopying, JavaIoSerializable > {
 @public
  JavaUtilConcurrentConcurrentSkipListMap *m_;
  id lo_;
  id hi_;
  BOOL loInclusive_;
  BOOL hiInclusive_;
  BOOL isDescending_;
  JavaUtilConcurrentConcurrentSkipListMap_KeySet *keySetView_;
  id<JavaUtilSet> entrySetView_;
  id<JavaUtilCollection> valuesView_;
}

- (id)initWithJavaUtilConcurrentConcurrentSkipListMap:(JavaUtilConcurrentConcurrentSkipListMap *)map
                                               withId:(id)fromKey
                                          withBoolean:(BOOL)fromInclusive
                                               withId:(id)toKey
                                          withBoolean:(BOOL)toInclusive
                                          withBoolean:(BOOL)isDescending;
- (BOOL)tooLowWithId:(id)key;
- (BOOL)tooHighWithId:(id)key;
- (BOOL)inBoundsWithId:(id)key;
- (void)checkKeyBoundsWithId:(id)key;
- (BOOL)isBeforeEndWithJavaUtilConcurrentConcurrentSkipListMap_Node:(JavaUtilConcurrentConcurrentSkipListMap_Node *)n;
- (JavaUtilConcurrentConcurrentSkipListMap_Node *)loNode;
- (JavaUtilConcurrentConcurrentSkipListMap_Node *)hiNode;
- (id)lowestKey;
- (id)highestKey;
- (id<JavaUtilMap_Entry>)lowestEntry;
- (id<JavaUtilMap_Entry>)highestEntry;
- (id<JavaUtilMap_Entry>)removeLowest;
- (id<JavaUtilMap_Entry>)removeHighest;
- (id<JavaUtilMap_Entry>)getNearEntryWithId:(id)key
                                    withInt:(int)rel;
- (id)getNearKeyWithId:(id)key
               withInt:(int)rel;
- (BOOL)containsKeyWithId:(id)key;
- (id)getWithId:(id)key;
- (id)putWithId:(id)key
         withId:(id)value;
- (id)removeWithId:(id)key;
- (int)size;
- (BOOL)isEmpty;
- (BOOL)containsValueWithId:(id)value;
- (void)clear;
- (id)putIfAbsentWithId:(id)key
                 withId:(id)value;
- (BOOL)removeWithId:(id)key
              withId:(id)value;
- (BOOL)replaceWithId:(id)key
               withId:(id)oldValue
               withId:(id)newValue;
- (id)replaceWithId:(id)key
             withId:(id)value;
- (id<JavaUtilComparator>)comparator;
- (JavaUtilConcurrentConcurrentSkipListMap_SubMap *)newSubMapWithId:(id)fromKey
                                                        withBoolean:(BOOL)fromInclusive
                                                             withId:(id)toKey
                                                        withBoolean:(BOOL)toInclusive OBJC_METHOD_FAMILY_NONE;
- (JavaUtilConcurrentConcurrentSkipListMap_SubMap *)subMapWithId:(id)fromKey
                                                     withBoolean:(BOOL)fromInclusive
                                                          withId:(id)toKey
                                                     withBoolean:(BOOL)toInclusive;
- (JavaUtilConcurrentConcurrentSkipListMap_SubMap *)headMapWithId:(id)toKey
                                                      withBoolean:(BOOL)inclusive;
- (JavaUtilConcurrentConcurrentSkipListMap_SubMap *)tailMapWithId:(id)fromKey
                                                      withBoolean:(BOOL)inclusive;
- (JavaUtilConcurrentConcurrentSkipListMap_SubMap *)subMapWithId:(id)fromKey
                                                          withId:(id)toKey;
- (JavaUtilConcurrentConcurrentSkipListMap_SubMap *)headMapWithId:(id)toKey;
- (JavaUtilConcurrentConcurrentSkipListMap_SubMap *)tailMapWithId:(id)fromKey;
- (JavaUtilConcurrentConcurrentSkipListMap_SubMap *)descendingMap;
- (id<JavaUtilMap_Entry>)ceilingEntryWithId:(id)key;
- (id)ceilingKeyWithId:(id)key;
- (id<JavaUtilMap_Entry>)lowerEntryWithId:(id)key;
- (id)lowerKeyWithId:(id)key;
- (id<JavaUtilMap_Entry>)floorEntryWithId:(id)key;
- (id)floorKeyWithId:(id)key;
- (id<JavaUtilMap_Entry>)higherEntryWithId:(id)key;
- (id)higherKeyWithId:(id)key;
- (id)firstKey;
- (id)lastKey;
- (id<JavaUtilMap_Entry>)firstEntry;
- (id<JavaUtilMap_Entry>)lastEntry;
- (id<JavaUtilMap_Entry>)pollFirstEntry;
- (id<JavaUtilMap_Entry>)pollLastEntry;
- (id<JavaUtilNavigableSet>)keySet;
- (id<JavaUtilNavigableSet>)navigableKeySet;
- (id<JavaUtilCollection>)values;
- (id<JavaUtilSet>)entrySet;
- (id<JavaUtilNavigableSet>)descendingKeySet;
- (id<JavaUtilIterator>)keyIterator;
- (id<JavaUtilIterator>)valueIterator;
- (id<JavaUtilIterator>)entryIterator;
- (id)copyWithZone:(NSZone *)zone;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap_SubMap *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_SubMap, m_, JavaUtilConcurrentConcurrentSkipListMap *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_SubMap, lo_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_SubMap, hi_, id)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_SubMap, keySetView_, JavaUtilConcurrentConcurrentSkipListMap_KeySet *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_SubMap, entrySetView_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_SubMap, valuesView_, id<JavaUtilCollection>)

@interface JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapIter : NSObject < JavaUtilIterator > {
 @public
  JavaUtilConcurrentConcurrentSkipListMap_SubMap *this$0_;
  JavaUtilConcurrentConcurrentSkipListMap_Node *lastReturned_;
  JavaUtilConcurrentConcurrentSkipListMap_Node *next_;
  id nextValue_;
}

- (id)initWithJavaUtilConcurrentConcurrentSkipListMap_SubMap:(JavaUtilConcurrentConcurrentSkipListMap_SubMap *)outer$;
- (BOOL)hasNext;
- (void)advance;
- (void)ascend;
- (void)descend;
- (void)remove;
- (id)next;
- (void)copyAllFieldsTo:(JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapIter *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapIter, this$0_, JavaUtilConcurrentConcurrentSkipListMap_SubMap *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapIter, lastReturned_, JavaUtilConcurrentConcurrentSkipListMap_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapIter, next_, JavaUtilConcurrentConcurrentSkipListMap_Node *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapIter, nextValue_, id)

@interface JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapValueIterator : JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapIter {
}

- (id)next;
- (id)initWithJavaUtilConcurrentConcurrentSkipListMap_SubMap:(JavaUtilConcurrentConcurrentSkipListMap_SubMap *)outer$;
@end

@interface JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapKeyIterator : JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapIter {
}

- (id)next;
- (id)initWithJavaUtilConcurrentConcurrentSkipListMap_SubMap:(JavaUtilConcurrentConcurrentSkipListMap_SubMap *)outer$;
@end

@interface JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapEntryIterator : JavaUtilConcurrentConcurrentSkipListMap_SubMap_SubMapIter {
}

- (id<JavaUtilMap_Entry>)next;
- (id)initWithJavaUtilConcurrentConcurrentSkipListMap_SubMap:(JavaUtilConcurrentConcurrentSkipListMap_SubMap *)outer$;
@end

#endif // _JavaUtilConcurrentConcurrentSkipListMap_H_
