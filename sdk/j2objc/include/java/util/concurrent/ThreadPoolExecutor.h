//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/ThreadPoolExecutor.java
//
//  Created by tball on 11/23/13.
//

#ifndef _JavaUtilConcurrentThreadPoolExecutor_H_
#define _JavaUtilConcurrentThreadPoolExecutor_H_

@class JavaLangRuntimePermission;
@class JavaLangThread;
@class JavaLangThrowable;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentLocksReentrantLock;
@class JavaUtilConcurrentThreadPoolExecutor_Worker;
@class JavaUtilConcurrentTimeUnitEnum;
@class JavaUtilHashSet;
@protocol JavaUtilConcurrentBlockingQueue;
@protocol JavaUtilConcurrentLocksCondition;
@protocol JavaUtilConcurrentThreadFactory;
@protocol JavaUtilList;

#import "JreEmulation.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/AbstractExecutorService.h"
#include "java/util/concurrent/RejectedExecutionHandler.h"
#include "java/util/concurrent/locks/AbstractQueuedSynchronizer.h"

#define JavaUtilConcurrentThreadPoolExecutor_CAPACITY 536870911
#define JavaUtilConcurrentThreadPoolExecutor_COUNT_BITS 29
#define JavaUtilConcurrentThreadPoolExecutor_ONLY_ONE TRUE
#define JavaUtilConcurrentThreadPoolExecutor_RUNNING -536870912
#define JavaUtilConcurrentThreadPoolExecutor_SHUTDOWN 0
#define JavaUtilConcurrentThreadPoolExecutor_STOP 536870912
#define JavaUtilConcurrentThreadPoolExecutor_TERMINATED 1610612736
#define JavaUtilConcurrentThreadPoolExecutor_TIDYING 1073741824

@interface JavaUtilConcurrentThreadPoolExecutor : JavaUtilConcurrentAbstractExecutorService {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *ctl_;
  id<JavaUtilConcurrentBlockingQueue> workQueue_;
  JavaUtilConcurrentLocksReentrantLock *mainLock_;
  JavaUtilHashSet *workers_;
  id<JavaUtilConcurrentLocksCondition> termination_;
  int largestPoolSize_;
  long long int completedTaskCount_;
  id<JavaUtilConcurrentThreadFactory> threadFactory_;
  id<JavaUtilConcurrentRejectedExecutionHandler> handler_;
  long long int keepAliveTime_;
  BOOL allowCoreThreadTimeOut__;
  int corePoolSize_;
  int maximumPoolSize_;
}

+ (id<JavaUtilConcurrentRejectedExecutionHandler>)defaultHandler;
+ (JavaLangRuntimePermission *)shutdownPerm;
+ (int)runStateOfWithInt:(int)c;
+ (int)workerCountOfWithInt:(int)c;
+ (int)ctlOfWithInt:(int)rs
            withInt:(int)wc;
+ (BOOL)runStateLessThanWithInt:(int)c
                        withInt:(int)s;
+ (BOOL)runStateAtLeastWithInt:(int)c
                       withInt:(int)s;
+ (BOOL)isRunningWithInt:(int)c;
- (BOOL)compareAndIncrementWorkerCountWithInt:(int)expect;
- (BOOL)compareAndDecrementWorkerCountWithInt:(int)expect;
- (void)decrementWorkerCount;
- (void)advanceRunStateWithInt:(int)targetState;
- (void)tryTerminate;
- (void)checkShutdownAccess;
- (void)interruptWorkers;
- (void)interruptIdleWorkersWithBoolean:(BOOL)onlyOne;
- (void)interruptIdleWorkers;
- (void)clearInterruptsForTaskRun;
- (void)rejectWithJavaLangRunnable:(id<JavaLangRunnable>)command;
- (void)onShutdown;
- (BOOL)isRunningOrShutdownWithBoolean:(BOOL)shutdownOK;
- (id<JavaUtilList>)drainQueue;
- (BOOL)addWorkerWithJavaLangRunnable:(id<JavaLangRunnable>)firstTask
                          withBoolean:(BOOL)core;
- (void)processWorkerExitWithJavaUtilConcurrentThreadPoolExecutor_Worker:(JavaUtilConcurrentThreadPoolExecutor_Worker *)w
                                                             withBoolean:(BOOL)completedAbruptly;
- (id<JavaLangRunnable>)getTask;
- (void)runWorkerWithJavaUtilConcurrentThreadPoolExecutor_Worker:(JavaUtilConcurrentThreadPoolExecutor_Worker *)w;
- (id)initWithInt:(int)corePoolSize
          withInt:(int)maximumPoolSize
         withLong:(long long int)keepAliveTime
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit
withJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)workQueue;
- (id)initWithInt:(int)corePoolSize
          withInt:(int)maximumPoolSize
         withLong:(long long int)keepAliveTime
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit
withJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)workQueue
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;
- (id)initWithInt:(int)corePoolSize
          withInt:(int)maximumPoolSize
         withLong:(long long int)keepAliveTime
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit
withJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)workQueue
withJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)handler;
- (id)initWithInt:(int)corePoolSize
          withInt:(int)maximumPoolSize
         withLong:(long long int)keepAliveTime
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit
withJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)workQueue
withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory
withJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)handler;
- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;
- (void)shutdown;
- (id<JavaUtilList>)shutdownNow;
- (BOOL)isShutdown;
- (BOOL)isTerminating;
- (BOOL)isTerminated;
- (BOOL)awaitTerminationWithLong:(long long int)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
- (void)dealloc;
- (void)setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;
- (id<JavaUtilConcurrentThreadFactory>)getThreadFactory;
- (void)setRejectedExecutionHandlerWithJavaUtilConcurrentRejectedExecutionHandler:(id<JavaUtilConcurrentRejectedExecutionHandler>)handler;
- (id<JavaUtilConcurrentRejectedExecutionHandler>)getRejectedExecutionHandler;
- (void)setCorePoolSizeWithInt:(int)corePoolSize;
- (int)getCorePoolSize;
- (BOOL)prestartCoreThread;
- (void)ensurePrestart;
- (int)prestartAllCoreThreads;
- (BOOL)allowsCoreThreadTimeOut;
- (void)allowCoreThreadTimeOutWithBoolean:(BOOL)value;
- (void)setMaximumPoolSizeWithInt:(int)maximumPoolSize;
- (int)getMaximumPoolSize;
- (void)setKeepAliveTimeWithLong:(long long int)time
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
- (long long int)getKeepAliveTimeWithJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
- (id<JavaUtilConcurrentBlockingQueue>)getQueue;
- (BOOL)removeWithJavaLangRunnable:(id<JavaLangRunnable>)task;
- (void)purge;
- (int)getPoolSize;
- (int)getActiveCount;
- (int)getLargestPoolSize;
- (long long int)getTaskCount;
- (long long int)getCompletedTaskCount;
- (NSString *)description;
- (void)beforeExecuteWithJavaLangThread:(JavaLangThread *)t
                   withJavaLangRunnable:(id<JavaLangRunnable>)r;
- (void)afterExecuteWithJavaLangRunnable:(id<JavaLangRunnable>)r
                   withJavaLangThrowable:(JavaLangThrowable *)t;
- (void)terminated;
- (void)copyAllFieldsTo:(JavaUtilConcurrentThreadPoolExecutor *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentThreadPoolExecutor, ctl_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentThreadPoolExecutor, workQueue_, id<JavaUtilConcurrentBlockingQueue>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentThreadPoolExecutor, mainLock_, JavaUtilConcurrentLocksReentrantLock *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentThreadPoolExecutor, workers_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentThreadPoolExecutor, termination_, id<JavaUtilConcurrentLocksCondition>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentThreadPoolExecutor, threadFactory_, id<JavaUtilConcurrentThreadFactory>)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentThreadPoolExecutor, handler_, id<JavaUtilConcurrentRejectedExecutionHandler>)

#define JavaUtilConcurrentThreadPoolExecutor_Worker_serialVersionUID 6138294804551838833

@interface JavaUtilConcurrentThreadPoolExecutor_Worker : JavaUtilConcurrentLocksAbstractQueuedSynchronizer < JavaLangRunnable > {
 @public
  JavaUtilConcurrentThreadPoolExecutor *this$0_;
  JavaLangThread *thread_;
  id<JavaLangRunnable> firstTask_;
  long long int completedTasks_;
}

- (id)initWithJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)outer$
                              withJavaLangRunnable:(id<JavaLangRunnable>)firstTask;
- (void)run;
- (BOOL)isHeldExclusively;
- (BOOL)tryAcquireWithInt:(int)unused;
- (BOOL)tryReleaseWithInt:(int)unused;
- (void)lock;
- (BOOL)tryLock;
- (void)unlock;
- (BOOL)isLocked;
- (void)copyAllFieldsTo:(JavaUtilConcurrentThreadPoolExecutor_Worker *)other;
@end

J2OBJC_FIELD_SETTER(JavaUtilConcurrentThreadPoolExecutor_Worker, this$0_, JavaUtilConcurrentThreadPoolExecutor *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentThreadPoolExecutor_Worker, thread_, JavaLangThread *)
J2OBJC_FIELD_SETTER(JavaUtilConcurrentThreadPoolExecutor_Worker, firstTask_, id<JavaLangRunnable>)

@interface JavaUtilConcurrentThreadPoolExecutor_CallerRunsPolicy : NSObject < JavaUtilConcurrentRejectedExecutionHandler > {
}

- (id)init;
- (void)rejectedExecutionWithJavaLangRunnable:(id<JavaLangRunnable>)r
     withJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)e;
@end

@interface JavaUtilConcurrentThreadPoolExecutor_AbortPolicy : NSObject < JavaUtilConcurrentRejectedExecutionHandler > {
}

- (id)init;
- (void)rejectedExecutionWithJavaLangRunnable:(id<JavaLangRunnable>)r
     withJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)e;
@end

@interface JavaUtilConcurrentThreadPoolExecutor_DiscardPolicy : NSObject < JavaUtilConcurrentRejectedExecutionHandler > {
}

- (id)init;
- (void)rejectedExecutionWithJavaLangRunnable:(id<JavaLangRunnable>)r
     withJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)e;
@end

@interface JavaUtilConcurrentThreadPoolExecutor_DiscardOldestPolicy : NSObject < JavaUtilConcurrentRejectedExecutionHandler > {
}

- (id)init;
- (void)rejectedExecutionWithJavaLangRunnable:(id<JavaLangRunnable>)r
     withJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)e;
@end

#endif // _JavaUtilConcurrentThreadPoolExecutor_H_
