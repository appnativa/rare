//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/tmp/j2objc/guava/sources/com/google/common/util/concurrent/ForwardingExecutorService.java
//
//  Created by tball on 11/23/13.
//

#import "JreEmulation.h"

#if !ComGoogleCommonUtilConcurrentForwardingExecutorService_RESTRICT
#define ComGoogleCommonUtilConcurrentForwardingExecutorService_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonUtilConcurrentForwardingExecutorService_RESTRICT

#if !defined (_ComGoogleCommonUtilConcurrentForwardingExecutorService_) && (ComGoogleCommonUtilConcurrentForwardingExecutorService_INCLUDE_ALL || ComGoogleCommonUtilConcurrentForwardingExecutorService_INCLUDE)
#define _ComGoogleCommonUtilConcurrentForwardingExecutorService_

@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilList;

#define ComGoogleCommonCollectForwardingObject_RESTRICT 1
#define ComGoogleCommonCollectForwardingObject_INCLUDE 1
#include "com/google/common/collect/ForwardingObject.h"

#define JavaUtilConcurrentExecutorService_RESTRICT 1
#define JavaUtilConcurrentExecutorService_INCLUDE 1
#include "java/util/concurrent/ExecutorService.h"

@interface ComGoogleCommonUtilConcurrentForwardingExecutorService : ComGoogleCommonCollectForwardingObject < JavaUtilConcurrentExecutorService > {
}

- (id)init;
- (id<JavaUtilConcurrentExecutorService>)delegate;
- (BOOL)awaitTerminationWithLong:(long long int)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;
- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                           withLong:(long long int)timeout
                 withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;
- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                             withLong:(long long int)timeout
   withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
- (BOOL)isShutdown;
- (BOOL)isTerminated;
- (void)shutdown;
- (id<JavaUtilList>)shutdownNow;
- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;
- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task;
- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task;
- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                    withId:(id)result;
@end
#endif
