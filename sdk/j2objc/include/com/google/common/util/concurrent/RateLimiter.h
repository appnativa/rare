//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/tmp/j2objc/guava/sources/com/google/common/util/concurrent/RateLimiter.java
//
//  Created by tball on 11/23/13.
//

#import "JreEmulation.h"

#if !ComGoogleCommonUtilConcurrentRateLimiter_RESTRICT
#define ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonUtilConcurrentRateLimiter_RESTRICT
#if ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_$1_INCLUDE
#define ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_INCLUDE 1
#endif
#if ComGoogleCommonUtilConcurrentRateLimiter_Bursty_INCLUDE
#define ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE 1
#endif
#if ComGoogleCommonUtilConcurrentRateLimiter_WarmingUp_INCLUDE
#define ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE 1
#endif

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_

@class ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker;
@class JavaUtilConcurrentTimeUnitEnum;

@interface ComGoogleCommonUtilConcurrentRateLimiter : NSObject {
 @public
  ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *ticker_;
  long long int offsetNanos_;
  double storedPermits_;
  double maxPermits_;
  double stableIntervalMicros_;
  id mutex_;
  long long int nextFreeTicketMicros_;
}

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(double)permitsPerSecond;
+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)ticker
                                                                                                     withDouble:(double)permitsPerSecond;
+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(double)permitsPerSecond
                                                      withLong:(long long int)warmupPeriod
                            withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)ticker
                                                                                                     withDouble:(double)permitsPerSecond
                                                                                                       withLong:(long long int)warmupPeriod
                                                                             withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)timeUnit;
+ (ComGoogleCommonUtilConcurrentRateLimiter *)createBurstyWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)ticker
                                                                                                           withDouble:(double)permitsPerSecond
                                                                                                              withInt:(int)maxBurstSize;
- (id)initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)ticker;
- (void)setRateWithDouble:(double)permitsPerSecond;
- (void)doSetRateWithDouble:(double)permitsPerSecond
                 withDouble:(double)stableIntervalMicros;
- (double)getRate;
- (void)acquire;
- (void)acquireWithInt:(int)permits;
- (BOOL)tryAcquireWithLong:(long long int)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
- (BOOL)tryAcquireWithInt:(int)permits;
- (BOOL)tryAcquire;
- (BOOL)tryAcquireWithInt:(int)permits
                 withLong:(long long int)timeout
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
+ (void)checkPermitsWithInt:(int)permits;
- (long long int)reserveNextTicketWithDouble:(double)requiredPermits
                                    withLong:(long long int)nowMicros;
- (long long int)storedPermitsToWaitTimeWithDouble:(double)storedPermits
                                        withDouble:(double)permitsToTake;
- (void)resyncWithLong:(long long int)nowMicros;
- (long long int)readSafeMicros;
- (NSString *)description;
- (void)copyAllFieldsTo:(ComGoogleCommonUtilConcurrentRateLimiter *)other;
@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentRateLimiter, ticker_, ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentRateLimiter, mutex_, id)
#endif

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_WarmingUp_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_WarmingUp_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_WarmingUp_

@class ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker;
@class JavaUtilConcurrentTimeUnitEnum;

@interface ComGoogleCommonUtilConcurrentRateLimiter_WarmingUp : ComGoogleCommonUtilConcurrentRateLimiter {
 @public
  long long int warmupPeriodMicros_;
  double slope_;
  double halfPermits_;
}

- (id)initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)ticker
                                                             withLong:(long long int)warmupPeriod
                                   withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)timeUnit;
- (void)doSetRateWithDouble:(double)permitsPerSecond
                 withDouble:(double)stableIntervalMicros;
- (long long int)storedPermitsToWaitTimeWithDouble:(double)storedPermits
                                        withDouble:(double)permitsToTake;
- (double)permitsToTimeWithDouble:(double)permits;
- (void)copyAllFieldsTo:(ComGoogleCommonUtilConcurrentRateLimiter_WarmingUp *)other;
@end
#endif

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_Bursty_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_Bursty_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_Bursty_

@class ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker;

@interface ComGoogleCommonUtilConcurrentRateLimiter_Bursty : ComGoogleCommonUtilConcurrentRateLimiter {
}

- (id)initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)ticker;
- (void)doSetRateWithDouble:(double)permitsPerSecond
                 withDouble:(double)stableIntervalMicros;
- (long long int)storedPermitsToWaitTimeWithDouble:(double)storedPermits
                                        withDouble:(double)permitsToTake;
@end
#endif

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_

#define ComGoogleCommonBaseTicker_RESTRICT 1
#define ComGoogleCommonBaseTicker_INCLUDE 1
#include "com/google/common/base/Ticker.h"

@interface ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker : ComGoogleCommonBaseTicker {
}

+ (ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker *)SYSTEM_TICKER;
- (void)sleepMicrosUninterruptiblyWithLong:(long long int)micros;
- (id)init;
@end
#endif

#if !defined (_ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_$1_) && (ComGoogleCommonUtilConcurrentRateLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_$1_INCLUDE)
#define _ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_$1_

@interface ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker_$1 : ComGoogleCommonUtilConcurrentRateLimiter_SleepingTicker {
}

- (long long int)read;
- (void)sleepMicrosUninterruptiblyWithLong:(long long int)micros;
- (id)init;
@end
#endif
