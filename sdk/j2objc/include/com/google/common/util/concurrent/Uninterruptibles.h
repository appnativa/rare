//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/tmp/j2objc/guava/sources/com/google/common/util/concurrent/Uninterruptibles.java
//
//  Created by tball on 11/23/13.
//

#import "JreEmulation.h"

#if !ComGoogleCommonUtilConcurrentUninterruptibles_RESTRICT
#define ComGoogleCommonUtilConcurrentUninterruptibles_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonUtilConcurrentUninterruptibles_RESTRICT

#if !defined (_ComGoogleCommonUtilConcurrentUninterruptibles_) && (ComGoogleCommonUtilConcurrentUninterruptibles_INCLUDE_ALL || ComGoogleCommonUtilConcurrentUninterruptibles_INCLUDE)
#define _ComGoogleCommonUtilConcurrentUninterruptibles_

@class JavaLangThread;
@class JavaUtilConcurrentCountDownLatch;
@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaUtilConcurrentBlockingQueue;
@protocol JavaUtilConcurrentFuture;

@interface ComGoogleCommonUtilConcurrentUninterruptibles : NSObject {
}

+ (void)awaitUninterruptiblyWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch;
+ (BOOL)awaitUninterruptiblyWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
                                                        withLong:(long long int)timeout
                              withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
+ (void)joinUninterruptiblyWithJavaLangThread:(JavaLangThread *)toJoin;
+ (id)getUninterruptiblyWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;
+ (id)getUninterruptiblyWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                            withLong:(long long int)timeout
                  withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
+ (void)joinUninterruptiblyWithJavaLangThread:(JavaLangThread *)toJoin
                                     withLong:(long long int)timeout
           withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
+ (id)takeUninterruptiblyWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)queue;
+ (void)putUninterruptiblyWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)queue
                                                       withId:(id)element;
+ (void)sleepUninterruptiblyWithLong:(long long int)sleepFor
  withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)unit;
- (id)init;
@end
#endif
