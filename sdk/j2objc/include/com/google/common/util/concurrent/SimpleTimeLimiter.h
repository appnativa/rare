//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/tmp/j2objc/guava/sources/com/google/common/util/concurrent/SimpleTimeLimiter.java
//
//  Created by tball on 11/23/13.
//

#import "JreEmulation.h"

#if !ComGoogleCommonUtilConcurrentSimpleTimeLimiter_RESTRICT
#define ComGoogleCommonUtilConcurrentSimpleTimeLimiter_INCLUDE_ALL 1
#endif
#undef ComGoogleCommonUtilConcurrentSimpleTimeLimiter_RESTRICT

#if !defined (_ComGoogleCommonUtilConcurrentSimpleTimeLimiter_) && (ComGoogleCommonUtilConcurrentSimpleTimeLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentSimpleTimeLimiter_INCLUDE)
#define _ComGoogleCommonUtilConcurrentSimpleTimeLimiter_

@class IOSClass;
@class JavaLangException;
@class JavaLangReflectMethod;
@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaLangReflectInvocationHandler;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentExecutorService;
@protocol JavaUtilSet;

#define ComGoogleCommonUtilConcurrentTimeLimiter_RESTRICT 1
#define ComGoogleCommonUtilConcurrentTimeLimiter_INCLUDE 1
#include "com/google/common/util/concurrent/TimeLimiter.h"

@interface ComGoogleCommonUtilConcurrentSimpleTimeLimiter : NSObject < ComGoogleCommonUtilConcurrentTimeLimiter > {
 @public
  id<JavaUtilConcurrentExecutorService> executor_;
}

- (id)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor;
- (id)init;
- (id)newProxyWithId:(id)target
        withIOSClass:(IOSClass *)interfaceType
            withLong:(long long int)timeoutDuration
withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)timeoutUnit OBJC_METHOD_FAMILY_NONE;
- (id)callWithTimeoutWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                           withLong:(long long int)timeoutDuration
                 withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)timeoutUnit
                                        withBoolean:(BOOL)amInterruptible;
+ (JavaLangException *)throwCauseWithJavaLangException:(JavaLangException *)e
                                           withBoolean:(BOOL)combineStackTraces;
+ (id<JavaUtilSet>)findInterruptibleMethodsWithIOSClass:(IOSClass *)interfaceType;
+ (BOOL)declaresInterruptedExWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;
+ (id)newProxyWithIOSClass:(IOSClass *)interfaceType
withJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)handler OBJC_METHOD_FAMILY_NONE;
- (void)copyAllFieldsTo:(ComGoogleCommonUtilConcurrentSimpleTimeLimiter *)other;
@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSimpleTimeLimiter, executor_, id<JavaUtilConcurrentExecutorService>)
#endif

#if !defined (_ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1_) && (ComGoogleCommonUtilConcurrentSimpleTimeLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1_INCLUDE)
#define _ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1_

@class ComGoogleCommonUtilConcurrentSimpleTimeLimiter;
@class IOSObjectArray;
@class JavaLangReflectMethod;
@class JavaUtilConcurrentTimeUnitEnum;
@protocol JavaUtilSet;

#define JavaLangReflectInvocationHandler_RESTRICT 1
#define JavaLangReflectInvocationHandler_INCLUDE 1
#include "java/lang/reflect/InvocationHandler.h"

@interface ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1 : NSObject < JavaLangReflectInvocationHandler > {
 @public
  ComGoogleCommonUtilConcurrentSimpleTimeLimiter *this$0_;
  id val$target_;
  long long int val$timeoutDuration_;
  JavaUtilConcurrentTimeUnitEnum *val$timeoutUnit_;
  id<JavaUtilSet> val$interruptibleMethods_;
}

- (id)invokeWithId:(id)obj
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)args;
- (id)initWithComGoogleCommonUtilConcurrentSimpleTimeLimiter:(ComGoogleCommonUtilConcurrentSimpleTimeLimiter *)outer$
                                                      withId:(id)capture$0
                                                    withLong:(long long int)capture$1
                          withJavaUtilConcurrentTimeUnitEnum:(JavaUtilConcurrentTimeUnitEnum *)capture$2
                                             withJavaUtilSet:(id<JavaUtilSet>)capture$3;
@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1, this$0_, ComGoogleCommonUtilConcurrentSimpleTimeLimiter *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1, val$target_, id)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1, val$timeoutUnit_, JavaUtilConcurrentTimeUnitEnum *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1, val$interruptibleMethods_, id<JavaUtilSet>)
#endif

#if !defined (_ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1_$1_) && (ComGoogleCommonUtilConcurrentSimpleTimeLimiter_INCLUDE_ALL || ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1_$1_INCLUDE)
#define _ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1_$1_

@class ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1;
@class IOSObjectArray;
@class JavaLangReflectMethod;

#define JavaUtilConcurrentCallable_RESTRICT 1
#define JavaUtilConcurrentCallable_INCLUDE 1
#include "java/util/concurrent/Callable.h"

@interface ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1_$1 : NSObject < JavaUtilConcurrentCallable > {
 @public
  ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1 *this$0_;
  JavaLangReflectMethod *val$method_;
  IOSObjectArray *val$args_;
}

- (id)call;
- (id)initWithComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1:(ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1 *)outer$
                                      withJavaLangReflectMethod:(JavaLangReflectMethod *)capture$0
                                              withNSObjectArray:(IOSObjectArray *)capture$1;
@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1_$1, this$0_, ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1 *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1_$1, val$method_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSimpleTimeLimiter_$1_$1, val$args_, IOSObjectArray *)
#endif
