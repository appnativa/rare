/**************************************************************************
 * EmptyText.java - Wed Feb 17 10:42:11 PST 2016
 *
 * Copyright (c) appNativa
 *
 * All rights reserved.
 *
 * Generated by the Sparse Notation(tm) To Java Compiler v1.0
 * Note 1: Code entered after the "//USER_IMPORTS_AND_COMMENTS_MARK{}" comment and before the class declaration will be preserved.
 * Note 2: Code entered out side of the other   comment blocks will be preserved
 * Note 3: If you edit the automatically generated comments and want to preserve your edits remove the //GENERATED_COMMENT{} tags
 */

package com.appnativa.rare.spot;

import com.appnativa.spot.*;

//USER_IMPORTS_AND_COMMENTS_MARK{}


//GENERATED_COMMENT{}
/**
 * This class represents configuration information for
 * specifying the text to display whana widget is empty
 *
 * @author Don DeCoteau
 * @version 2.0
 */  
public class EmptyText extends SPOTSequence {
  //GENERATED_MEMBERS{

  /** Appearance: optional text to display in the table when the table is empty */
  public SPOTPrintableString value = new SPOTPrintableString();

  /** Appearance~font~reload: the font to use to display the specified empty table text */
  protected Font font = null;

  /** Appearance~color: the color to use to display the specified empty table text */
  public SPOTPrintableString fgColor = new SPOTPrintableString(null, 0, 64, true);

  //}GENERATED_MEMBERS

  //GENERATED_METHODS{

  /**
   * Creates a new optional <code>EmptyText</code> object.
   */
  public EmptyText()  {
    this(true);
  }

  /**
   * Creates a new <code>EmptyText</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   */
  public EmptyText( boolean optional ) {
    super( optional, false );
    spot_setElements();
  }

  /**
   * Creates a new <code>EmptyText</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   * @param setElements  <code>true</code> if a call to setElements should be made; <code>false</code> otherwise)
   */
  protected EmptyText( boolean optional,boolean setElements ) {
    super( optional, setElements );
  }

  /**
   * Adds elements to the object elements map
   *
   */
  protected void spot_setElements()  {
    this.elementsSizeHint  +=3;
    this.attributeSizeHint +=1;
    super.spot_setElements();
    spot_defineAttribute("showBeforeLoad",null);
    spot_addElement( "value", value );
    spot_addElement( "font", font );
    spot_addElement( "fgColor", fgColor );
  }

  /**
   * Gets the font element
   * 
   * @return the font element or null if a reference was never created
   */
  public Font getFont() { return font; }

  /**
   * Gets the reference to the font element
   * A reference is created if necessary
   * 
   * @return the reference to the font element
   */
  public Font getFontReference() {
    if ( font == null ) {
      font = new Font(true);
      super.spot_setReference( "font" , font);
    }
    return font;
  }

  /**
   * Sets the reference to the font element
   * @param reference the reference ( can be null)
   * 
   * @throws ClassCastException if the parameter is not valid
   */
  public void setFont(iSPOTElement reference) throws ClassCastException {
    font = (Font)reference;
    spot_setReference( "font" ,reference);
  }

  //}GENERATED_METHODS

  //GENERATED_INNER_CLASSES{

  //}GENERATED_INNER_CLASSES
}
