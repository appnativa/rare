/**************************************************************************
 * TreeTable.java - Wed Nov 18 17:50:58 PST 2015
 *
 * Copyright (c) appNativa
 *
 * All rights reserved.
 *
 * Generated by the Sparse Notation(tm) To Java Compiler v1.0
 * Note 1: Code entered after the "//USER_IMPORTS_AND_COMMENTS_MARK{}" comment and before the class declaration will be preserved.
 * Note 2: Code entered out side of the other   comment blocks will be preserved
 * Note 3: If you edit the automatically generated comments and want to preserve your edits remove the //GENERATED_COMMENT{} tags
 */

package com.appnativa.rare.spot;

import com.appnativa.spot.*;

//USER_IMPORTS_AND_COMMENTS_MARK{}


//GENERATED_COMMENT{}
/**
 * This class represents configuration information for a widget
 * that displays and manages multiple rows and columns of data
 * <p>
 * as well as providing functionality for expanding and
 * contracting rows.
 * </p>
 *
 * @author Don DeCoteau
 * @version 2.0
 */  
public class TreeTable extends Table {
  //GENERATED_MEMBERS{

  /** Design: the column that is expandable */
  public SPOTInteger expandableColumn = new SPOTInteger(null, 0, null, 0, false);

  /** Design~expandAll: whether all of the table rows should be initially expanded */
  public SPOTBoolean expandAll = new SPOTBoolean(null, false, false );

  /** Appearance: whether root node handles should be shown */
  public SPOTBoolean showRootHandles = new SPOTBoolean(null, true, false );

  /** Appearance: whether parent items are selectable */
  public SPOTBoolean parentItemsSelectable = new SPOTBoolean(null, true, false );

//GENERATED_COMMENT{}
  /** Appearance: whether parent items expand/collapse only when the twisty is clicked (double tap always toggles) selectable */ 
  public SPOTBoolean toggleOnTwistyOnly = new SPOTBoolean();

  /** Appearance: the number of pixels to use to indent a child node from a parent */
  public SPOTInteger indentBy = new SPOTInteger(null, -1, 100, 16, false);

  /** Behavior: whether to automatically scroll rows of a newly expanded branch into view */
  public SPOTBoolean autoScrollOnExpansion = new SPOTBoolean(null, true, false );

  //}GENERATED_MEMBERS

  //GENERATED_METHODS{

  /**
   * Creates a new optional <code>TreeTable</code> object.
   */
  public TreeTable()  {
    this(true);
  }

  /**
   * Creates a new <code>TreeTable</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   */
  public TreeTable( boolean optional ) {
    super( optional, false );
    spot_setElements();
  }

  /**
   * Creates a new <code>TreeTable</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   * @param setElements  <code>true</code> if a call to setElements should be made; <code>false</code> otherwise)
   */
  protected TreeTable( boolean optional,boolean setElements ) {
    super( optional, setElements );
  }

  /**
   * Adds elements to the object elements map
   *
   */
  protected void spot_setElements()  {
    this.elementsSizeHint  +=7;
    this.attributeSizeHint +=4;
    super.spot_setElements();
    spot_defineAttribute("onHasCollapsed",null);
    spot_defineAttribute("onHasExpanded",null);
    spot_defineAttribute("onWillExpand",null);
    spot_defineAttribute("onWillCollapse",null);
    spot_addElement( "expandableColumn", expandableColumn );
    spot_addElement( "expandAll", expandAll );
    spot_addElement( "showRootHandles", showRootHandles );
    spot_addElement( "parentItemsSelectable", parentItemsSelectable );
    spot_addElement( "toggleOnTwistyOnly", toggleOnTwistyOnly );
    spot_addElement( "indentBy", indentBy );
    spot_addElement( "autoScrollOnExpansion", autoScrollOnExpansion );
  }

  //}GENERATED_METHODS

  //GENERATED_INNER_CLASSES{

  //}GENERATED_INNER_CLASSES
}
