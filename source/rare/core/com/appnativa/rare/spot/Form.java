/**************************************************************************
 * Form.java - Wed Nov 18 17:50:58 PST 2015
 *
 * Copyright (c) appNativa
 *
 * All rights reserved.
 *
 * Generated by the Sparse Notation(tm) To Java Compiler v1.0
 * Note 1: Code entered after the "//USER_IMPORTS_AND_COMMENTS_MARK{}" comment and before the class declaration will be preserved.
 * Note 2: Code entered out side of the other   comment blocks will be preserved
 * Note 3: If you edit the automatically generated comments and want to preserve your edits remove the //GENERATED_COMMENT{} tags
 */

package com.appnativa.rare.spot;

import com.appnativa.spot.*;

//USER_IMPORTS_AND_COMMENTS_MARK{}


//GENERATED_COMMENT{}
/**
 * This class represents the configuration information for a
 * form viewer.
 *
 * @author Don DeCoteau
 * @version 2.0
 */  
public class Form extends GroupBox {
  //GENERATED_MEMBERS{

  /** Behavior: whether the pane should act as a form viewer (if false widgets will be registered with the next higher up form viewer) */
  public SPOTBoolean actAsFormViewer = new SPOTBoolean(null, true, false );

  /** a list of name/value pairs that are to be submitted along with widget values. The default format is a set of name/value pairs separated by a semi-colon */
  public SPOTPrintableString submitAttributes = new SPOTPrintableString();

  /** Behavior: whether initial widget values should be retained so that the form can be reset to it's initial state */
  public SPOTBoolean retainInitialFieldValues = new SPOTBoolean(null, true, false );

  /** the name of the default button for use when the form is the main viewer for a dialog or window */
  public SPOTPrintableString defaultButtonName = new SPOTPrintableString();

  //}GENERATED_MEMBERS

  //GENERATED_METHODS{

  /**
   * Creates a new optional <code>Form</code> object.
   */
  public Form()  {
    this(true);
  }

  /**
   * Creates a new <code>Form</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   */
  public Form( boolean optional ) {
    super( optional, false );
    spot_setElements();
  }

  /**
   * Creates a new <code>Form</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   * @param setElements  <code>true</code> if a call to setElements should be made; <code>false</code> otherwise)
   */
  protected Form( boolean optional,boolean setElements ) {
    super( optional, setElements );
  }

  /**
   * Adds elements to the object elements map
   *
   */
  protected void spot_setElements()  {
    this.elementsSizeHint  +=4;
    this.attributeSizeHint +=2;
    super.spot_setElements();
    spot_defineAttribute("onSubmit",null);
    spot_defineAttribute("onReset",null);
    spot_addElement( "actAsFormViewer", actAsFormViewer );
    spot_addElement( "submitAttributes", submitAttributes );
    submitAttributes.spot_defineAttribute("mimeType",null);
    spot_addElement( "retainInitialFieldValues", retainInitialFieldValues );
    spot_addElement( "defaultButtonName", defaultButtonName );
  }

  //}GENERATED_METHODS

  //GENERATED_INNER_CLASSES{

  //}GENERATED_INNER_CLASSES
}
