//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple-coreplot/com/appnativa/rare/ui/chart/coreplot/ChartHandler.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "IOSDoubleArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/platform/EventHelper.h"
#include "com/appnativa/rare/platform/apple/ui/view/LabelView.h"
#include "com/appnativa/rare/platform/apple/ui/view/View.h"
#include "com/appnativa/rare/ui/ActionComponent.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/Container.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/Location.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontMetrics.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIPoint.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/aBorderPanel.h"
#include "com/appnativa/rare/ui/chart/ChartAxis.h"
#include "com/appnativa/rare/ui/chart/ChartDataItem.h"
#include "com/appnativa/rare/ui/chart/ChartDefinition.h"
#include "com/appnativa/rare/ui/chart/aChartHandler.h"
#include "com/appnativa/rare/ui/chart/coreplot/ChartHandler.h"
#include "com/appnativa/rare/ui/chart/coreplot/ChartPlot.h"
#include "com/appnativa/rare/ui/chart/coreplot/ChartView.h"
#include "com/appnativa/rare/ui/event/MouseEvent.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/listener/iMouseListener.h"
#include "com/appnativa/util/iFilterableList.h"
#include "java/lang/Math.h"
#include "java/util/List.h"
#import "RARECPTLegendView.h"

@implementation RAREChartHandler

- (id)init {
  return [super init];
}

- (id<RAREiPlatformComponent>)createChartWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                            withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartHandler_ChartInfo *ci = (RAREChartHandler_ChartInfo *) check_class_cast([((RAREChartDefinition *) nil_chk(cd)) getChartHandlerInfo], [RAREChartHandler_ChartInfo class]);
  RAREChartView *chart = (ci == nil) ? nil : ci->chart_;
  if (chart == nil) {
    chart = [[RAREChartView alloc] initWithRAREChartHandler:self];
    ci = [[RAREChartHandler_ChartInfo alloc] initWithRAREChartView:chart];
  }
  else {
    [((RAREChartHandler_ChartInfo *) nil_chk(ci)) resetWithRAREChartView:chart];
    [chart resetWithRAREChartDefinition:cd withBoolean:YES];
  }
  ((RAREChartHandler_ChartInfo *) nil_chk(ci))->domainType_ = [RAREaChartHandler getDataTypeWithRAREChartAxis:[cd getDomainAxis]];
  [cd setChartHandlerInfoWithId:ci];
  RAREChartHandler_ChartPanel *panel = (RAREChartHandler_ChartPanel *) check_class_cast(chartPanel, [RAREChartHandler_ChartPanel class]);
  if (panel == nil) {
    panel = [[RAREChartHandler_ChartPanel alloc] initWithRAREChartHandler:self withRAREChartDefinition:cd withRAREChartView:chart];
  }
  else {
    [panel setChartWithRAREChartDefinition:cd withRAREChartView:chart];
  }
  int len = [cd getSeriesCount];
  if (len > 0) {
    [self createPlotsWithRAREChartView:chart withRAREChartDefinition:cd];
    int rowCount = (int) [JavaLangMath sqrtWithDouble:len];
    int columnCount = rowCount;
    if (rowCount * columnCount < len) {
      columnCount++;
    }
    if (rowCount * columnCount < len) {
      rowCount++;
    }
    if (len < 5) {
      rowCount = 1;
    }
    if ([cd isShowLegends]) {
      RAREComponent *c;
      switch ([[cd getLegendSide] ordinal]) {
        case RARELocation_TOP:
        c = [self createLegendComponentWithRAREChartHandler_ChartPanel:panel withRAREChartHandler_ChartInfo:ci withRAREChartDefinition:cd];
        [((RAREComponent *) nil_chk(c)) putClientPropertyWithNSString:[RAREiConstants RARE_HALIGN_PROPERTY] withId:[RARERenderableDataItem_HorizontalAlignEnum CENTER]];
        [((RAREChartHandler_ChartPanel *) nil_chk(panel)) setTopViewWithRAREiPlatformComponent:c];
        break;
        case RARELocation_BOTTOM:
        c = [self createLegendComponentWithRAREChartHandler_ChartPanel:panel withRAREChartHandler_ChartInfo:ci withRAREChartDefinition:cd];
        [((RAREComponent *) nil_chk(c)) putClientPropertyWithNSString:[RAREiConstants RARE_HALIGN_PROPERTY] withId:[RARERenderableDataItem_HorizontalAlignEnum CENTER]];
        [((RAREChartHandler_ChartPanel *) nil_chk(panel)) setBottomViewWithRAREiPlatformComponent:c];
        break;
        case RARELocation_LEFT:
        c = [self createLegendComponentWithRAREChartHandler_ChartPanel:panel withRAREChartHandler_ChartInfo:ci withRAREChartDefinition:cd];
        [((RAREComponent *) nil_chk(c)) putClientPropertyWithNSString:[RAREiConstants RARE_VALIGN_PROPERTY] withId:[RARERenderableDataItem_VerticalAlignEnum CENTER]];
        [((RAREChartHandler_ChartPanel *) nil_chk(panel)) setLeftViewWithRAREiPlatformComponent:c];
        break;
        default:
        c = [self createLegendComponentWithRAREChartHandler_ChartPanel:panel withRAREChartHandler_ChartInfo:ci withRAREChartDefinition:cd];
        [((RAREComponent *) nil_chk(c)) putClientPropertyWithNSString:[RAREiConstants RARE_VALIGN_PROPERTY] withId:[RARERenderableDataItem_VerticalAlignEnum CENTER]];
        [((RAREChartHandler_ChartPanel *) nil_chk(panel)) setRightViewWithRAREiPlatformComponent:c];
        break;
      }
    }
  }
  id<JavaUtilList> markers = [cd getRangeMarkers];
  len = (markers == nil) ? 0 : [markers size];
  for (int i = 0; i < len; i++) {
    [self createMarkerWithRAREChartDefinition:cd withRAREChartView:chart withRAREChartDataItem:[((id<JavaUtilList>) nil_chk(markers)) getWithInt:i] withBoolean:YES];
  }
  markers = [cd getDomainMarkers];
  len = (markers == nil) ? 0 : [markers size];
  for (int i = 0; i < len; i++) {
    [self createMarkerWithRAREChartDefinition:cd withRAREChartView:chart withRAREChartDataItem:[((id<JavaUtilList>) nil_chk(markers)) getWithInt:i] withBoolean:NO];
  }
  return panel;
}

- (id<RAREiPlatformComponent>)dataChangedWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                            withRAREChartDefinition:(RAREChartDefinition *)cd {
  id<RAREiPlatformComponent> c = [self createChartWithRAREiPlatformComponent:chartPanel withRAREChartDefinition:cd];
  return c;
}

- (void)disposeWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                  withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartHandler_ChartInfo *ci = (cd == nil) ? nil : (RAREChartHandler_ChartInfo *) check_class_cast([cd getChartHandlerInfo], [RAREChartHandler_ChartInfo class]);
  [super disposeWithRAREiPlatformComponent:chartPanel withRAREChartDefinition:cd];
  if (ci != nil) {
    [ci dispose];
  }
}

- (void)itemChangedWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                      withRAREChartDefinition:(RAREChartDefinition *)cd
                        withRAREChartDataItem:(RAREChartDataItem *)item {
  int index = [((id<JavaUtilList>) nil_chk([((RAREChartDefinition *) nil_chk(cd)) getSeries])) indexOfWithId:item];
  if (index != -1) {
    RAREChartView *chart = [self getChartViewWithRAREiPlatformComponent:chartPanel];
    if (chart != nil) {
      [chart reloadSeriesWithInt:index];
    }
  }
}

- (RAREChartDataItem *)itemFromLocationWithRAREChartDefinition:(RAREChartDefinition *)cd
                                                       withInt:(int)x
                                                       withInt:(int)y {
  RAREChartHandler_ChartInfo *ci = (RAREChartHandler_ChartInfo *) check_class_cast([((RAREChartDefinition *) nil_chk(cd)) getChartHandlerInfo], [RAREChartHandler_ChartInfo class]);
  RAREChartView *chart = (ci == nil) ? nil : ci->chart_;
  if (chart != nil) {
    RAREUIPoint *p = [chart getLocationWithRAREUIPoint:nil];
    if (p != nil) {
      x -= p->x_;
      y -= p->y_;
    }
    [chart rowAndColumnAtWithFloat:x withFloat:y withRAREUIPoint:p];
    if ((((RAREUIPoint *) nil_chk(p))->y_ > -1) && (p->x_ > -1) && (p->y_ < [cd getSeriesCount])) {
      int n = (int) p->x_ + [cd getStartColumn];
      RAREChartDataItem *series = [cd getSeriesWithInt:(int) p->y_];
      if (series != nil) {
        int end = [cd getEndColumn];
        if (end > 0) {
          end++;
        }
        else {
          end = [series size];
        }
        if (n < end) {
          return (RAREChartDataItem *) check_class_cast([((RAREChartDataItem *) nil_chk([cd getSeriesWithInt:(int) p->y_])) getWithInt:n], [RAREChartDataItem class]);
        }
      }
    }
  }
  return nil;
}

- (void)unzoomWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel {
}

- (void)updateRangeAxisWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                          withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartView *chart = [self getChartViewWithRAREiPlatformComponent:chartPanel];
  if (chart != nil) {
    RAREChartAxis *ai = [((RAREChartDefinition *) nil_chk(cd)) getRangeAxis];
    double lo = 0;
    double hi = 0;
    RARERenderableDataItem *di = [((RAREChartAxis *) nil_chk(ai)) getLowerBounds];
    if (di != nil) {
      lo = [di doubleValue];
    }
    di = [ai getUpperBounds];
    if (di != nil) {
      hi = [di doubleValue];
    }
    [chart setAxisRangeWithRAREChartAxis:ai withDouble:lo withDouble:hi withDouble:0];
  }
}

- (void)updatesCompletedWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                           withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartView *chart = [self getChartViewWithRAREiPlatformComponent:chartPanel];
  if (chart != nil) {
    [chart reloadAllPlots];
  }
}

- (void)updatesPendingWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                         withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)setDomainLabelWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                         withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartView *chart = [self getChartViewWithRAREiPlatformComponent:chartPanel];
  if (chart != nil) {
    [chart updateAxisWithBoolean:NO withBoolean:YES withBoolean:NO];
  }
}

- (void)setDomainLabelAngelWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                              withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartView *chart = [self getChartViewWithRAREiPlatformComponent:chartPanel];
  if (chart != nil) {
    [chart updateAxisWithBoolean:NO withBoolean:NO withBoolean:YES];
  }
}

- (void)setRangeLabelWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                        withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartView *chart = [self getChartViewWithRAREiPlatformComponent:chartPanel];
  if (chart != nil) {
    [chart updateAxisWithBoolean:YES withBoolean:YES withBoolean:NO];
  }
}

- (void)setRangeLabelAngelWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                             withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartView *chart = [self getChartViewWithRAREiPlatformComponent:chartPanel];
  if (chart != nil) {
    [chart updateAxisWithBoolean:YES withBoolean:NO withBoolean:YES];
  }
}

- (void)setShowDomainLabelsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                              withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartView *chart = [self getChartViewWithRAREiPlatformComponent:chartPanel];
  if (chart != nil) {
    [chart updateAxisWithBoolean:NO withBoolean:NO withBoolean:NO];
  }
}

- (void)setShowPlotValuesWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                            withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartView *chart = [self getChartViewWithRAREiPlatformComponent:chartPanel];
  BOOL show = [((RAREChartDefinition *) nil_chk(cd)) isShowPlotLabels];
  [((RAREChartHandler_ChartInfo *) check_class_cast([cd getChartHandlerInfo], [RAREChartHandler_ChartInfo class])) setShowPointLabelsWithBoolean:show];
  if (chart != nil) {
    [chart setShowPlotValuesWithBoolean:show];
  }
}

- (void)setShowRangeLabelsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                             withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartView *chart = [self getChartViewWithRAREiPlatformComponent:chartPanel];
  if (chart != nil) {
    [chart updateAxisWithBoolean:YES withBoolean:NO withBoolean:NO];
  }
}

- (RAREUIImage *)getChartImageWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                 withRAREChartDefinition:(RAREChartDefinition *)cd {
  return nil;
}

- (RAREUIDimension *)getPlotAreaSizeWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                       withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartHandler_ChartInfo *ci = (RAREChartHandler_ChartInfo *) check_class_cast([((RAREChartDefinition *) nil_chk(cd)) getChartHandlerInfo], [RAREChartHandler_ChartInfo class]);
  return (ci == nil) ? [[RAREUIDimension alloc] init] : [((RAREChartView *) nil_chk(ci->chart_)) getPlotAreaSize];
}

- (id<RAREiPlatformComponent>)getLegendComponentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                                   withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartHandler_ChartInfo *ci = (RAREChartHandler_ChartInfo *) check_class_cast([((RAREChartDefinition *) nil_chk(cd)) getChartHandlerInfo], [RAREChartHandler_ChartInfo class]);
  return (ci == nil) ? nil : ci->legend_;
}

- (BOOL)isLegendSeperate {
  return YES;
}

- (RAREComponent *)createLegendComponentWithRAREChartHandler_ChartPanel:(RAREChartHandler_ChartPanel *)panel
                                         withRAREChartHandler_ChartInfo:(RAREChartHandler_ChartInfo *)ci
                                                withRAREChartDefinition:(RAREChartDefinition *)cd {
  if (((RAREChartHandler_ChartInfo *) nil_chk(ci))->legend_ != nil) {
    [((RAREChartHandler_ChartPanel *) nil_chk(panel)) removeWithRAREiPlatformComponent:ci->legend_];
    [ci->legend_ dispose];
  }
  RAREChartHandler_ChartLegend *c = [[RAREChartHandler_ChartLegend alloc] initWithRAREChartHandler:self withRAREView:[((RAREChartView *) nil_chk(ci->chart_)) createLegendView] withRAREChartDefinition:cd];
  ci->legend_ = c;
  return c;
}

- (void)createMarkerWithRAREChartDefinition:(RAREChartDefinition *)cd
                          withRAREChartView:(RAREChartView *)view
                      withRAREChartDataItem:(RAREChartDataItem *)item
                                withBoolean:(BOOL)rangeMarker {
  RAREUIColor *fg = [((RAREChartDataItem *) nil_chk(item)) getForeground];
  if (fg == nil) {
    fg = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Chart.markerForeground"];
  }
  if (fg == nil) {
    fg = [self getTextColorWithRAREChartDefinition:cd];
  }
  RAREUIColor *bg = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Chart.markerBackground"];
  if (bg == nil) {
    bg = [((RAREUIColor *) nil_chk([RAREUIColor GRAY])) alphaWithInt:128];
  }
  [((RAREChartView *) nil_chk(view)) addMarkerWithRAREChartDataItem:item withRAREUIColor:bg withRAREUIColor:fg withBoolean:rangeMarker];
}

- (void)createPlotsWithRAREChartView:(RAREChartView *)chart
             withRAREChartDefinition:(RAREChartDefinition *)cd {
  RAREChartHandler_ChartInfo *ci = (RAREChartHandler_ChartInfo *) check_class_cast([((RAREChartDefinition *) nil_chk(cd)) getChartHandlerInfo], [RAREChartHandler_ChartInfo class]);
  [((RAREChartHandler_ChartInfo *) nil_chk(ci)) popularSeriesDataAndCaluclateRangesWithRAREaChartHandler:self withRAREChartDefinition:cd];
  [ci setShowPointLabelsWithBoolean:[cd isShowPlotLabels]];
  id<JavaUtilList> seriesData = ci->seriesData_;
  int len = (seriesData == nil) ? 0 : [seriesData size];
  if (len > 0) {
    RAREUIFont *f = [self getAxisLabelFontWithRAREChartAxis:[cd getRangeAxis]];
    RAREUIFontMetrics *fm = [RAREUIFontMetrics getMetricsWithRAREUIFont:f];
    tickSize_ = [RAREFontUtils getFontHeightWithRAREUIFont:f withBoolean:YES];
    for (int i = 0; i < len; i++) {
      RAREaChartHandler_SeriesData *data = [((id<JavaUtilList>) nil_chk(seriesData)) getWithInt:i];
      RAREChartPlot *plot = [((RAREChartView *) nil_chk(chart)) createPlotWithRAREaChartHandler_SeriesData:data withBoolean:ci->categoryDomain_];
      if (plot == nil) {
        continue;
      }
      [chart addPlotWithRAREChartPlot:plot];
      ((RAREaChartHandler_SeriesData *) nil_chk(data))->linkedData_ = plot;
    }
    RAREChartHandler_LabelsManager *dm;
    IOSDoubleArray *xrange = ci->xAxisValues_;
    IOSDoubleArray *yrange = ci->yAxisValues_;
    if (ci->categoryDomain_) {
      IOSObjectArray *data = [ci createLabelDataWithRAREChartDefinition:cd withRAREUIFontMetrics:fm withBoolean:YES];
      (*IOSDoubleArray_GetRef(nil_chk(xrange), 0)) = -1;
      (*IOSDoubleArray_GetRef(xrange, 1)) = (data == nil) ? 0 : (int) [data count];
      (*IOSDoubleArray_GetRef(xrange, 2)) = 1;
      dm = [[RAREChartHandler_LabelsManager alloc] initWithRAREChartHandler:self withRAREChartView:chart withRAREaChartHandler_LabelDataArray:data];
    }
    else {
      dm = [[RAREChartHandler_LabelsManager alloc] initWithRAREChartHandler:self withRAREChartView:chart withBoolean:YES];
    }
    RAREChartHandler_LabelsManager *rm = [[RAREChartHandler_LabelsManager alloc] initWithRAREChartHandler:self withRAREChartView:chart withBoolean:NO];
    ci->domainLabels_ = dm;
    ci->rangeLabels_ = rm;
    [((RAREChartView *) nil_chk(chart)) setAxisRangesWithDouble:IOSDoubleArray_Get(nil_chk(xrange), 0) withDouble:IOSDoubleArray_Get(xrange, 1) withDouble:IOSDoubleArray_Get(xrange, 2) withDouble:IOSDoubleArray_Get(nil_chk(yrange), 0) withDouble:IOSDoubleArray_Get(yrange, 1) withDouble:IOSDoubleArray_Get(yrange, 2) withRAREChartHandler_LabelsManager:dm withRAREChartHandler_LabelsManager:rm];
  }
}

- (RAREChartView *)getChartViewWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel {
  return (RAREChartView *) check_class_cast([((id<RAREiPlatformComponent>) nil_chk([((RAREChartHandler_ChartPanel *) check_class_cast(chartPanel, [RAREChartHandler_ChartPanel class])) getCenterView])) getView], [RAREChartView class]);
}

- (void)reloadChartsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                       withRAREChartDefinition:(RAREChartDefinition *)cd {
  (void) [self dataChangedWithRAREiPlatformComponent:chartPanel withRAREChartDefinition:cd];
}

- (void)copyAllFieldsTo:(RAREChartHandler *)other {
  [super copyAllFieldsTo:other];
  other->tickSize_ = tickSize_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createChartWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "dataChangedWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "itemFromLocationWithRAREChartDefinition:withInt:withInt:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "getChartImageWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREUIImage", 0x1, NULL },
    { "getPlotAreaSizeWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREUIDimension", 0x1, NULL },
    { "getLegendComponentWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "isLegendSeperate", NULL, "Z", 0x1, NULL },
    { "createLegendComponentWithRAREChartHandler_ChartPanel:withRAREChartHandler_ChartInfo:withRAREChartDefinition:", NULL, "LRAREComponent", 0x4, NULL },
    { "createMarkerWithRAREChartDefinition:withRAREChartView:withRAREChartDataItem:withBoolean:", NULL, "V", 0x4, NULL },
    { "createPlotsWithRAREChartView:withRAREChartDefinition:", NULL, "V", 0x4, NULL },
    { "getChartViewWithRAREiPlatformComponent:", NULL, "LRAREChartView", 0x2, NULL },
  };
  static J2ObjcClassInfo _RAREChartHandler = { "ChartHandler", "com.appnativa.rare.ui.chart.coreplot", NULL, 0x1, 11, methods, 0, NULL, 0, NULL};
  return &_RAREChartHandler;
}

@end
@implementation RAREChartHandler_ChartInfo

- (id)initWithRAREChartView:(RAREChartView *)chart {
  if (self = [super init]) {
    self->chart_ = chart;
  }
  return self;
}

- (id)init {
  return [super init];
}

- (void)resetWithRAREChartView:(RAREChartView *)chart {
  if (legend_ != nil) {
    [legend_ removeFromParent];
    [legend_ dispose];
  }
  if (seriesData_ != nil) {
    for (RAREaChartHandler_SeriesData * __strong d in seriesData_) {
      RAREChartPlot *plot = (RAREChartPlot *) check_class_cast(((RAREaChartHandler_SeriesData *) nil_chk(d))->linkedData_, [RAREChartPlot class]);
      if (plot != nil) {
        [plot dispose];
      }
    }
  }
  [super reset];
  self->chart_ = chart;
  chartType_ = nil;
  legend_ = nil;
  domainLabels_ = nil;
  rangeLabels_ = nil;
}

- (void)copyAllFieldsTo:(RAREChartHandler_ChartInfo *)other {
  [super copyAllFieldsTo:other];
  other->chart_ = chart_;
  other->chartType_ = chartType_;
  other->domainLabels_ = domainLabels_;
  other->legend_ = legend_;
  other->rangeLabels_ = rangeLabels_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "chart_", NULL, 0x1, "LRAREChartView" },
    { "chartType_", NULL, 0x1, "LRAREChartDefinition_ChartTypeEnum" },
    { "legend_", NULL, 0x1, "LRAREComponent" },
    { "rangeLabels_", NULL, 0x1, "LRAREChartHandler_LabelsManager" },
    { "domainLabels_", NULL, 0x1, "LRAREChartHandler_LabelsManager" },
  };
  static J2ObjcClassInfo _RAREChartHandler_ChartInfo = { "ChartInfo", "com.appnativa.rare.ui.chart.coreplot", "ChartHandler", 0x8, 1, methods, 5, fields, 0, NULL};
  return &_RAREChartHandler_ChartInfo;
}

@end
@implementation RAREChartHandler_ChartLegend

- (id)initWithRAREChartHandler:(RAREChartHandler *)outer$
                  withRAREView:(RAREView *)view
       withRAREChartDefinition:(RAREChartDefinition *)cd {
  this$0_ = outer$;
  if (self = [super initWithRAREView:view]) {
    [self updateWithRAREChartDefinition:cd];
  }
  return self;
}

- (void)setBoundsWithFloat:(float)x
                 withFloat:(float)y
                 withFloat:(float)width
                 withFloat:(float)height {
  if (legendWidths_ > 0) {
    int cols = 0;
    int rows = 0;
    if (horizontal_) {
      rows = (int) [JavaLangMath floorWithDouble:(width + legendWidths_ - 5) / legendWidths_];
    }
    else {
      cols = (int) [JavaLangMath floorWithDouble:(height + legendHeights_ - 5) / legendHeights_];
    }
    if ((legendColumns_ != cols) || (legendRows_ != rows)) {
      legendColumns_ = cols;
      legendRows_ = rows;
      [self updateColumnsWithInt:cols withInt:rows];
    }
  }
  [super setBoundsWithFloat:x withFloat:y withFloat:width withFloat:height];
}

- (void)updateColumnsWithInt:(int)columns
                     withInt:(int)rows {
  [(RARECPTLegendView*)view_->proxy_ updateColumns: columns andRows: rows];
}

- (void)getMinimumSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                  withFloat:(float)maxWidth {
  ((RAREUIDimension *) nil_chk(size))->width_ = legendMaxWidth_;
  size->height_ = legendHeight_;
}

- (void)getPreferredSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                    withFloat:(float)maxWidth {
  if (horizontal_) {
    ((RAREUIDimension *) nil_chk(size))->height_ = legendHeight_;
    size->width_ = legendWidths_;
  }
  else {
    ((RAREUIDimension *) nil_chk(size))->height_ = legendHeights_;
    size->width_ = legendMaxWidth_;
  }
}

- (void)updateWithRAREChartDefinition:(RAREChartDefinition *)cd {
  id<JavaUtilList> rows = [((RAREChartDefinition *) nil_chk(cd)) getSeries];
  int len = (rows == nil) ? 0 : [rows size];
  if (len == 0) {
    return;
  }
  BOOL pieChart = [cd getChartType] == [RAREChartDefinition_ChartTypeEnum PIE];
  if (pieChart) {
    rows = [((RARERenderableDataItem *) nil_chk([((id<JavaUtilList>) nil_chk(rows)) getWithInt:0])) getItems];
    len = [((id<JavaUtilList>) nil_chk(rows)) size];
  }
  RAREUIFont *f = [cd getTextFontWithRAREUIFont:this$0_->legendLabelFont_];
  RAREUIFontMetrics *fm = [RAREUIFontMetrics getMetricsWithRAREUIFont:f];
  float height = [RAREFontUtils getFontHeightWithRAREUIFont:f withBoolean:YES] * 1.5f;
  legendHeights_ = 0;
  legendWidths_ = 0;
  legendHeight_ = [RAREUIScreen snapToSizeWithFloat:height];
  for (int i = 0; i < len; i++) {
    RAREChartDataItem *ci = (RAREChartDataItem *) check_class_cast([((id<JavaUtilList>) nil_chk(rows)) getWithInt:i], [RAREChartDataItem class]);
    NSString *s = pieChart ? [((RAREChartDataItem *) nil_chk(ci)) getDomainString] : [((RAREChartDataItem *) nil_chk(ci)) description];
    if (s != nil) {
      int w = (int) (height + 6 + [((RAREUIFontMetrics *) nil_chk(fm)) stringWidthWithNSString:s]);
      legendMaxWidth_ = [JavaLangMath maxWithInt:w withInt:legendMaxWidth_];
      legendWidths_ += w;
      legendHeights_ += height;
    }
  }
  switch ([[cd getLegendSide] ordinal]) {
    case RARELocation_TOP:
    case RARELocation_BOTTOM:
    horizontal_ = YES;
    break;
    default:
    horizontal_ = NO;
    break;
  }
  legendCount_ = len;
}

- (void)copyAllFieldsTo:(RAREChartHandler_ChartLegend *)other {
  [super copyAllFieldsTo:other];
  other->horizontal_ = horizontal_;
  other->legendColumns_ = legendColumns_;
  other->legendCount_ = legendCount_;
  other->legendFont_ = legendFont_;
  other->legendHeight_ = legendHeight_;
  other->legendHeights_ = legendHeights_;
  other->legendMaxWidth_ = legendMaxWidth_;
  other->legendRows_ = legendRows_;
  other->legendWidths_ = legendWidths_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "updateColumnsWithInt:withInt:", NULL, "V", 0x100, NULL },
    { "getMinimumSizeExWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
    { "getPreferredSizeExWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREChartHandler" },
    { "legendRows_", NULL, 0x0, "I" },
    { "legendColumns_", NULL, 0x0, "I" },
    { "legendWidths_", NULL, 0x0, "I" },
    { "legendHeights_", NULL, 0x0, "I" },
    { "legendMaxWidth_", NULL, 0x0, "I" },
    { "legendHeight_", NULL, 0x0, "I" },
    { "legendCount_", NULL, 0x0, "I" },
    { "legendFont_", NULL, 0x0, "LRAREUIFont" },
    { "horizontal_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _RAREChartHandler_ChartLegend = { "ChartLegend", "com.appnativa.rare.ui.chart.coreplot", "ChartHandler", 0x0, 3, methods, 10, fields, 0, NULL};
  return &_RAREChartHandler_ChartLegend;
}

@end
@implementation RAREChartHandler_LabelsManager

- (id)initWithRAREChartHandler:(RAREChartHandler *)outer$
             withRAREChartView:(RAREChartView *)chart
withRAREaChartHandler_LabelDataArray:(IOSObjectArray *)labelData {
  this$0_ = outer$;
  if (self = [super init]) {
    self->chart_ = chart;
    self->labelData_ = labelData;
    self->domain_ = YES;
  }
  return self;
}

- (id)initWithRAREChartHandler:(RAREChartHandler *)outer$
             withRAREChartView:(RAREChartView *)chart
                   withBoolean:(BOOL)domain {
  this$0_ = outer$;
  if (self = [super init]) {
    self->chart_ = chart;
    self->domain_ = domain;
    self->dynamic_ = YES;
  }
  return self;
}

- (RAREUIPoint *)getAxisSizeWithRAREChartDefinition:(RAREChartDefinition *)cd {
  float size = 0;
  IOSObjectArray *labels = labelData_;
  int len = (labels == nil) ? 0 : (int) [labels count];
  RAREUIDimension *d = [[RAREUIDimension alloc] init];
  RAREChartAxis *ai = domain_ ? [((RAREChartDefinition *) nil_chk(cd)) getDomainAxis] : [((RAREChartDefinition *) nil_chk(cd)) getRangeAxis];
  int textAngle = [ai getAngle];
  RAREUIFont *f = [this$0_ getAxisLabelFontWithRAREChartAxis:ai];
  RAREUIFontMetrics *fm = [RAREUIFontMetrics getMetricsWithRAREUIFont:f];
  if (len == 0) {
    size = (int) [JavaLangMath ceilWithDouble:[((RAREUIFontMetrics *) nil_chk(fm)) getHeight]];
  }
  for (int i = 0; i < len; i++) {
    [RAREaChartHandler calculateTextSizeWithNSString:((RAREaChartHandler_LabelData *) nil_chk(IOSObjectArray_Get(nil_chk(labels), i)))->label_ withRAREUIFontMetrics:fm withInt:textAngle withRAREUIDimension:d];
    size = [JavaLangMath maxWithFloat:size withFloat:domain_ ? d->height_ : d->width_];
  }
  RAREUIPoint *p = [[RAREUIPoint alloc] initWithFloat:size withFloat:0];
  if ([((NSString *) nil_chk([ai getLabel])) sequenceLength] > 0) {
    size += (int) [JavaLangMath ceilWithDouble:[((RAREUIFontMetrics *) nil_chk(fm)) getHeight]];
    size += [RAREScreenUtils PLATFORM_PIXELS_8];
  }
  p->y_ = size;
  return p;
}

- (IOSObjectArray *)createNonCategoryLabelsWithRAREChartDefinition:(RAREChartDefinition *)cd
                                                           withInt:(int)width {
  IOSObjectArray *labels = labelData_;
  RAREChartHandler_ChartInfo *ci = (RAREChartHandler_ChartInfo *) check_class_cast([((RAREChartDefinition *) nil_chk(cd)) getChartHandlerInfo], [RAREChartHandler_ChartInfo class]);
  IOSDoubleArray *range = domain_ ? ((RAREChartHandler_ChartInfo *) nil_chk(ci))->xAxisValues_ : ((RAREChartHandler_ChartInfo *) nil_chk(ci))->yAxisValues_;
  double startValue = IOSDoubleArray_Get(range, 0);
  double endValue = IOSDoubleArray_Get(range, 1);
  double increment = IOSDoubleArray_Get(range, 2);
  if (domain_) {
    labels = [this$0_ createLabelDataWithRAREChartDefinition:cd withBoolean:domain_ withDouble:width withDouble:startValue withDouble:endValue withDouble:increment];
  }
  else {
    labels = [this$0_ createNumericLabelsDataWithRAREChartDefinition:cd withDouble:width withDouble:startValue withDouble:endValue withDouble:increment withBoolean:domain_ withDouble:domain_ ? 0 : this$0_->tickSize_];
  }
  return labels;
}

- (IOSObjectArray *)getLabelsWithRAREChartDefinition:(RAREChartDefinition *)cd
                                             withInt:(int)width
                                             withInt:(int)height {
  int angle = domain_ ? [((RAREChartAxis *) nil_chk([((RAREChartDefinition *) nil_chk(cd)) getDomainAxis])) getAngle] : [((RAREChartAxis *) nil_chk([((RAREChartDefinition *) nil_chk(cd)) getRangeAxis])) getAngle];
  if ((oldWidth_ != width) || (oldHeight_ != height) || (labelData_ == nil) || (angle != oldAngle_)) {
    [self updateTickMarksWithRAREChartDefinition:cd withInt:width withInt:height];
    if (dynamic_) {
      labelData_ = [self createNonCategoryLabelsWithRAREChartDefinition:cd withInt:width];
    }
    else {
      if (angle != oldAngle_) {
        RAREUIFontMetrics *fm = [RAREUIFontMetrics getMetricsWithRAREUIFont:[this$0_ getAxisLabelFontWithRAREChartAxis:[((RAREChartDefinition *) nil_chk(cd)) getDomainAxis]]];
        [RAREaChartHandler remeasureLabelsWithRAREaChartHandler_LabelDataArray:labelData_ withRAREUIFontMetrics:fm withInt:angle];
      }
    }
    oldAngle_ = angle;
  }
  oldWidth_ = width;
  oldHeight_ = height;
  return labelData_;
}

- (void)updateTickMarksWithRAREChartDefinition:(RAREChartDefinition *)cd
                                       withInt:(int)width
                                       withInt:(int)height {
  if (((oldHeight_ == height) && (oldWidth_ == width))) {
    return;
  }
  oldHeight_ = height;
  oldWidth_ = width;
  RAREChartHandler_ChartInfo *ci = (RAREChartHandler_ChartInfo *) check_class_cast([((RAREChartDefinition *) nil_chk(cd)) getChartHandlerInfo], [RAREChartHandler_ChartInfo class]);
  if ((domain_ && ((RAREChartHandler_ChartInfo *) nil_chk(ci))->xIncrementFixed_) || (!domain_ && ((RAREChartHandler_ChartInfo *) nil_chk(ci))->yIncrementFixed_)) {
    return;
  }
  IOSDoubleArray *range = domain_ ? ((RAREChartHandler_ChartInfo *) nil_chk(ci))->xAxisValues_ : ((RAREChartHandler_ChartInfo *) nil_chk(ci))->yAxisValues_;
  if (range != nil) {
    double increment = [RAREaChartHandler calculateIncrementWithDouble:domain_ ? width : height withDouble:this$0_->tickSize_ withDouble:IOSDoubleArray_Get(range, 0) withDouble:IOSDoubleArray_Get(range, 1) withDouble:IOSDoubleArray_Get(range, 2)];
    [((RAREChartView *) nil_chk(chart_)) updateAxisIncrementsWithDouble:domain_ ? increment : 0 withDouble:domain_ ? 0 : increment];
  }
}

- (void)copyAllFieldsTo:(RAREChartHandler_LabelsManager *)other {
  [super copyAllFieldsTo:other];
  other->chart_ = chart_;
  other->domain_ = domain_;
  other->dynamic_ = dynamic_;
  other->isDate_ = isDate_;
  other->labelData_ = labelData_;
  other->oldAngle_ = oldAngle_;
  other->oldHeight_ = oldHeight_;
  other->oldWidth_ = oldWidth_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getAxisSizeWithRAREChartDefinition:", NULL, "LRAREUIPoint", 0x1, NULL },
    { "createNonCategoryLabelsWithRAREChartDefinition:withInt:", NULL, "LIOSObjectArray", 0x4, NULL },
    { "getLabelsWithRAREChartDefinition:withInt:withInt:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "updateTickMarksWithRAREChartDefinition:withInt:withInt:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREChartHandler" },
    { "chart_", NULL, 0x0, "LRAREChartView" },
    { "labelData_", NULL, 0x0, "LIOSObjectArray" },
    { "isDate_", NULL, 0x0, "Z" },
    { "domain_", NULL, 0x0, "Z" },
    { "oldWidth_", NULL, 0x0, "I" },
    { "oldHeight_", NULL, 0x0, "I" },
    { "dynamic_", NULL, 0x0, "Z" },
    { "oldAngle_", NULL, 0x0, "I" },
  };
  static J2ObjcClassInfo _RAREChartHandler_LabelsManager = { "LabelsManager", "com.appnativa.rare.ui.chart.coreplot", "ChartHandler", 0x1, 4, methods, 9, fields, 0, NULL};
  return &_RAREChartHandler_LabelsManager;
}

@end
@implementation RAREChartHandler_ChartPanel

- (id)initRAREChartHandler_ChartPanelWithRAREChartHandler:(RAREChartHandler *)outer$ {
  this$0_ = outer$;
  if (self = [super init]) {
    RAREUIColor *bg = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Chart.background"];
    if (bg != nil) {
      [self setBackgroundWithRAREUIColor:bg];
    }
  }
  return self;
}

- (id)initWithRAREChartHandler:(RAREChartHandler *)outer$ {
  return [self initRAREChartHandler_ChartPanelWithRAREChartHandler:outer$];
}

- (id)initWithRAREChartHandler:(RAREChartHandler *)outer$
       withRAREChartDefinition:(RAREChartDefinition *)cd
             withRAREChartView:(RAREChartView *)cv {
  if (self = [self initRAREChartHandler_ChartPanelWithRAREChartHandler:outer$]) {
    [self setChartWithRAREChartDefinition:cd withRAREChartView:cv];
  }
  return self;
}

- (void)setBoundsWithFloat:(float)x
                 withFloat:(float)y
                 withFloat:(float)width
                 withFloat:(float)height {
  [super setBoundsWithFloat:x withFloat:y withFloat:width withFloat:height];
}

- (void)addWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c
                               withId:(id)constraints
                              withInt:(int)position {
  [super addWithRAREiPlatformComponent:c withId:constraints withInt:position];
  if ((mouseListener_ != nil) && (c != nil)) {
    RAREView *v = [c getView];
    if ([((RAREView *) nil_chk(v)) getMouseListener] == nil) {
      [v setMouseListenerWithRAREiMouseListener:mouseListener_];
    }
  }
}

- (void)addMouseListenerWithRAREiMouseListener:(id<RAREiMouseListener>)l {
  [super addMouseListenerWithRAREiMouseListener:l];
  [self addMouseListener];
}

- (void)dispose {
  [super dispose];
  if (legend_ != nil) {
    [legend_ dispose];
  }
  if (title_ != nil) {
    [title_ dispose];
  }
  legend_ = nil;
  title_ = nil;
  chart_ = nil;
}

- (void)setChartWithRAREChartDefinition:(RAREChartDefinition *)cd
                      withRAREChartView:(RAREChartView *)cv {
  if ([((RAREChartView *) nil_chk(cv)) getComponent] == nil) {
    [cv setComponentWithRAREComponent:[[RAREComponent alloc] initWithRAREView:cv]];
  }
  [self removeAll];
  if ((self->chart_ != nil) && (self->chart_ != cv)) {
    [self->chart_ dispose];
  }
  if (mouseListener_ != nil) {
    [cv setMouseListenerWithRAREiMouseListener:mouseListener_];
  }
  chart_ = cv;
  [self setCenterViewWithRAREiPlatformComponent:[cv getComponent]];
  if (title_ != nil) {
    [self removeWithRAREiPlatformComponent:title_];
  }
  RARERenderableDataItem *ti = [((RAREChartDefinition *) nil_chk(cd)) getTitle];
  if (ti != nil) {
    if (title_ == nil) {
      title_ = [[RAREActionComponent alloc] initWithRAREView:[[RARELabelView alloc] init]];
      [title_ setAlignmentWithRARERenderableDataItem_HorizontalAlignEnum:[RARERenderableDataItem_HorizontalAlignEnum CENTER] withRARERenderableDataItem_VerticalAlignEnum:[RARERenderableDataItem_VerticalAlignEnum CENTER]];
      [this$0_ configureTitleWithRAREiActionComponent:title_ withRARERenderableDataItem:ti];
    }
    switch ([[cd getTitleSide] ordinal]) {
      case RARELocation_BOTTOM:
      [self setBottomViewWithRAREiPlatformComponent:title_];
      [((RAREActionComponent *) nil_chk(title_)) setOrientationWithRARERenderableDataItem_OrientationEnum:[RARERenderableDataItem_OrientationEnum HORIZONTAL]];
      break;
      case RARELocation_LEFT:
      [self setLeftViewWithRAREiPlatformComponent:title_];
      [((RAREActionComponent *) nil_chk(title_)) setOrientationWithRARERenderableDataItem_OrientationEnum:[RARERenderableDataItem_OrientationEnum VERTICAL_UP]];
      break;
      case RARELocation_RIGHT:
      [self setRightViewWithRAREiPlatformComponent:title_];
      [((RAREActionComponent *) nil_chk(title_)) setOrientationWithRARERenderableDataItem_OrientationEnum:[RARERenderableDataItem_OrientationEnum VERTICAL_DOWN]];
      break;
      default:
      [self setTopViewWithRAREiPlatformComponent:title_];
      [((RAREActionComponent *) nil_chk(title_)) setOrientationWithRARERenderableDataItem_OrientationEnum:[RARERenderableDataItem_OrientationEnum HORIZONTAL]];
      break;
    }
  }
}

- (RAREChartView *)getChart {
  return chart_;
}

- (void)addMouseListener {
  if (mouseListener_ == nil) {
    mouseListener_ = [[RAREChartHandler_MouseListener alloc] initWithRAREChartHandler_ChartPanel:self];
    int len = [self getComponentCount];
    for (int i = 0; i < len; i++) {
      RAREView *v = [((id<RAREiPlatformComponent>) nil_chk([self getComponentAtWithInt:i])) getView];
      if ([((RAREView *) nil_chk(v)) getMouseListener] == nil) {
        [v setMouseListenerWithRAREiMouseListener:mouseListener_];
      }
    }
  }
}

- (void)copyAllFieldsTo:(RAREChartHandler_ChartPanel *)other {
  [super copyAllFieldsTo:other];
  other->chart_ = chart_;
  other->legend_ = legend_;
  other->mouseListener_ = mouseListener_;
  other->oldHeight_ = oldHeight_;
  other->oldWidth_ = oldWidth_;
  other->seriesData_ = seriesData_;
  other->title_ = title_;
  other->xAxisRange_ = xAxisRange_;
  other->yAxisRange_ = yAxisRange_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getChart", NULL, "LRAREChartView", 0x1, NULL },
    { "addMouseListener", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREChartHandler" },
    { "chart_", NULL, 0x0, "LRAREChartView" },
    { "legend_", NULL, 0x0, "LRAREComponent" },
    { "mouseListener_", NULL, 0x0, "LRAREChartHandler_MouseListener" },
    { "title_", NULL, 0x0, "LRAREActionComponent" },
    { "oldWidth_", NULL, 0x0, "I" },
    { "oldHeight_", NULL, 0x0, "I" },
    { "seriesData_", NULL, 0x0, "LIOSObjectArray" },
    { "xAxisRange_", NULL, 0x0, "LIOSDoubleArray" },
    { "yAxisRange_", NULL, 0x0, "LIOSObjectArray" },
  };
  static J2ObjcClassInfo _RAREChartHandler_ChartPanel = { "ChartPanel", "com.appnativa.rare.ui.chart.coreplot", "ChartHandler", 0x0, 2, methods, 10, fields, 0, NULL};
  return &_RAREChartHandler_ChartPanel;
}

@end
@implementation RAREChartHandler_MouseListener

- (id)initWithRAREChartHandler_ChartPanel:(RAREChartHandler_ChartPanel *)panel {
  if (self = [super init]) {
    self->panel_ = panel;
  }
  return self;
}

- (void)mouseEnteredWithRAREMouseEvent:(RAREMouseEvent *)e {
  RAREView *v = [((RAREChartHandler_ChartPanel *) nil_chk(panel_)) getView];
  id<RAREiMouseListener> l = (v == nil) ? nil : [v getMouseListener];
  if (l != nil) {
    [l mouseEnteredWithRAREMouseEvent:[RAREEventHelper retargetWithRAREMouseEvent:e withRAREView:[panel_ getView]]];
  }
}

- (void)mouseExitedWithRAREMouseEvent:(RAREMouseEvent *)e {
  RAREView *v = [((RAREChartHandler_ChartPanel *) nil_chk(panel_)) getView];
  id<RAREiMouseListener> l = (v == nil) ? nil : [v getMouseListener];
  if (l != nil) {
    [l mouseExitedWithRAREMouseEvent:[RAREEventHelper retargetWithRAREMouseEvent:e withRAREView:[panel_ getView]]];
  }
}

- (void)mousePressedWithRAREMouseEvent:(RAREMouseEvent *)e {
  RAREView *v = [((RAREChartHandler_ChartPanel *) nil_chk(panel_)) getView];
  id<RAREiMouseListener> l = (v == nil) ? nil : [v getMouseListener];
  if (l != nil) {
    [l mousePressedWithRAREMouseEvent:[RAREEventHelper retargetWithRAREMouseEvent:e withRAREView:[panel_ getView]]];
  }
}

- (void)mouseReleasedWithRAREMouseEvent:(RAREMouseEvent *)e {
  RAREView *v = [((RAREChartHandler_ChartPanel *) nil_chk(panel_)) getView];
  id<RAREiMouseListener> l = (v == nil) ? nil : [v getMouseListener];
  if (l != nil) {
    [l mouseReleasedWithRAREMouseEvent:[RAREEventHelper retargetWithRAREMouseEvent:e withRAREView:[panel_ getView]]];
  }
}

- (void)pressCanceledWithRAREMouseEvent:(RAREMouseEvent *)e {
  RAREView *v = [((RAREChartHandler_ChartPanel *) nil_chk(panel_)) getView];
  id<RAREiMouseListener> l = (v == nil) ? nil : [v getMouseListener];
  if (l != nil) {
    [l pressCanceledWithRAREMouseEvent:(e == nil) ? nil : [RAREEventHelper retargetWithRAREMouseEvent:e withRAREView:[panel_ getView]]];
  }
}

- (BOOL)wantsLongPress {
  RAREView *v = [((RAREChartHandler_ChartPanel *) nil_chk(panel_)) getView];
  id<RAREiMouseListener> l = (v == nil) ? nil : [v getMouseListener];
  return (l == nil) ? NO : [l wantsLongPress];
}

- (void)copyAllFieldsTo:(RAREChartHandler_MouseListener *)other {
  [super copyAllFieldsTo:other];
  other->panel_ = panel_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithRAREChartHandler_ChartPanel:", NULL, NULL, 0x0, NULL },
    { "wantsLongPress", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "panel_", NULL, 0x0, "LRAREChartHandler_ChartPanel" },
  };
  static J2ObjcClassInfo _RAREChartHandler_MouseListener = { "MouseListener", "com.appnativa.rare.ui.chart.coreplot", "ChartHandler", 0x8, 2, methods, 1, fields, 0, NULL};
  return &_RAREChartHandler_MouseListener;
}

@end
