//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-navigator/com/appnativa/rare/ui/aNavigatorPanel.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/ui/ActionComponent.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/Container.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIAction.h"
#include "com/appnativa/rare/ui/UIBorderHelper.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorShade.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImageIcon.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/XPContainer.h"
#include "com/appnativa/rare/ui/aComponent.h"
#include "com/appnativa/rare/ui/aNavigatorPanel.h"
#include "com/appnativa/rare/ui/border/UICompoundBorder.h"
#include "com/appnativa/rare/ui/border/UIEmptyBorder.h"
#include "com/appnativa/rare/ui/border/UILineBorder.h"
#include "com/appnativa/rare/ui/border/aUILineBorder.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iNavigatorPanel.h"
#include "com/appnativa/rare/ui/iPath.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformPaint.h"
#include "com/appnativa/rare/ui/iPlatformPath.h"
#include "com/appnativa/rare/ui/iPlatformShape.h"
#include "com/appnativa/rare/ui/painter/UIBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/ui/painter/UISimpleBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iGradientPainter.h"
#include "com/appnativa/rare/ui/painter/iPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformPainter.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/jgoodies/forms/layout/CellConstraints.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@implementation RAREaNavigatorPanel

- (void)dispose {
  [super dispose];
  if (buttons_ != nil) {
    [buttons_ clear];
  }
  if (sizeCache_ != nil) {
    [sizeCache_ clear];
  }
  sizeCache_ = nil;
  buttons_ = nil;
  iconPosition_ = nil;
  panelType_ = nil;
  selectedPainter_ = nil;
  pressedPainter_ = nil;
  backIcon_ = nil;
  backButton_ = nil;
  separatorLineColor_ = nil;
  selectedForeground_ = nil;
  selectedButton_ = nil;
}

- (id)initWithId:(id)view {
  if (self = [super initWithId:view]) {
    buttons_ = [[RAREUTIdentityArrayList alloc] init];
    panelType_ = [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL];
    iconPosition_ = [RARERenderableDataItem_IconPositionEnum LEADING];
    sizeCache_ = [[JavaUtilArrayList alloc] init];
    buttonBorder_ = [[RAREUIEmptyBorder alloc] initWithFloat:[RAREPlatform isTouchDevice] ? [RAREScreenUtils PLATFORM_PIXELS_4] : [RAREScreenUtils PLATFORM_PIXELS_2]];
    [self setFocusableWithBoolean:NO];
  }
  return self;
}

- (void)setComponentPainterWithRAREiPlatformComponentPainter:(id<RAREiPlatformComponentPainter>)cp {
  [super setComponentPainterWithRAREiPlatformComponentPainter:cp];
  if (backButton_ != nil) {
    [backButton_ setComponentPainterWithRAREiPlatformComponentPainter:cp];
  }
}

- (void)activateButtonWithInt:(int)index {
  id<RAREaNavigatorPanel_iButton> b = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) getWithInt:index];
  [((id<RAREaNavigatorPanel_iButton>) nil_chk(b)) doClick];
}

- (void)addButtonWithRAREiActionComponent:(id<RAREiActionComponent>)button {
  [((id<RAREaNavigatorPanel_iButton>) check_protocol_cast(button, @protocol(RAREaNavigatorPanel_iButton))) setShowIconOnlyWithBoolean:showIconsOnly_];
  [((id<RAREiActionComponent>) nil_chk(button)) setBorderWithRAREiPlatformBorder:buttonBorder_];
  [button setWordWrapWithBoolean:YES];
  [button setFocusableWithBoolean:NO];
  [((RAREUTIdentityArrayList *) nil_chk(buttons_)) removeWithId:button];
  [buttons_ addWithId:((id<RAREaNavigatorPanel_iButton>) check_protocol_cast(button, @protocol(RAREaNavigatorPanel_iButton)))];
  if ([self getForeground] != nil) {
    [button setForegroundWithRAREUIColor:[self getForeground]];
  }
  if ([self getFont] != nil) {
    [button setFontWithRAREUIFont:[self getFont]];
  }
  [button setIconPositionWithRARERenderableDataItem_IconPositionEnum:iconPosition_];
  [self addWithRAREiPlatformComponent:button withId:nil];
  int len = [buttons_ size];
  if ((len > 1) && [self isHiearchical]) {
    [((id<RAREiActionComponent>) nil_chk([self getBackButton])) setEnabledWithBoolean:YES];
    [((id<RAREiActionComponent>) nil_chk([self getBackButton])) repaint];
  }
  [self revalidate];
}

- (id<RAREiActionComponent>)addButtonWithNSString:(NSString *)button {
  id<RAREaNavigatorPanel_iButton> b = [self createButtonWithNSString:button withRAREiPlatformIcon:nil];
  [self addButtonWithRAREiActionComponent:b];
  return b;
}

- (id<RAREiActionComponent>)addButtonWithRAREUIAction:(RAREUIAction *)a {
  id<RAREaNavigatorPanel_iButton> b = [self createButtonWithRAREUIAction:a];
  [self addButtonWithRAREiActionComponent:b];
  return b;
}

- (id<RAREiActionComponent>)addButtonWithNSString:(NSString *)button
                            withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  id<RAREaNavigatorPanel_iButton> b = [self createButtonWithNSString:button withRAREiPlatformIcon:icon];
  [self addButtonWithRAREiActionComponent:b];
  return b;
}

- (void)backup {
  if (panelType_ == [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL]) {
    int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
    if (len > 1) {
      id<RAREaNavigatorPanel_iButton> b = [buttons_ removeWithInt:len - 1];
      [self removeWithRAREiPlatformComponent:b];
      len--;
      [((id<RAREaNavigatorPanel_iButton>) nil_chk([buttons_ getWithInt:len - 1])) doClick];
    }
    if (len < 2) {
      [((id<RAREiActionComponent>) nil_chk([self getBackButton])) setEnabledWithBoolean:NO];
      [((id<RAREiActionComponent>) nil_chk([self getBackButton])) repaint];
    }
    [self revalidate];
    [self repaint];
  }
}

- (void)clickWithInt:(int)index {
  [((id<RAREaNavigatorPanel_iButton>) nil_chk([((RAREUTIdentityArrayList *) nil_chk(buttons_)) getWithInt:index])) doClick];
}

- (void)home {
  if (panelType_ == [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL]) {
    int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
    if (len < 2) {
      return;
    }
    for (int i = 1; i < len; i++) {
      id<RAREaNavigatorPanel_iButton> b = [buttons_ removeWithInt:i];
      [self removeWithRAREiPlatformComponent:b];
    }
    [self revalidate];
    [self repaint];
  }
}

- (int)indexOfWithRAREiActionComponent:(id<RAREiActionComponent>)button {
  return [((RAREUTIdentityArrayList *) nil_chk(buttons_)) indexOfWithId:button];
}

- (int)indexOfWithNSString:(NSString *)name {
  int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
  for (int i = 0; i < len; i++) {
    RAREUIAction *a = [((id<RAREaNavigatorPanel_iButton>) nil_chk([buttons_ getWithInt:i])) getAction];
    if ((a != nil) && [((NSString *) nil_chk(name)) isEqual:[a getActionName]]) {
      return i;
    }
  }
  return -1;
}

- (void)paintButtonWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                         withRAREUIRectangle:(RAREUIRectangle *)rect
                                 withBoolean:(BOOL)pressed {
  id<RAREiPlatformComponentPainter> cp = [self getComponentPainter];
  if (pressed) {
    id<RAREiPlatformBorder> b = [((id<RAREiPlatformComponentPainter>) nil_chk(cp)) getBorder];
    if (b != nil) {
      [((id<RAREiPlatformGraphics>) nil_chk(g)) saveState];
      [b clipWithRAREiPlatformGraphics:g withFloat:((RAREUIRectangle *) nil_chk(rect))->x_ withFloat:rect->y_ withFloat:rect->width_ withFloat:rect->height_];
    }
    [self paintShapeWithRAREiPlatformGraphics:g withRAREiPlatformShape:rect withRAREiPlatformPainter:nil];
    if (b != nil) {
      [((id<RAREiPlatformGraphics>) nil_chk(g)) restoreState];
    }
    return;
  }
  RAREUIColor *bg = [self getBackground];
  if (cp != nil) {
    [cp paintWithRAREiPlatformGraphics:g withFloat:((RAREUIRectangle *) nil_chk(rect))->x_ withFloat:rect->y_ withFloat:rect->width_ withFloat:rect->height_ withInt:RAREiPainter_UNKNOWN];
  }
  else if (bg != nil) {
    if ([bg isSimpleColor]) {
      [((id<RAREiPlatformGraphics>) nil_chk(g)) clearRectWithRAREUIColor:bg withFloat:((RAREUIRectangle *) nil_chk(rect))->x_ withFloat:rect->y_ withFloat:rect->width_ withFloat:rect->height_];
    }
    else {
      id<RAREiBackgroundPainter> p = [((RAREUIColorShade *) check_class_cast(bg, [RAREUIColorShade class])) getBackgroundPainter];
      if (p != nil) {
        [p paintWithRAREiPlatformGraphics:g withFloat:((RAREUIRectangle *) nil_chk(rect))->x_ withFloat:rect->y_ withFloat:rect->width_ withFloat:rect->height_ withInt:RAREiPainter_UNKNOWN];
      }
    }
  }
  return;
}

- (void)removeButtonWithInt:(int)index {
  [self removeButtonWithInt:index withBoolean:YES];
}

- (void)removeButtonWithNSString:(NSString *)name {
  int index = [self indexOfWithNSString:name];
  if (index != -1) {
    [self removeButtonWithInt:index withBoolean:YES];
  }
}

- (void)removeButtonWithRAREaNavigatorPanel_iButton:(id<RAREaNavigatorPanel_iButton>)button
                                        withBoolean:(BOOL)removechildren {
  int index = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) indexOfWithId:button];
  if (index != -1) {
    [self removeButtonWithInt:index withBoolean:removechildren];
  }
  if ((panelType_ == [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL]) && ([buttons_ size] < 2)) {
    [((id<RAREiActionComponent>) nil_chk([self getBackButton])) setEnabledWithBoolean:NO];
    [((id<RAREiActionComponent>) nil_chk([self getBackButton])) repaint];
  }
}

- (void)removeButtonWithInt:(int)index
                withBoolean:(BOOL)removechildren {
  if (index < 1) {
    return;
  }
  if (removechildren && (panelType_ == [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL])) {
    [self removeChildrenWithInt:index - 1];
  }
  else {
    int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
    if (index < len) {
      [self removeWithRAREiPlatformComponent:[buttons_ removeWithInt:index]];
    }
    if ((panelType_ == [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL]) && ([buttons_ size] < 2)) {
      [((id<RAREiActionComponent>) nil_chk([self getBackButton])) setEnabledWithBoolean:NO];
    }
    [self revalidate];
    [self repaint];
  }
}

- (void)removeChildrenWithRAREaNavigatorPanel_iButton:(id<RAREaNavigatorPanel_iButton>)button {
  if (panelType_ == [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL]) {
    int index = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) indexOfWithId:button];
    if (index != -1) {
      [self removeChildrenWithInt:index];
    }
  }
}

- (void)removeChildrenWithInt:(int)index {
  if (panelType_ == [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL]) {
    if (index < 0) {
      index = 0;
    }
    int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
    while (--len > index) {
      [self removeWithRAREiPlatformComponent:[buttons_ removeWithInt:len]];
    }
    if ([buttons_ size] < 2) {
      [((id<RAREiActionComponent>) nil_chk([self getBackButton])) setEnabledWithBoolean:NO];
      [((id<RAREiActionComponent>) nil_chk([self getBackButton])) repaint];
    }
    [self revalidate];
    [self repaint];
  }
}

- (void)revalidate {
  [super revalidate];
  cacheInvalidated_ = YES;
}

- (void)setActionEnabledWithInt:(int)index
                    withBoolean:(BOOL)enabled {
  RAREUIAction *a = [self getActionWithInt:index];
  if (a != nil) {
    [a setEnabledWithBoolean:enabled];
  }
}

- (void)setAlwaysFireActionWithBoolean:(BOOL)alwaysFireAction {
  self->alwaysFireAction_ = alwaysFireAction;
}

- (void)setBorderWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)border {
  [super setBorderWithRAREiPlatformBorder:border];
  if (backButton_ != nil) {
    [backButton_ setBorderWithRAREiPlatformBorder:border];
  }
  if (!separatorLineColorSet_) {
    RAREUIColor *c = [RAREUIBorderHelper findBorderColorWithRAREiPlatformBorder:border];
    if (c != nil) {
      separatorLineColor_ = c;
    }
  }
}

- (void)setButtonsSameSizeWithBoolean:(BOOL)same {
  buttonsSameSize_ = same;
}

- (void)setEnabledWithBoolean:(BOOL)enabled {
  for (id<RAREaNavigatorPanel_iButton> __strong b in nil_chk(buttons_)) {
    [((id<RAREaNavigatorPanel_iButton>) nil_chk(b)) setEnabledWithBoolean:enabled];
  }
  if ([self getBackButton] != nil) {
    [((id<RAREiActionComponent>) nil_chk([self getBackButton])) setEnabledWithBoolean:NO];
  }
  [super setEnabledWithBoolean:enabled];
}

- (void)setFontWithRAREUIFont:(RAREUIFont *)font {
  [super setFontWithRAREUIFont:font];
  for (id<RAREaNavigatorPanel_iButton> __strong b in nil_chk(buttons_)) {
    [((id<RAREaNavigatorPanel_iButton>) nil_chk(b)) setFontWithRAREUIFont:font];
  }
}

- (void)setForegroundWithRAREUIColor:(RAREUIColor *)fg {
  [super setForegroundWithRAREUIColor:fg];
  for (id<RAREaNavigatorPanel_iButton> __strong b in nil_chk(buttons_)) {
    [((id<RAREaNavigatorPanel_iButton>) nil_chk(b)) setForegroundWithRAREUIColor:fg];
  }
}

- (void)setIconPositionWithRARERenderableDataItem_IconPositionEnum:(RARERenderableDataItem_IconPositionEnum *)position {
  self->iconPosition_ = position;
  for (id<RAREaNavigatorPanel_iButton> __strong button in nil_chk(buttons_)) {
    [((id<RAREaNavigatorPanel_iButton>) nil_chk(button)) setIconPositionWithRARERenderableDataItem_IconPositionEnum:position];
  }
}

- (void)setInsetsWithRAREUIInsets:(RAREUIInsets *)inArg {
  [((RAREUIEmptyBorder *) nil_chk(buttonBorder_)) setInsetsWithRAREUIInsets:inArg];
  if (backButton_ != nil) {
    [backButton_ setBorderWithRAREiPlatformBorder:[[RAREUICompoundBorder alloc] initWithRAREiPlatformBorder:[self getBorder] withRAREiPlatformBorder:buttonBorder_]];
  }
}

- (void)setPanelTypeWithRAREiNavigatorPanel_PanelTypeEnum:(RAREiNavigatorPanel_PanelTypeEnum *)panelType {
  RAREiNavigatorPanel_PanelTypeEnum *ot = self->panelType_;
  if (ot == panelType) {
    return;
  }
  self->panelType_ = panelType;
  if ((ot != panelType) && (listenerList_ != nil)) {
    [RAREUtils firePropertyChangeEventWithId:self withRAREEventListenerList:listenerList_ withNSString:@"panelType" withId:ot withId:panelType];
  }
}

- (void)setPressedPainterWithRAREiPlatformPainter:(id<RAREiPlatformPainter>)pressedPainter {
  self->pressedPainter_ = pressedPainter;
}

- (void)setSelectedButtonWithRAREiActionComponent:(id<RAREiActionComponent>)b {
  if (panelType_ != [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL]) {
    id<RAREaNavigatorPanel_iButton> ob = selectedButton_;
    self->selectedButton_ = (id<RAREaNavigatorPanel_iButton>) check_protocol_cast(b, @protocol(RAREaNavigatorPanel_iButton));
    if (ob != selectedButton_) {
      if (selectedButton_ != nil) {
        [selectedButton_ setSelectedWithBoolean:YES];
      }
      [self revalidate];
      [self repaint];
      if (ob != nil) {
        [ob setSelectedWithBoolean:NO];
      }
      if (listenerList_ != nil) {
        [RAREUtils firePropertyChangeEventWithId:self withRAREEventListenerList:listenerList_ withNSString:@"selectedButton" withId:ob withId:selectedButton_];
      }
    }
  }
}

- (void)setSelectedButtonWithNSString:(NSString *)name {
  int index = [self indexOfWithNSString:name];
  if (index != -1) {
    [self setSelectedIndexWithInt:index];
  }
}

- (void)setSelectedFontWithRAREUIFont:(RAREUIFont *)f {
  self->selectedFont_ = f;
}

- (void)setSelectedForegroundWithRAREUIColor:(RAREUIColor *)fg {
  self->selectedForeground_ = fg;
}

- (void)setSelectedIndexWithInt:(int)index {
  if ((index > -1) && (index < [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size])) {
    [self setSelectedButtonWithRAREiActionComponent:[buttons_ getWithInt:index]];
  }
}

- (void)setSelectedPainterWithRAREiPlatformPainter:(id<RAREiPlatformPainter>)selectedPainter {
  self->selectedPainter_ = selectedPainter;
}

- (void)setSeparatorLineColorWithRAREUIColor:(RAREUIColor *)color {
  self->separatorLineColor_ = color;
  self->separatorLineColorSet_ = YES;
}

- (void)setShowIconsOnlyWithBoolean:(BOOL)icon {
  showIconsOnly_ = icon;
  int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
  for (int i = 0; i < len; i++) {
    id<RAREaNavigatorPanel_iButton> b = [buttons_ getWithInt:i];
    [((id<RAREaNavigatorPanel_iButton>) nil_chk(b)) setShowIconOnlyWithBoolean:icon];
  }
}

- (RAREUIAction *)getActionWithInt:(int)index {
  return [((id<RAREaNavigatorPanel_iButton>) nil_chk([((RAREUTIdentityArrayList *) nil_chk(buttons_)) getWithInt:index])) getAction];
}

- (id<RAREiActionComponent>)getBackButton {
  if ((backButton_ == nil) && [self isHiearchical]) {
    backButton_ = [self createBackButtonWithRAREiPlatformIcon:backIcon_];
    [((id<RAREaNavigatorPanel_iButton>) nil_chk(backButton_)) setFocusableWithBoolean:NO];
    if ([self getForeground] != nil) {
      [backButton_ setForegroundWithRAREUIColor:[self getForeground]];
    }
    if ([self getFont] != nil) {
      [backButton_ setFontWithRAREUIFont:[self getFont]];
    }
    if ([self getComponentPainterEx] != nil) {
      [backButton_ setComponentPainterWithRAREiPlatformComponentPainter:[self getComponentPainterEx]];
    }
    [backButton_ setBorderWithRAREiPlatformBorder:[[RAREUICompoundBorder alloc] initWithRAREiPlatformBorder:[self getBorder] withRAREiPlatformBorder:buttonBorder_]];
    [backButton_ setIconPositionWithRARERenderableDataItem_IconPositionEnum:iconPosition_];
  }
  return backButton_;
}

- (id<RAREiActionComponent>)getButtonWithInt:(int)index {
  return [((RAREUTIdentityArrayList *) nil_chk(buttons_)) getWithInt:index];
}

- (RARERenderableDataItem_IconPositionEnum *)getIconPosition {
  return iconPosition_;
}

- (RAREiNavigatorPanel_PanelTypeEnum *)getPanelType {
  return panelType_;
}

- (id<RAREiPlatformPainter>)getPressedPainter {
  return pressedPainter_;
}

- (RAREUIAction *)getSelectedAction {
  id<RAREiActionComponent> b = [self getSelectedButton];
  return (b == nil) ? nil : [((id<RAREaNavigatorPanel_iButton>) check_protocol_cast(b, @protocol(RAREaNavigatorPanel_iButton))) getAction];
}

- (id<RAREiActionComponent>)getSelectedButton {
  if (panelType_ == [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL]) {
    int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
    return (len == 0) ? nil : [buttons_ getWithInt:len - 1];
  }
  return selectedButton_;
}

- (RAREUIFont *)getSelectedFont {
  return selectedFont_;
}

- (RAREUIColor *)getSelectedForeground {
  return selectedForeground_;
}

- (int)getSelectedIndex {
  if (panelType_ == [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL]) {
    return [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size] - 1;
  }
  if (selectedButton_ != nil) {
    return [((RAREUTIdentityArrayList *) nil_chk(buttons_)) indexOfWithId:selectedButton_];
  }
  return -1;
}

- (id<RAREiPlatformPainter>)getSelectedPainter {
  return selectedPainter_;
}

- (RAREUIColor *)getSeparatorLineColor {
  return separatorLineColor_;
}

- (BOOL)isActionEnabledWithInt:(int)index {
  RAREUIAction *a = [self getActionWithInt:index];
  return (a == nil) ? NO : [a isEnabled];
}

- (BOOL)isAlwaysFireAction {
  return alwaysFireAction_;
}

- (BOOL)isHiearchical {
  return panelType_ == [RAREiNavigatorPanel_PanelTypeEnum HIERARCHICAL];
}

- (BOOL)isShowIconsOnly {
  return showIconsOnly_;
}

- (BOOL)isToggle {
  return panelType_ == [RAREiNavigatorPanel_PanelTypeEnum TOGGLE];
}

- (id<RAREaNavigatorPanel_iButton>)createBackButtonWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RAREaNavigatorPanel_iButton>)createButtonWithRAREUIAction:(RAREUIAction *)a {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RAREaNavigatorPanel_iButton>)createButtonWithNSString:(NSString *)text
                                      withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)initializePanelWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)backIcon {
  self->backIcon_ = backIcon;
  [self setComponentPainterWithRAREiPlatformComponentPainter:[[RAREUIComponentPainter alloc] init]];
  [self setBorderWithRAREiPlatformBorder:[[RAREUILineBorder alloc] initWithRAREUIColor:[RAREaUILineBorder getDefaultLineColor] withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:[RAREScreenUtils PLATFORM_PIXELS_6]]];
  [self setBackgroundWithRAREUIColor:[RAREColorUtils getBackground]];
}

- (void)layoutWithFloat:(float)width
              withFloat:(float)height {
  int len = [self getComponentCount];
  float biggest = 0;
  float w = 0;
  RAREUIInsets *in = [self getInsetsEx];
  if (in != nil) {
    width -= (in->left_ + in->right_);
    height -= (in->top_ + in->bottom_);
  }
  id<RAREiPlatformComponent> c;
  int count = 0;
  for (int i = 0; i < len; i++) {
    c = [self getComponentAtWithInt:i];
    if (![((id<RAREiPlatformComponent>) nil_chk(c)) isVisible]) {
      continue;
    }
    count++;
    RAREJGCellConstraints *cc = [RAREaComponent getMeasuredCellConstraintsWithRAREiPlatformComponent:c withBoolean:NO];
    w += ((RAREJGCellConstraints *) nil_chk(cc))->gridWidth_;
    biggest = [JavaLangMath maxWithFloat:biggest withFloat:cc->gridWidth_];
  }
  float sameSize = width / count;
  float x = (in == nil) ? 0 : in->left_;
  float y = (in == nil) ? 0 : in->top_;
  if (buttonsSameSize_) {
    for (int i = 0; i < len; i++) {
      c = [self getComponentAtWithInt:i];
      if (![((id<RAREiPlatformComponent>) nil_chk(c)) isVisible]) {
        continue;
      }
      [c setBoundsWithFloat:x withFloat:y withFloat:sameSize withFloat:height];
      x += sameSize;
    }
  }
  else {
    float dx = (width - w) / len;
    for (int i = 0; i < len; i++) {
      c = [self getComponentAtWithInt:i];
      if (![((id<RAREiPlatformComponent>) nil_chk(c)) isVisible]) {
        continue;
      }
      RAREJGCellConstraints *cc = [RAREaComponent getMeasuredCellConstraintsWithRAREiPlatformComponent:c withBoolean:NO];
      w = ((RAREJGCellConstraints *) nil_chk(cc))->gridWidth_ + dx;
      [c setBoundsWithFloat:x withFloat:y withFloat:w withFloat:height];
      x += w;
    }
  }
  id<RAREiPlatformComponentPainter> cp = [self getComponentPainter];
  if ((cp == nil) || ([cp getBackgroundPainter] == nil)) {
    if (cp == nil) {
      cp = [[RAREUIComponentPainter alloc] init];
      [self setComponentPainterWithRAREiPlatformComponentPainter:cp];
    }
    RAREUIBackgroundPainter *bp = (RAREUIBackgroundPainter *) check_class_cast([((RAREUIBackgroundPainter *) nil_chk([RAREUIBackgroundPainter BGCOLOR_GRADIENT_PAINTER_MID])) clone], [RAREUIBackgroundPainter class]);
    [((RAREUIBackgroundPainter *) nil_chk(bp)) setBackgroundColorWithRAREUIColor:[self getBackground]];
    [((id<RAREiPlatformComponentPainter>) nil_chk(cp)) setBackgroundPainterWithRAREiBackgroundPainter:bp withBoolean:NO];
  }
}

- (void)paintBorderWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                                   withFloat:(float)x
                                   withFloat:(float)y
                                   withFloat:(float)w
                                   withFloat:(float)h
                                 withBoolean:(BOOL)hiearchical {
  float p1 = [RAREScreenUtils PLATFORM_PIXELS_1];
  w -= p1;
  if (hiearchical) {
    float m = h / 2 - p1;
    float x1 = x + w - m;
    float x2 = x + w;
    [((id<RAREiPlatformGraphics>) nil_chk(g)) drawLineWithFloat:x1 withFloat:y withFloat:x2 withFloat:y + m];
    [g drawLineWithFloat:x2 withFloat:y + m withFloat:x2 withFloat:y + h - m - p1];
    [g drawLineWithFloat:x1 withFloat:y + h - p1 withFloat:x2 withFloat:y + h - m - p1];
  }
  else {
    [((id<RAREiPlatformGraphics>) nil_chk(g)) drawLineWithFloat:x + w withFloat:y withFloat:x + w withFloat:y + h];
  }
}

- (void)paintBorderWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                                     withInt:(int)x
                                     withInt:(int)y
                                     withInt:(int)w
                                     withInt:(int)h
                                 withBoolean:(BOOL)hiearchical {
  float p1 = [RAREScreenUtils PLATFORM_PIXELS_1];
  w -= p1;
  if (hiearchical) {
    float m = h / 2 - p1;
    float x1 = x + w - m;
    float x2 = x + w;
    [((id<RAREiPlatformGraphics>) nil_chk(g)) drawLineWithFloat:x1 withFloat:y withFloat:x2 withFloat:y + m];
    [g drawLineWithFloat:x2 withFloat:y + m withFloat:x2 withFloat:y + h - m - p1];
    [g drawLineWithFloat:x1 withFloat:y + h - p1 withFloat:x2 withFloat:y + h - m - p1];
  }
  else {
    [((id<RAREiPlatformGraphics>) nil_chk(g)) drawLineWithFloat:x + w withFloat:y withFloat:x + w withFloat:y + h];
  }
}

- (void)paintPanelWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                        withRAREUIRectangle:(RAREUIRectangle *)rect {
  id<RAREiPlatformShape> ps = [self getPressedShape];
  id<RAREiPlatformShape> ss = nil;
  if ([self isToggle]) {
    ss = [self getPressedShapeWithRAREaNavigatorPanel_iButton:selectedButton_];
  }
  if ((ss != nil) || (ps != nil)) {
    if (ss != nil) {
      [self paintShapeWithRAREiPlatformGraphics:g withRAREiPlatformShape:ss withRAREiPlatformPainter:selectedPainter_];
    }
    if (ps != nil) {
      [self paintShapeWithRAREiPlatformGraphics:g withRAREiPlatformShape:ps withRAREiPlatformPainter:pressedPainter_];
    }
  }
  int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
  float h = ((RAREUIRectangle *) nil_chk(rect))->height_;
  float y = [RAREScreenUtils PLATFORM_PIXELS_1];
  float x;
  id<RAREaNavigatorPanel_iButton> b;
  RAREUIColor *c = (separatorLineColor_ == nil) ? [RAREaUILineBorder getDefaultLineColor] : separatorLineColor_;
  [((id<RAREiPlatformGraphics>) nil_chk(g)) setColorWithRAREUIColor:c];
  x = -1;
  BOOL hiearchical = [self isHiearchical];
  for (int i = 0; i < len; i++) {
    b = [buttons_ getWithInt:i];
    if (![((id<RAREaNavigatorPanel_iButton>) nil_chk(b)) isVisible]) {
      continue;
    }
    if (x > -1) {
      [self paintBorderWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:[b getX] - x withFloat:h withBoolean:hiearchical];
      x = [b getX];
    }
    else {
      x = [b getX];
    }
  }
}

- (void)paintShapeWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                     withRAREiPlatformShape:(id<RAREiPlatformShape>)shape
                   withRAREiPlatformPainter:(id<RAREiPlatformPainter>)p {
  if (p == nil) {
    p = pressedPainter_;
  }
  if (p == nil) {
    RAREUIBackgroundPainter *bp = (RAREUIBackgroundPainter *) check_class_cast([((RAREUIBackgroundPainter *) nil_chk([RAREUIBackgroundPainter BGCOLOR_GRADIENT_PAINTER_DK_DK])) clone], [RAREUIBackgroundPainter class]);
    [((RAREUIBackgroundPainter *) nil_chk(bp)) setGradientDirectionWithRAREiGradientPainter_DirectionEnum:[RAREiGradientPainter_DirectionEnum VERTICAL_BOTTOM]];
    [bp setBackgroundColorWithRAREUIColor:[self getBackground]];
    p = pressedPainter_ = [[RAREUISimpleBackgroundPainter alloc] initWithRAREUIColor:[RAREColorUtils getControlDkShadow]];
  }
  RAREUIRectangle *r = [((id<RAREiPlatformShape>) nil_chk(shape)) getBounds];
  id<RAREiPlatformPaint> pp = [((id<RAREiPlatformPainter>) nil_chk(p)) getPaintWithFloat:((RAREUIRectangle *) nil_chk(r))->width_ withFloat:r->height_];
  [((id<RAREiPlatformGraphics>) nil_chk(g)) saveState];
  if (pp != nil) {
    [g setPaintWithRAREiPlatformPaint:pp];
    [g fillShapeWithRAREiPlatformShape:shape withFloat:0 withFloat:0];
  }
  else {
    [g clipShapeWithRAREiPlatformShape:shape];
    [p paintWithRAREiPlatformGraphics:g withFloat:0 withFloat:0 withFloat:[self getWidth] withFloat:[self getHeight] withInt:RAREiPainter_UNKNOWN];
  }
  [g restoreState];
}

- (void)populateSizeCache {
  id<RAREiPlatformComponent> c;
  int len = [self getComponentCount];
  for (int i = 0; i < len; i++) {
    c = [self getComponentAtWithInt:i];
    if (![((id<RAREiPlatformComponent>) nil_chk(c)) isVisible]) {
      continue;
    }
    id o = [c getClientPropertyWithNSString:[RAREiConstants RARE_CONSTRAINTS_PROPERTY]];
    if (!([o isKindOfClass:[RAREUIDimension class]])) {
      o = [[RAREUIDimension alloc] init];
      [c putClientPropertyWithNSString:[RAREiConstants RARE_CONSTRAINTS_PROPERTY] withId:o];
    }
    (void) [c getPreferredSizeWithRAREUIDimension:(RAREUIDimension *) check_class_cast(o, [RAREUIDimension class])];
  }
  cacheInvalidated_ = NO;
}

- (void)repaintPanel {
  [self repaint];
}

- (void)getMinimumSizeExWithRAREUIDimension:(RAREUIDimension *)size {
  [self getPreferredSizeExWithRAREUIDimension:size withFloat:0];
}

- (id<RAREaNavigatorPanel_iButton>)getNextVisibleWithInt:(int)index {
  int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
  id<RAREaNavigatorPanel_iButton> b;
  for (int i = index + 1; i < len; i++) {
    b = [buttons_ getWithInt:i];
    if ([((id<RAREaNavigatorPanel_iButton>) nil_chk(b)) isVisible]) {
      return b;
    }
  }
  return nil;
}

- (void)getPreferredSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                    withFloat:(float)maxWidth {
  if (cacheInvalidated_) {
    [self populateSizeCache];
  }
  float height = 0;
  float width = 0;
  id<RAREiPlatformComponent> c;
  int len = [self getComponentCount];
  int count = 0;
  float biggest = 0;
  float p1 = [RAREScreenUtils PLATFORM_PIXELS_1];
  for (int i = 0; i < len; i++) {
    c = [self getComponentAtWithInt:i];
    if (![((id<RAREiPlatformComponent>) nil_chk(c)) isVisible]) {
      continue;
    }
    count++;
    RAREJGCellConstraints *cc = [RAREaComponent getMeasuredCellConstraintsWithRAREiPlatformComponent:c withBoolean:NO];
    width += ((RAREJGCellConstraints *) nil_chk(cc))->gridWidth_ + p1;
    height = [JavaLangMath maxWithFloat:height withFloat:cc->gridHeight_];
    biggest = [JavaLangMath maxWithFloat:biggest withFloat:cc->gridWidth_ + p1];
  }
  if (buttonsSameSize_) {
    width = count * biggest;
  }
  ((RAREUIDimension *) nil_chk(size))->width_ = width;
  size->height_ = height;
}

- (id<RAREiPlatformShape>)getPressedShape {
  int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
  id<RAREaNavigatorPanel_iButton> comp = nil;
  if ([self isHiearchical] && [((id<RAREaNavigatorPanel_iButton>) check_protocol_cast([self getBackButton], @protocol(RAREaNavigatorPanel_iButton))) isPressed]) {
    comp = (id<RAREaNavigatorPanel_iButton>) check_protocol_cast([self getBackButton], @protocol(RAREaNavigatorPanel_iButton));
  }
  if ((selectedButton_ == comp) && (comp != nil)) {
    return nil;
  }
  if ((len == 1) || (comp != nil)) {
    if (comp == nil) {
      comp = [buttons_ getWithInt:0];
      if (![((id<RAREaNavigatorPanel_iButton>) nil_chk(comp)) isPressed]) {
        return nil;
      }
    }
    return [self getPressedShapeWithRAREaNavigatorPanel_iButton:comp];
  }
  id<RAREiPlatformShape> p = nil;
  float p1 = [RAREScreenUtils PLATFORM_PIXELS_1];
  for (int i = 0; i < len; i++) {
    comp = [buttons_ getWithInt:i];
    if ([((id<RAREaNavigatorPanel_iButton>) nil_chk(comp)) isPressed]) {
      if (![self isHiearchical]) {
        return [self getPressedShapeWithRAREaNavigatorPanel_iButton:comp];
      }
      float x = [comp getX] - p1;
      float y = 1;
      float w = [comp getWidth];
      float h = [self getHeight];
      float m = h / 2 - p1;
      float x1 = x + w - m;
      float x2 = x + w;
      IOSFloatArray *xp;
      IOSFloatArray *yp;
      if (i == 0) {
        xp = [IOSFloatArray arrayWithFloats:(float[]){ x, x1, x2, x1, x, x } count:6];
        yp = [IOSFloatArray arrayWithFloats:(float[]){ y, y, y + m, y + h, y + h, y } count:6];
        p = [self newPolygonWithFloatArray:xp withFloatArray:yp withInt:(int) [xp count]];
      }
      else if (i == len - 1) {
        float xl = x - m - p1;
        x2 += 2;
        xp = [IOSFloatArray arrayWithFloats:(float[]){ xl, x2, x2, xl, x, xl } count:6];
        yp = [IOSFloatArray arrayWithFloats:(float[]){ y, y, y + h, y + h, y + m, y } count:6];
        p = [self newPolygonWithFloatArray:xp withFloatArray:yp withInt:(int) [xp count]];
      }
      else {
        float xl = x - m - p1;
        xp = [IOSFloatArray arrayWithFloats:(float[]){ xl, x1, x2, x1, xl, x, x - m } count:7];
        yp = [IOSFloatArray arrayWithFloats:(float[]){ y, y, y + m, y + h, y + h, y + m, y } count:7];
        p = [self newPolygonWithFloatArray:xp withFloatArray:yp withInt:(int) [xp count]];
      }
    }
  }
  return p;
}

- (id<RAREiPlatformShape>)getPressedShapeWithRAREaNavigatorPanel_iButton:(id<RAREaNavigatorPanel_iButton>)c {
  if (c == nil) {
    return nil;
  }
  RAREUIRectangle *r = [((id<RAREaNavigatorPanel_iButton>) nil_chk(c)) getBoundsWithRAREUIRectangle:nil];
  ((RAREUIRectangle *) nil_chk(r))->x_ -= [RAREScreenUtils PLATFORM_PIXELS_1];
  r->y_ = [RAREScreenUtils PLATFORM_PIXELS_1];
  r->height_ = [self getHeight];
  if ([self isFirstVisibleWithRAREaNavigatorPanel_iButton:c]) {
    r->x_ = 0;
  }
  int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
  id<RAREaNavigatorPanel_iButton> b = [self getNextVisibleWithInt:[self indexOfWithRAREiActionComponent:c]];
  if (b != nil) {
    r->width_ = [b getX] - r->x_;
  }
  else if ((len > 0)) {
    r->width_ = [self getWidth] - r->x_;
  }
  return [RAREaPlatformHelper createShapeWithFloat:r->x_ withFloat:r->y_ withFloat:r->width_ withFloat:r->height_];
}

- (BOOL)isFirstVisibleWithRAREaNavigatorPanel_iButton:(id<RAREaNavigatorPanel_iButton>)c {
  int len = [((RAREUTIdentityArrayList *) nil_chk(buttons_)) size];
  id<RAREaNavigatorPanel_iButton> b;
  for (int i = 0; i < len; i++) {
    b = [buttons_ getWithInt:i];
    if ([((id<RAREaNavigatorPanel_iButton>) nil_chk(b)) isVisible]) {
      return b == c;
    }
  }
  return NO;
}

- (id<RAREiPlatformShape>)newPolygonWithFloatArray:(IOSFloatArray *)xp
                                    withFloatArray:(IOSFloatArray *)yp
                                           withInt:(int)length {
  id<RAREiPath> p = [RAREaPlatformHelper createPath];
  (void) [((id<RAREiPath>) nil_chk(p)) moveToWithFloat:IOSFloatArray_Get(nil_chk(xp), 0) withFloat:IOSFloatArray_Get(nil_chk(yp), 0)];
  for (int i = 1; i < length; i++) {
    (void) [p lineToWithFloat:IOSFloatArray_Get(xp, i) withFloat:IOSFloatArray_Get(yp, i)];
  }
  (void) [p lineToWithFloat:IOSFloatArray_Get(xp, 0) withFloat:IOSFloatArray_Get(yp, 0)];
  return p;
}

- (void)copyAllFieldsTo:(RAREaNavigatorPanel *)other {
  [super copyAllFieldsTo:other];
  other->alwaysFireAction_ = alwaysFireAction_;
  other->backButton_ = backButton_;
  other->backIcon_ = backIcon_;
  other->buttonBorder_ = buttonBorder_;
  other->buttons_ = buttons_;
  other->buttonsSameSize_ = buttonsSameSize_;
  other->iconPosition_ = iconPosition_;
  other->panelType_ = panelType_;
  other->pressedPainter_ = pressedPainter_;
  other->selectedButton_ = selectedButton_;
  other->selectedFont_ = selectedFont_;
  other->selectedForeground_ = selectedForeground_;
  other->selectedPainter_ = selectedPainter_;
  other->separatorLineColor_ = separatorLineColor_;
  other->separatorLineColorSet_ = separatorLineColorSet_;
  other->showIconsOnly_ = showIconsOnly_;
  other->sizeCache_ = sizeCache_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithId:", NULL, NULL, 0x4, NULL },
    { "addButtonWithNSString:", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "addButtonWithRAREUIAction:", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "addButtonWithNSString:withRAREiPlatformIcon:", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "getActionWithInt:", NULL, "LRAREUIAction", 0x1, NULL },
    { "getBackButton", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "getButtonWithInt:", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "getIconPosition", NULL, "LRARERenderableDataItem_IconPositionEnum", 0x1, NULL },
    { "getPanelType", NULL, "LRAREiNavigatorPanel_PanelTypeEnum", 0x1, NULL },
    { "getPressedPainter", NULL, "LRAREiPlatformPainter", 0x1, NULL },
    { "getSelectedAction", NULL, "LRAREUIAction", 0x1, NULL },
    { "getSelectedButton", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "getSelectedFont", NULL, "LRAREUIFont", 0x1, NULL },
    { "getSelectedForeground", NULL, "LRAREUIColor", 0x1, NULL },
    { "getSelectedPainter", NULL, "LRAREiPlatformPainter", 0x1, NULL },
    { "getSeparatorLineColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "isActionEnabledWithInt:", NULL, "Z", 0x1, NULL },
    { "isAlwaysFireAction", NULL, "Z", 0x1, NULL },
    { "isHiearchical", NULL, "Z", 0x1, NULL },
    { "isShowIconsOnly", NULL, "Z", 0x1, NULL },
    { "isToggle", NULL, "Z", 0x1, NULL },
    { "createBackButtonWithRAREiPlatformIcon:", NULL, "LRAREaNavigatorPanel_iButton", 0x404, NULL },
    { "createButtonWithRAREUIAction:", NULL, "LRAREaNavigatorPanel_iButton", 0x404, NULL },
    { "createButtonWithNSString:withRAREiPlatformIcon:", NULL, "LRAREaNavigatorPanel_iButton", 0x404, NULL },
    { "initializePanelWithRAREiPlatformIcon:", NULL, "V", 0x4, NULL },
    { "layoutWithFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "paintBorderWithRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:withBoolean:", NULL, "V", 0x4, NULL },
    { "paintBorderWithRAREiPlatformGraphics:withInt:withInt:withInt:withInt:withBoolean:", NULL, "V", 0x4, NULL },
    { "paintPanelWithRAREiPlatformGraphics:withRAREUIRectangle:", NULL, "V", 0x4, NULL },
    { "paintShapeWithRAREiPlatformGraphics:withRAREiPlatformShape:withRAREiPlatformPainter:", NULL, "V", 0x4, NULL },
    { "populateSizeCache", NULL, "V", 0x4, NULL },
    { "repaintPanel", NULL, "V", 0x4, NULL },
    { "getMinimumSizeExWithRAREUIDimension:", NULL, "V", 0x4, NULL },
    { "getNextVisibleWithInt:", NULL, "LRAREaNavigatorPanel_iButton", 0x4, NULL },
    { "getPreferredSizeExWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
    { "getPressedShape", NULL, "LRAREiPlatformShape", 0x4, NULL },
    { "getPressedShapeWithRAREaNavigatorPanel_iButton:", NULL, "LRAREiPlatformShape", 0x4, NULL },
    { "isFirstVisibleWithRAREaNavigatorPanel_iButton:", NULL, "Z", 0x4, NULL },
    { "newPolygonWithFloatArray:withFloatArray:withInt:", NULL, "LRAREiPlatformShape", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "buttons_", NULL, 0x4, "LRAREUTIdentityArrayList" },
    { "panelType_", NULL, 0x4, "LRAREiNavigatorPanel_PanelTypeEnum" },
    { "iconPosition_", NULL, 0x4, "LRARERenderableDataItem_IconPositionEnum" },
    { "sizeCache_", NULL, 0x0, "LJavaUtilArrayList" },
    { "alwaysFireAction_", NULL, 0x4, "Z" },
    { "backButton_", NULL, 0x4, "LRAREaNavigatorPanel_iButton" },
    { "backIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "buttonsSameSize_", NULL, 0x4, "Z" },
    { "pressedPainter_", NULL, 0x4, "LRAREiPlatformPainter" },
    { "selectedButton_", NULL, 0x4, "LRAREaNavigatorPanel_iButton" },
    { "selectedFont_", NULL, 0x4, "LRAREUIFont" },
    { "selectedForeground_", NULL, 0x4, "LRAREUIColor" },
    { "selectedPainter_", NULL, 0x4, "LRAREiPlatformPainter" },
    { "separatorLineColor_", NULL, 0x4, "LRAREUIColor" },
    { "separatorLineColorSet_", NULL, 0x4, "Z" },
    { "showIconsOnly_", NULL, 0x4, "Z" },
    { "buttonBorder_", NULL, 0x4, "LRAREUIEmptyBorder" },
  };
  static J2ObjcClassInfo _RAREaNavigatorPanel = { "aNavigatorPanel", "com.appnativa.rare.ui", NULL, 0x401, 39, methods, 17, fields, 0, NULL};
  return &_RAREaNavigatorPanel;
}

@end

@interface RAREaNavigatorPanel_iButton : NSObject
@end

@implementation RAREaNavigatorPanel_iButton

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "resetBorder", NULL, "V", 0x401, NULL },
    { "setMarginWithRAREUIInsets:", NULL, "V", 0x401, NULL },
    { "setShowIconOnlyWithBoolean:", NULL, "V", 0x401, NULL },
    { "getAction", NULL, "LRAREUIAction", 0x401, NULL },
    { "getBoundsWithRAREUIRectangle:", NULL, "LRAREUIRectangle", 0x401, NULL },
    { "isPressed", NULL, "Z", 0x401, NULL },
  };
  static J2ObjcClassInfo _RAREaNavigatorPanel_iButton = { "iButton", "com.appnativa.rare.ui", "aNavigatorPanel", 0x204, 6, methods, 0, NULL, 0, NULL};
  return &_RAREaNavigatorPanel_iButton;
}

@end
@implementation RAREaNavigatorPanel_aButton

- (void)resetBorder {
}

- (void)setSelectedWithBoolean:(BOOL)selected {
  if ([this$0_ isToggle]) {
    if (selected) {
      if ([this$0_ getSelectedButton] != nil) {
        [((id<RAREiActionComponent>) nil_chk([this$0_ getSelectedButton])) setSelectedWithBoolean:NO];
      }
      [this$0_ setSelectedButtonWithRAREiActionComponent:self];
    }
  }
  self->selected_ = selected;
  if (selected) {
    if (selectedIcon_ != nil) {
      [self setIconWithRAREiPlatformIcon:selectedIcon_];
    }
  }
  else {
    if (selectedIcon_ != nil) {
      [self setIconWithRAREiPlatformIcon:icon_];
    }
  }
  if (this$0_->selectedForeground_ != nil) {
    if (selected) {
      [self setForegroundWithRAREUIColor:this$0_->selectedForeground_];
    }
    else {
      [self setForegroundWithRAREUIColor:[this$0_ getForeground]];
    }
  }
  if (this$0_->selectedFont_ != nil) {
    if (selected) {
      [self setFontWithRAREUIFont:this$0_->selectedFont_];
    }
    else {
      [self setFontWithRAREUIFont:[this$0_ getFont]];
    }
  }
  [self repaint];
}

- (void)setSelectedIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)selectedIcon {
  self->selectedIcon_ = selectedIcon;
}

- (void)setShowIconOnlyWithBoolean:(BOOL)icon {
  iconOnly_ = icon;
  [super setTextWithJavaLangCharSequence:icon ? nil : text_];
}

- (void)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  self->text_ = text;
  if (!iconOnly_) {
    [super setTextWithJavaLangCharSequence:text];
  }
}

- (RAREUIAction *)getAction {
  return action_;
}

- (RAREUIDimension *)getPreferredSize {
  RAREUIDimension *d = [super getPreferredSize];
  ((RAREUIDimension *) nil_chk(d))->width_ += (d->height_ / 2 - 1);
  return d;
}

- (id<RAREiPlatformIcon>)getSelectedIcon {
  return selectedIcon_;
}

- (BOOL)isSelected {
  return selected_;
}

- (void)initialize__WithNSString:(NSString *)text
           withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon
                withRAREUIAction:(RAREUIAction *)a {
  if (a != nil) {
    [self setActionWithRAREUIAction:a];
    selectedIcon_ = [a getSelectedIcon];
    if ([(id) selectedIcon_ isKindOfClass:[RAREUIImageIcon class]]) {
      [((RAREUIImageIcon *) check_class_cast(selectedIcon_, [RAREUIImageIcon class])) isImageLoadedWithRAREiImageObserver:this$0_];
    }
    if ([(id) [a getIcon] isKindOfClass:[RAREUIImageIcon class]]) {
      [((RAREUIImageIcon *) check_class_cast([a getIcon], [RAREUIImageIcon class])) isImageLoadedWithRAREiImageObserver:this$0_];
    }
    action_ = a;
  }
  if (text != nil) {
    [self setTextWithJavaLangCharSequence:text];
  }
  if (icon != nil) {
    if ([(id) icon isKindOfClass:[RAREUIImageIcon class]]) {
      [((RAREUIImageIcon *) check_class_cast(icon, [RAREUIImageIcon class])) isImageLoadedWithRAREiImageObserver:this$0_];
    }
    [self setIconWithRAREiPlatformIcon:icon];
  }
}

- (id)initWithRAREaNavigatorPanel:(RAREaNavigatorPanel *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(RAREaNavigatorPanel_aButton *)other {
  [super copyAllFieldsTo:other];
  other->iconOnly_ = iconOnly_;
  other->selected_ = selected_;
  other->text_ = text_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getAction", NULL, "LRAREUIAction", 0x1, NULL },
    { "getPreferredSize", NULL, "LRAREUIDimension", 0x1, NULL },
    { "getSelectedIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "isSelected", NULL, "Z", 0x1, NULL },
    { "initialize__WithNSString:withRAREiPlatformIcon:withRAREUIAction:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaNavigatorPanel" },
    { "iconOnly_", NULL, 0x4, "Z" },
    { "selected_", NULL, 0x4, "Z" },
    { "text_", NULL, 0x4, "LJavaLangCharSequence" },
  };
  static J2ObjcClassInfo _RAREaNavigatorPanel_aButton = { "aButton", "com.appnativa.rare.ui", "aNavigatorPanel", 0x404, 5, methods, 4, fields, 0, NULL};
  return &_RAREaNavigatorPanel_aButton;
}

@end
