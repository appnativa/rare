//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple-android-htmllabel/com/appnativa/rare/ui/text/HTMLParser.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "android/text/Html.h"
#include "android/text/Spanned.h"
#include "android/text/TextUtils.h"
#include "android/text/style/AbsoluteSizeSpan.h"
#include "android/text/style/AlignmentSpan.h"
#include "android/text/style/CSSStyleSpan.h"
#include "android/text/style/CenterSpan.h"
#include "android/text/style/CharacterStyle.h"
#include "android/text/style/ForegroundColorSpan.h"
#include "android/text/style/ImageSpan.h"
#include "android/text/style/ParagraphStyle.h"
#include "android/text/style/QuoteSpan.h"
#include "android/text/style/StrikethroughSpan.h"
#include "android/text/style/StyleSpan.h"
#include "android/text/style/SubscriptSpan.h"
#include "android/text/style/SuperscriptSpan.h"
#include "android/text/style/TypefaceSpan.h"
#include "android/text/style/URLSpan.h"
#include "android/text/style/UnderlineSpan.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/text/HTMLCharSequence.h"
#include "com/appnativa/rare/ui/text/HTMLParser.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#import <CoreText/CoreText.h>

@implementation RAREHTMLParser

static RAREHTMLParser * RAREHTMLParser__instance_;

+ (RAREHTMLParser *)_instance {
  return RAREHTMLParser__instance_;
}

+ (void)set_instance:(RAREHTMLParser *)_instance {
  RAREHTMLParser__instance_ = _instance;
}

- (id)init {
  return [super init];
}

+ (RAREHTMLCharSequence *)fromFontWithNSString:(NSString *)source
                                withRAREUIFont:(RAREUIFont *)font {
  id astring = [RAREHTMLParser createAttributedStringWithNSString:source];
  [((RAREUIFont *) nil_chk(font)) addToAttributedStringWithId:astring withInt:0 withInt:[((NSString *) nil_chk(source)) sequenceLength]];
  return [[RAREHTMLCharSequence alloc] initWithNSString:source withId:astring];
}

+ (RAREHTMLCharSequence *)fromHtmlWithNSString:(NSString *)source
                     withJavaLangStringBuilder:(JavaLangStringBuilder *)plaintTextOutput
                                withRAREUIFont:(RAREUIFont *)base {
  return [RAREHTMLParser fromHtmlWithNSString:source withAndroidTextHtml_TagHandler:nil withJavaLangStringBuilder:plaintTextOutput withRAREUIFont:base];
}

+ (RAREHTMLCharSequence *)fromHtmlWithNSString:(NSString *)source
                withAndroidTextHtml_TagHandler:(id<AndroidTextHtml_TagHandler>)tagHandler
                     withJavaLangStringBuilder:(JavaLangStringBuilder *)plaintTextOutput
                                withRAREUIFont:(RAREUIFont *)base {
  if ([((NSString *) nil_chk(source)) hasPrefix:@"<html>"]) {
    if ([source hasSuffix:@"</html>"]) {
      source = [source substring:6 endIndex:[source sequenceLength] - 7];
    }
    else {
      source = [source substring:6];
    }
  }
  if (base == nil) {
    base = [RAREFontUtils getDefaultFont];
  }
  RAREHTMLParser_ANode *node = [[RAREHTMLParser_ANode alloc] init];
  node->font_ = base;
  id<AndroidTextSpanned> spanned = [AndroidTextHtml fromHtmlWithNSString:source withAndroidTextHtml_ImageGetter:nil withAndroidTextHtml_TagHandler:tagHandler];
  [((RAREHTMLParser *) nil_chk(RAREHTMLParser__instance_)) withinHtmlWithAndroidTextHtml_Node:node withAndroidTextSpanned:spanned];
  if (plaintTextOutput == nil) {
    plaintTextOutput = [[JavaLangStringBuilder alloc] init];
  }
  (void) [RAREHTMLParser nodeToStringWithRAREHTMLParser_ANode:node withJavaLangStringBuilder:plaintTextOutput];
  NSString *s = [((JavaLangStringBuilder *) nil_chk(plaintTextOutput)) description];
  id astring = [RAREHTMLParser createAttributedStringWithNSString:s];
  [RAREHTMLParser updateAttributesWithRAREHTMLParser_ANode:node withId:astring];
  if (spanned != nil) {
    [spanned dispose];
  }
  return [[RAREHTMLCharSequence alloc] initWithNSString:s withId:astring];
}

- (void)withinHtmlWithAndroidTextHtml_Node:(AndroidTextHtml_Node *)outArg
                    withAndroidTextSpanned:(id<AndroidTextSpanned>)text {
  int len = [((id<AndroidTextSpanned>) nil_chk(text)) sequenceLength];
  int next;
  RAREHTMLParser_ANode *p = (RAREHTMLParser_ANode *) check_class_cast(outArg, [RAREHTMLParser_ANode class]);
  for (int i = 0; i < [text sequenceLength]; i = next) {
    next = [text nextSpanTransitionWithInt:i withInt:len withIOSClass:[IOSClass classWithProtocol:@protocol(RAREParagraphStyle)]];
    IOSObjectArray *style = [text getSpansWithInt:i withInt:next withIOSClass:[IOSClass classWithProtocol:@protocol(RAREParagraphStyle)]];
    BOOL needDiv = NO;
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(style)) count]; j++) {
      if ([(id) IOSObjectArray_Get(style, j) conformsToProtocol: @protocol(RAREAlignmentSpan)]) {
        RAREAlignmentSpan_AlignmentEnum *align = [((id<RAREAlignmentSpan>) check_protocol_cast(IOSObjectArray_Get(style, j), @protocol(RAREAlignmentSpan))) getAlignment];
        needDiv = YES;
        if (align == [RAREAlignmentSpan_AlignmentEnum CENTER]) {
          ((RAREHTMLParser_ANode *) nil_chk(p))->alignment_ = 2;
        }
        else if (align == [RAREAlignmentSpan_AlignmentEnum RIGHT]) {
          ((RAREHTMLParser_ANode *) nil_chk(p))->alignment_ = 3;
        }
        else {
          ((RAREHTMLParser_ANode *) nil_chk(p))->alignment_ = 1;
        }
      }
    }
    if (needDiv) {
      p = (RAREHTMLParser_ANode *) check_class_cast([((AndroidTextHtml_Node *) nil_chk(outArg)) paragraph], [RAREHTMLParser_ANode class]);
    }
    [self withinDivWithAndroidTextHtml_Node:p withAndroidTextSpanned:text withInt:i withInt:next];
  }
}

- (NSString *)getPlainTextWithNSString:(NSString *)source {
  return [((JavaLangStringBuilder *) nil_chk([RAREHTMLParser getPlainTextWithNSString:source withAndroidTextHtml_ImageGetter:nil withAndroidTextHtml_TagHandler:nil withJavaLangStringBuilder:[[JavaLangStringBuilder alloc] init]])) description];
}

+ (JavaLangStringBuilder *)getPlainTextWithNSString:(NSString *)source
                    withAndroidTextHtml_ImageGetter:(id<AndroidTextHtml_ImageGetter>)imageGetter
                     withAndroidTextHtml_TagHandler:(id<AndroidTextHtml_TagHandler>)tagHandler
                          withJavaLangStringBuilder:(JavaLangStringBuilder *)plaintTextOutput {
  if ([((NSString *) nil_chk(source)) hasPrefix:@"<html>"]) {
    if ([source hasSuffix:@"</html>"]) {
      source = [source substring:6 endIndex:[source sequenceLength] - 7];
    }
    else {
      source = [source substring:6];
    }
  }
  id<AndroidTextSpanned> spanned = [AndroidTextHtml fromHtmlWithNSString:source withAndroidTextHtml_ImageGetter:imageGetter withAndroidTextHtml_TagHandler:tagHandler];
  AndroidTextHtml_Node *node = [AndroidTextHtml toNodeWithAndroidTextSpanned:spanned withAndroidTextiNodeBuilder:RAREHTMLParser__instance_];
  (void) [RAREHTMLParser nodeToStringWithRAREHTMLParser_ANode:(RAREHTMLParser_ANode *) check_class_cast(node, [RAREHTMLParser_ANode class]) withJavaLangStringBuilder:plaintTextOutput];
  if (spanned != nil) {
    [spanned dispose];
  }
  return plaintTextOutput;
}

+ (JavaLangStringBuilder *)nodeToStringWithRAREHTMLParser_ANode:(RAREHTMLParser_ANode *)node
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  ((RAREHTMLParser_ANode *) nil_chk(node))->offset_ = [((JavaLangStringBuilder *) nil_chk(sb)) sequenceLength];
  if (node->children_ == nil) {
    if (node->text_ != nil) {
      (void) [sb appendWithNSString:node->text_];
    }
  }
  else {
    for (AndroidTextHtml_Node * __strong n in node->children_) {
      (void) [RAREHTMLParser nodeToStringWithRAREHTMLParser_ANode:(RAREHTMLParser_ANode *) check_class_cast(n, [RAREHTMLParser_ANode class]) withJavaLangStringBuilder:sb];
    }
  }
  for (int i = 0; i < node->linefeed_; i++) {
    (void) [sb appendWithNSString:@"\n"];
  }
  node->length_ = [sb sequenceLength] - node->offset_;
  return sb;
}

+ (void)updateAttributesWithRAREHTMLParser_ANode:(RAREHTMLParser_ANode *)node
                                          withId:(id)astring {
  [((RAREHTMLParser_ANode *) nil_chk(node)) updateAttributedStringWithId:astring];
  if (node->children_ != nil) {
    for (AndroidTextHtml_Node * __strong n in node->children_) {
      [RAREHTMLParser updateAttributesWithRAREHTMLParser_ANode:(RAREHTMLParser_ANode *) check_class_cast(n, [RAREHTMLParser_ANode class]) withId:astring];
    }
  }
}

- (void)withinBlockquoteWithAndroidTextHtml_Node:(AndroidTextHtml_Node *)outArg
                          withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                         withInt:(int)start
                                         withInt:(int)end {
  int next;
  for (int i = start; i < end; i = next) {
    next = [AndroidTextTextUtils indexOfWithJavaLangCharSequence:text withChar:0x000a withInt:i withInt:end];
    if (next < 0) {
      next = end;
    }
    int nl = 0;
    while ((next < end) && ([((id<AndroidTextSpanned>) nil_chk(text)) charAtWithInt:next] == 0x000a)) {
      nl++;
      next++;
    }
    [self withinParagraphWithAndroidTextHtml_Node:outArg withAndroidTextSpanned:text withInt:i withInt:next - nl withInt:nl withBoolean:next == end];
  }
}

- (void)withinDivWithAndroidTextHtml_Node:(AndroidTextHtml_Node *)outArg
                   withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                  withInt:(int)start
                                  withInt:(int)end {
  int next;
  AndroidTextHtml_Node *bq;
  for (int i = start; i < end; i = next) {
    next = [((id<AndroidTextSpanned>) nil_chk(text)) nextSpanTransitionWithInt:i withInt:end withIOSClass:[IOSClass classWithClass:[RAREQuoteSpan class]]];
    IOSObjectArray *quotes = [text getSpansWithInt:i withInt:next withIOSClass:[IOSClass classWithClass:[RAREQuoteSpan class]]];
    bq = [((AndroidTextHtml_Node *) nil_chk(outArg)) blockQuoteWithInt:(int) [((IOSObjectArray *) nil_chk(quotes)) count]];
    [self withinBlockquoteWithAndroidTextHtml_Node:bq withAndroidTextSpanned:text withInt:i withInt:next];
  }
}

- (void)withinParagraphWithAndroidTextHtml_Node:(AndroidTextHtml_Node *)parent
                         withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                        withInt:(int)start
                                        withInt:(int)end
                                        withInt:(int)nl
                                    withBoolean:(BOOL)last {
  int next;
  RAREHTMLParser_ANode *out = nil;
  for (int i = start; i < end; i = next) {
    next = [((id<AndroidTextSpanned>) nil_chk(text)) nextSpanTransitionWithInt:i withInt:end withIOSClass:[IOSClass classWithClass:[RARECharacterStyle class]]];
    IOSObjectArray *style = [text getSpansWithInt:i withInt:next withIOSClass:[IOSClass classWithClass:[RARECharacterStyle class]]];
    out = (RAREHTMLParser_ANode *) check_class_cast([((AndroidTextHtml_Node *) nil_chk(parent)) newChild], [RAREHTMLParser_ANode class]);
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(style)) count]; j++) {
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREStyleSpan class]]) {
        int s = [((RAREStyleSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREStyleSpan class])) getStyle];
        if ((s & AndroidTextHtml_Typeface_BOLD) != 0) {
          ((RAREHTMLParser_ANode *) nil_chk(out))->font_ = [((RAREUIFont *) nil_chk([out getFont])) deriveBold];
        }
        if ((s & AndroidTextHtml_Typeface_ITALIC) != 0) {
          ((RAREHTMLParser_ANode *) nil_chk(out))->font_ = [((RAREUIFont *) nil_chk([out getFont])) deriveItalic];
        }
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARETypefaceSpan class]]) {
        NSString *s = [((RARETypefaceSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RARETypefaceSpan class])) getFamily];
        if ([((NSString *) nil_chk(s)) isEqual:@"monospace"]) {
          ((RAREHTMLParser_ANode *) nil_chk(out))->font_ = [RAREFontUtils getMonospacedFontWithInt:(int) [RAREFontUtils getDefaultFontSize] - 1];
        }
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARECSSStyleSpan class]]) {
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARESuperscriptSpan class]]) {
        ((RAREHTMLParser_ANode *) nil_chk(out))->subSuperScript_ = 1;
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARESubscriptSpan class]]) {
        ((RAREHTMLParser_ANode *) nil_chk(out))->subSuperScript_ = -1;
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREUnderlineSpan class]]) {
        ((RAREHTMLParser_ANode *) nil_chk(out))->font_ = [((RAREUIFont *) nil_chk([out getFont])) deriveUnderline];
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARECenterSpan class]]) {
        ((RAREHTMLParser_ANode *) nil_chk(out))->alignment_ = 2;
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREStrikethroughSpan class]]) {
        ((RAREHTMLParser_ANode *) nil_chk(out))->font_ = [((RAREUIFont *) nil_chk([out getFont])) deriveStrikethrough];
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREURLSpan class]]) {
        (void) [((RAREHTMLParser_ANode *) nil_chk(out)) hrefWithNSString:[((RAREURLSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREURLSpan class])) getURL]];
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREImageSpan class]]) {
        (void) [((RAREHTMLParser_ANode *) nil_chk(out)) imageWithNSString:[((RAREImageSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREImageSpan class])) getSource]];
        i = next;
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREAbsoluteSizeSpan class]]) {
        ((RAREHTMLParser_ANode *) nil_chk(out))->font_ = [((RAREUIFont *) nil_chk([out getFont])) deriveFontSizeWithFloat:[((RAREAbsoluteSizeSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREAbsoluteSizeSpan class])) getSizeWithFloat:[((RAREUIFont *) nil_chk([out getFont])) getSize2D]]];
      }
      else if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREForegroundColorSpan class]]) {
        NSString *s = [((RAREForegroundColorSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREForegroundColorSpan class])) getForegroundColor];
        ((RAREHTMLParser_ANode *) nil_chk(out))->color_ = [RAREColorUtils getColorWithNSString:s];
      }
    }
    [self withinStyleWithAndroidTextHtml_Node:(out == nil) ? parent : out withAndroidTextSpanned:text withInt:i withInt:next];
  }
  ((AndroidTextHtml_Node *) nil_chk([((AndroidTextHtml_Node *) nil_chk(parent)) newChild]))->linefeed_ = nl;
}

- (void)withinStyleWithAndroidTextHtml_Node:(AndroidTextHtml_Node *)outArg
                     withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                    withInt:(int)start
                                    withInt:(int)end {
  if (((AndroidTextHtml_Node *) nil_chk(outArg))->text_ != nil) {
    outArg->text_ = [NSString stringWithFormat:@"%@%@", outArg->text_, [((id<AndroidTextSpanned>) nil_chk(text)) subSequenceFrom:start to:end]];
  }
  else {
    outArg->text_ = [((id<JavaLangCharSequence>) nil_chk([((id<AndroidTextSpanned>) nil_chk(text)) subSequenceFrom:start to:end])) sequenceDescription];
  }
}

+ (void)addAlignmentWithId:(id)astring
                   withInt:(int)val
                   withInt:(int)offset
                   withInt:(int)length {
  NSMutableAttributedString* s=(NSMutableAttributedString*)astring;
  NSMutableParagraphStyle* p=  [[NSParagraphStyle defaultParagraphStyle]mutableCopy];
  #if TARGET_OS_IPHONE
  if(val==1) {
    [p setAlignment:NSTextAlignmentLeft];
  }
  else if(val==2) {
    [p setAlignment:NSTextAlignmentCenter];
  }
  else if(val==3) {
    [p setAlignment:NSTextAlignmentRight];
  }
  #else
  if(val==1) {
    [p setAlignment:NSLeftTextAlignment];
  }
  else if(val==2) {
    [p setAlignment:NSCenterTextAlignment];
  }
  else if(val==3) {
    [p setAlignment:NSRightTextAlignment];
  }
  #endif
  [s addAttribute: NSParagraphStyleAttributeName
  value: p
  range: NSMakeRange(offset,length)];
}

+ (void)addSubSuperScriptWithId:(id)astring
                        withInt:(int)val
                        withInt:(int)offset
                        withInt:(int)length {
  NSMutableAttributedString* s=(NSMutableAttributedString*)astring;
  #if TARGET_OS_IPHONE
  [s addAttribute: (NSString*)kCTSuperscriptAttributeName
  value: (1 ? @"1" : @"-1" )
  range: NSMakeRange(offset,length)];
  #else
  [s addAttribute: NSSuperscriptAttributeName
  value: (1 ? @"1" : @"-1" )
  range: NSMakeRange(offset,length)];
  #endif
}

+ (id)createAttributedStringWithNSString:(NSString *)text {
  NSMutableAttributedString* s=[NSMutableAttributedString new];
  [s.mutableString appendString: text];
  return s;
}

+ (void)initialize {
  if (self == [RAREHTMLParser class]) {
    RAREHTMLParser__instance_ = [[RAREHTMLParser alloc] init];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "fromFontWithNSString:withRAREUIFont:", NULL, "LRAREHTMLCharSequence", 0x9, NULL },
    { "fromHtmlWithNSString:withJavaLangStringBuilder:withRAREUIFont:", NULL, "LRAREHTMLCharSequence", 0x9, NULL },
    { "fromHtmlWithNSString:withAndroidTextHtml_TagHandler:withJavaLangStringBuilder:withRAREUIFont:", NULL, "LRAREHTMLCharSequence", 0x9, NULL },
    { "getPlainTextWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getPlainTextWithNSString:withAndroidTextHtml_ImageGetter:withAndroidTextHtml_TagHandler:withJavaLangStringBuilder:", NULL, "LJavaLangStringBuilder", 0x9, NULL },
    { "nodeToStringWithRAREHTMLParser_ANode:withJavaLangStringBuilder:", NULL, "LJavaLangStringBuilder", 0x8, NULL },
    { "updateAttributesWithRAREHTMLParser_ANode:withId:", NULL, "V", 0x8, NULL },
    { "withinBlockquoteWithAndroidTextHtml_Node:withAndroidTextSpanned:withInt:withInt:", NULL, "V", 0x4, NULL },
    { "withinDivWithAndroidTextHtml_Node:withAndroidTextSpanned:withInt:withInt:", NULL, "V", 0x4, NULL },
    { "withinParagraphWithAndroidTextHtml_Node:withAndroidTextSpanned:withInt:withInt:withInt:withBoolean:", NULL, "V", 0x4, NULL },
    { "withinStyleWithAndroidTextHtml_Node:withAndroidTextSpanned:withInt:withInt:", NULL, "V", 0x4, NULL },
    { "addAlignmentWithId:withInt:withInt:withInt:", NULL, "V", 0x10a, NULL },
    { "addSubSuperScriptWithId:withInt:withInt:withInt:", NULL, "V", 0x10a, NULL },
    { "createAttributedStringWithNSString:", NULL, "LNSObject", 0x10a, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "_instance_", NULL, 0xa, "LRAREHTMLParser" },
  };
  static J2ObjcClassInfo _RAREHTMLParser = { "HTMLParser", "com.appnativa.rare.ui.text", NULL, 0x1, 14, methods, 1, fields, 0, NULL};
  return &_RAREHTMLParser;
}

@end
@implementation RAREHTMLParser_ANode

- (RAREHTMLParser_ANode *)newChild {
  RAREHTMLParser_ANode *node = [[RAREHTMLParser_ANode alloc] init];
  if (children_ == nil) {
    children_ = [[JavaUtilArrayList alloc] init];
  }
  [((JavaUtilArrayList *) nil_chk(children_)) addWithId:node];
  node->parent_ = self;
  return node;
}

- (void)updateAttributedStringWithId:(id)astring {
  if (length_ == 0) {
    return;
  }
  if (font_ != nil) {
    [font_ addToAttributedStringWithId:astring withInt:offset_ withInt:length_];
  }
  if (color_ != nil) {
    [color_ addToAttributedStringWithId:astring withInt:offset_ withInt:length_];
  }
  if (subSuperScript_ != 0) {
    [RAREHTMLParser addSubSuperScriptWithId:astring withInt:subSuperScript_ withInt:offset_ withInt:length_];
  }
  if (alignment_ > 0) {
    [RAREHTMLParser addAlignmentWithId:astring withInt:alignment_ withInt:offset_ withInt:length_];
  }
}

- (int)textLength {
  int n = (text_ == nil) ? 0 : [text_ sequenceLength];
  if (children_ != nil) {
    for (AndroidTextHtml_Node * __strong node in children_) {
      n += [((RAREHTMLParser_ANode *) check_class_cast(node, [RAREHTMLParser_ANode class])) textLength];
    }
  }
  return n;
}

- (RAREUIFont *)getFont {
  if (font_ == nil) {
    return [((RAREHTMLParser_ANode *) nil_chk(parent_)) getFont];
  }
  return font_;
}

- (id)init {
  return [super init];
}

- (void)copyAllFieldsTo:(RAREHTMLParser_ANode *)other {
  [super copyAllFieldsTo:other];
  other->alignment_ = alignment_;
  other->color_ = color_;
  other->font_ = font_;
  other->length_ = length_;
  other->offset_ = offset_;
  other->parent_ = parent_;
  other->subSuperScript_ = subSuperScript_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "newChild", NULL, "LRAREHTMLParser_ANode", 0x1, NULL },
    { "textLength", NULL, "I", 0x0, NULL },
    { "getFont", NULL, "LRAREUIFont", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "subSuperScript_", NULL, 0x1, "I" },
    { "alignment_", NULL, 0x0, "I" },
    { "color_", NULL, 0x0, "LRAREUIColor" },
    { "font_", NULL, 0x0, "LRAREUIFont" },
    { "length_", NULL, 0x0, "I" },
    { "offset_", NULL, 0x0, "I" },
    { "parent_", NULL, 0x0, "LRAREHTMLParser_ANode" },
  };
  static J2ObjcClassInfo _RAREHTMLParser_ANode = { "ANode", "com.appnativa.rare.ui.text", "HTMLParser", 0x8, 3, methods, 7, fields, 0, NULL};
  return &_RAREHTMLParser_ANode;
}

@end
