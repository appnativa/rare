//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/util/DataItemCSVParser.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "com/appnativa/rare/TemplateHandler.h"
#include "com/appnativa/rare/iDataItemParserCallback.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/spot/DataItem.h"
#include "com/appnativa/rare/spot/ItemDescription.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/util/DataItemCSVParser.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SDFNode.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSequence.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/MutableInteger.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/iURLResolver.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Integer.h"
#include "java/nio/channels/ClosedChannelException.h"
#include "java/text/ParseException.h"

@implementation RAREDataItemCSVParser

- (id)init {
  if (self = [super init]) {
    ldSep_ = 0;
    riSeparator_ = 0x0000;
    scanner_ = [[RAREUTCharScanner alloc] init];
    fscanner_ = [[RAREUTCharScanner alloc] init];
    unescape_ = NO;
    [scanner_ setParameternCharactersWithChar:'{' withChar:'}'];
    [fscanner_ setParameternCharactersWithChar:'{' withChar:'}'];
    colSep_ = RAREActionLink_DEFAULT_COL_SEPARATOR;
  }
  return self;
}

- (id)initRAREDataItemCSVParserWithJavaIoReader:(JavaIoReader *)reader {
  if (self = [super init]) {
    ldSep_ = 0;
    riSeparator_ = 0x0000;
    scanner_ = [[RAREUTCharScanner alloc] init];
    fscanner_ = [[RAREUTCharScanner alloc] init];
    unescape_ = NO;
    [scanner_ setParameternCharactersWithChar:'{' withChar:'}'];
    [fscanner_ setParameternCharactersWithChar:'{' withChar:'}'];
    [self resetWithJavaIoReader:reader withChar:RAREActionLink_DEFAULT_COL_SEPARATOR withChar:(unichar) 0];
  }
  return self;
}

- (id)initWithJavaIoReader:(JavaIoReader *)reader {
  return [self initRAREDataItemCSVParserWithJavaIoReader:reader];
}

- (id)initWithJavaIoReader:(JavaIoReader *)input
                  withChar:(unichar)colsep
                  withChar:(unichar)ldsep {
  if (self = [self initRAREDataItemCSVParserWithJavaIoReader:input]) {
    [self resetWithJavaIoReader:input withChar:colsep withChar:ldsep];
  }
  return self;
}

- (void)parseWithRAREiWidget:(id<RAREiWidget>)context
                     withInt:(int)cols
withRAREiDataItemParserCallback:(id<RAREiDataItemParserCallback>)callback {
  RAREUTCharScanner *sc = scanner_;
  RAREUTCharScanner *fsc = fscanner_;
  JavaIoBufferedReader *bi = biReader_;
  NSString *line;
  int n;
  int p;
  unichar c = colSep_;
  IOSCharArray *a;
  RARERenderableDataItem *item;
  RARERenderableDataItem *row;
  int ocols = cols;
  RARESPOTDataItem *di;
  [((id<RAREiDataItemParserCallback>) nil_chk(callback)) startedParsing];
  if (cols < 0) {
    cols = JavaLangInteger_MAX_VALUE;
  }
  if (colSep_ == 0) {
    cols = 0;
  }
  @try {
    while ((line = [((JavaIoBufferedReader *) nil_chk(bi)) readLine]) != nil) {
      line = [((NSString *) nil_chk(line)) trim];
      if ([((NSString *) nil_chk(line)) sequenceLength] == 0) {
        continue;
      }
      [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:line];
      (void) [sc trim];
      if ([sc getLength] == 0) {
        continue;
      }
      a = [sc getContent];
      row = nil;
      if (riSeparator_ != 0) {
        n = [sc indexOfWithChar:riSeparator_ withBoolean:NO withBoolean:NO];
        if (n == -1) {
          [((RAREUTMutableInteger *) nil_chk(itemLevel_)) setValueWithInt:1];
        }
        else {
          p = [sc getPosition];
          [((RAREUTMutableInteger *) nil_chk(itemLevel_)) setValueWithInt:[RAREUTSNumber intValueWithCharArray:a withInt:p withInt:n - p withBoolean:NO]];
          p = [RAREUTCharScanner indexOfWithCharArray:a withInt:p withInt:n - p withChar:'{'];
          if (p != -1) {
            [((RAREUTCharScanner *) nil_chk(fsc)) resetWithCharArray:a withInt:p withInt:n - p withBoolean:NO];
            di = [[RARESPOTDataItem alloc] init];
            [self parseItemWithRAREiWidget:context withJavaIoReader:fsc withSPOTSequence:di];
            row = [callback createItemExWithRARESPOTDataItem:di];
            ((RARERenderableDataItem *) nil_chk(row))->modelData_ = itemLevel_;
          }
          [sc consumeWithInt:n + 1];
        }
      }
      if (cols == 0) {
        row = [self parseColumnWithRAREiWidget:context withRAREUTCharScanner:sc withRAREiDataItemParserCallback:callback withBoolean:NO];
        if (itemLevel_ != nil) {
          ((RARERenderableDataItem *) nil_chk(row))->modelData_ = itemLevel_;
        }
      }
      else {
        if (row == nil) {
          row = [callback createItemWithId:nil withInt:RARERenderableDataItem_TYPE_STRING withId:nil withId:nil withId:nil];
          if (itemLevel_ != nil) {
            ((RARERenderableDataItem *) nil_chk(row))->modelData_ = itemLevel_;
          }
        }
        if (ocols > 0) {
          [((RARERenderableDataItem *) nil_chk(row)) ensureCapacityWithInt:ocols];
        }
        int count = 0;
        while (YES) {
          n = [sc indexOfWithChar:c withBoolean:YES withBoolean:YES];
          if (n == -1) {
            item = [self parseColumnWithRAREiWidget:context withRAREUTCharScanner:sc withRAREiDataItemParserCallback:callback withBoolean:NO];
            [sc consumeWithInt:[sc getLength]];
            [((RARERenderableDataItem *) nil_chk(row)) addWithId:item];
            count++;
            break;
          }
          else {
            p = [sc getRelPosition];
            n = n - p;
            [((RAREUTCharScanner *) nil_chk(fsc)) resetWithCharArray:a withInt:p withInt:n withBoolean:NO];
            [sc consumeWithInt:n + 1];
            item = [self parseColumnWithRAREiWidget:context withRAREUTCharScanner:fsc withRAREiDataItemParserCallback:callback withBoolean:NO];
          }
          if (item == nil) {
            item = [callback createItemWithId:nil withInt:RARERenderableDataItem_TYPE_STRING withId:nil withId:nil withId:nil];
          }
          [((RARERenderableDataItem *) nil_chk(row)) addWithId:item];
          count++;
        }
        if (count > ocols) {
          ocols = count;
        }
      }
      [callback addParsedRowWithRARERenderableDataItem:row];
    }
  }
  @catch (JavaNioChannelsClosedChannelException *e) {
  }
  @finally {
    [callback finishedParsing];
  }
}

- (RAREColumn *)parseColumnItemWithRAREiWidget:(id<RAREiWidget>)context
                                  withNSString:(NSString *)value
               withRAREiDataItemParserCallback:(id<RAREiDataItemParserCallback>)callback {
  if (value == nil) {
    return [self createColumnWithNSString:value withRAREiDataItemParserCallback:callback];
  }
  int n = [((NSString *) nil_chk(value)) indexOf:'{'];
  if (n == -1) {
    if (ldSep_ != 0) {
      n = [value indexOf:ldSep_];
    }
    if (n == -1) {
      return [self createColumnWithNSString:value withRAREiDataItemParserCallback:callback];
    }
  }
  [((RAREUTCharScanner *) nil_chk(scanner_)) resetWithNSString:value];
  RARERenderableDataItem *item = [self parseColumnWithRAREiWidget:context withRAREUTCharScanner:scanner_ withRAREiDataItemParserCallback:callback withBoolean:YES];
  if ([item isKindOfClass:[RAREColumn class]]) {
    return (RAREColumn *) check_class_cast(item, [RAREColumn class]);
  }
  RAREColumn *c = [[RAREColumn alloc] init];
  [c copy__WithRARERenderableDataItem:item];
  [c setColumnTitleWithJavaLangCharSequence:[((RARERenderableDataItem *) nil_chk(item)) description]];
  [c setValueWithId:nil];
  return c;
}

- (RARERenderableDataItem *)parseDataItemWithRAREiWidget:(id<RAREiWidget>)context
                                            withNSString:(NSString *)value
                         withRAREiDataItemParserCallback:(id<RAREiDataItemParserCallback>)callback {
  if (value == nil) {
    return [((id<RAREiDataItemParserCallback>) nil_chk(callback)) createItemWithId:value];
  }
  int n = [((NSString *) nil_chk(value)) indexOf:'{'];
  if ((n > 0) && ([value charAtWithInt:n - 1] == '\\')) {
    n = -1;
  }
  if (n == -1) {
    if (ldSep_ != 0) {
      n = [value indexOf:ldSep_];
    }
    if ((n > 0) && ([value charAtWithInt:n - 1] == '\\')) {
      n = -1;
    }
    if (n == -1) {
      return [((id<RAREiDataItemParserCallback>) nil_chk(callback)) createItemWithId:value];
    }
  }
  [((RAREUTCharScanner *) nil_chk(scanner_)) resetWithNSString:value];
  return [self parseColumnWithRAREiWidget:context withRAREUTCharScanner:scanner_ withRAREiDataItemParserCallback:callback withBoolean:NO];
}

- (void)resetWithJavaIoReader:(JavaIoReader *)input
                     withChar:(unichar)colsep
                     withChar:(unichar)ldsep {
  if (input != nil) {
    if ([input isKindOfClass:[JavaIoBufferedReader class]]) {
      biReader_ = (JavaIoBufferedReader *) check_class_cast(input, [JavaIoBufferedReader class]);
    }
    else {
      biReader_ = [[JavaIoBufferedReader alloc] initWithJavaIoReader:input withInt:255];
    }
  }
  colSep_ = colsep;
  ldSep_ = ldsep;
}

- (void)setLinkedDataSeparatorWithChar:(unichar)sep {
  self->ldSep_ = sep;
}

- (void)setRowInfoSeparatorWithChar:(unichar)sep {
  self->riSeparator_ = sep;
  if (riSeparator_ != 0) {
    itemLevel_ = [[RAREUTMutableInteger alloc] initWithInt:0];
  }
}

- (void)setUnescapeWithBoolean:(BOOL)unescape {
  self->unescape_ = unescape;
}

- (unichar)getRowInfoSeparator {
  return riSeparator_;
}

- (RARERenderableDataItem *)parseColumnWithRAREiWidget:(id<RAREiWidget>)context
                                 withRAREUTCharScanner:(RAREUTCharScanner *)sc
                       withRAREiDataItemParserCallback:(id<RAREiDataItemParserCallback>)callback
                                           withBoolean:(BOOL)itemdescription {
  RARERenderableDataItem *di = nil;
  (void) [((RAREUTCharScanner *) nil_chk(sc)) trim];
  NSString *value = nil;
  NSString *linkedData = nil;
  int n, p;
  int len = [sc getLength];
  int pos = [sc getPosition];
  IOSCharArray *a = [sc getContent];
  n = [sc indexOfWithChar:'{' withBoolean:YES withBoolean:NO];
  if (ldSep_ != 0) {
    p = [RAREUTCharScanner indexOfWithCharArray:a withInt:pos withInt:(n == -1) ? len : n - pos withChar:ldSep_];
    if (p != -1) {
      len = p - pos;
      linkedData = [NSString stringWithCharacters:a offset:pos length:len];
      [sc consumeWithInt:len + 1];
      pos = [sc getPosition];
    }
  }
  p = (n == -1) ? -1 : [sc lastIndexOfWithChar:'}' withBoolean:YES withBoolean:NO];
  if ((n == -1) || (p == -1)) {
    len = [sc getLength];
    value = unescape_ ? [RAREUTCharScanner unescapeExWithCharArray:a withInt:pos withInt:len] : [self cleanQuotedWithCharArray:a withInt:pos withInt:len];
    di = [((id<RAREiDataItemParserCallback>) nil_chk(callback)) createItemWithId:value withInt:RARERenderableDataItem_TYPE_STRING withId:linkedData withId:nil withId:nil];
  }
  else {
    int br = [sc indexOfNonWhiteSpaceWithInt:p + 1];
    if ((br != -1) && (IOSCharArray_Get(nil_chk(a), br) == '[')) {
      br = [sc indexOfWithChar:']' withBoolean:YES withBoolean:NO];
      if (br != -1) {
        p = br;
      }
    }
    if (n == [sc getPosition]) {
      p++;
      n += [sc getLength];
      if (p < n) {
        value = [RAREUTCharScanner unescapeExWithCharArray:a withInt:p withInt:n - p];
        [sc chopWithInt:n - p];
      }
    }
    else {
      pos = [sc getPosition];
      len = n - [sc getPosition];
      value = unescape_ ? [RAREUTCharScanner unescapeExWithCharArray:a withInt:pos withInt:len] : [self cleanQuotedWithCharArray:a withInt:pos withInt:len];
      [sc consumeWithInt:len];
      len = [sc getLength] - p;
      if ((value == nil) && (len > 0)) {
        pos = [sc getPosition] + [sc getLength] - len;
        value = unescape_ ? [RAREUTCharScanner unescapeExWithCharArray:a withInt:pos withInt:len] : [self cleanQuotedWithCharArray:a withInt:pos withInt:len];
        [sc consumeWithInt:len];
      }
    }
    if (itemdescription) {
      RARESPOTItemDescription *item = [[RARESPOTItemDescription alloc] init];
      [self parseItemWithRAREiWidget:context withJavaIoReader:sc withSPOTSequence:item];
      if ((value != nil) && ([((SPOTPrintableString *) nil_chk(item->title_)) getValue] == nil)) {
        [item->title_ setValueWithNSString:value];
      }
      if ((linkedData != nil) && ([((SPOTPrintableString *) nil_chk(item->linkedData_)) getValue] == nil)) {
        [item->linkedData_ setValueWithNSString:linkedData];
      }
      di = [((id<RAREiDataItemParserCallback>) nil_chk(callback)) createItemWithId:item];
    }
    else {
      RARESPOTDataItem *item = [[RARESPOTDataItem alloc] init];
      [self parseItemWithRAREiWidget:context withJavaIoReader:sc withSPOTSequence:item];
      if ((value != nil) && ([((SPOTPrintableString *) nil_chk(item->value_)) getValue] == nil)) {
        [item->value_ setValueWithNSString:value];
      }
      if ((linkedData != nil) && ([((SPOTPrintableString *) nil_chk(item->linkedData_)) getValue] == nil)) {
        [item->linkedData_ setValueWithNSString:linkedData];
      }
      di = [((id<RAREiDataItemParserCallback>) nil_chk(callback)) createItemExWithRARESPOTDataItem:item];
    }
  }
  return di;
}

- (void)parseItemWithRAREiWidget:(id<RAREiWidget>)context
                withJavaIoReader:(JavaIoReader *)reader
                withSPOTSequence:(SPOTSequence *)item {
  SDFNode *node = [SDFNode parseWithJavaIoReader:reader withRAREUTiFileResolver:[((id<RAREiWidget>) nil_chk(context)) getURLResolver] withNSString:nil withBoolean:NO];
  node = [((SDFNode *) nil_chk(node)) getFirstNode];
  SDFNode *tnode = [((SDFNode *) nil_chk(node)) getNodeWithNSString:@"templateName"];
  NSString *name = (tnode == nil) ? nil : [tnode getNodeValue];
  if (name != nil) {
    NSString *tname = (tnode == nil) ? nil : [tnode getNodeAttributeWithNSString:@"context"];
    [((RARETemplateHandler *) nil_chk([RARETemplateHandler getInstanceWithRAREiWidget:context withJavaNetURL:nil])) applyTemplateWithSPOTSequence:item withNSString:name withNSString:tname];
  }
  [((SPOTSequence *) nil_chk(item)) fromSDFWithSDFNode:node];
}

- (NSString *)cleanQuotedWithCharArray:(IOSCharArray *)a
                               withInt:(int)pos
                               withInt:(int)len {
  @try {
    RAREUTCharArray *ret = quotedCleaner_;
    if (ret == nil) {
      ret = [[RAREUTCharArray alloc] init];
    }
    else {
      ret->_length_ = 0;
    }
    (void) [RAREUTCharScanner cleanQuotedWithCharArray:a withInt:pos withInt:len withRAREUTCharArray:ret];
    return [((RAREUTCharArray *) nil_chk(ret)) description];
  }
  @catch (JavaTextParseException *e) {
    return [NSString stringWithCharacters:a offset:pos length:len];
  }
}

- (RAREColumn *)createColumnWithNSString:(NSString *)value
         withRAREiDataItemParserCallback:(id<RAREiDataItemParserCallback>)callback {
  RARESPOTItemDescription *di = [[RARESPOTItemDescription alloc] init];
  [((SPOTPrintableString *) nil_chk(di->title_)) setValueWithNSString:value];
  return (RAREColumn *) check_class_cast([((id<RAREiDataItemParserCallback>) nil_chk(callback)) createItemWithId:di], [RAREColumn class]);
}

- (void)copyAllFieldsTo:(RAREDataItemCSVParser *)other {
  [super copyAllFieldsTo:other];
  other->biReader_ = biReader_;
  other->colSep_ = colSep_;
  other->fscanner_ = fscanner_;
  other->itemLevel_ = itemLevel_;
  other->ldSep_ = ldSep_;
  other->quotedCleaner_ = quotedCleaner_;
  other->riSeparator_ = riSeparator_;
  other->scanner_ = scanner_;
  other->unescape_ = unescape_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "parseWithRAREiWidget:withInt:withRAREiDataItemParserCallback:", NULL, "V", 0x1, "JavaIoIOException" },
    { "parseColumnItemWithRAREiWidget:withNSString:withRAREiDataItemParserCallback:", NULL, "LRAREColumn", 0x1, "JavaIoIOException" },
    { "parseDataItemWithRAREiWidget:withNSString:withRAREiDataItemParserCallback:", NULL, "LRARERenderableDataItem", 0x1, "JavaIoIOException" },
    { "parseColumnWithRAREiWidget:withRAREUTCharScanner:withRAREiDataItemParserCallback:withBoolean:", NULL, "LRARERenderableDataItem", 0x0, "JavaIoIOException" },
    { "parseItemWithRAREiWidget:withJavaIoReader:withSPOTSequence:", NULL, "V", 0x0, "JavaIoIOException" },
    { "cleanQuotedWithCharArray:withInt:withInt:", NULL, "LNSString", 0x2, NULL },
    { "createColumnWithNSString:withRAREiDataItemParserCallback:", NULL, "LRAREColumn", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "ldSep_", NULL, 0x4, "C" },
    { "riSeparator_", NULL, 0x4, "C" },
    { "scanner_", NULL, 0x4, "LRAREUTCharScanner" },
    { "fscanner_", NULL, 0x4, "LRAREUTCharScanner" },
    { "unescape_", NULL, 0x4, "Z" },
    { "biReader_", NULL, 0x4, "LJavaIoBufferedReader" },
    { "colSep_", NULL, 0x4, "C" },
    { "itemLevel_", NULL, 0x4, "LRAREUTMutableInteger" },
    { "quotedCleaner_", NULL, 0x4, "LRAREUTCharArray" },
  };
  static J2ObjcClassInfo _RAREDataItemCSVParser = { "DataItemCSVParser", "com.appnativa.rare.util", NULL, 0x1, 7, methods, 9, fields, 0, NULL};
  return &_RAREDataItemCSVParser;
}

@end
