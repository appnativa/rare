//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple/com/appnativa/rare/util/LockingCondition.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/util/LockingCondition.h"
#include "java/lang/InterruptedException.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/locks/Condition.h"
#include "java/util/concurrent/locks/Lock.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

@implementation RARELockingCondition

- (id)init {
  if (self = [super init]) {
    waiters_ = [[JavaUtilConcurrentAtomicAtomicInteger alloc] initWithInt:0];
    lock__ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    condition_ = [lock__ newCondition];
    proxy_ = [RARELockingCondition createProxy];
  }
  return self;
}

- (void)lock {
  [((id<JavaUtilConcurrentLocksLock>) nil_chk(lock__)) lock];
}

- (void)unlock {
  [((id<JavaUtilConcurrentLocksLock>) nil_chk(lock__)) unlock];
}

- (void)awaitSignal {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(waiters_)) incrementAndGet];
  @try {
    [self awaitSignalEx];
  }
  @finally {
    [waiters_ decrementAndGet];
  }
}

- (void)awaitSignalEx {
  [((NSCondition*)proxy_) wait];
}

- (void)awaitSignalWithLong:(long long int)milliseconds {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(waiters_)) incrementAndGet];
  @try {
    [self awaitSignalExWithLong:milliseconds];
  }
  @finally {
    [waiters_ decrementAndGet];
  }
}

- (void)awaitSignalExWithLong:(long long int)milliseconds {
  NSDate* date=[[NSDate alloc] initWithTimeIntervalSinceNow: (milliseconds/1000)];
  [((NSCondition*)proxy_) waitUntilDate: date];
}

- (void)signalAll {
  [self signal];
  int count = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(waiters_)) get];
  count--;
  while (count > 0) {
    [self signal];
    count--;
  }
  [waiters_ setWithInt:0];
  ;
}

- (void)signal {
  [((NSCondition*)proxy_) signal];
}

+ (id)createProxy {
  return [NSCondition new];
}

- (void)copyAllFieldsTo:(RARELockingCondition *)other {
  [super copyAllFieldsTo:other];
  other->condition_ = condition_;
  other->lock__ = lock__;
  other->proxy_ = proxy_;
  other->waiters_ = waiters_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "awaitSignal", NULL, "V", 0x1, "JavaLangInterruptedException" },
    { "awaitSignalEx", NULL, "V", 0x104, "JavaLangInterruptedException" },
    { "awaitSignalWithLong:", NULL, "V", 0x1, "JavaLangInterruptedException" },
    { "awaitSignalExWithLong:", NULL, "V", 0x104, "JavaLangInterruptedException" },
    { "signal", NULL, "V", 0x101, NULL },
    { "createProxy", NULL, "LNSObject", 0x10a, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "proxy_", NULL, 0x0, "LNSObject" },
    { "lock__", "lock", 0x12, "LJavaUtilConcurrentLocksLock" },
    { "condition_", NULL, 0x12, "LJavaUtilConcurrentLocksCondition" },
  };
  static J2ObjcClassInfo _RARELockingCondition = { "LockingCondition", "com.appnativa.rare.util", NULL, 0x1, 6, methods, 3, fields, 0, NULL};
  return &_RARELockingCondition;
}

@end
