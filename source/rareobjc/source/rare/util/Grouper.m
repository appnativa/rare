//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/util/Grouper.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iFunctionCallback.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/util/Grouper.h"
#include "com/appnativa/rare/util/SubItemComparator.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/MutableInteger.h"
#include "com/appnativa/util/ObjectHolder.h"
#include "com/appnativa/util/iCancelable.h"
#include "com/appnativa/util/iFilterableList.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation RAREGrouper

static IOSObjectArray * RAREGrouper_ZERO_NONE_;

+ (IOSObjectArray *)ZERO_NONE {
  return RAREGrouper_ZERO_NONE_;
}

+ (void)setZERO_NONE:(IOSObjectArray *)ZERO_NONE {
  RAREGrouper_ZERO_NONE_ = ZERO_NONE;
}

- (id)init {
  if (self = [super init]) {
    groupHeaderColumnSpan_ = -1;
  }
  return self;
}

- (id)initWithIntArray:(IOSIntArray *)cols
     withNSStringArray:(IOSObjectArray *)nones
           withBoolean:(BOOL)preserveFirst
           withBoolean:(BOOL)preserveRest {
  if (self = [super init]) {
    groupHeaderColumnSpan_ = -1;
    [self setCriteriaWithIntArray:cols withNSStringArray:nones withBoolean:preserveFirst withBoolean:preserveRest];
  }
  return self;
}

- (id<RAREUTiCancelable>)groupInBackgroundWithRAREiWidget:(id<RAREiWidget>)context
                                         withJavaUtilList:(id<JavaUtilList>)list
                                withRAREiFunctionCallback:(id<RAREiFunctionCallback>)cb {
  id<JavaLangRunnable> r = [[RAREGrouper_$1 alloc] initWithRAREGrouper:self withRAREiWidget:context withJavaUtilList:list withRAREiFunctionCallback:cb];
  return [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeBackgroundTaskWithJavaLangRunnable:r];
}

- (id<JavaUtilList>)groupWithRAREiWidget:(id<RAREiWidget>)context
                        withJavaUtilList:(id<JavaUtilList>)list {
  if (([self getColumns] == nil) || ((int) [((IOSIntArray *) nil_chk([self getColumns])) count] == 0) || ([((id<JavaUtilList>) nil_chk(list)) size] == 0)) {
    return list;
  }
  if (nulls_ == nil) {
    nulls_ = RAREGrouper_ZERO_NONE_;
  }
  boldFont_ = nil;
  if (boldGroupTitles_ && (context != nil)) {
    boldFont_ = [((RAREUIFont *) nil_chk([context getFont])) deriveBold];
  }
  RARERenderableDataItem *item = [[RARERenderableDataItem alloc] init];
  [self groupWithRAREiWidget:context withJavaUtilList:list withInt:0 withRARERenderableDataItem:item];
  list = [item getItems];
  if ([self isFormatForTable]) {
    [self fixForTableWithJavaUtilList:list];
  }
  return (list == nil) ? ((id) [JavaUtilCollections EMPTY_LIST]) : ((id) list);
}

+ (id<JavaUtilList>)groupByRowInfoWithJavaUtilList:(id<JavaUtilList>)list
                                           withInt:(int)expandableColumn {
  RARERenderableDataItem *currentRow = nil;
  JavaUtilLinkedList *levelStack = [[JavaUtilLinkedList alloc] init];
  JavaUtilArrayList *rows = [[JavaUtilArrayList alloc] init];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  RARERenderableDataItem *row;
  for (int i = 0; i < len; i++) {
    row = [list getWithInt:i];
    id o = [((RARERenderableDataItem *) nil_chk(row)) getModelData];
    int l = 1;
    if (o != nil) {
      RAREUTMutableInteger *level = (RAREUTMutableInteger *) check_class_cast(o, [RAREUTMutableInteger class]);
      [row setModelDataWithId:nil];
      l = [level intValue];
      if (l < 1) {
        l = 1;
      }
    }
    if ((l < 2) || (currentRow == nil)) {
      [rows addWithId:row];
      currentRow = row;
      if (levelStack != nil) {
        [levelStack clear];
      }
    }
    else {
      RARERenderableDataItem *ci = nil;
      if (levelStack == nil) {
        levelStack = [[JavaUtilLinkedList alloc] init];
      }
      int currentLevel = [levelStack size] + 1;
      if (currentLevel > l) {
        while (currentLevel > l) {
          (void) [levelStack poll];
          currentLevel--;
        }
        [((RARERenderableDataItem *) nil_chk([levelStack peek])) addWithId:row];
      }
      else if (currentLevel == l) {
        [((RARERenderableDataItem *) nil_chk([levelStack peek])) addWithId:row];
      }
      else {
        ci = currentRow;
        ci = [ci getItemWithInt:expandableColumn];
        [((RARERenderableDataItem *) nil_chk(ci)) addWithId:row];
        if ([levelStack peek] != currentRow) {
          [levelStack addWithInt:0 withId:ci];
        }
      }
      currentRow = row;
    }
  }
  return rows;
}

- (void)setBoldGroupTitlesWithBoolean:(BOOL)bold {
  self->boldGroupTitles_ = bold;
}

- (void)setColumnsWithIntArray:(IOSIntArray *)cols {
  self->cols_ = cols;
}

- (void)setCriteriaWithIntArray:(IOSIntArray *)cols
              withNSStringArray:(IOSObjectArray *)nones
                    withBoolean:(BOOL)preserveFirst
                    withBoolean:(BOOL)preserveRest {
  self->cols_ = cols;
  self->nulls_ = nones;
  self->preserveFirst_ = preserveFirst;
  self->preserveRest_ = preserveRest;
}

- (void)setFlatFormatWithBoolean:(BOOL)flatFormat {
  self->flatFormat_ = flatFormat;
}

- (void)setFormatForTableWithBoolean:(BOOL)forTable {
  self->forTable_ = forTable;
}

- (void)setGroupTitleItemsWithRARERenderableDataItemArray:(IOSObjectArray *)groupItems {
  self->titleItems_ = groupItems;
}

- (void)setNullsWithNSStringArray:(IOSObjectArray *)nones {
  self->nulls_ = nones;
}

- (void)setPreserveFirstWithBoolean:(BOOL)preserveFirst {
  self->preserveFirst_ = preserveFirst;
}

- (void)setPreserveLinkedDataWithBoolean:(BOOL)preserve {
  self->preserveLinkedData_ = preserve;
}

- (void)setPreserveRestWithBoolean:(BOOL)preserveRest {
  self->preserveRest_ = preserveRest;
}

- (void)setSortOrderWithInt:(int)sortOrder {
  self->sortOrder_ = sortOrder;
}

- (void)setTitlesSelectableWithBoolean:(BOOL)titleSelectable {
  self->titleSelectable_ = titleSelectable;
}

- (IOSIntArray *)getColumns {
  return cols_;
}

- (IOSObjectArray *)getGroupTitleItems {
  return titleItems_;
}

- (IOSObjectArray *)getNulls {
  return nulls_;
}

- (int)getSortOrder {
  return sortOrder_;
}

- (BOOL)isBoldGroupTitles {
  return boldGroupTitles_;
}

- (BOOL)isFlatFormat {
  return flatFormat_;
}

- (BOOL)isFormatForTable {
  return forTable_;
}

- (BOOL)isPreserveFirst {
  return preserveFirst_;
}

- (BOOL)isPreserveLinkedData {
  return preserveLinkedData_;
}

- (BOOL)isPreserveRest {
  return preserveRest_;
}

- (void)groupWithRAREiWidget:(id<RAREiWidget>)context
            withJavaUtilList:(id<JavaUtilList>)list
                     withInt:(int)pos
  withRARERenderableDataItem:(RARERenderableDataItem *)output {
  int len = (list == nil) ? 0 : [list size];
  if (len == 0) {
    return;
  }
  if (map_ == nil) {
    map_ = [[JavaUtilLinkedHashMap alloc] init];
  }
  else {
    [map_ clear];
  }
  NSString *none = (pos < (int) [((IOSObjectArray *) nil_chk(nulls_)) count]) ? IOSObjectArray_Get(nulls_, pos) : nil;
  BOOL preserve = (pos == 0) ? [self isPreserveFirst] : [self isPreserveRest];
  int col = IOSIntArray_Get(nil_chk(cols_), pos);
  if (none == nil) {
    none = @"(none)";
  }
  RARERenderableDataItem *pitem;
  RARERenderableDataItem *item;
  RARERenderableDataItem *gitem;
  NSString *s;
  for (int i = 0; i < len; i++) {
    pitem = [((id<JavaUtilList>) nil_chk(list)) getWithInt:i];
    if (pitem == nil) {
      continue;
    }
    gitem = [((RARERenderableDataItem *) nil_chk(pitem)) getItemExWithInt:col];
    s = (gitem == nil) ? @"" : [gitem toStringWithRAREiWidget:context];
    if ([@"" isEqual:s]) {
      s = none;
    }
    if (!preserve) {
      item = (gitem == nil) ? [[RARERenderableDataItem alloc] init] : [gitem copy__];
      [item setValueWithId:nil];
      (void) [pitem setItemWithInt:col withRARERenderableDataItem:item];
    }
    item = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:s];
    if (item == nil) {
      item = [[RARERenderableDataItem alloc] init];
      if ((titleItems_ != nil) && (pos < (int) [titleItems_ count])) {
        [item copyExWithRARERenderableDataItem:IOSObjectArray_Get(titleItems_, pos)];
        [item setValueWithId:s];
      }
      else if (gitem != nil) {
        [item copyValueWithRARERenderableDataItem:gitem];
        if (preserveLinkedData_) {
          [item setLinkedDataWithId:[gitem getLinkedData]];
          [item setLinkedDataConverterWithRAREiDataConverter:[gitem getLinkedDataConverter]];
          [item setLinkedDataContextWithId:[gitem getLinkedDataContext]];
        }
      }
      else {
        [item setValueWithId:s];
      }
      if ((boldFont_ != nil) && ([item getFont] == nil)) {
        [item setFontWithRAREUIFont:boldFont_];
      }
      (void) [map_ putWithId:s withId:item];
      [item setColumnSpanWithInt:-1];
      [item setSelectableWithBoolean:titleSelectable_];
    }
    [((RARERenderableDataItem *) nil_chk(item)) addWithId:pitem];
  }
  [((RARERenderableDataItem *) nil_chk(output)) addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(map_)) values]];
  if ([self getSortOrder] != 0) {
    if (rowComparator_ == nil) {
      rowComparator_ = [[RARESubItemComparator alloc] init];
    }
    [((RARESubItemComparator *) nil_chk(rowComparator_)) setOptionsWithInt:-1 withBoolean:sortOrder_ < 0];
    [output sortWithJavaUtilComparator:rowComparator_];
  }
  pos++;
  if (pos < (int) [((IOSIntArray *) nil_chk([self getColumns])) count]) {
    list = [output getItems];
    len = [((id<JavaUtilList>) nil_chk(list)) size];
    BOOL ft = [self isFormatForTable];
    for (int i = 0; i < len; i++) {
      pitem = [[RARERenderableDataItem alloc] init];
      item = [list getWithInt:i];
      [pitem copyExWithRARERenderableDataItem:item];
      [self groupWithRAREiWidget:context withJavaUtilList:[((RARERenderableDataItem *) nil_chk(item)) getItems] withInt:pos withRARERenderableDataItem:pitem];
      if (ft) {
        [self fixForTableWithJavaUtilList:[pitem getItems]];
      }
      (void) [list setWithInt:i withId:pitem];
    }
  }
}

- (void)fixForTableWithJavaUtilList:(id<JavaUtilList>)list {
  int len = (list == nil) ? 0 : [list size];
  RARERenderableDataItem *item;
  RARERenderableDataItem *row;
  for (int i = 0; i < len; i++) {
    row = [[RARERenderableDataItem alloc] init];
    item = [((id<JavaUtilList>) nil_chk(list)) getWithInt:i];
    [row addWithId:item];
    (void) [list setWithInt:i withId:row];
  }
}

- (int)getGroupHeaderColumnSpan {
  return groupHeaderColumnSpan_;
}

- (void)setGroupHeaderColumnSpanWithInt:(int)groupHeaderColumnSpan {
  self->groupHeaderColumnSpan_ = groupHeaderColumnSpan;
}

+ (void)initialize {
  if (self == [RAREGrouper class]) {
    RAREGrouper_ZERO_NONE_ = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]];
  }
}

- (void)copyAllFieldsTo:(RAREGrouper *)other {
  [super copyAllFieldsTo:other];
  other->boldFont_ = boldFont_;
  other->boldGroupTitles_ = boldGroupTitles_;
  other->cols_ = cols_;
  other->flatFormat_ = flatFormat_;
  other->forTable_ = forTable_;
  other->groupHeaderColumnSpan_ = groupHeaderColumnSpan_;
  other->map_ = map_;
  other->nulls_ = nulls_;
  other->preserveFirst_ = preserveFirst_;
  other->preserveLinkedData_ = preserveLinkedData_;
  other->preserveRest_ = preserveRest_;
  other->rowComparator_ = rowComparator_;
  other->sortOrder_ = sortOrder_;
  other->titleItems_ = titleItems_;
  other->titleSelectable_ = titleSelectable_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "groupInBackgroundWithRAREiWidget:withJavaUtilList:withRAREiFunctionCallback:", NULL, "LRAREUTiCancelable", 0x1, NULL },
    { "groupWithRAREiWidget:withJavaUtilList:", NULL, "LJavaUtilList", 0x1, NULL },
    { "groupByRowInfoWithJavaUtilList:withInt:", NULL, "LJavaUtilList", 0x9, NULL },
    { "getColumns", NULL, "LIOSIntArray", 0x1, NULL },
    { "getGroupTitleItems", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getNulls", NULL, "LIOSObjectArray", 0x1, NULL },
    { "isBoldGroupTitles", NULL, "Z", 0x1, NULL },
    { "isFlatFormat", NULL, "Z", 0x1, NULL },
    { "isFormatForTable", NULL, "Z", 0x1, NULL },
    { "isPreserveFirst", NULL, "Z", 0x1, NULL },
    { "isPreserveLinkedData", NULL, "Z", 0x1, NULL },
    { "isPreserveRest", NULL, "Z", 0x1, NULL },
    { "groupWithRAREiWidget:withJavaUtilList:withInt:withRARERenderableDataItem:", NULL, "V", 0x4, NULL },
    { "fixForTableWithJavaUtilList:", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "ZERO_NONE_", NULL, 0xa, "LIOSObjectArray" },
  };
  static J2ObjcClassInfo _RAREGrouper = { "Grouper", "com.appnativa.rare.util", NULL, 0x1, 14, methods, 1, fields, 0, NULL};
  return &_RAREGrouper;
}

@end
@implementation RAREGrouper_$1

- (void)run {
  BOOL canceled = (val$context_ == nil) ? NO : [val$context_ isDisposed];
  ;
  id ret = canceled ? nil : [[RAREUTObjectHolder alloc] initWithId:val$context_ withId:nil withId:[this$0_ groupWithRAREiWidget:val$context_ withJavaUtilList:val$list_]];
  [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREGrouper_$1_$1 alloc] initWithRAREGrouper_$1:self withBoolean:canceled withId:ret]];
}

- (id)initWithRAREGrouper:(RAREGrouper *)outer$
          withRAREiWidget:(id<RAREiWidget>)capture$0
         withJavaUtilList:(id<JavaUtilList>)capture$1
withRAREiFunctionCallback:(id<RAREiFunctionCallback>)capture$2 {
  this$0_ = outer$;
  val$context_ = capture$0;
  val$list_ = capture$1;
  val$cb_ = capture$2;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREGrouper" },
    { "val$context_", NULL, 0x1012, "LRAREiWidget" },
    { "val$list_", NULL, 0x1012, "LJavaUtilList" },
    { "val$cb_", NULL, 0x1012, "LRAREiFunctionCallback" },
  };
  static J2ObjcClassInfo _RAREGrouper_$1 = { "$1", "com.appnativa.rare.util", "Grouper", 0x8000, 0, NULL, 4, fields, 0, NULL};
  return &_RAREGrouper_$1;
}

@end
@implementation RAREGrouper_$1_$1

- (void)run {
  [((id<RAREiFunctionCallback>) nil_chk(this$0_->val$cb_)) finishedWithBoolean:val$canceled_ withId:[[RAREUTObjectHolder alloc] initWithId:this$0_->val$list_ withId:this$0_->val$context_ withId:val$ret_]];
}

- (id)initWithRAREGrouper_$1:(RAREGrouper_$1 *)outer$
                 withBoolean:(BOOL)capture$0
                      withId:(id)capture$1 {
  this$0_ = outer$;
  val$canceled_ = capture$0;
  val$ret_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREGrouper_$1" },
    { "val$canceled_", NULL, 0x1012, "Z" },
    { "val$ret_", NULL, 0x1012, "LNSObject" },
  };
  static J2ObjcClassInfo _RAREGrouper_$1_$1 = { "$1", "com.appnativa.rare.util", "Grouper$$1", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_RAREGrouper_$1_$1;
}

@end
