//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/util/PropertyChangeSupportEx.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/util/PropertyChangeSupportEx.h"
#include "java/beans/IndexedPropertyChangeEvent.h"
#include "java/beans/PropertyChangeEvent.h"
#include "java/beans/PropertyChangeListener.h"
#include "java/beans/PropertyChangeListenerProxy.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/EventListener.h"
#include "java/util/List.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"

@implementation RAREPropertyChangeSupportEx

- (id)initWithId:(id)sourceBean {
  if (self = [super init]) {
    listeners_ = [[JavaUtilConcurrentCopyOnWriteArrayList alloc] init];
    if (sourceBean == nil) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    self->sourceBean_ = sourceBean;
  }
  return self;
}

- (void)addPropertyChangeListenerWithJavaBeansPropertyChangeListener:(id<JavaBeansPropertyChangeListener>)listener {
  if (listener != nil) {
    [((id<JavaUtilList>) nil_chk(listeners_)) addWithId:listener];
  }
}

- (void)addPropertyChangeListenerWithNSString:(NSString *)propertyName
          withJavaBeansPropertyChangeListener:(id<JavaBeansPropertyChangeListener>)listener {
  if ((listener != nil) && (propertyName != nil)) {
    [((id<JavaUtilList>) nil_chk(listeners_)) addWithId:[[JavaBeansPropertyChangeListenerProxy alloc] initWithNSString:propertyName withJavaBeansPropertyChangeListener:listener]];
  }
}

- (void)dispose {
  IOSObjectArray *a = [self getPropertyChangeListeners];
  if (a != nil) {
    {
      IOSObjectArray *a__ = a;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaBeansPropertyChangeListener> l = (*b__++);
        [self removePropertyChangeListenerWithJavaBeansPropertyChangeListener:l];
      }
    }
  }
}

- (void)fireIndexedPropertyChangeWithNSString:(NSString *)propertyName
                                      withInt:(int)index
                                  withBoolean:(BOOL)oldValue
                                  withBoolean:(BOOL)newValue {
  if (oldValue != newValue) {
    [self fireIndexedPropertyChangeWithNSString:propertyName withInt:index withId:[JavaLangBoolean valueOfWithBoolean:oldValue] withId:[JavaLangBoolean valueOfWithBoolean:newValue]];
  }
}

- (void)fireIndexedPropertyChangeWithNSString:(NSString *)propertyName
                                      withInt:(int)index
                                      withInt:(int)oldValue
                                      withInt:(int)newValue {
  if (oldValue != newValue) {
    [self fireIndexedPropertyChangeWithNSString:propertyName withInt:index withId:[JavaLangInteger valueOfWithInt:oldValue] withId:[JavaLangInteger valueOfWithInt:newValue]];
  }
}

- (void)fireIndexedPropertyChangeWithNSString:(NSString *)propertyName
                                      withInt:(int)index
                                       withId:(id)oldValue
                                       withId:(id)newValue {
  [self firePropertyChangeWithJavaBeansPropertyChangeEvent:[[JavaBeansIndexedPropertyChangeEvent alloc] initWithId:sourceBean_ withNSString:propertyName withId:oldValue withId:newValue withInt:index]];
}

- (void)firePropertyChangeWithJavaBeansPropertyChangeEvent:(JavaBeansPropertyChangeEvent *)event {
  NSString *propertyName = [((JavaBeansPropertyChangeEvent *) nil_chk(event)) getPropertyName];
  id oldValue = [event getOldValue];
  id newValue = [event getNewValue];
  if ((newValue != nil) && (oldValue != nil) && [newValue isEqual:oldValue]) {
    return;
  }
  for (id<JavaBeansPropertyChangeListener> __strong p in nil_chk(listeners_)) {
    {
      while ([(id) p isKindOfClass:[JavaBeansPropertyChangeListenerProxy class]]) {
        JavaBeansPropertyChangeListenerProxy *proxy = (JavaBeansPropertyChangeListenerProxy *) check_class_cast(p, [JavaBeansPropertyChangeListenerProxy class]);
        if (![self equalWithId:[((JavaBeansPropertyChangeListenerProxy *) nil_chk(proxy)) getPropertyName] withId:propertyName]) {
          goto continue_notifyEachListener;
        }
        p = (id<JavaBeansPropertyChangeListener>) check_protocol_cast([proxy getListener], @protocol(JavaBeansPropertyChangeListener));
      }
      [((id<JavaBeansPropertyChangeListener>) nil_chk(p)) propertyChangeWithJavaBeansPropertyChangeEvent:event];
    }
    continue_notifyEachListener: ;
  }
}

- (void)firePropertyChangeWithNSString:(NSString *)propertyName
                           withBoolean:(BOOL)oldValue
                           withBoolean:(BOOL)newValue {
  [self firePropertyChangeWithNSString:propertyName withId:[JavaLangBoolean valueOfWithBoolean:oldValue] withId:[JavaLangBoolean valueOfWithBoolean:newValue]];
}

- (void)firePropertyChangeWithNSString:(NSString *)propertyName
                               withInt:(int)oldValue
                               withInt:(int)newValue {
  [self firePropertyChangeWithNSString:propertyName withId:[JavaLangInteger valueOfWithInt:oldValue] withId:[JavaLangInteger valueOfWithInt:newValue]];
}

- (void)firePropertyChangeWithNSString:(NSString *)propertyName
                                withId:(id)oldValue
                                withId:(id)newValue {
  [self firePropertyChangeWithJavaBeansPropertyChangeEvent:[[JavaBeansPropertyChangeEvent alloc] initWithId:sourceBean_ withNSString:propertyName withId:oldValue withId:newValue]];
}

- (void)removePropertyChangeListenerWithJavaBeansPropertyChangeListener:(id<JavaBeansPropertyChangeListener>)listener {
  for (id<JavaBeansPropertyChangeListener> __strong p in nil_chk(listeners_)) {
    if ([self equalsWithNSString:nil withJavaUtilEventListener:listener withJavaUtilEventListener:p]) {
      [listeners_ removeWithId:p];
      return;
    }
  }
}

- (void)removePropertyChangeListenerWithNSString:(NSString *)propertyName
             withJavaBeansPropertyChangeListener:(id<JavaBeansPropertyChangeListener>)listener {
  for (id<JavaBeansPropertyChangeListener> __strong p in nil_chk(listeners_)) {
    if ([self equalsWithNSString:propertyName withJavaUtilEventListener:listener withJavaUtilEventListener:p]) {
      [listeners_ removeWithId:p];
      return;
    }
  }
}

- (IOSObjectArray *)getPropertyChangeListeners {
  return [((id<JavaUtilList>) nil_chk(listeners_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithProtocol:@protocol(JavaBeansPropertyChangeListener)]]];
}

- (IOSObjectArray *)getPropertyChangeListenersWithNSString:(NSString *)propertyName {
  id<JavaUtilList> result = [[JavaUtilArrayList alloc] init];
  for (id<JavaBeansPropertyChangeListener> __strong p in nil_chk(listeners_)) {
    if (([(id) p isKindOfClass:[JavaBeansPropertyChangeListenerProxy class]]) && [self equalWithId:propertyName withId:[((JavaBeansPropertyChangeListenerProxy *) check_class_cast(p, [JavaBeansPropertyChangeListenerProxy class])) getPropertyName]]) {
      [result addWithId:p];
    }
  }
  return [result toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[result size] type:[IOSClass classWithProtocol:@protocol(JavaBeansPropertyChangeListener)]]];
}

- (BOOL)hasListenersWithNSString:(NSString *)propertyName {
  for (id<JavaBeansPropertyChangeListener> __strong p in nil_chk(listeners_)) {
    if (!([(id) p isKindOfClass:[JavaBeansPropertyChangeListenerProxy class]]) || [self equalWithId:propertyName withId:[((JavaBeansPropertyChangeListenerProxy *) check_class_cast(p, [JavaBeansPropertyChangeListenerProxy class])) getPropertyName]]) {
      return YES;
    }
  }
  return NO;
}

- (BOOL)equalWithId:(id)a
             withId:(id)b {
  return (a == b) || ((a != nil) && [a isEqual:b]);
}

- (BOOL)equalsWithNSString:(NSString *)aName
 withJavaUtilEventListener:(id<JavaUtilEventListener>)a
 withJavaUtilEventListener:(id<JavaUtilEventListener>)b {
  while ([(id) b isKindOfClass:[JavaBeansPropertyChangeListenerProxy class]]) {
    JavaBeansPropertyChangeListenerProxy *bProxy = (JavaBeansPropertyChangeListenerProxy *) check_class_cast(b, [JavaBeansPropertyChangeListenerProxy class]);
    NSString *bName = [((JavaBeansPropertyChangeListenerProxy *) nil_chk(bProxy)) getPropertyName];
    b = [bProxy getListener];
    if (aName == nil) {
      if (!([(id) a isKindOfClass:[JavaBeansPropertyChangeListenerProxy class]])) {
        return NO;
      }
      JavaBeansPropertyChangeListenerProxy *aProxy = (JavaBeansPropertyChangeListenerProxy *) check_class_cast(a, [JavaBeansPropertyChangeListenerProxy class]);
      aName = [((JavaBeansPropertyChangeListenerProxy *) nil_chk(aProxy)) getPropertyName];
      a = [aProxy getListener];
    }
    if (![self equalWithId:aName withId:bName]) {
      return NO;
    }
    aName = nil;
  }
  return (aName == nil) && [self equalWithId:a withId:b];
}

- (void)copyAllFieldsTo:(RAREPropertyChangeSupportEx *)other {
  [super copyAllFieldsTo:other];
  other->listeners_ = listeners_;
  other->sourceBean_ = sourceBean_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getPropertyChangeListeners", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getPropertyChangeListenersWithNSString:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "hasListenersWithNSString:", NULL, "Z", 0x1, NULL },
    { "equalWithId:withId:", NULL, "Z", 0x2, NULL },
    { "equalsWithNSString:withJavaUtilEventListener:withJavaUtilEventListener:", NULL, "Z", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "listeners_", NULL, 0x82, "LJavaUtilList" },
    { "sourceBean_", NULL, 0x82, "LNSObject" },
  };
  static J2ObjcClassInfo _RAREPropertyChangeSupportEx = { "PropertyChangeSupportEx", "com.appnativa.rare.util", NULL, 0x1, 5, methods, 2, fields, 0, NULL};
  return &_RAREPropertyChangeSupportEx;
}

@end
