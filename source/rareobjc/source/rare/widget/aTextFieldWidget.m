//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/widget/aTextFieldWidget.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/Conversions.h"
#include "com/appnativa/rare/converters/DateContext.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/scripting/FunctionHelper.h"
#include "com/appnativa/rare/spot/EmptyText.h"
#include "com/appnativa/rare/spot/Font.h"
#include "com/appnativa/rare/spot/PasswordField.h"
#include "com/appnativa/rare/spot/TextArea.h"
#include "com/appnativa/rare/spot/TextField.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/ui/BorderUtils.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/KeyboardReturnButtonType.h"
#include "com/appnativa/rare/ui/KeyboardType.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UISoundHelper.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/aWidgetListener.h"
#include "com/appnativa/rare/ui/dnd/DropInformation.h"
#include "com/appnativa/rare/ui/dnd/TransferFlavor.h"
#include "com/appnativa/rare/ui/dnd/iTransferable.h"
#include "com/appnativa/rare/ui/event/FocusEvent.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iSpeechEnabler.h"
#include "com/appnativa/rare/ui/listener/iTextChangeListener.h"
#include "com/appnativa/rare/ui/text/iPlatformTextEditor.h"
#include "com/appnativa/rare/util/RegExpressionFormat.h"
#include "com/appnativa/rare/util/StringFormat.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/aTextFieldWidget.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTInteger.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/SimpleDateFormatEx.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/net/URL.h"
#include "java/text/DateFormat.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/text/Format.h"
#include "java/text/NumberFormat.h"
#include "java/text/ParseException.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/regex/Pattern.h"

@implementation RAREaTextFieldWidget

- (id)initWithRAREiContainer:(id<RAREiContainer>)parent {
  if (self = [super initWithRAREiContainer:parent]) {
    widgetType_ = [RAREiWidget_WidgetTypeEnum TextField];
    hashType_ = -1;
    maxCharacters_ = -1;
    minCharacters_ = -1;
  }
  return self;
}

- (void)addActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) addActionListenerWithRAREiActionListener:l];
}

- (BOOL)canCut {
  return [super canCut] && [self isEditable];
}

- (BOOL)canDelete {
  return [super canDelete] && [self isEditable];
}

- (BOOL)canImportWithRARETransferFlavorArray:(IOSObjectArray *)flavors
                     withRAREDropInformation:(RAREDropInformation *)drop {
  if (!droppingAllowed_ && !pastingAllowed_) {
    return NO;
  }
  if (![self isEditable] || ![self isEnabled]) {
    return NO;
  }
  int len = (flavors == nil) ? 0 : (int) [flavors count];
  if (fileDroppingAllowed_) {
    RARETransferFlavor *f;
    for (int i = 0; i < len; i++) {
      f = IOSObjectArray_Get(nil_chk(flavors), i);
      if ([((RARETransferFlavor *) nil_chk([RARETransferFlavor stringFlavor])) isEqual:f]) {
        return YES;
      }
    }
  }
  else {
    for (int i = 0; i < len; i++) {
      if ([((RARETransferFlavor *) nil_chk([RARETransferFlavor stringFlavor])) isEqual:IOSObjectArray_Get(nil_chk(flavors), i)]) {
        return YES;
      }
    }
  }
  return NO;
}

- (BOOL)canPaste {
  return [super canPaste] && [self isEditable];
}

- (void)clearContents {
  [super clearContents];
  [self setValueWithId:@""];
}

- (void)configureWithRARESPOTWidget:(RARESPOTWidget *)cfg {
  [self configureExWithRARESPOTTextField:(RARESPOTTextField *) check_class_cast(cfg, [RARESPOTTextField class])];
  if ((initialValue_ == nil) && [((SPOTPrintableString *) nil_chk(((RARESPOTWidget *) nil_chk(cfg))->dataURL_)) spot_hasValue]) {
    [self handleDataURLWithRARESPOTWidget:cfg];
  }
  [self fireConfigureEventWithRARESPOTWidget:cfg withNSString:[RAREiConstants EVENT_CONFIGURE]];
}

- (id)removeSelectedDataWithBoolean:(BOOL)returnData {
  int s = [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) getSelectionStart];
  int e = [textEditor_ getSelectionEnd];
  id o = nil;
  if (s != e) {
    if (returnData) {
      o = [textEditor_ getSelectionString];
    }
    [textEditor_ deleteSelection];
  }
  return o;
}

- (void)handleActionLinkWithRAREActionLink:(RAREActionLink *)link
                               withBoolean:(BOOL)deferred {
  if ([self isDisposed]) {
    return;
  }
  if (!deferred) {
    [self startedLoading];
  }
  @try {
    sourceURL_ = nil;
    widgetDataLink_ = link;
    sourceURL_ = [((RAREActionLink *) nil_chk(link)) getURLWithRAREUTiURLResolver:self];
    activeLink_ = link;
    NSString *data = [link getContentAsString];
    if ([RAREPlatform isUIThread]) {
      [self setTextWithJavaLangCharSequence:data];
    }
    else {
      [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREaTextFieldWidget_$1 alloc] initWithRAREaTextFieldWidget:self withNSString:data withBoolean:deferred]];
    }
  }
  @catch (JavaIoIOException *ex) {
    @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:ex];
  }
  @finally {
    activeLink_ = nil;
    [((RAREActionLink *) nil_chk(link)) close];
  }
}

- (void)hideVirtualKeyboard {
  [RAREPlatformHelper hideVirtualKeyboardWithRAREiWidget:self];
}

- (void)removeActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) removeActionListenerWithRAREiActionListener:l];
}

- (void)reset {
  if ((initialValue_ != nil) || (initialValueLink_ != nil)) {
    NSString *s = @"";
    if (initialValue_ != nil) {
      s = [self expandStringWithNSString:initialValue_ withBoolean:NO];
    }
    else {
      @try {
        s = [((RAREActionLink *) nil_chk(initialValueLink_)) getContentAsString];
        if (s == nil) {
          s = @"";
        }
      }
      @catch (JavaIoIOException *ex) {
        [self handleExceptionWithJavaLangThrowable:ex];
        return;
      }
    }
    [self setValueWithId:s];
  }
}

- (void)selectWithInt:(int)beginIndex {
  [self selectWithInt:beginIndex withInt:[self getTextLength]];
}

- (void)selectWithInt:(int)beginIndex
              withInt:(int)endIndex {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) setSelectionWithInt:beginIndex withInt:endIndex];
}

- (void)selectAll {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) selectAll];
}

- (void)showVirtualKeyboard {
  [RAREPlatformHelper showVirtualKeyboardWithRAREiWidget:self];
}

- (void)setCaretPositionWithInt:(int)position {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) setCaretPositionWithInt:position];
}

- (void)setEditableWithBoolean:(BOOL)editable {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) setEditableWithBoolean:editable];
}

- (void)setEmptyFieldColorWithRAREUIColor:(RAREUIColor *)color {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) setEmptyFieldColorWithRAREUIColor:color];
}

- (void)setEmptyFieldFontWithRAREUIFont:(RAREUIFont *)font {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) setEmptyFieldFontWithRAREUIFont:font];
}

- (void)setEmptyFieldTextWithNSString:(NSString *)text {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) setEmptyFieldTextWithNSString:text];
}

- (void)setInputValidatorWithJavaTextFormat:(JavaTextFormat *)inputValidator {
  self->inputValidator_ = inputValidator;
}

- (void)setChangeEventsEnabledWithBoolean:(BOOL)enabled {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) setChangeEventsEnabledWithBoolean:enabled];
}

- (void)setKeyboardReturnButtonTypeWithRAREKeyboardReturnButtonTypeEnum:(RAREKeyboardReturnButtonTypeEnum *)type
                                                           withNSString:(NSString *)text
                                                            withBoolean:(BOOL)autoEnable {
}

- (void)setKeyboardTypeWithRAREKeyboardTypeEnum:(RAREKeyboardTypeEnum *)type {
  keyboardType_ = type;
  if (type != nil && type != [RAREKeyboardTypeEnum DEFAULT_TYPE] && textChangeListener_ == nil) {
    textChangeListener_ = [[RAREaTextFieldWidget_TextChangeListener alloc] initWithRAREaTextFieldWidget:self];
    [self addTextChangeListenerWithRAREiTextChangeListener:textChangeListener_];
  }
}

- (void)setMaxCharactersWithInt:(int)maxCharacters {
  self->maxCharacters_ = maxCharacters;
  if (textChangeListener_ == nil) {
    textChangeListener_ = [[RAREaTextFieldWidget_TextChangeListener alloc] initWithRAREaTextFieldWidget:self];
    [self addTextChangeListenerWithRAREiTextChangeListener:textChangeListener_];
  }
}

- (void)setMinCharactersWithInt:(int)minCharacters {
  self->minCharacters_ = minCharacters;
}

- (void)setShowPasswordWithBoolean:(BOOL)show {
}

- (void)setSizeWithInt:(int)columns {
  [self setVisibleCharactersWithInt:columns];
}

- (void)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) setTextWithJavaLangCharSequence:text];
}

- (void)setValidCharactersWithNSString:(NSString *)validCharacters {
  self->validCharacters_ = validCharacters;
  if (textChangeListener_ == nil) {
    textChangeListener_ = [[RAREaTextFieldWidget_TextChangeListener alloc] initWithRAREaTextFieldWidget:self];
    [self addTextChangeListenerWithRAREiTextChangeListener:textChangeListener_];
  }
}

- (void)setValueWithId:(id)value {
  id<JavaLangCharSequence> s;
  if ([value conformsToProtocol: @protocol(JavaLangCharSequence)]) {
    s = (id<JavaLangCharSequence>) check_protocol_cast(value, @protocol(JavaLangCharSequence));
  }
  else {
    s = (value == nil) ? @"" : [self toStringWithRAREiWidget:self withId:value withId:nil];
  }
  [self setTextWithJavaLangCharSequence:s];
}

- (void)setVisibleCharactersWithInt:(int)characters {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (int)getCaretPosition {
  return [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) getCaretPosition];
}

- (id<RAREiActionComponent>)getFileUploadButton {
  return fileUploadButton_;
}

- (NSString *)getHTTPFormValue {
  NSString *s = [self getValueAsString];
  if (widgetType_ == [RAREiWidget_WidgetTypeEnum PasswordField]) {
    if ((s == nil) || ([s sequenceLength] == 0)) {
      return @"";
    }
    return [self hashPasswordWithNSString:s];
  }
  return ((s == nil) || ([s sequenceLength] == 0)) ? nil : s;
}

- (NSString *)getHashValue {
  NSString *s = [self getValueAsString];
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return @"";
  }
  return [self hashPasswordWithNSString:s];
}

- (JavaTextFormat *)getInputValidator {
  return inputValidator_;
}

- (int)getMaxCharacters {
  return maxCharacters_;
}

- (int)getMinCharacters {
  return minCharacters_;
}

- (NSString *)getSelectedText {
  return [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) getSelectionString];
}

- (id)getSelection {
  return [self getSelectedText];
}

- (NSString *)getText {
  return [self getValueAsString];
}

- (int)getTextLength {
  return [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) getTextLength];
}

- (NSString *)getValidCharacters {
  return validCharacters_;
}

- (id)getValue {
  return [self getValueAsString];
}

- (NSString *)getValueAsString {
  return [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) getPlainText];
}

- (int)getVisibleCharacters {
  return visibleCharacters_;
}

- (BOOL)hasSelection {
  return [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) hasSelection];
}

- (BOOL)hasValue {
  return [self getTextLength] > 0;
}

- (BOOL)isEditable {
  return [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) isEditable];
}

- (BOOL)isValidForSubmissionWithBoolean:(BOOL)showerror {
  int len = [self getTextLength];
  if ((minCharacters_ > -1) && (len < minCharacters_)) {
    if (showerror) {
      [RAREUISoundHelper errorSound];
      [self showError];
    }
    return NO;
  }
  if ((maxCharacters_ > 0) && (len > maxCharacters_)) {
    if (showerror) {
      [RAREUISoundHelper errorSound];
      [self showError];
    }
    return NO;
  }
  return [self verify];
}

- (void)configureExWithRARESPOTTextField:(RARESPOTTextField *)cfg {
  selectAllAllowed_ = YES;
  deletingAllowed_ = YES;
  pastingAllowed_ = YES;
  copyingAllowed_ = YES;
  droppingAllowed_ = [((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) areAllTextFieldsDroppable];
  if ([cfg isKindOfClass:[RARESPOTPasswordField class]]) {
    textEditor_ = [self createEditorAndComponentsWithRAREiViewer:[self getViewer] withRARESPOTPasswordField:(RARESPOTPasswordField *) check_class_cast(cfg, [RARESPOTPasswordField class])];
  }
  else {
    textEditor_ = [self createEditorAndComponentsWithRAREiViewer:[self getViewer] withRARESPOTTextField:cfg];
  }
  if ([cfg isKindOfClass:[RARESPOTTextArea class]]) {
    if ([((SPOTPrintableString *) nil_chk(((RARESPOTTextField *) nil_chk(cfg))->fgColor_)) getValue] == nil) {
      [((id<RAREiPlatformComponent>) nil_chk(dataComponent_)) setForegroundWithRAREUIColor:[RAREColorUtils getTextAreaForeground]];
    }
    if ([((SPOTPrintableString *) nil_chk(cfg->bgColor_)) getValue] == nil) {
      [((id<RAREiPlatformComponent>) nil_chk(dataComponent_)) setBackgroundWithRAREUIColor:[RAREColorUtils getTextAreaBackground]];
    }
    if (![((RARESPOTFont *) nil_chk(cfg->font_)) spot_hasValue]) {
      [((id<RAREiPlatformComponent>) nil_chk(dataComponent_)) setFontWithRAREUIFont:[RAREFontUtils getDefaultFont]];
    }
    if ([cfg getBorders] == nil) {
      [((id<RAREiPlatformComponent>) nil_chk(formComponent_)) setBorderWithRAREiPlatformBorder:[RAREBorderUtils getTextAreaBorder]];
    }
  }
  else {
    if ([((SPOTPrintableString *) nil_chk(((RARESPOTTextField *) nil_chk(cfg))->fgColor_)) getValue] == nil) {
      [((id<RAREiPlatformComponent>) nil_chk(dataComponent_)) setForegroundWithRAREUIColor:[RAREColorUtils getTextFieldForeground]];
    }
    if ([((SPOTPrintableString *) nil_chk(cfg->bgColor_)) getValue] == nil) {
      [((id<RAREiPlatformComponent>) nil_chk(dataComponent_)) setBackgroundWithRAREUIColor:[RAREColorUtils getTextFieldBackground]];
    }
    if (![((RARESPOTFont *) nil_chk(cfg->font_)) spot_hasValue]) {
      [((id<RAREiPlatformComponent>) nil_chk(dataComponent_)) setFontWithRAREUIFont:[RAREFontUtils getDefaultFont]];
    }
    if ([cfg getBorders] == nil) {
      [((id<RAREiPlatformComponent>) nil_chk(formComponent_)) setBorderWithRAREiPlatformBorder:[RAREBorderUtils getTextFieldBorder]];
    }
  }
  [self configureWithRARESPOTWidget:cfg withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES];
  id<RAREiPlatformComponent> comp = dataComponent_;
  id<RAREiSpeechEnabler> sp = [((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getSpeechEnabler];
  if ((sp != nil) && [((SPOTBoolean *) nil_chk(((RARESPOTTextField *) nil_chk(cfg))->speechInputSupported_)) booleanValue]) {
    formComponent_ = (id<RAREiPlatformComponent>) check_protocol_cast([sp configureWithRAREiWidget:self withId:formComponent_ withRARESPOTWidget:cfg], @protocol(RAREiPlatformComponent));
  }
  if (![RAREPlatform isTouchDevice]) {
    if (![((SPOTBoolean *) nil_chk(((RARESPOTTextField *) nil_chk(cfg))->focusPainted_)) spot_valueWasSet] || [cfg->focusPainted_ booleanValue]) {
      [self setFocusPaintedWithBoolean:YES];
    }
  }
  if (![((SPOTBoolean *) nil_chk(((RARESPOTTextField *) nil_chk(cfg))->editable_)) booleanValue]) {
    [self setEditableWithBoolean:NO];
  }
  NSString *s = [((SPOTPrintableString *) nil_chk(cfg->value_)) getValue];
  if (s != nil) {
    initialValue_ = s;
    [self setTextWithJavaLangCharSequence:[self expandStringWithNSString:s]];
  }
  errorMessage_ = [((SPOTPrintableString *) nil_chk(cfg->errorMessage_)) getValue];
  displayWidget_ = [cfg->errorMessage_ spot_getAttributeWithNSString:@"displayWidget"];
  if ((displayWidget_ != nil) && ([displayWidget_ sequenceLength] == 0)) {
    displayWidget_ = nil;
  }
  [self setMinMaxVisibleValidWithSPOTInteger:cfg->minCharacters_ withSPOTInteger:cfg->maxCharacters_ withSPOTInteger:cfg->visibleCharacters_ withSPOTPrintableString:cfg->validCharacters_];
  if ([cfg getEmptyText] != nil) {
    s = [((SPOTPrintableString *) nil_chk(((RARESPOTEmptyText *) nil_chk([cfg getEmptyText]))->value_)) getValue];
    if (s != nil) {
      [self setEmptyFieldTextWithNSString:[self expandStringWithNSString:s]];
      s = [((SPOTPrintableString *) nil_chk(((RARESPOTEmptyText *) nil_chk([cfg getEmptyText]))->fgColor_)) getValue];
      if (s != nil) {
        [self setEmptyFieldColorWithRAREUIColor:[self getColorWithNSString:s]];
      }
      if ([((RARESPOTEmptyText *) nil_chk([cfg getEmptyText])) getFont] != nil) {
        [self setEmptyFieldFontWithRAREUIFont:[self getFontWithRARESPOTFont:[((RARESPOTEmptyText *) nil_chk([cfg getEmptyText])) getFont]]];
      }
    }
  }
  if ([((RARESPOTTextField_CKeyboardType *) nil_chk(cfg->keyboardType_)) spot_valueWasSet]) {
    @try {
      [self setKeyboardTypeWithRAREKeyboardTypeEnum:[RAREKeyboardTypeEnum valueOfWithNSString:[((NSString *) nil_chk([cfg->keyboardType_ stringValue])) uppercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]]]];
    }
    @catch (JavaLangThrowable *ignore) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:ignore];
    }
  }
  if ([((RARESPOTTextField_CKeyboardReturnButtonType *) nil_chk(cfg->keyboardReturnButtonType_)) spot_valueWasSet]) {
    @try {
      RAREKeyboardReturnButtonTypeEnum *type = [RAREKeyboardReturnButtonTypeEnum valueOfWithNSString:[((NSString *) nil_chk([cfg->keyboardReturnButtonType_ stringValue])) uppercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]]];
      NSString *text = [cfg->keyboardReturnButtonType_ spot_getAttributeWithNSString:@"text"];
      if (text == nil) {
        text = [((id<JavaUtilMap>) nil_chk([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getStrings])) getWithId:[NSString stringWithFormat:@"Rare.KeyboardReturnButtonType.%@", [cfg->keyboardReturnButtonType_ stringValue]]];
      }
      else {
        text = [self expandStringWithNSString:text];
      }
      BOOL ae = [self isRequired];
      text = [cfg spot_getAttributeWithNSString:@"autoEnable"];
      if (text != nil) {
        ae = [@"true" isEqual:text];
      }
      [self setKeyboardReturnButtonTypeWithRAREKeyboardReturnButtonTypeEnum:type withNSString:text withBoolean:ae];
    }
    @catch (JavaLangThrowable *ignore) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:ignore];
    }
  }
  [self createValidatorWithSPOTPrintableString:cfg->inputValidator_];
  if ([cfg isKindOfClass:[RARESPOTPasswordField class]]) {
    [self configurePasswordFieldWithRARESPOTPasswordField:(RARESPOTPasswordField *) check_class_cast(cfg, [RARESPOTPasswordField class])];
  }
  else {
    [self configureGenericDnDWithRAREiPlatformComponent:comp withRARESPOTWidget:cfg];
  }
}

- (void)configurePasswordFieldWithRARESPOTPasswordField:(RARESPOTPasswordField *)cfg {
  widgetType_ = [RAREiWidget_WidgetTypeEnum PasswordField];
  hashType_ = [((RARESPOTPasswordField_CHashAlgorithm *) nil_chk(((RARESPOTPasswordField *) nil_chk(cfg))->hashAlgorithm_)) intValue];
  draggingAllowed_ = NO;
  selectAllAllowed_ = YES;
  deletingAllowed_ = YES;
  pastingAllowed_ = NO;
  copyingAllowed_ = NO;
}

- (id<RAREiPlatformTextEditor>)createEditorAndComponentsWithRAREiViewer:(id<RAREiViewer>)viewer
                                              withRARESPOTPasswordField:(RARESPOTPasswordField *)cfg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RAREiPlatformTextEditor>)createEditorAndComponentsWithRAREiViewer:(id<RAREiViewer>)viewer
                                                  withRARESPOTTextField:(RARESPOTTextField *)cfg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)createValidatorWithSPOTPrintableString:(SPOTPrintableString *)format {
  NSString *s = [((SPOTPrintableString *) nil_chk(format)) getValue];
  if ((s != nil) && ([s sequenceLength] == 0)) {
    s = nil;
  }
  NSString *type = [format spot_getAttributeWithNSString:@"valueType"];
  if ([((NSString *) nil_chk(type)) equalsIgnoreCase:@"date"]) {
    inputValidator_ = [RAREConversions createDateFormatWithNSString:s withBoolean:[((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getAutoLocalizeDateFormats]];
    minValue_ = [self getDateWithNSString:[format spot_getAttributeWithNSString:@"minimum"]];
    maxValue_ = [self getDateWithNSString:[format spot_getAttributeWithNSString:@"maximum"]];
  }
  else if ([type equalsIgnoreCase:@"number"]) {
    inputValidator_ = [RAREConversions createNumberFormatWithNSString:s withBoolean:[((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getAutoLocalizeNumberFormats]];
    minValue_ = [self getNumberWithNSString:[format spot_getAttributeWithNSString:@"minimum"]];
    maxValue_ = [self getNumberWithNSString:[format spot_getAttributeWithNSString:@"maximum"]];
  }
  else if ([type equalsIgnoreCase:@"regex"] && s != nil) {
    inputValidator_ = [[RARERegExpressionFormat alloc] initWithJavaUtilRegexPattern:[JavaUtilRegexPattern compileWithNSString:s withInt:JavaUtilRegexPattern_DOTALL]];
  }
  else if (s != nil) {
    inputValidator_ = [[RAREStringFormat alloc] initWithNSString:s];
    s = [format spot_getAttributeWithNSString:@"minimum"];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      minValue_ = s;
    }
    s = [format spot_getAttributeWithNSString:@"maximum"];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      maxValue_ = s;
    }
  }
  s = [format spot_getAttributeWithNSString:@"reformat"];
  if ((s != nil) && [s equalsIgnoreCase:@"true"]) {
    self->reformatValue_ = YES;
  }
  s = [format spot_getAttributeWithNSString:@"validateOnLostFocus"];
  if ((s != nil) && [s equalsIgnoreCase:@"true"]) {
    validateOnLostFocus_ = YES;
  }
  s = [format spot_getAttributeWithNSString:@"submitRawValue"];
  if ((s != nil) && [s equalsIgnoreCase:@"true"]) {
    keepRawValue_ = YES;
  }
}

- (void)focusEventWithRAREFocusEvent:(RAREFocusEvent *)e {
  if ((dataComponent_ == nil) || !validateOnLostFocus_) {
    return;
  }
  if ([((RAREFocusEvent *) nil_chk(e)) wasFocusLost]) {
    [self verify];
    if (hadError_) {
      hadError_ = NO;
      id<RAREiWidget> w = nil;
      if (displayWidget_ != nil) {
        w = [((id<RAREiFormViewer>) nil_chk([self getFormViewer])) getWidgetWithNSString:displayWidget_];
      }
      if (w != nil) {
        [w setValueWithId:@""];
      }
      else {
        id<RAREiPlatformAppContext> app = [self getAppContext];
        if (app != nil) {
          [app clearStatusBar];
        }
      }
    }
  }
}

- (NSString *)hashPasswordWithNSString:(NSString *)pass {
  if (hashType_ == RARESPOTPasswordField_CHashAlgorithm_md5) {
    return [RAREFunctionHelper md5WithNSString:pass withBoolean:YES];
  }
  else {
    return [RAREFunctionHelper sha1WithNSString:pass withBoolean:YES];
  }
}

- (BOOL)importDataExWithRAREiTransferable:(id<RAREiTransferable>)t
                  withRAREDropInformation:(RAREDropInformation *)drop {
  int i = [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) getSelectionStart];
  @try {
    NSString *val = [((RAREDropInformation *) nil_chk(drop)) getText];
    if (val != nil) {
      [((id<RAREiPlatformComponent>) nil_chk(dataComponent_)) requestFocus];
      [textEditor_ insertTextWithInt:i withNSString:val];
      [textEditor_ setSelectionWithInt:i withInt:i + [val sequenceLength]];
    }
    return YES;
  }
  @catch (JavaLangException *ignore) {
    return NO;
  }
}

- (void)initializeListenersWithRAREaWidgetListener:(RAREaWidgetListener *)l {
  [super initializeListenersWithRAREaWidgetListener:l];
  if ((l != nil) && [l isChangeEventEnabled]) {
    [((id<RAREiPlatformComponent>) nil_chk([self getDataComponent])) addTextChangeListenerWithRAREiTextChangeListener:l];
  }
}

- (void)addTextChangeListenerWithRAREiTextChangeListener:(id<RAREiTextChangeListener>)l {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) addTextChangeListenerWithRAREiTextChangeListener:l];
}

- (void)removeTextChangeListenerWithRAREiTextChangeListener:(id<RAREiTextChangeListener>)l {
  [((id<RAREiPlatformTextEditor>) nil_chk(textEditor_)) removeTextChangeListenerWithRAREiTextChangeListener:l];
}

- (void)showError {
  hadError_ = YES;
  NSString *s = (errorMessage_ == nil) ? nil : [self expandStringWithNSString:errorMessage_ withBoolean:NO];
  if (s == nil) {
    if (inputValidator_ != nil) {
      s = [((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getResourceAsStringWithNSString:@"Rare.runtime.text.fieldInvalidMessage"];
    }
    else {
      s = [RAREUtils makeInvalidRangeStringWithInt:minCharacters_ withInt:maxCharacters_];
    }
  }
  if (s != nil) {
    id<RAREiWidget> w = nil;
    if (displayWidget_ != nil) {
      w = [((id<RAREiFormViewer>) nil_chk([self getFormViewer])) getWidgetWithNSString:displayWidget_];
    }
    if (w != nil) {
      [w setValueWithId:s];
      [RAREUISoundHelper errorSound];
    }
    else {
      [((RAREWindowViewer *) nil_chk([self getWindow])) setStatusWithNSString:s];
    }
  }
}

- (void)showMinMaxError {
  hadError_ = YES;
  if (errorMessage_ != nil) {
    [self showError];
  }
  NSString *s;
  if ((minValue_ != nil) && (maxValue_ != nil)) {
    s = [RAREUTHelper expandStringWithNSString:[((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getResourceAsStringWithNSString:@"Rare.runtime.text.fieldValueNotInRange"] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [minValue_ description], [maxValue_ description] } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  }
  else if (minValue_ != nil) {
    s = [RAREUTHelper expandStringWithNSString:[((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getResourceAsStringWithNSString:@"Rare.runtime.text.fieldValueToSmall"] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [minValue_ description] } count:1 type:[IOSClass classWithClass:[NSString class]]]];
  }
  else {
    s = [RAREUTHelper expandStringWithNSString:[((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getResourceAsStringWithNSString:@"Rare.runtime.text.fieldValueToBig"] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [((id<JavaLangComparable>) nil_chk(maxValue_)) description] } count:1 type:[IOSClass classWithClass:[NSString class]]]];
  }
  [((RAREWindowViewer *) nil_chk([self getWindow])) setStatusWithNSString:s];
}

- (BOOL)verify {
  if (inputValidator_ != nil) {
    @try {
      NSString *r = [self getValueAsString];
      if ((r != nil) && ([r sequenceLength] > 0)) {
        id o = [inputValidator_ parseObjectWithNSString:r];
        if ((minValue_ != nil) && ([minValue_ compareToWithId:o] > 0)) {
          [self showMinMaxError];
          return NO;
        }
        if ((maxValue_ != nil) && ([maxValue_ compareToWithId:o] < 0)) {
          [self showMinMaxError];
          return NO;
        }
        if (reformatValue_) {
          [self setValueWithId:[inputValidator_ formatWithId:o]];
          if (keepRawValue_) {
            rawValue_ = r;
          }
        }
      }
      return YES;
    }
    @catch (JavaLangException *e) {
      [self showError];
      return NO;
    }
  }
  return YES;
}

- (void)setMinMaxVisibleValidWithSPOTInteger:(SPOTInteger *)min
                             withSPOTInteger:(SPOTInteger *)max
                             withSPOTInteger:(SPOTInteger *)visible
                     withSPOTPrintableString:(SPOTPrintableString *)valid {
  int n = [((SPOTInteger *) nil_chk(visible)) spot_hasValue] ? [visible intValue] : 0;
  if (n > 0) {
    [self setVisibleCharactersWithInt:n];
  }
  n = [((SPOTInteger *) nil_chk(max)) spot_hasValue] ? [max intValue] : 0;
  maxCharacters_ = n;
  if (maxCharacters_ < 1) {
    maxCharacters_ = -1;
  }
  n = [((SPOTInteger *) nil_chk(min)) spot_hasValue] ? [min intValue] : 0;
  minCharacters_ = n;
  if (minCharacters_ < 0) {
    minCharacters_ = 0;
  }
  validCharacters_ = [((SPOTPrintableString *) nil_chk(valid)) getValue];
  if ((validCharacters_ != nil) && ([validCharacters_ sequenceLength] == 0)) {
    validCharacters_ = nil;
  }
  if (validCharacters_ != nil || maxCharacters_ > 0) {
    if (textChangeListener_ == nil) {
      textChangeListener_ = [[RAREaTextFieldWidget_TextChangeListener alloc] initWithRAREaTextFieldWidget:self];
      [self addTextChangeListenerWithRAREiTextChangeListener:textChangeListener_];
    }
  }
}

- (id<JavaLangComparable>)getDateWithNSString:(NSString *)s {
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return nil;
  }
  @try {
    return [((JavaTextDateFormat *) nil_chk([((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultDateContext])) getItemFormat])) parseWithNSString:s];
  }
  @catch (JavaTextParseException *ex) {
    [self handleExceptionWithJavaLangThrowable:ex];
    return nil;
  }
}

- (id<JavaLangComparable>)getNumberWithNSString:(NSString *)s {
  return ((s == nil) || ([s sequenceLength] == 0)) ? nil : [[RAREUTSNumber alloc] initWithNSString:s];
}

- (BOOL)allowTextChangeWithId:(id)source
                      withInt:(int)startIndex
                      withInt:(int)endIndex
     withJavaLangCharSequence:(id<JavaLangCharSequence>)replacementString {
  if ((keyboardType_ != nil) && (validCharacters_ == nil) && ([((id<JavaLangCharSequence>) nil_chk(replacementString)) sequenceLength] > 0)) {
    {
      RAREUTCharArray *ca;
      NSString *s;
      int len;
      switch ([keyboardType_ ordinal]) {
        case RAREKeyboardType_NUMBER_TYPE:
        return [self isNumericWithNSString:[replacementString sequenceDescription] withBoolean:NO];
        case RAREKeyboardType_DECIMAL_TYPE:
        if (caNumTest_ == nil) {
          caNumTest_ = [[RAREUTCharArray alloc] init];
        }
        ca = caNumTest_;
        s = [self getValueAsString];
        len = [((NSString *) nil_chk(s)) sequenceLength];
        ((RAREUTCharArray *) nil_chk(ca))->_length_ = 0;
        if (startIndex <= len) {
          (void) [ca appendWithNSString:[s substring:0 endIndex:startIndex]];
        }
        (void) [ca appendWithNSString:[replacementString sequenceDescription]];
        if (endIndex < len) {
          (void) [ca appendWithNSString:[s substring:endIndex]];
        }
        return [self isNumericWithCharArray:ca->A_ withInt:ca->_length_ withBoolean:YES];
        default:
        break;
      }
    }
  }
  return YES;
}

- (BOOL)isNumericWithNSString:(NSString *)value
                  withBoolean:(BOOL)decimal {
  if (caNumTest_ == nil) {
    caNumTest_ = [[RAREUTCharArray alloc] init];
    decmalChar_ = [((JavaTextDecimalFormatSymbols *) nil_chk([JavaTextDecimalFormatSymbols getInstance])) getDecimalSeparator];
  }
  ((RAREUTCharArray *) nil_chk(caNumTest_))->_length_ = 0;
  (void) [caNumTest_ appendWithNSString:value];
  IOSCharArray *a = caNumTest_->A_;
  int len = caNumTest_->_length_;
  BOOL foundDecimal = NO;
  for (int i = 0; i < len; i++) {
    if (![JavaLangCharacter isDigitWithChar:IOSCharArray_Get(nil_chk(a), i)]) {
      if (decimal) {
        if (!foundDecimal && (IOSCharArray_Get(a, i) == decmalChar_)) {
          continue;
        }
      }
      return NO;
    }
  }
  return YES;
}

- (BOOL)isNumericWithCharArray:(IOSCharArray *)a
                       withInt:(int)len
                   withBoolean:(BOOL)decimal {
  if (decmalChar_ == 0) {
    decmalChar_ = [((JavaTextDecimalFormatSymbols *) nil_chk([JavaTextDecimalFormatSymbols getInstance])) getDecimalSeparator];
  }
  BOOL foundDecimal = NO;
  for (int i = 0; i < len; i++) {
    if (![JavaLangCharacter isDigitWithChar:IOSCharArray_Get(nil_chk(a), i)]) {
      if (decimal) {
        if (!foundDecimal && (IOSCharArray_Get(a, i) == decmalChar_)) {
          foundDecimal = YES;
          continue;
        }
      }
      return NO;
    }
  }
  return YES;
}

- (void)copyAllFieldsTo:(RAREaTextFieldWidget *)other {
  [super copyAllFieldsTo:other];
  other->caNumTest_ = caNumTest_;
  other->decmalChar_ = decmalChar_;
  other->displayWidget_ = displayWidget_;
  other->errorMessage_ = errorMessage_;
  other->fileUploadButton_ = fileUploadButton_;
  other->hadError_ = hadError_;
  other->hashType_ = hashType_;
  other->initialValue_ = initialValue_;
  other->initialValueLink_ = initialValueLink_;
  other->inputValidator_ = inputValidator_;
  other->isURL_ = isURL_;
  other->keepRawValue_ = keepRawValue_;
  other->keyboardType_ = keyboardType_;
  other->maxCharacters_ = maxCharacters_;
  other->maxValue_ = maxValue_;
  other->minCharacters_ = minCharacters_;
  other->minValue_ = minValue_;
  other->normalColor_ = normalColor_;
  other->normalFont_ = normalFont_;
  other->rawValue_ = rawValue_;
  other->reformatValue_ = reformatValue_;
  other->textChangeListener_ = textChangeListener_;
  other->textEditor_ = textEditor_;
  other->validCharacters_ = validCharacters_;
  other->validateOnLostFocus_ = validateOnLostFocus_;
  other->visibleCharacters_ = visibleCharacters_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "canCut", NULL, "Z", 0x1, NULL },
    { "canDelete", NULL, "Z", 0x1, NULL },
    { "canImportWithRARETransferFlavorArray:withRAREDropInformation:", NULL, "Z", 0x1, NULL },
    { "canPaste", NULL, "Z", 0x1, NULL },
    { "removeSelectedDataWithBoolean:", NULL, "LNSObject", 0x1, NULL },
    { "setVisibleCharactersWithInt:", NULL, "V", 0x401, NULL },
    { "getFileUploadButton", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "getHTTPFormValue", NULL, "LNSString", 0x1, NULL },
    { "getHashValue", NULL, "LNSString", 0x1, NULL },
    { "getInputValidator", NULL, "LJavaTextFormat", 0x1, NULL },
    { "getSelectedText", NULL, "LNSString", 0x1, NULL },
    { "getSelection", NULL, "LNSObject", 0x1, NULL },
    { "getText", NULL, "LNSString", 0x1, NULL },
    { "getValidCharacters", NULL, "LNSString", 0x1, NULL },
    { "getValue", NULL, "LNSObject", 0x1, NULL },
    { "getValueAsString", NULL, "LNSString", 0x1, NULL },
    { "hasSelection", NULL, "Z", 0x1, NULL },
    { "hasValue", NULL, "Z", 0x1, NULL },
    { "isEditable", NULL, "Z", 0x1, NULL },
    { "isValidForSubmissionWithBoolean:", NULL, "Z", 0x1, NULL },
    { "configureExWithRARESPOTTextField:", NULL, "V", 0x4, NULL },
    { "configurePasswordFieldWithRARESPOTPasswordField:", NULL, "V", 0x4, NULL },
    { "createEditorAndComponentsWithRAREiViewer:withRARESPOTPasswordField:", NULL, "LRAREiPlatformTextEditor", 0x404, NULL },
    { "createEditorAndComponentsWithRAREiViewer:withRARESPOTTextField:", NULL, "LRAREiPlatformTextEditor", 0x404, NULL },
    { "createValidatorWithSPOTPrintableString:", NULL, "V", 0x4, NULL },
    { "focusEventWithRAREFocusEvent:", NULL, "V", 0x4, NULL },
    { "hashPasswordWithNSString:", NULL, "LNSString", 0x4, NULL },
    { "importDataExWithRAREiTransferable:withRAREDropInformation:", NULL, "Z", 0x4, NULL },
    { "initializeListenersWithRAREaWidgetListener:", NULL, "V", 0x4, NULL },
    { "showError", NULL, "V", 0x4, NULL },
    { "showMinMaxError", NULL, "V", 0x4, NULL },
    { "verify", NULL, "Z", 0x4, NULL },
    { "setMinMaxVisibleValidWithSPOTInteger:withSPOTInteger:withSPOTInteger:withSPOTPrintableString:", NULL, "V", 0x4, NULL },
    { "getDateWithNSString:", NULL, "LJavaLangComparable", 0x4, NULL },
    { "getNumberWithNSString:", NULL, "LJavaLangComparable", 0x4, NULL },
    { "allowTextChangeWithId:withInt:withInt:withJavaLangCharSequence:", NULL, "Z", 0x4, NULL },
    { "isNumericWithNSString:withBoolean:", NULL, "Z", 0x4, NULL },
    { "isNumericWithCharArray:withInt:withBoolean:", NULL, "Z", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "displayWidget_", NULL, 0x4, "LNSString" },
    { "errorMessage_", NULL, 0x4, "LNSString" },
    { "fileUploadButton_", NULL, 0x4, "LRAREiActionComponent" },
    { "hadError_", NULL, 0x4, "Z" },
    { "hashType_", NULL, 0x4, "I" },
    { "initialValue_", NULL, 0x4, "LNSString" },
    { "initialValueLink_", NULL, 0x4, "LRAREActionLink" },
    { "inputValidator_", NULL, 0x4, "LJavaTextFormat" },
    { "isURL_", NULL, 0x4, "Z" },
    { "keepRawValue_", NULL, 0x4, "Z" },
    { "maxCharacters_", NULL, 0x4, "I" },
    { "maxValue_", NULL, 0x4, "LJavaLangComparable" },
    { "minCharacters_", NULL, 0x4, "I" },
    { "minValue_", NULL, 0x4, "LJavaLangComparable" },
    { "normalColor_", NULL, 0x4, "LRAREUIColor" },
    { "normalFont_", NULL, 0x4, "LRARESPOTFont" },
    { "rawValue_", NULL, 0x4, "LNSString" },
    { "reformatValue_", NULL, 0x4, "Z" },
    { "textEditor_", NULL, 0x4, "LRAREiPlatformTextEditor" },
    { "visibleCharacters_", NULL, 0x4, "I" },
    { "validCharacters_", NULL, 0x4, "LNSString" },
    { "validateOnLostFocus_", NULL, 0x4, "Z" },
    { "textChangeListener_", NULL, 0x4, "LRAREaTextFieldWidget_TextChangeListener" },
    { "keyboardType_", NULL, 0x4, "LRAREKeyboardTypeEnum" },
    { "caNumTest_", NULL, 0x0, "LRAREUTCharArray" },
    { "decmalChar_", NULL, 0x0, "C" },
  };
  static J2ObjcClassInfo _RAREaTextFieldWidget = { "aTextFieldWidget", "com.appnativa.rare.widget", NULL, 0x401, 38, methods, 26, fields, 0, NULL};
  return &_RAREaTextFieldWidget;
}

@end
@implementation RAREaTextFieldWidget_TextChangeListener

- (BOOL)shouldStopEditingWithId:(id)source {
  return NO;
}

- (void)textChangedWithId:(id)source {
}

- (BOOL)textChangingWithId:(id)source
                   withInt:(int)startIndex
                   withInt:(int)endIndex
  withJavaLangCharSequence:(id<JavaLangCharSequence>)replacementString {
  if (this$0_->maxCharacters_ > -1) {
    int len = [this$0_ getTextLength];
    int dif = endIndex - startIndex - [((id<JavaLangCharSequence>) nil_chk(replacementString)) sequenceLength];
    if (len + dif > this$0_->maxCharacters_) {
      return NO;
    }
  }
  if ((this$0_->validCharacters_ != nil) && ![RAREUtils isInValidSetWithNSString:this$0_->validCharacters_ withJavaLangCharSequence:replacementString withBoolean:NO]) {
    return NO;
  }
  return [this$0_ allowTextChangeWithId:source withInt:startIndex withInt:endIndex withJavaLangCharSequence:replacementString];
}

- (id)initWithRAREaTextFieldWidget:(RAREaTextFieldWidget *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "shouldStopEditingWithId:", NULL, "Z", 0x1, NULL },
    { "textChangingWithId:withInt:withInt:withJavaLangCharSequence:", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaTextFieldWidget" },
  };
  static J2ObjcClassInfo _RAREaTextFieldWidget_TextChangeListener = { "TextChangeListener", "com.appnativa.rare.widget", "aTextFieldWidget", 0x0, 2, methods, 1, fields, 0, NULL};
  return &_RAREaTextFieldWidget_TextChangeListener;
}

@end
@implementation RAREaTextFieldWidget_$1

- (void)run {
  if (![this$0_ isDisposed]) {
    [this$0_ setTextWithJavaLangCharSequence:val$data_];
    if (!val$deferred_) {
      [this$0_ finishedLoading];
    }
  }
}

- (id)initWithRAREaTextFieldWidget:(RAREaTextFieldWidget *)outer$
                      withNSString:(NSString *)capture$0
                       withBoolean:(BOOL)capture$1 {
  this$0_ = outer$;
  val$data_ = capture$0;
  val$deferred_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaTextFieldWidget" },
    { "val$data_", NULL, 0x1012, "LNSString" },
    { "val$deferred_", NULL, 0x1012, "Z" },
  };
  static J2ObjcClassInfo _RAREaTextFieldWidget_$1 = { "$1", "com.appnativa.rare.widget", "aTextFieldWidget", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_RAREaTextFieldWidget_$1;
}

@end
