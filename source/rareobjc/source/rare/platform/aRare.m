//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/platform/aRare.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/ErrorInformation.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/Conversions.h"
#include "com/appnativa/rare/converters/DateContext.h"
#include "com/appnativa/rare/converters/aConverter.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/exception/AbortOperationException.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iDataCollection.h"
#include "com/appnativa/rare/iDataCollectionHandler.h"
#include "com/appnativa/rare/iExceptionHandler.h"
#include "com/appnativa/rare/iFunctionCallback.h"
#include "com/appnativa/rare/iFunctionHandler.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/iWeakReference.h"
#include "com/appnativa/rare/iWidgetCustomizer.h"
#include "com/appnativa/rare/iWorkerTask.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/net/CollectionURLConnection.h"
#include "com/appnativa/rare/net/HTTPException.h"
#include "com/appnativa/rare/net/InlineURLConnection.h"
#include "com/appnativa/rare/net/JavaURLConnection.h"
#include "com/appnativa/rare/net/ScriptURLConnection.h"
#include "com/appnativa/rare/net/aNetHelper.h"
#include "com/appnativa/rare/net/iConnectionHandler.h"
#include "com/appnativa/rare/net/iMultipartMimeHandler.h"
#include "com/appnativa/rare/net/iURLConnection.h"
#include "com/appnativa/rare/platform/ActionHelper.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/platform/aAppContext.h"
#include "com/appnativa/rare/platform/aRare.h"
#include "com/appnativa/rare/scripting/Functions.h"
#include "com/appnativa/rare/scripting/iScriptHandler.h"
#include "com/appnativa/rare/spot/ActionItem.h"
#include "com/appnativa/rare/spot/Application.h"
#include "com/appnativa/rare/spot/Bean.h"
#include "com/appnativa/rare/spot/Browser.h"
#include "com/appnativa/rare/spot/Canvas.h"
#include "com/appnativa/rare/spot/Carousel.h"
#include "com/appnativa/rare/spot/Chart.h"
#include "com/appnativa/rare/spot/CheckBox.h"
#include "com/appnativa/rare/spot/CheckBoxList.h"
#include "com/appnativa/rare/spot/CheckBoxTree.h"
#include "com/appnativa/rare/spot/CollapsiblePane.h"
#include "com/appnativa/rare/spot/ColorChooser.h"
#include "com/appnativa/rare/spot/ComboBox.h"
#include "com/appnativa/rare/spot/DataCollection.h"
#include "com/appnativa/rare/spot/DateChooser.h"
#include "com/appnativa/rare/spot/DateSpinner.h"
#include "com/appnativa/rare/spot/DateTimeSpinner.h"
#include "com/appnativa/rare/spot/DocumentPane.h"
#include "com/appnativa/rare/spot/FileUploadField.h"
#include "com/appnativa/rare/spot/Form.h"
#include "com/appnativa/rare/spot/GridCell.h"
#include "com/appnativa/rare/spot/GridPane.h"
#include "com/appnativa/rare/spot/GroupBox.h"
#include "com/appnativa/rare/spot/ImagePane.h"
#include "com/appnativa/rare/spot/Label.h"
#include "com/appnativa/rare/spot/Line.h"
#include "com/appnativa/rare/spot/ListBox.h"
#include "com/appnativa/rare/spot/MainWindow.h"
#include "com/appnativa/rare/spot/MenuBar.h"
#include "com/appnativa/rare/spot/NameValuePair.h"
#include "com/appnativa/rare/spot/Navigator.h"
#include "com/appnativa/rare/spot/NumberSpinner.h"
#include "com/appnativa/rare/spot/PasswordField.h"
#include "com/appnativa/rare/spot/ProgressBar.h"
#include "com/appnativa/rare/spot/PropertyTable.h"
#include "com/appnativa/rare/spot/PushButton.h"
#include "com/appnativa/rare/spot/RadioButton.h"
#include "com/appnativa/rare/spot/Slider.h"
#include "com/appnativa/rare/spot/Spinner.h"
#include "com/appnativa/rare/spot/SplitPane.h"
#include "com/appnativa/rare/spot/StackPane.h"
#include "com/appnativa/rare/spot/StatusBar.h"
#include "com/appnativa/rare/spot/TabPane.h"
#include "com/appnativa/rare/spot/Table.h"
#include "com/appnativa/rare/spot/TextArea.h"
#include "com/appnativa/rare/spot/TextField.h"
#include "com/appnativa/rare/spot/TimeSpinner.h"
#include "com/appnativa/rare/spot/ToolBar.h"
#include "com/appnativa/rare/spot/Tree.h"
#include "com/appnativa/rare/spot/TreeTable.h"
#include "com/appnativa/rare/spot/Viewer.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/spot/WidgetPane.h"
#include "com/appnativa/rare/ui/AlertPanel.h"
#include "com/appnativa/rare/ui/BorderUtils.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/PainterUtils.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIAction.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontHelper.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIImageHelper.h"
#include "com/appnativa/rare/ui/UIImageIcon.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/WaitCursorHandler.h"
#include "com/appnativa/rare/ui/aFocusedAction.h"
#include "com/appnativa/rare/ui/border/UIEmptyBorder.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformWindowManager.h"
#include "com/appnativa/rare/ui/iPrintHandler.h"
#include "com/appnativa/rare/ui/listener/iApplicationListener.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/UISimpleBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"
#include "com/appnativa/rare/util/DataItemParserHandler.h"
#include "com/appnativa/rare/util/DataParser.h"
#include "com/appnativa/rare/util/MIMEMap.h"
#include "com/appnativa/rare/viewer/CheckBoxListViewer.h"
#include "com/appnativa/rare/viewer/FormViewer.h"
#include "com/appnativa/rare/viewer/GridPaneViewer.h"
#include "com/appnativa/rare/viewer/GroupBoxViewer.h"
#include "com/appnativa/rare/viewer/ImagePaneViewer.h"
#include "com/appnativa/rare/viewer/ListBoxViewer.h"
#include "com/appnativa/rare/viewer/MenuBarViewer.h"
#include "com/appnativa/rare/viewer/StackPaneViewer.h"
#include "com/appnativa/rare/viewer/ToolBarViewer.h"
#include "com/appnativa/rare/viewer/WebBrowser.h"
#include "com/appnativa/rare/viewer/WidgetPaneViewer.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/aViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/BeanWidget.h"
#include "com/appnativa/rare/widget/CheckBoxWidget.h"
#include "com/appnativa/rare/widget/LabelWidget.h"
#include "com/appnativa/rare/widget/LineWidget.h"
#include "com/appnativa/rare/widget/PushButtonWidget.h"
#include "com/appnativa/rare/widget/RadioButtonWidget.h"
#include "com/appnativa/rare/widget/TextAreaWidget.h"
#include "com/appnativa/rare/widget/TextFieldWidget.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTAny.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSequence.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/MutableInteger.h"
#include "com/appnativa/util/ObjectHolder.h"
#include "com/appnativa/util/OrderedProperties.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/Streams.h"
#include "com/appnativa/util/iCancelable.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/Writer.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/Package.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/net/ConnectException.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/nio/channels/ClosedChannelException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/ResourceBundle.h"
#include "java/util/Set.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@implementation RAREaRare

static NSString * RAREaRare_RARE_USER_AGENT_;
static id<JavaUtilMap> RAREaRare_dataConverters_;
static BOOL RAREaRare_debugEnabled_;
static id<RAREiFunctionHandler> RAREaRare_functionHandler_;
static NSString * RAREaRare_osType_;
static JavaUtilResourceBundle * RAREaRare_resources_;

+ (NSString *)RARE_USER_AGENT {
  return RAREaRare_RARE_USER_AGENT_;
}

+ (void)setRARE_USER_AGENT:(NSString *)RARE_USER_AGENT {
  RAREaRare_RARE_USER_AGENT_ = RARE_USER_AGENT;
}

+ (id<JavaUtilMap>)dataConverters {
  return RAREaRare_dataConverters_;
}

+ (void)setDataConverters:(id<JavaUtilMap>)dataConverters {
  RAREaRare_dataConverters_ = dataConverters;
}

+ (BOOL)debugEnabled {
  return RAREaRare_debugEnabled_;
}

+ (BOOL *)debugEnabledRef {
  return &RAREaRare_debugEnabled_;
}

+ (id<RAREiFunctionHandler>)functionHandler {
  return RAREaRare_functionHandler_;
}

+ (void)setFunctionHandler:(id<RAREiFunctionHandler>)functionHandler {
  RAREaRare_functionHandler_ = functionHandler;
}

+ (NSString *)osType {
  return RAREaRare_osType_;
}

+ (void)setOsType:(NSString *)osType {
  RAREaRare_osType_ = osType;
}

+ (JavaUtilResourceBundle *)resources {
  return RAREaRare_resources_;
}

+ (void)setResources:(JavaUtilResourceBundle *)resources {
  RAREaRare_resources_ = resources;
}

- (id)init {
  if (self = [super init]) {
    defaultScriptingLanguage_ = @"ECMAScript";
    itemPaddingHeight_ = 3;
    widgetClasses_ = [[JavaUtilHashMap alloc] init];
    appData_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    runOnceScripts_ = [[JavaUtilHashMap alloc] init];
    dynamicNameLookup_ = YES;
  }
  return self;
}

- (void)createApplicationObjectWithJavaNetURLArray:(IOSObjectArray *)url
                                      withNSString:(NSString *)local {
  int len = (int) [((IOSObjectArray *) nil_chk(url)) count];
  for (int i = 0; i < len; i++) {
    @try {
      [self createApplicationObjectExWithJavaNetURL:IOSObjectArray_Get(url, i) withInt:0 withNSString:(i == len - 1) ? local : nil];
      break;
    }
    @catch (JavaLangException *e) {
      if (i == len - 1) {
        @throw e;
      }
    }
  }
}

- (void)fireApplicationPaused {
  if (appListeners_ != nil) {
    for (id<RAREiApplicationListener> __strong listener in appListeners_) {
      [((id<RAREiApplicationListener>) nil_chk(listener)) applicationPausedWithRAREiPlatformAppContext:appContext_];
    }
  }
}

- (void)fireApplicationResumed {
  if (appListeners_ != nil) {
    for (id<RAREiApplicationListener> __strong listener in appListeners_) {
      [((id<RAREiApplicationListener>) nil_chk(listener)) applicationResumedWithRAREiPlatformAppContext:appContext_];
    }
  }
}

- (void)handleExceptionWithJavaLangThrowable:(JavaLangThrowable *)e {
  if (![RAREPlatform isUIThread]) {
    @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:e];
  }
  e = [RAREUTHelper pealExceptionWithJavaLangThrowable:e];
  if ([e isKindOfClass:[RAREAbortOperationException class]]) {
    @throw (RAREAbortOperationException *) check_class_cast(e, [RAREAbortOperationException class]);
  }
  if (([self getWindowManager] != nil) && (appContext_ != nil) && !shuttingDown_) {
    @try {
      [self ignoreExceptionWithNSString:@"Unhandled exception" withJavaLangThrowable:e];
      [self showErrorDialogWithJavaLangThrowable:e withBoolean:YES];
    }
    @catch (JavaLangThrowable *t) {
      [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
      [self exit];
    }
  }
  else {
    [self ignoreExceptionWithNSString:@"Unhandled exception" withJavaLangThrowable:e];
    @throw [[RAREAbortOperationException alloc] init];
  }
}

- (void)handleScriptExceptionWithJavaLangThrowable:(JavaLangThrowable *)e {
  e = [RAREUTHelper pealExceptionWithJavaLangThrowable:e];
  if ([e isKindOfClass:[RAREAbortOperationException class]]) {
    @throw (RAREAbortOperationException *) check_class_cast(e, [RAREAbortOperationException class]);
  }
  if (([self getWindowManager] != nil) && (appContext_ != nil) && !shuttingDown_) {
    [((RAREWindowViewer *) nil_chk([appContext_ getWindowViewer])) alertWithId:e];
  }
  else {
    [self ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
  }
}

- (void)ignoreExceptionWithNSString:(NSString *)msg
              withJavaLangThrowable:(JavaLangThrowable *)e {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)errorOccuredWithRAREiWidget:(id<RAREiWidget>)context
                 withRAREActionLink:(RAREActionLink *)link
              withJavaLangThrowable:(JavaLangThrowable *)error {
  [RAREWaitCursorHandler stopWaitCursorWithRAREiPlatformComponent:(context == nil) ? nil : [context getContainerComponent] withBoolean:NO];
}

- (void)loadCompletedWithRAREiWidget:(id<RAREiWidget>)context
                  withRAREActionLink:(RAREActionLink *)link {
  [RAREWaitCursorHandler stopWaitCursorWithRAREiPlatformComponent:(context == nil) ? nil : [context getContainerComponent] withBoolean:NO];
}

- (void)loadStartedWithRAREiWidget:(id<RAREiWidget>)context
                withRAREActionLink:(RAREActionLink *)link
             withRAREUTiCancelable:(id<RAREUTiCancelable>)cancelable {
  [RAREWaitCursorHandler startWaitCursorWithRAREiPlatformComponent:(context == nil) ? nil : [context getContainerComponent] withRAREUTiCancelable:cancelable withInt:[((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getIntWithNSString:@"Rare.asyncLoadStatusHandler.delay" withInt:200]];
}

+ (void)loadMIMETypeMappingsWithRAREActionLink:(RAREActionLink *)link
                                   withBoolean:(BOOL)clear {
  @try {
    JavaIoInputStream *stream = [((RAREActionLink *) nil_chk(link)) getInputStream];
    RAREUTOrderedProperties *props = [[RAREUTOrderedProperties alloc] init];
    [props load__WithJavaIoInputStream:stream];
    [RAREMIMEMap addMappingsWithJavaUtilMap:props withBoolean:clear];
  }
  @finally {
    [((RAREActionLink *) nil_chk(link)) close];
  }
}

- (id<RAREiURLConnection>)openConnectionWithJavaNetURL:(JavaNetURL *)url {
  return [self openConnectionWithJavaNetURL:url withNSString:nil];
}

- (id<RAREiURLConnection>)openConnectionWithJavaNetURL:(JavaNetURL *)url
                                          withNSString:(NSString *)mimeType {
  if (url == nil) {
    @throw [[RAREApplicationException alloc] initWithNSString:@"null URL"];
  }
  id<RAREiURLConnection> uc = [self handleIfFileOrLibURLWithJavaNetURL:url withNSString:mimeType];
  if ((uc == nil) && (applicationConnectionHandler_ != nil)) {
    uc = [applicationConnectionHandler_ openConnectionWithJavaNetURL:url withNSString:mimeType];
  }
  if (uc != nil) {
    return uc;
  }
  if (![RAREaNetHelper hasStreamHandlerPermission]) {
    NSString *host = [((JavaNetURL *) nil_chk(url)) getHost];
    if ([((NSString *) nil_chk([RAREiConstants INLINE_PROTOCOL_HOSTSTRING])) isEqual:host]) {
      return [[RAREInlineURLConnection alloc] initWithJavaNetURL:url withNSString:mimeType];
    }
    if ([((NSString *) nil_chk([RAREiConstants SCRIPT_PROTOCOL_HOSTSTRING])) isEqual:host]) {
      return [[RAREScriptURLConnection alloc] initWithJavaNetURL:url];
    }
    if ([((NSString *) nil_chk([RAREiConstants COLLECTION_PROTOCOL_HOSTSTRING])) isEqual:host]) {
      return [[RARECollectionURLConnection alloc] initWithJavaNetURL:url];
    }
  }
  JavaNetURLConnection *conn = [((JavaNetURL *) nil_chk(url)) openConnection];
  if ([conn conformsToProtocol: @protocol(RAREiURLConnection)]) {
    return (id<RAREiURLConnection>) check_protocol_cast(conn, @protocol(RAREiURLConnection));
  }
  return [[RAREJavaURLConnection alloc] initWithJavaNetURLConnection:conn withNSString:[self getUserInfoWithJavaNetURL:url] withNSString:mimeType];
}

- (void)setURLUserInfoWithJavaNetURL:(JavaNetURL *)path
                        withNSString:(NSString *)info {
  if (info == nil) {
    if (userInfo_ != nil) {
      [userInfo_ clear];
    }
    userInfo_ = nil;
    return;
  }
  if (userInfo_ == nil) {
    userInfo_ = [[JavaUtilLinkedHashMap alloc] init];
  }
  (void) [((id<JavaUtilMap>) nil_chk(userInfo_)) putWithId:[RAREJavaURLConnection toExternalFormWithJavaNetURL:path] withId:info];
}

- (id<RAREiPlatformAppContext>)getAppContext {
  return appContext_;
}

+ (id<RAREiDataConverter>)getDataConverterWithIOSClass:(IOSClass *)cls {
  if (RAREaRare_dataConverters_ == nil) {
    RAREaRare_dataConverters_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
  }
  id<RAREiDataConverter> cvt = [((id<JavaUtilMap>) nil_chk(RAREaRare_dataConverters_)) getWithId:cls];
  if (cvt == nil) {
    @try {
      id o = [((IOSClass *) nil_chk(cls)) newInstance];
      if ([o conformsToProtocol: @protocol(RAREiDataConverter)]) {
        cvt = (id<RAREiDataConverter>) check_protocol_cast(o, @protocol(RAREiDataConverter));
      }
    }
    @catch (JavaLangException *ex) {
      [((id<RAREiExceptionHandler>) nil_chk([RAREPlatform getDefaultExceptionHandlerWithRAREiWidget:nil])) handleExceptionWithJavaLangThrowable:ex];
      return nil;
    }
    if (cvt != nil) {
      (void) [RAREaRare_dataConverters_ putWithId:cls withId:cvt];
    }
  }
  return cvt;
}

+ (IOSClass *)getDataConverterClassWithNSString:(NSString *)name {
  if (name == nil) {
    return nil;
  }
  if ([((NSString *) nil_chk(name)) indexOf:'.'] == -1) {
    NSString *s = [RAREaPlatformHelper getPackageNameWithIOSClass:[IOSClass classWithClass:[RAREaConverter class]]];
    if (![name hasSuffix:@"Converter"]) {
      name = [NSString stringWithFormat:@"%@.%@Converter", s, name];
    }
    else {
      name = [NSString stringWithFormat:@"%@.%@", s, name];
    }
  }
  return [RAREaPlatformHelper loadClassWithNSString:name];
}

- (JavaIoWriter *)getErrorWriter {
  return [[JavaIoPrintWriter alloc] initWithJavaIoOutputStream:[JavaLangSystem err]];
}

- (id<RAREiFunctionHandler>)getFunctionHandler {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getName {
  return applicationName_;
}

- (id<RAREiPrintHandler>)getPrintHandler {
  if ((printHandler_ == nil) && (printHandlerClassName_ != nil)) {
    printHandler_ = (id<RAREiPrintHandler>) check_protocol_cast([RAREPlatform createObjectWithNSString:printHandlerClassName_], @protocol(RAREiPrintHandler));
  }
  return printHandler_;
}

+ (JavaIoReader *)getReaderWithJavaNetURLConnection:(JavaNetURLConnection *)conn {
  NSString *type = [((JavaNetURLConnection *) nil_chk(conn)) getContentType];
  @try {
    return [[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[conn getInputStream] withNSString:[RAREJavaURLConnection getCharsetWithNSString:type withNSString:nil]];
  }
  @catch (JavaIoUnsupportedEncodingException *ex) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:ex];
  }
  return [[RAREUTStreams_ISO88591Reader alloc] initWithJavaIoInputStream:[conn getInputStream]];
}

- (NSString *)getRelativeLocationWithJavaNetURL:(JavaNetURL *)url {
  NSString *s = [RAREJavaURLConnection toExternalFormWithJavaNetURL:url];
  if ([((NSString *) nil_chk(s)) hasPrefix:contextURLBaseString_]) {
    s = [s substring:[((NSString *) nil_chk(contextURLBaseString_)) sequenceLength]];
  }
  return s;
}

- (JavaUtilResourceBundle *)getResourceBundle {
  return RAREaRare_resources_;
}

+ (NSString *)getUserAgent {
  return RAREaRare_RARE_USER_AGENT_;
}

- (id<RAREiViewer>)getViewerWithNSString:(NSString *)name {
  return [((id<RAREiPlatformWindowManager>) nil_chk([self getWindowManager])) getViewerWithNSString:name];
}

- (IOSClass *)getWidgetHandlerWithNSString:(NSString *)type {
  id o = [((JavaUtilHashMap *) nil_chk(widgetClasses_)) getWithId:type];
  if ([o isKindOfClass:[NSString class]]) {
    IOSClass *cls;
    @try {
      cls = [RAREaPlatformHelper loadClassWithNSString:(NSString *) check_class_cast(o, [NSString class])];
    }
    @catch (JavaLangClassNotFoundException *e) {
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
    }
    (void) [widgetClasses_ putWithId:type withId:cls];
    o = cls;
  }
  return (IOSClass *) check_class_cast(o, [IOSClass class]);
}

- (id<RAREiPlatformWindowManager>)getWindowManager {
  return windowManager_;
}

+ (BOOL)isDebugEnabled {
  return RAREaRare_debugEnabled_;
}

- (void)configureWithRARESPOTApplication:(RARESPOTApplication *)app
                          withJavaNetURL:(JavaNetURL *)context {
  [self initApplicationWithRARESPOTApplication:app];
  scriptHandler_ = [self createScriptHandlerWithRARESPOTApplication:app];
  IOSClass *cls;
  NSString *s = [((SPOTPrintableString *) nil_chk(((RARESPOTApplication *) nil_chk(app))->name_)) getValue];
  if (s != nil) {
    s = [s trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] > 0) {
      applicationName_ = s;
    }
  }
  [self setupUrlPrefixes];
  autoLocalizeDateFormats_ = [((SPOTBoolean *) nil_chk(app->autoLocalizeDateFormats_)) booleanValue];
  autoLocalizeNumberFormats_ = [((SPOTBoolean *) nil_chk(app->autoLocalizeNumberFormats_)) booleanValue];
  ignoreFormatExceptions__ = [((SPOTBoolean *) nil_chk(app->ignoreFormatExceptions_)) booleanValue];
  allWidgetsDraggable_ = [((SPOTBoolean *) nil_chk(app->allWidgetsDraggable_)) booleanValue];
  allLabelsDraggable_ = [((SPOTBoolean *) nil_chk(app->allLabelsDraggable_)) booleanValue];
  allTextFieldsDraggable_ = [((SPOTBoolean *) nil_chk(app->allTextFieldsDraggable_)) booleanValue];
  allTextFieldsDroppable_ = [((SPOTBoolean *) nil_chk(app->allTextFieldsDroppable_)) booleanValue];
  changeSelColorOnLostFocus_ = [((SPOTBoolean *) nil_chk(app->changeSelColorOnLostFocus_)) booleanValue];
  overlapAutoToolTips_ = [((SPOTBoolean *) nil_chk(app->overlapAutoToolTips_)) booleanValue];
  manageFocusedActions_ = [((SPOTBoolean *) nil_chk(app->manageFocusedActions_)) booleanValue];
  defaultScriptingLanguage_ = [((SPOTPrintableString *) nil_chk(app->defaultScriptingLanguage_)) getValue];
  viewersLocalByDefault_ = [((SPOTBoolean *) nil_chk(app->viewersLocalByDefault_)) booleanValue];
  customPropertyPrefix_ = [((SPOTPrintableString *) nil_chk(app->customPropertyPrefix_)) getValue];
  if ((customPropertyPrefix_ != nil) && ([customPropertyPrefix_ sequenceLength] == 0)) {
    customPropertyPrefix_ = nil;
  }
  [self setContextURLWithJavaNetURL:context];
  s = [((SPOTPrintableString *) nil_chk(app->applicationListenerClass_)) getValue];
  if ((s != nil) && ![((RAREaAppContext *) check_class_cast(appContext_, [RAREaAppContext class])) isDesignContext]) {
    s = [s trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] > 0) {
      @try {
        cls = [RAREaPlatformHelper loadClassWithNSString:s];
        [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) addApplicationListenerWithRAREiApplicationListener:(id<RAREiApplicationListener>) check_protocol_cast([((IOSClass *) nil_chk(cls)) newInstance], @protocol(RAREiApplicationListener))];
      }
      @catch (JavaLangException *e) {
        @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
      }
    }
  }
  id<RAREiViewer> v = [self getRootViewer];
  s = [((SPOTPrintableString *) nil_chk(app->contextURL_)) getValue];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    @try {
      JavaNetURL *u = [self createURLWithRAREiPlatformAppContext:appContext_ withJavaNetURL:context withNSString:s];
      if (u != nil) {
        context = u;
        [self setContextURLWithJavaNetURL:context];
      }
    }
    @catch (JavaNetMalformedURLException *ex) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:ex];
    }
  }
  RAREActionLink *link = [RAREActionLink getActionLinkWithRAREiWidget:v withSPOTPrintableString:app->lookAndFeelPropertiesURL_ withInt:0];
  if (link != nil) {
    @try {
      [RAREPlatform loadUIPropertiesWithRAREiWidget:[self getRootViewer] withRAREActionLink:link withRAREUIProperties:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getUIDefaults]];
    }
    @catch (JavaIoIOException *ex) {
      [RAREPlatform ignoreExceptionWithNSString:@"loading UI Properties URL" withJavaLangThrowable:ex];
    }
  }
  useHeavyTargets_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBooleanWithNSString:@"Rare.alwaysUseHeavyTargets" withBoolean:NO];
  @try {
    [self uiPropertiesLoaded];
    widgetFocusPainter_ = [RAREColorUtils configureWithRAREiWidget:v withRARESPOTGridCell:[app getWidgetFocusPainter] withRAREPaintBucket:nil];
    listItemFocusPainter_ = [RAREColorUtils configureWithRAREiWidget:v withRARESPOTGridCell:[app getListItemFocusPainter] withRAREPaintBucket:nil];
    [self setupSelectionPainterWithRARESPOTGridCell:[app getSelectionPainter]];
    pressedPainter_ = [RAREColorUtils configureWithRAREiWidget:[self getRootViewer] withRARESPOTGridCell:[app getPressedPainter] withRAREPaintBucket:nil];
    if (![RAREPlatform isTouchDevice]) {
      [self setupLostFocusSelectionPainterWithRARESPOTGridCell:[app getLostFocusSelectionPainter]];
    }
    [self setupAutoHilightPainterWithRARESPOTGridCell:[app getAutoHilightPainter]];
    [self createCellRenderingDefaults];
    NSString *iformat = nil, *dformat = nil;
    dformat = [((SPOTPrintableString *) nil_chk(app->defaultDisplayDateTimeFormat_)) getValue];
    if (dformat == nil) {
      dformat = @"MM/dd/yyyy hh:mm a";
    }
    iformat = [((SPOTPrintableString *) nil_chk(app->defaultItemDateTimeFormat_)) getValue];
    if (iformat == nil) {
      iformat = @"yyyy-MM-dd HH:mm";
    }
    defaultDateTimeContext_ = [RAREConversions createDateContextWithNSString:[NSString stringWithFormat:@"%@|%@", iformat, dformat] withBoolean:autoLocalizeDateFormats_];
    dformat = [((SPOTPrintableString *) nil_chk(app->defaultDisplayDateFormat_)) getValue];
    if (dformat == nil) {
      dformat = @"MM/dd/yyyy";
    }
    iformat = [((SPOTPrintableString *) nil_chk(app->defaultItemDateFormat_)) getValue];
    if (iformat == nil) {
      iformat = @"yyyy-MM-dd";
    }
    defaultDateContext_ = [RAREConversions createDateContextWithNSString:[NSString stringWithFormat:@"%@|%@", iformat, dformat] withBoolean:autoLocalizeDateFormats_];
    dformat = [((SPOTPrintableString *) nil_chk(app->defaultDisplayTimeFormat_)) getValue];
    if (dformat == nil) {
      dformat = @"hh:mm a";
    }
    iformat = [((SPOTPrintableString *) nil_chk(app->defaultItemTimeFormat_)) getValue];
    if (iformat == nil) {
      iformat = @"HH:mm";
    }
    defaultTimeContext_ = [RAREConversions createDateContextWithNSString:[NSString stringWithFormat:@"%@|%@", iformat, dformat] withBoolean:autoLocalizeDateFormats_];
    SPOTSet *set;
    link = [RAREActionLink getActionLinkWithRAREiWidget:v withSPOTPrintableString:app->attributesURL_ withInt:0];
    if (link != nil) {
      if ([((NSString *) nil_chk([link getContentType])) contains:@"json"]) {
        RAREUTJSONObject *o = [[RAREUTJSONObject alloc] initWithNSString:[link getContentAsString]];
        [((id<JavaUtilMap>) nil_chk(appData_)) putAllWithJavaUtilMap:o];
      }
      else {
        set = [RAREDataParser loadSPOTSetWithRAREiWidget:[self getRootViewer] withRAREActionLink:link withIOSClass:[IOSClass classWithClass:[RARESPOTNameValuePair class]]];
        if (set != nil) {
          (void) [RAREUtils nameValuePairSetToMapWithRAREiWidget:[self getRootViewer] withSPOTSet:set withJavaUtilMap:appData_];
        }
      }
    }
    link = [RAREActionLink getActionLinkWithRAREiWidget:v withSPOTPrintableString:app->resourceStringsURL_ withInt:0];
    if (link != nil) {
      (void) [RAREPlatform loadResourceStringsWithRAREiPlatformAppContext:appContext_ withJavaUtilMap:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceStrings] withRAREActionLink:link withBoolean:NO];
      link = [RAREActionLink getActionLinkWithRAREiWidget:v withSPOTPrintableString:app->resourceStringsURL_ withInt:1];
      if (link != nil) {
        @try {
          id<JavaUtilMap> map = [RAREPlatform loadResourceStringsWithRAREiPlatformAppContext:appContext_ withJavaUtilMap:nil withRAREActionLink:link withBoolean:NO];
          [((id<JavaUtilMap>) nil_chk([appContext_ getResourceStrings])) putAllWithJavaUtilMap:map];
        }
        @catch (JavaLangException *ignore) {
        }
      }
    }
    NSString *value;
    link = [RAREActionLink getActionLinkWithRAREiWidget:v withSPOTPrintableString:app->resourceIconsURL_ withInt:0];
    if (link != nil) {
      BOOL deferred = ![@"false" equalsIgnoreCase:[((SPOTPrintableString *) nil_chk(app->resourceIconsURL_)) spot_getAttributeWithNSString:@"deferred"]];
      (void) [RAREPlatform loadResourceIconsWithRAREiPlatformAppContext:appContext_ withJavaUtilMap:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceIcons] withRAREActionLink:link withBoolean:NO withBoolean:deferred];
      link = [RAREActionLink getActionLinkWithRAREiWidget:v withSPOTPrintableString:app->resourceIconsURL_ withInt:1];
      if (link != nil) {
        @try {
          id<JavaUtilMap> map = [RAREPlatform loadResourceIconsWithRAREiPlatformAppContext:appContext_ withJavaUtilMap:nil withRAREActionLink:link withBoolean:NO withBoolean:deferred];
          [((id<JavaUtilMap>) nil_chk([appContext_ getResourceIcons])) putAllWithJavaUtilMap:map];
        }
        @catch (JavaLangException *ignore) {
        }
      }
    }
    [self registerDefaultActions];
    RAREUIImageIcon *ic = [((id<JavaUtilMap>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceIcons])) getWithId:@"Rare.List.editorCheckedIcon"];
    if (ic == nil) {
      ic = [[RAREUIImageIcon alloc] initWithRAREUIImage:[RAREUIImageHelper createImageWithRAREiPlatformIcon:[[RAREPainterUtils_ListEditorIcon alloc] initWithBoolean:YES]]];
      (void) [((id<JavaUtilMap>) nil_chk([appContext_ getResourceIcons])) putWithId:@"Rare.List.editorCheckedIcon" withId:ic];
    }
    ic = [((id<JavaUtilMap>) nil_chk([appContext_ getResourceIcons])) getWithId:@"Rare.List.editorUncheckedIcon"];
    if (ic == nil) {
      ic = [[RAREUIImageIcon alloc] initWithRAREUIImage:[RAREUIImageHelper createImageWithRAREiPlatformIcon:[[RAREPainterUtils_ListEditorIcon alloc] initWithBoolean:NO]]];
      (void) [((id<JavaUtilMap>) nil_chk([appContext_ getResourceIcons])) putWithId:@"Rare.List.editorUncheckedIcon" withId:ic];
    }
    int len;
    link = [RAREActionLink getActionLinkWithRAREiWidget:v withSPOTPrintableString:app->actionItemsURL_ withInt:0];
    if (link != nil) {
      set = [RAREDataParser loadSPOTSetWithRAREiWidget:[self getRootViewer] withRAREActionLink:link withIOSClass:[IOSClass classWithClass:[RARESPOTActionItem class]]];
      len = (set == nil) ? 0 : [set getCount];
      RARESPOTActionItem *item;
      RAREUIAction *sa;
      for (int i = 0; i < len; i++) {
        item = (RARESPOTActionItem *) check_class_cast([((SPOTSet *) nil_chk(set)) getWithInt:i], [RARESPOTActionItem class]);
        sa = [RAREaUIAction createActionWithRAREiWidget:nil withRARESPOTActionItem:item];
        [self registerActionWithRAREUIAction:sa];
      }
    }
    set = [self resolveSetWithSPOTSet:[app getWidgetHandlers] withIOSClass:[IOSClass classWithClass:[RARESPOTNameValuePair class]]];
    len = (set == nil) ? 0 : [set getCount];
    RARESPOTNameValuePair *pair;
    for (int i = 0; i < len; i++) {
      pair = (RARESPOTNameValuePair *) check_class_cast([((SPOTSet *) nil_chk(set)) getWithInt:i], [RARESPOTNameValuePair class]);
      if ([self okForOSWithISPOTElement:pair]) {
        s = [((RARESPOTNameValuePair *) nil_chk(pair)) getName];
        value = [pair getValue];
        if ((value != nil) && ([value sequenceLength] > 0) && (s != nil) && ([s sequenceLength] > 0)) {
          if ([s indexOf:'.'] == -1) {
            s = [NSString stringWithFormat:@"%@.viewer.%@", [RAREPlatform RARE_PACKAGE_NAME], s];
          }
          cls = [RAREaPlatformHelper loadClassWithNSString:s];
          [self registerWidgetClassWithNSString:value withId:cls];
        }
      }
    }
    set = [self resolveSetWithSPOTSet:[app getCollectionHandlers] withIOSClass:[IOSClass classWithClass:[RARESPOTNameValuePair class]]];
    len = (set == nil) ? 0 : [set getCount];
    for (int i = 0; i < len; i++) {
      pair = (RARESPOTNameValuePair *) check_class_cast([((SPOTSet *) nil_chk(set)) getWithInt:i], [RARESPOTNameValuePair class]);
      s = [((RARESPOTNameValuePair *) nil_chk(pair)) getName];
      value = [pair getValue];
      cls = [RAREaPlatformHelper loadClassWithNSString:value];
      [self registerCollectionHandlerClassWithNSString:s withIOSClass:cls];
    }
    link = [RAREActionLink getActionLinkWithRAREiWidget:v withSPOTPrintableString:app->dataCollectionsURL_ withInt:0];
    if (link != nil) {
      set = [RAREDataParser loadSPOTSetWithRAREiWidget:[self getRootViewer] withRAREActionLink:link withIOSClass:[IOSClass classWithClass:[RARESPOTDataCollection class]]];
    }
    len = (set == nil) ? 0 : [set getCount];
    for (int i = 0; i < len; i++) {
      [self registerDataCollectionWithRAREiDataCollection:[self createDataCollectionWithRARESPOTDataCollection:(RARESPOTDataCollection *) check_class_cast([((SPOTSet *) nil_chk(set)) getWithInt:i], [RARESPOTDataCollection class])]];
    }
  }
  @catch (JavaLangException *ex) {
    if ([ex isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast(ex, [JavaLangRuntimeException class]);
    }
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:ex];
  }
  if ([((SPOTBoolean *) nil_chk(app->dynamicNameLookup_)) spot_valueWasSet]) {
    dynamicNameLookup_ = [app->dynamicNameLookup_ booleanValue];
  }
  s = [((RAREUIProperties *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getUIDefaults])) getStringWithNSString:@"Rare.applicationConnectionHandler"];
  if (s != nil) {
    applicationConnectionHandler_ = (id<RAREiConnectionHandler>) check_protocol_cast([RAREPlatform createObjectWithNSString:s], @protocol(RAREiConnectionHandler));
  }
  [RAREUIFontHelper setDefaultFontWithRAREUIFont:[RAREUIFontHelper getSystemFont]];
}

- (void)createApplicationObjectExWithJavaNetURL:(JavaNetURL *)url
                                        withInt:(int)retries
                                   withNSString:(NSString *)local {
  id<RAREiURLConnection> ic = nil;
  (void) [self setApplicationURLWithJavaNetURL:url];
  @try {
    ic = [self openConnectionWithJavaNetURL:url];
    [((id<RAREiURLConnection>) nil_chk(ic)) open];
    int code = 200;
    do {
      if ([[ic getConnectionObject] isKindOfClass:[JavaNetHttpURLConnection class]]) {
        code = [ic getResponseCode];
        if (code != 401) {
          break;
        }
        [ic dispose];
        if (retries > 2) {
          @throw [[RAREApplicationException alloc] initWithNSString:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.authFailure"]];
        }
        [ic dispose];
        [self handleAuthFailureWithJavaNetURL:url withInt:retries withNSString:local];
        return;
      }
    }
    while (NO);
    if (code != 200) {
      @throw [[RAREApplicationException alloc] initWithNSString:[RAREaPlatformHelper formatWithNSString:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.unknownApplication"] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [RAREJavaURLConnection toExternalFormWithJavaNetURL:[ic getURL]] } count:1 type:[IOSClass classWithClass:[NSObject class]]]] withJavaLangThrowable:[[RAREHTTPException alloc] initWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *) check_class_cast([ic getConnectionObject], [JavaNetHttpURLConnection class])]];
    }
  }
  @catch (JavaLangException *e) {
    ic = nil;
    if (local != nil) {
      @try {
        JavaNetURL *u = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceURLWithNSString:local];
        if (u != nil) {
          ic = [self openConnectionWithJavaNetURL:u];
        }
      }
      @catch (JavaLangException *ex) {
        [self ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
        ic = nil;
      }
    }
    if (ic == nil) {
      @throw [[RAREApplicationException alloc] initWithNSString:[RAREaPlatformHelper formatWithNSString:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.unknownApplication"] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [RAREJavaURLConnection toExternalFormWithJavaNetURL:url] } count:1 type:[IOSClass classWithClass:[NSObject class]]]] withJavaLangThrowable:e];
    }
  }
  BOOL xml = NO;
  BOOL sdf = NO;
  JavaIoReader *stream = nil;
  url = [((id<RAREiURLConnection>) nil_chk(ic)) getURL];
  NSString *file = [((JavaNetURL *) nil_chk(url)) getFile];
  NSString *mime = [ic getContentType];
  if (mime == nil) {
    mime = @"text/x-sdf";
  }
  int n = [((NSString *) nil_chk(mime)) indexOf:';'];
  if (n > 0) {
    mime = [mime substring:0 endIndex:n];
  }
  if ([((NSString *) nil_chk(mime)) hasPrefix:[RAREiConstants XML_MIME_TYPE]]) {
    xml = YES;
  }
  else if ([mime hasPrefix:[RAREiConstants SDF_MIME_TYPE]] || [mime hasPrefix:[RAREiConstants RML_MIME_TYPE]]) {
    sdf = YES;
  }
  else if ([((NSString *) nil_chk(file)) hasSuffix:@".xml"]) {
    xml = YES;
  }
  else if ([file hasSuffix:@".sdf"] || [file hasSuffix:@".rml"]) {
    sdf = YES;
  }
  if (xml || sdf) {
    stream = [ic getReader];
  }
  SPOTSequence *spot = nil;
  (void) [self setApplicationURLWithJavaNetURL:url];
  [self setContextURLWithJavaNetURL:url];
  if (xml) {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"XML format not supported"];
  }
  else if (sdf) {
    spot = (SPOTSequence *) check_class_cast([RAREDataParser loadSPOTObjectSDFWithRAREiWidget:[self getRootViewer] withJavaIoReader:stream withISPOTElement:nil withNSString:mime withJavaNetURL:url], [SPOTSequence class]);
  }
  [ic dispose];
  [self setupApplicationObjectWithJavaNetURL:url withSPOTSequence:spot withNSString:mime];
}

- (void)createCellRenderingDefaults {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<RAREiDataCollection>)createDataCollectionWithRARESPOTDataCollection:(RARESPOTDataCollection *)dc {
  id<RAREiFunctionCallback> cb = [[RAREaRare_$1 alloc] initWithRAREaRare:self];
  if ([((SPOTPrintableString *) nil_chk(((RARESPOTDataCollection *) nil_chk(dc))->handler_)) getValue] == nil) {
    return [RAREDataItemParserHandler createCollectionWithRAREiPlatformAppContext:appContext_ withRARESPOTDataCollection:dc withRAREiFunctionCallback:cb];
  }
  return [((id<RAREiDataCollectionHandler>) nil_chk([self getCollectionHandlerWithNSString:[dc->handler_ getValue]])) createCollectionWithRAREiPlatformAppContext:appContext_ withRARESPOTDataCollection:dc withRAREiFunctionCallback:cb];
}

- (id<RAREiContainer>)createNullViewer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RAREiScriptHandler>)createScriptHandlerWithRARESPOTApplication:(RARESPOTApplication *)app {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNetURL *)createURLWithRAREiWidget:(id<RAREiWidget>)context
                            withNSString:(NSString *)url {
  if ([((NSString *) nil_chk(url)) hasPrefix:[RAREiConstants LIB_PREFIX]]) {
    return [((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getResourceURLWithNSString:[url substring:[RAREiConstants LIB_PREFIX_LENGTH]]];
  }
  else if ([url hasPrefix:[RAREiConstants COLLECTION_PREFIX]]) {
    return [RARECollectionURLConnection createURLWithRAREiWidget:context withNSString:[url substring:[RAREiConstants COLLECTION_PREFIX_LENGTH]]];
  }
  if (urlPrefixesKeys_ != nil) {
    url = [self handlePrefixMappingWithNSString:url];
  }
  if ([((NSString *) nil_chk(url)) hasPrefix:@"/"] && (applicationRoot_ != nil)) {
    url = [NSString stringWithFormat:@"%@%@", applicationRoot_, url];
  }
  JavaNetURL *curl = (context == nil) ? contextURL_ : [((id<RAREiViewer>) nil_chk([context getViewer])) getBaseURL];
  return [[JavaNetURL alloc] initWithJavaNetURL:curl withNSString:url];
}

- (JavaNetURL *)createURLWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)app
                                      withJavaNetURL:(JavaNetURL *)context
                                        withNSString:(NSString *)url {
  if ([((NSString *) nil_chk(url)) hasPrefix:[RAREiConstants LIB_PREFIX]]) {
    return [((id<RAREiPlatformAppContext>) nil_chk(app)) getResourceURLWithNSString:[url substring:[RAREiConstants LIB_PREFIX_LENGTH]]];
  }
  if ([url hasPrefix:[RAREiConstants COLLECTION_PREFIX]]) {
    return [RARECollectionURLConnection createURLWithRAREiWidget:[self getRootViewer] withNSString:[url substring:[RAREiConstants COLLECTION_PREFIX_LENGTH]]];
  }
  if (context == nil) {
    context = self->contextURL_;
  }
  if (urlPrefixesKeys_ != nil) {
    url = [self handlePrefixMappingWithNSString:url];
  }
  if ([((NSString *) nil_chk(url)) hasPrefix:@"/"] && (applicationRoot_ != nil)) {
    url = [NSString stringWithFormat:@"%@%@", applicationRoot_, url];
  }
  return [[JavaNetURL alloc] initWithJavaNetURL:context withNSString:url];
}

- (void)createUserAgentStringWithNSString:(NSString *)platform
                             withNSString:(NSString *)app {
  @try {
    NSString *agent = [NSString stringWithFormat:@"%@/%@", [RAREiConstants APPLICATION_NAME_STRING], [RAREiConstants APPLICATION_VERSION_STRING]];
    agent = [NSString stringWithFormat:@"%@%@", agent, [NSString stringWithFormat:@" (%@", platform]];
    agent = [NSString stringWithFormat:@"%@%@", agent, [NSString stringWithFormat:@"; Locale/%@", [((JavaUtilLocale *) nil_chk([JavaUtilLocale getDefault])) description]]];
    agent = [NSString stringWithFormat:@"%@)", agent];
    if (app != nil) {
      agent = [NSString stringWithFormat:@"%@%@", agent, [NSString stringWithFormat:@" (%@)", app]];
    }
    RAREaRare_RARE_USER_AGENT_ = agent;
    [JavaLangSystem setPropertyWithNSString:@"http.agent" withNSString:agent];
  }
  @catch (JavaLangException *e) {
    [RAREaRare ignoreStartupExceptionWithNSString:@"Cannot set http.agent" withJavaLangThrowable:e];
  }
}

- (id<RAREiCancelableFuture>)executeBackgroundTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  return [RAREaPlatformHelper executeBackgroundTaskWithJavaUtilConcurrentCallable:callable withBoolean:shuttingDown_];
}

- (id<RAREiCancelableFuture>)executeBackgroundTaskWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  return [RAREaPlatformHelper executeBackgroundTaskWithJavaLangRunnable:runnable withBoolean:shuttingDown_];
}

- (id<RAREiCancelableFuture>)executeSwingWorkerTaskWithRAREiWorkerTask:(id<RAREiWorkerTask>)task {
  return [RAREaPlatformHelper executeSwingWorkerTaskWithRAREiWorkerTask:task withBoolean:shuttingDown_];
}

- (void)exit {
  [self exitEx];
}

- (void)exitEx {
  @try {
    if (!shuttingDown_ && [self listenersCanExit]) {
      shuttingDown_ = YES;
      [self stopBackgroundThreads];
      [self fireApplicationExiting];
      if (windowManager_ != nil) {
        [windowManager_ dispose];
        windowManager_ = nil;
      }
      if (widgetClasses_ != nil) {
        [widgetClasses_ clear];
      }
      if (runOnceScripts_ != nil) {
        [runOnceScripts_ clear];
      }
      if (scriptHandler_ != nil) {
        [scriptHandler_ dispose];
      }
      [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) dispose];
    }
  }
  @catch (JavaLangThrowable *e) {
    [RAREPlatform ignoreExceptionWithNSString:@"Shutdown Error" withJavaLangThrowable:e];
  }
  appData_ = nil;
  actionMap_ = nil;
  appContext_ = nil;
  appListeners_ = nil;
  autoHilightPainter_ = nil;
  collectionHandlers_ = nil;
  dataCollections_ = nil;
  defaultDateContext_ = nil;
  defaultDateTimeContext_ = nil;
  defaultRootViewer_ = nil;
  defaultTimeContext_ = nil;
  exceptionHandler_ = nil;
  appContext_ = nil;
  info_ = nil;
  listItemFocusPainter_ = nil;
  multipartMimeHandler_ = nil;
  sageApplication_ = nil;
  scriptHandler_ = nil;
  windowManager_ = nil;
  printHandler_ = nil;
}

- (void)fireApplicationDidInit {
  if (appListeners_ != nil) {
    for (id<RAREiApplicationListener> __strong listener in appListeners_) {
      [((id<RAREiApplicationListener>) nil_chk(listener)) applicationInitializedWithRAREiPlatformAppContext:appContext_];
    }
  }
}

- (void)fireApplicationExiting {
  if (appListeners_ != nil) {
    for (id<RAREiApplicationListener> __strong listener in appListeners_) {
      [((id<RAREiApplicationListener>) nil_chk(listener)) applicationClosingWithRAREiPlatformAppContext:appContext_];
    }
  }
}

- (void)handleAuthFailureWithJavaNetURL:(JavaNetURL *)url
                                withInt:(int)retries
                           withNSString:(NSString *)local {
  @throw [[RAREApplicationException alloc] initWithNSString:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.authFailure"]];
}

- (id<RAREiURLConnection>)handleIfFileOrLibURLWithJavaNetURL:(JavaNetURL *)url
                                                withNSString:(NSString *)mimeType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addPrefixMappingWithNSString:(NSString *)prefix
                        withNSString:(NSString *)value {
  if (urlPrefixesKeys_ == nil) {
    urlPrefixesKeys_ = [IOSObjectArray arrayWithObjects:(id[]){ prefix } count:1 type:[IOSClass classWithClass:[NSString class]]];
    urlPrefixesValues_ = [IOSObjectArray arrayWithObjects:(id[]){ value } count:1 type:[IOSClass classWithClass:[NSString class]]];
  }
  else {
    IOSObjectArray *a = [IOSObjectArray arrayWithLength:(int) [urlPrefixesKeys_ count] + 1 type:[IOSClass classWithClass:[NSString class]]];
    [JavaLangSystem arraycopyWithId:urlPrefixesKeys_ withInt:0 withId:a withInt:0 withInt:(int) [urlPrefixesKeys_ count]];
    urlPrefixesKeys_ = a;
    a = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(urlPrefixesValues_)) count] + 1 type:[IOSClass classWithClass:[NSString class]]];
    [JavaLangSystem arraycopyWithId:urlPrefixesValues_ withInt:0 withId:a withInt:0 withInt:(int) [urlPrefixesValues_ count]];
    urlPrefixesValues_ = a;
    (void) IOSObjectArray_Set(urlPrefixesKeys_, (int) [urlPrefixesKeys_ count] - 1, prefix);
    (void) IOSObjectArray_Set(urlPrefixesValues_, (int) [urlPrefixesValues_ count] - 1, value);
  }
}

- (NSString *)handlePrefixMappingWithNSString:(NSString *)path {
  if (urlPrefixesKeys_ != nil) {
    int len = (int) [urlPrefixesKeys_ count];
    IOSObjectArray *a = urlPrefixesKeys_;
    for (int i = 0; i < len; i++) {
      NSString *s = IOSObjectArray_Get(a, i);
      if ([((NSString *) nil_chk(path)) hasPrefix:s]) {
        path = [NSString stringWithFormat:@"%@%@", IOSObjectArray_Get(nil_chk(urlPrefixesValues_), i), [path substring:[((NSString *) nil_chk(s)) sequenceLength]]];
        break;
      }
    }
  }
  return path;
}

- (BOOL)ignoreFormatExceptions {
  return ignoreFormatExceptions__;
}

+ (void)ignoreStartupExceptionWithNSString:(NSString *)msg
                     withJavaLangThrowable:(JavaLangThrowable *)e {
  if (RAREaRare_debugEnabled_) {
    if (msg != nil) {
      [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithNSString:msg];
    }
    if (e != nil) {
      [e printStackTraceWithJavaIoPrintStream:[JavaLangSystem err]];
    }
  }
}

- (void)initApplicationWithRARESPOTApplication:(RARESPOTApplication *)app {
  NSString *s = [((SPOTPrintableString *) nil_chk(((RARESPOTApplication *) nil_chk(app))->applicationRoot_)) getValue];
  if (s != nil) {
    s = [s trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] > 0) {
      if ([s isEqual:@"."]) {
        s = contextURLBaseString_;
      }
      else if ([s isEqual:@".."]) {
        s = [((JavaNetURL *) nil_chk(contextURL_)) getFile];
        int n = [((NSString *) nil_chk(s)) lastIndexOf:'/'];
        if (n != -1) {
          int p = [s lastIndexOf:'/' fromIndex:n - 1];
          if (p != -1) {
            s = [s substring:0 endIndex:p];
          }
        }
      }
      s = [((NSString *) nil_chk(s)) replace:@" " withSequence:@"%20"];
      applicationRoot_ = s;
    }
  }
}

- (void)initialize__ {
  applicationName_ = @"Rare Application";
  RAREaRare_osType_ = [RAREPlatform getOsType];
  [self registerDefaultViewers];
  int max = [RAREUTSNumber intValueWithNSString:[RAREPlatform getPropertyWithNSString:@"rare.maxThreads" withNSString:[RAREPlatform getPropertyWithNSString:@"jnlp.rare.maxThreads" withNSString:@"2"]]];
  if (max < 0) {
    max = 1;
  }
  else if (max > 30) {
    max = 30;
  }
  int imageMax = 0;
  if ([self isImageLoaderUsefull]) {
    imageMax = [RAREUTSNumber intValueWithNSString:[RAREPlatform getPropertyWithNSString:@"rare.imageLoaderThreads" withNSString:[RAREPlatform getPropertyWithNSString:@"jnlp.rare.imageLoaderThreads" withNSString:@"2"]]];
  }
  [RAREaPlatformHelper initializeThreadingServiceWithInt:max withInt:imageMax];
}

- (BOOL)listenersCanExit {
  if (appListeners_ != nil) {
    for (id<RAREiApplicationListener> __strong listener in appListeners_) {
      if (![((id<RAREiApplicationListener>) nil_chk(listener)) allowClosingWithRAREiPlatformAppContext:appContext_]) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSString *)loadScriptCodeWithRAREActionLink:(RAREActionLink *)link
                                   withBoolean:(BOOL)runOnce {
  NSString *code = nil;
  @try {
    if ([((RAREActionLink *) nil_chk(link)) isInlineURL]) {
      code = [link getContentAsString];
      if (runOnce && (code != nil)) {
        NSString *s = [RAREFunctions sha1WithNSString:code];
        if ((s != nil) && [((JavaUtilHashMap *) nil_chk(runOnceScripts_)) containsKeyWithId:s]) {
          code = nil;
        }
        else if (runOnce) {
          (void) [((JavaUtilHashMap *) nil_chk(runOnceScripts_)) putWithId:s withId:[JavaLangLong valueOfWithLong:1]];
        }
      }
    }
    else {
      JavaNetURL *url = [link getURLWithRAREiWidget:[self getRootViewer]];
      if (url != nil) {
        NSString *s = [url toExternalForm];
        JavaLangLong *date = [((JavaUtilHashMap *) nil_chk(runOnceScripts_)) getWithId:s];
        (void) [link getContentType];
        JavaLangLong *nd = [JavaLangLong valueOfWithLong:[((id<RAREiURLConnection>) nil_chk([link getConnection])) getLastModified]];
        if ((date == nil) || ![nd isEqual:date]) {
          code = [link getContentAsString];
          if (runOnce) {
            (void) [runOnceScripts_ putWithId:s withId:nd];
          }
        }
      }
    }
  }
  @catch (JavaIoIOException *ex) {
    @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:ex];
  }
  @finally {
    [((RAREActionLink *) nil_chk(link)) close];
  }
  if ((code != nil) && ([code sequenceLength] > 0)) {
    return code;
  }
  return nil;
}

- (void)loadWidgetHandlersWithJavaUtilMap:(id<JavaUtilMap>)map {
  @try {
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) iterator];
    id<JavaUtilMap_Entry> e;
    NSString *s;
    NSString *value;
    IOSClass *cls;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      e = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
      s = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]);
      value = (NSString *) check_class_cast([e getValue], [NSString class]);
      if ((value != nil) && ([value sequenceLength] > 0) && (s != nil) && ([s sequenceLength] > 0)) {
        if ([s indexOf:'.'] == -1) {
          s = [NSString stringWithFormat:@"%@.viewer.%@", [RAREPlatform RARE_PACKAGE_NAME], s];
        }
        cls = [RAREaPlatformHelper loadClassWithNSString:s];
        [self registerWidgetClassWithNSString:value withId:cls];
      }
    }
  }
  @catch (JavaLangException *ex) {
    if ([ex isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast(ex, [JavaLangRuntimeException class]);
    }
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:ex];
  }
}

- (BOOL)okForOSWithISPOTElement:(id<iSPOTElement>)e {
  return [self okForOSWithNSString:[((id<iSPOTElement>) nil_chk(e)) spot_getAttributeWithNSString:@"os"] withRAREUTCharScanner:nil];
}

- (BOOL)okForOSWithNSString:(NSString *)os
      withRAREUTCharScanner:(RAREUTCharScanner *)sc {
  if ((os == nil) || ([os sequenceLength] == 0)) {
    return YES;
  }
  id<JavaUtilList> oses = nil;
  int n = [((NSString *) nil_chk(os)) indexOf:','];
  if (n == -1) {
    n = [os indexOf:'-'];
    if (n == -1) {
      if ([os hasPrefix:@"not_"]) {
        return ![self isOSThingEqualsWithNSString:os withNSString:[os substring:4]];
      }
      else {
        return [self isOSThingEqualsWithNSString:os withNSString:os];
      }
    }
    oses = [JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ os } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    if (sc == nil) {
      sc = [[RAREUTCharScanner alloc] init];
    }
  }
  else {
    if (sc == nil) {
      sc = [[RAREUTCharScanner alloc] initWithNSString:os];
    }
    else {
      [sc resetWithNSString:os];
    }
    oses = [((RAREUTCharScanner *) nil_chk(sc)) getTokensWithChar:',' withBoolean:YES];
  }
  NSString *ss;
  for (NSString * __strong s in nil_chk(oses)) {
    [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:s];
    while ((ss = [sc nextTokenWithChar:'-' withBoolean:YES]) != nil) {
      if ([((NSString *) nil_chk(ss)) hasPrefix:@"not_"]) {
        if ([self isOSThingEqualsWithNSString:s withNSString:[ss substring:4]]) {
          return NO;
        }
      }
      else {
        if ([self isOSThingEqualsWithNSString:s withNSString:ss]) {
          return YES;
        }
      }
    }
  }
  return NO;
}

- (void)promptForURLWithRAREaRare_StartupInfo:(RAREaRare_StartupInfo *)info
                                 withNSString:(NSString *)url {
  @try {
    NSString *prompt = [((JavaUtilResourceBundle *) nil_chk([self getResourceBundle])) getStringWithNSString:@"Rare.runtime.text.urlSelectionPrompt"];
    NSString *title = [((JavaUtilResourceBundle *) nil_chk([self getResourceBundle])) getStringWithNSString:@"Rare.runtime.text.urlSelectionTitle"];
    RAREAlertPanel *d = [RAREAlertPanel promptWithRAREiWidget:[RAREPlatform getContextRootViewer] withNSString:title withNSString:prompt withId:url withRAREiPlatformIcon:nil];
    [((RAREAlertPanel *) nil_chk(d)) showDialogWithRAREiFunctionCallback:[[RAREaRare_$2 alloc] initWithRAREaRare:self withRAREaRare_StartupInfo:info]];
  }
  @catch (JavaLangThrowable *e) {
  }
}

- (void)registerActionWithRAREUIAction:(RAREUIAction *)a {
  NSString *name = [((RAREUIAction *) nil_chk(a)) getActionName];
  if ((name != nil) && ([name sequenceLength] > 0)) {
    if (actionMap_ == nil) {
      actionMap_ = [[JavaUtilHashMap alloc] init];
    }
    (void) [((JavaUtilHashMap *) nil_chk(actionMap_)) putWithId:name withId:a];
    if ([a isKindOfClass:[RAREaFocusedAction class]]) {
      [self registerFocusedActionWithRAREaFocusedAction:(RAREaFocusedAction *) check_class_cast(a, [RAREaFocusedAction class])];
    }
  }
}

- (void)registerCollectionHandlerWithNSString:(NSString *)name
               withRAREiDataCollectionHandler:(id<RAREiDataCollectionHandler>)ch {
  if (collectionHandlers_ == nil) {
    collectionHandlers_ = [[JavaUtilHashMap alloc] init];
  }
  (void) [((JavaUtilHashMap *) nil_chk(collectionHandlers_)) putWithId:name withId:ch];
}

- (void)registerCollectionHandlerClassWithNSString:(NSString *)name
                                      withIOSClass:(IOSClass *)cls {
  if (collectionHandlers_ == nil) {
    collectionHandlers_ = [[JavaUtilHashMap alloc] init];
  }
  (void) [((JavaUtilHashMap *) nil_chk(collectionHandlers_)) putWithId:name withId:cls];
}

- (void)registerDataCollectionWithRAREiDataCollection:(id<RAREiDataCollection>)dc {
  if ((dc != nil) && ([dc getCollectionName] != nil)) {
    if (dataCollections_ == nil) {
      dataCollections_ = [[JavaUtilHashMap alloc] init];
    }
    (void) [((JavaUtilHashMap *) nil_chk(dataCollections_)) putWithId:[dc getCollectionName] withId:dc];
  }
}

- (void)registerDefaultActions {
  RAREUIAction *a;
  NSString *s;
  a = [RAREActionHelper getCutAction];
  s = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.action.cut"];
  [((RAREUIAction *) nil_chk(a)) setActionTextWithJavaLangCharSequence:s];
  [a setIconWithRAREiPlatformIcon:[appContext_ getResourceAsIconWithNSString:@"Rare.icon.cut"]];
  [a setEnabledWithBoolean:NO];
  [self registerActionWithRAREUIAction:a];
  a = [RAREActionHelper getCopyAction];
  s = [appContext_ getResourceAsStringWithNSString:@"Rare.action.copy"];
  [((RAREUIAction *) nil_chk(a)) setActionTextWithJavaLangCharSequence:s];
  [a setIconWithRAREiPlatformIcon:[appContext_ getResourceAsIconWithNSString:@"Rare.icon.copy"]];
  [a setEnabledWithBoolean:NO];
  [self registerActionWithRAREUIAction:a];
  a = [RAREActionHelper getPasteAction];
  s = [appContext_ getResourceAsStringWithNSString:@"Rare.action.paste"];
  [((RAREUIAction *) nil_chk(a)) setActionTextWithJavaLangCharSequence:s];
  [a setIconWithRAREiPlatformIcon:[appContext_ getResourceAsIconWithNSString:@"Rare.icon.paste"]];
  [a setEnabledWithBoolean:NO];
  [self registerActionWithRAREUIAction:a];
  a = [RAREActionHelper getDeleteAction];
  s = [appContext_ getResourceAsStringWithNSString:@"Rare.action.delete"];
  [((RAREUIAction *) nil_chk(a)) setActionTextWithJavaLangCharSequence:s];
  [a setIconWithRAREiPlatformIcon:[appContext_ getResourceAsIconWithNSString:@"Rare.icon.delete"]];
  [a setEnabledWithBoolean:NO];
  [self registerActionWithRAREUIAction:a];
  a = [RAREActionHelper getSelectAllAction];
  s = [appContext_ getResourceAsStringWithNSString:@"Rare.action.selectAll"];
  [((RAREUIAction *) nil_chk(a)) setActionTextWithJavaLangCharSequence:s];
  [a setIconWithRAREiPlatformIcon:[appContext_ getResourceAsIconWithNSString:@"Rare.icon.empty"]];
  [a setEnabledWithBoolean:NO];
  [self registerActionWithRAREUIAction:a];
  a = [RAREActionHelper getUndoAction];
  s = [appContext_ getResourceAsStringWithNSString:@"Rare.action.undo"];
  [((RAREUIAction *) nil_chk(a)) setActionTextWithJavaLangCharSequence:s];
  [a setIconWithRAREiPlatformIcon:[appContext_ getResourceAsIconWithNSString:@"Rare.icon.undo"]];
  [a setEnabledWithBoolean:NO];
  [self registerActionWithRAREUIAction:a];
  a = [RAREActionHelper getRedoAction];
  s = [appContext_ getResourceAsStringWithNSString:@"Rare.action.redo"];
  [((RAREUIAction *) nil_chk(a)) setActionTextWithJavaLangCharSequence:s];
  [a setIconWithRAREiPlatformIcon:[appContext_ getResourceAsIconWithNSString:@"Rare.icon.redo"]];
  [a setEnabledWithBoolean:NO];
  [self registerActionWithRAREUIAction:a];
}

- (void)registerDefaultViewers {
  NSString *name;
  NSString *viewerPrefix = [NSString stringWithFormat:@"%@.", [((JavaLangPackage *) nil_chk([[IOSClass classWithClass:[RAREaViewer class]] getPackage])) getName]];
  NSString *widgetPrefix = [NSString stringWithFormat:@"%@.", [((JavaLangPackage *) nil_chk([[IOSClass classWithClass:[RAREaWidget class]] getPackage])) getName]];
  [self registerWidgetClassWithNSString:[RAREiConstants HTML_MIME_TYPE] withId:[IOSClass classWithClass:[RAREWebBrowser class]]];
  [self registerWidgetClassWithNSString:[RAREiConstants TEXT_MIME_TYPE] withId:[IOSClass classWithClass:[RAREWebBrowser class]]];
  [self registerWidgetClassWithNSString:[RAREiConstants RICHTEXT_MIME_TYPE] withId:[IOSClass classWithClass:[RAREWebBrowser class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTGridPane class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREGridPaneViewer class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTForm class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREFormViewer class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTWidgetPane class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREWidgetPaneViewer class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTImagePane class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREImagePaneViewer class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTMenuBar class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREMenuBarViewer class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTToolBar class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREToolBarViewer class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTStackPane class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREStackPaneViewer class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTBrowser class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREWebBrowser class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTPushButton class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREPushButtonWidget class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTLabel class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RARELabelWidget class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTListBox class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREListBoxViewer class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTTextField class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RARETextFieldWidget class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTTextArea class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RARETextAreaWidget class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTPasswordField class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RARETextFieldWidget class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTFileUploadField class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RARETextFieldWidget class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTCheckBox class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RARECheckBoxWidget class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTRadioButton class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RARERadioButtonWidget class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTGroupBox class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREGroupBoxViewer class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTLine class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RARELineWidget class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTBean class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RAREBeanWidget class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTCheckBoxList class]]];
  [self registerWidgetClassWithNSString:name withId:[IOSClass classWithClass:[RARECheckBoxListViewer class]]];
  [self registerWidgetClassWithNSString:[RAREiConstants JPEG_MIME_TYPE] withId:[IOSClass classWithClass:[RAREImagePaneViewer class]]];
  [self registerWidgetClassWithNSString:[RAREiConstants GIF_MIME_TYPE] withId:[IOSClass classWithClass:[RAREImagePaneViewer class]]];
  [self registerWidgetClassWithNSString:[RAREiConstants PNG_MIME_TYPE] withId:[IOSClass classWithClass:[RAREImagePaneViewer class]]];
  [self registerWidgetClassWithNSString:[RAREiConstants SVG_MIME_TYPE] withId:[IOSClass classWithClass:[RAREImagePaneViewer class]]];
  [self registerWidgetClassWithNSString:[RAREiConstants SVGXML_MIME_TYPE] withId:[IOSClass classWithClass:[RAREImagePaneViewer class]]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTTable class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@TableViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTTreeTable class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@TableViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTPropertyTable class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@TableViewer", viewerPrefix]];
  [self registerWidgetClassWithNSString:[RAREiConstants CSV_MIME_TYPE] withId:[NSString stringWithFormat:@"%@TableViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTSplitPane class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@SplitPaneViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTTabPane class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@TabPaneViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTTree class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@TreeViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTCarousel class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@CarouselViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTCanvas class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@CanvasViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTStatusBar class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@StatusBarViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTChart class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@ChartViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTDocumentPane class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@DocumentPaneViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTCollapsiblePane class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@CollapsiblePaneViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTCheckBoxTree class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@CheckBoxTreeViewer", viewerPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTSlider class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@SliderWidget", widgetPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTProgressBar class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@ProgressBarWidget", widgetPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTSpinner class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@SpinnerWidget", widgetPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTNumberSpinner class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@SpinnerWidget", widgetPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTDateSpinner class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@SpinnerWidget", widgetPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTDateTimeSpinner class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@SpinnerWidget", widgetPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTTimeSpinner class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@SpinnerWidget", widgetPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTComboBox class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@ComboBoxWidget", widgetPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTDateChooser class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@DateChooserWidget", widgetPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTColorChooser class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@ColorChooserWidget", widgetPrefix]];
  name = [RAREPlatform getSPOTNameWithIOSClass:[IOSClass classWithClass:[RARESPOTNavigator class]]];
  [self registerWidgetClassWithNSString:name withId:[NSString stringWithFormat:@"%@NavigatorWidget", widgetPrefix]];
}

- (void)registerFocusedActionWithRAREaFocusedAction:(RAREaFocusedAction *)action {
  if (focusedActions_ == nil) {
    focusedActions_ = [[JavaUtilArrayList alloc] initWithInt:1];
  }
  [((JavaUtilArrayList *) nil_chk(focusedActions_)) addWithId:[RAREaPlatformHelper createWeakReferenceWithId:action]];
}

- (void)registerJARsWithSPOTSet:(SPOTSet *)set {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)registerWidgetClassWithNSString:(NSString *)type
                                 withId:(id)cls {
  if ([((NSString *) nil_chk(type)) indexOf:','] == -1) {
    (void) [((JavaUtilHashMap *) nil_chk(widgetClasses_)) putWithId:type withId:cls];
    return;
  }
  id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:type withChar:',' withBoolean:YES];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  for (int i = 0; i < len; i++) {
    (void) [((JavaUtilHashMap *) nil_chk(widgetClasses_)) putWithId:[list getWithInt:i] withId:cls];
  }
}

- (void)resetRunOnceWithRAREActionLink:(RAREActionLink *)link {
  NSString *code = nil;
  @try {
    if ([((RAREActionLink *) nil_chk(link)) isInlineURL]) {
      code = [link getContentAsString];
      if (code != nil) {
        NSString *s = [RAREFunctions sha1WithNSString:code];
        if (s != nil) {
          (void) [((JavaUtilHashMap *) nil_chk(runOnceScripts_)) removeWithId:s];
        }
      }
    }
    else {
      JavaNetURL *url = [link getURLWithRAREiWidget:[self getRootViewer]];
      if (url != nil) {
        NSString *s = [url toExternalForm];
        (void) [((JavaUtilHashMap *) nil_chk(runOnceScripts_)) removeWithId:s];
      }
    }
  }
  @catch (JavaIoIOException *ex) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:ex];
  }
  @finally {
    [((RAREActionLink *) nil_chk(link)) close];
  }
}

- (JavaNetURL *)resolveApplicationURLWithNSString:(NSString *)s {
  if (s != nil) {
    if ([s hasPrefix:[RAREiConstants LIB_PREFIX]]) {
      return [((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getResourceURLWithNSString:[s substring:[RAREiConstants LIB_PREFIX_LENGTH]]];
    }
    else {
      return [[JavaNetURL alloc] initWithNSString:s];
    }
  }
  return nil;
}

- (SPOTSet *)resolveSetWithSPOTSet:(SPOTSet *)set
                      withIOSClass:(IOSClass *)cls {
  return [RAREDataParser resolveSetWithRAREiWidget:[self getRootViewer] withSPOTSet:set withIOSClass:cls];
}

- (void)setupApplicationObjectWithJavaNetURL:(JavaNetURL *)url
                            withSPOTSequence:(SPOTSequence *)seq
                                withNSString:(NSString *)mime {
  [self setContextURLWithJavaNetURL:url];
  if ([seq isKindOfClass:[RARESPOTApplication class]]) {
    sageApplication_ = (RARESPOTApplication *) check_class_cast(seq, [RARESPOTApplication class]);
    if ([((SPOTPrintableString *) nil_chk(((RARESPOTApplication *) nil_chk(sageApplication_))->contextURL_)) spot_hasValue]) {
      NSString *s = [sageApplication_->contextURL_ spot_getAttributeWithNSString:@"redirect"];
      if ([@"true" equalsIgnoreCase:s]) {
        JavaNetURL *u = [[JavaNetURL alloc] initWithJavaNetURL:url withNSString:[sageApplication_->contextURL_ getValue]];
        if (![u isEqual:url]) {
          [self createApplicationObjectWithJavaNetURLArray:[IOSObjectArray arrayWithObjects:(id[]){ u } count:1 type:[IOSClass classWithClass:[JavaNetURL class]]] withNSString:(NSString *) check_class_cast(nil, [NSString class])];
          return;
        }
      }
    }
  }
  else if ([seq isKindOfClass:[RARESPOTWidget class]]) {
    sageApplication_ = [[RARESPOTApplication alloc] init];
    [((SPOTAny *) nil_chk(((RARESPOTMainWindow *) nil_chk([sageApplication_ getMainWindowReference]))->viewer_)) setValueWithISPOTElement:seq];
    [((RARESPOTMainWindow *) nil_chk([sageApplication_ getMainWindowReference]))->title_ setValueWithNSString:[((SPOTPrintableString *) nil_chk(((RARESPOTWidget *) nil_chk(seq))->title_)) stringValue]];
  }
  else if ([seq isKindOfClass:[RARESPOTMainWindow class]]) {
    sageApplication_ = [[RARESPOTApplication alloc] init];
    [((RARESPOTMainWindow *) nil_chk([sageApplication_ getMainWindowReference])) spot_copyWithISPOTElement:seq];
  }
  [self handleConfigurationURLsWithRARESPOTApplication:sageApplication_];
  [self setupOsSpecificInfoWithRARESPOTApplication:sageApplication_ withJavaNetURL:url withNSString:mime];
}

- (void)setupAutoHilightPainterWithRARESPOTGridCell:(RARESPOTGridCell *)gc {
  if (gc != nil) {
    autoHilightPainter_ = [RAREColorUtils configureWithRAREiWidget:[self getRootViewer] withRARESPOTGridCell:gc withRAREPaintBucket:nil];
  }
  else {
    RAREPaintBucket *pb = (RAREPaintBucket *) check_class_cast([((RAREPaintBucket *) nil_chk(selectionPainter_)) clone], [RAREPaintBucket class]);
    if ([((RAREPaintBucket *) nil_chk(pb)) getBackgroundColor] != nil) {
      [pb setBackgroundColorWithRAREUIColor:[((RAREUIColor *) nil_chk([pb getBackgroundColor])) alphaWithInt:25]];
      if ([pb getBackgroundPainter] != nil) {
        [pb setBackgroundPainterWithRAREiBackgroundPainter:[((id<RAREiBackgroundPainter>) nil_chk([pb getBackgroundPainter])) alphaWithInt:25]];
      }
    }
    autoHilightPainter_ = pb;
  }
}

- (void)setupLostFocusSelectionPainterWithRARESPOTGridCell:(RARESPOTGridCell *)gc {
  if ((gc != nil) && [self okForOSWithISPOTElement:gc]) {
    lostFocusSelectionPainter_ = [RAREColorUtils configureWithRAREiWidget:[self getRootViewer] withRARESPOTGridCell:gc withRAREPaintBucket:nil];
  }
}

- (void)setupOsSpecificInfoWithRARESPOTApplication:(RARESPOTApplication *)app
                                    withJavaNetURL:(JavaNetURL *)url
                                      withNSString:(NSString *)mime {
}

- (void)setupSelectionPainterWithRARESPOTGridCell:(RARESPOTGridCell *)gc {
  if (gc != nil) {
    selectionPainter_ = [RAREColorUtils configureWithRAREiWidget:[self getRootViewer] withRARESPOTGridCell:gc withRAREPaintBucket:nil];
  }
  else {
    selectionPainter_ = [[RAREaRare_SelectionPainter alloc] initWithBoolean:NO];
  }
}

- (void)setupUrlPrefixes {
  NSString *s = [((RAREUIProperties *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getUIDefaults])) getStringWithNSString:@"Rare.urlPrefixes"];
  if (s == nil) {
    return;
  }
  id<JavaUtilMap> map = [RAREUTCharScanner parseOptionStringExWithNSString:s withChar:','];
  urlPrefixesKeys_ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[map size] type:[IOSClass classWithClass:[NSString class]]]];
  urlPrefixesValues_ = [((id<JavaUtilCollection>) nil_chk([map values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[map size] type:[IOSClass classWithClass:[NSString class]]]];
}

- (void)showErrorDialogWithJavaLangThrowable:(JavaLangThrowable *)e
                                 withBoolean:(BOOL)abort {
  [RAREWaitCursorHandler stopWaitCursorWithRAREiPlatformComponent:nil withBoolean:YES];
  RAREErrorInformation *ei;
  if ((scriptHandler_ != nil) && (appContext_ != nil)) {
    ei = [scriptHandler_ getErrorInformationWithRAREiPlatformAppContext:appContext_ withId:e];
  }
  else {
    ei = [[RAREErrorInformation alloc] initWithJavaLangThrowable:e];
  }
  if (abort) {
    [RAREAlertPanel showErrorDialogWithRAREErrorInformation:ei withRAREiFunctionCallback:[[RAREaRare_$3 alloc] initWithRAREaRare:self]];
  }
  else {
    [RAREAlertPanel showErrorDialogWithRAREErrorInformation:ei];
  }
}

- (void)showStartupErrorWithNSString:(NSString *)url
               withJavaLangThrowable:(JavaLangThrowable *)e
                         withBoolean:(BOOL)fatal {
  @try {
    [RAREWaitCursorHandler stopWaitCursorWithRAREiPlatformComponent:nil withBoolean:YES];
    NSString *msg = url;
    NSString *title = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:fatal ? @"fatalError" : @"loadError"];
    if ((msg != nil) && (e != nil)) {
      msg = [NSString stringWithFormat:@"%@\x0d\nURL:%@", [RAREApplicationException getMessageExWithJavaLangThrowable:e], msg];
    }
    else if (e != nil) {
      msg = [RAREApplicationException getMessageExWithJavaLangThrowable:e];
    }
    RAREErrorInformation *ei = [[RAREErrorInformation alloc] initWithId:e withNSString:title withNSString:msg];
    [RAREAlertPanel showErrorDialogWithRAREErrorInformation:ei withRAREiFunctionCallback:[[RAREaRare_$4 alloc] initWithRAREaRare:self withBoolean:fatal withNSString:url]];
  }
  @catch (JavaLangThrowable *ex) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
  }
}

- (void)start {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)stopBackgroundThreads {
  [RAREaPlatformHelper stopBackgroundThreads];
}

- (void)tryAgainWithRAREaRare_StartupInfo:(RAREaRare_StartupInfo *)info
                             withNSString:(NSString *)file {
  ((RAREaRare_StartupInfo *) nil_chk(info))->applicationFile_ = file;
  JavaNetURL *url = nil;
  @try {
    url = [self resolveApplicationURLWithNSString:info->applicationFile_];
    [self createApplicationObjectWithJavaNetURLArray:[IOSObjectArray arrayWithObjects:(id[]){ url } count:1 type:[IOSClass classWithClass:[JavaNetURL class]]] withNSString:info->local_];
  }
  @catch (JavaLangException *e) {
    [self showStartupErrorWithNSString:file withJavaLangThrowable:e withBoolean:NO];
    return;
  }
  [self start];
}

- (void)uiPropertiesLoaded {
  id<RAREiWidgetCustomizer> wc = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getWidgetCustomizer];
  if (wc == nil) {
    @try {
      NSString *s = (NSString *) check_class_cast([((RAREUIProperties *) nil_chk([appContext_ getUIDefaults])) getWithNSString:@"Rare.WidgetCustomizer"], [NSString class]);
      if ((s != nil) && ([s sequenceLength] > 0)) {
        [appContext_ setWidgetCustomizerWithRAREiWidgetCustomizer:(id<RAREiWidgetCustomizer>) check_protocol_cast([RAREPlatform createObjectWithNSString:s], @protocol(RAREiWidgetCustomizer))];
      }
    }
    @catch (JavaLangException *e) {
      [RAREPlatform ignoreExceptionWithNSString:@"trying to load iWidgetCustomizer" withJavaLangThrowable:e];
    }
  }
}

- (void)unregisterDataCollectionWithRAREiDataCollection:(id<RAREiDataCollection>)dc {
  if ((dc != nil) && (dataCollections_ != nil) && ([dc getCollectionName] != nil)) {
    (void) [dataCollections_ removeWithId:[dc getCollectionName]];
  }
}

- (JavaNetURL *)setApplicationURLWithJavaNetURL:(JavaNetURL *)url {
  applicationURL_ = url;
  NSString *info = [((JavaNetURL *) nil_chk(url)) getUserInfo];
  if (info != nil) {
    @try {
      url = [[JavaNetURL alloc] initWithNSString:[url getProtocol] withNSString:[url getHost] withInt:[url getPort] withNSString:[url getFile]];
    }
    @catch (JavaNetMalformedURLException *ignore) {
    }
    userInfo_ = [[JavaUtilLinkedHashMap alloc] init];
    (void) [userInfo_ putWithId:[RAREJavaURLConnection parenToExternalFormWithJavaNetURL:url] withId:info];
  }
  return url;
}

- (void)setContextURLWithJavaNetURL:(JavaNetURL *)url {
  contextURL_ = url;
  if ([self getRootViewer] != nil) {
    [((id<RAREiContainer>) nil_chk([self getRootViewer])) setContextURLWithJavaNetURL:url];
  }
  if ([self getWindowManager] != nil) {
    [((id<RAREiPlatformWindowManager>) nil_chk([self getWindowManager])) setContextURLWithJavaNetURL:url];
  }
  contextURLBaseString_ = [RAREJavaURLConnection toExternalFormWithJavaNetURL:url];
  int n = [((NSString *) nil_chk(contextURLBaseString_)) lastIndexOf:'/'];
  if (n != -1) {
    contextURLBaseString_ = [contextURLBaseString_ substring:0 endIndex:n];
  }
  if (applicationRoot_ == nil) {
    applicationRoot_ = contextURLBaseString_;
  }
}

- (void)setDefaultExceptionHandlerWithRAREiExceptionHandler:(id<RAREiExceptionHandler>)eh {
  exceptionHandler_ = eh;
}

- (RAREUIAction *)getActionWithNSString:(NSString *)name {
  return (actionMap_ == nil) ? nil : [actionMap_ getWithId:name];
}

- (JavaNetURL *)getApplicationURL {
  return applicationURL_;
}

- (id<RAREiDataCollectionHandler>)getCollectionHandlerWithNSString:(NSString *)name {
  id o = nil;
  if ((name != nil) && (collectionHandlers_ != nil)) {
    o = [collectionHandlers_ getWithId:name];
  }
  if ((o == nil) && ([((NSString *) nil_chk(name)) indexOf:'.'] != -1)) {
    @try {
      o = [RAREaPlatformHelper loadClassWithNSString:name];
    }
    @catch (JavaLangThrowable *e) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    }
  }
  if ([o isKindOfClass:[IOSClass class]]) {
    if ([((IOSClass *) check_class_cast(o, [IOSClass class])) isAssignableFrom:[IOSClass classWithProtocol:@protocol(RAREiDataCollectionHandler)]]) {
      @try {
        o = [((IOSClass *) check_class_cast(o, [IOSClass class])) newInstance];
        (void) [((JavaUtilHashMap *) nil_chk(collectionHandlers_)) putWithId:name withId:o];
      }
      @catch (JavaLangException *ex) {
        o = nil;
      }
    }
  }
  if (o == nil) {
    @throw [[RAREApplicationException alloc] initWithNSString:[RAREUTHelper expandStringWithNSString:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.noSuchCollectionHandler"] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:[IOSClass classWithClass:[NSString class]]]]];
  }
  return (id<RAREiDataCollectionHandler>) check_protocol_cast(o, @protocol(RAREiDataCollectionHandler));
}

- (id<RAREiExceptionHandler>)getDefaultExceptionHandler {
  return (exceptionHandler_ == nil) ? self : ((id) exceptionHandler_);
}

- (NSString *)getOSType {
  return RAREaRare_osType_;
}

- (id<RAREiContainer>)getRootViewer {
  id<RAREiContainer> rv = (windowManager_ == nil) ? nil : [windowManager_ getRootViewer];
  if (rv == nil) {
    if (defaultRootViewer_ == nil) {
      defaultRootViewer_ = [self createNullViewer];
    }
    return defaultRootViewer_;
  }
  return rv;
}

- (NSString *)getScriptTypeWithRAREActionLink:(RAREActionLink *)link {
  @try {
    NSString *type = [((RAREActionLink *) nil_chk(link)) getMimeType];
    id<RAREiWidget> context = [link getContext];
    if (context == nil) {
      context = [self getRootViewer];
    }
    if ((type == nil) || [((NSString *) nil_chk([RAREiConstants TEXT_MIME_TYPE])) isEqual:type] || [((NSString *) nil_chk([RAREiConstants OCTET_MIME_TYPE])) isEqual:type]) {
      NSString *s = [((JavaNetURL *) nil_chk([link getURLWithRAREiWidget:context])) toExternalForm];
      int n = [((NSString *) nil_chk(s)) lastIndexOf:'.'];
      if (n > -1) {
        type = [s substring:n + 1];
      }
    }
    return type;
  }
  @catch (JavaIoIOException *ex) {
    return nil;
  }
}

- (RAREPaintBucket *)getSelectionPainter {
  return selectionPainter_;
}

- (JavaNetURL *)getURLWithNSString:(NSString *)url {
  return [((id<RAREiContainer>) nil_chk([self getRootViewer])) getURLWithNSString:url];
}

- (NSString *)getUserInfoWithJavaNetURL:(JavaNetURL *)url {
  if ((userInfo_ == nil) || ([((JavaNetURL *) nil_chk(url)) getUserInfo] != nil)) {
    return nil;
  }
  NSString *u = [RAREJavaURLConnection toExternalFormWithJavaNetURL:url];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(userInfo_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *path = (NSString *) check_class_cast([it next], [NSString class]);
    if ([((NSString *) nil_chk(u)) hasPrefix:path]) {
      return (NSString *) check_class_cast([userInfo_ getWithId:path], [NSString class]);
    }
  }
  return nil;
}

- (BOOL)isImageLoaderUsefull {
  return YES;
}

- (BOOL)isOSThingEqualsWithNSString:(NSString *)value
                       withNSString:(NSString *)segment {
  if ([((NSString *) nil_chk(segment)) isEqual:@"touch"]) {
    return [RAREPlatform isTouchDevice];
  }
  if ([segment isEqual:@"touchable"]) {
    return [RAREPlatform isTouchableDevice];
  }
  if ([segment isEqual:@"android"]) {
    return [RAREPlatform isAndroid];
  }
  if ([segment isEqual:@"ios"]) {
    return [RAREPlatform isIOS];
  }
  if ([segment isEqual:@"mac"] || [segment isEqual:@"osx"] || [segment isEqual:@"os x"]) {
    return [RAREPlatform isMac];
  }
  if ([segment isEqual:@"windows"]) {
    return [RAREPlatform isWindows];
  }
  if ([segment isEqual:@"apple"]) {
    return [RAREPlatform isMac] || [RAREPlatform isIOS];
  }
  if ([segment isEqual:@"java"]) {
    return [RAREPlatform isJava];
  }
  if ([segment isEqual:@"linux"]) {
    return [RAREPlatform isLinux];
  }
  if ([segment isEqual:@"swing"]) {
    return [RAREPlatform isSwing];
  }
  if ([segment isEqual:@"mdpi"]) {
    return [RAREScreenUtils isMediumDensity];
  }
  if ([segment isEqual:@"xhdpi"]) {
    return [RAREScreenUtils isHighDensity];
  }
  if ([segment isEqual:@"ldpi"]) {
    return [RAREScreenUtils isHighDensity];
  }
  if ([segment isEqual:@"small"]) {
    return [RAREScreenUtils isSmallScreen];
  }
  if ([segment isEqual:@"large"]) {
    return [RAREScreenUtils isLargeScreen];
  }
  if ([segment isEqual:@"medium"]) {
    return [RAREScreenUtils isMediumScreen];
  }
  if ([segment isEqual:@"dark"]) {
    return [((RAREUIColor *) nil_chk([RAREColorUtils getForeground])) isDarkColor];
  }
  if ([segment isEqual:@"light"]) {
    return ![((RAREUIColor *) nil_chk([RAREColorUtils getForeground])) isDarkColor];
  }
  if ([segment isEqual:@"v"]) {
    float n = [RAREUTSNumber floatValueWithNSString:[segment substring:1]];
    if ([((NSString *) nil_chk(value)) contains:@"java"]) {
      return [RAREPlatform getJavaVersion] >= n;
    }
    return [RAREPlatform getOsVersion] >= n;
  }
  if ([segment hasPrefix:@"lang_"]) {
    segment = [segment substring:5];
    NSString *lang = [((JavaUtilLocale *) nil_chk([JavaUtilLocale getDefault])) getLanguage];
    return (lang != nil) && [lang equalsIgnoreCase:segment];
  }
  return NO;
}

- (void)handleConfigurationLocaleURLsWithRARESPOTApplication:(RARESPOTApplication *)app
                                             withRAREiWidget:(id<RAREiWidget>)context
                                     withSPOTPrintableString:(SPOTPrintableString *)url {
  RAREActionLink *link = nil;
  if ([@"true" equalsIgnoreCase:[((SPOTPrintableString *) nil_chk(url)) spot_getAttributeWithNSString:@"localeSensitive"]]) {
    NSString *s = [url spot_getAttributeWithNSString:@"locale"];
    IOSObjectArray *lp = [RAREUTHelper getLocalResourcePostfixWithJavaUtilLocale:[JavaUtilLocale getDefault]];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(lp)) count]; i++) {
        if ([((NSString *) IOSObjectArray_Get(lp, i)) equalsIgnoreCase:s]) {
          lp = nil;
          break;
        }
      }
    }
    if ((lp != nil) && ((int) [lp count] > 0)) {
      NSString *ext = nil;
      s = [url getValue];
      int n = [((NSString *) nil_chk(s)) lastIndexOf:'.'];
      if (n != -1) {
        ext = [s substring:n + 1];
        s = [s substring:0 endIndex:n];
      }
      JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithInt:[((NSString *) nil_chk(s)) sequenceLength] + 10];
      for (int i = 0; i < (int) [lp count]; i++) {
        [sb setLengthWithInt:0];
        (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:s])) appendWithNSString:IOSObjectArray_Get(lp, i)];
        if (ext != nil) {
          (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'.'])) appendWithNSString:ext];
        }
        link = [[RAREActionLink alloc] initWithRAREiWidget:context withNSString:[sb description] withNSString:nil];
        @try {
          link = [[RAREActionLink alloc] initWithNSString:[link getContentAsString] withNSString:[link getContentType]];
        }
        @catch (JavaLangException *e) {
          link = nil;
        }
      }
    }
  }
  if (link == nil) {
    link = [RAREActionLink createInlineLinkIfNecessaryWithRAREiWidget:context withSPOTPrintableString:url];
  }
  if (link != nil) {
    (void) [url spot_setLinkedDataWithId:[IOSObjectArray arrayWithObjects:(id[]){ link } count:1 type:[IOSClass classWithClass:[RAREActionLink class]]]];
  }
}

- (void)handleConfigurationURLsWithRARESPOTApplication:(RARESPOTApplication *)app {
  id<RAREiWidget> context = [self getRootViewer];
  BOOL supportxsmall = NO;
  if ([((RARESPOTApplication_CManagedScreenSizes *) nil_chk(((RARESPOTApplication *) nil_chk(app))->managedScreenSizes_)) spot_valueWasSet]) {
    switch ([app->managedScreenSizes_ getValue]) {
      case RARESPOTApplication_CManagedScreenSizes_xsmall_small_large:
      supportxsmall = YES;
      case RARESPOTApplication_CManagedScreenSizes_small_large:
      multiScreenSupport_ = YES;
      break;
      case RARESPOTApplication_CManagedScreenSizes_xsmall_small_medium_large:
      supportxsmall = YES;
      case RARESPOTApplication_CManagedScreenSizes_small_medium_large:
      multiScreenSupport_ = YES;
      mediumScreenSupported_ = YES;
      break;
      default:
      break;
    }
    if (multiScreenSupport_) {
      multiScreenAutoFallback_ = ![@"false" isEqual:[app->managedScreenSizes_ spot_getAttributeWithNSString:@"autoFallback"]];
    }
  }
  JavaNetURL *scriptContextURL = contextURL_;
  if (multiScreenSupport_) {
    int xsmall = 0;
    int small = 0;
    int medium = 0;
    NSString *s = [app->managedScreenSizes_ spot_getAttributeWithNSString:@"smallScreenPointSize"];
    if (s != nil) {
      small = [RAREUTSNumber intValueWithNSString:s];
    }
    if (supportxsmall) {
      s = [app->managedScreenSizes_ spot_getAttributeWithNSString:@"xsmallScreenPointSize"];
      if (s != nil) {
        xsmall = [RAREUTSNumber intValueWithNSString:s];
      }
    }
    if (mediumScreenSupported_) {
      s = [app->managedScreenSizes_ spot_getAttributeWithNSString:@"mediumScreenPointSize"];
      medium = [RAREUTSNumber intValueWithNSString:s];
    }
    if (small > 0) {
      [RAREScreenUtils setScreenSizeWithRAREUIScreen_ScreenSizeEnum:[RAREScreenUtils calculateScreenSizeWithInt:xsmall withInt:small withInt:medium]];
    }
    if (multiScreenAutoFallback_) {
      [RAREActionLink setGlobalErrorHandlerWithRAREActionLink_iErrorHandler:[[RAREaRare_MultiScreenFallbackErrorHandler alloc] initWithRAREaRare:self]];
    }
    RAREActionLink *link = [[RAREActionLink alloc] initWithJavaNetURL:[self getURLWithNSString:[NSString stringWithFormat:@"%@/mainwindow.rml", [RAREScreenUtils getRelativeScreenSizeName]]]];
    id<RAREiURLConnection> conn = [link getConnection];
    RARESPOTMainWindow *w = [[RARESPOTMainWindow alloc] init];
    (void) [RAREDataParser loadSPOTObjectWithRAREiWidget:context withRAREiURLConnection:conn withISPOTElement:w];
    [app setMainWindowWithISPOTElement:w];
    scriptContextURL = [link getURLWithRAREiWidget:context];
    [link close];
  }
  RARESPOTMainWindow *mw = [((RARESPOTApplication *) nil_chk(sageApplication_)) getMainWindowReference];
  if (![((id<RAREiWidget>) nil_chk(context)) isDesignMode] && [((SPOTPrintableString *) nil_chk(((RARESPOTMainWindow *) nil_chk(mw))->scriptURL_)) spot_hasValue]) {
    NSString *s = [mw->scriptURL_ spot_getAttributeWithNSString:@"inline"];
    if (![@"true" isEqual:s] || ![mw->scriptURL_ spot_isValuePreformatted]) {
      JavaNetURL *u;
      s = [mw->scriptURL_ getValue];
      if ([((NSString *) nil_chk(s)) hasPrefix:@"/"]) {
        u = [[JavaNetURL alloc] initWithNSString:[NSString stringWithFormat:@"%@%@", contextURLBaseString_, s]];
      }
      else {
        u = [[JavaNetURL alloc] initWithJavaNetURL:scriptContextURL withNSString:s];
      }
      RAREActionLink *link = [[RAREActionLink alloc] initWithJavaNetURL:u];
      NSString *type = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getScriptTypeWithRAREActionLink:link];
      NSString *code = [link getContentAsString];
      (void) [mw->scriptURL_ spot_setLinkedDataWithId:[[RAREUTObjectHolder alloc] initWithId:[self getRelativeLocationWithJavaNetURL:u] withId:type withId:code]];
    }
  }
  RARESPOTViewer *viewer = (RARESPOTViewer *) check_class_cast([((SPOTAny *) nil_chk(((RARESPOTMainWindow *) nil_chk(mw))->viewer_)) getValue], [RARESPOTViewer class]);
  if (viewer != nil) {
    [self checkMainViewerElementsWithRAREiWidget:context withRARESPOTViewer:viewer withJavaNetURL:scriptContextURL];
  }
  RAREActionLink *link = [RAREActionLink createInlineLinkIfNecessaryWithRAREiWidget:context withSPOTPrintableString:app->attributesURL_];
  if (link != nil) {
    (void) [((SPOTPrintableString *) nil_chk(app->attributesURL_)) spot_setLinkedDataWithId:link];
  }
  link = [RAREActionLink createInlineLinkIfNecessaryWithRAREiWidget:context withSPOTPrintableString:app->dataCollectionsURL_];
  if (link != nil) {
    (void) [((SPOTPrintableString *) nil_chk(app->dataCollectionsURL_)) spot_setLinkedDataWithId:link];
  }
  link = [RAREActionLink createInlineLinkIfNecessaryWithRAREiWidget:context withSPOTPrintableString:app->lookAndFeelPropertiesURL_];
  if (link != nil) {
    (void) [((SPOTPrintableString *) nil_chk(app->lookAndFeelPropertiesURL_)) spot_setLinkedDataWithId:link];
  }
  RARESPOTMenuBar *mb = [((RARESPOTMainWindow *) nil_chk([app getMainWindowReference])) getMenuBar];
  if (mb != nil) {
    link = [RAREActionLink createInlineLinkIfNecessaryWithRAREiWidget:context withSPOTPrintableString:mb->dataURL_];
    if (link != nil) {
      (void) [((SPOTPrintableString *) nil_chk(mb->dataURL_)) spot_setLinkedDataWithId:link];
    }
  }
  RARESPOTStatusBar *sb = [((RARESPOTMainWindow *) nil_chk([app getMainWindowReference])) getStatusBar];
  if (sb != nil) {
    link = [RAREActionLink createInlineLinkIfNecessaryWithRAREiWidget:context withSPOTPrintableString:sb->dataURL_];
    if (link != nil) {
      (void) [((SPOTPrintableString *) nil_chk(sb->dataURL_)) spot_setLinkedDataWithId:link];
    }
  }
  [self handleConfigurationLocaleURLsWithRARESPOTApplication:app withRAREiWidget:context withSPOTPrintableString:app->resourceStringsURL_];
  [self handleConfigurationLocaleURLsWithRARESPOTApplication:app withRAREiWidget:context withSPOTPrintableString:app->resourceIconsURL_];
  [self setContextURLWithJavaNetURL:scriptContextURL];
}

- (void)checkMainViewerElementsWithRAREiWidget:(id<RAREiWidget>)context
                            withRARESPOTViewer:(RARESPOTViewer *)viewer
                                withJavaNetURL:(JavaNetURL *)contextURL {
  (*[RAREDataParser INLINE_REGION_VIEWER_URLSRef]) = YES;
  (*[RAREDataParser INLINE_SELECTED_STACKPANE_VIEWER_URLSRef]) = YES;
  (void) [RAREDataParser checkElementWithRAREiWidget:context withISPOTElement:viewer withJavaNetURL:contextURL];
  (*[RAREDataParser INLINE_REGION_VIEWER_URLSRef]) = NO;
  (*[RAREDataParser INLINE_SELECTED_STACKPANE_VIEWER_URLSRef]) = NO;
}

- (void)copyAllFieldsTo:(RAREaRare *)other {
  [super copyAllFieldsTo:other];
  other->actionMap_ = actionMap_;
  other->allLabelsDraggable_ = allLabelsDraggable_;
  other->allTextFieldsDraggable_ = allTextFieldsDraggable_;
  other->allTextFieldsDroppable_ = allTextFieldsDroppable_;
  other->allWidgetsDraggable_ = allWidgetsDraggable_;
  other->appContext_ = appContext_;
  other->appData_ = appData_;
  other->appListeners_ = appListeners_;
  other->applicationConnectionHandler_ = applicationConnectionHandler_;
  other->applicationName_ = applicationName_;
  other->applicationRoot_ = applicationRoot_;
  other->applicationURL_ = applicationURL_;
  other->autoHilightPainter_ = autoHilightPainter_;
  other->autoLocalizeDateFormats_ = autoLocalizeDateFormats_;
  other->autoLocalizeNumberFormats_ = autoLocalizeNumberFormats_;
  other->changeSelColorOnLostFocus_ = changeSelColorOnLostFocus_;
  other->collectionHandlers_ = collectionHandlers_;
  other->contextURL_ = contextURL_;
  other->contextURLBaseString_ = contextURLBaseString_;
  other->customPropertyPrefix_ = customPropertyPrefix_;
  other->dataCollections_ = dataCollections_;
  other->defaultDateContext_ = defaultDateContext_;
  other->defaultDateTimeContext_ = defaultDateTimeContext_;
  other->defaultRootViewer_ = defaultRootViewer_;
  other->defaultScriptingLanguage_ = defaultScriptingLanguage_;
  other->defaultTimeContext_ = defaultTimeContext_;
  other->dynamicNameLookup_ = dynamicNameLookup_;
  other->exceptionHandler_ = exceptionHandler_;
  other->focusedActions_ = focusedActions_;
  other->ignoreFormatExceptions__ = ignoreFormatExceptions__;
  other->info_ = info_;
  other->itemPaddingHeight_ = itemPaddingHeight_;
  other->listItemFocusPainter_ = listItemFocusPainter_;
  other->lostFocusSelectionPainter_ = lostFocusSelectionPainter_;
  other->manageFocusedActions_ = manageFocusedActions_;
  other->mediumScreenSupported_ = mediumScreenSupported_;
  other->multiScreenAutoFallback_ = multiScreenAutoFallback_;
  other->multiScreenSupport_ = multiScreenSupport_;
  other->multipartMimeHandler_ = multipartMimeHandler_;
  other->overlapAutoToolTips_ = overlapAutoToolTips_;
  other->pressedPainter_ = pressedPainter_;
  other->printHandler_ = printHandler_;
  other->printHandlerClassName_ = printHandlerClassName_;
  other->runOnceScripts_ = runOnceScripts_;
  other->sageApplication_ = sageApplication_;
  other->scriptHandler_ = scriptHandler_;
  other->selectionPainter_ = selectionPainter_;
  other->shuttingDown_ = shuttingDown_;
  other->urlPrefixesKeys_ = urlPrefixesKeys_;
  other->urlPrefixesValues_ = urlPrefixesValues_;
  other->useHeavyTargets_ = useHeavyTargets_;
  other->userInfo_ = userInfo_;
  other->viewersLocalByDefault_ = viewersLocalByDefault_;
  other->widgetClasses_ = widgetClasses_;
  other->widgetFocusPainter_ = widgetFocusPainter_;
  other->windowManager_ = windowManager_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createApplicationObjectWithJavaNetURLArray:withNSString:", NULL, "V", 0x1, "JavaLangException" },
    { "ignoreExceptionWithNSString:withJavaLangThrowable:", NULL, "V", 0x401, NULL },
    { "loadMIMETypeMappingsWithRAREActionLink:withBoolean:", NULL, "V", 0x9, "JavaIoIOException" },
    { "openConnectionWithJavaNetURL:", NULL, "LRAREiURLConnection", 0x1, "JavaIoIOException" },
    { "openConnectionWithJavaNetURL:withNSString:", NULL, "LRAREiURLConnection", 0x1, "JavaIoIOException" },
    { "getAppContext", NULL, "LRAREiPlatformAppContext", 0x1, NULL },
    { "getDataConverterWithIOSClass:", NULL, "LRAREiDataConverter", 0x9, NULL },
    { "getDataConverterClassWithNSString:", NULL, "LIOSClass", 0x9, "JavaLangClassNotFoundException" },
    { "getErrorWriter", NULL, "LJavaIoWriter", 0x1, NULL },
    { "getFunctionHandler", NULL, "LRAREiFunctionHandler", 0x401, NULL },
    { "getName", NULL, "LNSString", 0x1, NULL },
    { "getPrintHandler", NULL, "LRAREiPrintHandler", 0x1, NULL },
    { "getReaderWithJavaNetURLConnection:", NULL, "LJavaIoReader", 0x9, "JavaIoIOException" },
    { "getRelativeLocationWithJavaNetURL:", NULL, "LNSString", 0x1, NULL },
    { "getResourceBundle", NULL, "LJavaUtilResourceBundle", 0x1, NULL },
    { "getUserAgent", NULL, "LNSString", 0x9, NULL },
    { "getViewerWithNSString:", NULL, "LRAREiViewer", 0x1, NULL },
    { "getWidgetHandlerWithNSString:", NULL, "LIOSClass", 0x1, NULL },
    { "getWindowManager", NULL, "LRAREiPlatformWindowManager", 0x1, NULL },
    { "isDebugEnabled", NULL, "Z", 0x9, NULL },
    { "configureWithRARESPOTApplication:withJavaNetURL:", NULL, "V", 0x4, NULL },
    { "createApplicationObjectExWithJavaNetURL:withInt:withNSString:", NULL, "V", 0x4, "JavaLangException" },
    { "createCellRenderingDefaults", NULL, "V", 0x404, NULL },
    { "createDataCollectionWithRARESPOTDataCollection:", NULL, "LRAREiDataCollection", 0x4, NULL },
    { "createNullViewer", NULL, "LRAREiContainer", 0x404, NULL },
    { "createScriptHandlerWithRARESPOTApplication:", NULL, "LRAREiScriptHandler", 0x404, NULL },
    { "createURLWithRAREiWidget:withNSString:", NULL, "LJavaNetURL", 0x4, "JavaNetMalformedURLException" },
    { "createURLWithRAREiPlatformAppContext:withJavaNetURL:withNSString:", NULL, "LJavaNetURL", 0x4, "JavaNetMalformedURLException" },
    { "createUserAgentStringWithNSString:withNSString:", NULL, "V", 0x4, NULL },
    { "executeBackgroundTaskWithJavaUtilConcurrentCallable:", NULL, "LRAREiCancelableFuture", 0x4, NULL },
    { "executeBackgroundTaskWithJavaLangRunnable:", NULL, "LRAREiCancelableFuture", 0x4, NULL },
    { "executeSwingWorkerTaskWithRAREiWorkerTask:", NULL, "LRAREiCancelableFuture", 0x4, NULL },
    { "exit", NULL, "V", 0x4, NULL },
    { "exitEx", NULL, "V", 0x4, NULL },
    { "fireApplicationDidInit", NULL, "V", 0x4, NULL },
    { "fireApplicationExiting", NULL, "V", 0x4, NULL },
    { "handleAuthFailureWithJavaNetURL:withInt:withNSString:", NULL, "V", 0x4, NULL },
    { "handleIfFileOrLibURLWithJavaNetURL:withNSString:", NULL, "LRAREiURLConnection", 0x404, "JavaIoIOException" },
    { "addPrefixMappingWithNSString:withNSString:", NULL, "V", 0x4, NULL },
    { "handlePrefixMappingWithNSString:", NULL, "LNSString", 0x4, "JavaNetMalformedURLException" },
    { "ignoreFormatExceptions", NULL, "Z", 0x4, NULL },
    { "ignoreStartupExceptionWithNSString:withJavaLangThrowable:", NULL, "V", 0xc, NULL },
    { "initApplicationWithRARESPOTApplication:", NULL, "V", 0x4, NULL },
    { "initialize__", NULL, "V", 0x4, NULL },
    { "listenersCanExit", NULL, "Z", 0x4, NULL },
    { "loadScriptCodeWithRAREActionLink:withBoolean:", NULL, "LNSString", 0x4, NULL },
    { "loadWidgetHandlersWithJavaUtilMap:", NULL, "V", 0x4, NULL },
    { "okForOSWithISPOTElement:", NULL, "Z", 0x4, NULL },
    { "okForOSWithNSString:withRAREUTCharScanner:", NULL, "Z", 0x4, NULL },
    { "promptForURLWithRAREaRare_StartupInfo:withNSString:", NULL, "V", 0x4, NULL },
    { "registerActionWithRAREUIAction:", NULL, "V", 0x4, NULL },
    { "registerCollectionHandlerWithNSString:withRAREiDataCollectionHandler:", NULL, "V", 0x4, NULL },
    { "registerCollectionHandlerClassWithNSString:withIOSClass:", NULL, "V", 0x4, NULL },
    { "registerDataCollectionWithRAREiDataCollection:", NULL, "V", 0x4, NULL },
    { "registerDefaultActions", NULL, "V", 0x4, NULL },
    { "registerDefaultViewers", NULL, "V", 0x4, NULL },
    { "registerFocusedActionWithRAREaFocusedAction:", NULL, "V", 0x4, NULL },
    { "registerJARsWithSPOTSet:", NULL, "V", 0x404, NULL },
    { "registerWidgetClassWithNSString:withId:", NULL, "V", 0x4, NULL },
    { "resetRunOnceWithRAREActionLink:", NULL, "V", 0x4, NULL },
    { "resolveApplicationURLWithNSString:", NULL, "LJavaNetURL", 0x4, "JavaNetMalformedURLException" },
    { "resolveSetWithSPOTSet:withIOSClass:", NULL, "LSPOTSet", 0x4, NULL },
    { "setupApplicationObjectWithJavaNetURL:withSPOTSequence:withNSString:", NULL, "V", 0x4, "JavaLangException" },
    { "setupAutoHilightPainterWithRARESPOTGridCell:", NULL, "V", 0x4, NULL },
    { "setupLostFocusSelectionPainterWithRARESPOTGridCell:", NULL, "V", 0x4, NULL },
    { "setupOsSpecificInfoWithRARESPOTApplication:withJavaNetURL:withNSString:", NULL, "V", 0x4, NULL },
    { "setupSelectionPainterWithRARESPOTGridCell:", NULL, "V", 0x4, NULL },
    { "setupUrlPrefixes", NULL, "V", 0x4, NULL },
    { "showErrorDialogWithJavaLangThrowable:withBoolean:", NULL, "V", 0x4, NULL },
    { "showStartupErrorWithNSString:withJavaLangThrowable:withBoolean:", NULL, "V", 0x4, NULL },
    { "start", NULL, "V", 0x404, NULL },
    { "stopBackgroundThreads", NULL, "V", 0x4, NULL },
    { "tryAgainWithRAREaRare_StartupInfo:withNSString:", NULL, "V", 0x4, NULL },
    { "uiPropertiesLoaded", NULL, "V", 0x4, "JavaLangException" },
    { "unregisterDataCollectionWithRAREiDataCollection:", NULL, "V", 0x4, NULL },
    { "setApplicationURLWithJavaNetURL:", NULL, "LJavaNetURL", 0x4, NULL },
    { "setContextURLWithJavaNetURL:", NULL, "V", 0x4, NULL },
    { "setDefaultExceptionHandlerWithRAREiExceptionHandler:", NULL, "V", 0x4, NULL },
    { "getActionWithNSString:", NULL, "LRAREUIAction", 0x4, NULL },
    { "getApplicationURL", NULL, "LJavaNetURL", 0x4, NULL },
    { "getCollectionHandlerWithNSString:", NULL, "LRAREiDataCollectionHandler", 0x4, NULL },
    { "getDefaultExceptionHandler", NULL, "LRAREiExceptionHandler", 0x4, NULL },
    { "getOSType", NULL, "LNSString", 0x4, NULL },
    { "getRootViewer", NULL, "LRAREiContainer", 0x4, NULL },
    { "getScriptTypeWithRAREActionLink:", NULL, "LNSString", 0x4, NULL },
    { "getSelectionPainter", NULL, "LRAREPaintBucket", 0x4, NULL },
    { "getURLWithNSString:", NULL, "LJavaNetURL", 0x4, "JavaNetMalformedURLException" },
    { "getUserInfoWithJavaNetURL:", NULL, "LNSString", 0x4, NULL },
    { "isImageLoaderUsefull", NULL, "Z", 0x4, NULL },
    { "isOSThingEqualsWithNSString:withNSString:", NULL, "Z", 0x4, NULL },
    { "handleConfigurationLocaleURLsWithRARESPOTApplication:withRAREiWidget:withSPOTPrintableString:", NULL, "V", 0x2, "JavaLangException" },
    { "handleConfigurationURLsWithRARESPOTApplication:", NULL, "V", 0x2, "JavaLangException" },
    { "checkMainViewerElementsWithRAREiWidget:withRARESPOTViewer:withJavaNetURL:", NULL, "V", 0x4, "JavaLangException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "RARE_USER_AGENT_", NULL, 0xc, "LNSString" },
    { "dataConverters_", NULL, 0x4c, "LJavaUtilMap" },
    { "debugEnabled_", NULL, 0xc, "Z" },
    { "functionHandler_", NULL, 0xc, "LRAREiFunctionHandler" },
    { "osType_", NULL, 0xc, "LNSString" },
    { "resources_", NULL, 0xc, "LJavaUtilResourceBundle" },
    { "contextURLBaseString_", NULL, 0x0, "LNSString" },
    { "defaultScriptingLanguage_", NULL, 0x4, "LNSString" },
    { "itemPaddingHeight_", NULL, 0x4, "I" },
    { "widgetClasses_", NULL, 0x14, "LJavaUtilHashMap" },
    { "appData_", NULL, 0x4, "LJavaUtilMap" },
    { "actionMap_", NULL, 0x4, "LJavaUtilHashMap" },
    { "allLabelsDraggable_", NULL, 0x4, "Z" },
    { "allTextFieldsDraggable_", NULL, 0x4, "Z" },
    { "allTextFieldsDroppable_", NULL, 0x4, "Z" },
    { "allWidgetsDraggable_", NULL, 0x4, "Z" },
    { "appContext_", NULL, 0x4, "LRAREiPlatformAppContext" },
    { "appListeners_", NULL, 0x4, "LJavaUtilList" },
    { "applicationName_", NULL, 0x4, "LNSString" },
    { "applicationRoot_", NULL, 0x4, "LNSString" },
    { "applicationURL_", NULL, 0x4, "LJavaNetURL" },
    { "autoHilightPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "autoLocalizeDateFormats_", NULL, 0x4, "Z" },
    { "autoLocalizeNumberFormats_", NULL, 0x4, "Z" },
    { "changeSelColorOnLostFocus_", NULL, 0x4, "Z" },
    { "collectionHandlers_", NULL, 0x4, "LJavaUtilHashMap" },
    { "contextURL_", NULL, 0x4, "LJavaNetURL" },
    { "customPropertyPrefix_", NULL, 0x4, "LNSString" },
    { "dataCollections_", NULL, 0x4, "LJavaUtilHashMap" },
    { "defaultDateContext_", NULL, 0x4, "LRAREDateContext" },
    { "defaultDateTimeContext_", NULL, 0x4, "LRAREDateContext" },
    { "defaultRootViewer_", NULL, 0x4, "LRAREiContainer" },
    { "defaultTimeContext_", NULL, 0x4, "LRAREDateContext" },
    { "exceptionHandler_", NULL, 0x4, "LRAREiExceptionHandler" },
    { "focusedActions_", NULL, 0x4, "LJavaUtilArrayList" },
    { "ignoreFormatExceptions__", "ignoreFormatExceptions", 0x4, "Z" },
    { "info_", NULL, 0x4, "LRAREaRare_StartupInfo" },
    { "listItemFocusPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "lostFocusSelectionPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "manageFocusedActions_", NULL, 0x4, "Z" },
    { "mediumScreenSupported_", NULL, 0x4, "Z" },
    { "multiScreenAutoFallback_", NULL, 0x4, "Z" },
    { "multiScreenSupport_", NULL, 0x4, "Z" },
    { "multipartMimeHandler_", NULL, 0x4, "LRAREiMultipartMimeHandler" },
    { "overlapAutoToolTips_", NULL, 0x4, "Z" },
    { "pressedPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "printHandlerClassName_", NULL, 0x4, "LNSString" },
    { "sageApplication_", NULL, 0x4, "LRARESPOTApplication" },
    { "scriptHandler_", NULL, 0x4, "LRAREiScriptHandler" },
    { "selectionPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "shuttingDown_", NULL, 0x4, "Z" },
    { "urlPrefixesKeys_", NULL, 0x4, "LIOSObjectArray" },
    { "urlPrefixesValues_", NULL, 0x4, "LIOSObjectArray" },
    { "useHeavyTargets_", NULL, 0x4, "Z" },
    { "userInfo_", NULL, 0x4, "LJavaUtilMap" },
    { "viewersLocalByDefault_", NULL, 0x4, "Z" },
    { "widgetFocusPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "windowManager_", NULL, 0x4, "LRAREiPlatformWindowManager" },
    { "runOnceScripts_", NULL, 0x12, "LJavaUtilHashMap" },
    { "dynamicNameLookup_", NULL, 0x4, "Z" },
    { "printHandler_", NULL, 0x4, "LRAREiPrintHandler" },
    { "applicationConnectionHandler_", NULL, 0x4, "LRAREiConnectionHandler" },
  };
  static J2ObjcClassInfo _RAREaRare = { "aRare", "com.appnativa.rare.platform", NULL, 0x401, 93, methods, 62, fields, 0, NULL};
  return &_RAREaRare;
}

@end
@implementation RAREaRare_AutoHilightPainter

- (id)initWithBoolean:(BOOL)lf {
  if (self = [super init]) {
    lostFocus_ = lf;
    [self setBackgroundPainterWithRAREiBackgroundPainter:[[RAREUISimpleBackgroundPainter alloc] initWithRAREUIColor:[((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.textHighlight@25"]]];
  }
  return self;
}

- (RAREUIColor *)getBackgroundColor {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.textHighlight@25"];
}

- (id<RAREiPlatformBorder>)getBorder {
  return [RAREBorderUtils ONE_POINT_EMPTY_BORDER];
}

- (void)copyAllFieldsTo:(RAREaRare_AutoHilightPainter *)other {
  [super copyAllFieldsTo:other];
  other->lostFocus_ = lostFocus_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:", NULL, NULL, 0x0, NULL },
    { "getBackgroundColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getBorder", NULL, "LRAREiPlatformBorder", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "lostFocus_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _RAREaRare_AutoHilightPainter = { "AutoHilightPainter", "com.appnativa.rare.platform", "aRare", 0x9, 3, methods, 1, fields, 0, NULL};
  return &_RAREaRare_AutoHilightPainter;
}

@end
@implementation RAREaRare_MultiScreenFallbackErrorHandler

- (RAREActionLink_iErrorHandler_ActionEnum *)handleErrorWithRAREActionLink:(RAREActionLink *)link
                                                     withJavaLangException:(JavaLangException *)ex
                                                    withRAREiURLConnection:(id<RAREiURLConnection>)conn {
  return [RAREActionLink_iErrorHandler_ActionEnum CHANGE];
}

- (void)setErrorHandlerWithRAREActionLink_iErrorHandler:(id<RAREActionLink_iErrorHandler>)errorHandler {
  self->errorHandler_ = errorHandler;
}

- (id<RAREiURLConnection>)getConnectionChangeWithRAREActionLink:(RAREActionLink *)link
                                          withJavaLangException:(JavaLangException *)ex
                                         withRAREiURLConnection:(id<RAREiURLConnection>)oconn {
  if ([ex isKindOfClass:[JavaNetConnectException class]]) {
    @throw (JavaNetConnectException *) check_class_cast(ex, [JavaNetConnectException class]);
  }
  NSString *mimeType = nil;
  if ([(id) oconn isKindOfClass:[RAREJavaURLConnection class]]) {
    if ([((id<RAREiURLConnection>) nil_chk(oconn)) getConnectionObject] == nil) {
      @throw [[JavaNioChannelsClosedChannelException alloc] init];
    }
    mimeType = [((RAREJavaURLConnection *) check_class_cast(oconn, [RAREJavaURLConnection class])) getPassedInMimeType];
  }
  id<RAREiURLConnection> conn = nil;
  JavaNetURL *url = [((id<RAREiURLConnection>) nil_chk(oconn)) getURL];
  RAREUTMutableInteger *size = [[RAREUTMutableInteger alloc] initWithInt:0];
  NSString *format = [self createScreenRelativeFormatStringWithJavaNetURL:url withRAREUTMutableInteger:size];
  if (format == nil) {
    return [self callOtherHandlerWithRAREActionLink:link withJavaLangException:ex withRAREiURLConnection:conn];
  }
  int inc = 1;
  int n = [size get] + 1;
  if (n > 2) {
    n = 1;
    inc = -1;
  }
  NSString *s = nil;
  switch (n) {
    case 0:
    s = [((NSString *) nil_chk(format)) replace:@"__RARE__" withSequence:@"small"];
    break;
    case 1:
    if (this$0_->mediumScreenSupported_) {
      s = [((NSString *) nil_chk(format)) replace:@"__RARE__" withSequence:@"medium"];
    }
    break;
    case 2:
    s = [((NSString *) nil_chk(format)) replace:@"__RARE__" withSequence:@"large"];
    break;
  }
  if (s != nil) {
    @try {
      conn = [this$0_ openConnectionWithJavaNetURL:[[JavaNetURL alloc] initWithNSString:s] withNSString:nil];
      [((id<RAREiURLConnection>) nil_chk(conn)) open];
      return conn;
    }
    @catch (RAREHTTPException *e) {
    }
    @catch (JavaIoFileNotFoundException *e) {
    }
    @catch (JavaIoIOException *e) {
    }
  }
  n += inc;
  if (n > 2) {
    n = 0;
  }
  if (n == [size get]) {
    return [self callOtherHandlerWithRAREActionLink:link withJavaLangException:ex withRAREiURLConnection:conn];
  }
  switch (n) {
    case 0:
    s = [((NSString *) nil_chk(format)) replace:@"__RARE__" withSequence:@"small"];
    break;
    case 1:
    if (this$0_->mediumScreenSupported_) {
      s = [((NSString *) nil_chk(format)) replace:@"__RARE__" withSequence:@"medium"];
    }
    break;
    case 2:
    s = [((NSString *) nil_chk(format)) replace:@"__RARE__" withSequence:@"large"];
    break;
  }
  if (s != nil) {
    @try {
      conn = [this$0_ openConnectionWithJavaNetURL:[[JavaNetURL alloc] initWithNSString:s] withNSString:mimeType];
      [((id<RAREiURLConnection>) nil_chk(conn)) open];
      return conn;
    }
    @catch (RAREHTTPException *e) {
    }
    @catch (JavaIoFileNotFoundException *e) {
    }
    @catch (JavaIoIOException *e) {
    }
  }
  return [self callOtherHandlerWithRAREActionLink:link withJavaLangException:ex withRAREiURLConnection:conn];
}

- (id<RAREActionLink_iErrorHandler>)getErrorHandler {
  return errorHandler_;
}

- (id<RAREiURLConnection>)callOtherHandlerWithRAREActionLink:(RAREActionLink *)link
                                       withJavaLangException:(JavaLangException *)ex
                                      withRAREiURLConnection:(id<RAREiURLConnection>)conn {
  if (errorHandler_ != nil) {
    RAREActionLink_iErrorHandler_ActionEnum *a = [errorHandler_ handleErrorWithRAREActionLink:link withJavaLangException:ex withRAREiURLConnection:conn];
    switch ([a ordinal]) {
      case RAREActionLink_iErrorHandler_Action_CHANGE:
      {
        return [errorHandler_ getConnectionChangeWithRAREActionLink:link withJavaLangException:ex withRAREiURLConnection:conn];
      }
      case RAREActionLink_iErrorHandler_Action_RETRY:
      {
        @try {
          [((id<RAREiURLConnection>) nil_chk(conn)) close];
        }
        @catch (JavaLangException *e) {
        }
        [((id<RAREiURLConnection>) nil_chk(conn)) open];
      }
      case RAREActionLink_iErrorHandler_Action_ERROR_MESSAGE:
      {
        if ([ex isKindOfClass:[RAREHTTPException class]]) {
          NSString *s = [((RAREHTTPException *) check_class_cast(ex, [RAREHTTPException class])) getMessageBody];
          if ((s != nil) && ([s sequenceLength] > 0)) {
            @throw [[RAREApplicationException alloc] initWithNSString:s];
          }
        }
        @throw [[RAREApplicationException alloc] initWithNSString:[RAREApplicationException getMessageExWithJavaLangThrowable:ex]];
      }
      default:
      break;
    }
  }
  if ([ex isKindOfClass:[JavaIoIOException class]]) {
    @throw (JavaIoIOException *) check_class_cast(ex, [JavaIoIOException class]);
  }
  @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:ex];
}

- (NSString *)createScreenRelativeFormatStringWithJavaNetURL:(JavaNetURL *)url
                                    withRAREUTMutableInteger:(RAREUTMutableInteger *)size {
  NSString *s = [RAREJavaURLConnection toExternalFormWithJavaNetURL:url];
  if (![((NSString *) nil_chk(s)) hasPrefix:this$0_->applicationRoot_]) {
    return nil;
  }
  NSString *key = nil;
  int start = [((NSString *) nil_chk(this$0_->applicationRoot_)) sequenceLength];
  if ([s indexOfString:@"/large/" fromIndex:start] == start) {
    key = @"/large/";
    [((RAREUTMutableInteger *) nil_chk(size)) setWithInt:2];
  }
  else if ([s indexOfString:@"/small/" fromIndex:start] == start) {
    key = @"/small/";
    [((RAREUTMutableInteger *) nil_chk(size)) setWithInt:0];
  }
  else if (([s indexOfString:@"/medium/" fromIndex:start] == start)) {
    key = @"/medium/";
    [((RAREUTMutableInteger *) nil_chk(size)) setWithInt:1];
  }
  if (key == nil) {
    return nil;
  }
  return [NSString stringWithFormat:@"%@/__RARE__/%@", this$0_->applicationRoot_, [s substring:start + [((NSString *) nil_chk(key)) sequenceLength]]];
}

- (JavaLangException *)getExceptionChangeWithRAREActionLink:(RAREActionLink *)link
                                      withJavaLangException:(JavaLangException *)ex {
  if (errorHandler_ == nil) {
    return nil;
  }
  return [((id<RAREActionLink_iErrorHandler>) nil_chk(errorHandler_)) getExceptionChangeWithRAREActionLink:link withJavaLangException:ex];
}

- (id)initWithRAREaRare:(RAREaRare *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(RAREaRare_MultiScreenFallbackErrorHandler *)other {
  [super copyAllFieldsTo:other];
  other->errorHandler_ = errorHandler_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "handleErrorWithRAREActionLink:withJavaLangException:withRAREiURLConnection:", NULL, "LRAREActionLink_iErrorHandler_ActionEnum", 0x1, NULL },
    { "getConnectionChangeWithRAREActionLink:withJavaLangException:withRAREiURLConnection:", NULL, "LRAREiURLConnection", 0x1, "JavaIoIOException" },
    { "getErrorHandler", NULL, "LRAREActionLink_iErrorHandler", 0x1, NULL },
    { "callOtherHandlerWithRAREActionLink:withJavaLangException:withRAREiURLConnection:", NULL, "LRAREiURLConnection", 0x4, "JavaIoIOException" },
    { "createScreenRelativeFormatStringWithJavaNetURL:withRAREUTMutableInteger:", NULL, "LNSString", 0x4, NULL },
    { "getExceptionChangeWithRAREActionLink:withJavaLangException:", NULL, "LJavaLangException", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaRare" },
  };
  static J2ObjcClassInfo _RAREaRare_MultiScreenFallbackErrorHandler = { "MultiScreenFallbackErrorHandler", "com.appnativa.rare.platform", "aRare", 0x1, 6, methods, 1, fields, 0, NULL};
  return &_RAREaRare_MultiScreenFallbackErrorHandler;
}

@end
@implementation RAREaRare_SelectionPainter

- (id)initWithBoolean:(BOOL)lf {
  if (self = [super init]) {
    lostFocus_ = lf;
    [self setBackgroundPainterWithRAREiBackgroundPainter:[[RAREUISimpleBackgroundPainter alloc] initWithRAREUIColor:lostFocus_ ? [RAREColorUtils getBackground] : [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.textHighlight"]]];
  }
  return self;
}

- (RAREUIColor *)getBackgroundColor {
  return lostFocus_ ? [RAREColorUtils getBackground] : [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.textHighlight"];
}

- (id<RAREiPlatformBorder>)getBorder {
  return nil;
}

- (void)copyAllFieldsTo:(RAREaRare_SelectionPainter *)other {
  [super copyAllFieldsTo:other];
  other->lostFocus_ = lostFocus_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getBackgroundColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getBorder", NULL, "LRAREiPlatformBorder", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "lostFocus_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _RAREaRare_SelectionPainter = { "SelectionPainter", "com.appnativa.rare.platform", "aRare", 0x9, 2, methods, 1, fields, 0, NULL};
  return &_RAREaRare_SelectionPainter;
}

@end
@implementation RAREaRare_StartupInfo

- (id)initWithNSString:(NSString *)applicationFile
          withNSString:(NSString *)local
          withNSString:(NSString *)infoFile
           withBoolean:(BOOL)dumpXML
           withBoolean:(BOOL)dumpSDF
      withJavaUtilList:(id<JavaUtilList>)args {
  if (self = [super init]) {
    self->applicationFile_ = applicationFile;
    self->local_ = local;
    self->infoFile_ = infoFile;
    self->dumpXML_ = dumpXML;
    self->dumpSDF_ = dumpSDF;
    self->args_ = args;
  }
  return self;
}

- (void)copyAllFieldsTo:(RAREaRare_StartupInfo *)other {
  [super copyAllFieldsTo:other];
  other->applicationFile_ = applicationFile_;
  other->args_ = args_;
  other->dumpSDF_ = dumpSDF_;
  other->dumpXML_ = dumpXML_;
  other->infoFile_ = infoFile_;
  other->local_ = local_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "applicationFile_", NULL, 0x1, "LNSString" },
    { "args_", NULL, 0x1, "LJavaUtilList" },
    { "dumpSDF_", NULL, 0x1, "Z" },
    { "dumpXML_", NULL, 0x1, "Z" },
    { "infoFile_", NULL, 0x1, "LNSString" },
    { "local_", NULL, 0x1, "LNSString" },
  };
  static J2ObjcClassInfo _RAREaRare_StartupInfo = { "StartupInfo", "com.appnativa.rare.platform", "aRare", 0x9, 0, NULL, 6, fields, 0, NULL};
  return &_RAREaRare_StartupInfo;
}

@end
@implementation RAREaRare_$1

- (void)finishedWithBoolean:(BOOL)canceled
                     withId:(id)returnValue {
  if ([returnValue isKindOfClass:[JavaLangThrowable class]]) {
    [this$0_ handleExceptionWithJavaLangThrowable:(JavaLangThrowable *) check_class_cast(returnValue, [JavaLangThrowable class])];
  }
}

- (id)initWithRAREaRare:(RAREaRare *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaRare" },
  };
  static J2ObjcClassInfo _RAREaRare_$1 = { "$1", "com.appnativa.rare.platform", "aRare", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_RAREaRare_$1;
}

@end
@implementation RAREaRare_$2

- (void)finishedWithBoolean:(BOOL)canceled
                     withId:(id)returnValue {
  if (!canceled && ([returnValue isKindOfClass:[NSString class]])) {
    NSString *s = (NSString *) check_class_cast(returnValue, [NSString class]);
    s = [((NSString *) nil_chk(s)) trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] > 0) {
      [this$0_ tryAgainWithRAREaRare_StartupInfo:val$info_ withNSString:s];
      return;
    }
  }
  [JavaLangSystem exitWithInt:0];
}

- (id)initWithRAREaRare:(RAREaRare *)outer$
withRAREaRare_StartupInfo:(RAREaRare_StartupInfo *)capture$0 {
  this$0_ = outer$;
  val$info_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaRare" },
    { "val$info_", NULL, 0x1012, "LRAREaRare_StartupInfo" },
  };
  static J2ObjcClassInfo _RAREaRare_$2 = { "$2", "com.appnativa.rare.platform", "aRare", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_RAREaRare_$2;
}

@end
@implementation RAREaRare_$3

- (void)finishedWithBoolean:(BOOL)canceled
                     withId:(id)returnValue {
  [((id<RAREiPlatformAppContext>) nil_chk(this$0_->appContext_)) exit];
}

- (id)initWithRAREaRare:(RAREaRare *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaRare" },
  };
  static J2ObjcClassInfo _RAREaRare_$3 = { "$3", "com.appnativa.rare.platform", "aRare", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_RAREaRare_$3;
}

@end
@implementation RAREaRare_$4

- (void)finishedWithBoolean:(BOOL)canceled
                     withId:(id)returnValue {
  if (!val$fatal_) {
    [this$0_ promptForURLWithRAREaRare_StartupInfo:this$0_->info_ withNSString:val$url_];
  }
}

- (id)initWithRAREaRare:(RAREaRare *)outer$
            withBoolean:(BOOL)capture$0
           withNSString:(NSString *)capture$1 {
  this$0_ = outer$;
  val$fatal_ = capture$0;
  val$url_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaRare" },
    { "val$fatal_", NULL, 0x1012, "Z" },
    { "val$url_", NULL, 0x1012, "LNSString" },
  };
  static J2ObjcClassInfo _RAREaRare_$4 = { "$4", "com.appnativa.rare.platform", "aRare", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_RAREaRare_$4;
}

@end
