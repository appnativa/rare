//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple/com/appnativa/rare/platform/apple/ui/view/aTableBasedView.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/platform/apple/ui/util/AppleGraphics.h"
#include "com/appnativa/rare/platform/apple/ui/view/View.h"
#include "com/appnativa/rare/platform/apple/ui/view/aTableBasedView.h"
#include "com/appnativa/rare/platform/apple/ui/view/aView.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UIStroke.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/ItemChangeEvent.h"
#include "com/appnativa/rare/ui/event/MouseEvent.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/event/iItemChangeListener.h"
#include "com/appnativa/rare/ui/iListHandler.h"
#include "com/appnativa/rare/ui/iListView.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformListDataModel.h"
#include "com/appnativa/rare/ui/iScrollerSupport.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/renderer/ListItemRenderer.h"
#include "com/appnativa/rare/ui/renderer/aListItemRenderer.h"
#include "com/appnativa/rare/ui/table/TableHelper.h"
#include "com/appnativa/rare/ui/tree/iTreeItem.h"
#include "com/appnativa/rare/viewer/aListViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/IntList.h"
#include "java/beans/PropertyChangeEvent.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/List.h"

@implementation RAREaTableBasedView

static int RAREaTableBasedView_ICON_GAP_;
static int RAREaTableBasedView_SELECTION_ICON_SIZE_;
static int RAREaTableBasedView_INDICATOR_SLOP_;

+ (int)ICON_GAP {
  return RAREaTableBasedView_ICON_GAP_;
}

+ (int)PAD_SIZE {
  return RAREaTableBasedView_PAD_SIZE;
}

+ (int)SELECTION_ICON_SIZE {
  return RAREaTableBasedView_SELECTION_ICON_SIZE_;
}

+ (int)INDICATOR_SLOP {
  return RAREaTableBasedView_INDICATOR_SLOP_;
}

+ (int *)INDICATOR_SLOPRef {
  return &RAREaTableBasedView_INDICATOR_SLOP_;
}

- (id)initWithId:(id)nsview {
  if (self = [super initWithId:nsview]) {
    EMPTY_ARRAY_ = [IOSIntArray arrayWithLength:0];
    editingRow_ = -1;
    lastEditedRow_ = -1;
    selectable_ = YES;
    fixedRowSize_ = YES;
    editable_ = NO;
    showLastDivider_ = YES;
    extendBackgroundRendering_ = YES;
    allowsSelectionDuringEditing_ = NO;
    popupMenuIndex_ = -1;
    selectionPainter_ = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getSelectionPainter];
    lostFoucsSelectionPainter_ = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getLostFocusSelectionPainter];
    if (![((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) isPlatformColorTheme]) {
      [self setBackgroundColorWithRAREUIColor:[RAREColorUtils getListBackground]];
      [self setForegroundColorWithRAREUIColor:[RAREColorUtils getListForeground]];
      pressedPainter_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getPaintBucketWithNSString:@"Rare.List.pressedPainter"];
    }
  }
  return self;
}

- (void)setBoundsWithFloat:(float)x
                 withFloat:(float)y
                 withFloat:(float)w
                 withFloat:(float)h {
  if (!fixedRowSize_ && oldWidth_aTableBasedView_ != w) {
    [self resetHeightInfoWithInt:0 withInt:[((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) size] - 1];
  }
  oldWidth_aTableBasedView_ = w;
  [super setBoundsWithFloat:x withFloat:y withFloat:w withFloat:h];
  if (!fixedRowSize_) {
    [self repaintVisibleRows];
  }
  if (keepSelectionVisible_) {
    [self makeSelectionVisible];
  }
}

- (BOOL)isKeepSelectionVisible {
  return keepSelectionVisible_;
}

- (void)setKeepSelectionVisibleWithBoolean:(BOOL)keepSelectionVisible {
  self->keepSelectionVisible_ = keepSelectionVisible;
}

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  if (actionListener_ != nil) {
    [actionListener_ actionPerformedWithRAREActionEvent:e];
  }
}

- (void)addSelectionIndexWithInt:(int)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (int)getSelectedIndexCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setContextMenuIndexWithRAREMouseEvent:(RAREMouseEvent *)e {
  if (popupMenuIndex_ != -1) {
    [self clearContextMenuIndex];
  }
  int n = [self rowAtPointWithFloat:[((RAREMouseEvent *) nil_chk(e)) getX] withFloat:[e getY]];
  if (n != -1 && ![self isSelectableWithInt:n withInt:-1 withRARERenderableDataItem:nil]) {
    n = -1;
  }
  popupMenuIndex_ = n;
  if (n != -1) {
    [self repaintRowWithInt:n];
    if ([self isRowSelectedWithInt:n]) {
      int count = [self getSelectedIndexCount];
      if (count > 1) {
        n = [self getFirstVisibleIndex];
        int l = [self getLastVisibleIndex];
        for (int i = n; i <= l; i++) {
          if ([self isRowSelectedWithInt:i]) {
            [self repaintRowWithInt:i];
          }
        }
      }
    }
  }
}

- (void)clearContextMenuIndex {
  int n = popupMenuIndex_;
  popupMenuIndex_ = -1;
  if (n != -1) {
    [self removePressedHilightWithInt:n];
    if ([self isRowSelectedWithInt:n]) {
      int count = [self getSelectedIndexCount];
      if (count > 1) {
        n = [self getFirstVisibleIndex];
        int l = [self getLastVisibleIndex];
        for (int i = n; i <= l; i++) {
          if ([self isRowSelectedWithInt:i]) {
            [self repaintRowWithInt:i];
          }
        }
      }
    }
  }
}

- (void)contentsChangedWithId:(id)source {
  if (!fixedRowSize_) {
    [self resetHeightInfoWithInt:0 withInt:[((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) size] - 1];
  }
  lastEditedRow_ = -1;
  [self refreshItems];
}

- (void)contentsChangedWithId:(id)source
                      withInt:(int)index0
                      withInt:(int)index1 {
  if (!fixedRowSize_) {
    [self resetHeightInfoWithInt:index0 withInt:index1];
  }
  [self rowsChangedWithInt:index0 withInt:index1];
}

- (void)editCellWithInt:(int)row
                withInt:(int)col {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)intervalAddedWithId:(id)source
                    withInt:(int)index0
                    withInt:(int)index1 {
  if (!fixedRowSize_) {
    [self resetHeightInfoWithInt:index0 withInt:index1];
  }
  lastEditedRow_ = -1;
  [self refreshItems];
}

- (void)intervalRemovedWithId:(id)source
                      withInt:(int)index0
                      withInt:(int)index1
             withJavaUtilList:(id<JavaUtilList>)removed {
  lastEditedRow_ = -1;
  [self refreshItems];
}

- (void)paintRowWithRAREaTableBasedView_RowView:(RAREaTableBasedView_RowView *)view
                          withRAREAppleGraphics:(RAREAppleGraphics *)g
                     withRARERenderableDataItem:(RARERenderableDataItem *)item
                            withRAREUIRectangle:(RAREUIRectangle *)rect
                              withRAREiTreeItem:(id<RAREiTreeItem>)ti {
  [((RAREaTableBasedView_RowView *) nil_chk(view)) paintWithRAREAppleGraphics:g withRAREUIRectangle:rect];
}

- (void)propertyChangeWithJavaBeansPropertyChangeEvent:(JavaBeansPropertyChangeEvent *)e {
  [super propertyChangeWithJavaBeansPropertyChangeEvent:e];
  if (border_ != nil) {
    RAREUIInsets *in = [border_ getBorderInsetsWithRAREUIInsets:nil];
    leftOffset_ = [((RAREUIInsets *) nil_chk(in)) intLeft];
    rightOffset_ = [in intRight];
  }
  else {
    leftOffset_ = 0;
    rightOffset_ = 0;
  }
}

- (void)refreshItems {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)repaintRowWithInt:(int)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)repaintVisibleRows {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)removePressedHilightWithInt:(int)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)reloadVisibleRows {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)repaintRowWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  int n = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) indexOfWithId:item];
  if (n != -1) {
    [self repaintRowWithInt:n];
  }
}

- (int)rowAtPointWithFloat:(float)x
                 withFloat:(float)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)rowChangedWithInt:(int)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)rowChangedWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  int n = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) indexOfWithId:item];
  if (n != -1) {
    [self rowChangedWithInt:n];
  }
}

- (void)rowsChangedWithInt:(int)firstRow
                   withInt:(int)lastRow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)rowsDeletedWithInt:(int)firstRow
                   withInt:(int)lastRow {
  lastEditedRow_ = -1;
  [self refreshItems];
}

- (void)rowsInsertedWithInt:(int)firstRow
                    withInt:(int)lastRow {
  lastEditedRow_ = -1;
  [self refreshItems];
}

- (void)structureChangedWithId:(id)source {
  if (!fixedRowSize_) {
    [self resetHeightInfoWithInt:0 withInt:[((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) size] - 1];
  }
  lastEditedRow_ = -1;
  [self refreshItems];
}

- (void)setActionListenerWithRAREiActionListener:(id<RAREiActionListener>)actionListener {
  self->actionListener_ = actionListener;
}

- (void)setAllowsSelectionDuringEditingWithBoolean:(BOOL)allowsSelectionDuringEditing {
  self->allowsSelectionDuringEditing_ = allowsSelectionDuringEditing;
}

- (void)setAlternatingColorWithRAREUIColor:(RAREUIColor *)alternatingColor {
  self->alternatingColor_ = alternatingColor;
}

- (void)setAlternatingColumnsWithBoolean:(BOOL)alternatingColumns {
  self->alternatingColumns_ = alternatingColumns;
}

- (void)setAlternatingRowColorWithRAREUIColor:(RAREUIColor *)alternatingColor {
  self->alternatingColor_ = alternatingColor;
}

- (void)setAutoEndEditingWithBoolean:(BOOL)autoEndEditing {
  self->autoEndEditing_ = autoEndEditing;
}

- (void)setAutoHilightWithBoolean:(BOOL)autoHilight {
}

- (void)makeSelectionVisible {
  int index = [self getSelectedIndex];
  if (index != -1) {
    [self scrollRowToVisibleWithInt:index];
  }
}

- (void)setDividerLineWithRAREUIColor:(RAREUIColor *)color
                     withRAREUIStroke:(RAREUIStroke *)stroke {
  dividerLineColor_ = color;
  dividerStroke_ = stroke;
}

- (void)setEditableWithBoolean:(BOOL)editable {
  self->editable_ = editable;
}

- (void)setEditingModeWithRAREiListView_EditingModeEnum:(RAREiListView_EditingModeEnum *)mode {
  if (mode == nil) {
    mode = [RAREiListView_EditingModeEnum NONE];
  }
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((RAREComponent *) nil_chk([RAREComponent fromViewWithRAREView:self])) getWidget], [RAREaListViewer class]);
  editingMode_ = mode;
  draggingAllowed_ = (mode == [RAREiListView_EditingModeEnum REORDERING]) || (mode == [RAREiListView_EditingModeEnum REORDERING_AND_SELECTION]) || (mode == [RAREiListView_EditingModeEnum REORDERING_AND_DELETEING]);
  editingSelectionAllowed_ = (mode == [RAREiListView_EditingModeEnum SELECTION]) || (mode == [RAREiListView_EditingModeEnum REORDERING_AND_SELECTION]);
  deletingAllowed_ = [((RAREaListViewer *) nil_chk(lv)) canDelete];
}

- (void)setEditingSwipingAllowedWithBoolean:(BOOL)editingSwipingAllowed {
  self->editingSwipingAllowed_ = editingSwipingAllowed;
}

- (void)setExtendBackgroundRenderingWithBoolean:(BOOL)extendBackgroundRendering {
  self->extendBackgroundRendering_ = extendBackgroundRendering;
}

- (void)setFlingThresholdWithInt:(int)i {
}

- (void)setItemRendererWithRAREListItemRenderer:(RAREListItemRenderer *)lr {
  itemRenderer_ = lr;
}

- (void)setListModelWithRAREiPlatformListDataModel:(id<RAREiPlatformListDataModel>)listModel {
  self->listModel_ = listModel;
  lastEditedRow_ = -1;
}

- (void)setMinRowHeightWithInt:(int)min {
  minRowHeight_ = min;
  if (min > [self getRowHeight]) {
    [self setRowHeightWithInt:min];
  }
  else if (rowHeight_ == 0) {
    effectiveMinRowHeight_ = min;
  }
}

- (void)setMinimumVisibleRowCountWithInt:(int)rows {
  minVisibleRows_ = rows;
}

- (void)setRowHeightWithInt:(int)height {
  if (height < minRowHeight_) {
    height = minRowHeight_;
  }
  self->rowHeight_ = height;
  [self setRowHeightExWithInt:height];
  effectiveMinRowHeight_ = height;
}

- (void)setSelectFlingedWithBoolean:(BOOL)b {
}

- (void)setSelectableWithBoolean:(BOOL)selectable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setSelectedIndexWithInt:(int)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setSelectedIndexesWithIntArray:(IOSIntArray *)indices {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setSelectedItemWithRARERenderableDataItem:(RARERenderableDataItem *)value {
  if (listModel_ != nil) {
    int n = [RARERenderableDataItem findValueExWithJavaUtilList:listModel_ withId:value];
    if (n != -1) {
      [self setSelectedIndexWithInt:n];
    }
  }
}

- (void)setSelectionChangeListenerWithRAREiItemChangeListener:(id<RAREiItemChangeListener>)changeListener {
  self->changeListener_ = changeListener;
}

- (void)setSelectionModeWithRAREiListHandler_SelectionModeEnum:(RAREiListHandler_SelectionModeEnum *)selectionMode {
  switch ([selectionMode ordinal]) {
    case RAREiListHandler_SelectionMode_NONE:
    [self setMultipleSelectionWithBoolean:NO];
    [self setSelectableWithBoolean:NO];
    break;
    case RAREiListHandler_SelectionMode_INVISIBLE:
    [self setMultipleSelectionWithBoolean:NO];
    selectable_ = YES;
    break;
    case RAREiListHandler_SelectionMode_MULTIPLE:
    [self setMultipleSelectionWithBoolean:YES];
    break;
    default:
    [self setMultipleSelectionWithBoolean:NO];
    break;
  }
}

- (void)setSelectionTypeWithRAREiListHandler_SelectionTypeEnum:(RAREiListHandler_SelectionTypeEnum *)type {
  self->selectionType_ = type;
}

- (void)setShowDividerWithBoolean:(BOOL)show {
  showDivider_ = show;
}

- (void)setShowLastDividerWithBoolean:(BOOL)show {
  showLastDivider_ = show;
}

- (void)setVisibleRowCountWithInt:(int)rows {
  visibleRows_ = rows;
}

- (void)setWholeViewFlingWithBoolean:(BOOL)b {
}

- (id<RAREiActionListener>)getActionListener {
  return actionListener_;
}

- (RAREUIColor *)getAlternatingColor {
  return alternatingColor_;
}

- (RAREUIColor *)getAlternatingRowColor {
  return alternatingColumns_ ? nil : alternatingColor_;
}

- (id<RAREiItemChangeListener>)getChangeListener {
  return changeListener_;
}

- (int)getEditingRow {
  return editingRow_;
}

- (int)getHilightedIndex {
  return -1;
}

- (int)getLastEditedRow {
  return lastEditedRow_;
}

- (id<RAREiPlatformComponent>)getListComponent {
  return [self getComponent];
}

- (int)getMinRowHeight {
  return minRowHeight_;
}

- (void)getMinimumSizeWithRAREUIDimension:(RAREUIDimension *)size
                                withFloat:(float)maxWidth {
  int h = [RARETableHelper getMinimumListHeightWithRAREiPlatformComponent:[RAREComponent findFromViewWithRAREView:self] withInt:minVisibleRows_ withInt:rowHeight_];
  int ch = [RAREScreenUtils toPlatformPixelsWithFloat:1 withRAREiPlatformComponent:component_ withBoolean:YES];
  ((RAREUIDimension *) nil_chk(size))->width_ = ch * 3;
  size->height_ = h;
}

- (int)getContextMenuIndex {
  return popupMenuIndex_;
}

- (int)getRowHeightWithInt:(int)row
                 withFloat:(float)maxWidth {
  int rh = [self getRowHeight];
  if (fixedRowSize_) {
    return rh;
  }
  RAREUIDimension *size = rowHeightCalSize_;
  if (size == nil) {
    size = rowHeightCalSize_ = [[RAREUIDimension alloc] init];
  }
  [RARETableHelper calculateItemSizeWithRAREiPlatformComponent:component_ withRAREiPlatformItemRenderer:itemRenderer_ withRAREColumn:[((RAREListItemRenderer *) nil_chk(itemRenderer_)) getItemDescription] withRARERenderableDataItem:[((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row] withInt:row withRARERenderableDataItem:nil withRAREUIDimension:size withInt:(int) maxWidth withInt:rh];
  rh = (int) [JavaLangMath ceilWithDouble:((RAREUIDimension *) nil_chk(size))->height_];
  if (rh < effectiveMinRowHeight_) {
    rh = effectiveMinRowHeight_;
  }
  return rh;
}

- (int)getRowCount {
  return (listModel_ != nil) ? [listModel_ size] : 0;
}

- (int)getRowHeight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getSelectedIndex {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (RAREiListHandler_SelectionTypeEnum *)getSelectionType {
  return selectionType_;
}

- (int)getVisibleRowCount {
  return visibleRows_;
}

- (BOOL)isAllowsSelectionDuringEditing {
  return allowsSelectionDuringEditing_;
}

- (BOOL)isAlternatingColumns {
  return alternatingColumns_;
}

- (BOOL)isAutoEndEditing {
  return autoEndEditing_;
}

- (BOOL)isAutoHilight {
  return NO;
}

- (BOOL)isEditingSwipingAllowed {
  return editingSwipingAllowed_;
}

- (BOOL)isExtendBackgroundRendering {
  return extendBackgroundRendering_;
}

- (BOOL)isMultipleSelectionAllowed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isRowSelectedWithInt:(int)row {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isRowSizeFixed {
  return fixedRowSize_;
}

- (BOOL)isSelectable {
  return selectable_;
}

- (BOOL)checkForCellHotspotWithInt:(int)row
                         withFloat:(float)x
                         withFloat:(float)y
                         withFloat:(float)width
                         withFloat:(float)height {
  return NO;
}

- (void)disposeEx {
  changeListener_ = nil;
  actionListener_ = nil;
  listModel_ = nil;
  [super disposeEx];
}

- (void)mouseClickedWithRAREMouseEvent:(RAREMouseEvent *)e
                           withBoolean:(BOOL)mouseDown
                             withFloat:(float)width
                             withFloat:(float)height {
  pressed_ = mouseDown;
}

- (void)resetHeightInfoWithInt:(int)index0
                       withInt:(int)index1 {
  index1++;
  id<RAREiPlatformListDataModel> list = listModel_;
  int len = [((id<RAREiPlatformListDataModel>) nil_chk(list)) size];
  if (index1 > len) {
    index1 = len;
  }
  for (int i = index0; i < index1; i++) {
    [((RARERenderableDataItem *) nil_chk([list getWithInt:i])) setHeightWithInt:0];
  }
}

- (void)selectionChangedWithInt:(int)oldIndex
                        withInt:(int)newIndex {
  if (changeListener_ != nil) {
    RAREItemChangeEvent *e = [[RAREItemChangeEvent alloc] initWithId:self withId:[JavaLangInteger valueOfWithInt:oldIndex] withId:[JavaLangInteger valueOfWithInt:newIndex]];
    [changeListener_ itemChangedWithRAREItemChangeEvent:e];
  }
}

- (void)selectionChangedWithRAREUTIntList:(RAREUTIntList *)oldIndexes
                        withRAREUTIntList:(RAREUTIntList *)newIndexes {
  if (changeListener_ != nil) {
    RAREItemChangeEvent *e = [[RAREItemChangeEvent alloc] initWithId:self withId:oldIndexes withId:newIndexes];
    [changeListener_ itemChangedWithRAREItemChangeEvent:e];
  }
}

- (void)setupNewRenderingCellWithId:(id)nativeView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setMultipleSelectionWithBoolean:(BOOL)multiple {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setRowHeightExWithInt:(int)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (RAREPaintBucket *)getPressedPainter {
  return [((RAREListItemRenderer *) nil_chk(itemRenderer_)) getPressedPaint];
}

- (float)getSelectionPaintEndXWithFloat:(float)currentEndX {
  return currentEndX;
}

- (float)getSelectionPaintStartXWithFloat:(float)currentStartX {
  return currentStartX;
}

- (RAREPaintBucket *)getSelectionPainter {
  if (![self isEditing]) {
    return [((RAREListItemRenderer *) nil_chk(itemRenderer_)) getSelectionPaintForExternalPainterWithBoolean:NO];
  }
  return nil;
}

- (RAREaTableBasedView_RowView *)getViewForRowWithInt:(int)index {
  return nil;
}

- (BOOL)isSelectableWithInt:(int)row
 withRARERenderableDataItem:(RARERenderableDataItem *)item
          withRAREiTreeItem:(id<RAREiTreeItem>)ti {
  if (!selectable_ || (row < 0)) {
    return NO;
  }
  if (item == nil) {
    item = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row];
  }
  return [((RARERenderableDataItem *) nil_chk(item)) isSelectable];
}

- (BOOL)isSelectableWithInt:(int)row
                    withInt:(int)col
 withRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (!selectable_ || (row < 0)) {
    return NO;
  }
  if (item == nil) {
    item = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row];
  }
  if (![((RARERenderableDataItem *) nil_chk(item)) isSelectable]) {
    return NO;
  }
  if (col == -1) {
    return YES;
  }
  item = [item getItemExWithInt:col];
  return (item != nil) && [item isSelectable];
}

- (int)getFirstVisibleIndex {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (RAREaListItemRenderer *)getItemRenderer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getLastVisibleIndex {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RAREiScrollerSupport>)getScrollerSupport {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isEditing {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isSingleClickAction {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)scrollRowToBottomWithInt:(int)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)scrollRowToTopWithInt:(int)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)scrollRowToVisibleWithInt:(int)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setSingleClickActionWithBoolean:(BOOL)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (void)initialize {
  if (self == [RAREaTableBasedView class]) {
    RAREaTableBasedView_ICON_GAP_ = [RAREScreenUtils PLATFORM_PIXELS_4];
    RAREaTableBasedView_SELECTION_ICON_SIZE_ = [RAREScreenUtils platformPixelsWithFloat:24];
    RAREaTableBasedView_INDICATOR_SLOP_ = [RAREScreenUtils platformPixelsWithFloat:[RAREPlatform isTouchDevice] ? 24 : 5];
  }
}

- (void)copyAllFieldsTo:(RAREaTableBasedView *)other {
  [super copyAllFieldsTo:other];
  other->EMPTY_ARRAY_ = EMPTY_ARRAY_;
  other->actionListener_ = actionListener_;
  other->allowsSelectionDuringEditing_ = allowsSelectionDuringEditing_;
  other->alternatingColor_ = alternatingColor_;
  other->alternatingColumns_ = alternatingColumns_;
  other->autoEndEditing_ = autoEndEditing_;
  other->centerEditingComponentVertically_ = centerEditingComponentVertically_;
  other->changeListener_ = changeListener_;
  other->checkboxHeight_ = checkboxHeight_;
  other->checkboxWidth_ = checkboxWidth_;
  other->deletingAllowed_ = deletingAllowed_;
  other->dividerLineColor_ = dividerLineColor_;
  other->dividerStroke_ = dividerStroke_;
  other->draggingAllowed_ = draggingAllowed_;
  other->editable_ = editable_;
  other->editingMode_ = editingMode_;
  other->editingRow_ = editingRow_;
  other->editingSelectionAllowed_ = editingSelectionAllowed_;
  other->editingSwipingAllowed_ = editingSwipingAllowed_;
  other->effectiveMinRowHeight_ = effectiveMinRowHeight_;
  other->extendBackgroundRendering_ = extendBackgroundRendering_;
  other->fixedRowSize_ = fixedRowSize_;
  other->indicatorHeight_ = indicatorHeight_;
  other->indicatorWidth_ = indicatorWidth_;
  other->itemRenderer_ = itemRenderer_;
  other->keepSelectionVisible_ = keepSelectionVisible_;
  other->lastEditedRow_ = lastEditedRow_;
  other->leftOffset_ = leftOffset_;
  other->listModel_ = listModel_;
  other->lostFoucsSelectionPainter_ = lostFoucsSelectionPainter_;
  other->minRowHeight_ = minRowHeight_;
  other->minVisibleRows_ = minVisibleRows_;
  other->oldWidth_aTableBasedView_ = oldWidth_aTableBasedView_;
  other->popupMenuIndex_ = popupMenuIndex_;
  other->pressedPainter_ = pressedPainter_;
  other->rightOffset_ = rightOffset_;
  other->rowHeight_ = rowHeight_;
  other->rowHeightCalSize_ = rowHeightCalSize_;
  other->selectable_ = selectable_;
  other->selectionPainter_ = selectionPainter_;
  other->selectionType_ = selectionType_;
  other->showDivider_ = showDivider_;
  other->showLastDivider_ = showLastDivider_;
  other->singleClickAction_ = singleClickAction_;
  other->visibleRows_ = visibleRows_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithId:", NULL, NULL, 0x4, NULL },
    { "isKeepSelectionVisible", NULL, "Z", 0x1, NULL },
    { "addSelectionIndexWithInt:", NULL, "V", 0x401, NULL },
    { "getSelectedIndexCount", NULL, "I", 0x401, NULL },
    { "editCellWithInt:withInt:", NULL, "V", 0x401, NULL },
    { "refreshItems", NULL, "V", 0x401, NULL },
    { "repaintRowWithInt:", NULL, "V", 0x401, NULL },
    { "repaintVisibleRows", NULL, "V", 0x401, NULL },
    { "removePressedHilightWithInt:", NULL, "V", 0x404, NULL },
    { "reloadVisibleRows", NULL, "V", 0x404, NULL },
    { "rowAtPointWithFloat:withFloat:", NULL, "I", 0x401, NULL },
    { "rowChangedWithInt:", NULL, "V", 0x401, NULL },
    { "rowsChangedWithInt:withInt:", NULL, "V", 0x401, NULL },
    { "setSelectableWithBoolean:", NULL, "V", 0x401, NULL },
    { "setSelectedIndexWithInt:", NULL, "V", 0x401, NULL },
    { "setSelectedIndexesWithIntArray:", NULL, "V", 0x401, NULL },
    { "getActionListener", NULL, "LRAREiActionListener", 0x1, NULL },
    { "getAlternatingColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getAlternatingRowColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getChangeListener", NULL, "LRAREiItemChangeListener", 0x1, NULL },
    { "getListComponent", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getRowHeight", NULL, "I", 0x401, NULL },
    { "getSelectedIndex", NULL, "I", 0x401, NULL },
    { "getSelectionType", NULL, "LRAREiListHandler_SelectionTypeEnum", 0x1, NULL },
    { "isAllowsSelectionDuringEditing", NULL, "Z", 0x1, NULL },
    { "isAlternatingColumns", NULL, "Z", 0x1, NULL },
    { "isAutoEndEditing", NULL, "Z", 0x1, NULL },
    { "isAutoHilight", NULL, "Z", 0x1, NULL },
    { "isEditingSwipingAllowed", NULL, "Z", 0x1, NULL },
    { "isExtendBackgroundRendering", NULL, "Z", 0x1, NULL },
    { "isMultipleSelectionAllowed", NULL, "Z", 0x401, NULL },
    { "isRowSelectedWithInt:", NULL, "Z", 0x401, NULL },
    { "isRowSizeFixed", NULL, "Z", 0x1, NULL },
    { "isSelectable", NULL, "Z", 0x1, NULL },
    { "checkForCellHotspotWithInt:withFloat:withFloat:withFloat:withFloat:", NULL, "Z", 0x4, NULL },
    { "disposeEx", NULL, "V", 0x4, NULL },
    { "mouseClickedWithRAREMouseEvent:withBoolean:withFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "resetHeightInfoWithInt:withInt:", NULL, "V", 0x4, NULL },
    { "selectionChangedWithInt:withInt:", NULL, "V", 0x4, NULL },
    { "selectionChangedWithRAREUTIntList:withRAREUTIntList:", NULL, "V", 0x4, NULL },
    { "setupNewRenderingCellWithId:", NULL, "V", 0x404, NULL },
    { "setMultipleSelectionWithBoolean:", NULL, "V", 0x404, NULL },
    { "setRowHeightExWithInt:", NULL, "V", 0x404, NULL },
    { "getPressedPainter", NULL, "LRAREPaintBucket", 0x4, NULL },
    { "getSelectionPaintEndXWithFloat:", NULL, "F", 0x4, NULL },
    { "getSelectionPaintStartXWithFloat:", NULL, "F", 0x4, NULL },
    { "getSelectionPainter", NULL, "LRAREPaintBucket", 0x4, NULL },
    { "getViewForRowWithInt:", NULL, "LRAREaTableBasedView_RowView", 0x4, NULL },
    { "isSelectableWithInt:withRARERenderableDataItem:withRAREiTreeItem:", NULL, "Z", 0x4, NULL },
    { "isSelectableWithInt:withInt:withRARERenderableDataItem:", NULL, "Z", 0x4, NULL },
    { "getFirstVisibleIndex", NULL, "I", 0x401, NULL },
    { "getItemRenderer", NULL, "LRAREaListItemRenderer", 0x401, NULL },
    { "getLastVisibleIndex", NULL, "I", 0x401, NULL },
    { "getScrollerSupport", NULL, "LRAREiScrollerSupport", 0x401, NULL },
    { "isEditing", NULL, "Z", 0x401, NULL },
    { "isSingleClickAction", NULL, "Z", 0x401, NULL },
    { "scrollRowToBottomWithInt:", NULL, "V", 0x401, NULL },
    { "scrollRowToTopWithInt:", NULL, "V", 0x401, NULL },
    { "scrollRowToVisibleWithInt:", NULL, "V", 0x401, NULL },
    { "setSingleClickActionWithBoolean:", NULL, "V", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "ICON_GAP_", NULL, 0x1c, "I" },
    { "PAD_SIZE_", NULL, 0x1c, "I" },
    { "SELECTION_ICON_SIZE_", NULL, 0x1c, "I" },
    { "INDICATOR_SLOP_", NULL, 0xc, "I" },
    { "EMPTY_ARRAY_", NULL, 0x4, "LIOSIntArray" },
    { "editingRow_", NULL, 0x4, "I" },
    { "lastEditedRow_", NULL, 0x4, "I" },
    { "selectable_", NULL, 0x4, "Z" },
    { "fixedRowSize_", NULL, 0x4, "Z" },
    { "editable_", NULL, 0x4, "Z" },
    { "showLastDivider_", NULL, 0x4, "Z" },
    { "extendBackgroundRendering_", NULL, 0x4, "Z" },
    { "allowsSelectionDuringEditing_", NULL, 0x4, "Z" },
    { "actionListener_", NULL, 0x4, "LRAREiActionListener" },
    { "alternatingColor_", NULL, 0x4, "LRAREUIColor" },
    { "alternatingColumns_", NULL, 0x4, "Z" },
    { "autoEndEditing_", NULL, 0x4, "Z" },
    { "centerEditingComponentVertically_", NULL, 0x4, "Z" },
    { "changeListener_", NULL, 0x4, "LRAREiItemChangeListener" },
    { "checkboxHeight_", NULL, 0x4, "I" },
    { "checkboxWidth_", NULL, 0x4, "I" },
    { "deletingAllowed_", NULL, 0x4, "Z" },
    { "dividerLineColor_", NULL, 0x4, "LRAREUIColor" },
    { "dividerStroke_", NULL, 0x4, "LRAREUIStroke" },
    { "draggingAllowed_", NULL, 0x4, "Z" },
    { "editingMode_", NULL, 0x4, "LRAREiListView_EditingModeEnum" },
    { "editingSelectionAllowed_", NULL, 0x4, "Z" },
    { "editingSwipingAllowed_", NULL, 0x4, "Z" },
    { "effectiveMinRowHeight_", NULL, 0x4, "I" },
    { "indicatorHeight_", NULL, 0x4, "I" },
    { "indicatorWidth_", NULL, 0x4, "I" },
    { "itemRenderer_", NULL, 0x4, "LRAREListItemRenderer" },
    { "leftOffset_", NULL, 0x4, "I" },
    { "listModel_", NULL, 0x4, "LRAREiPlatformListDataModel" },
    { "lostFoucsSelectionPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "minRowHeight_", NULL, 0x4, "I" },
    { "minVisibleRows_", NULL, 0x4, "I" },
    { "popupMenuIndex_", NULL, 0x4, "I" },
    { "pressedPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "rightOffset_", NULL, 0x4, "I" },
    { "rowHeight_", NULL, 0x4, "I" },
    { "selectionPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "selectionType_", NULL, 0x4, "LRAREiListHandler_SelectionTypeEnum" },
    { "showDivider_", NULL, 0x4, "Z" },
    { "singleClickAction_", NULL, 0x4, "Z" },
    { "visibleRows_", NULL, 0x4, "I" },
    { "keepSelectionVisible_", NULL, 0x4, "Z" },
    { "rowHeightCalSize_", NULL, 0x4, "LRAREUIDimension" },
  };
  static J2ObjcClassInfo _RAREaTableBasedView = { "aTableBasedView", "com.appnativa.rare.platform.apple.ui.view", NULL, 0x401, 60, methods, 48, fields, 0, NULL};
  return &_RAREaTableBasedView;
}

@end
@implementation RAREaTableBasedView_RowView

- (id)initWithRAREaTableBasedView:(RAREaTableBasedView *)outer$
                           withId:(id)proxy {
  this$0_ = outer$;
  if (self = [super initWithId:proxy]) {
    indent_ = 0;
  }
  return self;
}

- (void)hideRowEditingComponentWithBoolean:(BOOL)animate {
}

- (void)paintWithRAREAppleGraphics:(RAREAppleGraphics *)g
               withRAREUIRectangle:(RAREUIRectangle *)rect {
  [self paintBackgroundWithRAREAppleGraphics:g withRAREView:self withRAREUIRectangle:rect];
  [self paintOverlayWithRAREAppleGraphics:g withRAREView:self withRAREUIRectangle:rect];
  float left = ((RAREUIRectangle *) nil_chk(rect))->x_ + indent_ + RAREaTableBasedView_PAD_SIZE + this$0_->leftOffset_;
  if (indicator_ != nil) {
    float top = (rect->height_ - this$0_->indicatorHeight_) / 2;
    [indicator_ paintWithRAREiPlatformGraphics:g withFloat:left withFloat:top withFloat:this$0_->indicatorWidth_ withFloat:this$0_->indicatorHeight_];
  }
  if (checkboxIcon_ != nil) {
    float top = (rect->height_ - this$0_->checkboxHeight_) / 2;
    if (this$0_->selectionType_ == [RAREiListHandler_SelectionTypeEnum CHECKED_RIGHT]) {
      left = rect->width_ - RAREaTableBasedView_PAD_SIZE - this$0_->checkboxWidth_ - this$0_->rightOffset_;
    }
    else if (this$0_->indicatorWidth_ > 0) {
      left += [RAREaTableBasedView ICON_GAP] + this$0_->indicatorWidth_;
    }
    [checkboxIcon_ paintWithRAREiPlatformGraphics:g withFloat:left withFloat:top withFloat:this$0_->checkboxWidth_ withFloat:this$0_->checkboxHeight_];
  }
}

- (void)paintBackgroundWithRAREAppleGraphics:(RAREAppleGraphics *)g
                                withRAREView:(RAREView *)v
                         withRAREUIRectangle:(RAREUIRectangle *)rect {
  float height = ((RAREUIRectangle *) nil_chk(rect))->height_;
  if (this$0_->showDivider_) {
    height--;
  }
  if (componentPainter_ != nil) {
    [componentPainter_ paintWithRAREiPlatformGraphics:g withFloat:rect->x_ withFloat:rect->y_ withFloat:rect->width_ withFloat:height withInt:RAREiPainter_UNKNOWN];
  }
  RAREPaintBucket *pb = [self getBackgroundPaintWithBoolean:(this$0_->popupMenuIndex_ == -1) ? [self isPressed] : NO withBoolean:[self isSelected]];
  float sx = [this$0_ getSelectionPaintStartXWithFloat:rect->x_];
  float ex = [this$0_ getSelectionPaintEndXWithFloat:rect->x_ + rect->width_];
  if (pb != nil) {
    [RAREaUIComponentPainter paintWithRAREiPlatformGraphics:g withFloat:sx withFloat:rect->y_ withFloat:ex - sx withFloat:height withRAREPaintBucket:pb];
  }
}

- (RAREPaintBucket *)getBackgroundPaintWithBoolean:(BOOL)pressed
                                       withBoolean:(BOOL)selected {
  RAREPaintBucket *pb = nil;
  if (this$0_->popupMenuIndex_ != -1) {
    if ((this$0_->popupMenuIndex_ == row_) || (selected && [this$0_ isRowSelectedWithInt:this$0_->popupMenuIndex_])) {
      pb = [((RAREListItemRenderer *) nil_chk(this$0_->itemRenderer_)) getAutoHilightPaint];
    }
  }
  if (pb == nil) {
    if (pressed) {
      pb = [((RAREListItemRenderer *) nil_chk(this$0_->itemRenderer_)) getPressedPaint];
    }
    else if (!editing_ && selected) {
      pb = [((RAREListItemRenderer *) nil_chk(this$0_->itemRenderer_)) getSelectionPaintForExternalPainterWithBoolean:NO];
    }
  }
  return pb;
}

- (void)showRowEditingComponentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)component
                                              withBoolean:(BOOL)animate {
}

- (void)setComponentPainterWithRAREiPlatformComponentPainter:(id<RAREiPlatformComponentPainter>)cp {
  self->componentPainter_ = cp;
}

- (void)setEditingWithBoolean:(BOOL)editing {
  self->editing_ = editing;
  if (editing) {
    checkedInEditMode_ = [((id<RAREiPlatformListDataModel>) nil_chk(this$0_->listModel_)) editModeIsItemMarkedWithInt:row_];
  }
}

- (void)setImageWithRAREUIImage:(RAREUIImage *)image {
}

- (void)setNativeViewWithId:(id)proxy {
  [self setProxyWithId:proxy];
}

- (void)setPaintHandlerEnabledWithBoolean:(BOOL)enabled {
}

- (void)disposeEx {
  indicator_ = nil;
  [super disposeEx];
}

- (void)prepareForReuseWithInt:(int)row
                       withInt:(int)col {
  self->row_ = row;
  self->column_ = col;
  [self clearVisualState];
}

- (BOOL)isMouseTransparent {
  return YES;
}

- (void)setFocusListenerEnabledWithBoolean:(BOOL)enabled {
}

- (void)setKeyBoardHandlerEnabledWithBoolean:(BOOL)enabled {
}

- (void)setMouseHandlerEnabledWithBoolean:(BOOL)enabled {
}

- (void)setMouseMotionHandlerEnabledWithBoolean:(BOOL)enabled {
}

- (void)copyAllFieldsTo:(RAREaTableBasedView_RowView *)other {
  [super copyAllFieldsTo:other];
  other->checkboxIcon_ = checkboxIcon_;
  other->checkedInEditMode_ = checkedInEditMode_;
  other->column_ = column_;
  other->editing_ = editing_;
  other->indent_ = indent_;
  other->indicator_ = indicator_;
  other->row_ = row_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getBackgroundPaintWithBoolean:withBoolean:", NULL, "LRAREPaintBucket", 0x0, NULL },
    { "disposeEx", NULL, "V", 0x4, NULL },
    { "prepareForReuseWithInt:withInt:", NULL, "V", 0x4, NULL },
    { "isMouseTransparent", NULL, "Z", 0x1, NULL },
    { "setFocusListenerEnabledWithBoolean:", NULL, "V", 0x4, NULL },
    { "setKeyBoardHandlerEnabledWithBoolean:", NULL, "V", 0x4, NULL },
    { "setMouseHandlerEnabledWithBoolean:", NULL, "V", 0x4, NULL },
    { "setMouseMotionHandlerEnabledWithBoolean:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaTableBasedView" },
    { "indent_", NULL, 0x1, "I" },
    { "checkboxIcon_", NULL, 0x1, "LRAREiPlatformIcon" },
    { "column_", NULL, 0x1, "I" },
    { "indicator_", NULL, 0x1, "LRAREiPlatformIcon" },
    { "row_", NULL, 0x1, "I" },
    { "checkedInEditMode_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _RAREaTableBasedView_RowView = { "RowView", "com.appnativa.rare.platform.apple.ui.view", "aTableBasedView", 0x1, 8, methods, 7, fields, 0, NULL};
  return &_RAREaTableBasedView_RowView;
}

@end
