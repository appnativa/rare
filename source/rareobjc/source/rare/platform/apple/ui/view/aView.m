//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple/com/appnativa/rare/platform/apple/ui/view/aView.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/platform/apple/ui/util/AppleGraphics.h"
#include "com/appnativa/rare/platform/apple/ui/view/View.h"
#include "com/appnativa/rare/platform/apple/ui/view/aView.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/Displayed.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/SimpleColorStateList.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorShade.h"
#include "com/appnativa/rare/ui/UICursor.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/border/SharedLineBorder.h"
#include "com/appnativa/rare/ui/border/UICompoundBorder.h"
#include "com/appnativa/rare/ui/border/UIEmptyBorder.h"
#include "com/appnativa/rare/ui/border/UILineBorder.h"
#include "com/appnativa/rare/ui/effects/aAnimator.h"
#include "com/appnativa/rare/ui/event/ChangeEvent.h"
#include "com/appnativa/rare/ui/event/KeyEvent.h"
#include "com/appnativa/rare/ui/event/MouseEvent.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/event/iChangeListener.h"
#include "com/appnativa/rare/ui/iGestureListener.h"
#include "com/appnativa/rare/ui/iPaintedButton.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformPath.h"
#include "com/appnativa/rare/ui/listener/iFocusListener.h"
#include "com/appnativa/rare/ui/listener/iKeyListener.h"
#include "com/appnativa/rare/ui/listener/iMouseListener.h"
#include "com/appnativa/rare/ui/listener/iMouseMotionListener.h"
#include "com/appnativa/rare/ui/listener/iViewListener.h"
#include "com/appnativa/rare/ui/painter/UIBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/ui/painter/UIImagePainter.h"
#include "com/appnativa/rare/ui/painter/UISimpleBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iImagePainter.h"
#include "com/appnativa/rare/ui/painter/iPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformPainter.h"
#include "java/beans/PropertyChangeEvent.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Throwable.h"
#import "AppleHelper.h"
 #import "APView+Component.h"
 #import "RAREAPView.h"
 #import "RAREAPWindow.h"
 #import "RARECALayer.h"
 #import "RARECAGradientLayer.h"

@implementation RAREaView

- (id)initWithId:(id)nsview {
  if (self = [super init]) {
    enabledAlpha_ = -1;
    enabled_ = YES;
    usePainterBorder_ = YES;
    useMainLayerForPainter_ = YES;
    [self setProxyWithId:nsview];
  }
  return self;
}

- (id)init {
  if (self = [super init]) {
    enabledAlpha_ = -1;
    enabled_ = YES;
    usePainterBorder_ = YES;
    useMainLayerForPainter_ = YES;
  }
  return self;
}

- (void)borderChangedWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)newBorder {
  if (newBorder != nil) {
    [self removeNativeBorder];
  }
  else {
    [self restoreNativeBorder];
  }
}

- (void)clearVisualState {
  foregroundColor_ = nil;
  font_ = nil;
  componentPainter_ = nil;
  overlayPainter_ = nil;
  backgroundPainter_ = nil;
  bgOverlayPainter_ = nil;
  border_ = nil;
  modCountBackgroundPainter_ = 0;
  modCountBgOverlayPainter_ = 0;
  modCountBorder_ = 0;
  modCountOverlayPainter_ = 0;
  layerForBackgroundOverlay_ = NO;
  layerForOverlay_ = NO;
  oldHeight_ = -1;
  oldWidth_ = -1;
  [self setEnabledWithBoolean:YES];
  [self resetForRenderer];
}

+ (id)createAPView {
  return [[RAREAPView alloc]init];
}

- (void)dispatchEventWithRAREKeyEvent:(RAREKeyEvent *)me {
}

- (void)dispatchEventWithRAREMouseEvent:(RAREMouseEvent *)me {
}

- (void)dispose {
  if (proxy_ != nil) {
    @try {
      if (componentPainter_ != nil) {
        [componentPainter_ removePropertyChangeListenerWithJavaBeansPropertyChangeListener:self];
        [componentPainter_ dispose];
      }
    }
    @catch (JavaLangThrowable *e) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    }
    if (overlayLayer_ != nil) {
      [self disposeLayerWithId:overlayLayer_];
    }
    @try {
      [self disposeEx];
    }
    @catch (JavaLangThrowable *e) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    }
    componentPainter_ = nil;
    component_ = nil;
    focusListener_ = nil;
    mouseListener_ = nil;
    mouseMotionListener_ = nil;
    keyListener_ = nil;
    viewListener_ = nil;
    parentView_ = nil;
    proxy_ = nil;
    clip_ = nil;
    borderPath_ = nil;
    border_ = nil;
    overlayPainter_ = nil;
    backgroundPainter_ = nil;
    changeEvent_ = nil;
    overlayLayer_ = nil;
  }
}

- (BOOL)letComponentPainterPaintWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)b {
  if (border_ != b) {
    if ((componentPainter_ == nil) || ([componentPainter_ getBorder] != b)) {
      return YES;
    }
  }
  return usePainterBorder_;
}

- (BOOL)letComponentPainterPaintWithRAREiPlatformPainter:(id<RAREiPlatformPainter>)p {
  if ((backgroundPainter_ != p) && (bgOverlayPainter_ != p) && (overlayPainter_ != p)) {
    return YES;
  }
  if ((p == overlayPainter_) && !layerForOverlay_) {
    return YES;
  }
  if ((p == bgOverlayPainter_) && !layerForBackgroundOverlay_) {
    return YES;
  }
  if ([((id<RAREiPlatformPainter>) nil_chk(p)) canUseLayer] && [self isUseMainLayerForPainter]) {
    return NO;
  }
  return !transparent_;
}

- (void)makeOrphan {
  parentView_ = nil;
}

- (void)makeTransparent {
  transparent_=YES;
  CALayer* layer=(CALayer*)[self getLayer];
  layer.backgroundColor=[UIColor clearColor].CGColor;
}

- (BOOL)needsLayout {
  CALayer* layer=(CALayer*)[self getLayer];
  return [layer needsLayout];
}

- (void)paintBackgroundWithRAREAppleGraphics:(RAREAppleGraphics *)g
                                withRAREView:(RAREView *)v
                         withRAREUIRectangle:(RAREUIRectangle *)rect {
  if (componentPainter_ != nil) {
    [componentPainter_ paintWithRAREiPlatformGraphics:g withFloat:((RAREUIRectangle *) nil_chk(rect))->x_ withFloat:rect->y_ withFloat:rect->width_ withFloat:rect->height_ withInt:RAREiPainter_UNKNOWN withBoolean:NO];
  }
}

- (void)paintOverlayWithRAREAppleGraphics:(RAREAppleGraphics *)g
                             withRAREView:(RAREView *)v
                      withRAREUIRectangle:(RAREUIRectangle *)rect {
  if (componentPainter_ != nil) {
    [componentPainter_ paintWithRAREiPlatformGraphics:g withFloat:((RAREUIRectangle *) nil_chk(rect))->x_ withFloat:rect->y_ withFloat:rect->width_ withFloat:rect->height_ withInt:RAREiPainter_UNKNOWN withBoolean:YES];
  }
}

- (void)paintPainterWithRAREiPlatformPainter:(id<RAREiPlatformPainter>)p
                       withRAREAppleGraphics:(RAREAppleGraphics *)g
                                withRAREView:(RAREView *)v
                                   withFloat:(float)width
                                   withFloat:(float)height {
  [RAREaUIComponentPainter paintPainterWithRAREiPlatformPainter:p withRAREiPlatformGraphics:g withFloat:width withFloat:height];
}

- (void)propertyChangeWithJavaBeansPropertyChangeEvent:(JavaBeansPropertyChangeEvent *)e {
  if ([((JavaBeansPropertyChangeEvent *) nil_chk(e)) getSource] == componentPainter_) {
    if ([e getPropertyName] == [RAREiComponentPainter PROPERTY_BACKGROUND_PAINTER]) {
      [self setBackgroundPainterWithRAREiBackgroundPainter:[((id<RAREiPlatformComponentPainter>) nil_chk(componentPainter_)) getBackgroundPainter]];
    }
    else if ([e getPropertyName] == [RAREiComponentPainter PROPERTY_BORDER]) {
      if ([self isUsePainterBorder]) {
        [self setBorderWithRAREiPlatformBorder:[((id<RAREiPlatformComponentPainter>) nil_chk(componentPainter_)) getBorder]];
      }
    }
    else if ([e getPropertyName] == [RAREiComponentPainter PROPERTY_BACKGROUND_OVERLAY_PAINTER]) {
      [self setBackgroundOverlayPainterWithRAREiPlatformPainter:[((id<RAREiPlatformComponentPainter>) nil_chk(componentPainter_)) getBackgroundOverlayPainter]];
    }
    else if ([e getPropertyName] == [RAREiComponentPainter PROPERTY_OVERLAY_PAINTER]) {
      [self setOverlayPainterWithRAREiPlatformPainter:[((id<RAREiPlatformComponentPainter>) nil_chk(componentPainter_)) getOverlayPainter]];
    }
    [self stateChanged];
  }
}

- (void)removeNativeBorder {
  CALayer* layer=(CALayer*)[self getLayer];
  if([layer isKindOfClass:[RARECAGradientLayer class]]) {
    RARECAGradientLayer* gl=(RARECAGradientLayer*)layer;
    [gl removeNativeBorder];
  }
  else {
    layer.borderWidth=0;
    layer.borderColor=NULL;
  }
}

- (void)repaint {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)resetForRenderer {
  CALayer* layer=(CALayer*)[self getLayer];
  if([layer isKindOfClass:[RARECAGradientLayer class]]) {
    RARECAGradientLayer* gl=(RARECAGradientLayer*)layer;
    [gl sparResetLayerForRendererWithView: self];
  }
}

- (void)resetLayer {
  CALayer* layer=(CALayer*)[self getLayer];
  if([layer isKindOfClass:[RARECAGradientLayer class]]) {
    RARECAGradientLayer* gl=(RARECAGradientLayer*)layer;
    [gl sparResetLayer];
  }
}

- (void)restoreNativeBorder {
  [self removeNativeBorder];
}

- (void)revalidate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)set3DTransformWithId:(id)tx {
  CALayer* layer=(CALayer*)[self getLayer];
  CATransform3D value;
  [tx getValue:&value];
  layer.transform= value;
}

- (void)stateChanged {
  if (componentPainter_ != nil) {
    [componentPainter_ updateForStateWithRAREaView:self];
  }
  [self checkForegroundColor];
}

- (BOOL)usedLayerForBackgroundOverlay {
  return layerForBackgroundOverlay_;
}

- (BOOL)usedLayerForOverlay {
  return layerForOverlay_;
}

- (void)setActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
}

- (void)setBackgroundColorWithRAREUIColor:(RAREUIColor *)bg {
  if (componentPainter_ == nil) {
    [self setComponentPainterWithRAREiPlatformComponentPainter:[[RAREUIComponentPainter alloc] init]];
  }
  [((id<RAREiPlatformComponentPainter>) nil_chk(componentPainter_)) setBackgroundPainterWithRAREiBackgroundPainter:(bg == nil) ? nil : [[RAREUISimpleBackgroundPainter alloc] initWithRAREUIColor:bg] withBoolean:NO];
}

- (BOOL)setBackgroundColorExWithRAREUIColor:(RAREUIColor *)bg {
  CALayer* layer=(CALayer*)[self getLayer];
  layer.backgroundColor=(__bridge CGColorRef)(bg ? [bg getCGColor] : NULL);
  return YES;
}

- (void)setBackgroundOverlayPainterWithRAREiPlatformPainter:(id<RAREiPlatformPainter>)p {
  if ((p != bgOverlayPainter_) || ((p != nil) && ([p getModCount] != modCountBgOverlayPainter_))) {
    [self setBackgroundOverlayPainterExWithRAREiBackgroundPainter:nil];
    if (([(id) p isKindOfClass:[RAREUIImagePainter class]]) && [((id<RAREiPlatformPainter>) nil_chk(p)) canUseLayer]) {
      RAREUIImagePainter *ip = (RAREUIImagePainter *) check_class_cast(p, [RAREUIImagePainter class]);
      if ([((RAREiImagePainter_ScalingTypeEnum *) nil_chk([ip getScalingType])) isCached] || [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBooleanWithNSString:@"Rare.ImagePainter.useLayer" withBoolean:NO]) {
        layerForBackgroundOverlay_ = YES;
        if ([self imagePainterCheckedAndOkToAddWithRAREiPlatformPainter:p]) {
          [self setBackgroundOverlayPainterExWithRAREiBackgroundPainter:ip];
        }
      }
      else {
        [self setPaintHandlerEnabledWithBoolean:YES];
      }
    }
    else {
      if (p != nil) {
        [self setPaintHandlerEnabledWithBoolean:YES];
      }
    }
    modCountBgOverlayPainter_ = (p == nil) ? 0 : [p getModCount];
    bgOverlayPainter_ = p;
    if ((p != nil) && ([p getDisplayed] == [RAREDisplayedEnum BEFORE_INTERACTION])) {
      [self handleWantsFirstInteraction];
    }
  }
}

- (void)setBackgroundPainterWithRAREiBackgroundPainter:(id<RAREiBackgroundPainter>)bp {
  if ((bp != backgroundPainter_) || ((bp != nil) && ([bp getModCount] != modCountBackgroundPainter_))) {
    [self setBackgroundPainterExWithRAREiBackgroundPainter:nil];
    if (bp == nil) {
      [self setBackgroundColorExWithRAREUIColor:nil];
    }
    else {
      if ([self isUseMainLayerForPainter]) {
        if ((bp != nil) && [bp canUseMainLayer]) {
          if ([bp isSingleColorPainter]) {
            [self setBackgroundColorExWithRAREUIColor:[bp getBackgroundColor]];
          }
          if ([(id) bp isKindOfClass:[RAREUIBackgroundPainter class]]) {
            [self setBackgroundPainterExWithRAREiBackgroundPainter:bp];
          }
          else if (([(id) bp isKindOfClass:[RAREUIImagePainter class]]) && [((RAREUIImagePainter *) check_class_cast(bp, [RAREUIImagePainter class])) canUseLayer]) {
            if ([self imagePainterCheckedAndOkToAddWithRAREiPlatformPainter:bp]) {
              [self setBackgroundPainterExWithRAREiBackgroundPainter:bp];
            }
          }
          else {
            if (bp != nil) {
              [self imagePainterCheckedAndOkToAddWithRAREiPlatformPainter:bp];
              [self setPaintHandlerEnabledWithBoolean:YES];
            }
          }
        }
        else {
          if (bp != nil) {
            [self imagePainterCheckedAndOkToAddWithRAREiPlatformPainter:bp];
            [self setPaintHandlerEnabledWithBoolean:YES];
          }
        }
      }
      else {
        [self setPaintHandlerEnabledWithBoolean:YES];
      }
    }
    modCountBackgroundPainter_ = (bp == nil) ? 0 : [bp getModCount];
    backgroundPainter_ = bp;
    if ((bp != nil) && ([bp getDisplayed] == [RAREDisplayedEnum BEFORE_INTERACTION])) {
      [self handleWantsFirstInteraction];
    }
  }
}

- (void)setBorderWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)b {
  if ((b != border_) || ((b != nil) && ([b getModCount] != modCountBorder_))) {
    modCountBorder_ = 0;
    [self borderChangedWithRAREiPlatformBorder:b];
    [self handleBorderWithRAREiPlatformBorder:b];
  }
  border_ = b;
}

- (void)setBorderExWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)b {
  border_ = b;
  modCountBorder_ = 0;
}

- (void)setBoundsWithFloat:(float)x
                 withFloat:(float)y
                 withFloat:(float)w
                 withFloat:(float)h {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setBoundsWithInt:(int)x
                 withInt:(int)y
                 withInt:(int)w
                 withInt:(int)h {
  [self setBoundsWithFloat:(float) x withFloat:(float) y withFloat:(float) w withFloat:(float) h];
}

- (void)setChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
}

- (void)setClipMaskWithId:(id)nativepath {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setComponentWithRAREComponent:(RAREComponent *)component {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setComponentPainterWithRAREiPlatformComponentPainter:(id<RAREiPlatformComponentPainter>)cp {
  if (cp == componentPainter_) {
    return;
  }
  if (cp != nil) {
    (void) [cp reference];
    [cp addPropertyChangeListenerWithJavaBeansPropertyChangeListener:self];
  }
  if (self->componentPainter_ != nil) {
    [componentPainter_ removePropertyChangeListenerWithJavaBeansPropertyChangeListener:self];
    [componentPainter_ dispose];
  }
  self->componentPainter_ = cp;
  if ([self isUsePainterBorder]) {
    [self setBorderWithRAREiPlatformBorder:(cp == nil) ? nil : [cp getBorder]];
  }
  [self setBackgroundPainterWithRAREiBackgroundPainter:(cp == nil) ? nil : [cp getBackgroundPainter]];
  if ((cp != nil) && ([cp getBackgroundOverlayPainter] != nil)) {
    if ([self imagePainterCheckedAndOkToAddWithRAREiPlatformPainter:[cp getBackgroundOverlayPainter]]) {
    }
    [self setPaintHandlerEnabledWithBoolean:YES];
  }
  [self setOverlayPainterWithRAREiPlatformPainter:(cp == nil) ? nil : [cp getOverlayPainter]];
  if ((cp != nil) && [cp isBackgroundPaintEnabled]) {
    [self setPaintHandlerEnabledWithBoolean:YES];
  }
  [self stateChanged];
}

- (void)setComponentPainterExWithRAREiPlatformComponentPainter:(id<RAREiPlatformComponentPainter>)cp {
  componentPainter_ = cp;
}

- (void)setCursorWithRAREUICursor:(RAREUICursor *)cursor {
}

- (void)setDisabledIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)disabledIcon {
}

- (void)setEnabledWithBoolean:(BOOL)enabled {
  if (self->enabled_ != enabled) {
    [self setEnabledExWithBoolean:enabled];
    self->enabled_ = enabled;
    [self stateChanged];
  }
}

- (void)setFlingGestureListenerWithRAREiGestureListener:(id<RAREiGestureListener>)component {
}

- (void)setFocusListenerWithRAREiFocusListener:(id<RAREiFocusListener>)listener {
  focusListener_ = listener;
  [self setFocusListenerEnabledWithBoolean:listener != nil];
}

- (void)setFocusableWithBoolean:(BOOL)focusable {
}

- (void)setFontWithRAREUIFont:(RAREUIFont *)f {
  font_ = f;
}

- (void)setForegroundColorWithRAREUIColor:(RAREUIColor *)fg {
  if (fg != foregroundColor_) {
    foregroundColor_ = fg;
    [self setForegroundColorExWithRAREUIColor:fg];
  }
}

- (void)setIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
}

- (void)setIconGapWithInt:(int)gap {
}

- (void)setIconPositionWithRARERenderableDataItem_IconPositionEnum:(RARERenderableDataItem_IconPositionEnum *)iconPosition {
}

- (void)setKeyboardListenerWithRAREiKeyListener:(id<RAREiKeyListener>)handler {
  keyListener_ = handler;
  [self setKeyBoardListenerEnabledWithBoolean:handler != nil];
}

- (void)setLongPressGestureListenerWithRAREiGestureListener:(id<RAREiGestureListener>)component {
}

- (void)setMarginWithRAREUIInsets:(RAREUIInsets *)insets {
  if (insets == nil) {
    [self setMarginWithFloat:0 withFloat:0 withFloat:0 withFloat:0];
  }
  else {
    [self setMarginWithFloat:insets->top_ withFloat:insets->right_ withFloat:insets->bottom_ withFloat:insets->left_];
  }
}

- (void)setMarginWithFloat:(float)top
                 withFloat:(float)right
                 withFloat:(float)bottom
                 withFloat:(float)left {
}

- (void)setMouseListenerWithRAREiMouseListener:(id<RAREiMouseListener>)handler {
  mouseListener_ = handler;
  if ((handler != nil) && !mouseGestureListenerAdded_) {
    [self addMouseGestureListener];
    mouseGestureListenerAdded_ = YES;
  }
}

- (void)setMouseMotionListenerWithRAREiMouseMotionListener:(id<RAREiMouseMotionListener>)handler {
  mouseMotionListener_ = handler;
  if ((handler != nil) && !mouseGestureListenerAdded_) {
    [self addMouseGestureListener];
    mouseGestureListenerAdded_ = YES;
  }
}

- (BOOL)setOverlayColorExWithRAREUIColor:(RAREUIColor *)bg {
  CALayer* layer=(CALayer*)[self getOverlayLayer];
  layer.backgroundColor=(__bridge CGColorRef)(bg ? [bg getCGColor] : NULL);
  return YES;
}

- (void)setOverlayPainterWithRAREiPlatformPainter:(id<RAREiPlatformPainter>)p {
  if ((p != overlayPainter_) || ((p != nil) && ([p getModCount] != modCountOverlayPainter_))) {
    if ([self imagePainterCheckedAndOkToAddWithRAREiPlatformPainter:p]) {
      (void) [self getOverlayLayer];
    }
    modCountOverlayPainter_ = (p == nil) ? 0 : [p getModCount];
    overlayPainter_ = p;
    if ((p != nil) && ([p getDisplayed] == [RAREDisplayedEnum BEFORE_INTERACTION])) {
      [self handleWantsFirstInteraction];
    }
  }
}

- (void)setPaintHandlerEnabledWithBoolean:(BOOL)enabled {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setParentViewWithRAREView:(RAREView *)parentView {
  self->parentView_ = parentView;
}

- (void)setPressedIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)pressedIcon {
}

- (void)setProxyWithId:(id)proxy {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setRotateGestureListenerWithRAREiGestureListener:(id<RAREiGestureListener>)l {
}

- (void)setScaleGestureListenerWithRAREiGestureListener:(id<RAREiGestureListener>)component {
}

- (void)setSelectedWithBoolean:(BOOL)selected {
}

- (void)setSelectedIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)selectedIcon {
}

- (void)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)string {
}

- (void)setTextAlignmentWithRARERenderableDataItem_HorizontalAlignEnum:(RARERenderableDataItem_HorizontalAlignEnum *)hal
                          withRARERenderableDataItem_VerticalAlignEnum:(RARERenderableDataItem_VerticalAlignEnum *)val {
}

- (void)setUseMainLayerForPainterWithBoolean:(BOOL)useMainLayerForPainter {
  self->useMainLayerForPainter_ = useMainLayerForPainter;
}

- (void)setUsePainterBackgroundColorWithBoolean:(BOOL)usePainterBackgroundColor {
  self->usePainterBackgroundColor_ = usePainterBackgroundColor;
}

- (void)setUsePainterBorderWithBoolean:(BOOL)usePainterBorder {
  self->usePainterBorder_ = usePainterBorder;
}

- (void)setViewListenerWithRAREiViewListener:(id<RAREiViewListener>)l {
  viewListener_ = l;
}

- (void)setVisibleWithBoolean:(BOOL)visible {
  if (visible != [self isVisible]) {
    [self setVisibleExWithBoolean:visible];
    if (visible && (component_ != nil)) {
      [component_ revalidate];
    }
  }
}

- (void)setWantsMouseMovedEventsWithBoolean:(BOOL)b {
}

- (void)setWordWrapWithBoolean:(BOOL)wrap {
}

- (RAREUIColor *)getBackgroundColor {
  return (componentPainter_ == nil) ? nil : [componentPainter_ getBackgroundColor];
}

- (RAREUIColor *)getBackgroundColorAlways {
  RAREUIColor *c = (componentPainter_ == nil) ? nil : [componentPainter_ getBackgroundColor];
  if (c != nil) {
    return c;
  }
  if (parentView_ == nil) {
    return [RAREColorUtils getBackground];
  }
  return [((RAREaView *) nil_chk(parentView_)) getBackgroundColorAlways];
}

- (id<RAREiPlatformBorder>)getBorder {
  id<RAREiPlatformBorder> b = nil;
  if ((componentPainter_ != nil) && usePainterBorder_) {
    b = [componentPainter_ getBorderAlways];
  }
  return (b == nil) ? border_ : b;
}

- (RAREUIRectangle *)getBounds {
  return [self getBoundsWithRAREUIRectangle:nil];
}

- (RAREUIRectangle *)getBoundsWithRAREUIRectangle:(RAREUIRectangle *)rect {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (RAREiPaintedButton_ButtonStateEnum *)getButtonState {
  return [RAREUtils getStateWithBoolean:[self isEnabled] withBoolean:[self isPressed] withBoolean:[self isSelected] withBoolean:NO];
}

- (id<RAREiPlatformComponent>)getComponent {
  return component_;
}

- (id<RAREiPlatformComponentPainter>)getComponentPainter {
  return componentPainter_;
}

- (id<RAREiPlatformIcon>)getDisabledIcon {
  return nil;
}

- (id<RAREiFocusListener>)getFocusListener {
  return focusListener_;
}

- (RAREUIFont *)getFont {
  return font_;
}

- (RAREUIFont *)getFontAlways {
  if (font_ != nil) {
    return font_;
  }
  if (parentView_ == nil) {
    return [RAREFontUtils getDefaultFont];
  }
  return [((RAREaView *) nil_chk(parentView_)) getFontAlways];
}

- (RAREUIColor *)getForegroundColor {
  if (foregroundColor_ != nil) {
    return foregroundColor_;
  }
  if (componentPainter_ != nil) {
    return [componentPainter_ getForegroundColor];
  }
  return nil;
}

- (RAREUIColor *)getForegroundColorAlways {
  RAREUIColor *fg = [self getForegroundColor];
  if (fg != nil) {
    return fg;
  }
  if (parentView_ == nil) {
    return [RAREColorUtils getForeground];
  }
  return [((RAREaView *) nil_chk(parentView_)) getForegroundColorAlways];
}

- (int)getIconGap {
  return 0;
}

- (id<RAREiKeyListener>)getKeyListener {
  return keyListener_;
}

- (RAREUIInsets *)getMargin {
  return nil;
}

- (void)getMinimumSizeWithRAREUIDimension:(RAREUIDimension *)size {
  ((RAREUIDimension *) nil_chk(size))->width_ = 0;
  size->height_ = 0;
}

- (id<RAREiMouseListener>)getMouseListener {
  return mouseListener_;
}

- (id<RAREiMouseMotionListener>)getMouseMotionListener {
  return mouseMotionListener_;
}

- (float)getPreferredHeightWithInt:(int)width {
  RAREUIDimension *d = [[RAREUIDimension alloc] init];
  [self getPreferredSizeWithRAREUIDimension:d withFloat:width];
  return d->height_;
}

- (void)getPreferredSizeWithRAREUIDimension:(RAREUIDimension *)size
                                  withFloat:(float)maxWidth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<RAREiPlatformIcon>)getPressedIcon {
  return nil;
}

- (id)getProxy {
  return proxy_;
}

- (int)getRotation {
  return rotation_;
}

- (id<RAREiPlatformIcon>)getSelectedIcon {
  return nil;
}

- (RAREUIDimension *)getSize {
  RAREUIDimension *size = [[RAREUIDimension alloc] init];
  [self getSizeWithRAREUIDimension:size];
  return size;
}

- (void)getSizeWithRAREUIDimension:(RAREUIDimension *)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<JavaLangCharSequence>)getText {
  return nil;
}

- (BOOL)isAnimating {
  return (component_ == nil) ? NO : [RAREaAnimator isAnimatingWithRAREiPlatformComponent:component_];
}

- (BOOL)isEnabled {
  return enabled_;
}

- (BOOL)isMouseOver {
  return mouseOver_;
}

- (BOOL)isMouseTransparent {
  return NO;
}

- (BOOL)isPressed {
  return pressed_;
}

- (BOOL)isScrollView {
  return NO;
}

- (BOOL)isSelected {
  return NO;
}

- (BOOL)isUseMainLayerForPainter {
  return useMainLayerForPainter_ && ((border_ == nil) || [border_ canUseMainLayer]);
}

- (BOOL)isUsePainterBackgroundColor {
  return usePainterBackgroundColor_ && !transparent_;
}

- (BOOL)isUsePainterBorder {
  return usePainterBorder_;
}

- (BOOL)isVisible {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isWordWrap {
  return NO;
}

- (void)addMouseGestureListener {
}

- (void)checkForegroundColor {
  if (foregroundColor_ == [RAREColorUtils getForeground]) {
    if (enabled_) {
      [self setForegroundColorExWithRAREUIColor:foregroundColor_];
    }
    else {
      [self setForegroundColorExWithRAREUIColor:[RAREColorUtils getDisabledForeground]];
    }
  }
  else if ([foregroundColor_ isKindOfClass:[RAREUIColorShade class]]) {
    RARESimpleColorStateList *csl = [((RAREUIColorShade *) check_class_cast(foregroundColor_, [RAREUIColorShade class])) getColorStateList];
    if (csl != nil) {
      [self setForegroundColorExWithRAREUIColor:[csl getColorWithRAREiPaintedButton_ButtonStateEnum:enabled_ ? [RAREiPaintedButton_ButtonStateEnum DEFAULT] : [RAREiPaintedButton_ButtonStateEnum DISABLED]]];
    }
  }
}

- (void)disposeEx {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disposeLayerWithId:(id)layer {
  CALayer* l=(CALayer*)layer;
  if([l isKindOfClass:[RARECAGradientLayer class]]) {
    [(RARECAGradientLayer*)layer sparDispose];
  }
  else if([l isKindOfClass:[RARECALayer class]]) {
    [(RARECALayer*)layer sparDispose];
  }
}

- (void)handleBorderWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)border {
  id<RAREiPlatformBorder> b = border;
  if ([(id) b isKindOfClass:[RAREUICompoundBorder class]]) {
    id<RAREiPlatformBorder> ib = [((RAREUICompoundBorder *) check_class_cast(b, [RAREUICompoundBorder class])) getInsideBorder];
    id<RAREiPlatformBorder> ob = [((RAREUICompoundBorder *) check_class_cast(b, [RAREUICompoundBorder class])) getOutsideBorder];
    if ([(id) ib isKindOfClass:[RAREUIEmptyBorder class]]) {
      b = ob;
    }
    else if (([(id) ob isKindOfClass:[RAREUIEmptyBorder class]]) && ([(id) ib isKindOfClass:[RAREUILineBorder class]])) {
      RAREUILineBorder *lb = (RAREUILineBorder *) check_class_cast(ib, [RAREUILineBorder class]);
      if ([((RAREUILineBorder *) nil_chk(lb)) usesPath]) {
        [self setPathLineBorderWithRAREUIColor:[lb getLineColor] withFloat:[lb getPathWidth] withNSString:[lb getLineStyle]];
        [self setLayerLayoutEnabledWithBoolean:YES];
        return;
      }
    }
  }
  if ([(id) b isKindOfClass:[RAREUILineBorder class]]) {
    RAREUILineBorder *lb = (RAREUILineBorder *) check_class_cast(b, [RAREUILineBorder class]);
    if ([((RAREUILineBorder *) nil_chk(lb)) canUseMainLayer]) {
      [self setLineBorderWithRAREUIColor:[lb getLineColor] withFloat:[lb getPathWidth] withFloat:[lb getArcHeight]];
      return;
    }
    else if ([lb usesPath]) {
      [self setPathLineBorderWithRAREUIColor:[lb getLineColor] withFloat:[lb getPathWidth] withNSString:[lb getLineStyle]];
      [self setLayerLayoutEnabledWithBoolean:YES];
    }
    else {
      if ([((id<RAREiPlatformBorder>) nil_chk(border)) isPaintLast]) {
        (void) [self getOverlayLayer];
      }
      if (![border isRectangular]) {
        [self setLayerLayoutEnabledWithBoolean:YES];
      }
      [self setPaintHandlerEnabledWithBoolean:YES];
    }
    return;
  }
  if (!([(id) border isKindOfClass:[RAREUIEmptyBorder class]])) {
    if (border != nil) {
      if ([border isPaintLast]) {
        (void) [self getOverlayLayer];
      }
      if (![border isRectangular]) {
        [self setLayerLayoutEnabledWithBoolean:YES];
      }
      [self setPaintHandlerEnabledWithBoolean:YES];
    }
    [self revalidate];
  }
}

- (void)handleWantsFirstInteraction {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)layingoutLayersWithFloat:(float)width
                       withFloat:(float)height {
  id<RAREiPlatformBorder> b = [self getBorder];
  if ((b != border_) || ((b != nil) && ([b getModCount] != modCountBorder_)) || (oldWidth_ != width) || (oldHeight_ != height)) {
    if (b != nil) {
      if ([(id) b isKindOfClass:[RARESharedLineBorder class]]) {
        [((RARESharedLineBorder *) check_class_cast(b, [RARESharedLineBorder class])) updateShapeWithRAREiPlatformComponent:[self getComponent] withFloat:width withFloat:height];
      }
      modCountBorder_ = [b getModCount];
      if (borderPath_ != nil) {
        [borderPath_ reset];
      }
      float off = [b getPathOffset];
      borderPath_ = [b getPathWithRAREiPlatformPath:borderPath_ withFloat:-off withFloat:-off withFloat:width + off + off withFloat:height + off + off withBoolean:NO];
    }
    else {
      borderPath_ = nil;
    }
    [self setLayerPathWithId:(borderPath_ == nil) ? nil : [borderPath_ getPath]];
    if (b == nil) {
      [self setClipMaskWithId:nil];
    }
    else {
      if (clip_ != nil) {
        [clip_ reset];
      }
      float off = [b getPathOffset];
      clip_ = [b getPathWithRAREiPlatformPath:clip_ withFloat:-off withFloat:-off withFloat:width + off + off withFloat:height + off + off withBoolean:YES];
      [self setClipMaskWithId:(clip_ == nil) ? nil : [clip_ getPath]];
    }
    border_ = b;
  }
  oldWidth_ = width;
  oldHeight_ = height;
}

- (void)visibilityChangedWithBoolean:(BOOL)shown {
  if (viewListener_ != nil) {
    if (changeEvent_ == nil) {
      changeEvent_ = [[RAREChangeEvent alloc] initWithId:self];
    }
    if (shown) {
      [viewListener_ viewShownWithRAREChangeEvent:changeEvent_];
    }
    else {
      [viewListener_ viewHiddenWithRAREChangeEvent:changeEvent_];
    }
  }
}

- (void)setBackgroundOverlayPainterExWithRAREiBackgroundPainter:(id<RAREiBackgroundPainter>)bp {
  layerForBackgroundOverlay_=bp!=nil;
  CALayer* layer=(CALayer*)[self getLayer];
  if([layer isKindOfClass:[RARECAGradientLayer class]]) {
    RARECAGradientLayer* gl=(RARECAGradientLayer*)layer;
    RARECALayer* l=[gl getBackgroundOverLayerCreate: YES forRAREView: (RAREView*)self];
    [AppleHelper setLayerPainter: bp onLayer: l withBackground: [self getBackgroundColor]];
  }
}

- (void)setBackgroundPainterExWithRAREiBackgroundPainter:(id<RAREiBackgroundPainter>)bp {
  CALayer* layer=(CALayer*)[self getLayer];
  [AppleHelper setLayerPainter: bp onLayer: layer withBackground: [self getBackgroundColor]];
}

- (void)setEnabledExWithBoolean:(BOOL)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setFocusListenerEnabledWithBoolean:(BOOL)b {
}

- (void)setForegroundColorExWithRAREUIColor:(RAREUIColor *)fg {
}

- (void)setKeyBoardListenerEnabledWithBoolean:(BOOL)enabled {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLayerLayoutEnabledWithBoolean:(BOOL)enabled {
  CALayer* calayer=(CALayer*)[self getLayer];
  if([calayer isKindOfClass:[RARECAGradientLayer class]]) {
    RARECAGradientLayer* layer=(RARECAGradientLayer*)calayer;
    layer->layoutEnabled_=enabled;
    [layer setNeedsLayout];
    [layer setNeedsDisplay];
  }
}

- (void)setLayerPathWithId:(id)nativepath {
  CAShapeLayer* layer=(CAShapeLayer*)[ self getOverlayLayer];
  #if  TARGET_OS_IPHONE
  layer.path=((UIBezierPath*)nativepath).CGPath;
  #else
  layer.path=(__bridge CGPathRef)([AppleHelper quartzPath:(NSBezierPath *)nativepath]);
  #endif
  [layer didChangeValueForKey:@"path"];
}

- (void)setOverlayPainterExWithRAREiPlatformPainter:(id<RAREiPlatformPainter>)bp {
  layerForOverlay_=bp!=nil;
  CALayer* layer=(CALayer*)[self getOverlayLayer];
  [AppleHelper setLayerPainter: bp onLayer: layer withBackground: [self getBackgroundColor]];
}

- (void)setSystemOverlayPainterExWithRAREiPlatformPainter:(id<RAREiPlatformPainter>)painter {
  RARECALayer* layer=(RARECALayer*)[self getOverlayLayer];
  [layer setSystemPainter: painter];
}

- (void)setVisibleExWithBoolean:(BOOL)visible {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)getLayer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getOverlayLayer {
  if(!overlayLayer_) {
    __block RARECAGradientLayer* layer=nil;
    CALayer *l=((UIView*)proxy_).layer;
    if (![l isKindOfClass:[RARECAGradientLayer class]]) {
      
      [l.sublayers enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
        CALayer *sl = (CALayer *) obj;
        if ([sl isKindOfClass:[RARECAGradientLayer class]]) {
          layer=(RARECAGradientLayer*)l;
          *stop=YES;
        }
      }];
      
    }
    else {
      layer=(RARECAGradientLayer*)l;
    }
    if(layer) {
      overlayLayer_=[layer getOverLayerCreate:YES forRAREView:(RAREView*)self];
    }
    else {
      overlayLayer_=[RARECALayer layer];
      [l addSublayer: (CALayer*)overlayLayer_];
      
    }
  }
  return overlayLayer_;
}

- (BOOL)isPaintEnabled {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isSingleColorPainter {
  if (componentPainter_ != nil) {
    return [componentPainter_ isSingleColorPainter];
  }
  return YES;
}

- (BOOL)imagePainterCheckedAndOkToAddWithRAREiPlatformPainter:(id<RAREiPlatformPainter>)p {
  if ([(id) p isKindOfClass:[RAREUIImagePainter class]]) {
    RAREUIImagePainter *ip = (RAREUIImagePainter *) check_class_cast(p, [RAREUIImagePainter class]);
    if (([((RAREUIImagePainter *) nil_chk(ip)) getImage] != nil) && [((RAREUIImage *) nil_chk([ip getImage])) isLoadedWithRAREiImageObserver:nil]) {
      return YES;
    }
    return NO;
  }
  return YES;
}

- (void)setLineBorderWithRAREUIColor:(RAREUIColor *)color
                           withFloat:(float)thickness
                           withFloat:(float)radius {
  CALayer* layer=(CALayer*)[ self getLayer];
  layer.borderWidth=thickness;
  layer.cornerRadius=radius;
  if(color) {
    layer.borderColor=(__bridge CGColorRef)([color getCGColor ]);
  }
}

- (void)setPathLineBorderWithRAREUIColor:(RAREUIColor *)color
                               withFloat:(float)thickness
                            withNSString:(NSString *)lineStyle {
  CAShapeLayer* layer=(CAShapeLayer*)[ self getOverlayLayer];
  layer.lineWidth=thickness*2;
  if(color) {
    layer.strokeColor=(__bridge CGColorRef)([color getCGColor ]);
  }
}

- (void)copyAllFieldsTo:(RAREaView *)other {
  [super copyAllFieldsTo:other];
  other->backgroundPainter_ = backgroundPainter_;
  other->bgOverlayPainter_ = bgOverlayPainter_;
  other->border_ = border_;
  other->borderPath_ = borderPath_;
  other->changeEvent_ = changeEvent_;
  other->clip_ = clip_;
  other->component_ = component_;
  other->componentPainter_ = componentPainter_;
  other->enabled_ = enabled_;
  other->enabledAlpha_ = enabledAlpha_;
  other->enabledInteraction_ = enabledInteraction_;
  other->focusListener_ = focusListener_;
  other->font_ = font_;
  other->foregroundColor_ = foregroundColor_;
  other->keyListener_ = keyListener_;
  other->layerForBackgroundOverlay_ = layerForBackgroundOverlay_;
  other->layerForOverlay_ = layerForOverlay_;
  other->modCountBackgroundPainter_ = modCountBackgroundPainter_;
  other->modCountBgOverlayPainter_ = modCountBgOverlayPainter_;
  other->modCountBorder_ = modCountBorder_;
  other->modCountOverlayPainter_ = modCountOverlayPainter_;
  other->mouseGestureListenerAdded_ = mouseGestureListenerAdded_;
  other->mouseListener_ = mouseListener_;
  other->mouseMotionListener_ = mouseMotionListener_;
  other->mouseOver_ = mouseOver_;
  other->oldHeight_ = oldHeight_;
  other->oldWidth_ = oldWidth_;
  other->overlayLayer_ = overlayLayer_;
  other->overlayPainter_ = overlayPainter_;
  other->parentView_ = parentView_;
  other->pressed_ = pressed_;
  other->proxy_ = proxy_;
  other->rotation_ = rotation_;
  other->transparent_ = transparent_;
  other->useMainLayerForPainter_ = useMainLayerForPainter_;
  other->usePainterBackgroundColor_ = usePainterBackgroundColor_;
  other->usePainterBorder_ = usePainterBorder_;
  other->viewListener_ = viewListener_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x4, NULL },
    { "createAPView", NULL, "LNSObject", 0x109, NULL },
    { "letComponentPainterPaintWithRAREiPlatformBorder:", NULL, "Z", 0x1, NULL },
    { "letComponentPainterPaintWithRAREiPlatformPainter:", NULL, "Z", 0x1, NULL },
    { "makeTransparent", NULL, "V", 0x101, NULL },
    { "needsLayout", NULL, "Z", 0x101, NULL },
    { "removeNativeBorder", NULL, "V", 0x101, NULL },
    { "repaint", NULL, "V", 0x401, NULL },
    { "resetForRenderer", NULL, "V", 0x101, NULL },
    { "resetLayer", NULL, "V", 0x101, NULL },
    { "revalidate", NULL, "V", 0x401, NULL },
    { "set3DTransformWithId:", NULL, "V", 0x101, NULL },
    { "usedLayerForBackgroundOverlay", NULL, "Z", 0x1, NULL },
    { "usedLayerForOverlay", NULL, "Z", 0x1, NULL },
    { "setBackgroundColorWithRAREUIColor:", NULL, "V", 0x4, NULL },
    { "setBackgroundColorExWithRAREUIColor:", NULL, "Z", 0x101, NULL },
    { "setBoundsWithFloat:withFloat:withFloat:withFloat:", NULL, "V", 0x401, NULL },
    { "setClipMaskWithId:", NULL, "V", 0x401, NULL },
    { "setComponentWithRAREComponent:", NULL, "V", 0x401, NULL },
    { "setOverlayColorExWithRAREUIColor:", NULL, "Z", 0x101, NULL },
    { "setPaintHandlerEnabledWithBoolean:", NULL, "V", 0x401, NULL },
    { "setProxyWithId:", NULL, "V", 0x401, NULL },
    { "getBackgroundColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getBackgroundColorAlways", NULL, "LRAREUIColor", 0x1, NULL },
    { "getBorder", NULL, "LRAREiPlatformBorder", 0x1, NULL },
    { "getBounds", NULL, "LRAREUIRectangle", 0x1, NULL },
    { "getBoundsWithRAREUIRectangle:", NULL, "LRAREUIRectangle", 0x401, NULL },
    { "getButtonState", NULL, "LRAREiPaintedButton_ButtonStateEnum", 0x1, NULL },
    { "getComponent", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getComponentPainter", NULL, "LRAREiPlatformComponentPainter", 0x1, NULL },
    { "getDisabledIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getFocusListener", NULL, "LRAREiFocusListener", 0x1, NULL },
    { "getFont", NULL, "LRAREUIFont", 0x1, NULL },
    { "getFontAlways", NULL, "LRAREUIFont", 0x1, NULL },
    { "getForegroundColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getForegroundColorAlways", NULL, "LRAREUIColor", 0x1, NULL },
    { "getKeyListener", NULL, "LRAREiKeyListener", 0x1, NULL },
    { "getMargin", NULL, "LRAREUIInsets", 0x1, NULL },
    { "getMouseListener", NULL, "LRAREiMouseListener", 0x1, NULL },
    { "getMouseMotionListener", NULL, "LRAREiMouseMotionListener", 0x1, NULL },
    { "getPreferredSizeWithRAREUIDimension:withFloat:", NULL, "V", 0x401, NULL },
    { "getPressedIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getProxy", NULL, "LNSObject", 0x1, NULL },
    { "getSelectedIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getSize", NULL, "LRAREUIDimension", 0x1, NULL },
    { "getSizeWithRAREUIDimension:", NULL, "V", 0x401, NULL },
    { "getText", NULL, "LJavaLangCharSequence", 0x1, NULL },
    { "isAnimating", NULL, "Z", 0x1, NULL },
    { "isEnabled", NULL, "Z", 0x1, NULL },
    { "isMouseOver", NULL, "Z", 0x1, NULL },
    { "isMouseTransparent", NULL, "Z", 0x1, NULL },
    { "isPressed", NULL, "Z", 0x1, NULL },
    { "isScrollView", NULL, "Z", 0x1, NULL },
    { "isSelected", NULL, "Z", 0x1, NULL },
    { "isUseMainLayerForPainter", NULL, "Z", 0x1, NULL },
    { "isUsePainterBackgroundColor", NULL, "Z", 0x1, NULL },
    { "isUsePainterBorder", NULL, "Z", 0x1, NULL },
    { "isVisible", NULL, "Z", 0x401, NULL },
    { "isWordWrap", NULL, "Z", 0x1, NULL },
    { "addMouseGestureListener", NULL, "V", 0x4, NULL },
    { "checkForegroundColor", NULL, "V", 0x4, NULL },
    { "disposeEx", NULL, "V", 0x404, NULL },
    { "disposeLayerWithId:", NULL, "V", 0x104, NULL },
    { "handleBorderWithRAREiPlatformBorder:", NULL, "V", 0x4, NULL },
    { "handleWantsFirstInteraction", NULL, "V", 0x404, NULL },
    { "layingoutLayersWithFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "visibilityChangedWithBoolean:", NULL, "V", 0x4, NULL },
    { "setBackgroundOverlayPainterExWithRAREiBackgroundPainter:", NULL, "V", 0x104, NULL },
    { "setBackgroundPainterExWithRAREiBackgroundPainter:", NULL, "V", 0x104, NULL },
    { "setEnabledExWithBoolean:", NULL, "V", 0x404, NULL },
    { "setFocusListenerEnabledWithBoolean:", NULL, "V", 0x4, NULL },
    { "setForegroundColorExWithRAREUIColor:", NULL, "V", 0x4, NULL },
    { "setKeyBoardListenerEnabledWithBoolean:", NULL, "V", 0x404, NULL },
    { "setLayerLayoutEnabledWithBoolean:", NULL, "V", 0x101, NULL },
    { "setLayerPathWithId:", NULL, "V", 0x104, NULL },
    { "setOverlayPainterExWithRAREiPlatformPainter:", NULL, "V", 0x104, NULL },
    { "setSystemOverlayPainterExWithRAREiPlatformPainter:", NULL, "V", 0x104, NULL },
    { "setVisibleExWithBoolean:", NULL, "V", 0x404, NULL },
    { "getLayer", NULL, "LNSObject", 0x404, NULL },
    { "getOverlayLayer", NULL, "LNSObject", 0x104, NULL },
    { "isPaintEnabled", NULL, "Z", 0x404, NULL },
    { "isSingleColorPainter", NULL, "Z", 0x4, NULL },
    { "imagePainterCheckedAndOkToAddWithRAREiPlatformPainter:", NULL, "Z", 0x2, NULL },
    { "setLineBorderWithRAREUIColor:withFloat:withFloat:", NULL, "V", 0x102, NULL },
    { "setPathLineBorderWithRAREUIColor:withFloat:withNSString:", NULL, "V", 0x102, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "enabledAlpha_", NULL, 0x4, "F" },
    { "enabled_", NULL, 0x4, "Z" },
    { "usePainterBorder_", NULL, 0x4, "Z" },
    { "backgroundPainter_", NULL, 0x4, "LRAREiBackgroundPainter" },
    { "bgOverlayPainter_", NULL, 0x4, "LRAREiPlatformPainter" },
    { "border_", NULL, 0x4, "LRAREiPlatformBorder" },
    { "borderPath_", NULL, 0x4, "LRAREiPlatformPath" },
    { "changeEvent_", NULL, 0x4, "LRAREChangeEvent" },
    { "clip_", NULL, 0x4, "LRAREiPlatformPath" },
    { "component_", NULL, 0x4, "LRAREComponent" },
    { "componentPainter_", NULL, 0x4, "LRAREiPlatformComponentPainter" },
    { "enabledInteraction_", NULL, 0x4, "Z" },
    { "focusListener_", NULL, 0x4, "LRAREiFocusListener" },
    { "font_", NULL, 0x4, "LRAREUIFont" },
    { "foregroundColor_", NULL, 0x4, "LRAREUIColor" },
    { "keyListener_", NULL, 0x4, "LRAREiKeyListener" },
    { "layerForBackgroundOverlay_", NULL, 0x4, "Z" },
    { "layerForOverlay_", NULL, 0x4, "Z" },
    { "modCountBackgroundPainter_", NULL, 0x4, "I" },
    { "modCountBgOverlayPainter_", NULL, 0x4, "I" },
    { "modCountBorder_", NULL, 0x4, "I" },
    { "modCountOverlayPainter_", NULL, 0x4, "I" },
    { "mouseGestureListenerAdded_", NULL, 0x4, "Z" },
    { "mouseListener_", NULL, 0x4, "LRAREiMouseListener" },
    { "mouseMotionListener_", NULL, 0x4, "LRAREiMouseMotionListener" },
    { "mouseOver_", NULL, 0x4, "Z" },
    { "overlayLayer_", NULL, 0x4, "LNSObject" },
    { "overlayPainter_", NULL, 0x4, "LRAREiPlatformPainter" },
    { "parentView_", NULL, 0x4, "LRAREaView" },
    { "pressed_", NULL, 0x4, "Z" },
    { "proxy_", NULL, 0x4, "LNSObject" },
    { "rotation_", NULL, 0x4, "I" },
    { "transparent_", NULL, 0x4, "Z" },
    { "usePainterBackgroundColor_", NULL, 0x4, "Z" },
    { "viewListener_", NULL, 0x4, "LRAREiViewListener" },
  };
  static J2ObjcClassInfo _RAREaView = { "aView", "com.appnativa.rare.platform.apple.ui.view", NULL, 0x401, 85, methods, 35, fields, 0, NULL};
  return &_RAREaView;
}

@end
