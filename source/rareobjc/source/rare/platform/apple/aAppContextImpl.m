//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple/com/appnativa/rare/platform/apple/aAppContextImpl.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/ErrorInformation.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iExceptionHandler.h"
#include "com/appnativa/rare/iFunctionHandler.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/iResourceFinder.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/platform/aAppContext.h"
#include "com/appnativa/rare/platform/aRare.h"
#include "com/appnativa/rare/platform/apple/aAppContextImpl.h"
#include "com/appnativa/rare/platform/apple/ui/util/ImageUtils.h"
#include "com/appnativa/rare/platform/apple/ui/view/DialogWindow.h"
#include "com/appnativa/rare/platform/apple/ui/view/PopupWindow.h"
#include "com/appnativa/rare/scripting/iScriptHandler.h"
#include "com/appnativa/rare/ui/Frame.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/effects/iPlatformAnimator.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformComponentFactory.h"
#include "com/appnativa/rare/ui/iPlatformWindowManager.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/URL.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/ResourceBundle.h"
#include "java/util/logging/Logger.h"
#import "java/lang/reflect/Field.h"
 #import "RAREAPApplication.h"
 #if TARGET_OS_IPHONE
 #import <UIKit/UIKit.h>
 #else
 #import <AppKit/AppKit.h>
 #endif

@implementation RAREaAppContextImpl

- (id)initWithRAREaRare:(RAREaRare *)instance {
  if (self = [super initWithRAREaRare:instance withRAREUIProperties:[[RAREUIProperties alloc] init]]) {
    interfaceProxies_ = [[JavaUtilHashMap alloc] init];
    if ([RAREPlatformHelper isHighDensity]) {
      rareIconResourcePaths_ = [IOSObjectArray arrayWithObjects:(id[]){ @"drawable-xhdpi", @"drawable-mdpi" } count:2 type:[IOSClass classWithClass:[NSString class]]];
    }
    else {
      rareIconResourcePaths_ = [IOSObjectArray arrayWithObjects:(id[]){ @"drawable-mdpi", @"drawable-xhdpi" } count:2 type:[IOSClass classWithClass:[NSString class]]];
    }
    [self registerInterfaceProxyWithNSString:@"com.appnativa.rare.iFunctionCallback" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.rare.iWorkerTask" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.util.iCancelable" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.util.iStringConverter" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.util.iFilter" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.rare.net.ActionLink.iErrorHandler" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"java.util.Comparator" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.rare.ui.event.iActionListener" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.rare.ui.event.iChangeListener" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.rare.ui.effects.iAnimatorListener" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.rare.ui.effects.iAnimatorValueListener" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.rare.ui.event.iExpansionListener" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.rare.ui.event.iPopupMenuListener" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
    [self registerInterfaceProxyWithNSString:@"com.appnativa.rare.ui.event.iExpandedListener" withNSString:@"com.appnativa.rare.GenericInterfaceProxy"];
  }
  return self;
}

- (BOOL)isPopupWindowShowing {
  RAREUTIdentityArrayList *w = [[RAREUTIdentityArrayList alloc] initWithJavaUtilCollection:activeWindows_];
  for (id __strong o in w) {
    if ([o isKindOfClass:[RAREPopupWindow class]]) {
      return YES;
    }
  }
  return NO;
}

- (void)handleConfigurationWillChangeWithId:(id)newConfig {
  [super handleConfigurationWillChangeWithId:newConfig];
  for (id __strong o in nil_chk(activeWindows_)) {
    if ([o isKindOfClass:[RAREDialogWindow class]]) {
      RAREDialogWindow *dialog = (RAREDialogWindow *) check_class_cast(o, [RAREDialogWindow class]);
      RAREFrame *f = (RAREFrame *) check_class_cast([((RAREDialogWindow *) nil_chk(dialog)) getComponent], [RAREFrame class]);
      [((RAREWindowViewer *) nil_chk([((RAREFrame *) nil_chk(f)) getWindowViewer])) onConfigurationWillChangeWithId:newConfig];
      [f center];
    }
    else if ([o isKindOfClass:[RAREPopupWindow class]]) {
      [((RAREPopupWindow *) check_class_cast(o, [RAREPopupWindow class])) cancelPopupWithBoolean:NO];
    }
  }
}

- (void)handleConfigurationChangedWithId:(id)changes {
  [super handleConfigurationChangedWithId:changes];
  for (id __strong o in nil_chk(activeWindows_)) {
    if ([o isKindOfClass:[RAREDialogWindow class]]) {
      RAREDialogWindow *dialog = (RAREDialogWindow *) check_class_cast(o, [RAREDialogWindow class]);
      RAREFrame *f = (RAREFrame *) check_class_cast([((RAREDialogWindow *) nil_chk(dialog)) getComponent], [RAREFrame class]);
      [((RAREWindowViewer *) nil_chk([((RAREFrame *) nil_chk(f)) getWindowViewer])) onConfigurationChangedWithBoolean:resetOnConfigurationChange_];
      [f repackAndCenter];
    }
  }
}

- (BOOL)isDialogWindowShowing {
  RAREUTIdentityArrayList *w = [[RAREUTIdentityArrayList alloc] initWithJavaUtilCollection:activeWindows_];
  for (id __strong o in w) {
    if ([o isKindOfClass:[RAREDialogWindow class]]) {
      return YES;
    }
  }
  return NO;
}

- (BOOL)browseURLWithJavaNetURL:(JavaNetURL *)url {
  NSURL *nsurl = (NSURL*)url->proxy_;
  #if TARGET_OS_IPHONE
  return [[UIApplication sharedApplication] openURL:nsurl];
  #else
  return [[NSWorkspace sharedWorkspace] openURL:nsurl];
  #endif
}

- (void)clearStatusBar {
}

- (void)closePopupWindowsWithBoolean:(BOOL)all {
  [[RAREAPApplication getInstance] closePopupWindows: all];
}

+ (void)debugLogWithNSString:(NSString *)msg {
  if ([RAREaRare isDebugEnabled]) {
    [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithNSString:msg];
  }
}

+ (void)ignoreExceptionWithNSString:(NSString *)msg
              withJavaLangThrowable:(JavaLangThrowable *)throwable {
  @try {
    [((id<RAREiExceptionHandler>) nil_chk([RAREaAppContext getDefaultExceptionHandlerWithRAREiWidget:nil])) ignoreExceptionWithNSString:msg withJavaLangThrowable:throwable];
  }
  @catch (JavaLangException *ignore) {
    if ([RAREaRare isDebugEnabled]) {
      if (msg != nil) {
        [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithNSString:msg];
      }
      if (throwable != nil) {
        [throwable printStackTraceWithJavaIoPrintStream:[JavaLangSystem err]];
      }
    }
  }
}

- (BOOL)islandscapeMode {
  return landscapeMode_;
}

- (JavaNetURL *)makeResourcePathWithNSString:(NSString *)file {
  JavaNetURL *u = nil;
  if (file != nil) {
    int n = [file lastIndexOf:'.'];
    if (n == -1) {
      u = [self makeResourceURLWithNSString:file withNSString:@""];
    }
    else {
      u = [self makeResourceURLWithNSString:[file substring:0 endIndex:n] withNSString:[file substring:n + 1]];
    }
  }
  return u;
}

- (NSString *)makeResourcePathWithNSString:(NSString *)name
                              withNSString:(NSString *)ext {
  int n = [((NSString *) nil_chk(name)) lastIndexOf:'/'];
  NSString *dir = nil;
  if (n != -1) {
    dir = [name substring:0 endIndex:n];
    name = [name substring:n + 1];
  }
  @try {
    return [RAREaAppContextImpl makeResourcePathWithNSString:dir withNSString:name withNSString:ext];
  }
  @catch (JavaLangException *e) {
  }
  return nil;
}

+ (NSString *)makeResourcePathWithNSString:(NSString *)dir
                              withNSString:(NSString *)name
                              withNSString:(NSString *)ext {
  if(!dir) {
    return [[NSBundle mainBundle] pathForResource:name ofType:ext];
  }
  return [[NSBundle mainBundle] pathForResource:name ofType:ext inDirectory: dir];
}

- (JavaNetURL *)makeResourceURLWithNSString:(NSString *)name
                               withNSString:(NSString *)ext {
  int n = [((NSString *) nil_chk(name)) lastIndexOf:'/'];
  NSString *dir = nil;
  if (n != -1) {
    dir = [name substring:0 endIndex:n];
    name = [name substring:n + 1];
  }
  @try {
    NSString *file = [RAREaAppContextImpl makeResourcePathWithNSString:dir withNSString:name withNSString:ext];
    if (file != nil) {
      return [RAREaPlatformHelper fileToURLWithNSString:file];
    }
  }
  @catch (JavaLangException *e) {
  }
  return nil;
}

- (void)registerInterfaceProxyWithNSString:(NSString *)interfaceName
                              withNSString:(NSString *)proxyClassName {
  if ([((NSString *) nil_chk(interfaceName)) indexOf:'.'] != -1) {
    interfaceName = [RAREaPlatformHelper getIOSClassNameWithNSString:interfaceName];
  }
  if ([((NSString *) nil_chk(proxyClassName)) indexOf:'.'] != -1) {
    proxyClassName = [RAREaPlatformHelper getIOSClassNameWithNSString:proxyClassName];
  }
  (void) [((JavaUtilHashMap *) nil_chk(interfaceProxies_)) putWithId:interfaceName withId:proxyClassName];
}

- (void)setLoggerWithJavaUtilLoggingLogger:(JavaUtilLoggingLogger *)l {
  logger_ = l;
}

+ (RAREaAppContextImpl *)getAppContextWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  return [RAREaAppContextImpl getAppContextWithRAREiWidget:[RAREPlatform findWidgetForComponentWithId:c]];
}

+ (RAREaAppContextImpl *)getAppContextWithRAREiWidget:(id<RAREiWidget>)w {
  return (w == nil) ? (RAREaAppContextImpl *) check_class_cast([RAREaAppContext _instance], [RAREaAppContextImpl class]) : (RAREaAppContextImpl *) check_class_cast([w getAppContext], [RAREaAppContextImpl class]);
}

- (NSString *)getApplicationName {
  return [((RAREaRare *) nil_chk(RARE_)) getName];
}

- (id<RAREiPlatformComponentFactory>)getComponentCreator {
  return [((id<RAREiPlatformWindowManager>) nil_chk([((RAREaRare *) nil_chk(RARE_)) getWindowManager])) getComponentCreator];
}

- (RAREErrorInformation *)getErrorInformationWithId:(id)nserror {
  return [((id<RAREiScriptHandler>) nil_chk([self getScriptingManager])) getErrorInformationWithRAREiPlatformAppContext:self withId:nserror];
}

- (id<RAREiFunctionHandler>)getFunctionHandler {
  return [((RAREaRare *) nil_chk(RARE_)) getFunctionHandler];
}

- (NSString *)getInterfaceProxyClassNameWithNSString:(NSString *)interfaceName {
  return [((JavaUtilHashMap *) nil_chk(interfaceProxies_)) getWithId:interfaceName];
}

- (id)getInterfaceProxyObjectWithNSString:(NSString *)interfaceName {
  NSString *name = [((JavaUtilHashMap *) nil_chk(interfaceProxies_)) getWithId:interfaceName];
  return (name == nil) ? nil : [RAREPlatform createObjectWithNSString:name];
}

- (JavaUtilLoggingLogger *)getLogger {
  if (logger_ == nil) {
    logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:@"RARE"];
  }
  return logger_;
}

- (RAREUIImage *)getManagedResourceWithNSString:(NSString *)name
                                   withNSString:(NSString *)cname
                                    withBoolean:(BOOL)landscape
                            withRAREUTCharArray:(RAREUTCharArray *)ca {
  if ([((NSString *) nil_chk(name)) hasSuffix:@".png"] || [name hasSuffix:@".jpg"] || [name hasSuffix:@".gif"]) {
    return [RAREPlatformHelper getImageFromResourceFileNameWithNSString:name];
  }
  if ([((NSString *) nil_chk(cname)) hasPrefix:@"rare_icon_"]) {
    return [super getManagedResourceWithNSString:name withNSString:cname withBoolean:landscape withRAREUTCharArray:ca];
  }
  if (!managedResourcePathInitialized_) {
    [self initializeManagedResourcePaths];
    useAssetCatalog_ = [((RAREUIProperties *) nil_chk(uiDefaults_)) getBooleanWithNSString:@"Rare.Apple.useAssetCatalog" withBoolean:NO];
    if ((int) [((IOSObjectArray *) nil_chk(managedResourcePaths_)) count] == 0) {
      useAssetCatalog_ = YES;
    }
  }
  if (!useAssetCatalog_) {
    return [super getManagedResourceWithNSString:name withNSString:cname withBoolean:landscape withRAREUTCharArray:ca];
  }
  id proxy = [RAREImageUtils loadAssetCatalogImageProxyWithNSString:cname];
  return (proxy == nil) ? nil : [[RAREUIImage alloc] initWithId:proxy withNSString:name];
}

- (NSString *)getResourceAsStringWithNSString:(NSString *)name {
  NSString *s;
  if (resourceFinder_ != nil) {
    s = [resourceFinder_ getResourceAsStringWithNSString:name];
    if (s != nil) {
      return s;
    }
  }
  if (appStrings_ != nil) {
    s = [appStrings_ getWithId:name];
    if (s != nil) {
      return s;
    }
  }
  @try {
    return [((JavaUtilResourceBundle *) nil_chk([((RAREaRare *) nil_chk(RARE_)) getResourceBundle])) getStringWithNSString:name];
  }
  @catch (JavaLangException *e) {
    [RAREaAppContextImpl ignoreExceptionWithNSString:@"getResourceAsString" withJavaLangThrowable:e];
  }
  return nil;
}

- (JavaNetURL *)getResourceURLWithNSString:(NSString *)path {
  if (resourceFinder_ != nil) {
    JavaNetURL *url = [resourceFinder_ getResourceWithNSString:path];
    if (url != nil) {
      return url;
    }
  }
  @try {
    return [self makeResourceURLWithNSString:path withNSString:nil];
  }
  @catch (JavaLangException *e) {
  }
  return nil;
}

+ (RAREUIProperties *)getUIDefaultsWithRAREiWidget:(id<RAREiWidget>)w {
  return [((RAREaAppContext *) nil_chk([RAREaAppContext _instance])) getUIDefaults];
}

- (RAREWindowViewer *)getWindowViewer {
  RAREWindowViewer *w = nil;
  int len = [((RAREUTIdentityArrayList *) nil_chk(activeWindows_)) size];
  for (int i = len - 1; i > -1; i--) {
    id o = [activeWindows_ getWithInt:i];
    if ([o isKindOfClass:[RAREFrame class]]) {
      w = [((RAREFrame *) check_class_cast(o, [RAREFrame class])) getWindowViewer];
      if (w != nil) {
        break;
      }
    }
  }
  if (w == nil) {
    w = [self getMainWindow];
  }
  return w;
}

- (BOOL)isInitialized {
  return RARE_ != nil;
}

- (void)setFocusOwnerWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  (void) [RAREaAppContext setFocusOwner:c];
}

- (void)setPermanentFocusOwnerWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  (void) [RAREaAppContext setPermanentFocusOwner:c];
  (void) [RAREaAppContext setFocusOwner:c];
}

- (void)setupUIDefaults {
  [super setupUIDefaultsWithRAREUIColor:[RAREPlatformHelper getSystemForeground] withRAREUIColor:[RAREPlatformHelper getSystemBackground]];
}

- (NSString *)getDefaultManagedResourcePath {
  return @"/";
}

- (id<RAREiPlatformAnimator>)getResourceAsAnimatorExWithNSString:(NSString *)animator {
  return nil;
}

- (BOOL)hasResourceDirectoryWithNSString:(NSString *)path {
  return [[NSBundle mainBundle] pathForResource:path ofType:nil] ? YES : NO;
}

- (void)copyAllFieldsTo:(RAREaAppContextImpl *)other {
  [super copyAllFieldsTo:other];
  other->interfaceProxies_ = interfaceProxies_;
  other->logger_ = logger_;
  other->useAssetCatalog_ = useAssetCatalog_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "isPopupWindowShowing", NULL, "Z", 0x1, NULL },
    { "isDialogWindowShowing", NULL, "Z", 0x1, NULL },
    { "browseURLWithJavaNetURL:", NULL, "Z", 0x101, NULL },
    { "closePopupWindowsWithBoolean:", NULL, "V", 0x101, NULL },
    { "islandscapeMode", NULL, "Z", 0x1, NULL },
    { "makeResourcePathWithNSString:", NULL, "LJavaNetURL", 0x1, NULL },
    { "makeResourcePathWithNSString:withNSString:", NULL, "LNSString", 0x1, NULL },
    { "makeResourcePathWithNSString:withNSString:withNSString:", NULL, "LNSString", 0x109, NULL },
    { "makeResourceURLWithNSString:withNSString:", NULL, "LJavaNetURL", 0x1, NULL },
    { "getAppContextWithRAREiPlatformComponent:", NULL, "LRAREaAppContextImpl", 0x9, NULL },
    { "getAppContextWithRAREiWidget:", NULL, "LRAREaAppContextImpl", 0x9, NULL },
    { "getApplicationName", NULL, "LNSString", 0x1, NULL },
    { "getComponentCreator", NULL, "LRAREiPlatformComponentFactory", 0x1, NULL },
    { "getErrorInformationWithId:", NULL, "LRAREErrorInformation", 0x1, NULL },
    { "getFunctionHandler", NULL, "LRAREiFunctionHandler", 0x1, NULL },
    { "getInterfaceProxyClassNameWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getInterfaceProxyObjectWithNSString:", NULL, "LNSObject", 0x1, NULL },
    { "getLogger", NULL, "LJavaUtilLoggingLogger", 0x1, NULL },
    { "getManagedResourceWithNSString:withNSString:withBoolean:withRAREUTCharArray:", NULL, "LRAREUIImage", 0x4, NULL },
    { "getResourceAsStringWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getResourceURLWithNSString:", NULL, "LJavaNetURL", 0x1, NULL },
    { "getUIDefaultsWithRAREiWidget:", NULL, "LRAREUIProperties", 0x9, NULL },
    { "getWindowViewer", NULL, "LRAREWindowViewer", 0x1, NULL },
    { "isInitialized", NULL, "Z", 0x1, NULL },
    { "setFocusOwnerWithRAREiPlatformComponent:", NULL, "V", 0x0, NULL },
    { "setPermanentFocusOwnerWithRAREiPlatformComponent:", NULL, "V", 0x0, NULL },
    { "setupUIDefaults", NULL, "V", 0x4, NULL },
    { "getDefaultManagedResourcePath", NULL, "LNSString", 0x4, NULL },
    { "getResourceAsAnimatorExWithNSString:", NULL, "LRAREiPlatformAnimator", 0x4, NULL },
    { "hasResourceDirectoryWithNSString:", NULL, "Z", 0x104, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "interfaceProxies_", NULL, 0x0, "LJavaUtilHashMap" },
    { "logger_", NULL, 0x4, "LJavaUtilLoggingLogger" },
    { "useAssetCatalog_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _RAREaAppContextImpl = { "aAppContextImpl", "com.appnativa.rare.platform.apple", NULL, 0x401, 30, methods, 3, fields, 0, NULL};
  return &_RAREaAppContextImpl;
}

@end
