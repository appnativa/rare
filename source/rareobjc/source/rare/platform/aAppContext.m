//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/platform/aAppContext.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/DateContext.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iAppContext.h"
#include "com/appnativa/rare/iAsyncLoadStatusHandler.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iDataCollection.h"
#include "com/appnativa/rare/iDataCollectionHandler.h"
#include "com/appnativa/rare/iExceptionHandler.h"
#include "com/appnativa/rare/iFunctionCallback.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/iResourceFinder.h"
#include "com/appnativa/rare/iWeakReference.h"
#include "com/appnativa/rare/iWidgetCustomizer.h"
#include "com/appnativa/rare/iWorkerTask.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/net/JavaURLConnection.h"
#include "com/appnativa/rare/net/iConnectionHandler.h"
#include "com/appnativa/rare/net/iMultipartMimeHandler.h"
#include "com/appnativa/rare/net/iURLConnection.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/platform/aAppContext.h"
#include "com/appnativa/rare/platform/aRare.h"
#include "com/appnativa/rare/platform/iConfigurationListener.h"
#include "com/appnativa/rare/scripting/iScriptHandler.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIAction.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorShade.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIImageIcon.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UISound.h"
#include "com/appnativa/rare/ui/aFocusedAction.h"
#include "com/appnativa/rare/ui/effects/PullBackAnimation.h"
#include "com/appnativa/rare/ui/effects/ShakeAnimation.h"
#include "com/appnativa/rare/ui/effects/SlideAnimation.h"
#include "com/appnativa/rare/ui/effects/iPlatformAnimator.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformComponentFactory.h"
#include "com/appnativa/rare/ui/iPlatformWindowManager.h"
#include "com/appnativa/rare/ui/iPrintHandler.h"
#include "com/appnativa/rare/ui/iSpeechEnabler.h"
#include "com/appnativa/rare/ui/listener/iApplicationListener.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/util/DataItemParserHandler.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/appnativa/util/iURLResolver.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/Callable.h"

@implementation RAREaAppContext

static RAREaAppContext * RAREaAppContext__instance_;
static id<RAREiPlatformComponent> RAREaAppContext_focusOwner_;
static id<RAREiPlatformComponent> RAREaAppContext_permanentFocusOwner_;

+ (RAREaAppContext *)_instance {
  return RAREaAppContext__instance_;
}

+ (void)set_instance:(RAREaAppContext *)_instance {
  RAREaAppContext__instance_ = _instance;
}

+ (id<RAREiPlatformComponent>)focusOwner {
  return RAREaAppContext_focusOwner_;
}

+ (void)setFocusOwner:(id<RAREiPlatformComponent>)focusOwner {
  RAREaAppContext_focusOwner_ = focusOwner;
}

+ (id<RAREiPlatformComponent>)permanentFocusOwner {
  return RAREaAppContext_permanentFocusOwner_;
}

+ (void)setPermanentFocusOwner:(id<RAREiPlatformComponent>)permanentFocusOwner {
  RAREaAppContext_permanentFocusOwner_ = permanentFocusOwner;
}

- (id)initWithRAREaRare:(RAREaRare *)instance
   withRAREUIProperties:(RAREUIProperties *)defaults {
  if (self = [super init]) {
    appStrings_ = [[JavaUtilHashMap alloc] init];
    appIcons_ = [[JavaUtilHashMap alloc] init];
    activeWindows_ = [[RAREUTIdentityArrayList alloc] init];
    isPlatformTheme_ = YES;
    self->RARE_ = instance;
    self->uiDefaults_ = defaults;
    RAREaAppContext__instance_ = self;
  }
  return self;
}

- (void)addApplicationListenerWithRAREiApplicationListener:(id<RAREiApplicationListener>)listener {
  if (((RAREaRare *) nil_chk(RARE_))->appListeners_ == nil) {
    RARE_->appListeners_ = [JavaUtilCollections synchronizedListWithJavaUtilList:[[RAREUTIdentityArrayList alloc] init]];
  }
  [((id<JavaUtilList>) nil_chk(RARE_->appListeners_)) addWithId:listener];
}

- (void)addConfigurationListenerWithRAREiConfigurationListener:(id<RAREiConfigurationListener>)listener {
  if (configListeners_ == nil) {
    configListeners_ = [JavaUtilCollections synchronizedListWithJavaUtilList:[[RAREUTIdentityArrayList alloc] init]];
  }
  [((id<JavaUtilList>) nil_chk(configListeners_)) addWithId:listener];
}

- (void)addJarURLWithJavaNetURL:(JavaNetURL *)uRL {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)addURLPrefixMappingWithNSString:(NSString *)prefix
                           withNSString:(NSString *)mapping {
  [((RAREaRare *) nil_chk(RARE_)) addPrefixMappingWithNSString:prefix withNSString:mapping];
}

- (void)addResourceStringWithNSString:(NSString *)name
                         withNSString:(NSString *)value {
  @synchronized(self) {
    {
      (void) [((id<JavaUtilMap>) nil_chk(appStrings_)) putWithId:name withId:value];
    }
  }
}

- (BOOL)alwaysUseHeavyTargets {
  return ((RAREaRare *) nil_chk(RARE_))->useHeavyTargets_;
}

- (BOOL)areAllLabelsDraggable {
  return ((RAREaRare *) nil_chk(RARE_))->allLabelsDraggable_;
}

- (BOOL)areAllTextFieldsDroppable {
  return ((RAREaRare *) nil_chk(RARE_))->allTextFieldsDroppable_;
}

- (BOOL)areAllWidgetsDraggable {
  return NO;
}

- (BOOL)areViewersLocalByDefault {
  return ((RAREaRare *) nil_chk(RARE_))->viewersLocalByDefault_;
}

- (void)clearData {
  [((id<JavaUtilMap>) nil_chk(((RAREaRare *) nil_chk(RARE_))->appData_)) clear];
}

- (void)clearDataWithNSString:(NSString *)prefix {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(((RAREaRare *) nil_chk(RARE_))->appData_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id o = [it next];
    if (([o isKindOfClass:[NSString class]]) && [((NSString *) check_class_cast(o, [NSString class])) hasPrefix:prefix]) {
      [it remove];
    }
  }
}

- (id<RAREiDataCollection>)createCollectionWithNSString:(NSString *)handler
                                           withNSString:(NSString *)name
                                     withRAREActionLink:(RAREActionLink *)link
                                        withJavaUtilMap:(id<JavaUtilMap>)attributes
                                            withBoolean:(BOOL)tabular
                              withRAREiFunctionCallback:(id<RAREiFunctionCallback>)cb {
  id<RAREiDataCollection> dc;
  if ((handler == nil) || ([handler sequenceLength] == 0)) {
    dc = [RAREDataItemParserHandler createCollectionWithRAREiPlatformAppContext:self withNSString:name withRAREActionLink:link withJavaUtilMap:attributes withBoolean:tabular withRAREiFunctionCallback:cb];
  }
  else {
    dc = [((id<RAREiDataCollectionHandler>) nil_chk([((RAREaRare *) nil_chk(RARE_)) getCollectionHandlerWithNSString:handler])) createCollectionWithRAREiPlatformAppContext:self withNSString:name withRAREActionLink:link withJavaUtilMap:attributes withRAREiFunctionCallback:cb];
  }
  [self registerDataCollectionWithRAREiDataCollection:dc];
  return dc;
}

- (JavaNetURL *)createURLWithRAREiWidget:(id<RAREiWidget>)context
                            withNSString:(NSString *)url {
  return [((RAREaRare *) nil_chk(RARE_)) createURLWithRAREiWidget:context withNSString:url];
}

- (JavaNetURL *)createURLWithJavaNetURL:(JavaNetURL *)context
                           withNSString:(NSString *)url {
  return [((RAREaRare *) nil_chk(RARE_)) createURLWithRAREiPlatformAppContext:self withJavaNetURL:context withNSString:url];
}

- (void)dispose {
  if (RAREaAppContext__instance_ == self) {
    RAREaAppContext__instance_ = nil;
  }
  RARE_ = nil;
  if (appIcons_ != nil) {
    [appIcons_ clear];
  }
  [((RAREUIProperties *) nil_chk(uiDefaults_)) clear];
  [((id<JavaUtilMap>) nil_chk(appStrings_)) clear];
  RAREaAppContext_focusOwner_ = nil;
  RAREaAppContext_permanentFocusOwner_ = nil;
  ;
  appIcons_ = nil;
  activeWindows_ = nil;
  asyncLoadStatusHandler_ = nil;
  brokenIcon_ = nil;
  configListeners_ = nil;
  lfselectionComponentPainter_ = nil;
  rareIconResourcePaths_ = nil;
  resourceFinder_ = nil;
  speechEnabler_ = nil;
  widgetCustomizer_ = nil;
}

- (id<RAREiCancelableFuture>)executeBackgroundTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  return [((RAREaRare *) nil_chk(RARE_)) executeBackgroundTaskWithJavaUtilConcurrentCallable:callable];
}

- (id<RAREiCancelableFuture>)executeBackgroundTaskWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  return [((RAREaRare *) nil_chk(RARE_)) executeBackgroundTaskWithJavaLangRunnable:runnable];
}

- (id<RAREiCancelableFuture>)executeWorkerTaskWithRAREiWorkerTask:(id<RAREiWorkerTask>)task {
  return [((RAREaRare *) nil_chk(RARE_)) executeSwingWorkerTaskWithRAREiWorkerTask:task];
}

- (void)exit {
  [((RAREaRare *) nil_chk(RARE_)) exit];
}

- (void)handleConfigurationChangedWithId:(id)changes {
  if (((RAREaRare *) nil_chk(RARE_))->windowManager_ == nil) {
    return;
  }
  landscapeMode_ = [RAREPlatformHelper isLandscapeOrientationWithId:nil];
  if (configListeners_ != nil) {
    for (id<RAREiConfigurationListener> __strong l in configListeners_) {
      [((id<RAREiConfigurationListener>) nil_chk(l)) onConfigurationChangedWithId:changes];
    }
  }
  [((id<RAREiPlatformWindowManager>) nil_chk(RARE_->windowManager_)) onConfigurationChangedWithBoolean:resetOnConfigurationChange_];
}

- (void)handleConfigurationWillChangeWithId:(id)newConfig {
  [self closePopupWindowsWithBoolean:YES];
  if (configListeners_ != nil) {
    for (id<RAREiConfigurationListener> __strong l in configListeners_) {
      [((id<RAREiConfigurationListener>) nil_chk(l)) onConfigurationWillChangeWithId:newConfig];
    }
  }
  if (((RAREaRare *) nil_chk(RARE_))->windowManager_ != nil) {
    [RARE_->windowManager_ onConfigurationWillChangeWithId:newConfig];
  }
}

- (BOOL)ignoreFormatExceptions {
  return [((RAREaRare *) nil_chk(RARE_)) ignoreFormatExceptions];
}

- (NSString *)loadScriptCodeWithRAREActionLink:(RAREActionLink *)link
                                   withBoolean:(BOOL)runOnce {
  return [((RAREaRare *) nil_chk(RARE_)) loadScriptCodeWithRAREActionLink:link withBoolean:runOnce];
}

- (BOOL)okForOSWithISPOTElement:(id<iSPOTElement>)e {
  return (RARE_ == nil) ? YES : [RARE_ okForOSWithNSString:[((id<iSPOTElement>) nil_chk(e)) spot_getAttributeWithNSString:@"os"] withRAREUTCharScanner:nil];
}

- (BOOL)okForOSWithNSString:(NSString *)os {
  return (RARE_ == nil) ? YES : [RARE_ okForOSWithNSString:os withRAREUTCharScanner:nil];
}

- (id<RAREiURLConnection>)openConnectionWithJavaNetURL:(JavaNetURL *)url {
  return [((RAREaRare *) nil_chk(RARE_)) openConnectionWithJavaNetURL:url];
}

- (id<RAREiURLConnection>)openConnectionWithJavaNetURL:(JavaNetURL *)url
                                          withNSString:(NSString *)mimeType {
  return [((RAREaRare *) nil_chk(RARE_)) openConnectionWithJavaNetURL:url withNSString:mimeType];
}

- (id<RAREiConnectionHandler>)getApplicationConnectionHandler {
  return ((RAREaRare *) nil_chk(RARE_))->applicationConnectionHandler_;
}

- (void)setApplicationConnectionHandlerWithRAREiConnectionHandler:(id<RAREiConnectionHandler>)h {
  ((RAREaRare *) nil_chk(RARE_))->applicationConnectionHandler_ = h;
}

- (id)putDataWithId:(id)key
             withId:(id)value {
  if (value == nil) {
    return [((id<JavaUtilMap>) nil_chk(((RAREaRare *) nil_chk(RARE_))->appData_)) removeWithId:key];
  }
  return [((id<JavaUtilMap>) nil_chk(((RAREaRare *) nil_chk(RARE_))->appData_)) putWithId:key withId:value];
}

- (void)putDataWithJavaUtilMap:(id<JavaUtilMap>)data
                   withBoolean:(BOOL)clearFirst {
  if (clearFirst) {
    [((id<JavaUtilMap>) nil_chk(((RAREaRare *) nil_chk(RARE_))->appData_)) clear];
  }
  if (data != nil) {
    [((id<JavaUtilMap>) nil_chk(((RAREaRare *) nil_chk(RARE_))->appData_)) putAllWithJavaUtilMap:data];
  }
}

- (void)registerCollectionHandlerWithNSString:(NSString *)name
               withRAREiDataCollectionHandler:(id<RAREiDataCollectionHandler>)ch {
  [((RAREaRare *) nil_chk(RARE_)) registerCollectionHandlerWithNSString:name withRAREiDataCollectionHandler:ch];
}

- (void)registerDataCollectionWithRAREiDataCollection:(id<RAREiDataCollection>)dc {
  [((RAREaRare *) nil_chk(RARE_)) registerDataCollectionWithRAREiDataCollection:dc];
}

- (void)registerFocusedActionWithRAREaFocusedAction:(RAREaFocusedAction *)action {
  [((RAREaRare *) nil_chk(RARE_)) registerFocusedActionWithRAREaFocusedAction:action];
}

- (void)registerWidgetClassWithNSString:(NSString *)type
                           withIOSClass:(IOSClass *)cls {
  [((RAREaRare *) nil_chk(RARE_)) registerWidgetClassWithNSString:type withId:cls];
}

- (void)removeApplicationListenerWithRAREiApplicationListener:(id<RAREiApplicationListener>)listener {
  if (((RAREaRare *) nil_chk(RARE_))->appListeners_ != nil) {
    [RARE_->appListeners_ removeWithId:listener];
  }
}

- (void)removeConfigurationListenerWithRAREiConfigurationListener:(id<RAREiConfigurationListener>)listener {
  if (configListeners_ != nil) {
    [configListeners_ removeWithId:listener];
  }
}

- (id)removeDataWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(((RAREaRare *) nil_chk(RARE_))->appData_)) removeWithId:key];
}

- (void)resetRunOnceWithRAREActionLink:(RAREActionLink *)link {
  [((RAREaRare *) nil_chk(RARE_)) resetRunOnceWithRAREActionLink:link];
}

- (NSString *)rewriteURLWithRAREiWidget:(id<RAREiWidget>)widget
                         withJavaNetURL:(JavaNetURL *)url
                                 withId:(id)code {
  return [RAREJavaURLConnection toExternalFormWithJavaNetURL:url];
}

- (void)unregisterDataCollectionWithRAREiDataCollection:(id<RAREiDataCollection>)dc {
  [((RAREaRare *) nil_chk(RARE_)) unregisterDataCollectionWithRAREiDataCollection:dc];
}

- (void)setAsyncLoadStatusHandlerWithRAREiAsyncLoadStatusHandler:(id<RAREiAsyncLoadStatusHandler>)handler {
  self->asyncLoadStatusHandler_ = handler;
}

- (void)setContextURLWithJavaNetURL:(JavaNetURL *)url {
  [((RAREaRare *) nil_chk(RARE_)) setContextURLWithJavaNetURL:url];
}

- (void)setContextURLWithJavaNetURL:(JavaNetURL *)url
                       withNSString:(NSString *)appRoot {
  [((RAREaRare *) nil_chk(RARE_)) setContextURLWithJavaNetURL:url];
  if ((appRoot != nil) && [appRoot isEqual:@"/"]) {
    appRoot = @"";
  }
  RARE_->applicationRoot_ = appRoot;
}

- (void)setDefaultExceptionHandlerWithRAREiExceptionHandler:(id<RAREiExceptionHandler>)eh {
  [((RAREaRare *) nil_chk(RARE_)) setDefaultExceptionHandlerWithRAREiExceptionHandler:eh];
}

- (void)setLowMemoryWarningHandlerWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  self->lowMemoryWarningHandler_ = runnable;
}

- (void)setMultipartMimeHandlerWithRAREiMultipartMimeHandler:(id<RAREiMultipartMimeHandler>)multipartMimeHandler {
  ((RAREaRare *) nil_chk(RARE_))->multipartMimeHandler_ = multipartMimeHandler;
}

- (void)setResourceFinderWithRAREiResourceFinder:(id<RAREiResourceFinder>)rf {
  resourceFinder_ = rf;
}

- (void)setSpeechEnablerWithRAREiSpeechEnabler:(id<RAREiSpeechEnabler>)speechEnabler {
  self->speechEnabler_ = speechEnabler;
}

- (void)setThemeColorsWithRAREUIColor:(RAREUIColor *)fg
                      withRAREUIColor:(RAREUIColor *)bg
                          withBoolean:(BOOL)isdefault {
  [((RAREUIProperties *) nil_chk(uiDefaults_)) putWithNSString:@"Rare.foreground" withId:fg];
  [uiDefaults_ putWithNSString:@"Rare.textText" withId:fg];
  BOOL dark = [((RAREUIColor *) nil_chk(bg)) isDarkColor];
  if (dark) {
    [uiDefaults_ putWithNSString:@"Rare.disabledForeground" withId:[((RAREUIColor *) nil_chk(fg)) lightWithInt:-75]];
    [uiDefaults_ putWithNSString:@"Rare.TitledBorder.titleColor" withId:[fg lightWithInt:-75]];
  }
  else {
    [uiDefaults_ putWithNSString:@"Rare.TitledBorder.titleColor" withId:[((RAREUIColor *) nil_chk(fg)) lightWithInt:75]];
    [uiDefaults_ putWithNSString:@"Rare.disabledForeground" withId:[fg lightWithInt:75]];
  }
  int n = [bg getRed] + [bg getGreen] + [bg getBlue];
  if (n < 9) {
    bg = [[RAREUIColor alloc] initWithInt:(int) 0x03 withInt:(int) 0x03 withInt:(int) 0x03];
  }
  else if (n > 715) {
    bg = [[RAREUIColor alloc] initWithInt:(int) 0xee withInt:(int) 0xee withInt:(int) 0xee];
  }
  [uiDefaults_ putWithNSString:@"Rare.background" withId:bg];
  [uiDefaults_ putWithNSString:@"Rare.textHighlightText" withId:fg];
  [uiDefaults_ putWithNSString:@"Rare.textHighlight" withId:bg];
  RAREUIColor *c = [[RAREUIColorShade alloc] initWithRAREUIColor:bg withNSString:@"Rare.background"];
  [uiDefaults_ putWithNSString:@"controlLtGradient" withId:[[RAREUIColorShade alloc] initWithRAREUIColor:c withInt:(255 * 15) / 100]];
  [uiDefaults_ putWithNSString:@"controlDkGradient" withId:[[RAREUIColorShade alloc] initWithRAREUIColor:c withInt:(255 * -15) / 100]];
  [uiDefaults_ putWithNSString:@"controlShadow" withId:[[RAREUIColorShade alloc] initWithRAREUIColor:c withInt:(255 * -25) / 100]];
  [uiDefaults_ putWithNSString:@"controlDkShadow" withId:[[RAREUIColorShade alloc] initWithRAREUIColor:c withInt:(255 * -30) / 100]];
  [uiDefaults_ putWithNSString:@"controlLtShadow" withId:[[RAREUIColorShade alloc] initWithRAREUIColor:c withInt:(255 * -15) / 100]];
  [uiDefaults_ putWithNSString:@"controlLtHighlight" withId:[[RAREUIColorShade alloc] initWithRAREUIColor:c withInt:(255 * 30) / 100]];
  [uiDefaults_ putWithNSString:@"controlHighlight" withId:[[RAREUIColorShade alloc] initWithRAREUIColor:c withInt:(255 * -10) / 100]];
  [uiDefaults_ putWithNSString:@"Rare.backgroundLtGradient" withId:[uiDefaults_ getWithNSString:@"controlLtGradient"]];
  [uiDefaults_ putWithNSString:@"Rare.backgroundDkGradient" withId:[uiDefaults_ getWithNSString:@"controlDkGradient"]];
  [uiDefaults_ putWithNSString:@"Rare.backgroundShadow" withId:[uiDefaults_ getWithNSString:@"controlShadow"]];
  [uiDefaults_ putWithNSString:@"Rare.backgroundDkShadow" withId:[uiDefaults_ getWithNSString:@"controlDkShadow"]];
  [uiDefaults_ putWithNSString:@"Rare.backgroundLtShadow" withId:[uiDefaults_ getWithNSString:@"controlLtShadow"]];
  [uiDefaults_ putWithNSString:@"Rare.backgroundLtHighlight" withId:[uiDefaults_ getWithNSString:@"controlLtHighlight"]];
  [uiDefaults_ putWithNSString:@"Rare.backgroundHighlight" withId:[uiDefaults_ getWithNSString:@"controlHighlight"]];
  [uiDefaults_ putWithNSString:@"Rare.List.dividerLineColor" withId:[[RAREUIColor alloc] initWithInt:224 withInt:224 withInt:224]];
  (void) [((id<JavaUtilMap>) nil_chk(appIcons_)) removeWithId:@"Rare.icon.close"];
  (void) [appIcons_ removeWithId:@"Rare.icon.menu"];
  (void) [appIcons_ removeWithId:@"Rare.icon.backArrow"];
  (void) [appIcons_ removeWithId:@"Rare.icon.more"];
  if (![((RAREUIColor *) nil_chk(fg)) isDarkColor]) {
    RAREUIImageIcon *icon = [self getResourceAsIconWithNSString:@"Rare.icon.close_light"];
    (void) [appIcons_ putWithId:@"Rare.icon.close" withId:icon];
    icon = [self getResourceAsIconWithNSString:@"Rare.icon.menu_light"];
    (void) [appIcons_ putWithId:@"Rare.icon.menu" withId:icon];
    icon = [self getResourceAsIconWithNSString:@"Rare.icon.backArrow_light"];
    (void) [appIcons_ putWithId:@"Rare.icon.backArrow" withId:icon];
    icon = [self getResourceAsIconWithNSString:@"Rare.icon.backArrow_light"];
    (void) [appIcons_ putWithId:@"Rare.icon.backArrow" withId:icon];
    icon = [self getResourceAsIconWithNSString:@"Rare.icon.more_light"];
    (void) [appIcons_ putWithId:@"Rare.icon.more" withId:icon];
  }
  (void) [appIcons_ putWithId:@"Rare.icon.cancel" withId:[self getResourceAsIconWithNSString:@"Rare.icon.close"]];
  [uiDefaults_ putWithNSString:@"Rare.List.foreground" withId:[RAREUIColor BLACK]];
  [uiDefaults_ putWithNSString:@"Rare.List.background" withId:[RAREUIColor WHITE]];
  [uiDefaults_ putWithNSString:@"Rare.List.disabledForeground" withId:[RAREUIColor GRAY]];
  [RAREColorUtils setBaseColors];
  isPlatformTheme_ = isdefault;
}

- (void)setURLUserInfoWithJavaUtilMap:(id<JavaUtilMap>)mappings {
  if (((RAREaRare *) nil_chk(RARE_))->userInfo_ != nil) {
    [RARE_->userInfo_ clear];
  }
  else {
    RARE_->userInfo_ = [[JavaUtilLinkedHashMap alloc] init];
  }
  if (mappings != nil) {
    [((id<JavaUtilMap>) nil_chk(RARE_->userInfo_)) putAllWithJavaUtilMap:mappings];
  }
}

- (void)setURLUserInfoWithJavaNetURL:(JavaNetURL *)path
                        withNSString:(NSString *)info {
  [((RAREaRare *) nil_chk(RARE_)) setURLUserInfoWithJavaNetURL:path withNSString:info];
}

- (void)setWidgetCustomizerWithRAREiWidgetCustomizer:(id<RAREiWidgetCustomizer>)customizer {
  widgetCustomizer_ = customizer;
}

- (RAREUIAction *)getActionWithNSString:(NSString *)name {
  return [((RAREaRare *) nil_chk(RARE_)) getActionWithNSString:name];
}

- (id<JavaUtilMap>)getActions {
  return ((RAREaRare *) nil_chk(RARE_))->actionMap_;
}

- (RAREUTIdentityArrayList *)getActiveWindows {
  return activeWindows_;
}

+ (id<RAREiPlatformAppContext>)getAppContextWithInt:(int)identity {
  return RAREaAppContext__instance_;
}

- (NSString *)getApplicationName {
  return [((RAREaRare *) nil_chk(RARE_)) getName];
}

- (NSString *)getApplicationRelativeLocationWithJavaNetURL:(JavaNetURL *)url {
  return [((RAREaRare *) nil_chk(RARE_)) getRelativeLocationWithJavaNetURL:url];
}

- (JavaNetURL *)getApplicationURL {
  return [((RAREaRare *) nil_chk(RARE_)) getApplicationURL];
}

- (id<RAREiAsyncLoadStatusHandler>)getAsyncLoadStatusHandler {
  return (asyncLoadStatusHandler_ == nil) ? RARE_ : ((id) asyncLoadStatusHandler_);
}

- (RAREPaintBucket *)getAutoHilightPainter {
  return ((RAREaRare *) nil_chk(RARE_))->autoHilightPainter_;
}

- (BOOL)getAutoLocalizeDateFormats {
  return ((RAREaRare *) nil_chk(RARE_))->autoLocalizeDateFormats_;
}

- (BOOL)getAutoLocalizeNumberFormats {
  return ((RAREaRare *) nil_chk(RARE_))->autoLocalizeNumberFormats_;
}

- (JavaNetURL *)getCodeBase {
  return [self getDocumentBase];
}

- (NSString *)getContentAsStringWithJavaNetURL:(JavaNetURL *)url {
  return [((id<RAREiURLConnection>) nil_chk([((RAREaRare *) nil_chk(RARE_)) openConnectionWithJavaNetURL:url])) getContentAsString];
}

- (JavaNetURL *)getContextURL {
  return ((RAREaRare *) nil_chk(RARE_))->contextURL_;
}

- (NSString *)getCustomPropertyPrefix {
  return ((RAREaRare *) nil_chk(RARE_))->customPropertyPrefix_;
}

- (id)getDataWithId:(id)key {
  if (((RAREaRare *) nil_chk(RARE_))->appData_ == nil) {
    return nil;
  }
  return [((id<JavaUtilMap>) nil_chk(RARE_->appData_)) getWithId:key];
}

- (id<RAREiDataCollection>)getDataCollectionWithNSString:(NSString *)name {
  id<RAREiDataCollection> dc = nil;
  if (((RAREaRare *) nil_chk(RARE_))->dataCollections_ != nil) {
    dc = [RARE_->dataCollections_ getWithId:name];
  }
  return dc;
}

- (id<RAREiDataConverter>)getDataConverterWithIOSClass:(IOSClass *)cls {
  return [RAREaRare getDataConverterWithIOSClass:cls];
}

- (IOSClass *)getDataConverterClassWithNSString:(NSString *)name {
  return [RAREaRare getDataConverterClassWithNSString:name];
}

- (RAREDateContext *)getDefaultDateContext {
  return ((RAREaRare *) nil_chk(RARE_))->defaultDateContext_;
}

- (RAREDateContext *)getDefaultDateTimeContext {
  return ((RAREaRare *) nil_chk(RARE_))->defaultDateTimeContext_;
}

- (id<RAREiExceptionHandler>)getDefaultExceptionHandler {
  return [((RAREaRare *) nil_chk(RARE_)) getDefaultExceptionHandler];
}

+ (id<RAREiExceptionHandler>)getDefaultExceptionHandlerWithRAREiWidget:(id<RAREiWidget>)w {
  return [((RAREaAppContext *) nil_chk(RAREaAppContext__instance_)) getDefaultExceptionHandler];
}

- (NSString *)getDefaultScrptingLanguage {
  return ((RAREaRare *) nil_chk(RARE_))->defaultScriptingLanguage_;
}

- (RAREDateContext *)getDefaultTimeContext {
  return ((RAREaRare *) nil_chk(RARE_))->defaultTimeContext_;
}

- (id<RAREUTiURLResolver>)getDefaultURLResolver {
  return (id<RAREUTiURLResolver>) check_protocol_cast([((RAREaRare *) nil_chk(RARE_)) getRootViewer], @protocol(RAREUTiURLResolver));
}

- (JavaNetURL *)getDocumentBase {
  JavaNetURL *u = [self getContextURL];
  if (u != nil) {
    @try {
      u = [[JavaNetURL alloc] initWithNSString:[RAREJavaURLConnection parenToExternalFormWithJavaNetURL:u]];
    }
    @catch (JavaLangException *ignore) {
    }
  }
  return u;
}

- (id<RAREiPlatformComponent>)getFocusOwner {
  if ((RAREaAppContext_focusOwner_ != nil) && ![RAREaAppContext_focusOwner_ isDisplayable]) {
    RAREaAppContext_focusOwner_ = nil;
  }
  return RAREaAppContext_focusOwner_;
}

- (int)getIdentityInt {
  return [JavaLangSystem identityHashCodeWithId:self];
}

- (JavaIoInputStream *)getInputStreamWithJavaNetURL:(JavaNetURL *)url {
  return [((id<RAREiURLConnection>) nil_chk([((RAREaRare *) nil_chk(RARE_)) openConnectionWithJavaNetURL:url])) getInputStream];
}

+ (int)getInstanceCount {
  return 1;
}

- (int)getItemPaddingHeight {
  return ((RAREaRare *) nil_chk(RARE_))->itemPaddingHeight_;
}

- (RAREPaintBucket *)getListItemFocusPainter {
  return ((RAREaRare *) nil_chk(RARE_))->listItemFocusPainter_;
}

- (id<RAREiPlatformComponentPainter>)getLostFocusSelectionComponentPainter {
  if (lfselectionComponentPainter_ == nil) {
    lfselectionComponentPainter_ = [((RAREPaintBucket *) nil_chk([self getSelectionPainter])) getComponentPainterWithBoolean:YES];
  }
  return lfselectionComponentPainter_;
}

- (RAREPaintBucket *)getLostFocusSelectionPainter {
  return ((RAREaRare *) nil_chk(RARE_))->lostFocusSelectionPainter_;
}

- (RAREWindowViewer *)getMainWindow {
  id<RAREiPlatformWindowManager> wm = [((RAREaRare *) nil_chk(RARE_)) getWindowManager];
  return (wm == nil) ? nil : (RAREWindowViewer *) check_class_cast([wm getRootViewer], [RAREWindowViewer class]);
}

- (RAREUIImage *)getManagedResourceWithNSString:(NSString *)name {
  return [self getManagedResourceWithNSString:name withBoolean:landscapeMode_];
}

- (RAREUIImage *)getManagedResourceWithNSString:(NSString *)name
                                    withBoolean:(BOOL)landscape {
  if ([((NSString *) nil_chk(name)) hasSuffix:@".png"] || [name hasSuffix:@".jpg"] || [name hasSuffix:@".gif"]) {
    return [RAREPlatformHelper getImageFromResourceFileNameWithNSString:name];
  }
  RAREUIImage *img = nil;
  IOSObjectArray *path;
  RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
  if ([name hasPrefix:@"Rare.icon."]) {
    path = rareIconResourcePaths_;
  }
  else {
    if (!managedResourcePathInitialized_) {
      [self initializeManagedResourcePaths];
    }
    path = managedResourcePaths_;
  }
  (void) [ca setWithNSString:name];
  if ([name indexOf:'.'] != -1) {
    (void) [((RAREUTCharArray *) nil_chk([ca toLowerCase])) replaceWithChar:'.' withChar:'_'];
  }
  NSString *cname = [ca description];
  {
    IOSObjectArray *a__ = path;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *s = (*b__++);
      if (landscape && [((NSString *) nil_chk(s)) contains:@"-port"]) {
        continue;
      }
      if (!landscape && [((NSString *) nil_chk(s)) contains:@"-land"]) {
        continue;
      }
      (void) [ca setWithNSString:s];
      (void) [((RAREUTCharArray *) nil_chk([ca appendWithChar:'/'])) appendWithNSString:cname];
      NSString *rname = [ca description];
      JavaNetURL *url = [self checkForFileWithNSString:rname];
      if (url != nil) {
        float fd = 1;
        if ([((NSString *) nil_chk(s)) contains:@"-xhdpi"]) {
          fd = 2;
        }
        @try {
          img = [RAREaPlatformHelper createImageWithJavaNetURL:url withBoolean:NO withFloat:fd];
          [((RAREUIImage *) nil_chk(img)) setResourceNameWithNSString:name];
          return img;
        }
        @catch (JavaIoIOException *e) {
          return nil;
        }
      }
    }
  }
  return nil;
}

- (id<RAREiMultipartMimeHandler>)getMultipartMimeHandler {
  if (((RAREaRare *) nil_chk(RARE_))->multipartMimeHandler_ == nil) {
    NSString *cls = [((RAREUIProperties *) nil_chk([self getUIDefaults])) getStringWithNSString:@"aRare.multipartMimeHandlerClassName"];
    if (cls == nil) {
      cls = @"com.appnativa.rare.net.MultipartMimeHandler";
    }
    @try {
      RARE_->multipartMimeHandler_ = (id<RAREiMultipartMimeHandler>) check_protocol_cast([((IOSClass *) nil_chk([RAREaPlatformHelper loadClassWithNSString:cls])) newInstance], @protocol(RAREiMultipartMimeHandler));
    }
    @catch (JavaLangThrowable *e) {
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
    }
  }
  return RARE_->multipartMimeHandler_;
}

- (NSString *)getName {
  return [((RAREaRare *) nil_chk(RARE_)) getName];
}

- (id<RAREiPlatformComponent>)getPermanentFocusOwner {
  if ((RAREaAppContext_permanentFocusOwner_ != nil) && ![RAREaAppContext_permanentFocusOwner_ isDisplayable]) {
    RAREaAppContext_permanentFocusOwner_ = nil;
  }
  return RAREaAppContext_permanentFocusOwner_;
}

- (RAREPaintBucket *)getPressedPainter {
  return ((RAREaRare *) nil_chk(RARE_))->pressedPainter_;
}

- (id<RAREiPrintHandler>)getPrintHandler {
  return nil;
}

- (JavaIoReader *)getReaderWithJavaNetURL:(JavaNetURL *)url {
  return [((id<RAREiURLConnection>) nil_chk([((RAREaRare *) nil_chk(RARE_)) openConnectionWithJavaNetURL:url])) getReader];
}

- (JavaIoReader *)getReaderWithJavaNetURLConnection:(JavaNetURLConnection *)conn {
  return [RAREaRare getReaderWithJavaNetURLConnection:conn];
}

- (RAREUISound *)getSoundWithNSString:(NSString *)sound {
  if ([((NSString *) nil_chk(sound)) hasPrefix:@"Rare."]) {
    sound = [sound lowercaseStringWithJRELocale:[JavaUtilLocale US]];
    sound = [((NSString *) nil_chk(sound)) replace:'.' withChar:'_'];
    return [RAREPlatformHelper getSoundResourceWithNSString:sound];
  }
  else {
    return [RAREPlatformHelper getSoundWithJavaNetURL:[self getResourceURLWithNSString:sound]];
  }
}

- (id<RAREiPlatformAnimator>)getResourceAsAnimatorWithNSString:(NSString *)animator {
  if ([((NSString *) nil_chk(animator)) contains:@"Rare.anim."]) {
    if ([@"Rare.anim.slideInFromLeft" isEqual:animator]) {
      return [[RARESlideAnimation alloc] initWithBoolean:YES withBoolean:YES];
    }
    else if ([@"Rare.anim.slideInFromRight" equalsIgnoreCase:animator]) {
      return [[RARESlideAnimation alloc] initWithBoolean:YES withBoolean:NO];
    }
    else if ([@"Rare.anim.slideDownFromTop" equalsIgnoreCase:animator]) {
      return [[RARESlideAnimation alloc] initWithBoolean:NO withBoolean:YES];
    }
    else if ([@"Rare.anim.slideUpFromBottom" equalsIgnoreCase:animator]) {
      return [[RARESlideAnimation alloc] initWithBoolean:NO withBoolean:YES];
    }
    else if ([@"Rare.anim.pullBackLeft" equalsIgnoreCase:animator]) {
      return [[RAREPullBackAnimation alloc] initWithBoolean:YES withBoolean:YES];
    }
    else if ([@"Rare.anim.pullBackRight" equalsIgnoreCase:animator]) {
      return [[RAREPullBackAnimation alloc] initWithBoolean:YES withBoolean:NO];
    }
    else if ([@"Rare.anim.pullBackTop" equalsIgnoreCase:animator]) {
      return [[RAREPullBackAnimation alloc] initWithBoolean:NO withBoolean:YES];
    }
    else if ([@"Rare.anim.pullBackButtom" equalsIgnoreCase:animator]) {
      return [[RAREPullBackAnimation alloc] initWithBoolean:NO withBoolean:NO];
    }
    else if ([@"Rare.anim.shake" equalsIgnoreCase:animator]) {
      return [[RAREShakeAnimation alloc] init];
    }
    else {
      return nil;
    }
  }
  else {
    return [self getResourceAsAnimatorExWithNSString:animator];
  }
}

- (RAREUIImageIcon *)getResourceAsIconWithNSString:(NSString *)name {
  RAREUIImageIcon *icon = [self getResourceAsIconExWithNSString:name];
  if (icon == nil) {
    [RAREPlatform debugLogWithNSString:[NSString stringWithFormat:@"missing image resource:%@", name]];
    if (brokenIcon_ == nil) {
      brokenIcon_ = [[RAREUIImageIcon alloc] initWithRAREUIImage:[RAREaUIImageIcon getBrokenImage]];
    }
    icon = brokenIcon_;
  }
  return icon;
}

- (RAREUIImageIcon *)getResourceAsIconExWithNSString:(NSString *)name {
  RAREUIImageIcon *icon = nil;
  if (resourceFinder_ != nil) {
    icon = [resourceFinder_ getResourceAsIconWithNSString:name];
    if (icon != nil) {
      return icon;
    }
  }
  if (appIcons_ != nil) {
    icon = [appIcons_ getWithId:name];
    if (icon != nil) {
      return icon;
    }
  }
  icon = [((RAREUIProperties *) nil_chk(uiDefaults_)) getImageIconWithNSString:name];
  if (icon != nil) {
    return icon;
  }
  RAREUIImage *img = [self getManagedResourceWithNSString:name];
  if (img != nil) {
    RAREUIImageIcon *ic = [[RAREUIImageIcon alloc] initWithRAREUIImage:img withNSString:@"" withNSString:[img getLocation]];
    [ic setResourceNameWithNSString:name];
    return ic;
  }
  return nil;
}

- (id<RAREiResourceFinder>)getResourceFinder {
  return resourceFinder_;
}

- (id<JavaUtilMap>)getResourceIcons {
  return appIcons_;
}

- (id<JavaUtilMap>)getResourceStrings {
  return appStrings_;
}

- (id<RAREiContainer>)getRootViewer {
  return [((RAREaRare *) nil_chk(RARE_)) getRootViewer];
}

- (NSString *)getScriptTypeWithRAREActionLink:(RAREActionLink *)link {
  return [((RAREaRare *) nil_chk(RARE_)) getScriptTypeWithRAREActionLink:link];
}

- (id<RAREiScriptHandler>)getScriptingManager {
  return ((RAREaRare *) nil_chk(RARE_))->scriptHandler_;
}

- (RAREPaintBucket *)getSelectionPainter {
  return ((RAREaRare *) nil_chk(RARE_))->selectionPainter_;
}

- (id<RAREiSpeechEnabler>)getSpeechEnabler {
  return speechEnabler_;
}

- (RAREUIProperties *)getUIDefaults {
  return uiDefaults_;
}

- (JavaNetURL *)getURLWithNSString:(NSString *)url {
  return [((RAREaRare *) nil_chk(RARE_)) getURLWithNSString:url];
}

- (id<RAREiViewer>)getViewerWithNSString:(NSString *)name {
  return [((RAREaRare *) nil_chk(RARE_)) getViewerWithNSString:name];
}

- (id<RAREiWidgetCustomizer>)getWidgetCustomizer {
  return widgetCustomizer_;
}

- (RAREPaintBucket *)getWidgetFocusPainter {
  return ((RAREaRare *) nil_chk(RARE_))->widgetFocusPainter_;
}

- (id<RAREiWidget>)getWidgetFromPathWithNSString:(NSString *)path {
  return [((id<RAREiContainer>) nil_chk([((RAREaRare *) nil_chk(RARE_)) getRootViewer])) getWidgetFromPathWithNSString:path];
}

- (IOSClass *)getWidgetHandlerWithNSString:(NSString *)mimeType {
  return [((RAREaRare *) nil_chk(RARE_)) getWidgetHandlerWithNSString:mimeType];
}

- (id<RAREiPlatformWindowManager>)getWindowManager {
  return [((RAREaRare *) nil_chk(RARE_)) getWindowManager];
}

- (RAREWindowViewer *)getTopWindowViewer {
  id<RAREiPlatformWindowManager> wm = (RARE_ == nil) ? nil : [RARE_ getWindowManager];
  return (wm == nil) ? nil : (RAREWindowViewer *) check_class_cast([wm getViewer], [RAREWindowViewer class]);
}

- (BOOL)isChangeSelColorOnLostFocus {
  return NO;
}

- (BOOL)isDebugEnabled {
  return [RAREaRare isDebugEnabled];
}

- (BOOL)isDefaultBackgroundDark {
  return [((RAREUIColor *) nil_chk([RAREColorUtils getBackground])) isDarkColor];
}

- (BOOL)isDisposed {
  return RARE_ == nil;
}

- (BOOL)isDesignContext {
  return NO;
}

- (BOOL)isDynamicNameLookupEnabled {
  return ((RAREaRare *) nil_chk(RARE_))->dynamicNameLookup_;
}

- (BOOL)isInSandbox {
  return NO;
}

- (BOOL)isOrientationLocked {
  return orientationLocked_;
}

- (BOOL)isOverlapAutoToolTips {
  return ((RAREaRare *) nil_chk(RARE_))->overlapAutoToolTips_;
}

- (BOOL)isPlatformColorTheme {
  return isPlatformTheme_;
}

- (BOOL)isShuttingDown {
  return (RARE_ == nil) ? YES : RARE_->shuttingDown_;
}

- (BOOL)isWebContext {
  return NO;
}

- (BOOL)isWebStart {
  return NO;
}

- (JavaNetURL *)checkForFileWithNSString:(NSString *)name {
  JavaNetURL *file = nil;
  file = [self makeResourceURLWithNSString:name withNSString:@"png"];
  if (file == nil) {
    file = [self makeResourceURLWithNSString:name withNSString:@"9.png"];
  }
  if (file == nil) {
    file = [self makeResourceURLWithNSString:name withNSString:@"jpg"];
  }
  if (file == nil) {
    file = [self makeResourceURLWithNSString:name withNSString:@"gif"];
  }
  return file;
}

- (BOOL)isLowIconDensity {
  return [RAREScreenUtils isLowDensity];
}

- (void)initializeManagedResourcePaths {
  @synchronized(self) {
    {
      if (managedResourcePathInitialized_) {
        return;
      }
      managedResourcePathInitialized_ = YES;
      NSString *path = [((RAREUIProperties *) nil_chk([self getUIDefaults])) getStringWithNSString:@"Rare.Resources.path"];
      if (path == nil) {
        path = [self getDefaultManagedResourcePath];
      }
      if ((path == nil) || [path isEqual:@"/"]) {
        path = @"";
      }
      JavaUtilArrayList *paths = [[JavaUtilArrayList alloc] init];
      NSString *lang = [((JavaUtilLocale *) nil_chk([JavaUtilLocale getDefault])) getLanguage];
      if (lang != nil & [((NSString *) nil_chk(lang)) sequenceLength] == 0) {
        lang = nil;
      }
      RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
      (void) [((RAREUTCharArray *) nil_chk([ca setWithNSString:path])) appendWithNSString:@"/drawable"];
      if ([self isLowIconDensity]) {
        [self addDrawablePathWithJavaUtilArrayList:paths withRAREUTCharArray:ca withNSString:lang withBoolean:NO withBoolean:YES];
        [self addDrawablePathWithJavaUtilArrayList:paths withRAREUTCharArray:ca withNSString:lang withBoolean:NO withBoolean:NO];
      }
      else {
        [self addDrawablePathWithJavaUtilArrayList:paths withRAREUTCharArray:ca withNSString:lang withBoolean:[RAREScreenUtils isHighDensity] withBoolean:NO];
        [self addDrawablePathWithJavaUtilArrayList:paths withRAREUTCharArray:ca withNSString:lang withBoolean:NO withBoolean:YES];
      }
      int len = [paths size];
      for (int i = len - 1; i >= 0; i--) {
        NSString *s = [paths getWithInt:i];
        if (![self hasResourceDirectoryWithNSString:s]) {
          (void) [paths removeWithInt:i];
        }
      }
      managedResourcePaths_ = [paths toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[paths size] type:[IOSClass classWithClass:[NSString class]]]];
    }
  }
}

- (JavaNetURL *)makeResourceURLWithNSString:(NSString *)name
                               withNSString:(NSString *)extension {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setupUIDefaultsWithRAREUIColor:(RAREUIColor *)fg
                       withRAREUIColor:(RAREUIColor *)bg {
  if (fg == nil) {
    fg = [RAREUIColor BLACK];
  }
  if (bg == nil) {
    bg = [[RAREUIColor alloc] initWithInt:(int) 0xee withInt:(int) 0xee withInt:(int) 0xee];
  }
  [self setThemeColorsWithRAREUIColor:fg withRAREUIColor:bg withBoolean:YES];
  RAREUIFont *f = [RAREFontUtils getDefaultFont];
  [((RAREUIProperties *) nil_chk(uiDefaults_)) putWithNSString:@"Rare.font.default" withId:f];
  [uiDefaults_ putWithNSString:@"Rare.font.plaintext" withId:[RAREFontUtils getMonospacedFontWithInt:[((RAREUIFont *) nil_chk(f)) getSize] - 1]];
  [uiDefaults_ putWithNSString:@"Rare.TabPane.tabAreaMargin" withId:[[RAREUIInsets alloc] initWithFloat:2]];
  (void) [((id<JavaUtilMap>) nil_chk(appIcons_)) putWithId:@"Rare.icon.empty" withId:[self getResourceAsIconWithNSString:@"Rare.icon.empty"]];
  (void) [RAREaUIImageIcon getBrokenImage];
  (void) [((id<JavaUtilMap>) nil_chk(appStrings_)) putWithId:@"Rare.Alert.errorTitle" withId:@"Application Error"];
}

- (void)updateActionsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)focusedComponent {
  if (((RAREaRare *) nil_chk(RARE_))->manageFocusedActions_) {
    JavaUtilArrayList *list = RARE_->focusedActions_;
    if (list != nil) {
      int len = [list size];
      for (int i = len - 1; i > -1; i--) {
        RAREaFocusedAction *action = (RAREaFocusedAction *) check_class_cast([((id<RAREiWeakReference>) nil_chk([list getWithInt:i])) get], [RAREaFocusedAction class]);
        if (action == nil) {
          (void) [list removeWithInt:i];
        }
        else {
          [action updateWithRAREiPlatformComponent:focusedComponent];
        }
      }
    }
  }
}

- (NSString *)getDefaultManagedResourcePath {
  return nil;
}

- (float)getDensityForImageFileWithNSString:(NSString *)file {
  return [((NSString *) nil_chk(file)) contains:@"-hdpi"] ? 2 : 1;
}

- (id<RAREiPlatformAnimator>)getResourceAsAnimatorExWithNSString:(NSString *)animation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)hasResourceDirectoryWithNSString:(NSString *)path {
  if ([((NSString *) nil_chk(path)) hasPrefix:@"file://"]) {
    @try {
      JavaIoFile *f = [[JavaIoFile alloc] initWithNSString:[path substring:6]];
      return [f exists];
    }
    @catch (JavaLangException *ignore) {
      return NO;
    }
  }
  return [self getResourceURLWithNSString:path] != nil;
}

- (void)addDrawablePathWithJavaUtilArrayList:(JavaUtilArrayList *)list
                         withRAREUTCharArray:(RAREUTCharArray *)ca
                                withNSString:(NSString *)lang
                                 withBoolean:(BOOL)highFirst
                                 withBoolean:(BOOL)low {
  int dlen = ((RAREUTCharArray *) nil_chk(ca))->_length_;
  int len = low ? 2 : 5;
  BOOL doOrientation = YES;
  BOOL portFirst = YES;
  for (int i = 0; i < len; i++) {
    if (doOrientation) {
      (void) [ca appendWithNSString:portFirst ? @"-port" : @"-land"];
    }
    if (!low) {
      (void) [ca appendWithNSString:highFirst ? @"-xhdpi" : @"-mdpi"];
    }
    else {
      portFirst = !portFirst;
    }
    if (lang != nil) {
      (void) [((RAREUTCharArray *) nil_chk([ca appendWithChar:'-'])) appendWithNSString:lang];
    }
    [((JavaUtilArrayList *) nil_chk(list)) addWithId:[ca description]];
    ca->_length_ = dlen;
    if (doOrientation) {
      (void) [ca appendWithNSString:portFirst ? @"-port" : @"-land"];
    }
    if (!low) {
      (void) [ca appendWithNSString:highFirst ? @"-mdpi" : @"-xhdpi"];
    }
    if (lang != nil) {
      (void) [((RAREUTCharArray *) nil_chk([ca appendWithChar:'-'])) appendWithNSString:lang];
    }
    [list addWithId:[ca description]];
    ca->_length_ = dlen;
    if ((i == 0) && low) {
      lang = nil;
    }
    if (i == 1) {
      lang = nil;
    }
    portFirst = !portFirst;
    if (i == 3) {
      doOrientation = NO;
    }
  }
  if (low) {
    ca->_length_ = dlen;
    [((JavaUtilArrayList *) nil_chk(list)) addWithId:[ca description]];
  }
}

- (id<RAREiPlatformComponentFactory>)getComponentCreator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)browseURLWithJavaNetURL:(JavaNetURL *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)clearStatusBar {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)closePopupWindowsWithBoolean:(BOOL)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (RAREUIImage *)getResourceAsImageWithNSString:(NSString *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getResourceAsStringWithNSString:(NSString *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNetURL *)getResourceURLWithNSString:(NSString *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (RAREWindowViewer *)getWindowViewer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isDialogWindowShowing {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isPopupWindowShowing {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)lockOrientationWithJavaLangBoolean:(JavaLangBoolean *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)oneLineErrorMessageWithNSString:(NSString *)param0
                           withNSString:(NSString *)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)unlockOrientation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllFieldsTo:(RAREaAppContext *)other {
  [super copyAllFieldsTo:other];
  other->RARE_ = RARE_;
  other->activeWindows_ = activeWindows_;
  other->appIcons_ = appIcons_;
  other->appStrings_ = appStrings_;
  other->asyncLoadStatusHandler_ = asyncLoadStatusHandler_;
  other->brokenIcon_ = brokenIcon_;
  other->configListeners_ = configListeners_;
  other->isPlatformTheme_ = isPlatformTheme_;
  other->landscapeMode_ = landscapeMode_;
  other->lfselectionComponentPainter_ = lfselectionComponentPainter_;
  other->lowMemoryWarningHandler_ = lowMemoryWarningHandler_;
  other->managedResourcePathInitialized_ = managedResourcePathInitialized_;
  other->managedResourcePaths_ = managedResourcePaths_;
  other->orientationLocked_ = orientationLocked_;
  other->rareIconResourcePaths_ = rareIconResourcePaths_;
  other->resetOnConfigurationChange_ = resetOnConfigurationChange_;
  other->resourceFinder_ = resourceFinder_;
  other->speechEnabler_ = speechEnabler_;
  other->uiDefaults_ = uiDefaults_;
  other->widgetCustomizer_ = widgetCustomizer_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addResourceStringWithNSString:withNSString:", NULL, "V", 0x21, NULL },
    { "alwaysUseHeavyTargets", NULL, "Z", 0x1, NULL },
    { "areAllLabelsDraggable", NULL, "Z", 0x1, NULL },
    { "areAllTextFieldsDroppable", NULL, "Z", 0x1, NULL },
    { "areAllWidgetsDraggable", NULL, "Z", 0x1, NULL },
    { "areViewersLocalByDefault", NULL, "Z", 0x1, NULL },
    { "createCollectionWithNSString:withNSString:withRAREActionLink:withJavaUtilMap:withBoolean:withRAREiFunctionCallback:", NULL, "LRAREiDataCollection", 0x1, NULL },
    { "createURLWithRAREiWidget:withNSString:", NULL, "LJavaNetURL", 0x1, "JavaNetMalformedURLException" },
    { "createURLWithJavaNetURL:withNSString:", NULL, "LJavaNetURL", 0x1, "JavaNetMalformedURLException" },
    { "executeBackgroundTaskWithJavaUtilConcurrentCallable:", NULL, "LRAREiCancelableFuture", 0x1, NULL },
    { "executeBackgroundTaskWithJavaLangRunnable:", NULL, "LRAREiCancelableFuture", 0x1, NULL },
    { "executeWorkerTaskWithRAREiWorkerTask:", NULL, "LRAREiCancelableFuture", 0x1, NULL },
    { "ignoreFormatExceptions", NULL, "Z", 0x1, NULL },
    { "loadScriptCodeWithRAREActionLink:withBoolean:", NULL, "LNSString", 0x1, NULL },
    { "okForOSWithISPOTElement:", NULL, "Z", 0x1, NULL },
    { "okForOSWithNSString:", NULL, "Z", 0x1, NULL },
    { "openConnectionWithJavaNetURL:", NULL, "LRAREiURLConnection", 0x1, "JavaIoIOException" },
    { "openConnectionWithJavaNetURL:withNSString:", NULL, "LRAREiURLConnection", 0x1, "JavaIoIOException" },
    { "getApplicationConnectionHandler", NULL, "LRAREiConnectionHandler", 0x1, NULL },
    { "putDataWithId:withId:", NULL, "LNSObject", 0x11, NULL },
    { "putDataWithJavaUtilMap:withBoolean:", NULL, "V", 0x11, NULL },
    { "removeDataWithId:", NULL, "LNSObject", 0x1, NULL },
    { "rewriteURLWithRAREiWidget:withJavaNetURL:withId:", NULL, "LNSString", 0x1, NULL },
    { "getActionWithNSString:", NULL, "LRAREUIAction", 0x1, NULL },
    { "getActions", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getActiveWindows", NULL, "LRAREUTIdentityArrayList", 0x1, NULL },
    { "getAppContextWithInt:", NULL, "LRAREiPlatformAppContext", 0x9, NULL },
    { "getApplicationName", NULL, "LNSString", 0x1, NULL },
    { "getApplicationRelativeLocationWithJavaNetURL:", NULL, "LNSString", 0x1, NULL },
    { "getApplicationURL", NULL, "LJavaNetURL", 0x1, NULL },
    { "getAsyncLoadStatusHandler", NULL, "LRAREiAsyncLoadStatusHandler", 0x1, NULL },
    { "getAutoHilightPainter", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getAutoLocalizeDateFormats", NULL, "Z", 0x1, NULL },
    { "getAutoLocalizeNumberFormats", NULL, "Z", 0x1, NULL },
    { "getCodeBase", NULL, "LJavaNetURL", 0x1, NULL },
    { "getContentAsStringWithJavaNetURL:", NULL, "LNSString", 0x1, "JavaIoIOException" },
    { "getContextURL", NULL, "LJavaNetURL", 0x1, NULL },
    { "getCustomPropertyPrefix", NULL, "LNSString", 0x1, NULL },
    { "getDataWithId:", NULL, "LNSObject", 0x11, NULL },
    { "getDataCollectionWithNSString:", NULL, "LRAREiDataCollection", 0x1, NULL },
    { "getDataConverterWithIOSClass:", NULL, "LRAREiDataConverter", 0x1, NULL },
    { "getDataConverterClassWithNSString:", NULL, "LIOSClass", 0x1, "JavaLangClassNotFoundException" },
    { "getDefaultDateContext", NULL, "LRAREDateContext", 0x1, NULL },
    { "getDefaultDateTimeContext", NULL, "LRAREDateContext", 0x1, NULL },
    { "getDefaultExceptionHandler", NULL, "LRAREiExceptionHandler", 0x1, NULL },
    { "getDefaultExceptionHandlerWithRAREiWidget:", NULL, "LRAREiExceptionHandler", 0x9, NULL },
    { "getDefaultScrptingLanguage", NULL, "LNSString", 0x11, NULL },
    { "getDefaultTimeContext", NULL, "LRAREDateContext", 0x1, NULL },
    { "getDefaultURLResolver", NULL, "LRAREUTiURLResolver", 0x1, NULL },
    { "getDocumentBase", NULL, "LJavaNetURL", 0x1, NULL },
    { "getFocusOwner", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getInputStreamWithJavaNetURL:", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "getListItemFocusPainter", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getLostFocusSelectionComponentPainter", NULL, "LRAREiPlatformComponentPainter", 0x1, NULL },
    { "getLostFocusSelectionPainter", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getMainWindow", NULL, "LRAREWindowViewer", 0x1, NULL },
    { "getManagedResourceWithNSString:", NULL, "LRAREUIImage", 0x1, NULL },
    { "getManagedResourceWithNSString:withBoolean:", NULL, "LRAREUIImage", 0x1, NULL },
    { "getMultipartMimeHandler", NULL, "LRAREiMultipartMimeHandler", 0x1, NULL },
    { "getName", NULL, "LNSString", 0x1, NULL },
    { "getPermanentFocusOwner", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getPressedPainter", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getPrintHandler", NULL, "LRAREiPrintHandler", 0x1, NULL },
    { "getReaderWithJavaNetURL:", NULL, "LJavaIoReader", 0x1, "JavaIoIOException" },
    { "getReaderWithJavaNetURLConnection:", NULL, "LJavaIoReader", 0x1, "JavaIoIOException" },
    { "getSoundWithNSString:", NULL, "LRAREUISound", 0x1, "JavaLangException" },
    { "getResourceAsAnimatorWithNSString:", NULL, "LRAREiPlatformAnimator", 0x1, NULL },
    { "getResourceAsIconWithNSString:", NULL, "LRAREUIImageIcon", 0x1, NULL },
    { "getResourceAsIconExWithNSString:", NULL, "LRAREUIImageIcon", 0x1, NULL },
    { "getResourceFinder", NULL, "LRAREiResourceFinder", 0x1, NULL },
    { "getResourceIcons", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getResourceStrings", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getRootViewer", NULL, "LRAREiContainer", 0x1, NULL },
    { "getScriptTypeWithRAREActionLink:", NULL, "LNSString", 0x1, NULL },
    { "getScriptingManager", NULL, "LRAREiScriptHandler", 0x1, NULL },
    { "getSelectionPainter", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getSpeechEnabler", NULL, "LRAREiSpeechEnabler", 0x1, NULL },
    { "getUIDefaults", NULL, "LRAREUIProperties", 0x1, NULL },
    { "getURLWithNSString:", NULL, "LJavaNetURL", 0x1, "JavaNetMalformedURLException" },
    { "getViewerWithNSString:", NULL, "LRAREiViewer", 0x1, NULL },
    { "getWidgetCustomizer", NULL, "LRAREiWidgetCustomizer", 0x1, NULL },
    { "getWidgetFocusPainter", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getWidgetFromPathWithNSString:", NULL, "LRAREiWidget", 0x1, NULL },
    { "getWidgetHandlerWithNSString:", NULL, "LIOSClass", 0x1, NULL },
    { "getWindowManager", NULL, "LRAREiPlatformWindowManager", 0x1, NULL },
    { "getTopWindowViewer", NULL, "LRAREWindowViewer", 0x1, NULL },
    { "isChangeSelColorOnLostFocus", NULL, "Z", 0x1, NULL },
    { "isDebugEnabled", NULL, "Z", 0x1, NULL },
    { "isDefaultBackgroundDark", NULL, "Z", 0x1, NULL },
    { "isDisposed", NULL, "Z", 0x1, NULL },
    { "isDesignContext", NULL, "Z", 0x1, NULL },
    { "isDynamicNameLookupEnabled", NULL, "Z", 0x1, NULL },
    { "isInSandbox", NULL, "Z", 0x1, NULL },
    { "isOrientationLocked", NULL, "Z", 0x1, NULL },
    { "isOverlapAutoToolTips", NULL, "Z", 0x1, NULL },
    { "isPlatformColorTheme", NULL, "Z", 0x1, NULL },
    { "isShuttingDown", NULL, "Z", 0x1, NULL },
    { "isWebContext", NULL, "Z", 0x1, NULL },
    { "isWebStart", NULL, "Z", 0x1, NULL },
    { "checkForFileWithNSString:", NULL, "LJavaNetURL", 0x4, NULL },
    { "isLowIconDensity", NULL, "Z", 0x4, NULL },
    { "initializeManagedResourcePaths", NULL, "V", 0x24, NULL },
    { "makeResourceURLWithNSString:withNSString:", NULL, "LJavaNetURL", 0x404, NULL },
    { "setupUIDefaultsWithRAREUIColor:withRAREUIColor:", NULL, "V", 0x4, NULL },
    { "updateActionsWithRAREiPlatformComponent:", NULL, "V", 0x4, NULL },
    { "getDefaultManagedResourcePath", NULL, "LNSString", 0x4, NULL },
    { "getDensityForImageFileWithNSString:", NULL, "F", 0x4, NULL },
    { "getResourceAsAnimatorExWithNSString:", NULL, "LRAREiPlatformAnimator", 0x404, NULL },
    { "hasResourceDirectoryWithNSString:", NULL, "Z", 0x4, NULL },
    { "addDrawablePathWithJavaUtilArrayList:withRAREUTCharArray:withNSString:withBoolean:withBoolean:", NULL, "V", 0x2, NULL },
    { "getComponentCreator", NULL, "LRAREiPlatformComponentFactory", 0x401, NULL },
    { "browseURLWithJavaNetURL:", NULL, "Z", 0x401, NULL },
    { "clearStatusBar", NULL, "V", 0x401, NULL },
    { "closePopupWindowsWithBoolean:", NULL, "V", 0x401, NULL },
    { "getResourceAsImageWithNSString:", NULL, "LRAREUIImage", 0x401, NULL },
    { "getResourceAsStringWithNSString:", NULL, "LNSString", 0x401, NULL },
    { "getResourceURLWithNSString:", NULL, "LJavaNetURL", 0x401, NULL },
    { "getWindowViewer", NULL, "LRAREWindowViewer", 0x401, NULL },
    { "isDialogWindowShowing", NULL, "Z", 0x401, NULL },
    { "isPopupWindowShowing", NULL, "Z", 0x401, NULL },
    { "lockOrientationWithJavaLangBoolean:", NULL, "V", 0x401, NULL },
    { "oneLineErrorMessageWithNSString:withNSString:", NULL, "V", 0x401, NULL },
    { "unlockOrientation", NULL, "V", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "_instance_", NULL, 0x4c, "LRAREaAppContext" },
    { "focusOwner_", NULL, 0xc, "LRAREiPlatformComponent" },
    { "permanentFocusOwner_", NULL, 0xc, "LRAREiPlatformComponent" },
    { "appStrings_", NULL, 0x14, "LJavaUtilMap" },
    { "appIcons_", NULL, 0x4, "LJavaUtilMap" },
    { "activeWindows_", NULL, 0x4, "LRAREUTIdentityArrayList" },
    { "RARE_", NULL, 0x4, "LRAREaRare" },
    { "asyncLoadStatusHandler_", NULL, 0x4, "LRAREiAsyncLoadStatusHandler" },
    { "brokenIcon_", NULL, 0x4, "LRAREUIImageIcon" },
    { "configListeners_", NULL, 0x4, "LJavaUtilList" },
    { "landscapeMode_", NULL, 0x4, "Z" },
    { "lfselectionComponentPainter_", NULL, 0x4, "LRAREiPlatformComponentPainter" },
    { "lowMemoryWarningHandler_", NULL, 0x4, "LJavaLangRunnable" },
    { "managedResourcePathInitialized_", NULL, 0x44, "Z" },
    { "managedResourcePaths_", NULL, 0x4, "LIOSObjectArray" },
    { "orientationLocked_", NULL, 0x4, "Z" },
    { "rareIconResourcePaths_", NULL, 0x4, "LIOSObjectArray" },
    { "resetOnConfigurationChange_", NULL, 0x4, "Z" },
    { "resourceFinder_", NULL, 0x4, "LRAREiResourceFinder" },
    { "speechEnabler_", NULL, 0x4, "LRAREiSpeechEnabler" },
    { "uiDefaults_", NULL, 0x14, "LRAREUIProperties" },
    { "widgetCustomizer_", NULL, 0x4, "LRAREiWidgetCustomizer" },
  };
  static J2ObjcClassInfo _RAREaAppContext = { "aAppContext", "com.appnativa.rare.platform", NULL, 0x401, 123, methods, 22, fields, 0, NULL};
  return &_RAREaAppContext;
}

@end
