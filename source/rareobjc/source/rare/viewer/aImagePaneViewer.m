//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/viewer/aImagePaneViewer.java
//
//  Created by decoteaud on 9/15/15.
//

#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iExceptionHandler.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/spot/ImagePane.h"
#include "com/appnativa/rare/spot/Viewer.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/effects/iAnimatorListener.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformImagePanel.h"
#include "com/appnativa/rare/ui/iPlatformShape.h"
#include "com/appnativa/rare/ui/painter/iImagePainter.h"
#include "com/appnativa/rare/viewer/aImagePaneViewer.h"
#include "com/appnativa/rare/viewer/aViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/util/SNumber.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/net/URL.h"
#include "java/util/Locale.h"

@implementation RAREaImagePaneViewer

- (id)init {
  return [self initRAREaImagePaneViewerWithRAREiContainer:nil];
}

- (id)initRAREaImagePaneViewerWithRAREiContainer:(id<RAREiContainer>)parent {
  if (self = [super initWithRAREiContainer:parent]) {
    maxZoom_ = 1000;
    minZoom_ = 10;
    zoomIncrement_ = 0;
    scalingType_ = [RAREiImagePainter_ScalingTypeEnum BILINEAR];
    widgetType_ = [RAREiWidget_WidgetTypeEnum ImagePane];
  }
  return self;
}

- (id)initWithRAREiContainer:(id<RAREiContainer>)parent {
  return [self initRAREaImagePaneViewerWithRAREiContainer:parent];
}

- (void)centerImage {
  if (imageView_ != nil) {
    [imageView_ centerImage];
  }
}

- (BOOL)isImageFitted {
  return [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) isImageFitted];
}

- (void)clearContents {
  if (imageView_ != nil) {
    [imageView_ clear];
  }
}

- (void)configureWithRARESPOTViewer:(RARESPOTViewer *)vcfg {
  [self configureExWithRARESPOTImagePane:(RARESPOTImagePane *) check_class_cast(vcfg, [RARESPOTImagePane class])];
  [self fireConfigureEventWithRARESPOTWidget:vcfg withNSString:[RAREiConstants EVENT_CONFIGURE]];
}

- (RAREUIImage *)getRenderedImage {
  return [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) getRenderedImage];
}

- (void)handleActionLinkWithRAREActionLink:(RAREActionLink *)link
                               withBoolean:(BOOL)deferred {
  @try {
    RAREUIImage *img = [RAREaPlatformHelper createImageWithJavaNetURL:[((RAREActionLink *) nil_chk(link)) getURLWithRAREiWidget:self] withBoolean:deferred withFloat:[link getImageDensity]];
    if (!disposeOnChangeSet_) {
      [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setDisposeImageOnChangeWithBoolean:YES];
    }
    [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setImageWithRAREUIImage:img];
  }
  @catch (JavaIoIOException *ex) {
    [((id<RAREiExceptionHandler>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultExceptionHandler])) handleExceptionWithJavaLangThrowable:ex];
  }
}

- (void)resetImage {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) resetImage];
}

- (void)rotateLeft {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) rotateLeft];
}

- (void)rotateRight {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) rotateRight];
}

- (void)zoomIn {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) zoomIn];
}

- (void)zoomOut {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) zoomOut];
}

- (void)setMovingOnlyAllowedWhenToLargeWithBoolean:(BOOL)allowed {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setMovingOnlyAllowedWhenToLargeWithBoolean:allowed];
}

- (void)setImageWithRAREUIImage:(RAREUIImage *)image {
  [self setImageWithRAREUIImage:image withInt:-1 withInt:-1];
}

- (void)setImageWithRAREUIImage:(RAREUIImage *)image
                        withInt:(int)width
                        withInt:(int)height {
  if (!disposeOnChangeSet_) {
    [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setDisposeImageOnChangeWithBoolean:NO];
  }
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setImageWithRAREUIImage:image withInt:width withInt:height];
}

- (void)setDisposeImageOnChangeWithBoolean:(BOOL)dispose {
  disposeOnChangeSet_ = YES;
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setDisposeImageOnChangeWithBoolean:dispose];
}

- (BOOL)isDisposeImageOnChange {
  return [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) isDisposeImageOnChange];
}

- (void)setImageBorderWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)border {
  if (imageView_ != nil) {
    [imageView_ setImageBorderWithRAREiPlatformBorder:border];
  }
}

- (void)setMovingAllowedWithBoolean:(BOOL)allowed {
  self->movingAllowed_ = allowed;
  if (imageView_ != nil) {
    [imageView_ setMovingAllowedWithBoolean:allowed];
  }
}

- (void)setPreserveAspectRatioWithBoolean:(BOOL)preserve {
  if (imageView_ != nil) {
    [imageView_ setPreserveAspectRatioWithBoolean:preserve];
  }
}

- (void)setRotatingAllowedWithBoolean:(BOOL)allowed {
  self->rotatingAllowed_ = allowed;
}

- (void)setScalingTypeWithRAREiImagePainter_ScalingTypeEnum:(RAREiImagePainter_ScalingTypeEnum *)type {
  self->scalingType_ = type;
  if (imageView_ != nil) {
    [imageView_ setScalingTypeWithRAREiImagePainter_ScalingTypeEnum:type];
  }
}

- (void)setMaximumZoomWithInt:(int)percent {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setMaximumZoomWithInt:maxZoom_];
}

- (void)setMinimumZoomWithInt:(int)percent {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setMinimumZoomWithInt:maxZoom_];
}

- (void)setSelectionColorWithRAREUIColor:(RAREUIColor *)paint {
  if (imageView_ != nil) {
    [imageView_ setSelectionColorWithRAREUIColor:paint];
  }
}

- (void)setUseSpinnerWithBoolean:(BOOL)spinner {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setUserSelectionAllowedWithBoolean:(BOOL)allowed {
  self->userSelectionAllowed_ = allowed;
  if (imageView_ != nil) {
    [imageView_ setUserSelectionAllowedWithBoolean:allowed];
  }
}

- (void)setZoomPercentWithInt:(int)percent {
  if (imageView_ == nil) {
    return;
  }
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) zoomWithInt:percent];
}

- (void)setZoomingAllowedWithBoolean:(BOOL)allowed {
  self->zoomingAllowed_ = allowed;
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setZoomingAllowedWithBoolean:allowed];
}

- (RAREUIImage *)getImage {
  return [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) getImage];
}

- (id<RAREiPlatformBorder>)getImageBorder {
  if (imageView_ != nil) {
    return [imageView_ getImageBorder];
  }
  return nil;
}

- (int)getRotation {
  return [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) getImageRotation];
}

- (RAREiImagePainter_ScalingTypeEnum *)getScalingType {
  return scalingType_;
}

- (id)getSelection {
  if (imageView_ != nil) {
    return [imageView_ getSelection];
  }
  return nil;
}

- (NSString *)getSelectionAsString {
  return nil;
}

- (int)getZoomPercent {
  return [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) getZoomPercent];
}

- (BOOL)isMovingAllowed {
  return movingAllowed_;
}

- (BOOL)isPanningAllowed {
  return panningAllowed_;
}

- (BOOL)isRotatingAllowed {
  return rotatingAllowed_;
}

- (BOOL)isUserSelectionAllowed {
  return userSelectionAllowed_;
}

- (BOOL)isZoomingAllowed {
  return zoomingAllowed_;
}

- (void)clearConfigurationWithBoolean:(BOOL)dispose {
  [self clearContents];
  if (dispose) {
    imageView_ = nil;
    scalingType_ = nil;
  }
  else {
    [self setRotatingAllowedWithBoolean:NO];
    [self setZoomingAllowedWithBoolean:NO];
  }
}

- (void)configureExWithRARESPOTImagePane:(RARESPOTImagePane *)cfg {
  NSString *s;
  if ([((RARESPOTImagePane_CScaling *) nil_chk(((RARESPOTImagePane *) nil_chk(cfg))->scaling_)) spot_valueWasSet]) {
    s = [cfg->scaling_ stringValue];
    @try {
      scalingType_ = [RAREiImagePainter_ScalingTypeEnum valueOfWithNSString:[((NSString *) nil_chk(s)) uppercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]]];
    }
    @catch (JavaLangException *e) {
      [RAREPlatform ignoreExceptionWithNSString:s withJavaLangThrowable:e];
    }
  }
  imageView_ = [self createPanelWithRARESPOTImagePane:cfg];
  formComponent_ = dataComponent_ = [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) getComponent];
  [self configureExWithRARESPOTViewer:cfg withBoolean:YES withBoolean:NO withBoolean:YES];
  zoomingAllowed_ = [((SPOTBoolean *) nil_chk(cfg->zoomingAllowed_)) booleanValue];
  rotatingAllowed_ = [((SPOTBoolean *) nil_chk(cfg->rotatingAllowed_)) booleanValue];
  movingAllowed_ = [((SPOTBoolean *) nil_chk(cfg->movingAllowed_)) booleanValue];
  autoScale_ = [((SPOTBoolean *) nil_chk(cfg->autoScale_)) booleanValue];
  userSelectionAllowed_ = [((SPOTBoolean *) nil_chk(cfg->userSelectionAllowed_)) booleanValue];
  s = [cfg->zoomingAllowed_ spot_getAttributeWithNSString:@"maximum"];
  if (s != nil) {
    maxZoom_ = [RAREUTSNumber intValueWithNSString:s];
  }
  s = [cfg->zoomingAllowed_ spot_getAttributeWithNSString:@"minimum"];
  if (s != nil) {
    minZoom_ = [RAREUTSNumber intValueWithNSString:s];
  }
  zoomIncrement_ = [RAREUTSNumber intValueWithNSString:[cfg->zoomingAllowed_ spot_getAttributeWithNSString:@"increment"]];
  [imageView_ setCenterInitiallyWithBoolean:[((SPOTBoolean *) nil_chk(cfg->centerImage_)) booleanValue]];
  [imageView_ setMovingAllowedWithBoolean:[self isMovingAllowed]];
  [imageView_ setZoomingAllowedWithBoolean:[self isZoomingAllowed]];
  [imageView_ setAutoScaleWithBoolean:autoScale_];
  [imageView_ setScalingTypeWithRAREiImagePainter_ScalingTypeEnum:scalingType_];
  [imageView_ setUserSelectionAllowedWithBoolean:userSelectionAllowed_];
  [imageView_ setPreserveAspectRatioWithBoolean:[((SPOTBoolean *) nil_chk(cfg->preserveAspectRatio_)) booleanValue]];
  if ([@"true" equalsIgnoreCase:[cfg->preserveAspectRatio_ spot_getAttributeWithNSString:@"fill"]]) {
    [imageView_ setFillViewportWithBoolean:YES];
  }
  if (zoomIncrement_ != 0) {
    [imageView_ setZoomIncrementPercentWithInt:zoomIncrement_];
  }
  if (minZoom_ > 0) {
    [imageView_ setMinimumZoomWithInt:minZoom_];
  }
  if (maxZoom_ > 0) {
    [imageView_ setMaximumZoomWithInt:maxZoom_];
  }
  if ([((SPOTBoolean *) nil_chk(cfg->focusable_)) spot_valueWasSet]) {
    [self setFocusableWithBoolean:[cfg->focusable_ booleanValue]];
  }
  else {
    [self setFocusableWithBoolean:NO];
  }
  s = [((SPOTPrintableString *) nil_chk(cfg->dataURL_)) getValue];
  if ((s != nil) && [s hasPrefix:@"resource:"]) {
    [self setImageWithRAREUIImage:[((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getResourceAsImageWithNSString:[s substring:9]]];
  }
  else if (s != nil) {
    [self handleDataURLWithRARESPOTWidget:cfg];
  }
}

- (BOOL)isFillViewport {
  return [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) isFillViewport];
}

- (void)setFillViewportWithBoolean:(BOOL)fillViewport {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setFillViewportWithBoolean:fillViewport];
}

- (BOOL)isAnimateBoundsChange {
  return [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) isAnimateBoundsChange];
}

- (void)setAnimateBoundsChangeWithBoolean:(BOOL)animateBoundsChange
                withRAREiAnimatorListener:(id<RAREiAnimatorListener>)listener {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) setAnimateBoundsChangeWithBoolean:animateBoundsChange withRAREiAnimatorListener:listener];
}

- (void)fitImage {
  [((id<RAREiPlatformImagePanel>) nil_chk(imageView_)) fitImage];
}

- (id<RAREiPlatformImagePanel>)createPanelWithRARESPOTImagePane:(RARESPOTImagePane *)cfg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllFieldsTo:(RAREaImagePaneViewer *)other {
  [super copyAllFieldsTo:other];
  other->autoScale_ = autoScale_;
  other->disposeOnChangeSet_ = disposeOnChangeSet_;
  other->imageView_ = imageView_;
  other->maxZoom_ = maxZoom_;
  other->minZoom_ = minZoom_;
  other->movingAllowed_ = movingAllowed_;
  other->panningAllowed_ = panningAllowed_;
  other->rotatingAllowed_ = rotatingAllowed_;
  other->scalingType_ = scalingType_;
  other->userSelectionAllowed_ = userSelectionAllowed_;
  other->zoomIncrement_ = zoomIncrement_;
  other->zoomingAllowed_ = zoomingAllowed_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "isImageFitted", NULL, "Z", 0x1, NULL },
    { "getRenderedImage", NULL, "LRAREUIImage", 0x1, NULL },
    { "isDisposeImageOnChange", NULL, "Z", 0x1, NULL },
    { "setUseSpinnerWithBoolean:", NULL, "V", 0x401, NULL },
    { "getImage", NULL, "LRAREUIImage", 0x1, NULL },
    { "getImageBorder", NULL, "LRAREiPlatformBorder", 0x1, NULL },
    { "getScalingType", NULL, "LRAREiImagePainter_ScalingTypeEnum", 0x1, NULL },
    { "getSelection", NULL, "LNSObject", 0x1, NULL },
    { "getSelectionAsString", NULL, "LNSString", 0x1, NULL },
    { "isMovingAllowed", NULL, "Z", 0x1, NULL },
    { "isPanningAllowed", NULL, "Z", 0x1, NULL },
    { "isRotatingAllowed", NULL, "Z", 0x1, NULL },
    { "isUserSelectionAllowed", NULL, "Z", 0x1, NULL },
    { "isZoomingAllowed", NULL, "Z", 0x1, NULL },
    { "clearConfigurationWithBoolean:", NULL, "V", 0x4, NULL },
    { "configureExWithRARESPOTImagePane:", NULL, "V", 0x4, NULL },
    { "isFillViewport", NULL, "Z", 0x1, NULL },
    { "isAnimateBoundsChange", NULL, "Z", 0x1, NULL },
    { "createPanelWithRARESPOTImagePane:", NULL, "LRAREiPlatformImagePanel", 0x404, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "maxZoom_", NULL, 0x4, "I" },
    { "minZoom_", NULL, 0x4, "I" },
    { "zoomIncrement_", NULL, 0x4, "I" },
    { "scalingType_", NULL, 0x4, "LRAREiImagePainter_ScalingTypeEnum" },
    { "autoScale_", NULL, 0x4, "Z" },
    { "imageView_", NULL, 0x4, "LRAREiPlatformImagePanel" },
    { "movingAllowed_", NULL, 0x4, "Z" },
    { "panningAllowed_", NULL, 0x4, "Z" },
    { "rotatingAllowed_", NULL, 0x4, "Z" },
    { "userSelectionAllowed_", NULL, 0x4, "Z" },
    { "zoomingAllowed_", NULL, 0x4, "Z" },
    { "disposeOnChangeSet_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _RAREaImagePaneViewer = { "aImagePaneViewer", "com.appnativa.rare.viewer", NULL, 0x401, 19, methods, 12, fields, 0, NULL};
  return &_RAREaImagePaneViewer;
}

@end
