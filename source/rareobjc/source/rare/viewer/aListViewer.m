//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/viewer/aListViewer.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iFunctionCallback.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/spot/GridCell.h"
#include "com/appnativa/rare/spot/ItemDescription.h"
#include "com/appnativa/rare/spot/ListBox.h"
#include "com/appnativa/rare/spot/Margin.h"
#include "com/appnativa/rare/spot/Viewer.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/ui/BorderPanel.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIPoint.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/UISelectionModelGroup.h"
#include "com/appnativa/rare/ui/UIStroke.h"
#include "com/appnativa/rare/ui/aWidgetListener.h"
#include "com/appnativa/rare/ui/border/UILineBorder.h"
#include "com/appnativa/rare/ui/border/UIMatteBorder.h"
#include "com/appnativa/rare/ui/dnd/DropInformation.h"
#include "com/appnativa/rare/ui/dnd/TransferFlavor.h"
#include "com/appnativa/rare/ui/dnd/iTransferable.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/DataEvent.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/event/iItemChangeListener.h"
#include "com/appnativa/rare/ui/iListHandler.h"
#include "com/appnativa/rare/ui/iListView.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformItemRenderer.h"
#include "com/appnativa/rare/ui/iPlatformListDataModel.h"
#include "com/appnativa/rare/ui/iPlatformListHandler.h"
#include "com/appnativa/rare/ui/iPlatformWindowManager.h"
#include "com/appnativa/rare/ui/iScrollerSupport.h"
#include "com/appnativa/rare/ui/iToolBar.h"
#include "com/appnativa/rare/ui/listener/iHyperlinkListener.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/table/TableHelper.h"
#include "com/appnativa/rare/util/DataItemCollection.h"
#include "com/appnativa/rare/util/ListHelper.h"
#include "com/appnativa/rare/util/SubItemComparator.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/aListViewer.h"
#include "com/appnativa/rare/viewer/aViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTInteger.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/util/CharacterIndex.h"
#include "com/appnativa/util/FilterableList.h"
#include "com/appnativa/util/IntList.h"
#include "com/appnativa/util/ObjectHolder.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/iFilter.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation RAREaListViewer

- (id)init {
  return [self initRAREaListViewerWithRAREiContainer:nil];
}

- (id)initRAREaListViewerWithRAREiContainer:(id<RAREiContainer>)parent {
  if (self = [super initWithRAREiContainer:parent]) {
    initiallySelectedIndex_ = -1;
  }
  return self;
}

- (id)initWithRAREiContainer:(id<RAREiContainer>)parent {
  return [self initRAREaListViewerWithRAREiContainer:parent];
}

- (void)handleViewerConfigurationChangedWithBoolean:(BOOL)reset {
  [super handleViewerConfigurationChangedWithBoolean:reset];
}

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  id<RAREiActionListener> l = nil;
  RARERenderableDataItem *row = [self getSelectedItem];
  l = (row == nil) ? nil : [row getActionListener];
  if (l != nil) {
    if ([(id) l isKindOfClass:[RAREActionLink class]]) {
      [((RAREActionLink *) check_class_cast(l, [RAREActionLink class])) setPopupLocationWithRAREUIPoint:[self getPopupLocationWithInt:[self getSelectedIndex]]];
    }
    [l actionPerformedWithRAREActionEvent:e];
  }
  else {
    [super actionPerformedWithRAREActionEvent:e];
  }
}

- (BOOL)addWithId:(RARERenderableDataItem *)item {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) addWithId:item];
  return YES;
}

- (void)addWithInt:(int)index
            withId:(RARERenderableDataItem *)item {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) addWithInt:index withId:item];
}

- (void)addActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) addActionListenerWithRAREiActionListener:l];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) addAllWithJavaUtilCollection:c];
  return YES;
}

- (void)addAllWithRARERenderableDataItemArray:(IOSObjectArray *)a {
  [self addWithRARERenderableDataItemArray:a withInt:0 withInt:(a == nil) ? 0 : (int) [a count]];
}

- (BOOL)addAllWithInt:(int)index
withJavaUtilCollection:(id<JavaUtilCollection>)c {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) addAllWithInt:index withJavaUtilCollection:c];
  return YES;
}

- (void)addAllWithInt:(int)index
     withJavaUtilList:(id<JavaUtilList>)items
          withBoolean:(BOOL)insertMode {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) addAllWithInt:index withJavaUtilList:items withBoolean:insertMode];
}

- (void)addExWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  [((id<JavaUtilList>) nil_chk([self getTempList])) addWithId:row];
}

- (void)addIndexToFilteredListWithInt:(int)index {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) addIndexToFilteredListWithInt:index];
}

- (void)addParsedRowWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  [self addExWithRARERenderableDataItem:row];
}

- (void)addSelectionChangeListenerWithRAREiItemChangeListener:(id<RAREiItemChangeListener>)l {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) addSelectionChangeListenerWithRAREiItemChangeListener:l];
}

- (void)addSelectionIndexWithInt:(int)index {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) addSelectionIndexWithInt:index];
}

- (BOOL)canImportWithRARETransferFlavorArray:(IOSObjectArray *)flavors
                     withRAREDropInformation:(RAREDropInformation *)drop {
  if (draggingAllowed_ && (drop != nil) && ([drop getSourceWidget] == self) && [self isEditing]) {
    return YES;
  }
  return [super canImportWithRARETransferFlavorArray:flavors withRAREDropInformation:drop];
}

- (RAREUISelectionModelGroup *)getSelectionModelGroup {
  return selectionModelGroup_;
}

- (void)clear {
  if (![RAREPlatform isUIThread]) {
    [RAREListHelper runLaterWithRAREiListHandler:self withRAREListHelper_RunTypeEnum:[RAREListHelper_RunTypeEnum CLEAR]];
    return;
  }
  initiallySelectedIndex_ = -1;
  itemAttributes_ = nil;
  if (listComponent_ != nil) {
    [self unfilter];
    [listComponent_ clear];
  }
}

- (void)clearContents {
  [self clear];
}

- (void)clearPopupMenuIndex {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) clearPopupMenuIndex];
}

- (void)clearSelection {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) clearSelection];
}

- (void)clearTempList {
  if (tempList_ != nil) {
    [tempList_ clear];
  }
  tempList_ = nil;
}

- (void)convertWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (itemDescription_ != nil) {
    [itemDescription_ convertWithRAREiWidget:self withRARERenderableDataItem:item];
  }
}

- (void)copySelectedItemsWithInt:(int)index
                     withBoolean:(BOOL)insertMode
                     withBoolean:(BOOL)delete_ {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) copySelectedItemsWithInt:index withBoolean:insertMode withBoolean:delete_];
}

- (id)deleteSelectedDataWithBoolean:(BOOL)returnData {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) deleteSelectedDataWithBoolean:returnData];
}

- (void)dispose {
  if (![self isDisposable]) {
    return;
  }
  if ((selectionModelGroup_ != nil) && (selectionModel_ != nil)) {
    [selectionModelGroup_ removeWithId:selectionModel_];
  }
  if (listModel_ != nil) {
    [listModel_ dispose];
  }
  [super dispose];
  if (listComponent_ != nil) {
    [listComponent_ dispose];
  }
  listModel_ = nil;
  listComponent_ = nil;
  selectionModelGroup_ = nil;
  itemDescription_ = nil;
  selectionModel_ = nil;
  selectionMode_ = nil;
}

- (BOOL)isKeepSelectionVisible {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) isKeepSelectionVisible];
}

- (void)setKeepSelectionVisibleWithBoolean:(BOOL)keepSelectionVisible {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setKeepSelectionVisibleWithBoolean:keepSelectionVisible];
}

- (BOOL)filterWithRAREUTiFilter:(id<RAREUTiFilter>)filter {
  if ([((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) filterWithRAREUTiFilter:filter]) {
    [self clearSelection];
    [listComponent_ refreshItems];
    return YES;
  }
  return NO;
}

- (BOOL)filterWithNSString:(NSString *)filter
               withBoolean:(BOOL)contains
               withBoolean:(BOOL)nullPasses
               withBoolean:(BOOL)emptyPasses {
  if ([((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) filterWithNSString:filter withBoolean:contains withBoolean:nullPasses withBoolean:emptyPasses]) {
    [self clearSelection];
    [listComponent_ refreshItems];
    return YES;
  }
  return NO;
}

- (int)findAndSelectWithRAREUTiFilter:(id<RAREUTiFilter>)filter
                              withInt:(int)start {
  int n = [self findWithRAREUTiFilter:filter withInt:start];
  if (n != -1) {
    [self setSelectedIndexWithInt:n];
  }
  return n;
}

- (int)findAndSelectWithNSString:(NSString *)filter
                         withInt:(int)start
                     withBoolean:(BOOL)contains {
  int n = [self findWithNSString:filter withInt:start withBoolean:contains];
  if (n != -1) {
    [self setSelectedIndexWithInt:n];
  }
  return n;
}

- (void)fireActionForSelected {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) fireActionForSelected];
}

- (void)moveWithInt:(int)from
            withInt:(int)to {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) moveWithInt:from withInt:to];
}

- (void)refreshItems {
  if (![RAREPlatform isUIThread]) {
    [RAREListHelper runLaterWithRAREiListHandler:self withRAREListHelper_RunTypeEnum:[RAREListHelper_RunTypeEnum REFRESH]];
    return;
  }
  if ([self isDisposed]) {
    return;
  }
  @try {
    [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setDataEventsEnabledWithBoolean:NO];
    if (tempList_ != nil) {
      if (sorter_ != nil) {
        [JavaUtilCollections sortWithJavaUtilList:tempList_ withJavaUtilComparator:sorter_];
      }
      if (addIndexToList_) {
        id<JavaUtilList> list = [self updateListWithFilteringIndexWithRAREUTFilterableList:(RAREUTFilterableList *) check_class_cast(tempList_, [RAREUTFilterableList class])];
        [listComponent_ setAllWithJavaUtilCollection:list];
        [((id<JavaUtilList>) nil_chk(list)) clear];
      }
      else {
        [listComponent_ setAllWithJavaUtilCollection:tempList_];
      }
      [tempList_ clear];
      tempList_ = nil;
    }
  }
  @finally {
    [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setDataEventsEnabledWithBoolean:YES];
    [listComponent_ refreshItems];
  }
}

- (RARERenderableDataItem *)removeWithInt:(int)index {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) removeWithInt:index];
}

- (BOOL)removeWithId:(id)item {
  if ([item isKindOfClass:[NSNumber class]]) {
    (void) [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) removeWithInt:[((NSNumber *) check_class_cast(item, [NSNumber class])) intValue]];
    return YES;
  }
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) removeWithId:item];
}

- (void)removeActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  if (listComponent_ != nil) {
    [listComponent_ removeActionListenerWithRAREiActionListener:l];
  }
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) removeAllWithJavaUtilCollection:c];
}

- (BOOL)removeDataWithRAREiTransferable:(id<RAREiTransferable>)t {
  if ([((id<RAREiTransferable>) nil_chk(t)) isTransferFlavorSupportedWithRARETransferFlavor:[RARETransferFlavor itemFlavor]]) {
    @try {
      id<JavaUtilList> list = (id<JavaUtilList>) check_protocol_cast([t getTransferDataWithRARETransferFlavor:[RARETransferFlavor itemFlavor]], @protocol(JavaUtilList));
      int len = [((id<JavaUtilList>) nil_chk(list)) size];
      if ([self isEventEnabledWithNSString:[RAREiConstants EVENT_ITEM_DELETED]]) {
        RAREDataEvent *e = [[RAREDataEvent alloc] initWithId:self withId:list];
        (void) [((RAREaWidgetListener *) nil_chk([self getWidgetListener])) evaluateWithNSString:[RAREiConstants EVENT_ITEM_DELETED] withJavaUtilEventObject:e withBoolean:NO];
        if ([e isConsumed]) {
          return NO;
        }
      }
      id<RAREiPlatformListDataModel> lm = listModel_;
      if (len == [((id<RAREiPlatformListDataModel>) nil_chk(lm)) size]) {
        [self clear];
      }
      else {
        RAREUTIntList *indexes = [[RAREUTIntList alloc] initWithInt:len];
        for (RARERenderableDataItem * __strong item in list) {
          int i = [lm indexOfWithId:item];
          if (i != -1) {
            [indexes addWithInt:i];
          }
        }
        if ([indexes size] == len) {
          [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) removeRowsWithIntArray:indexes->A_];
        }
        else {
          [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) removeRowsWithIntArray:[indexes toArray]];
        }
      }
      return YES;
    }
    @catch (JavaLangException *ignore) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:ignore];
    }
  }
  return NO;
}

- (void)removeRowsWithIntArray:(IOSIntArray *)indexes {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) removeRowsWithIntArray:indexes];
}

- (void)removeSelectionWithInt:(int)index {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) removeSelectionWithInt:index];
}

- (void)removeSelectionChangeListenerWithRAREiItemChangeListener:(id<RAREiItemChangeListener>)l {
  if (listComponent_ != nil) {
    [listComponent_ removeSelectionChangeListenerWithRAREiItemChangeListener:l];
  }
}

- (void)repaintRowWithInt:(int)row {
  [self rowChangedWithInt:row];
}

- (void)reset {
  if (widgetDataLink_ != nil) {
    [super reloadWithBoolean:YES];
  }
  else {
    [self clearSelection];
    if ((initiallySelectedIndex_ > -1) && (initiallySelectedIndex_ < [self getItemCount])) {
      [self setSelectedIndexWithInt:initiallySelectedIndex_];
    }
  }
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) retainAllWithJavaUtilCollection:c];
}

- (void)rowChangedWithInt:(int)index {
  if (listModel_ != nil) {
    [listModel_ rowChangedWithInt:index];
  }
}

- (void)rowChangedWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (listModel_ != nil) {
    [listModel_ rowChangedWithRARERenderableDataItem:item];
  }
}

- (void)rowsChangedWithInt:(int)firstRow
                   withInt:(int)lastRow {
  if (listModel_ != nil) {
    [listModel_ rowsChangedWithInt:firstRow withInt:lastRow];
  }
}

- (void)scrollRowToTopWithInt:(int)row {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) scrollRowToTopWithInt:row];
}

- (void)scrollRowToBottomWithInt:(int)row {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) scrollRowToBottomWithInt:row];
}

- (void)scrollRowToVisibleWithInt:(int)row {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) scrollRowToVisibleWithInt:row];
}

- (void)makeSelectionVisible {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) makeSelectionVisible];
}

- (void)selectAll {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) selectAll];
}

- (void)sizeRowsToFit {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) sizeRowsToFit];
}

- (void)sortWithBoolean:(BOOL)descending {
  if (tempList_ != nil) {
    [JavaUtilCollections sortWithJavaUtilList:tempList_ withJavaUtilComparator:descending ? [RARESubItemComparator getReverseOrderComparatorInstance] : nil];
  }
  else {
    [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) sortWithJavaUtilComparator:descending ? [RARESubItemComparator getReverseOrderComparatorInstance] : nil];
  }
}

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (tempList_ != nil) {
    [JavaUtilCollections sortWithJavaUtilList:tempList_ withJavaUtilComparator:comparator];
  }
  else {
    [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) sortWithJavaUtilComparator:comparator];
  }
}

- (void)startEditingWithBoolean:(BOOL)animate
          withRAREUIActionArray:(IOSObjectArray *)actions {
}

- (void)stopEditingWithBoolean:(BOOL)animate {
}

- (BOOL)unfilter {
  if ([((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) unfilter]) {
    [listComponent_ refreshItems];
    return YES;
  }
  return NO;
}

- (BOOL)setAllWithJavaUtilCollection:(id<JavaUtilCollection>)rows {
  id<JavaLangRunnable> r = [[RAREaListViewer_$1 alloc] initWithRAREaListViewer:self withJavaUtilCollection:rows];
  if ([RAREPlatform isUIThread]) {
    [r run];
  }
  else {
    [RAREPlatform invokeLaterWithJavaLangRunnable:r];
  }
  return YES;
}

- (void)setAlternatingRowColorWithRAREUIColor:(RAREUIColor *)color {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setAlternatingRowColorWithRAREUIColor:color];
}

- (void)setAutoHilightWithBoolean:(BOOL)autoHilight {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setAutoHilightWithBoolean:autoHilight];
}

- (void)setAutoSizeRowsToFitWithBoolean:(BOOL)autoSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setChangeEventsEnabledWithBoolean:(BOOL)enabled {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setChangeEventsEnabledWithBoolean:enabled];
}

- (void)setChangeSelColorOnLostFocusWithBoolean:(BOOL)change {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setChangeSelColorOnLostFocusWithBoolean:change];
}

- (void)setDataEventsEnabledWithBoolean:(BOOL)enabled {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setDataEventsEnabledWithBoolean:enabled];
}

- (void)setDeselectEventsDisabledWithBoolean:(BOOL)disabled {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setDeselectEventsDisabledWithBoolean:disabled];
}

- (void)setDividerLineWithRAREUIColor:(RAREUIColor *)c
                     withRAREUIStroke:(RAREUIStroke *)stroke {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setDividerLineWithRAREUIColor:c withRAREUIStroke:stroke];
}

- (void)setEditModeNotifierWithRAREiFunctionCallback:(id<RAREiFunctionCallback>)cb {
}

- (void)setFromHTTPFormValueWithId:(id)value {
  {
    int n;
    switch (submitValueType_) {
      case RARESPOTListBox_CSubmitValue_selected_index:
      if (value == nil) {
        [self setSelectedIndexWithInt:-1];
        return;
      }
      if ([value isKindOfClass:[IOSIntArray class]]) {
        [self setSelectedIndexesWithIntArray:(IOSIntArray *) check_class_cast(value, [IOSIntArray class])];
        break;
      }
      n = -1;
      if ([value isKindOfClass:[NSNumber class]]) {
        n = [((NSNumber *) check_class_cast(value, [NSNumber class])) intValue];
      }
      else {
        NSString *s = [nil_chk(value) description];
        if (([((NSString *) nil_chk(s)) sequenceLength] > 0) && [JavaLangCharacter isDigitWithChar:[s charAtWithInt:0]]) {
          n = [RAREUTSNumber intValueWithNSString:s];
        }
      }
      if ((n < -1) || (n >= [self size])) {
        n = -1;
      }
      [self setSelectedIndexWithInt:n];
      break;
      case RARESPOTListBox_CSubmitValue_selected_linked_data:
      if (value != nil) {
        if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:value]) {
          [self setSelectedIndexesWithIntArray:[RARERenderableDataItem findLinkedDataObjectsExWithJavaUtilList:listComponent_ withNSObjectArray:(IOSObjectArray *) check_class_cast(value, [IOSObjectArray class])]];
        }
        else {
          [self setSelectedIndexWithInt:[self indexOfLinkedDataWithId:value]];
        }
      }
      else {
        [self setSelectedIndexWithInt:-1];
      }
      break;
      default:
      [self setValueWithId:value];
      break;
    }
  }
}

- (void)setHandleFirstFocusSelectionWithBoolean:(BOOL)handle {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setHandleFirstFocusSelectionWithBoolean:handle];
}

- (void)setHyperlinkListenerWithRAREiHyperlinkListener:(id<RAREiHyperlinkListener>)l {
  [RAREListHelper installItemLinkListenerWithRAREiPlatformComponent:[((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getListComponent] withRAREiHyperlinkListener:l];
}

- (void)setItemDescriptionWithRAREColumn:(RAREColumn *)itemDescription {
  self->itemDescription_ = itemDescription;
  [((id<RAREiPlatformItemRenderer>) nil_chk([self getItemRenderer])) setItemDescriptionWithRAREColumn:itemDescription];
  if ((itemDescription != nil) && ([itemDescription getFont] != nil)) {
    [((id<RAREiPlatformComponent>) nil_chk(dataComponent_)) setFontWithRAREUIFont:[itemDescription getFont]];
    [((id<RAREiPlatformComponent>) nil_chk(formComponent_)) setFontWithRAREUIFont:[itemDescription getFont]];
  }
  if (listModel_ != nil) {
    [listModel_ setColumnDescriptionWithRAREColumn:itemDescription];
  }
}

- (void)setItemsWithJavaUtilCollection:(id<JavaUtilCollection>)items {
  if (listComponent_ != nil) {
    if (![RAREPlatform isUIThread]) {
      id<JavaLangRunnable> r = [[RAREaListViewer_$2 alloc] initWithRAREaListViewer:self withJavaUtilCollection:items];
      [RAREPlatform invokeLaterWithJavaLangRunnable:r];
      return;
    }
    if (listComponent_ != nil) {
      [listComponent_ setAllWithJavaUtilCollection:items];
    }
  }
}

- (void)setListSelectableWithBoolean:(BOOL)selectable {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setListSelectableWithBoolean:selectable];
}

- (void)setListSelectionTypeWithRAREiListHandler_SelectionTypeEnum:(RAREiListHandler_SelectionTypeEnum *)type {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setListSelectionTypeWithRAREiListHandler_SelectionTypeEnum:type];
}

- (void)setMinRowHeightWithInt:(int)min {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setMinRowHeightWithInt:min];
}

- (void)setMinimumVisibleRowCountWithInt:(int)rows {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setMinimumVisibleRowCountWithInt:rows];
}

- (void)setRowEditingWidgetWithRAREiWidget:(id<RAREiWidget>)widget
                               withBoolean:(BOOL)centerVertically {
}

- (void)setRowHeightWithInt:(int)height {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setRowHeightWithInt:height];
}

- (void)setSelectedIndexWithInt:(int)index {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setSelectedIndexWithInt:index];
}

- (void)setSelectedIndexesWithIntArray:(IOSIntArray *)indices {
  if (indices == nil) {
    [self clearSelection];
  }
  else {
    [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setSelectedIndexesWithIntArray:indices];
  }
}

- (void)setSelectedItemWithRARERenderableDataItem:(RARERenderableDataItem *)value {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setSelectedItemWithRARERenderableDataItem:value];
}

- (void)setSelectionModeWithRAREiListHandler_SelectionModeEnum:(RAREiListHandler_SelectionModeEnum *)selectionMode {
  self->selectionMode_ = selectionMode;
  selectAllAllowed_ = NO;
  BOOL selectable = YES;
  switch ([selectionMode ordinal]) {
    case RAREiListHandler_SelectionMode_BLOCK:
    case RAREiListHandler_SelectionMode_MULTIPLE:
    selectAllAllowed_ = YES;
    break;
    case RAREiListHandler_SelectionMode_NONE:
    selectable = NO;
    break;
    default:
    break;
  }
  [self setListSelectableWithBoolean:selectable];
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setSelectionModeWithRAREiListHandler_SelectionModeEnum:selectionMode];
}

- (void)setShowDividerWithBoolean:(BOOL)show {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setShowDividerWithBoolean:show];
}

- (void)setShowLastDividerWithBoolean:(BOOL)show {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setSingleClickActionWithBoolean:(BOOL)singleClick {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setSingleClickActionWithBoolean:singleClick];
}

- (void)setValueWithId:(id)value {
  if (listComponent_ == nil) {
    [super setValueWithId:value];
    return;
  }
  if (value == nil) {
    [self clearSelection];
  }
  else if ([value isKindOfClass:[RARERenderableDataItem class]]) {
    [self setSelectedItemWithRARERenderableDataItem:(RARERenderableDataItem *) check_class_cast(value, [RARERenderableDataItem class])];
  }
  else if ([value isKindOfClass:[IOSIntArray class]]) {
    [self setSelectedIndexesWithIntArray:(IOSIntArray *) check_class_cast(value, [IOSIntArray class])];
  }
  else if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:value]) {
    [self setSelectedIndexesWithIntArray:[RARERenderableDataItem findValuesExWithJavaUtilList:listComponent_ withNSObjectArray:(IOSObjectArray *) check_class_cast(value, [IOSObjectArray class])]];
  }
  else {
    [self setSelectedIndexWithInt:[RARERenderableDataItem findValueExWithJavaUtilList:listComponent_ withId:value]];
  }
}

- (void)setVisibleRowCountWithInt:(int)rows {
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setVisibleRowCountWithInt:rows];
}

- (RAREUIColor *)getAlternatingRowColor {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getAlternatingRowColor];
}

- (int)getAnchorSelectionIndex {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getAnchorSelectionIndex];
}

- (int)getEditModeMarkCount {
  return [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) editModeGetMarkCount];
}

- (IOSIntArray *)getEditModeMarkedIndices {
  return [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) editModeGetMarkedIndices];
}

- (IOSObjectArray *)getEditModeMarkedItems {
  return [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) editModeGetMarkedItems];
}

- (int)getEditingRow {
  return -1;
}

- (int)getFirstVisibleIndex {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getFirstVisibleIndex];
}

- (id)getHTTPFormValue {
  if (![self hasSelection]) {
    return nil;
  }
  switch (submitValueType_) {
    case RARESPOTListBox_CSubmitValue_selected_index:
    case RARESPOTListBox_CSubmitValue_checked_index:
    if (!selectAllAllowed_) {
      return [JavaLangInteger valueOfWithInt:[self getSelectedIndex]];
    }
    return [self getSelectedIndexes];
    case RARESPOTListBox_CSubmitValue_selected_linked_data:
    case RARESPOTListBox_CSubmitValue_checked_linked_data:
    return [self getSelectionData];
    case RARESPOTListBox_CSubmitValue_selected_value_text:
    if (!selectAllAllowed_) {
      return [self getSelectionAsString];
    }
    return [self getSelectionAsString];
    default:
    if (!selectAllAllowed_) {
      return [self getSelection];
    }
    return [self getSelections];
  }
}

- (id<RAREiPlatformIcon>)getIcon {
  if (displayIcon_ != nil) {
    return displayIcon_;
  }
  RARERenderableDataItem *item = [self getSelectedItem];
  if ((item != nil) && ([item getIcon] != nil)) {
    return [item getIcon];
  }
  if (self->itemDescription_ != nil) {
    return [itemDescription_ getIcon];
  }
  return nil;
}

- (RARERenderableDataItem *)getItemAtWithRAREUIPoint:(RAREUIPoint *)p {
  int row = [self getRowIndexAtWithRAREUIPoint:p];
  return (row == -1) ? nil : [self getItemWithInt:row];
}

- (int)getItemCount {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) size];
}

- (RAREColumn *)getItemDescription {
  return itemDescription_;
}

- (id<RAREiPlatformItemRenderer>)getItemRenderer {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getItemRenderer];
}

- (int)getLastEditedRow {
  return -1;
}

- (int)getLastVisibleIndex {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getLastVisibleIndex];
}

- (id<RAREiPlatformComponent>)getListComponent {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getListComponent];
}

- (RAREiListHandler_SelectionTypeEnum *)getListSelectionType {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getListSelectionType];
}

- (int)getMaxSelectionIndex {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getMaxSelectionIndex];
}

- (int)getMinSelectionIndex {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getMinSelectionIndex];
}

- (int)getMinimumVisibleRowCount {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getMinimumVisibleRowCount];
}

- (RAREUIPoint *)getOverlayLocationWithInt:(int)row
                               withBoolean:(BOOL)top {
  RAREUIRectangle *rect = [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getRowBoundsWithInt:row withInt:row];
  RAREUIPoint *p = [((id<RAREiPlatformComponent>) nil_chk([self getDataComponent])) getLocationOnScreen];
  ((RAREUIPoint *) nil_chk(p))->x_ += ((RAREUIRectangle *) nil_chk(rect))->x_;
  p->y_ = (int) rect->y_;
  return p;
}

- (RAREUIPoint *)getPopupLocationWithInt:(int)index {
  RAREUIRectangle *rect = [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getRowBoundsWithInt:index withInt:index];
  RAREUIPoint *p = [((id<RAREiPlatformComponent>) nil_chk([self getDataComponent])) getLocationOnScreen];
  ((RAREUIPoint *) nil_chk(p))->x_ += ((RAREUIRectangle *) nil_chk(rect))->x_;
  p->y_ = (int) (rect->y_ + rect->height_);
  return p;
}

- (int)getPopupMenuIndex {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getPopupMenuIndex];
}

- (RARERenderableDataItem *)getPopupMenuItem {
  return [self getSelectedItem];
}

- (int)getPreferredHeightWithInt:(int)row {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getPreferredHeightWithInt:row];
}

- (RAREUIRectangle *)getRowBoundsWithInt:(int)row0
                                 withInt:(int)row1 {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getRowBoundsWithInt:row0 withInt:row1];
}

- (int)getRowCount {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) size];
}

- (int)getRowHeight {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getRowHeight];
}

- (int)getRowIndexAtWithRAREUIPoint:(RAREUIPoint *)p {
  return (p == nil) ? -1 : [self getRowIndexAtWithFloat:p->x_ withFloat:p->y_];
}

- (int)getRowIndexAtWithFloat:(float)x
                    withFloat:(float)y {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getRowIndexAtWithFloat:x withFloat:y];
}

- (id<JavaUtilList>)getRows {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getRows];
}

- (int)getSelectedIndex {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getSelectedIndex];
}

- (int)getSelectedIndexCount {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getSelectedIndexCount];
}

- (IOSIntArray *)getSelectedIndexes {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getSelectedIndexes];
}

- (RARERenderableDataItem *)getSelectedItem {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getSelectedItem];
}

- (id)getSelection {
  if (selectAllAllowed_) {
    return [self getSelections];
  }
  return [self getSelectedItem];
}

- (NSString *)getSelectionAsString {
  RARERenderableDataItem *item = [self getSelectedItem];
  return (item == nil) ? nil : [item description];
}

- (id)getSelectionData {
  RARERenderableDataItem *item = [self getSelectedItem];
  return (item == nil) ? nil : [item getLinkedData];
}

- (RAREiListHandler_SelectionModeEnum *)getSelectionMode {
  return selectionMode_;
}

- (IOSObjectArray *)getSelections {
  return [RAREDataItemCollection getSelectionsWithRAREiListHandler:listComponent_ withInt:-1];
}

- (IOSObjectArray *)getSelectionsAsStrings {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getSelectionsAsStrings];
}

- (IOSObjectArray *)getSelectionsDataAsStrings {
  return [RAREDataItemCollection getSelectionsDataAsStringsWithRAREiListHandler:listComponent_ withInt:-1];
}

- (int)getVisibleRowCount {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getVisibleRowCount];
}

- (BOOL)hasSelection {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) hasSelection];
}

- (BOOL)hasValue {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) size] > 0;
}

- (BOOL)isChangeEventsEnabled {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) isChangeEventsEnabled];
}

- (BOOL)isChangeSelColorOnLostFocus {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) isChangeSelColorOnLostFocus];
}

- (BOOL)isDataEventsEnabled {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) isDataEventsEnabled];
}

- (BOOL)isEditing {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) isEditing];
}

- (BOOL)isHandleFirstFocusSelection {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) isHandleFirstFocusSelection];
}

- (BOOL)isListSelectable {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) isListSelectable];
}

- (BOOL)isRowSelectedWithInt:(int)row {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) isRowSelectedWithInt:row];
}

- (BOOL)isRowSelectedWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) isRowSelectedWithRARERenderableDataItem:item];
}

- (BOOL)isSubmittable {
  return [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) hasSelection];
}

- (BOOL)isTabular {
  return NO;
}

- (id<RAREiScrollerSupport>)getScrollerSupport {
  return listComponent_;
}

- (RARERenderableDataItem *)createDefaultSectionProrotype {
  RARERenderableDataItem *di = [[RARERenderableDataItem alloc] init];
  [di setSelectableWithBoolean:NO];
  [di setFontWithRAREUIFont:[((RAREUIFont *) nil_chk([self getFont])) deriveBold]];
  [di setBackgroundWithRAREUIColor:[[RAREUIColor alloc] initWithInt:222 withInt:222 withInt:222 withInt:128]];
  return di;
}

- (void)configureExWithRARESPOTListBox:(RARESPOTListBox *)cfg {
  [self createModelAndComponentsWithRARESPOTViewer:cfg];
  [self configureExWithRARESPOTViewer:cfg withBoolean:YES withBoolean:YES withBoolean:NO];
  if (![((SPOTBoolean *) nil_chk(((RARESPOTListBox *) nil_chk(cfg))->focusPainted_)) spot_hasValue] || ![cfg->focusPainted_ booleanValue]) {
    [((id<RAREiPlatformComponent>) nil_chk(formComponent_)) setFocusPaintedWithBoolean:YES];
  }
  [self setSubItemsWithRAREUTiFilterableList:listModel_];
  [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setDeselectEventsDisabledWithBoolean:![((SPOTBoolean *) nil_chk(cfg->deselectEventsEnabled_)) booleanValue]];
  [listComponent_ setMinimumVisibleRowCountWithInt:[((SPOTInteger *) nil_chk(cfg->minVisibleRowCount_)) intValue]];
  if ([((SPOTInteger *) nil_chk(cfg->visibleRowCount_)) spot_valueWasSet]) {
    [listComponent_ setVisibleRowCountWithInt:[cfg->visibleRowCount_ intValue]];
  }
  else {
    [listComponent_ setVisibleRowCountWithInt:[RARETableHelper getDefaultPreferredRows]];
  }
  if ([cfg getItemDescription] != nil) {
    RAREColumn *c = [self createColumnWithRARESPOTItemDescription:[cfg getItemDescription]];
    if ([((SPOTBoolean *) nil_chk(cfg->autoSizeRowsToFit_)) booleanValue] && ![((SPOTBoolean *) nil_chk(((RARESPOTItemDescription *) nil_chk([cfg getItemDescription]))->wordWrap_)) spot_valueWasSet]) {
      ((RAREColumn *) nil_chk(c))->wordWrap_ = YES;
    }
    [self setItemDescriptionWithRAREColumn:c];
  }
  [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) setWidgetWithRAREiWidget:self];
  if ([((SPOTPrintableString *) nil_chk(cfg->alternatingHighlightColor_)) spot_valueWasSet]) {
    [self setAlternatingRowColorWithRAREUIColor:[RAREColorUtils getColorWithNSString:[cfg->alternatingHighlightColor_ getValue]]];
  }
  RAREPaintBucket *pb = [RAREColorUtils configureWithRAREiWidget:self withRARESPOTGridCell:[cfg getSelectionPainter] withRAREPaintBucket:nil];
  if (pb != nil) {
    [((id<RAREiPlatformItemRenderer>) nil_chk([listComponent_ getItemRenderer])) setSelectionPaintWithRAREPaintBucket:pb];
  }
  if ([((SPOTBoolean *) nil_chk(cfg->changeSelColorOnLostFocus_)) booleanValue]) {
    [listComponent_ setChangeSelColorOnLostFocusWithBoolean:YES];
    pb = [RAREColorUtils configureWithRAREiWidget:self withRARESPOTGridCell:[cfg getLostFocusSelectionPainter] withRAREPaintBucket:nil];
    if (pb != nil) {
      [((id<RAREiPlatformItemRenderer>) nil_chk([listComponent_ getItemRenderer])) setSelectionPaintWithRAREPaintBucket:pb];
    }
  }
  if ([((SPOTBoolean *) nil_chk(cfg->indexForFiltering_)) booleanValue]) {
    [listModel_ setUseIndexForFilteringWithBoolean:[cfg->indexForFiltering_ booleanValue]];
    addIndexToList_ = [@"true" isEqual:[cfg->indexForFiltering_ spot_getAttributeWithNSString:@"addIndexSectionsToList"]];
    pb = [RAREColorUtils configureWithRAREiWidget:self withRARESPOTGridCell:[cfg getIndexSectionPainter] withRAREPaintBucket:nil];
    if (pb != nil) {
      prototypeSectionItem_ = [[RARERenderableDataItem alloc] init];
      [prototypeSectionItem_ setSelectableWithBoolean:NO];
      [prototypeSectionItem_ setComponentPainterWithRAREiPlatformComponentPainter:[pb getCachedComponentPainter]];
      [prototypeSectionItem_ setFontWithRAREUIFont:([pb getFont] != nil) ? [pb getFont] : [self getFont]];
      [prototypeSectionItem_ setForegroundWithRAREUIColor:[pb getForegroundColor]];
    }
    else {
      prototypeSectionItem_ = [self createDefaultSectionProrotype];
    }
    float h = [RAREFontUtils getFontHeightWithRAREUIFont:[((RARERenderableDataItem *) nil_chk(prototypeSectionItem_)) getFont] withBoolean:YES];
    if ([prototypeSectionItem_ getComponentPainter] != nil) {
      id<RAREiPlatformBorder> b = [((id<RAREiPlatformComponentPainter>) nil_chk([prototypeSectionItem_ getComponentPainter])) getBorder];
      if (b != nil) {
        RAREUIInsets *in = [b getBorderInsetsWithRAREUIInsets:[[RAREUIInsets alloc] init]];
        h += ((RAREUIInsets *) nil_chk(in))->top_ + in->bottom_;
      }
    }
    h += [RAREScreenUtils PLATFORM_PIXELS_4];
    [prototypeSectionItem_ setHeightWithInt:[RAREUIScreen snapToSizeWithFloat:h]];
  }
  BOOL showDivider = [RAREPlatform isTouchableDevice];
  if ([((SPOTBoolean *) nil_chk(cfg->showDividerLine_)) spot_valueWasSet]) {
    showDivider = [cfg->showDividerLine_ booleanValue];
  }
  if (showDivider) {
    [listComponent_ setShowDividerWithBoolean:YES];
    RAREUIColor *c = [RAREUIColorHelper getColorWithNSString:[((SPOTPrintableString *) nil_chk(cfg->dividerLineColor_)) getValue]];
    if (c == nil) {
      c = [RAREColorUtils getListDividerColor];
    }
    [self setDividerLineWithRAREUIColor:c withRAREUIStroke:[RAREUIStroke getStrokeWithNSString:[((RARESPOTListBox_CDividerLineStyle *) nil_chk(cfg->dividerLineStyle_)) stringValue]]];
    if ([@"false" isEqual:[cfg->showDividerLine_ spot_getAttributeWithNSString:@"showLastLine"]]) {
      [self setShowLastDividerWithBoolean:NO];
    }
  }
  switch ([((RARESPOTListBox_CSelectionMode *) nil_chk(cfg->selectionMode_)) intValue]) {
    case RARESPOTListBox_CSelectionMode_multiple:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum MULTIPLE]];
    break;
    case RARESPOTListBox_CSelectionMode_block:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum BLOCK]];
    break;
    case RARESPOTListBox_CSelectionMode_invisible:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum INVISIBLE]];
    break;
    case RARESPOTListBox_CSelectionMode_none:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum NONE]];
    break;
    case RARESPOTListBox_CSelectionMode_single_auto:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum SINGLE]];
    [listComponent_ setAutoHilightWithBoolean:YES];
    break;
    default:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum SINGLE]];
    break;
  }
  [self configureSelectionModelGroupWithSPOTPrintableString:cfg->selectionGroupName_ withId:[[NSObject alloc] init]];
  if ([((SPOTBoolean *) nil_chk(cfg->singleClickActionEnabled_)) spot_valueWasSet]) {
    [listComponent_ setSingleClickActionWithBoolean:[cfg->singleClickActionEnabled_ booleanValue]];
  }
  NSString *s = nil;
  if ([((SPOTPrintableString *) nil_chk(cfg->rowHeight_)) spot_valueWasSet]) {
    s = [cfg->rowHeight_ getValue];
  }
  if (s == nil) {
    s = [RAREPlatformHelper getDefaultRowHeight];
  }
  BOOL autoEnd = [@"true" isEqual:[((RARESPOTListBox_CEditingMode *) nil_chk(cfg->editingMode_)) spot_getAttributeWithNSString:@"autoEnd"]];
  BOOL allowSwiping = [@"true" isEqual:[cfg->editingMode_ spot_getAttributeWithNSString:@"allowSwiping"]];
  switch ([cfg->editingMode_ intValue]) {
    case RARESPOTListBox_CEditingMode_reordering:
    [self setEditingModeWithRAREiListView_EditingModeEnum:[RAREiListView_EditingModeEnum REORDERING] withBoolean:autoEnd withBoolean:allowSwiping];
    break;
    case RARESPOTListBox_CEditingMode_selection:
    [self setEditingModeWithRAREiListView_EditingModeEnum:[RAREiListView_EditingModeEnum SELECTION] withBoolean:autoEnd withBoolean:allowSwiping];
    break;
    case RARESPOTListBox_CEditingMode_deleting:
    [self setEditingModeWithRAREiListView_EditingModeEnum:[RAREiListView_EditingModeEnum DELETEING] withBoolean:autoEnd withBoolean:allowSwiping];
    break;
    case RARESPOTListBox_CEditingMode_reordering_and_selection:
    [self setEditingModeWithRAREiListView_EditingModeEnum:[RAREiListView_EditingModeEnum REORDERING_AND_SELECTION] withBoolean:autoEnd withBoolean:allowSwiping];
    break;
    case RARESPOTListBox_CEditingMode_reordering_and_deleting:
    [self setEditingModeWithRAREiListView_EditingModeEnum:[RAREiListView_EditingModeEnum REORDERING_AND_DELETEING] withBoolean:autoEnd withBoolean:allowSwiping];
    break;
    default:
    [self setEditingModeWithRAREiListView_EditingModeEnum:[RAREiListView_EditingModeEnum NONE] withBoolean:autoEnd withBoolean:allowSwiping];
    break;
  }
  RARESPOTMargin *m = [cfg getContentPadding];
  if (m != nil) {
    [((id<RAREiPlatformItemRenderer>) nil_chk([listComponent_ getItemRenderer])) setInsetsWithRAREUIInsets:[m getInsets]];
  }
  [self setRowHeightWithInt:[RAREScreenUtils toPlatformPixelHeightWithNSString:s withRAREiPlatformComponent:dataComponent_ withFloat:400 withBoolean:YES]];
  if ([((SPOTBoolean *) nil_chk(cfg->autoSizeRowsToFit_)) booleanValue]) {
    [self setAutoSizeRowsToFitWithBoolean:YES];
  }
  [listComponent_ setHandleFirstFocusSelectionWithBoolean:[((SPOTBoolean *) nil_chk(cfg->handleFirstFocusSelection_)) booleanValue]];
  initiallySelectedIndex_ = [((SPOTInteger *) nil_chk(cfg->selectedIndex_)) intValue];
  submitValueType_ = [((RARESPOTListBox_CSubmitValue *) nil_chk(cfg->submitValue_)) intValue];
}

- (void)configureSelectionModelGroupWithSPOTPrintableString:(SPOTPrintableString *)selectionGroupName
                                                     withId:(id)selectionModel {
  NSString *s = [((SPOTPrintableString *) nil_chk(selectionGroupName)) getValue];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    int pos = -1;
    NSString *p = [selectionGroupName spot_getAttributeWithNSString:@"position"];
    if (p != nil) {
      pos = [RAREUTSNumber intValueWithNSString:p];
    }
    if ([self getFormViewer] == nil) {
      selectionModelGroup_ = [((RAREWindowViewer *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getWindowViewer])) addToSelectionGroupWithNSString:s withRAREiListHandler:self withId:selectionModel withInt:pos];
    }
    else {
      selectionModelGroup_ = [((id<RAREiFormViewer>) nil_chk([self getFormViewer])) addToSelectionGroupWithNSString:s withRAREiListHandler:self withId:selectionModel withInt:pos];
    }
    self->selectionModel_ = selectionModel;
  }
}

- (id<RAREiToolBar>)createEditingToolbarIfNecessaryWithRARESPOTListBox:(RARESPOTListBox *)cfg {
  BOOL editable = NO;
  switch ([((RARESPOTListBox_CEditingMode *) nil_chk(((RARESPOTListBox *) nil_chk(cfg))->editingMode_)) intValue]) {
    case RARESPOTListBox_CEditingMode_selection:
    case RARESPOTListBox_CEditingMode_reordering_and_selection:
    editable = YES;
    break;
    default:
    break;
  }
  if (!editable) {
    editable = [@"true" isEqual:[cfg->editingMode_ spot_getAttributeWithNSString:@"alwaysCreateToolbar"]];
  }
  id<RAREiToolBar> tb = nil;
  if (editable) {
    tb = [((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getWindowManager])) createToolBarWithBoolean:YES];
    [((id<RAREiToolBar>) nil_chk(tb)) setSretchButtonsToFillSpaceWithBoolean:YES];
    RAREBorderPanel *bp;
    if ([(id) formComponent_ isKindOfClass:[RAREBorderPanel class]]) {
      bp = (RAREBorderPanel *) check_class_cast(formComponent_, [RAREBorderPanel class]);
      id<RAREiPlatformComponent> c = [((RAREBorderPanel *) nil_chk(bp)) getBottomView];
      if (c != nil) {
        RAREBorderPanel *bp2 = [[RAREBorderPanel alloc] initWithRAREiWidget:self];
        [bp2 setCenterViewWithRAREiPlatformComponent:c];
        bp = bp2;
      }
      [bp setBottomViewWithRAREiPlatformComponent:[tb getComponent]];
    }
    else {
      bp = [[RAREBorderPanel alloc] initWithRAREiWidget:self];
      [bp setCenterViewWithRAREiPlatformComponent:formComponent_];
      [bp setBottomViewWithRAREiPlatformComponent:[tb getComponent]];
      formComponent_ = bp;
    }
    [((id<RAREiPlatformComponent>) nil_chk([tb getComponent])) setBorderWithRAREiPlatformBorder:[[RAREUIMatteBorder alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:0 withFloat:0 withFloat:0 withRAREUIColor:[RAREaUILineBorder getDefaultDisabledColor]]];
  }
  return tb;
}

- (void)createModelAndComponentsWithRARESPOTViewer:(RARESPOTViewer *)vcfg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)finishedLoadingEx {
  if ([self isDisposed]) {
    return;
  }
  [self handleInitialStuff];
  [super finishedLoadingEx];
}

- (void)handleCustomPropertiesWithRARESPOTWidget:(RARESPOTWidget *)cfg
                                 withJavaUtilMap:(id<JavaUtilMap>)properties {
  [super handleCustomPropertiesWithRARESPOTWidget:cfg withJavaUtilMap:properties];
  id o = [((id<JavaUtilMap>) nil_chk(properties)) getWithId:@"wholeViewFling"];
  if ([((JavaLangBoolean *) nil_chk([JavaLangBoolean getTRUE])) isEqual:o] || [@"true" isEqual:o]) {
    [self setWholeViewFlingWithBoolean:YES];
  }
  o = [properties getWithId:@"flingThreshold"];
  if (o != nil) {
    [self setFlingThresholdWithInt:([o isKindOfClass:[NSNumber class]]) ? [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue] : [RAREUTSNumber intValueWithNSString:[o description]]];
  }
  o = [properties getWithId:@"selectFlinged"];
  if ([[JavaLangBoolean getTRUE] isEqual:o] || [@"true" isEqual:o]) {
    [self setSelectFlingedWithBoolean:YES];
  }
}

- (void)handleInitialStuff {
  [self refreshItems];
  if (itemAttributes_ != nil) {
    [RAREaWidget handleSelectionsWithRAREiListHandler:listComponent_ withRAREaWidget_ItemAttributes:itemAttributes_];
    if ((itemAttributes_->check_ == nil) && (([self getFormViewer] == nil) || ![((id<RAREiFormViewer>) nil_chk([self getFormViewer])) isRetainInitialWidgetValues])) {
      itemAttributes_ = nil;
    }
  }
  if ([self getSelectedIndex] == -1) {
    if ((initiallySelectedIndex_ > -1) && (initiallySelectedIndex_ < [self getItemCount])) {
      [self setSelectedIndexWithInt:initiallySelectedIndex_];
    }
  }
}

- (BOOL)importDataExWithRAREiTransferable:(id<RAREiTransferable>)t
                  withRAREDropInformation:(RAREDropInformation *)drop {
  return [RAREListHelper importDataWithRAREaWidget:self withRAREiListHandler:self withRAREiTransferable:t withRAREDropInformation:drop];
}

- (void)initializeListenersWithRAREaWidgetListener:(RAREaWidgetListener *)l {
  [super initializeListenersWithRAREaWidgetListener:l];
  if (l != nil) {
    if ([l isChangeEventEnabled]) {
      [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) addSelectionChangeListenerWithRAREiItemChangeListener:l];
    }
  }
}

- (id<JavaUtilList>)updateListWithFilteringIndexWithRAREUTFilterableList:(RAREUTFilterableList *)list {
  RAREUTCharacterIndex *ci = [((RAREUTFilterableList *) nil_chk(list)) getFilteringIndex];
  id<JavaUtilMap> indexMap = [((RAREUTCharacterIndex *) nil_chk(ci)) getIndexMap];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(indexMap)) entrySet])) iterator];
  int len = [indexMap size];
  int i = 0;
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[RAREUTObjectHolder class]]];
  RARERenderableDataItem *prototype = prototypeSectionItem_;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
    (void) IOSObjectArray_Set(a, i++, [[RAREUTObjectHolder alloc] initWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey] withId:[e getValue]]);
  }
  [JavaUtilArrays sortWithNSObjectArray:a withJavaUtilComparator:[[RAREaListViewer_$3 alloc] init]];
  [list setUseIndexForFilteringWithBoolean:NO];
  while (len > 0) {
    RAREUTObjectHolder *oh = IOSObjectArray_Get(a, --len);
    RARERenderableDataItem *item = [((RARERenderableDataItem *) nil_chk(prototype)) copy__];
    [((RARERenderableDataItem *) nil_chk(item)) setValueWithId:((RAREUTObjectHolder *) nil_chk(oh))->type_];
    [list addWithInt:[(JavaLangInteger *) check_class_cast(oh->value_, [JavaLangInteger class]) intValue] withId:item];
  }
  [list setUseIndexForFilteringWithBoolean:YES];
  return list;
}

- (void)setEditingModeWithRAREiListView_EditingModeEnum:(RAREiListView_EditingModeEnum *)mode
                                            withBoolean:(BOOL)autoEnd
                                            withBoolean:(BOOL)allowSwiping {
}

- (void)setFlingThresholdWithInt:(int)threshold {
}

- (void)setListComponentWithRAREiPlatformListHandler:(id<RAREiPlatformListHandler>)comp {
  formComponent_ = [((id<RAREiPlatformListHandler>) nil_chk(comp)) getContainerComponent];
  dataComponent_ = [comp getListComponent];
  listComponent_ = comp;
}

- (void)setSelectFlingedWithBoolean:(BOOL)select {
}

- (void)setWholeViewFlingWithBoolean:(BOOL)wholeViewFling {
}

- (id<JavaUtilList>)getTempList {
  if (tempList_ == nil) {
    if (addIndexToList_) {
      RAREUTFilterableList *list = [[RAREUTFilterableList alloc] init];
      [list setUseIndexForFilteringWithBoolean:YES];
      tempList_ = list;
    }
    else {
      tempList_ = [[JavaUtilArrayList alloc] init];
    }
  }
  return tempList_;
}

- (NSString *)getWidgetAttributeWithNSString:(NSString *)name {
  NSString *s = [RAREListHelper getWidgetAttributeWithRAREiListHandler:listComponent_ withNSString:name];
  return (s == [RAREListHelper CALL_SUPER_METHOD]) ? [super getWidgetAttributeWithNSString:name] : s;
}

- (void)copyAllFieldsTo:(RAREaListViewer *)other {
  [super copyAllFieldsTo:other];
  other->addIndexToList_ = addIndexToList_;
  other->initiallySelectedIndex_ = initiallySelectedIndex_;
  other->itemDescription_ = itemDescription_;
  other->listComponent_ = listComponent_;
  other->listModel_ = listModel_;
  other->prototypeSectionItem_ = prototypeSectionItem_;
  other->selectionMode_ = selectionMode_;
  other->selectionModel_ = selectionModel_;
  other->selectionModelGroup_ = selectionModelGroup_;
  other->sorter_ = sorter_;
  other->submitColumn_ = submitColumn_;
  other->submitValueType_ = submitValueType_;
  other->tempList_ = tempList_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "handleViewerConfigurationChangedWithBoolean:", NULL, "V", 0x4, NULL },
    { "addWithRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "addAllWithInt:withJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "canImportWithRARETransferFlavorArray:withRAREDropInformation:", NULL, "Z", 0x1, NULL },
    { "getSelectionModelGroup", NULL, "LRAREUISelectionModelGroup", 0x1, NULL },
    { "deleteSelectedDataWithBoolean:", NULL, "LNSObject", 0x1, NULL },
    { "isKeepSelectionVisible", NULL, "Z", 0x1, NULL },
    { "filterWithRAREUTiFilter:", NULL, "Z", 0x1, NULL },
    { "filterWithNSString:withBoolean:withBoolean:withBoolean:", NULL, "Z", 0x1, NULL },
    { "removeWithInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "removeWithId:", NULL, "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "removeDataWithRAREiTransferable:", NULL, "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "startEditingWithBoolean:withRAREUIActionArray:", NULL, "V", 0x81, NULL },
    { "unfilter", NULL, "Z", 0x1, NULL },
    { "setAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "setAutoSizeRowsToFitWithBoolean:", NULL, "V", 0x401, NULL },
    { "setShowLastDividerWithBoolean:", NULL, "V", 0x401, NULL },
    { "getAlternatingRowColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getEditModeMarkedIndices", NULL, "LIOSIntArray", 0x1, NULL },
    { "getEditModeMarkedItems", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getHTTPFormValue", NULL, "LNSObject", 0x1, NULL },
    { "getIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getItemAtWithRAREUIPoint:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getItemDescription", NULL, "LRAREColumn", 0x1, NULL },
    { "getItemRenderer", NULL, "LRAREiPlatformItemRenderer", 0x1, NULL },
    { "getListComponent", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getListSelectionType", NULL, "LRAREiListHandler_SelectionTypeEnum", 0x1, NULL },
    { "getOverlayLocationWithInt:withBoolean:", NULL, "LRAREUIPoint", 0x1, NULL },
    { "getPopupLocationWithInt:", NULL, "LRAREUIPoint", 0x1, NULL },
    { "getPopupMenuItem", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getRowBoundsWithInt:withInt:", NULL, "LRAREUIRectangle", 0x1, NULL },
    { "getRows", NULL, "LJavaUtilList", 0x1, NULL },
    { "getSelectedIndexes", NULL, "LIOSIntArray", 0x1, NULL },
    { "getSelectedItem", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getSelection", NULL, "LNSObject", 0x1, NULL },
    { "getSelectionAsString", NULL, "LNSString", 0x1, NULL },
    { "getSelectionData", NULL, "LNSObject", 0x1, NULL },
    { "getSelectionMode", NULL, "LRAREiListHandler_SelectionModeEnum", 0x1, NULL },
    { "getSelections", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getSelectionsAsStrings", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getSelectionsDataAsStrings", NULL, "LIOSObjectArray", 0x1, NULL },
    { "hasSelection", NULL, "Z", 0x1, NULL },
    { "hasValue", NULL, "Z", 0x1, NULL },
    { "isChangeEventsEnabled", NULL, "Z", 0x1, NULL },
    { "isChangeSelColorOnLostFocus", NULL, "Z", 0x1, NULL },
    { "isDataEventsEnabled", NULL, "Z", 0x1, NULL },
    { "isEditing", NULL, "Z", 0x1, NULL },
    { "isHandleFirstFocusSelection", NULL, "Z", 0x1, NULL },
    { "isListSelectable", NULL, "Z", 0x1, NULL },
    { "isRowSelectedWithInt:", NULL, "Z", 0x1, NULL },
    { "isRowSelectedWithRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "isSubmittable", NULL, "Z", 0x1, NULL },
    { "isTabular", NULL, "Z", 0x1, NULL },
    { "getScrollerSupport", NULL, "LRAREiScrollerSupport", 0x4, NULL },
    { "createDefaultSectionProrotype", NULL, "LRARERenderableDataItem", 0x4, NULL },
    { "configureExWithRARESPOTListBox:", NULL, "V", 0x4, NULL },
    { "configureSelectionModelGroupWithSPOTPrintableString:withId:", NULL, "V", 0x4, NULL },
    { "createEditingToolbarIfNecessaryWithRARESPOTListBox:", NULL, "LRAREiToolBar", 0x4, NULL },
    { "createModelAndComponentsWithRARESPOTViewer:", NULL, "V", 0x404, NULL },
    { "finishedLoadingEx", NULL, "V", 0x4, NULL },
    { "handleCustomPropertiesWithRARESPOTWidget:withJavaUtilMap:", NULL, "V", 0x4, NULL },
    { "handleInitialStuff", NULL, "V", 0x4, NULL },
    { "importDataExWithRAREiTransferable:withRAREDropInformation:", NULL, "Z", 0x4, NULL },
    { "initializeListenersWithRAREaWidgetListener:", NULL, "V", 0x4, NULL },
    { "updateListWithFilteringIndexWithRAREUTFilterableList:", NULL, "LJavaUtilList", 0x4, NULL },
    { "setEditingModeWithRAREiListView_EditingModeEnum:withBoolean:withBoolean:", NULL, "V", 0x4, NULL },
    { "setFlingThresholdWithInt:", NULL, "V", 0x4, NULL },
    { "setListComponentWithRAREiPlatformListHandler:", NULL, "V", 0x4, NULL },
    { "setSelectFlingedWithBoolean:", NULL, "V", 0x4, NULL },
    { "setWholeViewFlingWithBoolean:", NULL, "V", 0x4, NULL },
    { "getTempList", NULL, "LJavaUtilList", 0x4, NULL },
    { "getWidgetAttributeWithNSString:", NULL, "LNSString", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "initiallySelectedIndex_", NULL, 0x4, "I" },
    { "addIndexToList_", NULL, 0x4, "Z" },
    { "itemDescription_", NULL, 0x4, "LRAREColumn" },
    { "listComponent_", NULL, 0x4, "LRAREiPlatformListHandler" },
    { "listModel_", NULL, 0x4, "LRAREiPlatformListDataModel" },
    { "prototypeSectionItem_", NULL, 0x4, "LRARERenderableDataItem" },
    { "selectionMode_", NULL, 0x4, "LRAREiListHandler_SelectionModeEnum" },
    { "selectionModel_", NULL, 0x4, "LNSObject" },
    { "selectionModelGroup_", NULL, 0x4, "LRAREUISelectionModelGroup" },
    { "sorter_", NULL, 0x4, "LJavaUtilComparator" },
    { "submitColumn_", NULL, 0x4, "I" },
    { "submitValueType_", NULL, 0x4, "I" },
    { "tempList_", NULL, 0x4, "LJavaUtilList" },
  };
  static J2ObjcClassInfo _RAREaListViewer = { "aListViewer", "com.appnativa.rare.viewer", NULL, 0x401, 75, methods, 13, fields, 0, NULL};
  return &_RAREaListViewer;
}

@end
@implementation RAREaListViewer_$1

- (void)run {
  if (![this$0_ isDisposed]) {
    [((id<RAREiPlatformListHandler>) nil_chk(this$0_->listComponent_)) setAllWithJavaUtilCollection:val$rows_];
  }
}

- (id)initWithRAREaListViewer:(RAREaListViewer *)outer$
       withJavaUtilCollection:(id<JavaUtilCollection>)capture$0 {
  this$0_ = outer$;
  val$rows_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaListViewer" },
    { "val$rows_", NULL, 0x1012, "LJavaUtilCollection" },
  };
  static J2ObjcClassInfo _RAREaListViewer_$1 = { "$1", "com.appnativa.rare.viewer", "aListViewer", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_RAREaListViewer_$1;
}

@end
@implementation RAREaListViewer_$2

- (void)run {
  if ((this$0_->listComponent_ != nil) && ![this$0_ isDisposed]) {
    [this$0_->listComponent_ setAllWithJavaUtilCollection:val$items_];
  }
}

- (id)initWithRAREaListViewer:(RAREaListViewer *)outer$
       withJavaUtilCollection:(id<JavaUtilCollection>)capture$0 {
  this$0_ = outer$;
  val$items_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaListViewer" },
    { "val$items_", NULL, 0x1012, "LJavaUtilCollection" },
  };
  static J2ObjcClassInfo _RAREaListViewer_$2 = { "$2", "com.appnativa.rare.viewer", "aListViewer", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_RAREaListViewer_$2;
}

@end
@implementation RAREaListViewer_$3

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  return [((JavaLangInteger *) check_class_cast(((RAREUTObjectHolder *) nil_chk(o1))->value_, [JavaLangInteger class])) compareToWithId:(JavaLangInteger *) check_class_cast(((RAREUTObjectHolder *) nil_chk(o2))->value_, [JavaLangInteger class])];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _RAREaListViewer_$3 = { "$3", "com.appnativa.rare.viewer", "aListViewer", 0x8000, 0, NULL, 0, NULL, 0, NULL};
  return &_RAREaListViewer_$3;
}

@end
