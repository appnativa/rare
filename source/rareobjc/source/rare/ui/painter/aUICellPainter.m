//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/painter/aUICellPainter.java
//
//  Created by decoteaud on 7/29/15.
//

#include "com/appnativa/rare/ui/Displayed.h"
#include "com/appnativa/rare/ui/RenderType.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformPaint.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/RenderSpace.h"
#include "com/appnativa/rare/ui/painter/aUICellPainter.h"
#include "com/appnativa/rare/ui/painter/iComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformPainter.h"
#include "java/lang/Math.h"

@implementation RAREaUICellPainter

- (id)init {
  if (self = [super init]) {
    height_ = -1;
    width_ = -1;
    column_ = 1;
    row_ = 1;
  }
  return self;
}

- (void)setBackgroundWithRAREUIColor:(RAREUIColor *)bg {
  backgroundColor_ = bg;
}

- (void)setDisplayedWithRAREDisplayedEnum:(RAREDisplayedEnum *)displayed {
  self->displayed_ = displayed;
}

- (void)setEnabledWithBoolean:(BOOL)enabled {
  self->enabled_ = enabled;
}

- (void)setRenderSpaceWithRARERenderSpaceEnum:(RARERenderSpaceEnum *)space {
  renderSpace_ = space;
}

- (void)setRenderTypeWithRARERenderTypeEnum:(RARERenderTypeEnum *)type {
  self->renderType_ = type;
}

- (RAREUIColor *)getBackgroundColor {
  return backgroundColor_;
}

- (id<RAREiPlatformBorder>)getBorder {
  return border_;
}

- (RAREDisplayedEnum *)getDisplayed {
  return displayed_;
}

- (RARERenderSpaceEnum *)getRenderSpace {
  return renderSpace_;
}

- (RARERenderTypeEnum *)getRenderType {
  return renderType_;
}

- (BOOL)hasValue {
  return YES;
}

- (BOOL)isEnabled {
  return enabled_;
}

- (void)dispose {
}

- (void)setDisposableWithBoolean:(BOOL)disposable {
}

- (BOOL)isDisposed {
  return NO;
}

- (BOOL)isDisposable {
  return NO;
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height
                               withInt:(int)orientation {
  [((id<RAREiPlatformGraphics>) nil_chk(g)) saveState];
  @try {
    if (self->x_ != -1) {
      x += self->x_;
    }
    if (self->y_ != -1) {
      y += self->y_;
    }
    if (self->width_ != -1) {
      width = [JavaLangMath minWithFloat:width withFloat:self->width_];
    }
    if (self->height_ != -1) {
      height = [JavaLangMath minWithFloat:height withFloat:self->height_];
    }
    if ((width < 1) || (height < 1)) {
      return;
    }
    id<RAREiComponentPainter> cp = [self getCachedComponentPainter];
    [((id<RAREiComponentPainter>) nil_chk(cp)) paintWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:width withFloat:height withInt:orientation];
  }
  @finally {
    [g restoreState];
  }
}

- (id<RAREiPlatformPainter>)reference {
  return self;
}

- (id<RAREiPlatformPaint>)getPaintWithFloat:(float)width
                                  withFloat:(float)height {
  return nil;
}

- (BOOL)canUseLayer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)canUseMainLayer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getModCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isSingleColorPainter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllFieldsTo:(RAREaUICellPainter *)other {
  [super copyAllFieldsTo:other];
  other->column_ = column_;
  other->columnSpan_ = columnSpan_;
  other->displayed_ = displayed_;
  other->enabled_ = enabled_;
  other->height_ = height_;
  other->renderSpace_ = renderSpace_;
  other->renderType_ = renderType_;
  other->row_ = row_;
  other->rowSpan_ = rowSpan_;
  other->width_ = width_;
  other->x_ = x_;
  other->y_ = y_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x4, NULL },
    { "getBackgroundColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getBorder", NULL, "LRAREiPlatformBorder", 0x1, NULL },
    { "getDisplayed", NULL, "LRAREDisplayedEnum", 0x1, NULL },
    { "getRenderSpace", NULL, "LRARERenderSpaceEnum", 0x1, NULL },
    { "getRenderType", NULL, "LRARERenderTypeEnum", 0x1, NULL },
    { "hasValue", NULL, "Z", 0x1, NULL },
    { "isEnabled", NULL, "Z", 0x1, NULL },
    { "isDisposed", NULL, "Z", 0x1, NULL },
    { "isDisposable", NULL, "Z", 0x1, NULL },
    { "reference", NULL, "LRAREiPlatformPainter", 0x1, NULL },
    { "getPaintWithFloat:withFloat:", NULL, "LRAREiPlatformPaint", 0x1, NULL },
    { "canUseLayer", NULL, "Z", 0x401, NULL },
    { "canUseMainLayer", NULL, "Z", 0x401, NULL },
    { "getModCount", NULL, "I", 0x401, NULL },
    { "isSingleColorPainter", NULL, "Z", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "height_", NULL, 0x1, "I" },
    { "width_", NULL, 0x1, "I" },
    { "x_", NULL, 0x1, "I" },
    { "y_", NULL, 0x1, "I" },
    { "column_", NULL, 0x1, "I" },
    { "row_", NULL, 0x1, "I" },
    { "columnSpan_", NULL, 0x1, "I" },
    { "rowSpan_", NULL, 0x1, "I" },
  };
  static J2ObjcClassInfo _RAREaUICellPainter = { "aUICellPainter", "com.appnativa.rare.ui.painter", NULL, 0x401, 16, methods, 8, fields, 0, NULL};
  return &_RAREaUICellPainter;
}

@end
