//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/painter/aUIPainter.java
//
//  Created by decoteaud on 3/11/16.
//

#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/ui/Displayed.h"
#include "com/appnativa/rare/ui/RenderType.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformPaint.h"
#include "com/appnativa/rare/ui/painter/RenderSpace.h"
#include "com/appnativa/rare/ui/painter/aUIPainter.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformPainter.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/RuntimeException.h"

@implementation RAREaUIPainter

static int RAREaUIPainter_staticCallCount_ = 0;
static RAREUIInsets * RAREaUIPainter_rsInsets_;

+ (int)staticCallCount {
  return RAREaUIPainter_staticCallCount_;
}

+ (int *)staticCallCountRef {
  return &RAREaUIPainter_staticCallCount_;
}

+ (RAREUIInsets *)rsInsets {
  return RAREaUIPainter_rsInsets_;
}

+ (void)setRsInsets:(RAREUIInsets *)rsInsets {
  RAREaUIPainter_rsInsets_ = rsInsets;
}

- (id)init {
  if (self = [super init]) {
    enabled_ = YES;
    renderType_ = [RARERenderTypeEnum TILED];
    renderSpace_ = [RARERenderSpaceEnum WITHIN_BORDER];
    displayed_ = [RAREDisplayedEnum ALWAYS];
  }
  return self;
}

- (id<RAREiBackgroundPainter>)alphaWithInt:(int)alpha {
  return self;
}

- (id)clone {
  @try {
    RAREaUIPainter *p = (RAREaUIPainter *) check_class_cast([super clone], [RAREaUIPainter class]);
    ((RAREaUIPainter *) nil_chk(p))->referenceCount_ = 0;
    return p;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Clone Not Supported"];
  }
}

- (void)dispose {
  @synchronized(self) {
    {
      if (referenceCount_ > 0) {
        referenceCount_--;
      }
      if (referenceCount_ == 0) {
        if ([self isDisposable]) {
          [self disposeEx];
        }
      }
    }
  }
}

- (void)forceableDispose {
  referenceCount_ = 0;
  disposable_ = YES;
  [self dispose];
}

- (BOOL)isEqual:(id)obj {
  if (obj == nil) {
    return NO;
  }
  if (obj == self) {
    return YES;
  }
  return NO;
}

- (NSUInteger)hash {
  int hash_ = 5;
  hash_ = 17 * hash_ + (int) [super hash];
  return hash_;
}

- (id<RAREiPlatformPainter>)reference {
  @synchronized(self) {
    {
      referenceCount_++;
      return self;
    }
  }
}

- (void)setDisplayedWithRAREDisplayedEnum:(RAREDisplayedEnum *)displayed {
  self->displayed_ = (displayed == nil) ? [RAREDisplayedEnum ALWAYS] : displayed;
}

- (void)setDisposableWithBoolean:(BOOL)disposable {
  self->disposable_ = disposable;
}

- (void)setEnabledWithBoolean:(BOOL)enabled {
  self->enabled_ = enabled;
}

- (void)setRenderSpaceWithRARERenderSpaceEnum:(RARERenderSpaceEnum *)space {
  renderSpace_ = (space == nil) ? [RARERenderSpaceEnum COMPONENT] : space;
}

- (void)setRenderTypeWithRARERenderTypeEnum:(RARERenderTypeEnum *)type {
  self->renderType_ = (type == nil) ? [RARERenderTypeEnum TILED] : type;
}

- (RAREUIColor *)getBackgroundColor {
  return nil;
}

- (RAREDisplayedEnum *)getDisplayed {
  return displayed_;
}

- (int)getModCount {
  return modCount_;
}

- (NSString *)description {
  RAREUIColor *c = [self getBackgroundColor];
  if (c != nil) {
    return [c description];
  }
  return [super description];
}

- (id<RAREiPlatformPaint>)getPaintWithFloat:(float)width
                                  withFloat:(float)height {
  return nil;
}

+ (RAREUIRectangle *)getRenderLocationWithId:(id)comp
                     withRARERenderSpaceEnum:(RARERenderSpaceEnum *)rs
                      withRARERenderTypeEnum:(RARERenderTypeEnum *)rt
                                   withFloat:(float)x
                                   withFloat:(float)y
                                   withFloat:(float)w
                                   withFloat:(float)h
                                   withFloat:(float)iw
                                   withFloat:(float)ih
                         withRAREUIRectangle:(RAREUIRectangle *)outRect {
  RAREUIRectangle *rect = outRect;
  if (rect == nil) {
    rect = [[RAREUIRectangle alloc] init];
  }
  RAREaUIPainter_staticCallCount_++;
  if ((rs != nil) && (comp != nil)) {
    switch ([rs ordinal]) {
      case RARERenderSpace_WITHIN_BORDER:
      case RARERenderSpace_WITHIN_MARGIN:
      {
        id<RAREiPlatformComponent> component = [RAREPlatform findPlatformComponentWithId:comp];
        if (component != nil) {
          id<RAREiPlatformBorder> b = [component getBorder];
          if (b != nil) {
            RAREUIInsets *insets;
            if (rs == [RARERenderSpaceEnum WITHIN_BORDER]) {
              insets = [b getBorderInsetsExWithRAREUIInsets:(RAREaUIPainter_staticCallCount_ == 1) ? RAREaUIPainter_rsInsets_ : nil];
            }
            else {
              insets = [b getBorderInsetsWithRAREUIInsets:(RAREaUIPainter_staticCallCount_ == 1) ? RAREaUIPainter_rsInsets_ : nil];
            }
            x += ((RAREUIInsets *) nil_chk(insets))->left_;
            y += insets->top_;
            w -= (insets->left_ + insets->right_);
            h -= (insets->top_ + insets->bottom_);
          }
        }
        break;
      }
      default:
      break;
    }
  }
  if (rt != nil) {
    switch ([rt ordinal]) {
      case RARERenderType_HORIZONTAL_TILE:
      break;
      case RARERenderType_VERTICAL_TILE:
      break;
      case RARERenderType_STRETCHED:
      break;
      case RARERenderType_STRETCH_WIDTH_MIDDLE:
      y = (h - ih) / 2;
      h = ih;
      break;
      case RARERenderType_STRETCH_WIDTH:
      h = ih;
      break;
      case RARERenderType_STRETCH_HEIGHT_MIDDLE:
      x = (w - iw) / 2;
      w = iw;
      break;
      case RARERenderType_STRETCH_HEIGHT:
      w = iw;
      break;
      case RARERenderType_UPPER_LEFT:
      w = iw;
      h = ih;
      break;
      case RARERenderType_UPPER_RIGHT:
      x = w - iw;
      w = iw;
      h = ih;
      break;
      case RARERenderType_LOWER_LEFT:
      y = h - ih;
      w = iw;
      h = ih;
      break;
      case RARERenderType_LOWER_RIGHT:
      x = w - iw;
      y = h - ih;
      w = iw;
      h = ih;
      break;
      case RARERenderType_LOWER_MIDDLE:
      x = (w - iw) / 2;
      y = h - ih;
      w = iw;
      h = ih;
      break;
      case RARERenderType_UPPER_MIDDLE:
      x = (w - iw) / 2;
      w = iw;
      h = ih;
      break;
      case RARERenderType_LEFT_MIDDLE:
      y = (h - ih) / 2;
      w = iw;
      h = ih;
      break;
      case RARERenderType_RIGHT_MIDDLE:
      x = w - iw;
      y = (h - ih) / 2;
      w = iw;
      h = ih;
      break;
      case RARERenderType_CENTERED:
      x = (w - iw) / 2;
      y = (h - ih) / 2;
      w = iw;
      h = ih;
      break;
      default:
      break;
    }
  }
  [((RAREUIRectangle *) nil_chk(rect)) setBoundsWithFloat:x withFloat:y withFloat:w withFloat:h];
  RAREaUIPainter_staticCallCount_--;
  return rect;
}

- (RARERenderSpaceEnum *)getRenderSpace {
  return renderSpace_;
}

- (RARERenderTypeEnum *)getRenderType {
  return renderType_;
}

- (BOOL)isDisposable {
  return disposable_;
}

- (BOOL)isEnabled {
  return enabled_;
}

- (BOOL)isDisposed {
  return disposed_;
}

- (void)disposeEx {
  disposed_ = YES;
}

- (BOOL)canUseLayer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)canUseMainLayer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isSingleColorPainter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)param0
                             withFloat:(float)param1
                             withFloat:(float)param2
                             withFloat:(float)param3
                             withFloat:(float)param4
                               withInt:(int)param5 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateModCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (void)initialize {
  if (self == [RAREaUIPainter class]) {
    RAREaUIPainter_rsInsets_ = [[RAREUIInsets alloc] init];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(RAREaUIPainter *)other {
  [super copyAllFieldsTo:other];
  other->displayed_ = displayed_;
  other->disposable_ = disposable_;
  other->disposed_ = disposed_;
  other->enabled_ = enabled_;
  other->modCount_ = modCount_;
  other->referenceCount_ = referenceCount_;
  other->renderSpace_ = renderSpace_;
  other->renderType_ = renderType_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "alphaWithInt:", NULL, "LRAREiBackgroundPainter", 0x1, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "dispose", NULL, "V", 0x21, NULL },
    { "reference", NULL, "LRAREiPlatformPainter", 0x21, NULL },
    { "getBackgroundColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getDisplayed", NULL, "LRAREDisplayedEnum", 0x1, NULL },
    { "getPaintWithFloat:withFloat:", NULL, "LRAREiPlatformPaint", 0x1, NULL },
    { "getRenderLocationWithId:withRARERenderSpaceEnum:withRARERenderTypeEnum:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withRAREUIRectangle:", NULL, "LRAREUIRectangle", 0x9, NULL },
    { "getRenderSpace", NULL, "LRARERenderSpaceEnum", 0x1, NULL },
    { "getRenderType", NULL, "LRARERenderTypeEnum", 0x1, NULL },
    { "isDisposable", NULL, "Z", 0x1, NULL },
    { "isEnabled", NULL, "Z", 0x1, NULL },
    { "isDisposed", NULL, "Z", 0x1, NULL },
    { "disposeEx", NULL, "V", 0x4, NULL },
    { "canUseLayer", NULL, "Z", 0x401, NULL },
    { "canUseMainLayer", NULL, "Z", 0x401, NULL },
    { "isSingleColorPainter", NULL, "Z", 0x401, NULL },
    { "paintWithRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:withInt:", NULL, "V", 0x401, NULL },
    { "updateModCount", NULL, "V", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "staticCallCount_", NULL, 0xa, "I" },
    { "rsInsets_", NULL, 0xa, "LRAREUIInsets" },
    { "referenceCount_", NULL, 0x0, "I" },
    { "modCount_", NULL, 0x4, "I" },
    { "renderType_", NULL, 0x4, "LRARERenderTypeEnum" },
    { "renderSpace_", NULL, 0x4, "LRARERenderSpaceEnum" },
    { "displayed_", NULL, 0x4, "LRAREDisplayedEnum" },
  };
  static J2ObjcClassInfo _RAREaUIPainter = { "aUIPainter", "com.appnativa.rare.ui.painter", NULL, 0x401, 19, methods, 7, fields, 0, NULL};
  return &_RAREaUIPainter;
}

@end
