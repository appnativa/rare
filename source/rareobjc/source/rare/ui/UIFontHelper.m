//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/UIFontHelper.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/spot/Font.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontHelper.h"
#include "com/appnativa/rare/ui/UIFontMetrics.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "java/util/List.h"

@implementation RAREUIFontHelper

+ (RAREUIFont *)parseFontWithRAREiWidget:(id<RAREiWidget>)context
                            withNSString:(NSString *)s {
  return [RAREFontUtils parseFontWithRAREiWidget:context withRAREUIFont:nil withNSString:s];
}

+ (RAREUIFont *)parseFontWithRAREUIFont:(RAREUIFont *)base
                           withNSString:(NSString *)s {
  return [RAREFontUtils parseFontWithRAREiWidget:[RAREPlatform getContextRootViewer] withRAREUIFont:base withNSString:s];
}

+ (float)stringWidthWithRAREUIFont:(RAREUIFont *)font
                      withNSString:(NSString *)string {
  return [((RAREUIFontMetrics *) nil_chk([RAREUIFontMetrics getMetricsWithRAREUIFont:font])) stringWidthWithNSString:string];
}

+ (void)setDefaultFontWithRAREUIFont:(RAREUIFont *)font {
  [RAREFontUtils setDefaultFontWithRAREUIFont:font];
}

+ (void)setRelativeFontSizeWithFloat:(float)size {
  [RAREFontUtils setRelativeFontSizeWithFloat:size];
}

+ (id<JavaUtilList>)getAvailableFontNames {
  return [RAREPlatformHelper getAvailableFontNames];
}

+ (id<JavaUtilList>)getAvailableFonts {
  return [RAREPlatformHelper getAvailableFonts];
}

+ (int)getCharacterWidth {
  return [RAREFontUtils getCharacterWidthWithRAREUIFont:[RAREUIFontHelper getDefaultFont]];
}

+ (int)getCharacterWidthWithRAREUIFont:(RAREUIFont *)f {
  return [RAREFontUtils getCharacterWidthWithRAREUIFont:f];
}

+ (RAREUIFont *)getDefaultFont {
  return [RAREFontUtils getDefaultFont];
}

+ (float)getDefaultFontSize {
  return [RAREFontUtils getDefaultFontSize];
}

+ (float)getDefaultLineHeight {
  return [RAREFontUtils getDefaultLineHeight];
}

+ (RAREUIFont *)getFontWithRARESPOTFont:(RARESPOTFont *)fi {
  if (fi == nil) {
    return nil;
  }
  RAREUIFont *f = nil;
  if ([((RARESPOTFont *) nil_chk(fi)) spot_hasValue]) {
    NSString *size = [((SPOTPrintableString *) nil_chk(fi->size_)) getValue];
    int style = [((RARESPOTFont_CStyle *) nil_chk(fi->style_)) spot_valueWasSet] ? [fi->style_ intValue] : -1;
    NSString *family = [((SPOTPrintableString *) nil_chk(fi->family_)) getValue];
    RAREUIFont *base = nil;
    if ((family != nil) && [@"true" isEqual:[fi->family_ spot_getAttributeWithNSString:@"is_property"]]) {
      base = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getFontWithNSString:family];
      if ((base != nil) && (size == nil) && (style == -1)) {
        return base;
      }
    }
    if (base == nil) {
      base = [RAREUIFontHelper getSystemFont];
    }
    f = [RAREFontUtils getFontWithRAREUIFont:base withNSString:family withInt:style withNSString:size withBoolean:[((SPOTBoolean *) nil_chk(fi->monospaced_)) booleanValue] withBoolean:[((SPOTBoolean *) nil_chk(fi->underlined_)) booleanValue] withBoolean:[((SPOTBoolean *) nil_chk(fi->strikeThrough_)) booleanValue]];
  }
  return f;
}

+ (RAREUIFont *)getFontWithRAREiWidget:(id<RAREiWidget>)context
                      withRARESPOTFont:(RARESPOTFont *)fi {
  if (fi == nil) {
    return nil;
  }
  RAREUIFont *f = nil;
  if ([((RARESPOTFont *) nil_chk(fi)) spot_hasValue]) {
    id<RAREiPlatformComponent> c = [((id<RAREiWidget>) nil_chk(context)) getDataComponent];
    NSString *size = [((SPOTPrintableString *) nil_chk(fi->size_)) getValue];
    int style = [((RARESPOTFont_CStyle *) nil_chk(fi->style_)) spot_valueWasSet] ? [fi->style_ intValue] : -1;
    NSString *family = [((SPOTPrintableString *) nil_chk(fi->family_)) getValue];
    RAREUIFont *base = nil;
    if ((family != nil) && [@"true" isEqual:[fi->family_ spot_getAttributeWithNSString:@"is_property"]]) {
      base = [((RAREUIProperties *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([context getAppContext])) getUIDefaults])) getFontWithNSString:family];
      if ((base != nil) && (size == nil) && (style == -1)) {
        return base;
      }
    }
    if ((base == nil) && (c != nil)) {
      base = [c getFontEx];
    }
    if (base == nil) {
      base = [RAREFontUtils getDefaultFont];
    }
    f = [RAREFontUtils getFontWithRAREUIFont:base withNSString:family withInt:style withNSString:size withBoolean:[((SPOTBoolean *) nil_chk(fi->monospaced_)) booleanValue] withBoolean:[((SPOTBoolean *) nil_chk(fi->underlined_)) booleanValue] withBoolean:[((SPOTBoolean *) nil_chk(fi->strikeThrough_)) booleanValue]];
  }
  return f;
}

+ (RAREUIFont *)getFontWithRAREUIFont:(RAREUIFont *)base
                     withRARESPOTFont:(RARESPOTFont *)fi {
  RAREUIFont *f = base;
  if ((fi != nil) && [fi spot_hasValue]) {
    int style = [((RARESPOTFont_CStyle *) nil_chk(fi->style_)) spot_valueWasSet] ? [fi->style_ intValue] : -1;
    f = [RAREFontUtils getFontWithRAREUIFont:base withNSString:[((SPOTPrintableString *) nil_chk(fi->family_)) getValue] withInt:style withNSString:[((SPOTPrintableString *) nil_chk(fi->size_)) getValue] withBoolean:[((SPOTBoolean *) nil_chk(fi->monospaced_)) booleanValue] withBoolean:[((SPOTBoolean *) nil_chk(fi->underlined_)) booleanValue] withBoolean:[((SPOTBoolean *) nil_chk(fi->strikeThrough_)) booleanValue]];
  }
  return f;
}

+ (RAREUIFont *)getFontWithRAREUIFont:(RAREUIFont *)base
                         withNSString:(NSString *)family
                              withInt:(int)style
                         withNSString:(NSString *)ssize
                          withBoolean:(BOOL)monospaced {
  return [RAREFontUtils getFontWithRAREUIFont:base withNSString:family withInt:style withNSString:ssize withBoolean:monospaced withBoolean:NO withBoolean:NO];
}

+ (RAREUIFont *)getFontWithRAREUIFont:(RAREUIFont *)base
                         withNSString:(NSString *)family
                         withNSString:(NSString *)style
                         withNSString:(NSString *)ssize
                          withBoolean:(BOOL)monospaced {
  return [RAREFontUtils getFontWithRAREUIFont:base withNSString:family withNSString:style withNSString:ssize withBoolean:monospaced];
}

+ (float)getFontHeightWithRAREUIFont:(RAREUIFont *)font {
  return [RAREFontUtils getFontHeightWithRAREUIFont:font withBoolean:YES];
}

+ (float)getRelativeFontSize {
  return [RAREFontUtils getRelativeFontSize];
}

+ (RAREUIFont *)getSystemFont {
  return [RAREFontUtils getSystemFont];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "parseFontWithRAREiWidget:withNSString:", NULL, "LRAREUIFont", 0x9, NULL },
    { "parseFontWithRAREUIFont:withNSString:", NULL, "LRAREUIFont", 0x9, NULL },
    { "getAvailableFontNames", NULL, "LJavaUtilList", 0x9, NULL },
    { "getAvailableFonts", NULL, "LJavaUtilList", 0x9, NULL },
    { "getDefaultFont", NULL, "LRAREUIFont", 0x9, NULL },
    { "getFontWithRARESPOTFont:", NULL, "LRAREUIFont", 0x9, NULL },
    { "getFontWithRAREiWidget:withRARESPOTFont:", NULL, "LRAREUIFont", 0x9, NULL },
    { "getFontWithRAREUIFont:withRARESPOTFont:", NULL, "LRAREUIFont", 0x9, NULL },
    { "getFontWithRAREUIFont:withNSString:withInt:withNSString:withBoolean:", NULL, "LRAREUIFont", 0x9, NULL },
    { "getFontWithRAREUIFont:withNSString:withNSString:withNSString:withBoolean:", NULL, "LRAREUIFont", 0x9, NULL },
    { "getSystemFont", NULL, "LRAREUIFont", 0x9, NULL },
  };
  static J2ObjcClassInfo _RAREUIFontHelper = { "UIFontHelper", "com.appnativa.rare.ui", NULL, 0x1, 11, methods, 0, NULL, 0, NULL};
  return &_RAREUIFontHelper;
}

@end
