//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/ColorUtils.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/Conversions.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/spot/GridCell.h"
#include "com/appnativa/rare/ui/BorderUtils.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/SimpleColorStateList.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorShade.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontHelper.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/PainterHolder.h"
#include "com/appnativa/rare/ui/painter/UIBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/UISimpleBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iGradientPainter.h"
#include "com/appnativa/rare/ui/painter/iImagePainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformPainter.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/SNumber.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/ThreadLocal.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation RAREColorUtils

static JavaLangBoolean * RAREColorUtils_KEEP_COLOR_KEYS_;
static NSString * RAREColorUtils_KEEP_COLOR_KEYS_KEY_ = @"Rare.keepColorKeys";
static RAREUIColor * RAREColorUtils_TRANSPARENT_COLOR_;
static RAREUIColor * RAREColorUtils_NULL_COLOR_;
static RAREUIColor * RAREColorUtils_DISABLED_TRANSPARENT_COLOR_;
static id<RAREiBackgroundPainter> RAREColorUtils_NULL_BGPAINTER_;
static RAREUIColor * RAREColorUtils_background_;
static RAREUISimpleBackgroundPainter * RAREColorUtils_controlPainter_;
static RAREUIColor * RAREColorUtils_foreground_;
static IOSObjectArray * RAREColorUtils_DISTRIBUTIONS_;
static IOSCharArray * RAREColorUtils_colorTokens_;
static RAREPaintBucket * RAREColorUtils_paintBucket_;
static JavaUtilHashMap * RAREColorUtils_colorMap_;
static JavaLangThreadLocal * RAREColorUtils_perThreadScanner_;
static JavaLangThreadLocal * RAREColorUtils_perThreadList_;
static RAREUISimpleBackgroundPainter * RAREColorUtils_whitePainter_;
static RAREPaintBucket * RAREColorUtils_backgroundBucket_;
static RAREUIColor * RAREColorUtils_disabledForeground_;

+ (JavaLangBoolean *)KEEP_COLOR_KEYS {
  return RAREColorUtils_KEEP_COLOR_KEYS_;
}

+ (void)setKEEP_COLOR_KEYS:(JavaLangBoolean *)KEEP_COLOR_KEYS {
  RAREColorUtils_KEEP_COLOR_KEYS_ = KEEP_COLOR_KEYS;
}

+ (NSString *)KEEP_COLOR_KEYS_KEY {
  return RAREColorUtils_KEEP_COLOR_KEYS_KEY_;
}

+ (RAREUIColor *)TRANSPARENT_COLOR {
  return RAREColorUtils_TRANSPARENT_COLOR_;
}

+ (RAREUIColor *)NULL_COLOR {
  return RAREColorUtils_NULL_COLOR_;
}

+ (RAREUIColor *)DISABLED_TRANSPARENT_COLOR {
  return RAREColorUtils_DISABLED_TRANSPARENT_COLOR_;
}

+ (void)setDISABLED_TRANSPARENT_COLOR:(RAREUIColor *)DISABLED_TRANSPARENT_COLOR {
  RAREColorUtils_DISABLED_TRANSPARENT_COLOR_ = DISABLED_TRANSPARENT_COLOR;
}

+ (id<RAREiBackgroundPainter>)NULL_BGPAINTER {
  return RAREColorUtils_NULL_BGPAINTER_;
}

+ (void)setNULL_BGPAINTER:(id<RAREiBackgroundPainter>)NULL_BGPAINTER {
  RAREColorUtils_NULL_BGPAINTER_ = NULL_BGPAINTER;
}

+ (RAREUIColor *)background {
  return RAREColorUtils_background_;
}

+ (void)setBackground:(RAREUIColor *)background {
  RAREColorUtils_background_ = background;
}

+ (RAREUISimpleBackgroundPainter *)controlPainter {
  return RAREColorUtils_controlPainter_;
}

+ (void)setControlPainter:(RAREUISimpleBackgroundPainter *)controlPainter {
  RAREColorUtils_controlPainter_ = controlPainter;
}

+ (RAREUIColor *)foreground {
  return RAREColorUtils_foreground_;
}

+ (void)setForeground:(RAREUIColor *)foreground {
  RAREColorUtils_foreground_ = foreground;
}

+ (IOSObjectArray *)DISTRIBUTIONS {
  return RAREColorUtils_DISTRIBUTIONS_;
}

+ (IOSCharArray *)colorTokens {
  return RAREColorUtils_colorTokens_;
}

+ (RAREPaintBucket *)paintBucket {
  return RAREColorUtils_paintBucket_;
}

+ (void)setPaintBucket:(RAREPaintBucket *)paintBucket {
  RAREColorUtils_paintBucket_ = paintBucket;
}

+ (JavaUtilHashMap *)colorMap {
  return RAREColorUtils_colorMap_;
}

+ (JavaLangThreadLocal *)perThreadScanner {
  return RAREColorUtils_perThreadScanner_;
}

+ (JavaLangThreadLocal *)perThreadList {
  return RAREColorUtils_perThreadList_;
}

+ (RAREUISimpleBackgroundPainter *)whitePainter {
  return RAREColorUtils_whitePainter_;
}

+ (void)setWhitePainter:(RAREUISimpleBackgroundPainter *)whitePainter {
  RAREColorUtils_whitePainter_ = whitePainter;
}

+ (RAREPaintBucket *)backgroundBucket {
  return RAREColorUtils_backgroundBucket_;
}

+ (void)setBackgroundBucket:(RAREPaintBucket *)backgroundBucket {
  RAREColorUtils_backgroundBucket_ = backgroundBucket;
}

+ (RAREUIColor *)disabledForeground {
  return RAREColorUtils_disabledForeground_;
}

+ (void)setDisabledForeground:(RAREUIColor *)disabledForeground {
  RAREColorUtils_disabledForeground_ = disabledForeground;
}

+ (int)HSVToColorWithFloatArray:(IOSFloatArray *)hsv {
  return [RAREColorUtils HSVToColorWithInt:255 withFloatArray:hsv];
}

+ (int)HSVToColorWithInt:(int)alpha
          withFloatArray:(IOSFloatArray *)hsv {
  float h = IOSFloatArray_Get(nil_chk(hsv), 0);
  float s = IOSFloatArray_Get(hsv, 1);
  float b = IOSFloatArray_Get(hsv, 2);
  if (h < 0) {
    h = 0;
  }
  if (s < 0) {
    s = 0;
  }
  if (b < 0) {
    b = 0;
  }
  if (h > 1) {
    h = 1;
  }
  if (s > 1) {
    s = 1;
  }
  if (b > 1) {
    b = 1;
  }
  float red = 0.0f;
  float green = 0.0f;
  float blue = 0.0f;
  float hf = (h - (int) h) * 6.0f;
  int ihf = (int) hf;
  float f = hf - ihf;
  float pv = b * (1.0f - s);
  float qv = b * (1.0f - s * f);
  float tv = b * (1.0f - s * (1.0f - f));
  switch (ihf) {
    case 0:
    red = b;
    green = tv;
    blue = pv;
    break;
    case 1:
    red = qv;
    green = b;
    blue = pv;
    break;
    case 2:
    red = pv;
    green = b;
    blue = tv;
    break;
    case 3:
    red = pv;
    green = qv;
    blue = b;
    break;
    case 4:
    red = tv;
    green = pv;
    blue = b;
    break;
    case 5:
    red = b;
    green = pv;
    blue = qv;
    break;
  }
  return ((alpha & (int) 0xff) << 24) | (((int) (red * 255.0f)) << 16) | (((int) (green * 255.0f)) << 8) | ((int) (blue * 255.0f));
}

+ (void)addMappedColorWithNSString:(NSString *)name
                   withRAREUIColor:(RAREUIColor *)c {
  (void) [((JavaUtilHashMap *) nil_chk(RAREColorUtils_colorMap_)) putWithId:name withId:c];
}

+ (int)adjustLuminanceWithInt:(int)color
                      withInt:(int)lum {
  float var_R = [RAREColorUtils getRedWithInt:color] / 255.0f;
  float var_G = [RAREColorUtils getGreenWithInt:color] / 255.0f;
  float var_B = [RAREColorUtils getBlueWithInt:color] / 255.0f;
  float var_Min = [JavaLangMath minWithFloat:[JavaLangMath minWithFloat:var_R withFloat:var_G] withFloat:var_B];
  float var_Max = [JavaLangMath maxWithFloat:[JavaLangMath maxWithFloat:var_R withFloat:var_G] withFloat:var_B];
  float del_Max = var_Max - var_Min;
  float H = 0;
  float S;
  float L;
  L = (var_Max + var_Min) / 2;
  if (del_Max == 0) {
    H = 0;
    S = 0;
  }
  else {
    if (L < 0.5) {
      S = del_Max / (var_Max + var_Min);
    }
    else {
      S = del_Max / (2 - var_Max - var_Min);
    }
    float del_R = (((var_Max - var_R) / 6.0f) + (del_Max / 2.0f)) / del_Max;
    float del_G = (((var_Max - var_G) / 6.0f) + (del_Max / 2.0f)) / del_Max;
    float del_B = (((var_Max - var_B) / 6.0f) + (del_Max / 2.0f)) / del_Max;
    if ([RAREUTSNumber isEqualWithFloat:var_R withFloat:var_Max]) {
      H = del_B - del_G;
    }
    else if ([RAREUTSNumber isEqualWithFloat:var_G withFloat:var_Max]) {
      H = RAREColorUtils_oneThird + del_R - del_B;
    }
    else if ([RAREUTSNumber isEqualWithFloat:var_B withFloat:var_Max]) {
      H = RAREColorUtils_twoThirds + del_G - del_R;
    }
    if (H < 0) {
      H += 1;
    }
    if (H > 1) {
      H -= 1;
    }
  }
  float R;
  float G;
  float B;
  lum = (int) ((L * 255) + lum);
  if (lum < 0) {
    lum = 0;
  }
  else if (lum > 255) {
    lum = 255;
  }
  L = lum / 255.0f;
  if (S == 0) {
    R = L * 255.0f;
    G = L * 255.0f;
    B = L * 255.0f;
  }
  else {
    float var_2 = 0;
    float var_1 = 0;
    if (L < 0.5f) {
      var_2 = L * (1.0f + S);
    }
    else {
      var_2 = (L + S) - (S * L);
    }
    var_1 = 2 * L - var_2;
    R = 255 * [RAREColorUtils Hue_2_RGBWithFloat:var_1 withFloat:var_2 withFloat:H + RAREColorUtils_oneThird];
    G = 255 * [RAREColorUtils Hue_2_RGBWithFloat:var_1 withFloat:var_2 withFloat:H];
    B = 255 * [RAREColorUtils Hue_2_RGBWithFloat:var_1 withFloat:var_2 withFloat:H - RAREColorUtils_oneThird];
  }
  return [RAREColorUtils getARGBWithInt:(int) R withInt:(int) G withInt:(int) B withInt:[RAREColorUtils getAlphaWithInt:color]];
}

+ (int)brighterWithInt:(int)color {
  int r = [RAREColorUtils getRedWithInt:color];
  int g = [RAREColorUtils getGreenWithInt:color];
  int b = [RAREColorUtils getBlueWithInt:color];
  int a = [RAREColorUtils getAlphaWithInt:color];
  int i = (int) (1.0 / (1.0 - RAREColorUtils_FACTOR));
  if ((r == 0) && (g == 0) && (b == 0)) {
    return [RAREColorUtils getARGBWithInt:64 withInt:64 withInt:64 withInt:a];
  }
  if ((r > 0) && (r < i)) {
    r = i;
  }
  if ((g > 0) && (g < i)) {
    g = i;
  }
  if ((b > 0) && (b < i)) {
    b = i;
  }
  return [RAREColorUtils getARGBWithInt:[JavaLangMath minWithInt:(int) (r / RAREColorUtils_FACTOR) withInt:255] withInt:[JavaLangMath minWithInt:(int) (g / RAREColorUtils_FACTOR) withInt:255] withInt:[JavaLangMath minWithInt:(int) (b / RAREColorUtils_FACTOR) withInt:255] withInt:a];
}

+ (float)brightnessWithInt:(int)color {
  int r = (color >> 16) & (int) 0xFF;
  int g = (color >> 8) & (int) 0xFF;
  int b = color & (int) 0xFF;
  int V = [JavaLangMath maxWithInt:b withInt:[JavaLangMath maxWithInt:r withInt:g]];
  return (V / 255.f);
}

+ (RAREPaintBucket *)configureWithRAREiWidget:(id<RAREiWidget>)context
                         withRARESPOTGridCell:(RARESPOTGridCell *)gc
                          withRAREPaintBucket:(RAREPaintBucket *)pb {
  if (gc == nil) {
    return pb;
  }
  if (pb == nil) {
    pb = [[RAREPaintBucket alloc] init];
  }
  else {
    [pb empty];
  }
  [RAREColorUtils configureBackgroundPainterWithRAREPaintBucket:pb withNSString:[((SPOTPrintableString *) nil_chk(((RARESPOTGridCell *) nil_chk(gc))->bgColor_)) getValue] withJavaUtilMap:[gc->bgColor_ spot_getAttributesEx] withBoolean:YES];
  NSString *s = [gc spot_getAttributeWithNSString:@"foreground"];
  if (s != nil) {
    [((RAREPaintBucket *) nil_chk(pb)) setForegroundColorWithRAREUIColor:[RAREColorUtils getColorWithNSString:s]];
  }
  s = [gc spot_getAttributeWithNSString:@"font"];
  if (s != nil) {
    [((RAREPaintBucket *) nil_chk(pb)) setFontWithRAREUIFont:[RAREUIFontHelper parseFontWithRAREiWidget:context withNSString:s]];
  }
  if ([((SPOTPrintableString *) nil_chk(gc->bgImageURL_)) getValue] != nil) {
    [((RAREPaintBucket *) nil_chk(pb)) setImagePainterWithRAREiImagePainter:[RAREUtils configureImageWithRAREiWidget:context withRAREiImagePainter:nil withSPOTPrintableString:gc->bgImageURL_ withBoolean:NO]];
  }
  SPOTSet *set = [gc getBorders];
  if (set != nil) {
    [((RAREPaintBucket *) nil_chk(pb)) setBorderWithRAREiPlatformBorder:[RAREBorderUtils createBorderWithRAREiWidget:context withSPOTSet:set withRAREiPlatformBorder:nil]];
  }
  return pb;
}

+ (void)configureBackgroundPainterWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)comp
                                     withSPOTPrintableString:(SPOTPrintableString *)bgColor {
  RAREPaintBucket *pb = RAREColorUtils_paintBucket_;
  [((RAREPaintBucket *) nil_chk(pb)) empty];
  if ([RAREColorUtils configureBackgroundPainterWithRAREPaintBucket:pb withNSString:[((SPOTPrintableString *) nil_chk(bgColor)) getValue] withJavaUtilMap:[bgColor spot_getAttributesEx] withBoolean:NO]) {
    [pb installWithRAREiPlatformComponent:comp];
  }
}

+ (void)configureBackgroundPainterWithRAREiWidget:(id<RAREiWidget>)context
                          withSPOTPrintableString:(SPOTPrintableString *)bgColor {
  RAREPaintBucket *pb = RAREColorUtils_paintBucket_;
  [((RAREPaintBucket *) nil_chk(pb)) empty];
  if ([RAREColorUtils configureBackgroundPainterWithRAREPaintBucket:pb withNSString:[((SPOTPrintableString *) nil_chk(bgColor)) getValue] withJavaUtilMap:[bgColor spot_getAttributesEx] withBoolean:NO]) {
    [pb installWithRAREiPlatformComponent:[((id<RAREiWidget>) nil_chk(context)) getContainerComponent]];
  }
}

+ (void)configureBackgroundPainterWithRAREPaintBucket:(RAREPaintBucket *)pb
                              withSPOTPrintableString:(SPOTPrintableString *)bgColor {
  [RAREColorUtils configureBackgroundPainterWithRAREPaintBucket:pb withNSString:[((SPOTPrintableString *) nil_chk(bgColor)) getValue] withJavaUtilMap:[bgColor spot_getAttributesEx] withBoolean:NO];
}

+ (void)configureBackgroundPainterWithRAREiWidget:(id<RAREiWidget>)context
                                     withNSString:(NSString *)color
                                  withJavaUtilMap:(id<JavaUtilMap>)attrs
                                      withBoolean:(BOOL)alwaysUsePainter {
  if (context == nil) {
    return;
  }
  RAREPaintBucket *pb = RAREColorUtils_paintBucket_;
  [((RAREPaintBucket *) nil_chk(pb)) empty];
  if ([RAREColorUtils configureBackgroundPainterWithRAREPaintBucket:pb withNSString:color withJavaUtilMap:attrs withBoolean:alwaysUsePainter]) {
    [pb installWithRAREiPlatformComponent:[((id<RAREiWidget>) nil_chk(context)) getContainerComponent] withBoolean:NO];
  }
}

+ (BOOL)configureBackgroundPainterWithRAREPaintBucket:(RAREPaintBucket *)pb
                                         withNSString:(NSString *)color
                                      withJavaUtilMap:(id<JavaUtilMap>)attrs
                                          withBoolean:(BOOL)alwaysUsePainter {
  if (color == nil) {
    return NO;
  }
  if ([((NSString *) nil_chk(color)) isEqual:@"null"]) {
    [((RAREPaintBucket *) nil_chk(pb)) setBackgroundPainterWithRAREiBackgroundPainter:[RAREUISimpleBackgroundPainter NULL_BGPAINTER]];
    return YES;
  }
  IOSCharArray *a = [color toCharArray];
  int len = (int) [((IOSCharArray *) nil_chk(a)) count];
  RAREUTCharScanner *scanner = [((JavaLangThreadLocal *) nil_chk(RAREColorUtils_perThreadScanner_)) get];
  [((RAREUTCharScanner *) nil_chk(scanner)) resetWithCharArray:a withInt:0 withInt:len withBoolean:NO];
  (void) [scanner unquoteWithBoolean:YES];
  if (([scanner indexOfWithChar:';'] != -1) && ([scanner indexOfWithChar:'='] != -1)) {
    JavaUtilLinkedHashMap *map = [[JavaUtilLinkedHashMap alloc] init];
    (void) [RAREUTCharScanner parseOptionStringExWithRAREUTCharScanner:scanner withJavaUtilMap:map withChar:';' withBoolean:YES];
    RAREUIColor *c;
    if ([color contains:@"drawable/"]) {
      c = [RAREaPlatformHelper getDrawableStateListWithJavaUtilMap:map];
    }
    else {
      c = [RAREaPlatformHelper getColorStateListWithJavaUtilMap:map];
    }
    [((RAREPaintBucket *) nil_chk(pb)) setBackgroundColorWithRAREUIColor:c];
    return YES;
  }
  [scanner setTokenDelimitersWithCharArray:RAREColorUtils_colorTokens_];
  (void) [scanner trim];
  IOSObjectArray *colors = nil;
  IOSFloatArray *distribution = nil;
  IOSIntArray *tok;
  RAREUIColor *sc = nil;
  RAREUIColor *ec = nil;
  tok = [scanner findTokenWithBoolean:NO withBoolean:NO];
  if (tok != nil) {
    tok = [scanner trimWithIntArray:tok];
    if (tok != nil) {
      sc = [RAREColorUtils getColorWithCharArray:a withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1) withNSString:color];
    }
    if (scanner->foundDelimiter_ < 1) {
      if (sc != nil) {
        if ([sc isKindOfClass:[RAREUIColorShade class]]) {
          RAREUIColorShade *cs = (RAREUIColorShade *) check_class_cast(sc, [RAREUIColorShade class]);
          if ([cs getBackgroundPainter] != nil) {
            [((RAREPaintBucket *) nil_chk(pb)) setBackgroundPainterWithRAREiBackgroundPainter:[cs getBackgroundPainter]];
            return YES;
          }
        }
        if (alwaysUsePainter) {
          if ([((RAREUIColor *) nil_chk([RAREUIColor WHITE])) isEqual:sc]) {
            [((RAREPaintBucket *) nil_chk(pb)) setBackgroundPainterWithRAREiBackgroundPainter:RAREColorUtils_whitePainter_];
          }
          else if ([sc isEqual:RAREColorUtils_background_]) {
            [((RAREPaintBucket *) nil_chk(pb)) setBackgroundPainterWithRAREiBackgroundPainter:RAREColorUtils_controlPainter_];
          }
          else {
            [((RAREPaintBucket *) nil_chk(pb)) setBackgroundPainterWithRAREiBackgroundPainter:[[RAREUISimpleBackgroundPainter alloc] initWithRAREUIColor:sc]];
          }
        }
        else {
          [((RAREPaintBucket *) nil_chk(pb)) setBackgroundColorWithRAREUIColor:sc];
        }
      }
      return YES;
    }
  }
  tok = [scanner findTokenWithBoolean:NO withBoolean:NO];
  if (tok != nil) {
    tok = [scanner trimWithIntArray:tok];
    if (tok != nil) {
      ec = [RAREColorUtils getColorWithCharArray:a withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1) withNSString:color];
    }
  }
  if ([scanner getLength] > 0) {
    id<JavaUtilList> l = [((JavaLangThreadLocal *) nil_chk(RAREColorUtils_perThreadList_)) get];
    [((id<JavaUtilList>) nil_chk(l)) clear];
    [l addWithId:sc];
    [l addWithId:ec];
    while ((tok = [scanner findTokenWithBoolean:NO withBoolean:NO]) != nil) {
      tok = [scanner trimWithIntArray:tok];
      if (tok != nil) {
        [l addWithId:[RAREColorUtils getColorWithCharArray:a withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1) withNSString:color]];
      }
      else {
        [l addWithId:nil];
      }
    }
    colors = [IOSObjectArray arrayWithLength:[l size] type:[IOSClass classWithClass:[RAREUIColor class]]];
    colors = [l toArrayWithNSObjectArray:colors];
  }
  else {
    colors = [IOSObjectArray arrayWithObjects:(id[]){ sc, ec } count:2 type:[IOSClass classWithClass:[RAREUIColor class]]];
  }
  RAREiGradientPainter_DirectionEnum *direction = [RAREiGradientPainter_DirectionEnum VERTICAL_TOP];
  RAREiGradientPainter_TypeEnum *type = [RAREiGradientPainter_TypeEnum LINEAR];
  int magnitude = 100;
  int clen = (int) [((IOSObjectArray *) nil_chk(colors)) count];
  float radius = 0;
  if (attrs != nil) {
    NSString *s = [attrs getWithId:@"type"];
    if (s != nil) {
      @try {
        [scanner resetWithNSString:s];
        (void) [((RAREUTCharScanner *) nil_chk([scanner unquoteWithBoolean:YES])) toUpperCase];
        type = [RAREiGradientPainter_TypeEnum valueOfWithNSString:[scanner getLeftOver]];
      }
      @catch (JavaLangException *e) {
        [RAREPlatform debugLogWithNSString:[RAREUTHelper expandStringWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.badGradientType"] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ s } count:1 type:[IOSClass classWithClass:[NSString class]]]]];
      }
    }
    s = [attrs getWithId:@"magnitude"];
    if (s != nil) {
      magnitude = [RAREUTSNumber intValueWithNSString:s];
      if (magnitude < 0) {
        magnitude = 100;
      }
    }
    s = [attrs getWithId:@"radius"];
    if (s != nil) {
      radius = [RAREUTSNumber floatValueWithNSString:s];
      if (radius < 0) {
        radius = 0;
      }
    }
    s = [attrs getWithId:@"direction"];
    if (s != nil) {
      @try {
        [scanner resetWithNSString:s];
        (void) [((RAREUTCharScanner *) nil_chk([scanner unquoteWithBoolean:YES])) toUpperCase];
        direction = [RAREiGradientPainter_DirectionEnum valueOfWithNSString:[scanner getLeftOver]];
      }
      @catch (JavaLangException *e) {
        [RAREPlatform debugLogWithNSString:[RAREUTHelper expandStringWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.badGradientDirection"] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ s } count:1 type:[IOSClass classWithClass:[NSString class]]]]];
      }
    }
    s = [attrs getWithId:@"distribution"];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      distribution = [IOSFloatArray arrayWithLength:clen];
      a = [s toCharArray];
      [scanner resetWithCharArray:a withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(a)) count] withBoolean:NO];
      (void) [scanner trim];
      int i = 0;
      int plen = 1;
      while (i < (int) [a count]) {
        if (IOSCharArray_Get(a, i++) == ',') {
          plen++;
        }
      }
      if (plen > clen) {
        i = 0;
      }
      else {
        i = clen - plen;
      }
      while ((tok = [scanner findTokenWithBoolean:NO withBoolean:NO]) != nil && (i < clen)) {
        tok = [scanner trimWithIntArray:tok];
        if (tok != nil) {
          (*IOSFloatArray_GetRef(distribution, i++)) = [RAREUTSNumber floatValueWithCharArray:a withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1) withBoolean:NO];
        }
      }
      (void) [scanner trim];
      if ((i < clen) || ([scanner getLength] > 0)) {
        [RAREPlatform debugLogWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.badLGDistributionLen"]];
      }
      float p = -1.0f;
      for (i = 0; i < clen; i++) {
        float f = IOSFloatArray_Get(distribution, i);
        if ((f <= p) || (f < 0.0f) || (f > 1.0f)) {
          if (f == p) {
            (*IOSFloatArray_GetRef(distribution, i)) = f + .001f;
          }
        }
        p = f;
      }
    }
  }
  if ((distribution == nil) && (clen > 1) && (clen < 5)) {
    distribution = IOSObjectArray_Get(nil_chk(RAREColorUtils_DISTRIBUTIONS_), clen - 2);
  }
  id<RAREiGradientPainter> gp = [[RAREUIBackgroundPainter alloc] initWithRAREiGradientPainter_TypeEnum:type withRAREiGradientPainter_DirectionEnum:direction withRAREUIColorArray:colors withFloatArray:distribution withInt:magnitude];
  if (radius > 0) {
    [gp setGradientRadiusWithFloat:radius];
  }
  [((RAREPaintBucket *) nil_chk(pb)) setBackgroundPainterWithRAREiBackgroundPainter:gp];
  [pb setBackgroundColorWithRAREUIColor:sc];
  return YES;
}

+ (IOSObjectArray *)createNamedShadesWithRAREUIColorArray:(IOSObjectArray *)a {
  int len = (a == nil) ? 0 : (int) [a count];
  if (len == 0) {
    return a;
  }
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(RAREColorUtils_colorMap_)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> e = [it next];
    RAREUIColor *nc = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
    for (int i = 0; i < len; i++) {
      RAREUIColor *c = IOSObjectArray_Get(nil_chk(a), i);
      if ([((RAREUIColor *) nil_chk(c)) isEqual:nc]) {
        (void) IOSObjectArray_Set(a, i, [[RAREUIColorShade alloc] initWithRAREUIColor:c withNSString:[e getKey]]);
        break;
      }
    }
  }
  return a;
}

+ (int)darkerWithInt:(int)color {
  int red = [JavaLangMath maxWithInt:(int) ([RAREColorUtils getRedWithInt:color] * RAREColorUtils_FACTOR) withInt:0];
  int green = [JavaLangMath maxWithInt:(int) ([RAREColorUtils getGreenWithInt:color] * RAREColorUtils_FACTOR) withInt:0];
  int blue = [JavaLangMath maxWithInt:(int) ([RAREColorUtils getBlueWithInt:color] * RAREColorUtils_FACTOR) withInt:0];
  return [RAREColorUtils getARGBWithInt:red withInt:green withInt:blue withInt:[RAREColorUtils getAlphaWithInt:color]];
}

+ (float)hueWithInt:(int)color {
  int r = (color >> 16) & (int) 0xFF;
  int g = (color >> 8) & (int) 0xFF;
  int b = color & (int) 0xFF;
  int V = [JavaLangMath maxWithInt:b withInt:[JavaLangMath maxWithInt:r withInt:g]];
  int temp = [JavaLangMath minWithInt:b withInt:[JavaLangMath minWithInt:r withInt:g]];
  float H;
  if (V == temp) {
    H = 0;
  }
  else {
    float vtemp = V - temp;
    float cr = (V - r) / vtemp;
    float cg = (V - g) / vtemp;
    float cb = (V - b) / vtemp;
    if (r == V) {
      H = cb - cg;
    }
    else if (g == V) {
      H = 2 + cr - cb;
    }
    else {
      H = 4 + cg - cr;
    }
    H /= 6.f;
    if (H < 0) {
      H++;
    }
  }
  return H;
}

+ (float)saturationWithInt:(int)color {
  int r = (color >> 16) & (int) 0xFF;
  int g = (color >> 8) & (int) 0xFF;
  int b = color & (int) 0xFF;
  int V = [JavaLangMath maxWithInt:b withInt:[JavaLangMath maxWithInt:r withInt:g]];
  int temp = [JavaLangMath minWithInt:b withInt:[JavaLangMath minWithInt:r withInt:g]];
  float S;
  if (V == temp) {
    S = 0;
  }
  else {
    S = (V - temp) / (float) V;
  }
  return S;
}

+ (void)updateColorWithNSString:(NSString *)name
                         withId:(id)value {
  RAREUIColor *c = [((JavaUtilHashMap *) nil_chk(RAREColorUtils_colorMap_)) getWithId:name];
  RAREUIColor *nc = ([value isKindOfClass:[RAREUIColor class]]) ? (RAREUIColor *) check_class_cast(value, [RAREUIColor class]) : [RAREColorUtils getColorWithNSString:(NSString *) check_class_cast(value, [NSString class])];
  [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:name withId:nc];
  if (!([c isKindOfClass:[RAREUIColorShade class]])) {
    (void) [RAREColorUtils_colorMap_ putWithId:name withId:nc];
    return;
  }
  RAREUIColorShade *cs = (RAREUIColorShade *) check_class_cast(c, [RAREUIColorShade class]);
  if ([nc isKindOfClass:[RAREUIColorShade class]]) {
    [((RAREUIColorShade *) nil_chk(cs)) copyShadeWithRAREUIColorShade:((RAREUIColorShade *) check_class_cast(nc, [RAREUIColorShade class]))];
  }
  else {
    [((RAREUIColorShade *) nil_chk(cs)) setToColorWithRAREUIColor:nc];
  }
}

+ (int)setAlphaWithInt:(int)argb
               withInt:(int)alpha {
  return ((alpha & (int) 0xFF) << 24) | (argb & (int) 0x00ffffff);
}

+ (void)setBaseColors {
  RAREColorUtils_foreground_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.foreground"];
  RAREColorUtils_background_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.background"];
  RAREColorUtils_controlPainter_ = [[RAREUISimpleBackgroundPainter alloc] initWithRAREUIColor:RAREColorUtils_background_];
}

+ (int)getARGBWithInt:(int)r
              withInt:(int)g
              withInt:(int)b
              withInt:(int)a {
  return (a << 24) | (r << 16) | (g << 8) | b;
}

+ (int)getAlphaWithInt:(int)color {
  return (int) (((unsigned int) color) >> 24) & (int) 0xFF;
}

+ (NSString *)shadeKeyToStringWithRAREColorUtils_ShadeEnum:(RAREColorUtils_ShadeEnum *)shade
                                              withNSString:(NSString *)colorKey
                                                   withInt:(int)lumAdjustment
                                                   withInt:(int)alpha {
  switch ([shade ordinal]) {
    case RAREColorUtils_Shade_DARKER:
    return [NSString stringWithFormat:@"%@~darker", colorKey];
    case RAREColorUtils_Shade_DARKER_DARKER:
    return [NSString stringWithFormat:@"%@~darker_darker", colorKey];
    case RAREColorUtils_Shade_BRIGHTER:
    return [NSString stringWithFormat:@"%@~brighter", colorKey];
    case RAREColorUtils_Shade_BRIGHTER_BRIGHTER:
    return [NSString stringWithFormat:@"%@~brighter_brighter", colorKey];
    case RAREColorUtils_Shade_LUM_ADJUSTMENT:
    lumAdjustment = [JavaLangMath roundWithFloat:lumAdjustment * 100.0f / 255.0f] % 101;
    if (lumAdjustment > 0) {
      return [NSString stringWithFormat:@"%@+%d", colorKey, lumAdjustment];
    }
    return [NSString stringWithFormat:@"%@%d", colorKey, lumAdjustment];
    case RAREColorUtils_Shade_ALPHA:
    alpha = alpha * 100 / 255;
    return [NSString stringWithFormat:@"%@@%d", colorKey, alpha];
    default:
    return colorKey;
  }
}

+ (RAREUIColor *)getBackground {
  if (RAREColorUtils_background_ == nil) {
    RAREColorUtils_background_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.background"];
  }
  return RAREColorUtils_background_;
}

+ (RAREPaintBucket *)getBackgroundBucket {
  if (RAREColorUtils_backgroundBucket_ == nil) {
    RAREColorUtils_backgroundBucket_ = [[RAREPaintBucket alloc] initWithRAREUIColor:[RAREColorUtils getBackground]];
  }
  return RAREColorUtils_backgroundBucket_;
}

+ (RAREUIColor *)getBackgroundColorWithSPOTPrintableString:(SPOTPrintableString *)bgColor {
  RAREPaintBucket *pb = RAREColorUtils_paintBucket_;
  [((RAREPaintBucket *) nil_chk(pb)) empty];
  if ([RAREColorUtils configureBackgroundPainterWithRAREPaintBucket:pb withNSString:[((SPOTPrintableString *) nil_chk(bgColor)) getValue] withJavaUtilMap:[bgColor spot_getAttributesEx] withBoolean:NO]) {
    return [pb getBackgroundShade];
  }
  return nil;
}

+ (RAREUIColor *)getBackgroundColorWithNSString:(NSString *)color {
  if (color == nil) {
    return nil;
  }
  RAREPaintBucket *pb = [RAREColorUtils getPaintBucketWithNSString:color withRAREPaintBucket:RAREColorUtils_paintBucket_ withBoolean:YES];
  if (pb != nil) {
    return [pb getBackgroundShade];
  }
  return nil;
}

+ (RAREUIColor *)getBackgroundColorWithNSString:(NSString *)color
                                    withBoolean:(BOOL)alwaysUsePainter {
  if (color == nil) {
    return nil;
  }
  RAREPaintBucket *pb = [RAREColorUtils getPaintBucketWithNSString:color withRAREPaintBucket:RAREColorUtils_paintBucket_ withBoolean:alwaysUsePainter];
  if (pb != nil) {
    return [pb getBackgroundShade];
  }
  return nil;
}

+ (id<RAREiBackgroundPainter>)getBackgroundPainterWithSPOTPrintableString:(SPOTPrintableString *)bgColor {
  RAREPaintBucket *pb = RAREColorUtils_paintBucket_;
  [((RAREPaintBucket *) nil_chk(pb)) empty];
  if ([RAREColorUtils configureBackgroundPainterWithRAREPaintBucket:pb withNSString:[((SPOTPrintableString *) nil_chk(bgColor)) getValue] withJavaUtilMap:[bgColor spot_getAttributesEx] withBoolean:NO]) {
    id<RAREiBackgroundPainter> bp = [pb getBackgroundPainter];
    if ((bp == nil) || ([pb getBackgroundColor] != nil)) {
      bp = [[RAREUISimpleBackgroundPainter alloc] initWithRAREUIColor:[pb getBackgroundColor]];
    }
    return bp;
  }
  return nil;
}

+ (id<RAREiBackgroundPainter>)getBackgroundPainterWithNSString:(NSString *)color {
  if (color == nil) {
    return nil;
  }
  RAREPaintBucket *pb = [RAREColorUtils getPaintBucketWithNSString:color withRAREPaintBucket:RAREColorUtils_paintBucket_ withBoolean:YES];
  return [((RAREPaintBucket *) nil_chk(pb)) getBackgroundPainter];
}

+ (int)getBlueWithInt:(int)color {
  return color & (int) 0xFF;
}

+ (RAREUIColor *)getColorWithNSString:(NSString *)color {
  if (color == nil) {
    return nil;
  }
  RAREUIColor *c = [((JavaUtilHashMap *) nil_chk(RAREColorUtils_colorMap_)) getWithId:[((NSString *) nil_chk(color)) lowercaseStringWithJRELocale:[JavaUtilLocale US]]];
  if (c == nil) {
    c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:color];
  }
  if (c != nil) {
    return c;
  }
  if ([color indexOf:'='] != -1) {
    return [RAREaPlatformHelper getColorStateListWithJavaUtilMap:[RAREColorUtils getStateListMapWithNSString:color]];
  }
  if ([color indexOf:','] != -1) {
    return [RAREColorUtils getBackgroundColorWithNSString:color withBoolean:NO];
  }
  IOSCharArray *a = [color toCharArray];
  c = [RAREColorUtils getColorWithCharArray:a withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(a)) count] withNSString:color];
  if (c == nil) {
    if ([color isEqual:@"null"]) {
      return [RAREUIColor TRANSPARENT];
    }
    c = [RAREaPlatformHelper getResourceColorWithNSString:color];
  }
  if (c == nil) {
    c = [RAREColorUtils getBackground];
    [RAREPlatform debugLogWithNSString:[NSString stringWithFormat:@"Undefined color definition: %@", color]];
  }
  return c;
}

+ (RAREUIColor *)getColorWithCharArray:(IOSCharArray *)color
                               withInt:(int)pos
                               withInt:(int)len
                          withNSString:(NSString *)source {
  if ((color == nil) || (len == 0)) {
    return nil;
  }
  RAREColorUtils_ShadeEnum *shade = nil;
  int nlen = len + pos;
  unichar ch;
  int i;
  int inc = 0;
  int alpha = -1;
  BOOL rgb = NO;
  BOOL dynamic = NO;
  for (i = pos; i < nlen; i++) {
    ch = IOSCharArray_Get(nil_chk(color), i);
    if (ch == '(') {
      pos = i;
      rgb = YES;
      continue;
    }
    if (ch == '-') {
      inc = [RAREUTSNumber intValueWithCharArray:color withInt:i withInt:nlen - i withBoolean:NO];
      break;
    }
    if (ch == '+') {
      inc = [RAREUTSNumber intValueWithCharArray:color withInt:i + 1 withInt:nlen - i - 1 withBoolean:NO];
      break;
    }
    if (ch == '^') {
      inc = [RAREUTSNumber intValueWithCharArray:color withInt:i + 1 withInt:nlen - i - 1 withBoolean:NO];
      dynamic = YES;
      break;
    }
    if (ch == ',') {
      rgb = YES;
    }
    if (ch == '@') {
      alpha = [RAREUTSNumber intValueWithCharArray:color withInt:i + 1 withInt:nlen - i - 1 withBoolean:NO];
      break;
    }
    if (ch == '~') {
      @try {
        shade = [RAREColorUtils_ShadeEnum valueOfWithNSString:[[NSString stringWithCharacters:color offset:i + 1 length:nlen - i - 1] uppercaseStringWithJRELocale:[JavaUtilLocale US]]];
      }
      @catch (JavaLangException *e) {
        [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
      }
      break;
    }
  }
  RAREUIColor *c = nil;
  if ((IOSCharArray_Get(nil_chk(color), pos) != '#') && !rgb) {
    NSString *s = source;
    if ((s == nil) || ([s sequenceLength] != len) || (i - pos != len) || (i != 0)) {
      s = [NSString stringWithCharacters:color offset:pos length:i - pos];
    }
    c = [((JavaUtilHashMap *) nil_chk(RAREColorUtils_colorMap_)) getWithId:s];
    if (c == nil) {
      c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:s];
    }
    if (c == nil) {
      c = [RAREaPlatformHelper getResourceColorWithNSString:s];
    }
  }
  if (c == nil) {
    if (rgb) {
      c = [RAREConversions colorFromRGBStringWithCharArray:color withInt:pos withInt:i - pos];
    }
    else {
      c = [RAREConversions colorFromHexStringWithCharArray:color withInt:pos withInt:i - pos];
    }
  }
  if ((c != nil) && (inc != 0)) {
    inc = [JavaLangMath roundWithFloat:(255.0f * inc) / 100.0f] % 256;
    if (dynamic) {
      if (![c isDarkColor]) {
        inc = -inc;
      }
    }
    c = [c lightWithInt:inc];
  }
  else if ((c != nil) && (alpha > 0)) {
    alpha = (255 * alpha) / 100;
    c = [c alphaWithInt:alpha];
  }
  else if ((c != nil) && (shade != nil)) {
    c = [[RAREUIColorShade alloc] initWithRAREUIColor:c withRAREColorUtils_ShadeEnum:shade];
  }
  return c;
}

+ (IOSObjectArray *)getColorsWithNSString:(NSString *)color
                                  withInt:(int)min {
  id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:color withChar:',' withBoolean:YES];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  min = (min > len) ? min : len;
  IOSObjectArray *c = [IOSObjectArray arrayWithLength:min type:[IOSClass classWithClass:[RAREUIColor class]]];
  for (int i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(c, i, [RAREColorUtils getColorWithNSString:[list getWithInt:i]]);
  }
  return c;
}

+ (RAREUIColor *)getControlDkGradient {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.backgroundDkGradient"];
}

+ (RAREUIColor *)getControlDkShadow {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.backgroundDkShadow"];
}

+ (RAREUIColor *)getControlHighlight {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.backgroundHighlight"];
}

+ (RAREUIColor *)getControlLtGradient {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.backgroundLtGradient"];
}

+ (RAREUIColor *)getControlLtHighlight {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.backgroundLtHighlight"];
}

+ (RAREUIColor *)getControlLtShadow {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.backgroundLtShadow"];
}

+ (RAREUIColor *)getControlShadow {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.backgroundShadow"];
}

+ (RAREUIColor *)getDisabledForeground {
  if (RAREColorUtils_disabledForeground_ == nil) {
    RAREColorUtils_disabledForeground_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.disabledForeground"];
  }
  return RAREColorUtils_disabledForeground_;
}

+ (RAREUIColor *)getDisabledVersionWithRAREUIColor:(RAREUIColor *)fg {
  return [((RAREUIColor *) nil_chk(fg)) alphaWithInt:128];
}

+ (RAREUIColor *)getForeground {
  if (RAREColorUtils_foreground_ == nil) {
    RAREColorUtils_foreground_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.foreground"];
  }
  return RAREColorUtils_foreground_;
}

+ (RAREUIColor *)getFromColorMapWithNSString:(NSString *)color {
  return [((JavaUtilHashMap *) nil_chk(RAREColorUtils_colorMap_)) getWithId:color];
}

+ (int)getGreenWithInt:(int)color {
  return (color >> 8) & (int) 0xFF;
}

+ (RAREUIColor *)getListBackground {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.List.background"];
}

+ (RAREUIColor *)getListDisabledForeground {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.List.disabledForeground"];
}

+ (RAREUIColor *)getListDividerColor {
  RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.List.dividerLineColor"];
  if (c == nil) {
    if (c == nil) {
      c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.LineBorder.color"];
      if (c == nil) {
        c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.backgroundShadow"];
      }
    }
  }
  if (c == nil) {
    c = [RAREUIColor GRAY];
  }
  return c;
}

+ (RAREUIColor *)getListForeground {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.List.foreground"];
}

+ (RAREUIColor *)getNamedColorWithNSString:(NSString *)name {
  if (name == nil) {
    return nil;
  }
  RAREUIColor *c = [((JavaUtilHashMap *) nil_chk(RAREColorUtils_colorMap_)) getWithId:[((NSString *) nil_chk(name)) lowercaseStringWithJRELocale:[JavaUtilLocale US]]];
  if (c == nil) {
    c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:name];
  }
  return c;
}

+ (RAREPaintBucket *)getPaintBucketWithSPOTPrintableString:(SPOTPrintableString *)color {
  if ((color == nil) || ([color getValue] == nil)) {
    return nil;
  }
  RAREPaintBucket *pb = RAREColorUtils_paintBucket_;
  [RAREColorUtils configureBackgroundPainterWithRAREPaintBucket:pb withSPOTPrintableString:color];
  if ([((RAREPaintBucket *) nil_chk(pb)) isEmpty]) {
    return nil;
  }
  return (RAREPaintBucket *) check_class_cast([pb clone], [RAREPaintBucket class]);
}

+ (RAREPaintBucket *)getPaintBucketWithNSString:(NSString *)color {
  if ((color == nil) || ([color sequenceLength] == 0)) {
    return nil;
  }
  RAREPaintBucket *pb = [RAREColorUtils getPaintBucketWithNSString:color withRAREPaintBucket:RAREColorUtils_paintBucket_ withBoolean:NO];
  if ([((RAREPaintBucket *) nil_chk(pb)) isEmpty]) {
    return nil;
  }
  return (RAREPaintBucket *) check_class_cast([pb clone], [RAREPaintBucket class]);
}

+ (id<RAREiPlatformPainter>)getPainterWithRAREUIColor:(RAREUIColor *)c {
  if ([c isKindOfClass:[RAREUIColorShade class]]) {
    return [((RAREUIColorShade *) check_class_cast(c, [RAREUIColorShade class])) getBackgroundPainter];
  }
  return nil;
}

+ (RAREUIColor *)getPressedVersionWithRAREUIColor:(RAREUIColor *)fg {
  return [((RAREUIColor *) nil_chk(fg)) alphaWithInt:132];
}

+ (int)getRedWithInt:(int)color {
  return (color >> 16) & (int) 0xFF;
}

+ (RAREUIColorShade *)getSimpleColorStateListWithJavaUtilMap:(id<JavaUtilMap>)map {
  if (map == nil) {
    return nil;
  }
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk(RAREColorUtils_perThreadScanner_)) get];
  return [[RAREUIColorShade alloc] initWithRARESimpleColorStateList:[RARESimpleColorStateList createWithRAREUTCharScanner:sc withJavaUtilMap:map]];
}

+ (RAREUIColorShade *)getSimpleDrawableStateListWithJavaUtilMap:(id<JavaUtilMap>)map {
  if (map == nil) {
    return nil;
  }
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk(RAREColorUtils_perThreadScanner_)) get];
  NSString *color;
  id<JavaUtilMap_Entry> e;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) iterator];
  RAREPaintBucket *c;
  IOSIntArray *a;
  id<JavaUtilList> list = [[JavaUtilArrayList alloc] initWithInt:3];
  RAREPainterHolder *ph = [[RAREPainterHolder alloc] init];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    e = [it next];
    color = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
    c = [RAREColorUtils getPaintBucketWithNSString:color];
    color = [e getKey];
    [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:color];
    (void) [sc toLowerCase];
    if ([@"normal" isEqual:color]) {
      ph->normalPainter_ = c;
      continue;
    }
    list = [sc getTokensWithChar:',' withBoolean:YES withJavaUtilList:list];
    a = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(list)) size]];
    for (int n = 0; n < (int) [a count]; n++) {
      NSString *s = [list getWithInt:n];
      if ([((NSString *) nil_chk(s)) isEqual:@"disabled"] || [s hasSuffix:@"not_enabled"]) {
        ph->disabledPainter_ = c;
      }
      else if ([s isEqual:@"selected"]) {
        ph->selectedPainter_ = c;
      }
      else if ([s isEqual:@"selected_disabled"] || [s isEqual:@"disabled_selected"]) {
        ph->disabledSelectedPainter_ = c;
      }
      else if ([s isEqual:@"rollover"]) {
        ph->rolloverPainter_ = c;
      }
      else if ([s isEqual:@"pressed"]) {
        ph->pressedPainter_ = c;
      }
    }
  }
  RAREUIColor *bg = (ph->normalPainter_ == nil) ? nil : [ph->normalPainter_ getBackgroundColor];
  if (bg == nil) {
    bg = RAREColorUtils_TRANSPARENT_COLOR_;
  }
  return [[RAREUIColorShade alloc] initWithRAREUIColor:bg withRAREPainterHolder:ph];
}

+ (IOSFloatArray *)getStandardDistrubutionWithInt:(int)colors {
  colors -= 2;
  if ((colors > -1) && (colors < (int) [((IOSObjectArray *) nil_chk(RAREColorUtils_DISTRIBUTIONS_)) count])) {
    return IOSObjectArray_Get(RAREColorUtils_DISTRIBUTIONS_, colors);
  }
  return nil;
}

+ (id<JavaUtilMap>)getStateListMapWithNSString:(NSString *)color {
  return [RAREUTCharScanner parseOptionStringExWithNSString:color withChar:';'];
}

+ (RAREUIColor *)getTableGridColor {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Table.gridColor"];
}

+ (RAREUIColor *)getTextHilight {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.textHighlight"];
}

+ (RAREUIColor *)getTextHilightText {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.textHighlightText"];
}

+ (BOOL)isStandardDistributionWithFloatArray:(IOSFloatArray *)distributions {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(RAREColorUtils_DISTRIBUTIONS_)) count]; i++) {
    if (distributions == IOSObjectArray_Get(RAREColorUtils_DISTRIBUTIONS_, i)) {
      return YES;
    }
  }
  return NO;
}

+ (float)Hue_2_RGBWithFloat:(float)v1
                  withFloat:(float)v2
                  withFloat:(float)vH {
  if (vH < 0.0f) {
    vH += 1.0f;
  }
  if (vH > 1.0f) {
    vH -= 1.0f;
  }
  if ((6.0f * vH) < 1.0f) {
    return v1 + (v2 - v1) * 6.0f * vH;
  }
  if ((2.0f * vH) < 1.0f) {
    return v2;
  }
  if ((3.0f * vH) < 2.0f) {
    return v1 + (v2 - v1) * (RAREColorUtils_twoThirds - vH) * 6.0f;
  }
  return v1;
}

+ (RAREPaintBucket *)getPaintBucketWithNSString:(NSString *)color
                            withRAREPaintBucket:(RAREPaintBucket *)pb
                                    withBoolean:(BOOL)alwaysUsePainter {
  if (color == nil) {
    return nil;
  }
  [((RAREPaintBucket *) nil_chk(pb)) empty];
  id<JavaUtilMap> map = nil;
  int n = [((NSString *) nil_chk(color)) indexOf:'['];
  if (n != -1) {
    int p = [color indexOf:']'];
    if (p > n) {
      NSString *s = [color substring:n + 1 endIndex:p];
      color = [color substring:0 endIndex:n];
      map = [RAREUTCharScanner parseOptionStringExWithNSString:s withChar:','];
    }
  }
  [RAREColorUtils configureBackgroundPainterWithRAREPaintBucket:pb withNSString:color withJavaUtilMap:map withBoolean:alwaysUsePainter];
  return pb;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [RAREColorUtils class]) {
    RAREColorUtils_TRANSPARENT_COLOR_ = [RAREUIColor TRANSPARENT];
    RAREColorUtils_NULL_COLOR_ = [[RAREUIColor alloc] initWithInt:255 withInt:255 withInt:255 withInt:0];
    RAREColorUtils_DISABLED_TRANSPARENT_COLOR_ = [[RAREUIColor alloc] initWithInt:0 withInt:0 withInt:0 withInt:128];
    RAREColorUtils_DISTRIBUTIONS_ = [IOSObjectArray arrayWithObjects:(id[]){ [IOSFloatArray arrayWithFloats:(float[]){ 0.0f, 1.0f } count:2], [IOSFloatArray arrayWithFloats:(float[]){ 0.0f, .5f, 1.0f } count:3], [IOSFloatArray arrayWithFloats:(float[]){ 0.0f, .499f, .5f, 1.0f } count:4] } count:3 type:[IOSFloatArray iosClass]];
    RAREColorUtils_colorTokens_ = [IOSCharArray arrayWithCharacters:(unichar[]){ ',', '|' } count:2];
    RAREColorUtils_paintBucket_ = [[RAREPaintBucket alloc] init];
    RAREColorUtils_colorMap_ = [[JavaUtilHashMap alloc] init];
    RAREColorUtils_perThreadScanner_ = [[RAREColorUtils_$1 alloc] init];
    RAREColorUtils_perThreadList_ = [[RAREColorUtils_$2 alloc] init];
    RAREColorUtils_whitePainter_ = [[RAREUISimpleBackgroundPainter alloc] initWithRAREUIColor:[RAREUIColor WHITE]];
    {
      (void) [RAREColorUtils_colorMap_ putWithId:@"transparent" withId:RAREColorUtils_TRANSPARENT_COLOR_];
      (void) [RAREColorUtils_colorMap_ putWithId:@"null" withId:RAREColorUtils_TRANSPARENT_COLOR_];
      (void) [RAREColorUtils_colorMap_ putWithId:@"aliceblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff0f8ff]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"antiquewhite" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffaebd7]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"aqua" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff00ffff]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"aquamarine" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff7fffd4]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"azure" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff0ffff]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"beige" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff5f5dc]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"bisque" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffe4c4]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"black" withId:[RAREUIColor BLACK]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"blanchedalmond" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffebcd]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"blue" withId:[[RAREUIColor alloc] initWithInt:0 withInt:0 withInt:255]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"blueviolet" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff8a2be2]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"brown" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff804000]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"burlywood" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffdeb887]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"cadetblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff5f9ea0]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"chartreuse" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff7fff00]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"chocolate" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffd2691e]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"coral" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffff7f50]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"cornflowerblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff6495ed]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"cornsilk" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffff8dc]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"crimson" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffdc143c]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"cyan" withId:[RAREUIColor CYAN]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff00008b]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkcyan" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff008b8b]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkgoldenrod" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffb8860b]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkgray" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffa9a9a9]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkgreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff006400]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkkhaki" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffbdb76b]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkmagenta" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff8b008b]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkolivegreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff556b2f]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkorange" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffff8c00]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkorchid" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff9932cc]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkred" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff8b0000]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darksalmon" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffe9967a]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkseagreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff8fbc8f]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkslateblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff483d8b]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkslategray" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff2f4f4f]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkturquoise" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff00ced1]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"darkviolet" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff9400d3]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"deeppink" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffff1493]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"deepskyblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff00bfff]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"dimgray" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff696969]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"dodgerblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff1e90ff]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"firebrick" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffb22222]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"floralwhite" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffffaf0]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"forestgreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff228b22]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"fuchsia" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffff00ff]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"gainsboro" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffdcdcdc]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"ghostwhite" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff8f8ff]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"gold" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffd700]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"goldenrod" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffdaa520]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"gray" withId:[RAREUIColor GRAY]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"green" withId:[RAREUIColor GREEN]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"greenyellow" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffadff2f]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"honeydew" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff0fff0]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"hotpink" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffff69b4]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"indianred" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffcd5c5c]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"indigo" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff4b0082]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"ivory" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffffff0]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"khaki" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff0e68c]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lavender" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffe6e6fa]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lavenderblush" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffff0f5]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lawngreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff7cfc00]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lemonchiffon" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffffacd]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffadd8e6]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightcoral" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff08080]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightcyan" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffe0ffff]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightgoldenrodyellow" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffafad2]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightgrey" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffd3d3d3]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightgreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff90ee90]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightpink" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffb6c1]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightsalmon" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffa07a]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightseagreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff20b2aa]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightskyblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff87cefa]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightslategray" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff778899]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightsteelblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffb0c4de]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lightyellow" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffffe0]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"lime" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff00ff00]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"limegreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff32cd32]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"linen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffaf0e6]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"magenta" withId:[RAREUIColor MAGENTA]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"maroon" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff800000]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mediumaquamarine" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff66cdaa]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mediumblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff0000cd]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mediumorchid" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffba55d3]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mediumpurple" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff9370d8]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mediumseagreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff3cb371]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mediumslateblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff7b68ee]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mediumspringgreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff00fa9a]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mediumturquoise" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff48d1cc]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mediumvioletred" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffc71585]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"midnightblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff191970]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mintcream" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff5fffa]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"mistyrose" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffe4e1]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"moccasin" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffe4b5]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"navajowhite" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffdead]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"navy" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff000080]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"oldlace" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffdf5e6]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"olive" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff808000]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"olivedrab" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff6b8e23]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"orange" withId:[RAREUIColor ORANGE]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"orangered" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffff4500]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"orchid" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffda70d6]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"palegoldenrod" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffeee8aa]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"palegreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff98fb98]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"paleturquoise" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffafeeee]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"palevioletred" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffd87093]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"papayawhip" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffefd5]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"peachpuff" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffffdab9]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"peru" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffcd853f]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"pink" withId:[RAREUIColor PINK]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"plum" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffdda0dd]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"powderblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffb0e0e6]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"purple" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff800080]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"red" withId:[RAREUIColor RED]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"rosybrown" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffbc8f8f]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"royalblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff4169e1]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"saddlebrown" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff8b4513]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"salmon" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffa8072]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"sandybrown" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff4a460]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"seagreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff2e8b57]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"seashell" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffff5ee]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"sienna" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffa0522d]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"silver" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffc0c0c0]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"skyblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff87ceeb]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"slateblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff6a5acd]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"slategray" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff708090]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"snow" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfffffafa]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"springgreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff00ff7f]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"steelblue" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff4682b4]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"tan" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffd2b48c]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"teal" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff008080]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"thistle" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffd8bfd8]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"tomato" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffff6347]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"turquoise" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff40e0d0]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"violet" withId:[[RAREUIColor alloc] initWithInt:(int) 0xffee82ee]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"wheat" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff5deb3]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"white" withId:[RAREUIColor WHITE]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"whitesmoke" withId:[[RAREUIColor alloc] initWithInt:(int) 0xfff5f5f5]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"yellow" withId:[RAREUIColor YELLOW]];
      (void) [RAREColorUtils_colorMap_ putWithId:@"yellowgreen" withId:[[RAREUIColor alloc] initWithInt:(int) 0xff9acd32]];
    }
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "configureWithRAREiWidget:withRARESPOTGridCell:withRAREPaintBucket:", NULL, "LRAREPaintBucket", 0x9, NULL },
    { "configureBackgroundPainterWithRAREPaintBucket:withNSString:withJavaUtilMap:withBoolean:", NULL, "Z", 0x9, NULL },
    { "createNamedShadesWithRAREUIColorArray:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "shadeKeyToStringWithRAREColorUtils_ShadeEnum:withNSString:withInt:withInt:", NULL, "LNSString", 0x9, NULL },
    { "getBackground", NULL, "LRAREUIColor", 0x9, NULL },
    { "getBackgroundBucket", NULL, "LRAREPaintBucket", 0x9, NULL },
    { "getBackgroundColorWithSPOTPrintableString:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getBackgroundColorWithNSString:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getBackgroundColorWithNSString:withBoolean:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getBackgroundPainterWithSPOTPrintableString:", NULL, "LRAREiBackgroundPainter", 0x9, NULL },
    { "getBackgroundPainterWithNSString:", NULL, "LRAREiBackgroundPainter", 0x9, NULL },
    { "getColorWithNSString:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getColorWithCharArray:withInt:withInt:withNSString:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getColorsWithNSString:withInt:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "getControlDkGradient", NULL, "LRAREUIColor", 0x9, NULL },
    { "getControlDkShadow", NULL, "LRAREUIColor", 0x9, NULL },
    { "getControlHighlight", NULL, "LRAREUIColor", 0x9, NULL },
    { "getControlLtGradient", NULL, "LRAREUIColor", 0x9, NULL },
    { "getControlLtHighlight", NULL, "LRAREUIColor", 0x9, NULL },
    { "getControlLtShadow", NULL, "LRAREUIColor", 0x9, NULL },
    { "getControlShadow", NULL, "LRAREUIColor", 0x9, NULL },
    { "getDisabledForeground", NULL, "LRAREUIColor", 0x9, NULL },
    { "getDisabledVersionWithRAREUIColor:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getForeground", NULL, "LRAREUIColor", 0x9, NULL },
    { "getFromColorMapWithNSString:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getListBackground", NULL, "LRAREUIColor", 0x9, NULL },
    { "getListDisabledForeground", NULL, "LRAREUIColor", 0x9, NULL },
    { "getListDividerColor", NULL, "LRAREUIColor", 0x9, NULL },
    { "getListForeground", NULL, "LRAREUIColor", 0x9, NULL },
    { "getNamedColorWithNSString:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getPaintBucketWithSPOTPrintableString:", NULL, "LRAREPaintBucket", 0x9, NULL },
    { "getPaintBucketWithNSString:", NULL, "LRAREPaintBucket", 0x9, NULL },
    { "getPainterWithRAREUIColor:", NULL, "LRAREiPlatformPainter", 0x9, NULL },
    { "getPressedVersionWithRAREUIColor:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getSimpleColorStateListWithJavaUtilMap:", NULL, "LRAREUIColorShade", 0x9, NULL },
    { "getSimpleDrawableStateListWithJavaUtilMap:", NULL, "LRAREUIColorShade", 0x9, NULL },
    { "getStandardDistrubutionWithInt:", NULL, "LIOSFloatArray", 0x9, NULL },
    { "getStateListMapWithNSString:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "getTableGridColor", NULL, "LRAREUIColor", 0x9, NULL },
    { "getTextHilight", NULL, "LRAREUIColor", 0x9, NULL },
    { "getTextHilightText", NULL, "LRAREUIColor", 0x9, NULL },
    { "isStandardDistributionWithFloatArray:", NULL, "Z", 0x9, NULL },
    { "Hue_2_RGBWithFloat:withFloat:withFloat:", NULL, "F", 0xa, NULL },
    { "getPaintBucketWithNSString:withRAREPaintBucket:withBoolean:", NULL, "LRAREPaintBucket", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "KEEP_COLOR_KEYS_", NULL, 0x9, "LJavaLangBoolean" },
    { "KEEP_COLOR_KEYS_KEY_", NULL, 0x19, "LNSString" },
    { "TRANSPARENT_COLOR_", NULL, 0x19, "LRAREUIColor" },
    { "NULL_COLOR_", NULL, 0x19, "LRAREUIColor" },
    { "DISABLED_TRANSPARENT_COLOR_", NULL, 0x9, "LRAREUIColor" },
    { "NULL_BGPAINTER_", NULL, 0x9, "LRAREiBackgroundPainter" },
    { "background_", NULL, 0x8, "LRAREUIColor" },
    { "controlPainter_", NULL, 0x8, "LRAREUISimpleBackgroundPainter" },
    { "foreground_", NULL, 0x8, "LRAREUIColor" },
    { "DISTRIBUTIONS_", NULL, 0x1a, "LIOSObjectArray" },
    { "FACTOR_", NULL, 0x1a, "D" },
    { "colorTokens_", NULL, 0x1a, "LIOSCharArray" },
    { "oneThird_", NULL, 0x1a, "F" },
    { "paintBucket_", NULL, 0xa, "LRAREPaintBucket" },
    { "colorMap_", NULL, 0x1a, "LJavaUtilHashMap" },
    { "perThreadScanner_", NULL, 0x1a, "LJavaLangThreadLocal" },
    { "perThreadList_", NULL, 0x1a, "LJavaLangThreadLocal" },
    { "twoThirds_", NULL, 0x1a, "F" },
    { "whitePainter_", NULL, 0x8, "LRAREUISimpleBackgroundPainter" },
    { "backgroundBucket_", NULL, 0xa, "LRAREPaintBucket" },
    { "disabledForeground_", NULL, 0xa, "LRAREUIColor" },
  };
  static J2ObjcClassInfo _RAREColorUtils = { "ColorUtils", "com.appnativa.rare.ui", NULL, 0x1, 44, methods, 21, fields, 0, NULL};
  return &_RAREColorUtils;
}

@end

static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_DARKER;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_DARKER_DARKER;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_BRIGHTER;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_BRIGHTER_BRIGHTER;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_LUM_ADJUSTMENT;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_DYN_LUM_ADJUSTMENT;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_ALPHA;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_UIMANAGER;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_BGPAINT;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_COLOR_LIST;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_DRAWABLE_LIST;
static RAREColorUtils_ShadeEnum *RAREColorUtils_ShadeEnum_DRAWABLE;
IOSObjectArray *RAREColorUtils_ShadeEnum_values;

@implementation RAREColorUtils_ShadeEnum

+ (RAREColorUtils_ShadeEnum *)DARKER {
  return RAREColorUtils_ShadeEnum_DARKER;
}
+ (RAREColorUtils_ShadeEnum *)DARKER_DARKER {
  return RAREColorUtils_ShadeEnum_DARKER_DARKER;
}
+ (RAREColorUtils_ShadeEnum *)BRIGHTER {
  return RAREColorUtils_ShadeEnum_BRIGHTER;
}
+ (RAREColorUtils_ShadeEnum *)BRIGHTER_BRIGHTER {
  return RAREColorUtils_ShadeEnum_BRIGHTER_BRIGHTER;
}
+ (RAREColorUtils_ShadeEnum *)LUM_ADJUSTMENT {
  return RAREColorUtils_ShadeEnum_LUM_ADJUSTMENT;
}
+ (RAREColorUtils_ShadeEnum *)DYN_LUM_ADJUSTMENT {
  return RAREColorUtils_ShadeEnum_DYN_LUM_ADJUSTMENT;
}
+ (RAREColorUtils_ShadeEnum *)ALPHA {
  return RAREColorUtils_ShadeEnum_ALPHA;
}
+ (RAREColorUtils_ShadeEnum *)UIMANAGER {
  return RAREColorUtils_ShadeEnum_UIMANAGER;
}
+ (RAREColorUtils_ShadeEnum *)BGPAINT {
  return RAREColorUtils_ShadeEnum_BGPAINT;
}
+ (RAREColorUtils_ShadeEnum *)COLOR_LIST {
  return RAREColorUtils_ShadeEnum_COLOR_LIST;
}
+ (RAREColorUtils_ShadeEnum *)DRAWABLE_LIST {
  return RAREColorUtils_ShadeEnum_DRAWABLE_LIST;
}
+ (RAREColorUtils_ShadeEnum *)DRAWABLE {
  return RAREColorUtils_ShadeEnum_DRAWABLE;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [RAREColorUtils_ShadeEnum class]) {
    RAREColorUtils_ShadeEnum_DARKER = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"DARKER" withInt:0];
    RAREColorUtils_ShadeEnum_DARKER_DARKER = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"DARKER_DARKER" withInt:1];
    RAREColorUtils_ShadeEnum_BRIGHTER = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"BRIGHTER" withInt:2];
    RAREColorUtils_ShadeEnum_BRIGHTER_BRIGHTER = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"BRIGHTER_BRIGHTER" withInt:3];
    RAREColorUtils_ShadeEnum_LUM_ADJUSTMENT = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"LUM_ADJUSTMENT" withInt:4];
    RAREColorUtils_ShadeEnum_DYN_LUM_ADJUSTMENT = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"DYN_LUM_ADJUSTMENT" withInt:5];
    RAREColorUtils_ShadeEnum_ALPHA = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"ALPHA" withInt:6];
    RAREColorUtils_ShadeEnum_UIMANAGER = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"UIMANAGER" withInt:7];
    RAREColorUtils_ShadeEnum_BGPAINT = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"BGPAINT" withInt:8];
    RAREColorUtils_ShadeEnum_COLOR_LIST = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"COLOR_LIST" withInt:9];
    RAREColorUtils_ShadeEnum_DRAWABLE_LIST = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"DRAWABLE_LIST" withInt:10];
    RAREColorUtils_ShadeEnum_DRAWABLE = [[RAREColorUtils_ShadeEnum alloc] initWithNSString:@"DRAWABLE" withInt:11];
    RAREColorUtils_ShadeEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ RAREColorUtils_ShadeEnum_DARKER, RAREColorUtils_ShadeEnum_DARKER_DARKER, RAREColorUtils_ShadeEnum_BRIGHTER, RAREColorUtils_ShadeEnum_BRIGHTER_BRIGHTER, RAREColorUtils_ShadeEnum_LUM_ADJUSTMENT, RAREColorUtils_ShadeEnum_DYN_LUM_ADJUSTMENT, RAREColorUtils_ShadeEnum_ALPHA, RAREColorUtils_ShadeEnum_UIMANAGER, RAREColorUtils_ShadeEnum_BGPAINT, RAREColorUtils_ShadeEnum_COLOR_LIST, RAREColorUtils_ShadeEnum_DRAWABLE_LIST, RAREColorUtils_ShadeEnum_DRAWABLE, nil } count:12 type:[IOSClass classWithClass:[RAREColorUtils_ShadeEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:RAREColorUtils_ShadeEnum_values];
}

+ (RAREColorUtils_ShadeEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [RAREColorUtils_ShadeEnum_values count]; i++) {
    RAREColorUtils_ShadeEnum *e = RAREColorUtils_ShadeEnum_values->buffer_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

+ (J2ObjcClassInfo *)__metadata {
  static const char *superclass_type_args[] = {"LRAREColorUtils_ShadeEnum"};
  static J2ObjcClassInfo _RAREColorUtils_ShadeEnum = { "Shade", "com.appnativa.rare.ui", "ColorUtils", 0x4019, 0, NULL, 0, NULL, 1, superclass_type_args};
  return &_RAREColorUtils_ShadeEnum;
}

@end
@implementation RAREColorUtils_$1

- (RAREUTCharScanner *)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharScanner alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LRAREUTCharScanner", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LRAREUTCharScanner"};
  static J2ObjcClassInfo _RAREColorUtils_$1 = { "$1", "com.appnativa.rare.ui", "ColorUtils", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREColorUtils_$1;
}

@end
@implementation RAREColorUtils_$2

- (id<JavaUtilList>)initialValue {
  @synchronized(self) {
    {
      return [[JavaUtilArrayList alloc] initWithInt:4];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LJavaUtilList", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LJavaUtilList"};
  static J2ObjcClassInfo _RAREColorUtils_$2 = { "$2", "com.appnativa.rare.ui", "ColorUtils", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREColorUtils_$2;
}

@end
