//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/border/aUIBevelBorder.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIStroke.h"
#include "com/appnativa/rare/ui/border/UIBevelBorder.h"
#include "com/appnativa/rare/ui/border/aUIBevelBorder.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformPath.h"

@implementation RAREaUIBevelBorder

static RAREUIBevelBorder * RAREaUIBevelBorder_sharedBevelLoweredBorder_;
static RAREUIBevelBorder * RAREaUIBevelBorder_sharedBevelRaisedBorder_;
static RAREUIBevelBorder * RAREaUIBevelBorder_sharedLoweredBorder_;
static RAREUIBevelBorder * RAREaUIBevelBorder_sharedRaisedBorder_;

+ (int)LOWERED {
  return RAREaUIBevelBorder_LOWERED;
}

+ (int)RAISED {
  return RAREaUIBevelBorder_RAISED;
}

+ (RAREUIBevelBorder *)sharedBevelLoweredBorder {
  return RAREaUIBevelBorder_sharedBevelLoweredBorder_;
}

+ (void)setSharedBevelLoweredBorder:(RAREUIBevelBorder *)sharedBevelLoweredBorder {
  RAREaUIBevelBorder_sharedBevelLoweredBorder_ = sharedBevelLoweredBorder;
}

+ (RAREUIBevelBorder *)sharedBevelRaisedBorder {
  return RAREaUIBevelBorder_sharedBevelRaisedBorder_;
}

+ (void)setSharedBevelRaisedBorder:(RAREUIBevelBorder *)sharedBevelRaisedBorder {
  RAREaUIBevelBorder_sharedBevelRaisedBorder_ = sharedBevelRaisedBorder;
}

+ (RAREUIBevelBorder *)sharedLoweredBorder {
  return RAREaUIBevelBorder_sharedLoweredBorder_;
}

+ (void)setSharedLoweredBorder:(RAREUIBevelBorder *)sharedLoweredBorder {
  RAREaUIBevelBorder_sharedLoweredBorder_ = sharedLoweredBorder;
}

+ (RAREUIBevelBorder *)sharedRaisedBorder {
  return RAREaUIBevelBorder_sharedRaisedBorder_;
}

+ (void)setSharedRaisedBorder:(RAREUIBevelBorder *)sharedRaisedBorder {
  RAREaUIBevelBorder_sharedRaisedBorder_ = sharedRaisedBorder;
}

- (id)initRAREaUIBevelBorderWithInt:(int)bevelType {
  if (self = [super init]) {
    thickness_ = [RAREScreenUtils PLATFORM_PIXELS_1];
    mainInsets_ = [[RAREUIInsets alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_1]];
    colorAlpha_ = 255;
    fourColorBevel_ = YES;
    self->bevelType_ = bevelType;
  }
  return self;
}

- (id)initWithInt:(int)bevelType {
  return [self initRAREaUIBevelBorderWithInt:bevelType];
}

- (id)initWithInt:(int)bevelType
      withBoolean:(BOOL)fourcolor {
  if (self = [self initRAREaUIBevelBorderWithInt:bevelType]) {
    [self setFourColorBevelWithBoolean:fourcolor];
  }
  return self;
}

- (id)initWithInt:(int)bevelType
  withRAREUIColor:(RAREUIColor *)highlight
  withRAREUIColor:(RAREUIColor *)shadow
      withBoolean:(BOOL)fourColor {
  return [self initRAREaUIBevelBorderWithInt:bevelType withRAREUIColor:[((RAREUIColor *) nil_chk(highlight)) brighter] withRAREUIColor:highlight withRAREUIColor:shadow withRAREUIColor:[((RAREUIColor *) nil_chk(shadow)) brighter] withBoolean:fourColor];
}

- (id)initWithInt:(int)bevelType
  withRAREUIColor:(RAREUIColor *)highlightOuterColor
  withRAREUIColor:(RAREUIColor *)highlightInnerColor
  withRAREUIColor:(RAREUIColor *)shadowOuterColor
  withRAREUIColor:(RAREUIColor *)shadowInnerColor {
  return [self initRAREaUIBevelBorderWithInt:bevelType withRAREUIColor:highlightOuterColor withRAREUIColor:highlightInnerColor withRAREUIColor:shadowOuterColor withRAREUIColor:shadowInnerColor withBoolean:YES];
}

- (id)initRAREaUIBevelBorderWithInt:(int)bevelType
                    withRAREUIColor:(RAREUIColor *)highlightOuterColor
                    withRAREUIColor:(RAREUIColor *)highlightInnerColor
                    withRAREUIColor:(RAREUIColor *)shadowOuterColor
                    withRAREUIColor:(RAREUIColor *)shadowInnerColor
                        withBoolean:(BOOL)fourColor {
  if (self = [self initRAREaUIBevelBorderWithInt:bevelType]) {
    self->highlightOuter_ = highlightOuterColor;
    self->highlightInner_ = highlightInnerColor;
    self->shadowOuter_ = shadowOuterColor;
    self->shadowInner_ = shadowInnerColor;
    [self setFourColorBevelWithBoolean:fourColor];
  }
  return self;
}

- (id)initWithInt:(int)bevelType
  withRAREUIColor:(RAREUIColor *)highlightOuterColor
  withRAREUIColor:(RAREUIColor *)highlightInnerColor
  withRAREUIColor:(RAREUIColor *)shadowOuterColor
  withRAREUIColor:(RAREUIColor *)shadowInnerColor
      withBoolean:(BOOL)fourColor {
  return [self initRAREaUIBevelBorderWithInt:bevelType withRAREUIColor:highlightOuterColor withRAREUIColor:highlightInnerColor withRAREUIColor:shadowOuterColor withRAREUIColor:shadowInnerColor withBoolean:fourColor];
}

- (id)clone {
  RAREaUIBevelBorder *b = (RAREaUIBevelBorder *) check_class_cast([super clone], [RAREaUIBevelBorder class]);
  ((RAREaUIBevelBorder *) nil_chk(b))->mainInsets_ = [[RAREUIInsets alloc] initWithRAREUIInsets:mainInsets_];
  return b;
}

+ (RAREUIBevelBorder *)createBorderWithInt:(int)bevelType
                               withBoolean:(BOOL)fourcolor {
  if (bevelType == RAREaUIBevelBorder_RAISED) {
    if (!fourcolor) {
      if (RAREaUIBevelBorder_sharedRaisedBorder_ == nil) {
        [RAREaUIBevelBorder resetBorderCache];
      }
      return fourcolor ? RAREaUIBevelBorder_sharedBevelRaisedBorder_ : RAREaUIBevelBorder_sharedRaisedBorder_;
    }
  }
  else if (bevelType == RAREaUIBevelBorder_LOWERED) {
    if (!fourcolor) {
      if (RAREaUIBevelBorder_sharedLoweredBorder_ == nil) {
        [RAREaUIBevelBorder resetBorderCache];
      }
      return fourcolor ? RAREaUIBevelBorder_sharedBevelLoweredBorder_ : RAREaUIBevelBorder_sharedLoweredBorder_;
    }
  }
  return [[RAREUIBevelBorder alloc] initWithInt:bevelType withBoolean:fourcolor];
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height
                           withBoolean:(BOOL)last {
  if (last != [self isPaintLast]) {
    return;
  }
  RAREUIStroke *stroke = [((id<RAREiPlatformGraphics>) nil_chk(g)) getStroke];
  RAREUIColor *c = [g getColor];
  [g setStrokeWithRAREUIStroke:[RAREUIStroke SOLID_STROKE]];
  [g setStrokeWidthWithFloat:1.25f];
  if (bevelType_ == RAREaUIBevelBorder_RAISED) {
    [self paintRaisedBevelWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:width withFloat:height];
  }
  else if (bevelType_ == RAREaUIBevelBorder_LOWERED) {
    [self paintLoweredBevelWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:width withFloat:height];
  }
  [g setStrokeWithRAREUIStroke:stroke];
  [g setColorWithRAREUIColor:c];
}

+ (void)resetBorderCache {
  RAREaUIBevelBorder_sharedRaisedBorder_ = [[RAREUIBevelBorder alloc] initWithInt:RAREaUIBevelBorder_RAISED withBoolean:NO];
  RAREaUIBevelBorder_sharedLoweredBorder_ = [[RAREUIBevelBorder alloc] initWithInt:RAREaUIBevelBorder_LOWERED withBoolean:NO];
  RAREaUIBevelBorder_sharedBevelRaisedBorder_ = [[RAREUIBevelBorder alloc] initWithInt:RAREaUIBevelBorder_RAISED withBoolean:YES];
  RAREaUIBevelBorder_sharedBevelLoweredBorder_ = [[RAREUIBevelBorder alloc] initWithInt:RAREaUIBevelBorder_LOWERED withBoolean:YES];
}

- (void)setColorAlphaWithInt:(int)colorAlpha {
  self->colorAlpha_ = colorAlpha % 256;
}

- (void)setInsetsPaddingWithFloat:(float)top
                        withFloat:(float)right
                        withFloat:(float)bottom
                        withFloat:(float)left {
  if (padding_ == nil) {
    padding_ = [[RAREUIInsets alloc] init];
  }
  (void) [((RAREUIInsets *) nil_chk(padding_)) setWithDouble:top withDouble:right withDouble:bottom withDouble:left];
}

- (void)setColorsWithRAREUIColor:(RAREUIColor *)so
                 withRAREUIColor:(RAREUIColor *)ho {
  if ((ho == nil) && (so != nil)) {
    ho = [so brighter];
    so = [so darker];
  }
  shadowOuter_ = so;
  highlightOuter_ = ho;
}

- (void)setColorsWithRAREUIColor:(RAREUIColor *)so
                 withRAREUIColor:(RAREUIColor *)si
                 withRAREUIColor:(RAREUIColor *)ho
                 withRAREUIColor:(RAREUIColor *)hi {
  int alpha = 255;
  if ((so != nil) && (si == nil) && (ho == nil) && (hi == nil)) {
    alpha = [so getAlpha];
  }
  if ((ho == nil) && (so != nil)) {
    ho = [so brighter];
    so = [so darker];
  }
  if ((si == nil) && (so != nil)) {
    si = so;
    so = [so darker];
  }
  if ((hi == nil) && (ho != nil)) {
    hi = ho;
    ho = [ho brighter];
  }
  if (alpha != 255) {
    si = [[RAREUIColor alloc] initWithInt:[((RAREUIColor *) nil_chk(si)) getRed] withInt:[si getGreen] withInt:[si getBlue] withInt:alpha];
    ho = [[RAREUIColor alloc] initWithInt:[((RAREUIColor *) nil_chk(ho)) getRed] withInt:[ho getGreen] withInt:[ho getBlue] withInt:alpha];
    hi = [[RAREUIColor alloc] initWithInt:[((RAREUIColor *) nil_chk(hi)) getRed] withInt:[hi getGreen] withInt:[hi getBlue] withInt:alpha];
  }
  shadowOuter_ = so;
  shadowInner_ = si;
  highlightOuter_ = ho;
  highlightInner_ = hi;
  modCount_++;
}

- (void)setFlatBottomWithBoolean:(BOOL)flat {
  flatBottom_ = flat;
}

- (void)setFourColorBevelWithBoolean:(BOOL)fourcolor {
  self->fourColorBevel_ = fourcolor;
  if (fourcolor) {
    thickness_ = 2;
  }
  ((RAREUIInsets *) nil_chk(mainInsets_))->left_ = mainInsets_->right_ = mainInsets_->top_ = mainInsets_->bottom_ = thickness_;
  modCount_++;
}

- (void)setInsetsWithRAREUIInsets:(RAREUIInsets *)inArg {
  if (inArg == nil) {
    [((RAREUIInsets *) nil_chk(mainInsets_)) setWithInt:0];
  }
  else {
    (void) [((RAREUIInsets *) nil_chk(mainInsets_)) setWithDouble:inArg->top_ withDouble:inArg->right_ withDouble:inArg->bottom_ withDouble:inArg->left_];
  }
  modCount_++;
}

- (void)setNoBottomWithBoolean:(BOOL)noBottom {
  self->flatBottom_ = noBottom;
  if (noBottom) {
    ((RAREUIInsets *) nil_chk(mainInsets_))->bottom_ = 0;
  }
}

- (RAREUIInsets *)getBorderInsetsWithRAREUIInsets:(RAREUIInsets *)insets {
  insets = [self getBorderInsetsExWithRAREUIInsets:insets];
  ((RAREUIInsets *) nil_chk(insets))->left_ = (((RAREUIInsets *) nil_chk(mainInsets_))->left_ > 0) ? mainInsets_->left_ : 0;
  insets->right_ = (mainInsets_->right_ > 0) ? mainInsets_->right_ : 0;
  insets->top_ = (mainInsets_->top_ > 0) ? mainInsets_->top_ : 0;
  insets->bottom_ = (mainInsets_->bottom_ > 0) ? mainInsets_->bottom_ : 0;
  if (padding_ != nil) {
    (void) [insets addInsetsWithRAREUIInsets:padding_];
  }
  return insets;
}

- (RAREUIInsets *)getBorderInsetsExWithRAREUIInsets:(RAREUIInsets *)insets {
  if (insets == nil) {
    insets = [[RAREUIInsets alloc] init];
  }
  ((RAREUIInsets *) nil_chk(insets))->left_ = (((RAREUIInsets *) nil_chk(mainInsets_))->left_ > 0) ? mainInsets_->left_ : 0;
  insets->right_ = (mainInsets_->right_ > 0) ? mainInsets_->right_ : 0;
  insets->top_ = (mainInsets_->top_ > 0) ? mainInsets_->top_ : 0;
  insets->bottom_ = (mainInsets_->bottom_ > 0) ? mainInsets_->bottom_ : 0;
  return insets;
}

- (int)getColorAlpha {
  return colorAlpha_;
}

- (RAREUIColor *)getHighlightInnerColor {
  RAREUIColor *co = highlightInner_;
  if (co == nil) {
    co = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.BevelBorder.highlightInnerColor"];
  }
  if (colorAlpha_ != 255) {
    co = [[RAREUIColor alloc] initWithInt:[((RAREUIColor *) nil_chk(co)) getRed] withInt:[co getGreen] withInt:[co getBlue] withInt:colorAlpha_];
  }
  return co;
}

- (RAREUIColor *)getHighlightOuterColor {
  RAREUIColor *co = highlightOuter_;
  if (co == nil) {
    co = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.BevelBorder.highlightOuterColor"];
  }
  if (colorAlpha_ != 255) {
    co = [[RAREUIColor alloc] initWithInt:[((RAREUIColor *) nil_chk(co)) getRed] withInt:[co getGreen] withInt:[co getBlue] withInt:colorAlpha_];
  }
  return co;
}

- (RAREUIColor *)getShadowInnerColor {
  RAREUIColor *co = shadowInner_;
  if (co == nil) {
    co = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.BevelBorder.shadowInnerColor"];
  }
  if (colorAlpha_ != 255) {
    co = [[RAREUIColor alloc] initWithInt:[((RAREUIColor *) nil_chk(co)) getRed] withInt:[co getGreen] withInt:[co getBlue] withInt:colorAlpha_];
  }
  return co;
}

- (RAREUIColor *)getShadowOuterColor {
  RAREUIColor *co = shadowOuter_;
  if (co == nil) {
    co = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.BevelBorder.shadowOuterColor"];
  }
  if (colorAlpha_ != 255) {
    co = [[RAREUIColor alloc] initWithInt:[((RAREUIColor *) nil_chk(co)) getRed] withInt:[co getGreen] withInt:[co getBlue] withInt:colorAlpha_];
  }
  return co;
}

- (BOOL)isFourColorBevel {
  return fourColorBevel_;
}

- (BOOL)isPadForArc {
  return padForArc_;
}

- (BOOL)isPaintLast {
  return YES;
}

- (void)paintBevelWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                                  withFloat:(float)x
                                  withFloat:(float)y
                                  withFloat:(float)w
                                  withFloat:(float)h
                            withRAREUIColor:(RAREUIColor *)top
                            withRAREUIColor:(RAREUIColor *)bottom
                            withRAREUIColor:(RAREUIColor *)top2
                            withRAREUIColor:(RAREUIColor *)bottom2 {
  BOOL arc = ((arcWidth_ > 0) || (arcHeight_ > 0));
  int ah = arcHeight_ / 4;
  int aw = arcWidth_ / 4;
  BOOL clipped = NO;
  if (arc) {
    float d1 = [RAREScreenUtils PLATFORM_PIXELS_1];
    float d3 = [RAREScreenUtils PLATFORM_PIXELS_3];
    [((id<RAREiPlatformGraphics>) nil_chk(g)) saveState];
    [g setStrokeWidthWithFloat:1.33f];
    [g setColorWithRAREUIColor:top];
    [g clipRectWithFloat:x withFloat:y withFloat:w withFloat:h / 2];
    [g drawRoundRectWithFloat:x withFloat:y withFloat:w - d1 withFloat:h - d1 withFloat:arcWidth_ withFloat:arcHeight_];
    if (top2 != nil) {
      [g setColorWithRAREUIColor:top2];
      [g drawRoundRectWithFloat:x + d1 withFloat:y + d1 withFloat:w - d3 withFloat:h - d3 withFloat:arcWidth_ withFloat:arcHeight_];
    }
    [g restoreState];
    if (!flatBottom_) {
      [g saveState];
      [g setStrokeWidthWithFloat:1.33f];
      [g clipRectWithFloat:x withFloat:y + (h / 2) withFloat:w withFloat:h / 2 + d1];
      [g setColorWithRAREUIColor:bottom];
      [g drawRoundRectWithFloat:x withFloat:y withFloat:w - d1 withFloat:h - d1 withFloat:arcWidth_ withFloat:arcHeight_];
      if (bottom2 != nil) {
        [g setColorWithRAREUIColor:bottom2];
        [g drawRoundRectWithFloat:x + d1 withFloat:y + d1 withFloat:w - d3 withFloat:h - d3 withFloat:arcWidth_ withFloat:arcHeight_];
      }
      [g restoreState];
    }
    id<RAREiPlatformPath> p = [RAREaPlatformHelper createPath];
    [((id<RAREiPlatformPath>) nil_chk(p)) drawRoundedRectWithFloat:x withFloat:y withFloat:w withFloat:h withFloat:arcWidth_ + 1 withFloat:arcHeight_ + 1];
    [g clipShapeWithRAREiPlatformShape:p];
    clipped = YES;
  }
  [self paintLinesWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:w withFloat:h withRAREUIColor:top withRAREUIColor:bottom withRAREUIColor:top2 withRAREUIColor:bottom2 withInt:ah withInt:aw withBoolean:YES];
  if (clipped) {
    [((id<RAREiPlatformGraphics>) nil_chk(g)) restoreState];
  }
  if (flatBottom_) {
    [self paintLinesWithRAREiPlatformGraphics:g withFloat:x withFloat:y + (h / 2) - 1 withFloat:w withFloat:h withRAREUIColor:top withRAREUIColor:bottom withRAREUIColor:top2 withRAREUIColor:bottom2 withInt:0 withInt:0 withBoolean:NO];
  }
}

- (void)paintRaisedBevelWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                                        withFloat:(float)x
                                        withFloat:(float)y
                                        withFloat:(float)w
                                        withFloat:(float)h {
  if ([self isFourColorBevel]) {
    [self paintBevelWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:w withFloat:h withRAREUIColor:[self getShadowOuterColor] withRAREUIColor:[self getHighlightOuterColor] withRAREUIColor:[self getShadowInnerColor] withRAREUIColor:[self getHighlightInnerColor]];
  }
  else {
    [self paintBevelWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:w withFloat:h withRAREUIColor:[self getHighlightOuterColor] withRAREUIColor:[self getShadowOuterColor] withRAREUIColor:nil withRAREUIColor:nil];
  }
}

- (void)paintLoweredBevelWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                                         withFloat:(float)x
                                         withFloat:(float)y
                                         withFloat:(float)w
                                         withFloat:(float)h {
  if ([self isFourColorBevel]) {
    [self paintBevelWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:w withFloat:h withRAREUIColor:[self getHighlightOuterColor] withRAREUIColor:[self getShadowOuterColor] withRAREUIColor:[self getHighlightInnerColor] withRAREUIColor:[self getShadowInnerColor]];
  }
  else {
    [self paintBevelWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:w withFloat:h withRAREUIColor:[self getShadowOuterColor] withRAREUIColor:[self getHighlightOuterColor] withRAREUIColor:nil withRAREUIColor:nil];
  }
}

- (void)paintLinesWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                                  withFloat:(float)x
                                  withFloat:(float)y
                                  withFloat:(float)w
                                  withFloat:(float)h
                            withRAREUIColor:(RAREUIColor *)top
                            withRAREUIColor:(RAREUIColor *)bottom
                            withRAREUIColor:(RAREUIColor *)top2
                            withRAREUIColor:(RAREUIColor *)bottom2
                                    withInt:(int)ah
                                    withInt:(int)aw
                                withBoolean:(BOOL)drawtop {
  RAREUIColor *oldColor = [((id<RAREiPlatformGraphics>) nil_chk(g)) getColor];
  [g setColorWithRAREUIColor:top];
  float d1 = [RAREScreenUtils PLATFORM_PIXELS_1];
  if (drawtop && (((RAREUIInsets *) nil_chk(mainInsets_))->top_ > 0)) {
    [g fillRectWithFloat:x + aw withFloat:y withFloat:w - (2 * aw) withFloat:d1];
  }
  if (((RAREUIInsets *) nil_chk(mainInsets_))->left_ > 0) {
    [g fillRectWithFloat:x withFloat:y + ah withFloat:d1 withFloat:h - (2 * ah)];
  }
  [g setColorWithRAREUIColor:bottom];
  if (mainInsets_->bottom_ > 0) {
    [g fillRectWithFloat:x + aw withFloat:y + h - d1 withFloat:w - (2 * aw) withFloat:d1];
  }
  if (mainInsets_->right_ > 0) {
    [g fillRectWithFloat:x + w - d1 withFloat:y + ah withFloat:d1 withFloat:h - (2 * ah)];
  }
  y += d1;
  x += d1;
  w -= d1;
  h -= d1;
  if (top2 != nil) {
    [g setColorWithRAREUIColor:top2];
    if (drawtop && (mainInsets_->top_ > 0)) {
      [g fillRectWithFloat:x + aw withFloat:y withFloat:w - (2 * aw) withFloat:d1];
    }
    if (mainInsets_->left_ > 0) {
      [g fillRectWithFloat:x withFloat:y + ah withFloat:d1 withFloat:h - (2 * ah)];
    }
  }
  if (bottom2 != nil) {
    [g setColorWithRAREUIColor:bottom2];
    if (mainInsets_->bottom_ > 0) {
      [g fillRectWithFloat:x + aw withFloat:y + h - d1 withFloat:w - (2 * aw) withFloat:d1];
    }
    if (mainInsets_->right_ > 0) {
      [g fillRectWithFloat:x + w - d1 withFloat:y + ah withFloat:d1 withFloat:h - (2 * ah)];
    }
  }
  [g setColorWithRAREUIColor:oldColor];
}

- (void)copyAllFieldsTo:(RAREaUIBevelBorder *)other {
  [super copyAllFieldsTo:other];
  other->arcHeight_ = arcHeight_;
  other->arcWidth_ = arcWidth_;
  other->bevelType_ = bevelType_;
  other->colorAlpha_ = colorAlpha_;
  other->flatBottom_ = flatBottom_;
  other->fourColorBevel_ = fourColorBevel_;
  other->highlightInner_ = highlightInner_;
  other->highlightOuter_ = highlightOuter_;
  other->mainInsets_ = mainInsets_;
  other->padding_ = padding_;
  other->shadowInner_ = shadowInner_;
  other->shadowOuter_ = shadowOuter_;
  other->thickness_ = thickness_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "createBorderWithInt:withBoolean:", NULL, "LRAREUIBevelBorder", 0x9, NULL },
    { "getBorderInsetsWithRAREUIInsets:", NULL, "LRAREUIInsets", 0x1, NULL },
    { "getBorderInsetsExWithRAREUIInsets:", NULL, "LRAREUIInsets", 0x1, NULL },
    { "getHighlightInnerColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getHighlightOuterColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getShadowInnerColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getShadowOuterColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "isFourColorBevel", NULL, "Z", 0x1, NULL },
    { "isPadForArc", NULL, "Z", 0x1, NULL },
    { "isPaintLast", NULL, "Z", 0x1, NULL },
    { "paintBevelWithRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:withRAREUIColor:withRAREUIColor:withRAREUIColor:withRAREUIColor:", NULL, "V", 0x4, NULL },
    { "paintRaisedBevelWithRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "paintLoweredBevelWithRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "paintLinesWithRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:withRAREUIColor:withRAREUIColor:withRAREUIColor:withRAREUIColor:withInt:withInt:withBoolean:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LOWERED_", NULL, 0x19, "I" },
    { "RAISED_", NULL, 0x19, "I" },
    { "sharedBevelLoweredBorder_", NULL, 0xa, "LRAREUIBevelBorder" },
    { "sharedBevelRaisedBorder_", NULL, 0xa, "LRAREUIBevelBorder" },
    { "sharedLoweredBorder_", NULL, 0xa, "LRAREUIBevelBorder" },
    { "sharedRaisedBorder_", NULL, 0xa, "LRAREUIBevelBorder" },
    { "arcHeight_", NULL, 0x0, "I" },
    { "arcWidth_", NULL, 0x0, "I" },
    { "thickness_", NULL, 0x4, "F" },
    { "mainInsets_", NULL, 0x4, "LRAREUIInsets" },
    { "bevelType_", NULL, 0x4, "I" },
    { "flatBottom_", NULL, 0x4, "Z" },
    { "highlightInner_", NULL, 0x4, "LRAREUIColor" },
    { "highlightOuter_", NULL, 0x4, "LRAREUIColor" },
    { "shadowInner_", NULL, 0x4, "LRAREUIColor" },
    { "shadowOuter_", NULL, 0x4, "LRAREUIColor" },
    { "padding_", NULL, 0x4, "LRAREUIInsets" },
  };
  static J2ObjcClassInfo _RAREaUIBevelBorder = { "aUIBevelBorder", "com.appnativa.rare.ui.border", NULL, 0x401, 15, methods, 17, fields, 0, NULL};
  return &_RAREaUIBevelBorder;
}

@end
