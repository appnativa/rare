//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/aImagePanel.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/ui/AnimationComponent.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/GraphicsComposite.h"
#include "com/appnativa/rare/ui/PinchZoomHandler.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIImageHelper.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/UISpriteIcon.h"
#include "com/appnativa/rare/ui/UIStroke.h"
#include "com/appnativa/rare/ui/XPContainer.h"
#include "com/appnativa/rare/ui/aComponent.h"
#include "com/appnativa/rare/ui/aImagePanel.h"
#include "com/appnativa/rare/ui/effects/aAnimator.h"
#include "com/appnativa/rare/ui/effects/iAnimatorListener.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iComposite.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformShape.h"
#include "com/appnativa/rare/ui/painter/iImagePainter.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/SNumber.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/net/URL.h"

@implementation RAREaImagePanel

static NSString * RAREaImagePanel_PROPERTY_PINCHZOOM_ = @"pinchZoom";
static NSString * RAREaImagePanel_PROPERTY_ZOOM_ = @"zoom";
static NSString * RAREaImagePanel_PROPERTY_ROTATION_ = @"rotation";

+ (NSString *)PROPERTY_PINCHZOOM {
  return RAREaImagePanel_PROPERTY_PINCHZOOM_;
}

+ (void)setPROPERTY_PINCHZOOM:(NSString *)PROPERTY_PINCHZOOM {
  RAREaImagePanel_PROPERTY_PINCHZOOM_ = PROPERTY_PINCHZOOM;
}

+ (NSString *)PROPERTY_ZOOM {
  return RAREaImagePanel_PROPERTY_ZOOM_;
}

+ (void)setPROPERTY_ZOOM:(NSString *)PROPERTY_ZOOM {
  RAREaImagePanel_PROPERTY_ZOOM_ = PROPERTY_ZOOM;
}

+ (NSString *)PROPERTY_ROTATION {
  return RAREaImagePanel_PROPERTY_ROTATION_;
}

+ (void)setPROPERTY_ROTATION:(NSString *)PROPERTY_ROTATION {
  RAREaImagePanel_PROPERTY_ROTATION_ = PROPERTY_ROTATION;
}

- (id)init {
  if (self = [super init]) {
    maximumScale_ = 2;
    minimumScale_ = 0.1f;
    moveIncrement_ = 10;
    rotation_ = 0;
    scalingType_ = [RAREiImagePainter_ScalingTypeEnum BILINEAR];
    movingAllowed_ = NO;
    destBounds_ = [[RAREUIRectangle alloc] init];
    srcBounds_ = [[RAREUIRectangle alloc] init];
    [self init__WithInt:-1 withInt:-1 withBoolean:YES];
  }
  return self;
}

- (id)initWithId:(id)view {
  if (self = [super initWithId:view]) {
    maximumScale_ = 2;
    minimumScale_ = 0.1f;
    moveIncrement_ = 10;
    rotation_ = 0;
    scalingType_ = [RAREiImagePainter_ScalingTypeEnum BILINEAR];
    movingAllowed_ = NO;
    destBounds_ = [[RAREUIRectangle alloc] init];
    srcBounds_ = [[RAREUIRectangle alloc] init];
    [self init__WithInt:-1 withInt:-1 withBoolean:YES];
  }
  return self;
}

- (BOOL)canZoomIn {
  return theScale_ > maximumScale_;
}

- (BOOL)canZoomOut {
  return theScale_ > minimumScale_;
}

- (void)cancelLoading {
}

- (void)centerImage {
  [self centerOrFitImageWithBoolean:YES];
  [self update];
}

- (void)fitImage {
  [self centerOrFitImageWithBoolean:NO];
  [self update];
}

- (void)centerOrFitImageWithBoolean:(BOOL)center {
  int width = [self getWidth];
  int height = [self getHeight];
  RAREUIInsets *in = [self getPaintInsets];
  if (in != nil) {
    width -= (in->left_ + in->right_);
    height -= (in->top_ + in->bottom_);
  }
  [self adjustDestForAspectRatioWithFloat:width withFloat:height withBoolean:!center withBoolean:YES];
}

- (void)centerOnWithInt:(int)x
                withInt:(int)y {
  [self centerOnExWithFloat:x withFloat:y];
  [self update];
}

- (void)clear {
  [self initValues];
  if (disposeImageOnChange_ && (theImage_ != nil)) {
    [theImage_ dispose];
  }
  theImage_ = nil;
  originalImage_ = nil;
  [((RAREUIRectangle *) nil_chk(destBounds_)) setWithFloat:0 withFloat:0 withFloat:0 withFloat:0];
}

- (void)dispose {
  [super dispose];
  if (theImage_ != nil) {
    [theImage_ dispose];
  }
  if ((originalImage_ != nil) && (originalImage_ != theImage_)) {
    [originalImage_ dispose];
  }
  theImage_ = nil;
  originalImage_ = nil;
  scalingType_ = nil;
}

- (void)imageLoadedWithRAREUIImage:(RAREUIImage *)image {
  if (image != nil) {
    if (image != theImage_) {
      [self setImageWithRAREUIImage:image withInt:-1 withInt:-1];
    }
    else {
      if ([RAREPlatform isUIThread]) {
        [self init__WithInt:-1 withInt:-1 withBoolean:YES];
      }
      else {
        [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREaImagePanel_$1 alloc] initWithRAREaImagePanel:self]];
      }
    }
  }
}

- (void)moveImageWithFloat:(float)dx
                 withFloat:(float)dy {
  dx = ((RAREUIRectangle *) nil_chk(destBounds_))->x_ + dx;
  dy = destBounds_->y_ + dy;
  if (dx < -destBounds_->width_) {
    dx = -destBounds_->width_;
  }
  if (dy < -destBounds_->height_) {
    dy = -destBounds_->height_;
  }
  int width = [self getWidth];
  int height = [self getHeight];
  RAREUIInsets *in = [self getPaintInsets];
  if (in != nil) {
    width -= (in->left_ + in->right_);
    height -= (in->top_ + in->bottom_);
  }
  if (dx > width) {
    dx = width;
  }
  if (dy > height) {
    dy = height;
  }
  if (![RAREUTSNumber isEqualWithFloat:dx withFloat:destBounds_->x_] || ![RAREUTSNumber isEqualWithFloat:dy withFloat:destBounds_->y_]) {
    destBounds_->x_ = dx;
    destBounds_->y_ = dy;
    if (usingTransforms_) {
      [self updateTransforms];
    }
    else {
      [self repaint];
    }
  }
}

- (void)pinchZoomHandlerInitialize {
  if (pinchZoom_ == nil) {
    pinchZoom_ = [[RAREPinchZoomHandler alloc] initWithFloat:minimumScale_ withFloat:maximumScale_];
  }
}

- (void)pinchZoomHandlerStartWithFloat:(float)x
                             withFloat:(float)y {
  if (pinchZoom_ == nil) {
    [self pinchZoomHandlerInitialize];
  }
  [((RAREPinchZoomHandler *) nil_chk(pinchZoom_)) resetRangeWithFloat:minimumScale_ withFloat:maximumScale_];
  [pinchZoom_ resetBoundsWithRAREUIRectangle:destBounds_ withFloat:[self getImageWidth] withFloat:[self getImageHeight] withFloat:theScale_];
  [pinchZoom_ scaleStartWithFloat:x withFloat:y];
  [self firePropertyChangeWithNSString:RAREaImagePanel_PROPERTY_PINCHZOOM_ withId:[JavaLangBoolean getFALSE] withId:[JavaLangBoolean getTRUE]];
}

- (void)resetImage {
  theImage_ = originalImage_;
  [self setScaleWithFloat:1.0f withBoolean:NO];
  [self setRotationWithInt:0];
  [self init__WithInt:-1 withInt:-1 withBoolean:YES];
  [self update];
}

- (void)setRotationWithInt:(int)rotation {
  if (self->rotation_ != rotation) {
    int oldRotation = self->rotation_;
    self->rotation_ = rotation;
    [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREaImagePanel_$2 alloc] initWithRAREaImagePanel:self withInt:oldRotation withInt:rotation]];
  }
}

- (void)rotateLeft {
  if (theImage_ != nil) {
    rotation_ -= 90;
    [self postRotate];
  }
}

- (void)rotateRight {
  if (theImage_ != nil) {
    rotation_ += 90;
    [self postRotate];
  }
}

- (void)zoomWithInt:(int)percent {
  center_ = NO;
  if (theImage_ != nil) {
    float sc = percent / 100.0f;
    [self setScaleWithFloat:sc withBoolean:YES];
  }
}

- (void)zoomIn {
  center_ = NO;
  if (theImage_ != nil) {
    float sc = theScale_;
    sc += scaleIncrement_;
    [self setScaleWithFloat:sc withBoolean:YES];
  }
}

- (void)zoomOut {
  center_ = NO;
  if (theImage_ != nil) {
    float sc = theScale_;
    sc -= scaleIncrement_;
    [self setScaleWithFloat:sc withBoolean:YES];
  }
}

- (void)zoomToWithFloat:(float)scale_
              withFloat:(float)x
              withFloat:(float)y {
  center_ = NO;
  if ([self setScaleWithFloat:scale_ withBoolean:NO]) {
    scale_ = theScale_;
    x = x * scale_ - ((RAREUIRectangle *) nil_chk(destBounds_))->x_;
    y = y * scale_ - destBounds_->y_;
    [self centerOnExWithFloat:x withFloat:y];
    [self update];
  }
}

- (void)setAutoScaleWithBoolean:(BOOL)auto_ {
  self->autoScale_ = auto_;
}

- (void)setCenterInitiallyWithBoolean:(BOOL)centerInitially {
  self->centerInitially_ = centerInitially;
  self->center_ = centerInitially;
}

- (void)setDisposeImageOnChangeWithBoolean:(BOOL)dispose {
  disposeImageOnChange_ = dispose;
}

- (BOOL)isDisposeImageOnChange {
  return disposeImageOnChange_;
}

- (void)setImageWithRAREUIImage:(RAREUIImage *)img {
  [self setImageWithRAREUIImage:img withInt:-1 withInt:-1];
}

- (void)setImageWithJavaNetURL:(JavaNetURL *)url {
  [self setImageWithRAREUIImage:[RAREaPlatformHelper createImageWithJavaNetURL:url withBoolean:YES withFloat:0]];
}

- (void)setImageWithRAREUIImage:(RAREUIImage *)img
                        withInt:(int)width
                        withInt:(int)height {
  if ([RAREPlatform isUIThread]) {
    [self setImageExWithRAREUIImage:img withInt:width withInt:height];
  }
  else {
    [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREaImagePanel_$3 alloc] initWithRAREaImagePanel:self withRAREUIImage:img withInt:width withInt:height]];
  }
}

- (void)setImageBorderWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)imageBorder {
  self->imageBorder_ = imageBorder;
  imageBorderInsets_ = (imageBorder == nil) ? nil : [imageBorder getBorderInsetsWithRAREUIInsets:imageBorderInsets_];
}

- (void)setImageAlphaWithFloat:(float)alpha {
  if ((int) [JavaLangMath ceilWithDouble:alpha * 100] >= 100) {
    imageComposite_ = nil;
  }
  else {
    imageComposite_ = [[RAREGraphicsComposite alloc] initWithRAREiComposite_CompositeTypeEnum:[RAREiComposite_CompositeTypeEnum SRC_OVER] withFloat:alpha];
  }
}

- (void)setImageCompositeWithRAREiComposite:(id<RAREiComposite>)composite {
  imageComposite_ = composite;
}

- (float)getImageAlpha {
  return (imageComposite_ == nil) ? 1.0f : [imageComposite_ getAlpha];
}

- (void)setMaximumZoomWithInt:(int)percent {
  if ((percent > 0) && (percent < 5000)) {
    maximumScale_ = percent / 100.0f;
  }
}

- (void)setMinimumZoomWithInt:(int)percent {
  if ((percent > 0) && (percent < 5000)) {
    minimumScale_ = percent / 100.0f;
  }
}

- (void)setMoveIncrementWithInt:(int)increment {
  self->moveIncrement_ = increment;
}

- (void)setMovingAllowedWithBoolean:(BOOL)allowed {
  self->movingAllowed_ = allowed;
}

- (void)setMovingOnlyAllowedWhenToLargeWithBoolean:(BOOL)allowed {
  self->movingAllowedWhenToLarge_ = allowed;
}

- (void)setPreserveAspectRatioWithBoolean:(BOOL)preserveAspectRatio {
  self->preserveAspectRatio_ = preserveAspectRatio;
}

- (void)setRotatingAllowedWithBoolean:(BOOL)allowed {
  self->rotatingAllowed_ = allowed;
}

- (void)setScalingTypeWithRAREiImagePainter_ScalingTypeEnum:(RAREiImagePainter_ScalingTypeEnum *)type {
  self->scalingType_ = type;
}

- (void)setBoundsWithFloat:(float)x
                 withFloat:(float)y
                 withFloat:(float)width
                 withFloat:(float)height {
  RAREUIRectangle *from = animateBoundsChange_ ? [[RAREUIRectangle alloc] initWithRAREUIRectangle:destBounds_] : nil;
  [super setBoundsWithFloat:x withFloat:y withFloat:width withFloat:height];
  if (usingTransforms_ || animateBoundsChange_) {
    RAREUIInsets *in = [self getPaintInsets];
    if (in != nil) {
      width -= (in->left_ + in->right_);
      height -= (in->top_ + in->bottom_);
    }
    int iwidth = [JavaLangMath roundWithFloat:width];
    int iheight = [JavaLangMath roundWithFloat:height];
    if ((iwidth != oldWidth_) || (iheight != oldHeight_)) {
      oldWidth_ = iwidth;
      oldHeight_ = iheight;
      if (center_) {
        [self centerOrFitImageWithBoolean:YES];
      }
      else {
        if ([self isAutoScale]) {
          if (preserveAspectRatio_) {
            [self adjustDestForAspectRatioWithFloat:width withFloat:height withBoolean:YES withBoolean:YES];
          }
          else {
            [destBounds_ setBoundsWithFloat:((RAREUIRectangle *) nil_chk(destBounds_))->x_ withFloat:destBounds_->y_ withFloat:width withFloat:height];
          }
        }
      }
    }
  }
  if (from != nil) {
    RAREaAnimator_BoundsChanger *bc = [[RAREaAnimator_BoundsChanger alloc] initWithRAREUIRectangle:from withRAREUIRectangle:[[RAREUIRectangle alloc] initWithRAREUIRectangle:destBounds_]];
    if ([bc isSizeDifferent]) {
      ((RAREUIRectangle *) nil_chk(bc->from_))->x_ += bc->wdiff_ / 2;
      bc->from_->y_ += bc->hdiff_ / 2;
      [bc updateDiffs];
      [self handleSizeChangeAnimationWithRAREaAnimator_BoundsChanger:bc];
      return;
    }
  }
  if (usingTransforms_) {
    [self updateTransforms];
  }
  if (spinnerComponent_ != nil) {
    RAREUIDimension *d = [spinnerComponent_ getPreferredSize];
    [spinnerComponent_ setBoundsWithFloat:(width - ((RAREUIDimension *) nil_chk(d))->width_) / 2 withFloat:(height - d->height_) / 2 withFloat:d->width_ withFloat:d->height_];
  }
}

- (void)setSelectionColorWithRAREUIColor:(RAREUIColor *)color {
  self->selectionColor_ = color;
  if (usingTransforms_) {
    [self updateSelection];
  }
  else {
    [self repaint];
  }
}

- (void)setSelectionShapeWithRAREiPlatformShape:(id<RAREiPlatformShape>)selection {
  self->selection_ = selection;
  if (usingTransforms_) {
    [self updateSelection];
  }
  else {
    [self repaint];
  }
}

- (void)setSelectionStrokeWithRAREUIStroke:(RAREUIStroke *)selectionStroke {
  self->selectionStroke_ = selectionStroke;
  if (usingTransforms_) {
    [self updateSelection];
  }
  else {
    [self repaint];
  }
}

- (void)setUseSpinnerWithBoolean:(BOOL)spinner {
  useSpinner_ = spinner;
}

- (void)setUserSelectionAllowedWithBoolean:(BOOL)allowed {
  self->userSelectionAllowed_ = allowed;
}

- (void)setZoomIncrementPercentWithInt:(int)percent {
  if (percent > 100) {
    percent = 100;
  }
  scaleIncrement_ = (percent) / 100.0f;
  if (scaleIncrement_ == 0) {
    scaleIncrement_ = 0.1f;
  }
}

- (void)setZoomingAllowedWithBoolean:(BOOL)allowed {
  self->zoomingAllowed_ = allowed;
}

- (id<RAREiPlatformComponent>)getComponent {
  return self;
}

- (RAREUIImage *)getImage {
  return theImage_;
}

- (id<RAREiPlatformBorder>)getImageBorder {
  return imageBorder_;
}

- (int)getImageHeight {
  return (theImage_ == nil) ? 0 : [theImage_ getHeight];
}

- (int)getImageRotation {
  return rotation_;
}

- (RAREUIImage *)getImageWithCurrentRotation {
  if (!usingTransforms_ && (theImage_ != nil) && [theImage_ isLoaded]) {
    return [RAREUIImageHelper rotateImageWithRAREUIImage:theImage_ withInt:rotation_];
  }
  return theImage_;
}

- (int)getImageWidth {
  return (theImage_ == nil) ? 0 : [theImage_ getWidth];
}

- (int)getMaximumZoom {
  return (int) (maximumScale_ * 100);
}

- (int)getMinimumZoom {
  return (int) (minimumScale_ * 100);
}

- (int)getMoveIncrement {
  return moveIncrement_;
}

- (RAREiImagePainter_ScalingTypeEnum *)getScalingType {
  return scalingType_;
}

- (id<RAREiPlatformShape>)getSelection {
  return selection_;
}

- (RAREUIColor *)getSelectionColor {
  return selectionColor_;
}

- (id<RAREiPlatformShape>)getSelectionShape {
  return selection_;
}

- (RAREUIStroke *)getSelectionStroke {
  return selectionStroke_;
}

- (NSString *)getSource {
  return (theImage_ == nil) ? nil : [theImage_ getLocation];
}

- (RAREUIImage *)getRenderedImage {
  int width = [self getWidth];
  int height = [self getHeight];
  RAREUIInsets *in = [self getInsetsEx];
  float x = 0;
  float y = 0;
  if (in != nil) {
    width -= (in->left_ + in->right_);
    height -= (in->top_ + in->bottom_);
    x = -in->left_;
    y = -in->top_;
  }
  int w = [RAREUIScreen snapToSizeWithFloat:((RAREUIRectangle *) nil_chk(destBounds_))->width_];
  int h = [RAREUIScreen snapToSizeWithFloat:destBounds_->height_];
  if (rotation_ != 0) {
    int n = w;
    w = h;
    h = n;
  }
  w = [JavaLangMath minWithInt:w withInt:width];
  h = [JavaLangMath minWithInt:h withInt:height];
  RAREUIImage *img = [[RAREUIImage alloc] initWithInt:w withInt:h];
  id<RAREiPlatformGraphics> g = [img createGraphics];
  animatingSizeChange_ = YES;
  [self setupRenderedImageGraphicsWithRAREiPlatformGraphics:g withInt:w withInt:h];
  [self paintWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:w withFloat:h];
  animatingSizeChange_ = NO;
  [((id<RAREiPlatformGraphics>) nil_chk(g)) dispose];
  return img;
}

- (void)setupRenderedImageGraphicsWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                                                    withInt:(int)width
                                                    withInt:(int)height {
}

- (RAREUIImage *)getSubImageWithRAREiPlatformShape:(id<RAREiPlatformShape>)shape {
  if (![((RAREUIImage *) nil_chk(theImage_)) isLoadedWithRAREiImageObserver:self]) {
    return nil;
  }
  RAREUIRectangle *r = [((id<RAREiPlatformShape>) nil_chk(shape)) getBounds];
  return [theImage_ getSubimageWithInt:(int) ((RAREUIRectangle *) nil_chk(r))->x_ withInt:(int) r->y_ withInt:(int) r->width_ withInt:(int) r->height_];
}

- (int)getZoomPercent {
  return (int) (theScale_ * 100);
}

- (BOOL)hasImage {
  return theImage_ != nil;
}

- (BOOL)hasValue {
  return theImage_ != nil;
}

- (BOOL)isAutoScale {
  return autoScale_;
}

- (BOOL)isMovingAllowed {
  return movingAllowed_;
}

- (BOOL)isPanningAllowed {
  return NO;
}

- (BOOL)isRotatingAllowed {
  return rotatingAllowed_;
}

- (BOOL)isShowZoomTooltip {
  return showZoomTooltip_;
}

- (BOOL)isTextSelectionAllowed {
  return NO;
}

- (BOOL)isUserSelectionAllowed {
  return userSelectionAllowed_;
}

- (BOOL)isZoomingAllowed {
  return zoomingAllowed_;
}

- (void)addSpinnerComponentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)adjustDestForAspectRatioWithFloat:(float)width
                                withFloat:(float)height
                              withBoolean:(BOOL)fit
                              withBoolean:(BOOL)move {
  RAREUIImage *img = [self getPaintImage];
  if ((img == nil) || ![img isLoaded]) {
    ((RAREUIRectangle *) nil_chk(destBounds_))->width_ = -1;
    destBounds_->height_ = -1;
    return;
  }
  float iw = [((RAREUIImage *) nil_chk(img)) getWidth];
  float ih = [img getHeight];
  if ((((rotation_ == 90) || (rotation_ == 270)))) {
    float n = height;
    height = width;
    width = n;
  }
  if (iw > 200) {
    ((RAREUIRectangle *) nil_chk(destBounds_))->width_ = 1;
  }
  float ws = width / iw;
  float hs = height / ih;
  float scale_ = fillViewport_ ? [JavaLangMath maxWithFloat:hs withFloat:ws] : [JavaLangMath minWithFloat:hs withFloat:ws];
  if (scale_ == 0) {
    scale_ = 1;
  }
  else if (!fit) {
    scale_ = (scale_ > 1) ? 1 : scale_;
  }
  [self setScaleWithFloat:scale_ withBoolean:NO];
  scale_ = theScale_;
  ih *= scale_;
  iw *= scale_;
  if (move) {
    ((RAREUIRectangle *) nil_chk(destBounds_))->x_ = (width - iw) / 2;
    destBounds_->y_ = (height - ih) / 2;
  }
  ((RAREUIRectangle *) nil_chk(destBounds_))->width_ = iw;
  destBounds_->height_ = ih;
}

- (void)centerOnExWithFloat:(float)x
                  withFloat:(float)y {
  x = x - ((RAREUIRectangle *) nil_chk(destBounds_))->x_;
  y = y - destBounds_->y_;
  int width = [self getWidth];
  int height = [self getHeight];
  RAREUIInsets *in = [self getPaintInsets];
  if (in != nil) {
    width -= (in->left_ + in->right_);
    height -= (in->top_ + in->bottom_);
  }
  x = (width / 2) - x;
  y = (height / 2) - y;
  destBounds_->x_ = x;
  destBounds_->y_ = y;
}

- (void)imageLoaded {
  [self repaint];
}

- (void)imageNoYetLoaded {
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height {
  RAREUIImage *image = [self getPaintImage];
  if ((image == nil) || ![image isLoaded]) {
    return;
  }
  if ((((RAREUIRectangle *) nil_chk(destBounds_))->width_ == -1) || (destBounds_->height_ == -1)) {
    if ([((RAREUIImage *) nil_chk(image)) isLoaded]) {
      [self init__WithInt:-1 withInt:-1 withBoolean:NO];
    }
    else {
      return;
    }
  }
  RAREUIInsets *in = [self getInsetsEx];
  if (in != nil) {
    width -= (in->left_ + in->right_);
    height -= (in->top_ + in->bottom_);
    x += in->left_;
    y += in->top_;
  }
  in = imageBorderInsets_;
  if (in != nil) {
    width -= (in->left_ + in->right_);
    height -= (in->top_ + in->bottom_);
    x += in->left_;
    y += in->top_;
  }
  int iwidth = [JavaLangMath roundWithFloat:width];
  int iheight = [JavaLangMath roundWithFloat:height];
  if (!animatingSizeChange_) {
    if (center_) {
      center_ = NO;
      [self centerOrFitImageWithBoolean:YES];
    }
    else if ([self isAutoScale] && ((iwidth != oldWidth_) || (iheight != oldHeight_))) {
      if (preserveAspectRatio_) {
        [self adjustDestForAspectRatioWithFloat:width withFloat:height withBoolean:YES withBoolean:YES];
      }
      else {
        [destBounds_ setBoundsWithFloat:destBounds_->x_ withFloat:destBounds_->y_ withFloat:width withFloat:height];
      }
    }
    oldHeight_ = iheight;
    oldWidth_ = iwidth;
  }
  float iw = destBounds_->width_;
  float ih = destBounds_->height_;
  int degrees = isContextFlipped_ ? (360 - rotation_) : rotation_;
  if (degrees == 360) {
    degrees = 0;
  }
  switch (degrees) {
    case 90:
    x += width;
    break;
    case 180:
    x += width;
    y += height;
    break;
    case 270:
    y += height;
    break;
    default:
    break;
  }
  [((id<RAREiPlatformGraphics>) nil_chk(g)) saveState];
  [g translateWithFloat:x withFloat:y];
  if (imageComposite_ != nil) {
    [g setCompositeWithRAREiComposite:imageComposite_];
  }
  if ((imageBorder_ != nil) && ![imageBorder_ isPaintLast]) {
    [imageBorder_ paintWithRAREiPlatformGraphics:g withFloat:destBounds_->x_ - ((RAREUIInsets *) nil_chk(in))->left_ withFloat:destBounds_->y_ - in->top_ withFloat:iw + (in->left_ + in->right_) withFloat:ih + (in->top_ + in->bottom_) withBoolean:NO];
  }
  if (degrees != 0) {
    [g setRotationWithInt:degrees];
  }
  if (!pinchZoomPanelOnly_) {
    [g drawImageWithRAREiPlatformImage:image withRAREUIRectangle:srcBounds_ withRAREUIRectangle:destBounds_ withRAREiImagePainter_ScalingTypeEnum:scalingType_ withRAREiComposite:nil];
  }
  if ((imageBorder_ != nil) && [imageBorder_ isPaintLast]) {
    if (degrees != 0) {
      [g setRotationWithInt:0];
      degrees = 0;
    }
    [imageBorder_ paintWithRAREiPlatformGraphics:g withFloat:destBounds_->x_ - ((RAREUIInsets *) nil_chk(in))->left_ withFloat:destBounds_->y_ - in->top_ withFloat:iw + (in->left_ + in->right_) withFloat:ih + (in->top_ + in->bottom_) withBoolean:YES];
  }
  if (selection_ != nil) {
    if (degrees != 0) {
      [g setRotationWithInt:0];
      degrees = 0;
    }
    if (selectionStroke_ != nil) {
      [g setStrokeWithRAREUIStroke:selectionStroke_];
    }
    if (selectionColor_ != nil) {
      [g setColorWithRAREUIColor:selectionColor_];
    }
    else {
      [g setColorWithRAREUIColor:[RAREUIColorHelper getColorWithNSString:@"Rare.textHighlight"]];
    }
    [g drawShapeWithRAREiPlatformShape:selection_ withFloat:x withFloat:y];
  }
  [g restoreState];
}

- (void)pinchZoomHandlerEndWithFloat:(float)x
                           withFloat:(float)y {
  if (pinchZoom_ != nil) {
    [pinchZoom_ scaleEndWithFloat:x withFloat:y];
  }
  [self firePropertyChangeWithNSString:RAREaImagePanel_PROPERTY_PINCHZOOM_ withId:[JavaLangBoolean getTRUE] withId:[JavaLangBoolean getFALSE]];
}

- (void)pinchZoomHandlerScaleWithFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)scale_ {
  if ([((RAREPinchZoomHandler *) nil_chk(pinchZoom_)) scale__WithFloat:x withFloat:y withFloat:scale_]) {
    [self updateFromPinchZoomHandlerWithRAREPinchZoomHandler:pinchZoom_];
  }
}

- (void)removeSpinnerComponentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (BOOL)setScaleWithFloat:(float)scale_
              withBoolean:(BOOL)repaint {
  scale_ = [JavaLangMath maxWithFloat:scale_ withFloat:minimumScale_];
  scale_ = [JavaLangMath minWithFloat:scale_ withFloat:maximumScale_];
  int oldZoom = (int) (theScale_ * 100);
  int newZoom = (int) (scale_ * 100);
  theScale_ = scale_;
  if (oldZoom != newZoom) {
    if (repaint) {
      [self update];
    }
    [self fireZoomChangeWithInt:oldZoom withInt:newZoom];
    return YES;
  }
  return NO;
}

- (void)fireZoomChangeWithInt:(int)oldZoom
                      withInt:(int)newZoom {
  [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREaImagePanel_$4 alloc] initWithRAREaImagePanel:self withInt:oldZoom withInt:newZoom]];
}

- (void)update {
  ((RAREUIRectangle *) nil_chk(destBounds_))->height_ = (((RAREUIRectangle *) nil_chk(srcBounds_))->height_ * theScale_);
  destBounds_->width_ = (srcBounds_->width_ * theScale_);
  if (usingTransforms_) {
    [self updateTransforms];
  }
  else {
    [self repaint];
  }
}

- (void)updateFromPinchZoomHandlerWithRAREPinchZoomHandler:(RAREPinchZoomHandler *)h {
  center_ = NO;
  [((RAREPinchZoomHandler *) nil_chk(h)) getBoundsWithRAREUIRectangle:destBounds_];
  [self setScaleWithFloat:[h getScale] withBoolean:YES];
}

- (void)updateSelection {
}

- (void)updateTransforms {
}

- (BOOL)isImageLargerThanViewPort {
  return (((RAREUIRectangle *) nil_chk(srcBounds_))->width_ > ((RAREUIRectangle *) nil_chk(destBounds_))->width_) || (srcBounds_->height_ > destBounds_->height_);
}

- (void)zoomOnPointWithFloat:(float)x
                   withFloat:(float)y {
  center_ = NO;
  if ([self isAutoScale]) {
    if ([self isImageLargerThanViewPort]) {
      if ((theScale_ * 100) > 99) {
        [self fitImage];
      }
      else {
        [self pinchZoomHandlerInitialize];
        [((RAREPinchZoomHandler *) nil_chk(pinchZoom_)) resetRangeWithFloat:minimumScale_ withFloat:maximumScale_];
        [pinchZoom_ resetBoundsWithRAREUIRectangle:destBounds_ withFloat:[self getImageWidth] withFloat:[self getImageHeight] withFloat:theScale_];
        [pinchZoom_ doubleTabScaleWithFloat:x withFloat:y withFloat:1 / theScale_];
        [self updateFromPinchZoomHandlerWithRAREPinchZoomHandler:pinchZoom_];
      }
    }
    else {
      if (theScale_ > 1) {
        [self centerImage];
      }
      else {
        [self fitImage];
      }
    }
  }
  else {
    if (theScale_ >= 2) {
      [self centerImage];
    }
    else {
      [self pinchZoomHandlerInitialize];
      [((RAREPinchZoomHandler *) nil_chk(pinchZoom_)) resetRangeWithFloat:minimumScale_ withFloat:maximumScale_];
      [pinchZoom_ resetBoundsWithRAREUIRectangle:destBounds_ withFloat:[self getImageWidth] withFloat:[self getImageHeight] withFloat:theScale_];
      [pinchZoom_ doubleTabScaleWithFloat:x withFloat:y withFloat:1 / theScale_ * 3];
      [self updateFromPinchZoomHandlerWithRAREPinchZoomHandler:pinchZoom_];
    }
  }
}

- (void)handleSizeChangeAnimationWithRAREaAnimator_BoundsChanger:(RAREaAnimator_BoundsChanger *)bc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setImageExWithRAREUIImage:(RAREUIImage *)img
                          withInt:(int)width
                          withInt:(int)height {
  if (disposeImageOnChange_ && (theImage_ != nil) && (theImage_ != img)) {
    [theImage_ dispose];
  }
  theImage_ = img;
  originalImage_ = img;
  center_ = centerInitially_;
  [self init__WithInt:width withInt:height withBoolean:YES];
  [self repaint];
}

- (RAREUIImage *)getPaintImage {
  return theImage_;
}

- (RAREUIInsets *)getPaintInsets {
  RAREUIInsets *in = [self getInsetsEx];
  if (!usingTransforms_ && (imageBorderInsets_ != nil)) {
    if (in == nil) {
      return imageBorderInsets_;
    }
    else {
      (void) [in addInsetsWithRAREUIInsets:imageBorderInsets_];
    }
  }
  return in;
}

- (void)getPreferredSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                    withFloat:(float)maxWidth {
  if ([self isAnimating]) {
    (void) [self getSizeWithRAREUIDimension:size];
  }
  else if (theImage_ != nil) {
    [((RAREUIDimension *) nil_chk(size)) setSizeWithDouble:((RAREUIRectangle *) nil_chk(srcBounds_))->width_ withDouble:srcBounds_->height_];
    if (rotation_ % 90 != 0) {
      float n = size->width_;
      size->width_ = size->height_;
      size->height_ = n;
    }
  }
  else {
    ((RAREUIDimension *) nil_chk(size))->width_ = 0;
    size->height_ = 0;
  }
}

- (void)handleSpinnerWithBoolean:(BOOL)show {
  if (show) {
    if (useSpinner_) {
      if (spinnerComponent_ == nil) {
        id<RAREiActionComponent> comp = [RAREaPlatformHelper createLabelWithRAREiPlatformComponent:self];
        [((id<RAREiActionComponent>) nil_chk(comp)) setIconWithRAREiPlatformIcon:[RAREUISpriteIcon getDefaultSpinner]];
        spinnerComponent_ = comp;
      }
      if (spinnerComponent_ != nil) {
        RAREUIDimension *d = [spinnerComponent_ getPreferredSize];
        RAREUIDimension *md = [self getSize];
        [spinnerComponent_ setBoundsWithFloat:(((RAREUIDimension *) nil_chk(md))->width_ - ((RAREUIDimension *) nil_chk(d))->width_) / 2 withFloat:(md->height_ - d->height_) / 2 withFloat:d->width_ withFloat:d->height_];
        [self addSpinnerComponentWithRAREiPlatformComponent:spinnerComponent_];
      }
    }
  }
  else if (spinnerComponent_ != nil) {
    [self removeSpinnerComponentWithRAREiPlatformComponent:spinnerComponent_];
  }
}

- (void)init__WithInt:(int)iw
              withInt:(int)ih
          withBoolean:(BOOL)reset {
  BOOL loaded = (theImage_ != nil) && [theImage_ isLoadedWithRAREiImageObserver:self];
  if (reset) {
    [self initValues];
  }
  int imageWidth = iw;
  int imageHeight = ih;
  if (loaded) {
    if (iw < 1) {
      imageWidth = [((RAREUIImage *) nil_chk(theImage_)) getWidth];
    }
    if (ih < 1) {
      imageHeight = [((RAREUIImage *) nil_chk(theImage_)) getHeight];
    }
  }
  [((RAREUIRectangle *) nil_chk(srcBounds_)) setBoundsWithFloat:0 withFloat:0 withFloat:imageWidth withFloat:imageHeight];
  int width = [self getWidth];
  int height = [self getHeight];
  if (!loaded || (width == 0) || (height == 0)) {
    [((RAREUIRectangle *) nil_chk(destBounds_)) setWithFloat:0 withFloat:0 withFloat:-1 withFloat:-1];
  }
  else if (reset) {
    RAREUIInsets *in = [self getPaintInsets];
    if (in != nil) {
      width -= (in->left_ + in->right_);
      height -= (in->top_ + in->bottom_);
    }
    if (autoScale_) {
      if ((imageWidth > width) || (imageHeight > height)) {
        if (preserveAspectRatio_) {
          [self fitImage];
        }
        else {
          [((RAREUIRectangle *) nil_chk(destBounds_)) setBoundsWithFloat:0 withFloat:0 withFloat:width withFloat:height];
        }
      }
      else {
        [self adjustDestForAspectRatioWithFloat:width withFloat:height withBoolean:YES withBoolean:YES];
      }
      oldWidth_ = width;
      oldHeight_ = height;
    }
    else {
      [((RAREUIRectangle *) nil_chk(destBounds_)) setBoundsWithFloat:0 withFloat:0 withFloat:width withFloat:height];
    }
  }
  if (loaded) {
    [self handleSpinnerWithBoolean:NO];
    [self imageLoaded];
    if (widget_ != nil) {
      [widget_ finishedLoading];
    }
  }
  else {
    [self handleSpinnerWithBoolean:YES];
    [self imageNoYetLoaded];
  }
}

- (void)initValues {
  theScale_ = 1.0f;
  scaleIncrement_ = 0.01f;
  rotation_ = 0;
  center_ = centerInitially_;
  oldHeight_ = 0;
  oldWidth_ = 0;
}

- (void)postRotate {
  rotation_ = rotation_ % 360;
  if (rotation_ < 0) {
    rotation_ += 360;
  }
  if (rotation_ == 0) {
    theImage_ = originalImage_;
  }
  [self postRotateEx];
  [self centerOrFitImageWithBoolean:NO];
  [self update];
}

- (void)postRotateEx {
}

- (BOOL)isImageFitted {
  if ((((RAREUIRectangle *) nil_chk(destBounds_))->x_ > -1) && (destBounds_->y_ > -1)) {
    RAREUIInsets *in = [self getPaintInsets];
    int w = [self getWidth];
    int h = [self getHeight];
    if (in != nil) {
      w -= (in->left_ + in->right_);
      h -= (in->top_ + in->bottom_);
    }
    if (rotation_ != 0) {
      return (destBounds_->width_ <= h) && (destBounds_->height_ <= w);
    }
    return (destBounds_->width_ <= w) && (destBounds_->height_ <= h);
  }
  return NO;
}

- (BOOL)isFillViewport {
  return fillViewport_;
}

- (void)setFillViewportWithBoolean:(BOOL)fillViewport {
  self->fillViewport_ = fillViewport;
}

- (BOOL)isAnimateBoundsChange {
  return animateBoundsChange_;
}

- (void)setAnimateBoundsChangeWithBoolean:(BOOL)animateBoundsChange
                withRAREiAnimatorListener:(id<RAREiAnimatorListener>)listener {
  self->animateBoundsChange_ = animateBoundsChange;
  animateSizeChangeListener_ = listener;
}

- (BOOL)isAnimatingRotationChange {
  return animatingRotationChange_;
}

- (void)setAnimatingRotationChangeWithBoolean:(BOOL)animatingRotationChange {
  self->animatingRotationChange_ = animatingRotationChange;
}

- (void)copyAllFieldsTo:(RAREaImagePanel *)other {
  [super copyAllFieldsTo:other];
  other->animateBoundsChange_ = animateBoundsChange_;
  other->animateSizeChangeListener_ = animateSizeChangeListener_;
  other->animatingRotationChange_ = animatingRotationChange_;
  other->animatingSizeChange_ = animatingSizeChange_;
  other->animationComponent_ = animationComponent_;
  other->autoScale_ = autoScale_;
  other->center_ = center_;
  other->centerInitially_ = centerInitially_;
  other->destBounds_ = destBounds_;
  other->disposeImageOnChange_ = disposeImageOnChange_;
  other->fillViewport_ = fillViewport_;
  other->imageBorder_ = imageBorder_;
  other->imageBorderInsets_ = imageBorderInsets_;
  other->imageComposite_ = imageComposite_;
  other->isContextFlipped_ = isContextFlipped_;
  other->maximumScale_ = maximumScale_;
  other->minimumScale_ = minimumScale_;
  other->moveIncrement_ = moveIncrement_;
  other->movingAllowed_ = movingAllowed_;
  other->movingAllowedWhenToLarge_ = movingAllowedWhenToLarge_;
  other->oldHeight_ = oldHeight_;
  other->oldWidth_ = oldWidth_;
  other->originalImage_ = originalImage_;
  other->pinchZoom_ = pinchZoom_;
  other->pinchZoomPanelOnly_ = pinchZoomPanelOnly_;
  other->preserveAspectRatio_ = preserveAspectRatio_;
  other->rotatingAllowed_ = rotatingAllowed_;
  other->rotation_ = rotation_;
  other->scaleIncrement_ = scaleIncrement_;
  other->scalingType_ = scalingType_;
  other->selection_ = selection_;
  other->selectionColor_ = selectionColor_;
  other->selectionStroke_ = selectionStroke_;
  other->showZoomTooltip_ = showZoomTooltip_;
  other->spinnerComponent_ = spinnerComponent_;
  other->srcBounds_ = srcBounds_;
  other->theImage_ = theImage_;
  other->theScale_ = theScale_;
  other->useSpinner_ = useSpinner_;
  other->userSelectionAllowed_ = userSelectionAllowed_;
  other->usingTransforms_ = usingTransforms_;
  other->zoomingAllowed_ = zoomingAllowed_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "canZoomIn", NULL, "Z", 0x1, NULL },
    { "canZoomOut", NULL, "Z", 0x1, NULL },
    { "centerOrFitImageWithBoolean:", NULL, "V", 0x4, NULL },
    { "setRotationWithInt:", NULL, "V", 0x4, NULL },
    { "isDisposeImageOnChange", NULL, "Z", 0x1, NULL },
    { "setImageWithJavaNetURL:", NULL, "V", 0x1, "JavaIoIOException" },
    { "getComponent", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getImage", NULL, "LRAREUIImage", 0x1, NULL },
    { "getImageBorder", NULL, "LRAREiPlatformBorder", 0x1, NULL },
    { "getImageWithCurrentRotation", NULL, "LRAREUIImage", 0x1, NULL },
    { "getScalingType", NULL, "LRAREiImagePainter_ScalingTypeEnum", 0x1, NULL },
    { "getSelection", NULL, "LRAREiPlatformShape", 0x1, NULL },
    { "getSelectionColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getSelectionShape", NULL, "LRAREiPlatformShape", 0x1, NULL },
    { "getSelectionStroke", NULL, "LRAREUIStroke", 0x1, NULL },
    { "getSource", NULL, "LNSString", 0x1, NULL },
    { "getRenderedImage", NULL, "LRAREUIImage", 0x1, NULL },
    { "setupRenderedImageGraphicsWithRAREiPlatformGraphics:withInt:withInt:", NULL, "V", 0x4, NULL },
    { "getSubImageWithRAREiPlatformShape:", NULL, "LRAREUIImage", 0x1, NULL },
    { "hasImage", NULL, "Z", 0x1, NULL },
    { "hasValue", NULL, "Z", 0x1, NULL },
    { "isAutoScale", NULL, "Z", 0x1, NULL },
    { "isMovingAllowed", NULL, "Z", 0x1, NULL },
    { "isPanningAllowed", NULL, "Z", 0x1, NULL },
    { "isRotatingAllowed", NULL, "Z", 0x1, NULL },
    { "isShowZoomTooltip", NULL, "Z", 0x1, NULL },
    { "isTextSelectionAllowed", NULL, "Z", 0x1, NULL },
    { "isUserSelectionAllowed", NULL, "Z", 0x1, NULL },
    { "isZoomingAllowed", NULL, "Z", 0x1, NULL },
    { "addSpinnerComponentWithRAREiPlatformComponent:", NULL, "V", 0x404, NULL },
    { "adjustDestForAspectRatioWithFloat:withFloat:withBoolean:withBoolean:", NULL, "V", 0x4, NULL },
    { "centerOnExWithFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "imageLoaded", NULL, "V", 0x4, NULL },
    { "imageNoYetLoaded", NULL, "V", 0x4, NULL },
    { "paintWithRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "pinchZoomHandlerEndWithFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "pinchZoomHandlerScaleWithFloat:withFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "removeSpinnerComponentWithRAREiPlatformComponent:", NULL, "V", 0x404, NULL },
    { "setScaleWithFloat:withBoolean:", NULL, "Z", 0x4, NULL },
    { "fireZoomChangeWithInt:withInt:", NULL, "V", 0x4, NULL },
    { "update", NULL, "V", 0x4, NULL },
    { "updateFromPinchZoomHandlerWithRAREPinchZoomHandler:", NULL, "V", 0x4, NULL },
    { "updateSelection", NULL, "V", 0x4, NULL },
    { "updateTransforms", NULL, "V", 0x4, NULL },
    { "isImageLargerThanViewPort", NULL, "Z", 0x1, NULL },
    { "zoomOnPointWithFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "handleSizeChangeAnimationWithRAREaAnimator_BoundsChanger:", NULL, "V", 0x404, NULL },
    { "setImageExWithRAREUIImage:withInt:withInt:", NULL, "V", 0x4, NULL },
    { "getPaintImage", NULL, "LRAREUIImage", 0x4, NULL },
    { "getPaintInsets", NULL, "LRAREUIInsets", 0x4, NULL },
    { "getPreferredSizeExWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
    { "handleSpinnerWithBoolean:", NULL, "V", 0x2, NULL },
    { "init__WithInt:withInt:withBoolean:", NULL, "V", 0x4, NULL },
    { "initValues", NULL, "V", 0x4, NULL },
    { "postRotate", NULL, "V", 0x4, NULL },
    { "postRotateEx", NULL, "V", 0x4, NULL },
    { "isImageFitted", NULL, "Z", 0x1, NULL },
    { "isFillViewport", NULL, "Z", 0x1, NULL },
    { "isAnimateBoundsChange", NULL, "Z", 0x1, NULL },
    { "isAnimatingRotationChange", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "PROPERTY_PINCHZOOM_", NULL, 0x9, "LNSString" },
    { "PROPERTY_ZOOM_", NULL, 0x9, "LNSString" },
    { "PROPERTY_ROTATION_", NULL, 0x9, "LNSString" },
    { "maximumScale_", NULL, 0x4, "F" },
    { "minimumScale_", NULL, 0x4, "F" },
    { "moveIncrement_", NULL, 0x4, "I" },
    { "rotation_", NULL, 0x4, "I" },
    { "scalingType_", NULL, 0x4, "LRAREiImagePainter_ScalingTypeEnum" },
    { "movingAllowed_", NULL, 0x4, "Z" },
    { "destBounds_", NULL, 0x4, "LRAREUIRectangle" },
    { "srcBounds_", NULL, 0x4, "LRAREUIRectangle" },
    { "animationComponent_", NULL, 0x4, "LRAREAnimationComponent" },
    { "autoScale_", NULL, 0x4, "Z" },
    { "center_", NULL, 0x4, "Z" },
    { "centerInitially_", NULL, 0x4, "Z" },
    { "imageBorder_", NULL, 0x4, "LRAREiPlatformBorder" },
    { "imageBorderInsets_", NULL, 0x4, "LRAREUIInsets" },
    { "pinchZoom_", NULL, 0x4, "LRAREPinchZoomHandler" },
    { "preserveAspectRatio_", NULL, 0x4, "Z" },
    { "rotatingAllowed_", NULL, 0x4, "Z" },
    { "scaleIncrement_", NULL, 0x4, "F" },
    { "selection_", NULL, 0x4, "LRAREiPlatformShape" },
    { "selectionColor_", NULL, 0x4, "LRAREUIColor" },
    { "selectionStroke_", NULL, 0x4, "LRAREUIStroke" },
    { "showZoomTooltip_", NULL, 0x4, "Z" },
    { "spinnerComponent_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "theImage_", NULL, 0x4, "LRAREUIImage" },
    { "originalImage_", NULL, 0x4, "LRAREUIImage" },
    { "theScale_", NULL, 0x4, "F" },
    { "useSpinner_", NULL, 0x4, "Z" },
    { "userSelectionAllowed_", NULL, 0x4, "Z" },
    { "usingTransforms_", NULL, 0x4, "Z" },
    { "zoomingAllowed_", NULL, 0x4, "Z" },
    { "oldWidth_", NULL, 0x4, "I" },
    { "oldHeight_", NULL, 0x4, "I" },
    { "movingAllowedWhenToLarge_", NULL, 0x4, "Z" },
    { "fillViewport_", NULL, 0x4, "Z" },
    { "animateBoundsChange_", NULL, 0x4, "Z" },
    { "animatingSizeChange_", NULL, 0x4, "Z" },
    { "animatingRotationChange_", NULL, 0x4, "Z" },
    { "animateSizeChangeListener_", NULL, 0x4, "LRAREiAnimatorListener" },
    { "imageComposite_", NULL, 0x4, "LRAREiComposite" },
    { "isContextFlipped_", NULL, 0x4, "Z" },
    { "pinchZoomPanelOnly_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _RAREaImagePanel = { "aImagePanel", "com.appnativa.rare.ui", NULL, 0x401, 60, methods, 44, fields, 0, NULL};
  return &_RAREaImagePanel;
}

@end
@implementation RAREaImagePanel_$1

- (void)run {
  [this$0_ init__WithInt:-1 withInt:-1 withBoolean:YES];
}

- (id)initWithRAREaImagePanel:(RAREaImagePanel *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaImagePanel" },
  };
  static J2ObjcClassInfo _RAREaImagePanel_$1 = { "$1", "com.appnativa.rare.ui", "aImagePanel", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_RAREaImagePanel_$1;
}

@end
@implementation RAREaImagePanel_$2

- (void)run {
  [this$0_ firePropertyChangeWithNSString:[RAREaImagePanel PROPERTY_ROTATION] withId:[JavaLangInteger valueOfWithInt:val$oldRotation_] withId:[JavaLangInteger valueOfWithInt:val$rotation_]];
}

- (id)initWithRAREaImagePanel:(RAREaImagePanel *)outer$
                      withInt:(int)capture$0
                      withInt:(int)capture$1 {
  this$0_ = outer$;
  val$oldRotation_ = capture$0;
  val$rotation_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaImagePanel" },
    { "val$oldRotation_", NULL, 0x1012, "I" },
    { "val$rotation_", NULL, 0x1012, "I" },
  };
  static J2ObjcClassInfo _RAREaImagePanel_$2 = { "$2", "com.appnativa.rare.ui", "aImagePanel", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_RAREaImagePanel_$2;
}

@end
@implementation RAREaImagePanel_$3

- (void)run {
  [this$0_ setImageExWithRAREUIImage:val$img_ withInt:val$width_ withInt:val$height_];
}

- (id)initWithRAREaImagePanel:(RAREaImagePanel *)outer$
              withRAREUIImage:(RAREUIImage *)capture$0
                      withInt:(int)capture$1
                      withInt:(int)capture$2 {
  this$0_ = outer$;
  val$img_ = capture$0;
  val$width_ = capture$1;
  val$height_ = capture$2;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaImagePanel" },
    { "val$img_", NULL, 0x1012, "LRAREUIImage" },
    { "val$width_", NULL, 0x1012, "I" },
    { "val$height_", NULL, 0x1012, "I" },
  };
  static J2ObjcClassInfo _RAREaImagePanel_$3 = { "$3", "com.appnativa.rare.ui", "aImagePanel", 0x8000, 0, NULL, 4, fields, 0, NULL};
  return &_RAREaImagePanel_$3;
}

@end
@implementation RAREaImagePanel_$4

- (void)run {
  [this$0_ firePropertyChangeWithNSString:[RAREaImagePanel PROPERTY_ZOOM] withId:[JavaLangInteger valueOfWithInt:val$oldZoom_] withId:[JavaLangInteger valueOfWithInt:val$newZoom_]];
}

- (id)initWithRAREaImagePanel:(RAREaImagePanel *)outer$
                      withInt:(int)capture$0
                      withInt:(int)capture$1 {
  this$0_ = outer$;
  val$oldZoom_ = capture$0;
  val$newZoom_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaImagePanel" },
    { "val$oldZoom_", NULL, 0x1012, "I" },
    { "val$newZoom_", NULL, 0x1012, "I" },
  };
  static J2ObjcClassInfo _RAREaImagePanel_$4 = { "$4", "com.appnativa.rare.ui", "aImagePanel", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_RAREaImagePanel_$4;
}

@end
