//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/renderer/aListItemRenderer.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformRenderingComponent.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/renderer/aListItemRenderer.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/iStringConverter.h"
#include "java/lang/CharSequence.h"

@implementation RAREaListItemRenderer

static RARERenderableDataItem * RAREaListItemRenderer_defaultItem_;

+ (RARERenderableDataItem *)defaultItem {
  return RAREaListItemRenderer_defaultItem_;
}

+ (void)setDefaultItem:(RARERenderableDataItem *)defaultItem {
  RAREaListItemRenderer_defaultItem_ = defaultItem;
}

- (id)init {
  return [self initRAREaListItemRendererWithBoolean:YES];
}

- (id)initRAREaListItemRendererWithBoolean:(BOOL)handlesSelection {
  if (self = [super init]) {
    selectionPainted_ = YES;
    paintRowBackground_ = YES;
    handlesSelection_ = YES;
    self->handlesSelection_ = handlesSelection;
    [self setSelectionPaintWithRAREPaintBucket:[((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getSelectionPainter]];
    [self setPressedPaintWithRAREPaintBucket:[((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getPressedPainter]];
    autoHilightPaint_ = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getAutoHilightPainter];
    [self setLostFocusSelectionPaintWithRAREPaintBucket:[((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getLostFocusSelectionPainter]];
    [self setInsetsWithRAREUIInsets:[[RAREUIInsets alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_2]]];
  }
  return self;
}

- (id)initWithBoolean:(BOOL)handlesSelection {
  return [self initRAREaListItemRendererWithBoolean:handlesSelection];
}

- (id<JavaLangCharSequence>)configureRenderingComponentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)list
                                              withRAREiPlatformRenderingComponent:(id<RAREiPlatformRenderingComponent>)rc
                                                       withRARERenderableDataItem:(RARERenderableDataItem *)item
                                                                          withInt:(int)row
                                                                      withBoolean:(BOOL)isSelected
                                                                      withBoolean:(BOOL)hasFocus
                                                                   withRAREColumn:(RAREColumn *)col
                                                       withRARERenderableDataItem:(RARERenderableDataItem *)rowItem {
  id<JavaLangCharSequence> s;
  RAREUIColor *fg = nil;
  RAREUIColor *bg = nil;
  RAREUIFont *font = nil;
  BOOL enabled = YES;
  id<RAREiPlatformComponentPainter> bp = nil;
  id<RAREiWidget> w = (list == nil) ? nil : [list getWidget];
  id<RAREiPlatformBorder> b = nil;
  RAREUIInsets *in = insets_;
  if (col == nil) {
    col = itemDescription_;
  }
  BOOL override = (col == nil) ? NO : col->overrideSelectionBackground_;
  if (!selectionPainted_) {
    override = YES;
  }
  if ((w == nil) && (list != nil)) {
    w = [RAREPlatform findWidgetForComponentWithId:list];
    if (w == nil) {
      w = [RAREPlatform getContextRootViewer];
    }
  }
  if (item == nil) {
    item = RAREaListItemRenderer_defaultItem_;
  }
  font = [((RARERenderableDataItem *) nil_chk(item)) getFont];
  fg = [item getForeground];
  bg = [item getBackground];
  bp = [item getComponentPainter];
  b = [item getBorder];
  if ((fg == nil) && (col != nil)) {
    fg = [col getForeground];
  }
  if (converter_ != nil) {
    s = [converter_ toStringWithId:item];
  }
  else {
    s = (col == nil) ? [item toCharSequenceWithRAREiWidget:w] : [col toCharSequenceWithRAREiWidget:w withRARERenderableDataItem:item];
  }
  if (isSelected) {
    isSelected = [item isSelectable];
  }
  RAREPaintBucket *pb = nil;
  if (isSelected) {
    pb = (col == nil) ? nil : [col getItemSelectionPainter];
    if ((pb == nil) && override) {
      pb = (col == nil) ? nil : [col getItemPainter];
    }
    if (pb == nil) {
      if (selectionPainted_) {
        if (handlesSelection_) {
          in = [self getSelectesInsets];
          pb = [self getSelectionPaintWithBoolean:[((id<RAREiPlatformComponent>) nil_chk(list)) isFocusOwner]];
        }
        else {
          RAREUIColor *c = [self getSelectionForegroundWithBoolean:hasFocus];
          RAREUIFont *f = [self getSelectionFontWithBoolean:hasFocus];
          if (c != nil) {
            fg = c;
          }
          if (f != nil) {
            font = f;
          }
        }
      }
    }
    if (pb != nil) {
      if ([pb getForegroundColor] != nil) {
        fg = [pb getForegroundColor];
      }
      if ([pb getFont] != nil) {
        font = [pb getFont];
      }
      if ([pb getBackgroundPainter] != nil) {
        bp = [pb getCachedComponentPainter];
      }
    }
  }
  else {
    pb = (col == nil) ? nil : [col getItemPainter];
    if (pb != nil) {
      if (fg == nil) {
        fg = [pb getForegroundColor];
      }
      if ((bp == nil) && (bg == nil)) {
        bp = [pb getCachedComponentPainter];
      }
      if (font == nil) {
        font = [pb getFont];
      }
    }
  }
  enabled = [item isEnabled];
  if (enabled && (list != nil)) {
    enabled = [list isEnabled];
  }
  if (rowItem != nil) {
    if (![rowItem isEnabled]) {
      enabled = NO;
    }
    if (font == nil) {
      font = [rowItem getFont];
    }
    if (fg == nil) {
      fg = [rowItem getForeground];
    }
    if ((bg == nil) && paintRowBackground_) {
      bg = [rowItem getBackground];
    }
    if ((b == nil) && paintRowBackground_) {
      b = [rowItem getBorder];
    }
  }
  if (col != nil) {
    if ([col isIndexColumn]) {
      s = [RAREUTStringCache valueOfWithInt:row + 1];
    }
    switch ([[col getRenderDetail] ordinal]) {
      case RAREColumn_RenderDetail_ICON_ONLY:
      s = @"";
      break;
      case RAREColumn_RenderDetail_TEXT_ONLY:
      noicon_ = YES;
      break;
      default:
      break;
    }
  }
  [self setIconAndAlignmentWithRAREiPlatformRenderingComponent:rc withRARERenderableDataItem:item withRARERenderableDataItem:nil withRAREColumn:col withBoolean:enabled withBoolean:NO withBoolean:NO withBoolean:!noicon_ withBoolean:NO];
  if ((font == nil) && (list != nil)) {
    font = [list getFont];
  }
  if ((fg == nil) && (list != nil)) {
    fg = [list getForeground];
  }
  if (!enabled) {
    if (disabledColor_ == nil) {
      disabledColor_ = [RAREColorUtils getDisabledForeground];
    }
    if (list != nil) {
      fg = [((RAREUIColor *) nil_chk(fg)) getDisabledColorWithRAREUIColor:[list getDisabledColor]];
    }
    if (fg == nil) {
      fg = disabledColor_;
    }
    else {
      fg = [fg getDisabledColorWithRAREUIColor:disabledColor_];
    }
  }
  [((id<RAREiPlatformRenderingComponent>) nil_chk(rc)) setEnabledWithBoolean:enabled];
  [rc setFontWithRAREUIFont:font];
  [rc setComponentPainterWithRAREiPlatformComponentPainter:bp];
  if ((bp == nil) || ![bp isBackgroundPaintEnabled]) {
    [rc setBackgroundWithRAREUIColor:bg];
  }
  [rc setForegroundWithRAREUIColor:fg];
  if (alwaysCallSetBorder_) {
    if ((b == nil) && (bp != nil)) {
      b = [bp getBorder];
    }
    [rc setBorderWithRAREiPlatformBorder:b];
  }
  else if ((bp == nil) || ([bp getBorder] == nil)) {
    [rc setBorderWithRAREiPlatformBorder:b];
  }
  if (in != nil) {
    [rc setMarginWithRAREUIInsets:in];
  }
  if (col != nil) {
    [rc setWordWrapWithBoolean:col->wordWrap_];
  }
  return s;
}

- (void)dispose {
  if (componentPainter_ != nil) {
    [componentPainter_ dispose];
    componentPainter_ = nil;
  }
  converter_ = nil;
  selectionPaint_ = nil;
  itemDescription_ = nil;
  lostFocusSelectionPaint_ = nil;
}

- (void)setAutoHilightWithBoolean:(BOOL)autoHilight {
  self->autoHilight_ = autoHilight;
}

- (void)setAutoHilightPaintWithRAREPaintBucket:(RAREPaintBucket *)autoHilightPaint {
  self->autoHilightPaint_ = autoHilightPaint;
}

- (void)setConverterWithRAREUTiStringConverter:(id<RAREUTiStringConverter>)converter {
  self->converter_ = converter;
}

- (void)setDelayedIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)delayedIcon {
  self->delayedIcon_ = delayedIcon;
}

- (void)setIconAndAlignmentWithRAREiPlatformRenderingComponent:(id<RAREiPlatformRenderingComponent>)rc
                                    withRARERenderableDataItem:(RARERenderableDataItem *)item
                                    withRARERenderableDataItem:(RARERenderableDataItem *)row
                                                withRAREColumn:(RAREColumn *)col
                                                   withBoolean:(BOOL)enabled
                                                   withBoolean:(BOOL)center
                                                   withBoolean:(BOOL)top
                                                   withBoolean:(BOOL)seticon
                                                   withBoolean:(BOOL)expanded {
  [RAREUtils setIconAndAlignmentWithRAREiPlatformRenderingComponent:rc withRARERenderableDataItem:item withRARERenderableDataItem:row withRAREColumn:col withBoolean:enabled withBoolean:center withBoolean:top withBoolean:seticon withBoolean:expanded withRAREiPlatformIcon:delayedIcon_];
}

- (void)setInsetsWithRAREUIInsets:(RAREUIInsets *)insets {
  if (insets == nil) {
    self->insets_ = nil;
  }
  else {
    self->insets_ = [[RAREUIInsets alloc] initWithRAREUIInsets:insets];
  }
}

- (void)setItemDescriptionWithRAREColumn:(RAREColumn *)itemDescription {
  self->itemDescription_ = itemDescription;
}

- (void)setLostFocusSelectionPaintWithRAREPaintBucket:(RAREPaintBucket *)pb {
  self->lostFocusSelectionPaint_ = pb;
}

- (void)setPaintRowBackgroundWithBoolean:(BOOL)useRowBackground {
  self->paintRowBackground_ = useRowBackground;
}

- (void)setPressedPaintWithRAREPaintBucket:(RAREPaintBucket *)pb {
  self->pressedPaint_ = pb;
}

- (void)setSelectionPaintWithRAREPaintBucket:(RAREPaintBucket *)pb {
  self->selectionPaint_ = pb;
}

- (void)setSelectionPaintedWithBoolean:(BOOL)painted {
  selectionPainted_ = painted;
}

- (void)setHandlesSelectionWithBoolean:(BOOL)handlesSelection {
  self->handlesSelection_ = handlesSelection;
}

- (RAREPaintBucket *)getAutoHilightPaint {
  return autoHilightPaint_;
}

- (id<RAREUTiStringConverter>)getConverter {
  return converter_;
}

- (id<RAREiPlatformIcon>)getDelayedIcon {
  return delayedIcon_;
}

- (RAREUIInsets *)getInsets {
  return insets_;
}

- (RAREColumn *)getItemDescription {
  return itemDescription_;
}

- (RAREPaintBucket *)getLostFocusSelectionPaint {
  return selectionPainted_ ? lostFocusSelectionPaint_ : nil;
}

- (RAREPaintBucket *)getPressedPaint {
  return pressedPaint_;
}

- (RAREUIFont *)getSelectionFontWithBoolean:(BOOL)focused {
  RAREUIFont *font = nil;
  if (selectionPainted_) {
    if (!focused && (lostFocusSelectionPaint_ != nil)) {
      font = [lostFocusSelectionPaint_ getFont];
    }
    if (font == nil) {
      font = [((RAREPaintBucket *) nil_chk(selectionPaint_)) getFont];
    }
  }
  return font;
}

- (RAREUIColor *)getSelectionForegroundWithBoolean:(BOOL)focused {
  RAREUIColor *fg = nil;
  if (selectionPainted_) {
    if (!focused && (lostFocusSelectionPaint_ != nil)) {
      fg = [lostFocusSelectionPaint_ getForegroundColor];
    }
    if (fg == nil) {
      fg = [((RAREPaintBucket *) nil_chk(selectionPaint_)) getForegroundColor];
    }
  }
  return fg;
}

- (RAREPaintBucket *)getSelectionPaint {
  return selectionPainted_ ? selectionPaint_ : nil;
}

- (RAREPaintBucket *)getSelectionPaintForExternalPainterWithBoolean:(BOOL)focused {
  if (!selectionPainted_ || handlesSelection_) {
    return nil;
  }
  RAREPaintBucket *pb = nil;
  if (!focused && (lostFocusSelectionPaint_ != nil)) {
    pb = lostFocusSelectionPaint_;
  }
  if (pb == nil) {
    pb = selectionPaint_;
  }
  return pb;
}

- (RAREPaintBucket *)getSelectionPaintWithBoolean:(BOOL)focused {
  RAREPaintBucket *pb = nil;
  if (selectionPainted_) {
    if (!focused && (lostFocusSelectionPaint_ != nil)) {
      pb = lostFocusSelectionPaint_;
    }
    if (pb == nil) {
      pb = selectionPaint_;
    }
  }
  return pb;
}

- (BOOL)isAutoHilight {
  return autoHilight_;
}

- (BOOL)isPaintRowBackground {
  return paintRowBackground_;
}

- (BOOL)isSelectionPainted {
  return selectionPainted_;
}

- (BOOL)isHandlesSelection {
  return handlesSelection_;
}

- (RAREUIInsets *)getSelectesInsets {
  RAREUIInsets *in = insets_;
  if ((selectedInsets_ == nil) && handlesSelection_ && (in != nil)) {
    selectedInsets_ = [[RAREUIInsets alloc] initWithRAREUIInsets:in];
    RAREPaintBucket *pb = [self getSelectionPaint];
    id<RAREiPlatformBorder> b = [((RAREPaintBucket *) nil_chk(pb)) getBorder];
    RAREUIInsets *inn = (b == nil) ? nil : [b getBorderInsetsWithRAREUIInsets:(RAREUIInsets *) check_class_cast(nil, [RAREUIInsets class])];
    if (inn != nil) {
      selectedInsets_->left_ -= inn->left_;
      selectedInsets_->right_ -= inn->right_;
      selectedInsets_->top_ -= inn->top_;
      selectedInsets_->bottom_ -= inn->bottom_;
    }
  }
  return selectedInsets_;
}

+ (void)initialize {
  if (self == [RAREaListItemRenderer class]) {
    RAREaListItemRenderer_defaultItem_ = [[RARERenderableDataItem alloc] initWithId:@""];
  }
}

- (void)copyAllFieldsTo:(RAREaListItemRenderer *)other {
  [super copyAllFieldsTo:other];
  other->alwaysCallSetBorder_ = alwaysCallSetBorder_;
  other->autoHilight_ = autoHilight_;
  other->autoHilightPaint_ = autoHilightPaint_;
  other->componentPainter_ = componentPainter_;
  other->converter_ = converter_;
  other->delayedIcon_ = delayedIcon_;
  other->disabledColor_ = disabledColor_;
  other->handlesSelection_ = handlesSelection_;
  other->insets_ = insets_;
  other->itemDescription_ = itemDescription_;
  other->lostFocusSelectionPaint_ = lostFocusSelectionPaint_;
  other->noicon_ = noicon_;
  other->paintRowBackground_ = paintRowBackground_;
  other->pressedPaint_ = pressedPaint_;
  other->selectedInsets_ = selectedInsets_;
  other->selectionPaint_ = selectionPaint_;
  other->selectionPainted_ = selectionPainted_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "configureRenderingComponentWithRAREiPlatformComponent:withRAREiPlatformRenderingComponent:withRARERenderableDataItem:withInt:withBoolean:withBoolean:withRAREColumn:withRARERenderableDataItem:", NULL, "LJavaLangCharSequence", 0x1, NULL },
    { "getAutoHilightPaint", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getConverter", NULL, "LRAREUTiStringConverter", 0x1, NULL },
    { "getDelayedIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getInsets", NULL, "LRAREUIInsets", 0x1, NULL },
    { "getItemDescription", NULL, "LRAREColumn", 0x1, NULL },
    { "getLostFocusSelectionPaint", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getPressedPaint", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getSelectionFontWithBoolean:", NULL, "LRAREUIFont", 0x1, NULL },
    { "getSelectionForegroundWithBoolean:", NULL, "LRAREUIColor", 0x1, NULL },
    { "getSelectionPaint", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getSelectionPaintForExternalPainterWithBoolean:", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getSelectionPaintWithBoolean:", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "isAutoHilight", NULL, "Z", 0x1, NULL },
    { "isPaintRowBackground", NULL, "Z", 0x1, NULL },
    { "isSelectionPainted", NULL, "Z", 0x1, NULL },
    { "isHandlesSelection", NULL, "Z", 0x1, NULL },
    { "getSelectesInsets", NULL, "LRAREUIInsets", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "defaultItem_", NULL, 0xc, "LRARERenderableDataItem" },
    { "selectionPainted_", NULL, 0x4, "Z" },
    { "paintRowBackground_", NULL, 0x4, "Z" },
    { "handlesSelection_", NULL, 0x4, "Z" },
    { "autoHilight_", NULL, 0x4, "Z" },
    { "autoHilightPaint_", NULL, 0x4, "LRAREPaintBucket" },
    { "componentPainter_", NULL, 0x4, "LRAREUIComponentPainter" },
    { "converter_", NULL, 0x4, "LRAREUTiStringConverter" },
    { "delayedIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "disabledColor_", NULL, 0x4, "LRAREUIColor" },
    { "insets_", NULL, 0x4, "LRAREUIInsets" },
    { "selectedInsets_", NULL, 0x4, "LRAREUIInsets" },
    { "itemDescription_", NULL, 0x4, "LRAREColumn" },
    { "lostFocusSelectionPaint_", NULL, 0x4, "LRAREPaintBucket" },
    { "noicon_", NULL, 0x4, "Z" },
    { "alwaysCallSetBorder_", NULL, 0x4, "Z" },
    { "pressedPaint_", NULL, 0x4, "LRAREPaintBucket" },
    { "selectionPaint_", NULL, 0x4, "LRAREPaintBucket" },
  };
  static J2ObjcClassInfo _RAREaListItemRenderer = { "aListItemRenderer", "com.appnativa.rare.ui.renderer", NULL, 0x401, 18, methods, 18, fields, 0, NULL};
  return &_RAREaListItemRenderer;
}

@end
