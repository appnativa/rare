//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/aWindowManager.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/exception/AbortOperationException.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/exception/InvalidConfigurationException.h"
#include "com/appnativa/rare/iAsyncLoadStatusHandler.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/iWeakReference.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/net/HTTPException.h"
#include "com/appnativa/rare/net/iURLConnection.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/platform/aAppContext.h"
#include "com/appnativa/rare/scripting/Functions.h"
#include "com/appnativa/rare/scripting/iScriptHandler.h"
#include "com/appnativa/rare/spot/Font.h"
#include "com/appnativa/rare/spot/MainWindow.h"
#include "com/appnativa/rare/spot/MenuBar.h"
#include "com/appnativa/rare/spot/MenuItem.h"
#include "com/appnativa/rare/spot/Rectangle.h"
#include "com/appnativa/rare/spot/StatusBar.h"
#include "com/appnativa/rare/spot/ToolBar.h"
#include "com/appnativa/rare/spot/Viewer.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/spot/WidgetPane.h"
#include "com/appnativa/rare/ui/BorderUtils.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Frame.h"
#include "com/appnativa/rare/ui/ToolBarHolder.h"
#include "com/appnativa/rare/ui/UIBorderHelper.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontHelper.h"
#include "com/appnativa/rare/ui/UIImageIcon.h"
#include "com/appnativa/rare/ui/UIPopupMenu.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/ViewerCreator.h"
#include "com/appnativa/rare/ui/WidgetListener.h"
#include "com/appnativa/rare/ui/aWidgetListener.h"
#include "com/appnativa/rare/ui/aWindowManager.h"
#include "com/appnativa/rare/ui/event/iWindowListener.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformComponentFactory.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformMenuBar.h"
#include "com/appnativa/rare/ui/iPlatformWindowManager.h"
#include "com/appnativa/rare/ui/iPopup.h"
#include "com/appnativa/rare/ui/iStatusBar.h"
#include "com/appnativa/rare/ui/iToolBar.h"
#include "com/appnativa/rare/ui/iToolBarHolder.h"
#include "com/appnativa/rare/ui/iWindow.h"
#include "com/appnativa/rare/ui/iWindowManager.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/util/DataParser.h"
#include "com/appnativa/rare/util/MIMEMap.h"
#include "com/appnativa/rare/viewer/ToolBarViewer.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/aContainer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iTarget.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTAny.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTException.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/ObjectHolder.h"
#include "com/appnativa/util/SNumber.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/EventObject.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

@implementation RAREaWindowManager

static NSString * RAREaWindowManager_BASE_VIEWER_ = @"com.appnativa.rare.spot.Viewer";

+ (NSString *)BASE_VIEWER {
  return RAREaWindowManager_BASE_VIEWER_;
}

+ (void)setBASE_VIEWER:(NSString *)BASE_VIEWER {
  RAREaWindowManager_BASE_VIEWER_ = BASE_VIEWER;
}

- (id)initWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)app {
  if (self = [super init]) {
    activeViewers_ = [[JavaUtilHashMap alloc] init];
    theTargets_ = [[JavaUtilHashMap alloc] init];
    self->appContext_ = app;
    contextURL_ = [((id<RAREiPlatformAppContext>) nil_chk(app)) getContextURL];
    NSString *s = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getStringWithNSString:@"Rare.runtime.componentCreator"];
    if (s != nil) {
      componentCreator_ = (id<RAREiPlatformComponentFactory>) check_protocol_cast([RAREPlatform createObjectWithNSString:s], @protocol(RAREiPlatformComponentFactory));
      [((id<RAREiPlatformComponentFactory>) nil_chk(componentCreator_)) setAppContextWithRAREiPlatformAppContext:app];
    }
  }
  return self;
}

- (id<RAREiViewer>)activateViewerWithRAREActionLink:(RAREActionLink *)link {
  return [self activateViewerWithRAREiWidget:nil withRAREActionLink:link];
}

- (id<RAREiViewer>)activateViewerWithRAREiWidget:(id<RAREiWidget>)context
                              withRAREActionLink:(RAREActionLink *)link {
  if (context == nil) {
    context = [((RAREActionLink *) nil_chk(link)) getContext];
  }
  id<RAREiViewer> v = [self createViewerWithRAREiWidget:context withRAREActionLink:link];
  if (v != nil) {
    NSString *target = [((RAREActionLink *) nil_chk(link)) getTargetName];
    id<RAREiViewer> ov = [self setViewerWithNSString:target withRAREiWidget:context withRAREiViewer:v withJavaUtilMap:[link getWindowOptions]];
    if ((ov != nil) && [ov isAutoDispose]) {
      [ov dispose];
    }
  }
  return v;
}

- (id<RAREiViewer>)activateViewerWithRAREiWidget:(id<RAREiWidget>)context
                              withRARESPOTViewer:(RARESPOTViewer *)cfg
                                    withNSString:(NSString *)target {
  id<RAREiViewer> v = [self createViewerWithRAREiWidget:context withRARESPOTViewer:cfg withJavaNetURL:nil];
  if (v != nil) {
    (void) [self setViewerWithNSString:target withRAREiWidget:context withRAREiViewer:v withJavaUtilMap:nil];
  }
  return v;
}

- (void)addWindowListenerWithRAREiWindowListener:(id<RAREiWindowListener>)l {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) addWindowListenerWithRAREiWindowListener:l];
}

- (void)asyncActivateViewerWithRAREActionLink:(RAREActionLink *)link {
  [self asyncActivateViewerWithRAREiWidget:nil withRAREActionLink:link];
}

- (void)asyncActivateViewerWithRAREiWidget:(id<RAREiWidget>)context
                        withRAREActionLink:(RAREActionLink *)link {
  if (context == nil) {
    context = [((RAREActionLink *) nil_chk(link)) getContext];
  }
  if (context == nil) {
    context = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getRootViewer];
  }
  @try {
    (void) [RAREViewerCreator createViewerWithRAREiWidget:context withRAREActionLink:link withNSString:[((RAREActionLink *) nil_chk(link)) getTargetName]];
  }
  @catch (JavaNetMalformedURLException *e) {
    @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
  }
}

- (void)center {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) center];
}

- (void)changeTargetNameWithNSString:(NSString *)oldname
                        withNSString:(NSString *)newname
                     withRAREiTarget:(id<RAREiTarget>)target {
  if ([((JavaUtilHashMap *) nil_chk(theTargets_)) getWithId:newname] != nil) {
    @throw [[RAREApplicationException alloc] initWithNSString:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.targetExists"] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ newname } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  id<RAREiTarget> t = [theTargets_ removeWithId:oldname];
  if (t != target) {
    (void) [theTargets_ putWithId:oldname withId:t];
  }
  (void) [theTargets_ putWithId:newname withId:target];
}

- (void)clearTargetWithNSString:(NSString *)target {
  id<RAREiTarget> t = [self getTargetWithNSString:target];
  if (t != nil) {
    id<RAREiViewer> v = [t removeViewer];
    if ((v != nil) && [v isAutoDispose]) {
      [v dispose];
    }
  }
}

- (void)close {
  if (mainFrame_ != nil) {
    [mainFrame_ close];
  }
}

- (void)configureStandardStuffWithRARESPOTMainWindow:(RARESPOTMainWindow *)cfg {
  if ([((RAREaWidgetListener *) nil_chk(widgetListener_)) isEnabledWithNSString:[RAREiConstants EVENT_OPENED]] || [widgetListener_ isEnabledWithNSString:[RAREiConstants EVENT_WILL_CLOSE]] || [widgetListener_ isEnabledWithNSString:[RAREiConstants EVENT_CLOSED]]) {
    [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) addWindowListenerWithRAREiWindowListener:widgetListener_];
  }
  NSString *s = [((SPOTPrintableString *) nil_chk(((RARESPOTMainWindow *) nil_chk(cfg))->windowListenerClass_)) getValue];
  if ((s != nil) && ![((RAREaAppContext *) check_class_cast(appContext_, [RAREaAppContext class])) isDesignContext]) {
    s = [s trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] > 0) {
      @try {
        IOSClass *cls = [RAREaPlatformHelper loadClassWithNSString:s];
        [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) addWindowListenerWithRAREiWindowListener:(id<RAREiWindowListener>) check_protocol_cast([((IOSClass *) nil_chk(cls)) newInstance], @protocol(RAREiWindowListener))];
      }
      @catch (JavaLangException *e) {
        @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
      }
    }
  }
  if ([((SPOTPrintableString *) nil_chk(cfg->bgColor_)) spot_hasValue]) {
    windowPaintbucket_ = [RAREColorUtils getPaintBucketWithSPOTPrintableString:cfg->bgColor_];
    if (windowPaintbucket_ != nil) {
      [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getComponent])) setComponentPainterWithRAREiPlatformComponentPainter:[windowPaintbucket_ getCachedComponentPainter]];
    }
  }
  RAREaContainer *context = (RAREaContainer *) check_class_cast([((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getRootViewer], [RAREaContainer class]);
  if ([cfg getBorders] != nil) {
    id<RAREiPlatformBorder> b = [RAREBorderUtils createBorderWithRAREiWidget:context withSPOTSet:[cfg getBorders] withRAREiPlatformBorder:nil];
    if (b != nil) {
      [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getComponent])) setBorderWithRAREiPlatformBorder:b];
    }
  }
  RAREUIImageIcon *icon;
  s = [((SPOTPrintableString *) nil_chk(cfg->icon_)) getValue];
  if ((s != nil) && ([s indexOf:','] != -1)) {
    id<JavaUtilList> l = [RAREUTCharScanner getTokensWithNSString:s withChar:',' withBoolean:YES];
    id<JavaUtilList> images = [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(l)) size]];
    for (NSString * __strong ic in l) {
      icon = (RAREUIImageIcon *) check_class_cast([((RAREaContainer *) nil_chk(context)) getIconWithNSString:ic], [RAREUIImageIcon class]);
      if (icon != nil) {
        [images addWithId:icon];
        if (![self supportsMultipleWindowIcons]) {
          break;
        }
      }
    }
    if ([images size] > 0) {
      [self setWindowIconsWithJavaUtilList:images];
    }
  }
  else if ((s != nil) && ([s sequenceLength] > 0)) {
    icon = (RAREUIImageIcon *) check_class_cast([((RAREaContainer *) nil_chk(context)) getIconWithNSString:s], [RAREUIImageIcon class]);
    if (icon != nil) {
      id<JavaUtilList> images = [[JavaUtilArrayList alloc] initWithInt:1];
      [images addWithId:icon];
      [self setWindowIconsWithJavaUtilList:images];
    }
  }
  if ([((SPOTPrintableString *) nil_chk(cfg->customProperties_)) getValue] != nil) {
    [self handleCustomPropertiesWithRARESPOTMainWindow:cfg withJavaUtilMap:[RAREDataParser parseNameValuePairsWithSPOTPrintableString:cfg->customProperties_]];
  }
  RAREUIFont *f = [RAREUIFontHelper getFontWithRAREUIFont:(RAREUIFont *) check_class_cast(nil, [RAREUIFont class]) withRARESPOTFont:cfg->font_];
  if (f == nil) {
    f = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getFontWithNSString:@"Rare.font.default"];
  }
  if ((f != nil) && (f != [RAREUIFontHelper getDefaultFont])) {
    [RAREUIFontHelper setDefaultFontWithRAREUIFont:f];
  }
  s = [((SPOTPrintableString *) nil_chk(cfg->title_)) getValue];
  if ((s == nil) || ([s sequenceLength] == 0)) {
    s = @"My Application";
  }
  else {
    s = [((RAREaContainer *) nil_chk(context)) expandStringWithNSString:s withBoolean:NO];
  }
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) setTitleWithNSString:s];
  contextURL_ = [appContext_ getContextURL];
  if ([cfg getMenuBar] != nil) {
    RARESPOTMenuBar *mb = [cfg getMenuBar];
    if ([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) okForOSWithISPOTElement:mb]) {
      menuBar_ = [RAREaPlatformHelper createMenuBarWithRAREiContainer:context withRARESPOTMenuBar:mb];
      [self setMenuBarWithRAREiPlatformMenuBar:menuBar_];
    }
  }
  if ([cfg getToolbars] != nil) {
    if ([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) okForOSWithISPOTElement:[cfg getToolbars]]) {
      [self setToolBarHolderWithRAREiToolBarHolder:[RAREToolBarHolder createWithRAREiContainer:context withSPOTSet:[cfg getToolbars]]];
    }
  }
  if ([cfg getStatusBar] != nil) {
    RARESPOTStatusBar *sb = [cfg getStatusBar];
    if ([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) okForOSWithISPOTElement:sb]) {
      [self setStatusBarWithRAREiStatusBar:[self createStatusBarWithRARESPOTStatusBar:sb]];
    }
  }
  RAREActionLink *link = [RAREUtils createLinkWithRAREiWidget:context withNSString:[RAREiTarget TARGET_WORKSPACE] withSPOTAny:cfg->viewer_];
  if (link != nil) {
    @try {
      id<RAREiViewer> v = [self createViewerWithRAREActionLink:link];
      [self setWorkspaceViewerWithRAREiViewer:v];
    }
    @catch (JavaLangException *e) {
      [self handleExceptionWithJavaLangThrowable:e];
    }
    @finally {
      [link close];
    }
  }
  [((RAREaContainer *) nil_chk(context)) setPreferredSizeWithNSString:[((SPOTPrintableString *) nil_chk(((RARESPOTRectangle *) nil_chk(cfg->bounds_))->width_)) getValue] withNSString:[((SPOTPrintableString *) nil_chk(cfg->bounds_->height_)) getValue]];
}

- (id<RAREiWindow>)createDialogWithRAREiWidget:(id<RAREiWidget>)context
                               withJavaUtilMap:(id<JavaUtilMap>)options {
  if (options == nil) {
    options = [JavaUtilCollections EMPTY_MAP];
  }
  id<RAREiWindow> w = [self createWindowWithRAREiWidget:context withJavaUtilMap:options];
  return w;
}

- (id<RAREiWindow>)createDialogWithRAREiWidget:(id<RAREiWidget>)context
                                  withNSString:(NSString *)title
                                   withBoolean:(BOOL)modal {
  return [self createDialogWithRAREiWidget:context withNSString:nil withNSString:title withBoolean:modal];
}

- (id<RAREiWindow>)createDialogWithRAREiWidget:(id<RAREiWidget>)context
                                  withNSString:(NSString *)target
                                  withNSString:(NSString *)title
                                   withBoolean:(BOOL)modal {
  return [self createWindowOrDialogWithRAREiWidget:context withNSString:target withNSString:title withBoolean:modal withBoolean:YES];
}

- (RAREUIPopupMenu *)createPopupMenuWithRAREiWidget:(id<RAREiWidget>)context
                                     withJavaNetURL:(JavaNetURL *)url
                                        withBoolean:(BOOL)addTextItems {
  if (context == nil) {
    context = [self getViewer];
  }
  id<RAREiURLConnection> conn = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) openConnectionWithJavaNetURL:url];
  id<iSPOTElement> e = [RAREDataParser loadSPOTObjectWithRAREiWidget:context withRAREiURLConnection:conn withISPOTElement:nil];
  SPOTSet *menus = nil;
  if ([(id) e isKindOfClass:[RARESPOTMenuItem class]]) {
    RARESPOTMenuItem *mi = (RARESPOTMenuItem *) check_class_cast(e, [RARESPOTMenuItem class]);
    menus = [((RARESPOTMenuItem *) nil_chk(mi)) getSubMenu];
  }
  else if ([(id) e isKindOfClass:[RARESPOTWidget class]]) {
    RARESPOTWidget *wc = (RARESPOTWidget *) check_class_cast(e, [RARESPOTWidget class]);
    menus = [((RARESPOTWidget *) nil_chk(wc)) getPopupMenu];
  }
  if (menus == nil) {
    return nil;
  }
  return [[RAREUIPopupMenu alloc] initWithRAREiWidget:context withSPOTSet:menus withBoolean:addTextItems];
}

- (RAREUIPopupMenu *)createPopupMenuWithRAREUIPopupMenu:(RAREUIPopupMenu *)menu
                                        withRAREiWidget:(id<RAREiWidget>)context
                                            withSPOTSet:(SPOTSet *)menus
                                            withBoolean:(BOOL)addTextItems {
  if (context == nil) {
    context = [self getViewer];
  }
  return [[RAREUIPopupMenu alloc] initWithRAREiWidget:context withSPOTSet:menus withBoolean:addTextItems];
}

- (id<RAREiStatusBar>)createStatusBarWithRARESPOTStatusBar:(RARESPOTStatusBar *)cfg {
  if (cfg == nil) {
    cfg = [[RARESPOTStatusBar alloc] init];
  }
  return (id<RAREiStatusBar>) check_protocol_cast([self createViewerWithRAREiWidget:[self getRootViewer] withRARESPOTViewer:cfg withJavaNetURL:contextURL_], @protocol(RAREiStatusBar));
}

- (id<RAREiToolBar>)createToolBarWithBoolean:(BOOL)horizontal {
  RARESPOTToolBar *cfg = [[RARESPOTToolBar alloc] init];
  [((SPOTBoolean *) nil_chk(cfg->horizontal_)) setValueWithBoolean:horizontal];
  return [self createToolBarWithRARESPOTToolBar:cfg];
}

- (id<RAREiToolBar>)createToolBarWithRARESPOTToolBar:(RARESPOTToolBar *)cfg {
  RAREToolBarViewer *tb = [[RAREToolBarViewer alloc] init];
  [tb configureWithRARESPOTViewer:cfg];
  return tb;
}

- (id<RAREiViewer>)createViewerWithRAREActionLink:(RAREActionLink *)link {
  return [self createViewerWithRAREiWidget:nil withRAREActionLink:link];
}

- (id<RAREiViewer>)createViewerWithRAREiWidget:(id<RAREiWidget>)context
                            withRAREActionLink:(RAREActionLink *)link {
  id<RAREiViewer> v = nil;
  if (context == nil) {
    context = [((RAREActionLink *) nil_chk(link)) getContext];
  }
  RARESPOTViewer *vcfg = [((RAREActionLink *) nil_chk(link)) getViewerConfiguration];
  if (context == nil) {
    context = [self getViewer];
  }
  @try {
    NSString *mimeType = [link getMimeType];
    if (vcfg != nil) {
      if (mimeType == nil) {
        mimeType = [RAREPlatform getSPOTNameWithIOSClass:[vcfg getClass]];
      }
      return [self createViewerWithRAREiWidget:context withNSString:mimeType withRARESPOTViewer:vcfg withJavaNetURL:[link getURLWithRAREUTiURLResolver:context]];
    }
    else {
      id<RAREiURLConnection> con = nil;
      NSString *ct = nil;
      @try {
        con = [link getConnection];
      }
      @catch (JavaIoEOFException *e) {
        con = [link getConnection];
      }
      if (mimeType == nil) {
        mimeType = [((id<RAREiURLConnection>) nil_chk(con)) getContentType];
        if ([((id<RAREiPlatformAppContext>) nil_chk(appContext_)) isInSandbox] && [@"content/unknown" isEqual:mimeType]) {
          mimeType = [RAREMIMEMap typeFromFileWithNSString:[((JavaNetURL *) nil_chk([con getURL])) getFile]];
        }
      }
      vcfg = [RAREDataParser checkAndInstantiateViewerWithRAREiWidget:context withNSString:mimeType withRAREiURLConnection:con];
      if (vcfg != nil) {
        ct = [RAREPlatform getSPOTNameWithIOSClass:[vcfg getClass]];
      }
      else if (con != nil) {
        ct = (mimeType != nil) ? mimeType : [con getContentType];
      }
      v = (ct == nil) ? nil : [self createViewerWithRAREiWidget:context withNSString:ct withRARESPOTViewer:vcfg withJavaNetURL:[link getURLWithRAREUTiURLResolver:context]];
      if ((v != nil) && (vcfg == nil)) {
        [v setDataLinkWithRAREActionLink:link];
      }
      return v;
    }
  }
  @catch (JavaLangException *ex) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:ex];
    if (v != nil) {
      @try {
        [v dispose];
      }
      @catch (JavaLangException *e) {
        [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
      }
    }
    if ([ex isKindOfClass:[SPOTException class]]) {
      JavaNetURL *url = nil;
      @try {
        url = [link getURLWithRAREUTiURLResolver:context];
      }
      @catch (JavaLangException *uex) {
        [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:uex];
      }
      if (url == nil) {
        url = [((id<RAREiViewer>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getViewer])) getContextURL];
      }
      NSString *s = (url == nil) ? nil : [url description];
      @throw [RAREDataParser invalidConfigurationExceptionWithRAREiPlatformAppContext:appContext_ withJavaLangThrowable:ex withNSString:s];
    }
    if ([ex isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast(ex, [JavaLangRuntimeException class]);
    }
    @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:ex];
  }
  @finally {
    if (v != nil) {
      [v setViewerActionLinkWithRAREActionLink:link];
    }
    [link close];
  }
}

- (id<RAREiViewer>)createViewerWithRAREiWidget:(id<RAREiWidget>)context
                                  withNSString:(NSString *)mimeType
                            withRARESPOTViewer:(RARESPOTViewer *)cfg
                                withJavaNetURL:(JavaNetURL *)contextURL {
  if ((contextURL != nil) && [((NSString *) nil_chk([RAREiConstants INLINE_PROTOCOL_STRING])) isEqual:[contextURL getProtocol]]) {
    contextURL = nil;
  }
  if (mimeType == nil) {
    mimeType = [RAREPlatform getSPOTNameWithIOSClass:[((RARESPOTViewer *) nil_chk(cfg)) getClass]];
  }
  int n = [((NSString *) nil_chk(mimeType)) indexOfString:@"viewer="];
  if (n == -1) {
    n = [mimeType indexOf:';'];
    if (n != -1) {
      mimeType = [mimeType substring:0 endIndex:n];
    }
    mimeType = [((NSString *) nil_chk(mimeType)) trim];
  }
  else {
    int p = [mimeType indexOf:';' fromIndex:n];
    if (p == -1) {
      mimeType = [mimeType substring:n + 7];
    }
    else {
      mimeType = [mimeType substring:n + 7 endIndex:p];
    }
    if ([((NSString *) nil_chk(mimeType)) indexOf:'.'] == -1) {
      mimeType = [NSString stringWithFormat:@"%@.%@", [RAREPlatform RARE_SPOT_PACKAGE_NAME], mimeType];
    }
    if ((cfg != nil) && [((NSString *) nil_chk(RAREaWindowManager_BASE_VIEWER_)) isEqual:mimeType]) {
      mimeType = [self getViewerClassNameWithRARESPOTViewer:cfg];
    }
    if ([((NSString *) nil_chk(mimeType)) indexOfString:@".rare."] != -1) {
      mimeType = [mimeType replace:@".rare." withSequence:@".rare."];
    }
    @try {
      RARESPOTWidget *w = (RARESPOTWidget *) check_class_cast([((IOSClass *) nil_chk([RAREaPlatformHelper loadClassWithNSString:mimeType])) newInstance], [RARESPOTWidget class]);
      if ([w isKindOfClass:[RARESPOTViewer class]]) {
        cfg = (RARESPOTViewer *) check_class_cast(w, [RARESPOTViewer class]);
      }
      else {
        cfg = [[RARESPOTWidgetPane alloc] initWithRARESPOTWidget:w];
        [((SPOTBoolean *) nil_chk(((RARESPOTWidgetPane *) check_class_cast(cfg, [RARESPOTWidgetPane class]))->autoResizeWidget_)) setValueWithBoolean:NO];
      }
      mimeType = [RAREPlatform getSPOTNameWithIOSClass:[((RARESPOTViewer *) nil_chk(cfg)) getClass]];
    }
    @catch (JavaLangException *ex) {
      n = [((NSString *) nil_chk(mimeType)) lastIndexOf:'.'];
      NSString *s = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.unknownViewerType"];
      @throw [[RAREApplicationException alloc] initWithNSString:[RAREUTHelper expandStringWithNSString:s withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [mimeType substring:n + 1] } count:1 type:[IOSClass classWithClass:[NSString class]]]]];
    }
  }
  IOSClass *cls;
  NSString *s = [self getViewerClassNameWithRARESPOTViewer:cfg];
  if (s != nil) {
    if ([s indexOfString:@".rare."] != -1) {
      s = [s replace:@".rare." withSequence:@".rare."];
    }
    @try {
      cls = [RAREPlatform loadClassWithNSString:s];
    }
    @catch (JavaLangClassNotFoundException *ex) {
      cls = nil;
    }
  }
  else {
    cls = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getWidgetHandlerWithNSString:mimeType];
    if ((cls == nil) && (cfg != nil)) {
      cls = [appContext_ getWidgetHandlerWithNSString:[RAREPlatform getSPOTNameWithIOSClass:[cfg getClass]]];
    }
  }
  if ((cls == nil) && (contextURL != nil)) {
    s = [contextURL getPath];
    n = [((NSString *) nil_chk(s)) lastIndexOf:'.'];
    if (n != -1) {
      cls = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getWidgetHandlerWithNSString:[s substring:n]];
    }
  }
  id<RAREiViewer> v = nil;
  if ((cls == nil) && (cfg == nil)) {
    @try {
      cls = [RAREaPlatformHelper loadClassWithNSString:@"com.appnativa.rare.viewer.WebBrowser"];
    }
    @catch (JavaLangClassNotFoundException *ignore) {
    }
  }
  if (cls == nil) {
    if (contextURL != nil) {
      [RAREPlatform debugLogWithNSString:[NSString stringWithFormat:@"context=%@", contextURL]];
    }
    [RAREPlatform debugLogWithNSString:[NSString stringWithFormat:@"cfg=%@", cfg]];
    @throw [[RAREApplicationException alloc] initWithNSString:[NSString stringWithFormat:@"%@%@", [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.unknownType"], mimeType]];
  }
  else {
    @try {
      v = (id<RAREiViewer>) check_protocol_cast([cls newInstance], @protocol(RAREiViewer));
    }
    @catch (JavaLangThrowable *ex) {
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:ex];
    }
  }
  if (context == nil) {
    context = [self getRootViewer];
  }
  [((id<RAREiViewer>) nil_chk(v)) setParentWithRAREiContainer:[((id<RAREiWidget>) nil_chk(context)) getContainerViewer]];
  [v setContextURLWithJavaNetURL:contextURL];
  if (cfg != nil) {
    [v setLinkedDataWithId:cfg->linkedData_];
  }
  if (cfg != nil) {
    @try {
      [v configureWithRARESPOTViewer:cfg];
    }
    @catch (JavaLangException *ex) {
      @try {
        [v dispose];
      }
      @catch (JavaLangException *e) {
        [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
      }
      if ([ex isKindOfClass:[JavaLangRuntimeException class]]) {
        @throw (JavaLangRuntimeException *) check_class_cast(ex, [JavaLangRuntimeException class]);
      }
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:ex];
    }
  }
  return v;
}

- (id<RAREiViewer>)createViewerWithRAREiWidget:(id<RAREiWidget>)context
                            withRARESPOTViewer:(RARESPOTViewer *)cfg
                                withJavaNetURL:(JavaNetURL *)contextURL {
  NSString *ct = [RAREPlatform getSPOTNameWithIOSClass:[((RARESPOTViewer *) nil_chk(cfg)) getClass]];
  return [self createViewerWithRAREiWidget:context withNSString:ct withRARESPOTViewer:cfg withJavaNetURL:contextURL];
}

- (RARESPOTWidget *)createWidgetConfigWithRAREActionLink:(RAREActionLink *)link {
  if ([((RAREActionLink *) nil_chk(link)) getViewerConfiguration] != nil) {
    return [link getViewerConfiguration];
  }
  id<RAREiWidget> context = [link getContext];
  if (context == nil) {
    context = [self getViewer];
  }
  @try {
    NSString *mimeType = [link getMimeType];
    id<RAREiURLConnection> con = nil;
    @try {
      con = [link getConnection];
    }
    @catch (JavaIoEOFException *e) {
      con = [link getConnection];
    }
    if (mimeType == nil) {
      mimeType = [((id<RAREiURLConnection>) nil_chk(con)) getContentType];
      if ([((id<RAREiPlatformAppContext>) nil_chk(appContext_)) isInSandbox] && [@"content/unknown" isEqual:mimeType]) {
        mimeType = [RAREMIMEMap typeFromFileWithNSString:[((JavaNetURL *) nil_chk([con getURL])) getFile]];
      }
    }
    return [RAREDataParser checkAndInstantiateViewerWithRAREiWidget:context withNSString:mimeType withRAREiURLConnection:con];
  }
  @catch (JavaLangException *ex) {
    if ([ex isKindOfClass:[SPOTException class]]) {
      JavaNetURL *url = nil;
      @try {
        url = [link getURLWithRAREUTiURLResolver:context];
      }
      @catch (JavaLangException *uex) {
        [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:uex];
      }
      if (url == nil) {
        url = [((id<RAREiViewer>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getViewer])) getContextURL];
      }
      NSString *s = (url == nil) ? nil : [url description];
      @throw [RAREDataParser invalidConfigurationExceptionWithRAREiPlatformAppContext:appContext_ withJavaLangThrowable:ex withNSString:s];
    }
    if ([ex isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast(ex, [JavaLangRuntimeException class]);
    }
    @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:ex];
  }
  @finally {
    [link close];
  }
}

- (id<RAREiWindow>)createWindowWithRAREiWidget:(id<RAREiWidget>)context
                               withJavaUtilMap:(id<JavaUtilMap>)options {
  id<RAREiPlatformAppContext> app = [((id<RAREiWidget>) nil_chk(context)) getAppContext];
  BOOL modal = YES;
  NSString *type;
  id o;
  if (options == nil) {
    options = [JavaUtilCollections EMPTY_MAP];
  }
  o = [((id<JavaUtilMap>) nil_chk(options)) getWithId:@"modal"];
  if ([o isKindOfClass:[JavaLangBoolean class]]) {
    modal = [(JavaLangBoolean *) check_class_cast(o, [JavaLangBoolean class]) booleanValue];
  }
  else if ([o isKindOfClass:[NSString class]]) {
    modal = [RAREUTSNumber booleanValueWithNSString:(NSString *) check_class_cast(o, [NSString class])];
  }
  type = (NSString *) check_class_cast([options getWithId:@"windowtype"], [NSString class]);
  if (type == nil) {
    type = (NSString *) check_class_cast([options getWithId:@"dialog"], [NSString class]);
    if ([@"false" equalsIgnoreCase:type]) {
      type = @"frame";
    }
    else {
      type = @"dialog";
    }
  }
  RAREaWindowManager_WindowTypeEnum *windowType;
  @try {
    windowType = [RAREaWindowManager_WindowTypeEnum valueOfWithNSString:[((NSString *) nil_chk(type)) uppercaseStringWithJRELocale:[JavaUtilLocale US]]];
  }
  @catch (JavaLangException *e) {
    windowType = [RAREaWindowManager_WindowTypeEnum FRAME];
  }
  o = [options getWithId:@"emulateMainWindow"];
  if (o == nil) {
    o = [((RAREUIProperties *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(app)) getUIDefaults])) getWithNSString:@"Rare.emulateMainWindow"];
  }
  RAREFrame *main = (RAREFrame *) check_class_cast([((id<RAREiWindow>) nil_chk([((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(app)) getWindowManager])) getMainWindow])) getComponent], [RAREFrame class]);
  BOOL emulate = ((o == [JavaLangBoolean getTRUE]) || [@"true" isEqual:o]);
  BOOL decorated = YES;
  BOOL transparent = NO;
  if (emulate) {
    decorated = ![((RAREFrame *) nil_chk(main)) isUndecorated];
    transparent = [main isTransparent];
  }
  o = [options getWithId:@"decorated"];
  if (o != nil) {
    decorated = [@"true" isEqual:o] || (o == [JavaLangBoolean getTRUE]);
    if (!emulate) {
      transparent = !decorated;
    }
  }
  o = [options getWithId:@"opaque"];
  if (o != nil) {
    transparent = [@"false" isEqual:o] || (o == [JavaLangBoolean getFALSE]);
  }
  id<RAREiWindowManager_iFrame> frame = [self createFrameWithRAREiWidget:context withRAREaWindowManager_WindowTypeEnum:windowType withBoolean:modal withBoolean:transparent withBoolean:decorated];
  id<RAREiPlatformComponent> comp = [((id<RAREiWindowManager_iFrame>) nil_chk(frame)) getComponent];
  RAREWindowViewer *parent = [RAREPlatform getWindowViewerWithRAREiWidget:context];
  id<RAREiScriptHandler> sh = [((RAREWindowViewer *) nil_chk(parent)) getScriptHandler];
  RAREWindowViewer *windowViewer = [[RAREWindowViewer alloc] initWithRAREiPlatformAppContext:appContext_ withNSString:[frame getTargetName] withRAREiWindowManager_iFrame:frame withRAREWindowViewer:parent withRAREiScriptHandler:sh];
  [frame setWindowViewerWithRAREWindowViewer:windowViewer];
  id<JavaUtilMap> map = [RAREaWidgetListener createEventMapWithJavaUtilMap:options];
  if (map != nil) {
    [windowViewer setWidgetListenerWithRAREaWidgetListener:[[RAREWidgetListener alloc] initWithRAREiWidget:windowViewer withJavaUtilMap:map withRAREiScriptHandler:[windowViewer getScriptHandler]]];
  }
  if (emulate) {
    if (windowPaintbucket_ != nil) {
      [windowPaintbucket_ installWithRAREiPlatformComponent:comp];
    }
    if (titleWidgetConfig_ != nil) {
      id<RAREiWidget> w = [RAREaContainer createWidgetWithRAREiContainer:windowViewer withRARESPOTWidget:titleWidgetConfig_];
      [frame setTitleWidgetWithRAREiWidget:w];
    }
  }
  o = [options getWithId:@"cpborder"];
  id<RAREiPlatformBorder> b = nil;
  if ([o conformsToProtocol: @protocol(RAREiPlatformBorder)]) {
    b = (id<RAREiPlatformBorder>) check_protocol_cast(o, @protocol(RAREiPlatformBorder));
  }
  else if (o != nil) {
    b = [RAREUIBorderHelper createBorderWithNSString:[o description]];
  }
  if (b != nil) {
    [((id<RAREiPlatformComponent>) nil_chk(comp)) setBorderWithRAREiPlatformBorder:b];
  }
  NSString *s = (NSString *) check_class_cast([options getWithId:@"status"], [NSString class]);
  if ((s != nil) && ([s sequenceLength] > 0)) {
    s = [s trim];
    RARESPOTStatusBar *sb = nil;
    if ([RAREUTSNumber booleanValueWithNSString:(NSString *) check_class_cast([options getWithId:@"resizable"], [NSString class])] && ![@"false" equalsIgnoreCase:(NSString *) check_class_cast([options getWithId:@"resizeCorner"], [NSString class])]) {
      sb = [[RARESPOTStatusBar alloc] init];
      [((SPOTBoolean *) nil_chk(sb->showMemoryUsage_)) setValueWithBoolean:NO];
      [((SPOTBoolean *) nil_chk(sb->showInsertOverwrite_)) setValueWithBoolean:NO];
      [((SPOTBoolean *) nil_chk(sb->showTime_)) setValueWithBoolean:NO];
      [((SPOTBoolean *) nil_chk(sb->showResizeCorner_)) setValueWithBoolean:YES];
    }
    id<RAREiStatusBar> isb;
    [frame setStatusBarWithRAREiStatusBar:isb = [self createStatusBarWithRARESPOTStatusBar:sb]];
    [((id<RAREiStatusBar>) nil_chk(isb)) showMessageWithNSString:s];
  }
  [frame finishWindowSetupWithJavaUtilMap:options];
  return frame;
}

- (id<RAREiWindow>)createWindowWithRAREiWidget:(id<RAREiWidget>)context
                                  withNSString:(NSString *)target
                                  withNSString:(NSString *)title {
  return [self createWindowOrDialogWithRAREiWidget:context withNSString:target withNSString:title withBoolean:NO withBoolean:NO];
}

- (id<RAREiWindow>)createWindowOrDialogWithRAREiWidget:(id<RAREiWidget>)context
                                          withNSString:(NSString *)target
                                          withNSString:(NSString *)title
                                           withBoolean:(BOOL)modal
                                           withBoolean:(BOOL)dialog {
  JavaUtilHashMap *options = [[JavaUtilHashMap alloc] init];
  (void) [options putWithId:@"title" withId:title];
  (void) [options putWithId:@"modal" withId:[JavaLangBoolean valueOfWithBoolean:modal]];
  (void) [options putWithId:@"target" withId:target];
  if (dialog) {
    (void) [options putWithId:@"windowtype" withId:@"dialog"];
  }
  id<RAREiWindow> win = [self createWindowWithRAREiWidget:context withJavaUtilMap:options];
  return win;
}

- (void)dispose {
  if (!disposed_) {
    disposed_ = YES;
    @try {
      [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) closePopupWindowsWithBoolean:YES];
      [self destroyTargets];
      [self destroyViewers];
    }
    @catch (JavaLangException *e) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    }
    [self disposeOfWindow];
    mainFrame_ = nil;
    appContext_ = nil;
    scriptHandler_ = nil;
  }
}

- (void)disposeOfWindow {
  id<RAREiViewer> v = [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getViewer];
  if (v != nil) {
    [v dispose];
  }
  else {
    [mainFrame_ disposeOfWindow];
  }
}

- (id<JavaLangRunnable>)getAboutDialogRunner {
  return aboutDialogRunner_;
}

- (id<RAREiPlatformAppContext>)getAppContext {
  return appContext_;
}

- (RAREUIRectangle *)getBounds {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getBounds];
}

- (id<RAREiPlatformComponent>)getComponent {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getComponent];
}

- (id<RAREiPlatformComponentFactory>)getComponentCreator {
  return componentCreator_;
}

- (RAREUIFont *)getDefaultFont {
  return defaultFont_;
}

- (RAREUIFont *)getDefaultMonospacedFont {
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getFontWithNSString:@"Rare.font.plaintext"];
}

- (int)getHeight {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getHeight];
}

- (RAREUIDimension *)getInnerSizeWithRAREUIDimension:(RAREUIDimension *)size {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getInnerSizeWithRAREUIDimension:size];
}

- (id<RAREiWindow>)getMainWindow {
  return mainFrame_;
}

- (id<RAREiPlatformMenuBar>)getMenuBar {
  return (menuBar_ == nil) ? [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getMenuBar] : menuBar_;
}

- (id<RAREiContainer>)getRootViewer {
  if ([self getScriptHandler] != nil) {
    return [((id<RAREiScriptHandler>) nil_chk([self getScriptHandler])) getWindowViewer];
  }
  return nil;
}

- (int)getScreenX {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getScreenX];
}

- (int)getScreenY {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getScreenY];
}

- (id<RAREiScriptHandler>)getScriptHandler {
  return scriptHandler_;
}

- (RAREUIDimension *)getSize {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getSize];
}

- (id<RAREiStatusBar>)getStatusBar {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getStatusBar];
}

- (id<RAREiTarget>)getTarget {
  return workspaceTarget_;
}

- (id<RAREiTarget>)getTargetWithNSString:(NSString *)name {
  return [((JavaUtilHashMap *) nil_chk(theTargets_)) getWithId:name];
}

- (NSString *)getTargetName {
  id<RAREiTarget> t = workspaceTarget_;
  return (t == nil) ? nil : [t getName];
}

- (IOSObjectArray *)getTargets {
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:[((JavaUtilHashMap *) nil_chk(theTargets_)) size] type:[IOSClass classWithProtocol:@protocol(RAREiTarget)]];
  a = [((id<JavaUtilCollection>) nil_chk([theTargets_ values])) toArrayWithNSObjectArray:a];
  return a;
}

- (NSString *)getTitle {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getTitle];
}

- (id<RAREiToolBarHolder>)getToolBarHolder {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getToolBarHolder];
}

- (id)getUIWindow {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getUIWindow];
}

- (JavaNetURL *)getURLWithNSString:(NSString *)url {
  return [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) createURLWithJavaNetURL:contextURL_ withNSString:url];
}

- (int)getUsableScreenHeight {
  return [RAREUIScreen getHeight];
}

- (int)getUsableScreenWidth {
  return [RAREUIScreen getWidth];
}

- (id<RAREiContainer>)getViewer {
  return [self getRootViewer];
}

- (id<RAREiViewer>)getViewerWithNSString:(NSString *)name {
  id<RAREiWeakReference> r = [((JavaUtilHashMap *) nil_chk(activeViewers_)) getWithId:name];
  return (id<RAREiViewer>) check_protocol_cast(((r == nil) ? nil : [r get]), @protocol(RAREiViewer));
}

- (id<RAREiViewer>)getViewerByTargetNameWithNSString:(NSString *)target {
  id<RAREiTarget> t = [self getTargetWithNSString:target];
  return (t == nil) ? nil : [t getViewer];
}

- (IOSObjectArray *)getViewers {
  int len = [((JavaUtilHashMap *) nil_chk(activeViewers_)) size];
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([activeViewers_ values])) iterator];
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:[activeViewers_ size] type:[IOSClass classWithProtocol:@protocol(RAREiViewer)]];
  int i = 0;
  id<RAREiViewer> v;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    v = (id<RAREiViewer>) check_protocol_cast([((id<RAREiWeakReference>) nil_chk([it next])) get], @protocol(RAREiViewer));
    if (v != nil) {
      (void) IOSObjectArray_Set(a, i++, v);
    }
  }
  if (i != len) {
    IOSObjectArray *b = [IOSObjectArray arrayWithLength:i type:[IOSClass classWithProtocol:@protocol(RAREiViewer)]];
    [JavaLangSystem arraycopyWithId:a withInt:0 withId:b withInt:0 withInt:i];
    a = b;
  }
  return a;
}

- (RAREaWidgetListener *)getWidgetListener {
  return widgetListener_;
}

- (int)getWidth {
  return [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getWidth];
}

- (id<JavaUtilList>)getWindowIcons {
  return windowIcons_;
}

- (id<RAREiContainer>)getWindowViewer {
  return [((id<RAREiScriptHandler>) nil_chk(scriptHandler_)) getWindowViewer];
}

- (id<RAREiViewer>)getWorkspaceViewer {
  return [((id<RAREiTarget>) nil_chk(workspaceTarget_)) getViewer];
}

- (void)handleExceptionWithRAREHTTPException:(RAREHTTPException *)e {
  [self showErrorDialogWithJavaLangThrowable:e];
}

- (void)handleExceptionWithRAREInvalidConfigurationException:(RAREInvalidConfigurationException *)e {
  [self showErrorDialogWithJavaLangThrowable:e];
}

- (void)handleExceptionWithJavaIoIOException:(JavaIoIOException *)e {
  [self showErrorDialogWithJavaLangThrowable:e];
}

- (void)handleExceptionWithJavaNetMalformedURLException:(JavaNetMalformedURLException *)e {
  [self showErrorDialogWithJavaLangThrowable:e];
}

- (void)handleExceptionWithJavaLangThrowable:(JavaLangThrowable *)e {
  RAREWindowViewer *w = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getWindowViewer];
  if (![RAREFunctions isRunningInBackground]) {
    [self handleExceptionExWithJavaLangThrowable:e];
  }
  else {
    [((RAREWindowViewer *) nil_chk(w)) invokeLaterWithId:[[RAREaWindowManager_$1 alloc] initWithRAREaWindowManager:self withJavaLangThrowable:e]];
  }
}

- (void)hideWindow {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) hideWindow];
}

- (BOOL)isDesignMode {
  return NO;
}

- (BOOL)isDisposed {
  return scriptHandler_ == nil;
}

- (void)moveByWithFloat:(float)x
              withFloat:(float)y {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) moveByWithFloat:x withFloat:y];
}

- (void)moveToWithFloat:(float)x
              withFloat:(float)y {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) moveToWithFloat:x withFloat:y];
}

- (RAREWindowViewer *)openViewerWindowWithRAREActionLink:(RAREActionLink *)link
                                                  withId:(id)viewerValue {
  id<JavaUtilMap> opts = [((RAREActionLink *) nil_chk(link)) getWindowOptions];
  RAREWindowViewer *w = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getWindowViewer];
  id<RAREiWindow> win = [self createWindowWithRAREiWidget:[self getWorkspaceViewer] withJavaUtilMap:opts];
  id<RAREiContainer> winviewer = [((id<RAREiWindow>) nil_chk(win)) getViewer];
  @try {
    [((id<RAREiContainer>) nil_chk(winviewer)) setContextURLWithJavaNetURL:[link getURLWithRAREUTiURLResolver:nil]];
  }
  @catch (JavaNetMalformedURLException *e) {
    @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:e];
  }
  @try {
    (void) [RAREViewerCreator createViewerWithRAREiWidget:winviewer withRAREActionLink:link withRAREViewerCreator_iCallback:[[RAREaWindowManager_$2 alloc] initWithRAREaWindowManager:self withRAREWindowViewer:w withRAREiContainer:winviewer withId:viewerValue withRAREiWindow:win withJavaUtilMap:opts]];
  }
  @catch (JavaNetMalformedURLException *e) {
    @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
  }
  return (RAREWindowViewer *) check_class_cast(winviewer, [RAREWindowViewer class]);
}

- (void)pack {
}

- (void)registerTargetWithNSString:(NSString *)name
                   withRAREiTarget:(id<RAREiTarget>)target {
  id<RAREiTarget> t = [((JavaUtilHashMap *) nil_chk(theTargets_)) getWithId:name];
  if (t == nil) {
    (void) [theTargets_ putWithId:name withId:target];
  }
  else if (t != target) {
    @throw [[RAREApplicationException alloc] initWithNSString:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.targetExists"] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  }
}

- (void)registerViewerWithNSString:(NSString *)name
                   withRAREiViewer:(id<RAREiViewer>)viewer {
  id<RAREiWeakReference> r = [((JavaUtilHashMap *) nil_chk(activeViewers_)) getWithId:name];
  id<RAREiViewer> v = (id<RAREiViewer>) check_protocol_cast(((r == nil) ? nil : [r get]), @protocol(RAREiViewer));
  if (v != viewer) {
    (void) [activeViewers_ putWithId:name withId:[RAREaPlatformHelper createWeakReferenceWithId:viewer]];
    if (v != nil) {
      [RAREPlatform ignoreExceptionWithNSString:[((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getStringWithNSString:@"Rare.runtime.text.registeredViewerExists" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:[IOSClass classWithClass:[NSObject class]]]] withJavaLangThrowable:nil];
    }
  }
}

- (void)removeTargetWithNSString:(NSString *)target {
  (void) [((JavaUtilHashMap *) nil_chk(theTargets_)) removeWithId:target];
}

- (void)removeWindowListenerWithRAREiWindowListener:(id<RAREiWindowListener>)l {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) removeWindowListenerWithRAREiWindowListener:l];
}

- (void)resetWithBoolean:(BOOL)reloadViewers {
}

- (id<JavaLangRunnable>)runnableForActivateViewerWithRAREActionLink:(RAREActionLink *)link {
  return [[RAREaWindowManager_ViewerActivator alloc] initWithRAREaWindowManager:self withRAREActionLink:link];
}

- (id<JavaLangRunnable>)runnableForActivateViewerWithRAREiWidget:(id<RAREiWidget>)context
                                              withRARESPOTViewer:(RARESPOTViewer *)cfg
                                                    withNSString:(NSString *)target {
  return [[RAREaWindowManager_ViewerActivator alloc] initWithRAREaWindowManager:self withRAREiWidget:context withRARESPOTViewer:cfg withNSString:target];
}

- (void)setAboutDialogRunnerWithJavaLangRunnable:(id<JavaLangRunnable>)aboutDialogRunner {
  self->aboutDialogRunner_ = aboutDialogRunner;
}

- (void)setBoundsWithFloat:(float)x
                 withFloat:(float)y
                 withFloat:(float)width
                 withFloat:(float)height {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) setBoundsWithFloat:x withFloat:y withFloat:width withFloat:height];
}

- (void)setCanCloseWithBoolean:(BOOL)can {
}

- (void)setContextURLWithJavaNetURL:(JavaNetURL *)url {
  contextURL_ = url;
}

- (void)setDefaultFontWithRAREUIFont:(RAREUIFont *)font {
  defaultFont_ = font;
  [RAREUIFontHelper setDefaultFontWithRAREUIFont:font];
}

- (void)setLocationWithFloat:(float)x
                   withFloat:(float)y {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) setLocationWithFloat:x withFloat:y];
}

- (void)setMenuBarWithRAREiPlatformMenuBar:(id<RAREiPlatformMenuBar>)mb {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) setMenuBarWithRAREiPlatformMenuBar:mb];
}

- (float)setRelativeFontSizeWithFloat:(float)size {
  return 1;
}

- (void)setResizableWithBoolean:(BOOL)resizable {
}

- (void)setScriptHandlerWithRAREiScriptHandler:(id<RAREiScriptHandler>)scriptHandler {
  self->scriptHandler_ = scriptHandler;
}

- (void)setSizeWithFloat:(float)width
               withFloat:(float)height {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) setSizeWithFloat:width withFloat:height];
}

- (void)setStatusWithNSString:(NSString *)status {
  id<RAREiStatusBar> sb = [self getStatusBar];
  if (sb != nil) {
    [sb setProgressStatusWithNSString:status];
  }
}

- (void)setStatusBarWithRAREiStatusBar:(id<RAREiStatusBar>)sb {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) setStatusBarWithRAREiStatusBar:sb];
}

- (void)setTitleWithNSString:(NSString *)title {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) setTitleWithNSString:title];
}

- (void)setToolBarHolderWithRAREiToolBarHolder:(id<RAREiToolBarHolder>)tbh {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) setToolBarHolderWithRAREiToolBarHolder:tbh];
}

- (id<RAREiViewer>)setViewerWithNSString:(NSString *)target
                         withRAREiWidget:(id<RAREiWidget>)context
                         withRAREiViewer:(id<RAREiViewer>)viewer
                         withJavaUtilMap:(id<JavaUtilMap>)options {
  id<RAREiTarget> t = nil;
  if ((target == nil) || [target hasSuffix:[RAREiTarget TARGET_NEW_WINDOW]] || [((id<RAREiViewer>) nil_chk(viewer)) isWindowOnlyViewer]) {
    (void) [((id<RAREiViewer>) nil_chk(viewer)) showAsWindowWithJavaUtilMap:options];
    return nil;
  }
  if ([((NSString *) nil_chk(target)) isEqual:[RAREiTarget TARGET_NULL]]) {
    return nil;
  }
  if ([target hasSuffix:[RAREiTarget TARGET_NEW_POPUP]]) {
    id<RAREiPlatformComponent> comp = (context == nil) ? nil : [context getDataComponent];
    if (comp == nil) {
      comp = [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) getComponent];
    }
    (void) [((id<RAREiViewer>) nil_chk(viewer)) showAsPopupWithRAREiPlatformComponent:comp withJavaUtilMap:options];
    return nil;
  }
  if ([target hasSuffix:[RAREiTarget TARGET_PARENT]]) {
    if (context != nil) {
      t = [((id<RAREiContainer>) nil_chk([context getParent])) getTarget];
    }
  }
  else if ([target hasSuffix:[RAREiTarget TARGET_SELF]]) {
    if (context != nil) {
      t = [((id<RAREiViewer>) nil_chk([context getViewer])) getTarget];
    }
  }
  else if ([target isEqual:[RAREiTarget TARGET_WORKSPACE]]) {
    t = workspaceTarget_;
  }
  else {
    t = [self getTargetWithNSString:target];
  }
  if (t == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"%@%@", [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.unknownTarget"], target]];
  }
  return [((id<RAREiTarget>) nil_chk(t)) setViewerWithRAREiViewer:viewer];
}

- (id<RAREiViewer>)setViewerExWithNSString:(NSString *)target
                           withRAREiWidget:(id<RAREiWidget>)context
                           withRAREiViewer:(id<RAREiViewer>)viewer {
  id<RAREiTarget> t = nil;
  if ([((NSString *) nil_chk(target)) hasSuffix:[RAREiTarget TARGET_SELF]]) {
    if (context != nil) {
      t = [((id<RAREiViewer>) nil_chk([context getViewer])) getTarget];
    }
  }
  else {
    t = [self getTargetWithNSString:target];
  }
  if (t == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"%@%@", [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getResourceAsStringWithNSString:@"Rare.runtime.text.unknownTarget"], target]];
  }
  return [((id<RAREiTarget>) nil_chk(t)) setViewerWithRAREiViewer:viewer];
}

- (void)setWindowIconsWithJavaUtilList:(id<JavaUtilList>)icons {
  self->windowIcons_ = icons;
  [self setWindowIconsExWithJavaUtilList:icons];
}

- (void)showAboutDialog {
  if (aboutDialogRunner_ != nil) {
    [RAREPlatform invokeLaterWithJavaLangRunnable:aboutDialogRunner_];
  }
}

- (void)showWindow {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) showWindow];
}

- (void)showWindowWithInt:(int)x
                  withInt:(int)y {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) showWindowWithInt:x withInt:y];
}

- (void)toBack {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) toBack];
}

- (void)toFront {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) toFront];
}

- (void)unRegisterTargetWithNSString:(NSString *)name {
  [self removeTargetWithNSString:name];
}

- (void)unRegisterViewerWithNSString:(NSString *)name
                     withRAREiViewer:(id<RAREiViewer>)viewer {
  id<RAREiWeakReference> r = [((JavaUtilHashMap *) nil_chk(activeViewers_)) getWithId:name];
  if ((r != nil) && ([r get] == viewer)) {
    (void) [activeViewers_ removeWithId:name];
    [r clear];
  }
}

- (void)update {
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) update];
}

- (id<RAREiWindowManager_iFrame>)createFrameWithRAREiWidget:(id<RAREiWidget>)context
                      withRAREaWindowManager_WindowTypeEnum:(RAREaWindowManager_WindowTypeEnum *)type
                                                withBoolean:(BOOL)modal
                                                withBoolean:(BOOL)transparent
                                                withBoolean:(BOOL)decorated {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)createScriptHandlerWithRARESPOTMainWindow:(RARESPOTMainWindow *)cfg {
  NSString *type = nil;
  NSString *code = nil;
  NSString *location = nil;
  if ([((SPOTPrintableString *) nil_chk(((RARESPOTMainWindow *) nil_chk(cfg))->scriptURL_)) spot_valueWasSet] && ![self isDesignMode]) {
    if ([[cfg->scriptURL_ spot_getLinkedData] isKindOfClass:[RAREUTObjectHolder class]]) {
      RAREUTObjectHolder *h = (RAREUTObjectHolder *) check_class_cast([cfg->scriptURL_ spot_getLinkedData], [RAREUTObjectHolder class]);
      type = (NSString *) check_class_cast(((RAREUTObjectHolder *) nil_chk(h))->type_, [NSString class]);
      code = (NSString *) check_class_cast(h->value_, [NSString class]);
      location = (NSString *) check_class_cast(h->source_, [NSString class]);
    }
    else {
      @try {
        RAREActionLink *link = [RAREActionLink getActionLinkWithRAREUTiURLResolver:[((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getRootViewer] withSPOTPrintableString:cfg->scriptURL_ withInt:0];
        BOOL runonce = [@"true" equalsIgnoreCase:[cfg->scriptURL_ spot_getAttributeWithNSString:@"runOnce"]];
        type = [((RAREActionLink *) nil_chk(link)) getContentType];
        code = [appContext_ loadScriptCodeWithRAREActionLink:link withBoolean:runonce];
        if (code != nil) {
          if ([link isInlineURL]) {
            if (![link isMimeTypeSet] || [@"text/plain" isEqual:type]) {
              type = [appContext_ getDefaultScrptingLanguage];
            }
            location = [NSString stringWithFormat:@"%@%@?id=MainWindow", [RAREiConstants INLINE_PREFIX], type];
            JavaNetURL *url = contextURL_;
            if (url != nil) {
              location = [NSString stringWithFormat:@"%@%@", location, [NSString stringWithFormat:@",contextURL=%@", [url toExternalForm]]];
            }
          }
          else {
            JavaNetURL *url = [link getURLWithRAREUTiURLResolver:[appContext_ getRootViewer]];
            location = [((JavaNetURL *) nil_chk(url)) toExternalForm];
            type = [appContext_ getScriptTypeWithRAREActionLink:link];
          }
        }
      }
      @catch (JavaIoIOException *e) {
        [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
      }
    }
  }
  if ((type != nil) && ([type sequenceLength] == 0)) {
    type = nil;
  }
  scriptHandler_ = [((id<RAREiScriptHandler>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getScriptingManager])) getRootHandlerWithRAREiPlatformAppContext:appContext_ withRAREiWindow:[self getMainWindow] withNSString:type withNSString:location withNSString:code withBoolean:NO];
  [((id<RAREiWindowManager_iFrame>) nil_chk(mainFrame_)) setWindowViewerWithRAREWindowViewer:[((id<RAREiScriptHandler>) nil_chk(scriptHandler_)) getWindowViewer]];
  [((RAREWindowViewer *) nil_chk([scriptHandler_ getWindowViewer])) setContextURLWithJavaNetURL:contextURL_];
  id<JavaUtilMap> map = [RAREaWidgetListener createEventMapWithJavaUtilMap:[cfg spot_getAttributesEx]];
  if (map == nil) {
    map = [JavaUtilCollections EMPTY_MAP];
  }
  widgetListener_ = [self createWidgetListenerWithRAREiWidget:[scriptHandler_ getWindowViewer] withJavaUtilMap:map withRAREiScriptHandler:scriptHandler_];
  [((RAREWindowViewer *) check_class_cast([scriptHandler_ getWindowViewer], [RAREWindowViewer class])) setWidgetListenerWithRAREaWidgetListener:widgetListener_];
}

- (id<RAREiWidget>)createTitleWidgetWithRARESPOTMainWindow:(RARESPOTMainWindow *)cfg {
  if ([((id<RAREiPlatformAppContext>) nil_chk(appContext_)) okForOSWithISPOTElement:((RARESPOTMainWindow *) nil_chk(cfg))->titlePane_]) {
    RARESPOTWidget *wcfg = (RARESPOTWidget *) check_class_cast([((SPOTAny *) nil_chk(cfg->titlePane_)) getValue], [RARESPOTWidget class]);
    if (wcfg != nil) {
      titleWidgetConfig_ = wcfg;
      return [RAREaContainer createWidgetWithRAREiContainer:[((id<RAREiScriptHandler>) nil_chk(scriptHandler_)) getWindowViewer] withRARESPOTWidget:wcfg];
    }
  }
  return nil;
}

- (RAREaWidgetListener *)createWidgetListenerWithRAREiWidget:(id<RAREiWidget>)widget
                                             withJavaUtilMap:(id<JavaUtilMap>)map
                                      withRAREiScriptHandler:(id<RAREiScriptHandler>)scriptHandler {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)destroyTargets {
  id<RAREiTarget> t;
  IOSObjectArray *a = [self getTargets];
  if (a == nil) {
    return;
  }
  int len = (int) [((IOSObjectArray *) nil_chk(a)) count];
  for (int i = 0; i < len; i++) {
    t = IOSObjectArray_Get(a, i);
    if (t != nil) {
      [t disposeWithBoolean:YES];
    }
  }
  [((JavaUtilHashMap *) nil_chk(theTargets_)) clear];
}

- (void)destroyViewers {
  IOSObjectArray *a = [self getViewers];
  {
    IOSObjectArray *a__ = a;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<RAREiViewer> v = (*b__++);
      if (v != nil) {
        [v dispose];
      }
    }
  }
  [((JavaUtilHashMap *) nil_chk(activeViewers_)) clear];
}

- (id)fireEventWithNSString:(NSString *)eventName
    withJavaUtilEventObject:(JavaUtilEventObject *)event
                withBoolean:(BOOL)inline_ {
  RAREaWidgetListener *wl = [self getWidgetListener];
  if ((wl == nil) || (eventName == nil) || (event == nil)) {
    return nil;
  }
  if (![((NSString *) nil_chk(eventName)) hasPrefix:@"rare"]) {
    eventName = [NSString stringWithFormat:@"rare.scripting.event.%@", eventName];
  }
  if (inline_) {
    return [((RAREaWidgetListener *) nil_chk(wl)) evaluateWithNSString:eventName withJavaUtilEventObject:event withBoolean:NO];
  }
  [((RAREaWidgetListener *) nil_chk(wl)) executeWithNSString:eventName withJavaUtilEventObject:event];
  return [JavaLangBoolean valueOfWithBoolean:NO];
}

- (NSString *)getViewerClassNameWithRARESPOTViewer:(RARESPOTViewer *)cfg {
  NSString *s = (cfg == nil) ? nil : [cfg spot_getAttributeWithNSString:@"viewerClass"];
  if (s != nil) {
    if ([s indexOf:'.'] == -1) {
      s = [NSString stringWithFormat:@"%@.viewer.%@", [RAREPlatform RARE_PACKAGE_NAME], s];
      if (![s hasSuffix:@"Viewer"]) {
        s = [NSString stringWithFormat:@"%@Viewer", s];
      }
    }
  }
  return s;
}

- (void)handleCustomPropertiesWithRARESPOTMainWindow:(RARESPOTMainWindow *)cfg
                                     withJavaUtilMap:(id<JavaUtilMap>)properties {
  RAREWindowViewer *w = (RAREWindowViewer *) check_class_cast([((id<RAREiScriptHandler>) nil_chk(scriptHandler_)) getWindowViewer], [RAREWindowViewer class]);
  if ([((RAREWindowViewer *) nil_chk(w)) getCustomProperties] == nil) {
    [w setCustomPropertiesWithJavaUtilMap:properties];
  }
  else {
    [((id<JavaUtilMap>) nil_chk([w getCustomProperties])) putAllWithJavaUtilMap:properties];
  }
}

- (void)handleExceptionExWithJavaLangThrowable:(JavaLangThrowable *)e {
  e = [RAREUTHelper pealExceptionWithJavaLangThrowable:e];
  if ([e isKindOfClass:[JavaLangNullPointerException class]]) {
    JavaIoStringWriter *sw = [[JavaIoStringWriter alloc] init];
    JavaIoPrintWriter *pw = [[JavaIoPrintWriter alloc] initWithJavaIoWriter:sw];
    [((JavaLangThrowable *) nil_chk(e)) printStackTraceWithJavaIoPrintWriter:pw];
    [pw flush];
    [sw flush];
    if ([((NSString *) nil_chk([sw description])) contains:@"sun.plugin.util.AnimationPanel.createTranslucentImage"]) {
      return;
    }
  }
  if ([e isKindOfClass:[RAREAbortOperationException class]]) {
    @throw (RAREAbortOperationException *) check_class_cast(e, [RAREAbortOperationException class]);
  }
  if ([e isKindOfClass:[RAREHTTPException class]]) {
    [self handleExceptionWithRAREHTTPException:(RAREHTTPException *) check_class_cast(e, [RAREHTTPException class])];
    return;
  }
  if ([e isKindOfClass:[JavaNetMalformedURLException class]]) {
    [self handleExceptionWithJavaNetMalformedURLException:(JavaNetMalformedURLException *) check_class_cast(e, [JavaNetMalformedURLException class])];
    return;
  }
  if ([e isKindOfClass:[JavaIoIOException class]]) {
    [self handleExceptionWithJavaIoIOException:(JavaIoIOException *) check_class_cast(e, [JavaIoIOException class])];
    return;
  }
  if ([e isKindOfClass:[RAREInvalidConfigurationException class]]) {
    [self handleExceptionWithRAREInvalidConfigurationException:(RAREInvalidConfigurationException *) check_class_cast(e, [RAREInvalidConfigurationException class])];
    return;
  }
  if ([((id<RAREiPlatformAppContext>) nil_chk(appContext_)) isDebugEnabled]) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
  }
  [self showErrorDialogWithJavaLangThrowable:e];
}

- (void)setWindowIconsExWithJavaUtilList:(id<JavaUtilList>)icons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setWorkspaceViewerWithRAREiViewer:(id<RAREiViewer>)v {
  (void) [((id<RAREiTarget>) nil_chk(workspaceTarget_)) setViewerWithRAREiViewer:v];
}

- (void)showErrorDialogWithJavaLangThrowable:(JavaLangThrowable *)e {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (BOOL)supportsMultipleWindowIcons {
  return YES;
}

+ (id<RAREiToolBarHolder>)createToolBarHolderWithRAREiContainer:(id<RAREiContainer>)viewer
                                                    withSPOTSet:(SPOTSet *)toolbars {
  return nil;
}

- (void)configureWithRARESPOTMainWindow:(RARESPOTMainWindow *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<RAREiPopup>)createPopupWithRAREiWidget:(id<RAREiWidget>)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)onConfigurationChangedWithBoolean:(BOOL)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onConfigurationWillChangeWithId:(id)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllFieldsTo:(RAREaWindowManager *)other {
  [super copyAllFieldsTo:other];
  other->aboutDialogRunner_ = aboutDialogRunner_;
  other->activeViewers_ = activeViewers_;
  other->appContext_ = appContext_;
  other->componentCreator_ = componentCreator_;
  other->contextURL_ = contextURL_;
  other->defaultFont_ = defaultFont_;
  other->disposed_ = disposed_;
  other->mainFrame_ = mainFrame_;
  other->menuBar_ = menuBar_;
  other->scriptHandler_ = scriptHandler_;
  other->theTargets_ = theTargets_;
  other->titleWidgetConfig_ = titleWidgetConfig_;
  other->widgetListener_ = widgetListener_;
  other->windowIcons_ = windowIcons_;
  other->windowPaintbucket_ = windowPaintbucket_;
  other->workspaceTarget_ = workspaceTarget_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "activateViewerWithRAREActionLink:", NULL, "LRAREiViewer", 0x1, NULL },
    { "activateViewerWithRAREiWidget:withRAREActionLink:", NULL, "LRAREiViewer", 0x1, NULL },
    { "activateViewerWithRAREiWidget:withRARESPOTViewer:withNSString:", NULL, "LRAREiViewer", 0x1, NULL },
    { "createDialogWithRAREiWidget:withJavaUtilMap:", NULL, "LRAREiWindow", 0x1, NULL },
    { "createDialogWithRAREiWidget:withNSString:withBoolean:", NULL, "LRAREiWindow", 0x1, NULL },
    { "createDialogWithRAREiWidget:withNSString:withNSString:withBoolean:", NULL, "LRAREiWindow", 0x1, NULL },
    { "createPopupMenuWithRAREiWidget:withJavaNetURL:withBoolean:", NULL, "LRAREUIPopupMenu", 0x1, "JavaLangException" },
    { "createPopupMenuWithRAREUIPopupMenu:withRAREiWidget:withSPOTSet:withBoolean:", NULL, "LRAREUIPopupMenu", 0x1, NULL },
    { "createStatusBarWithRARESPOTStatusBar:", NULL, "LRAREiStatusBar", 0x1, NULL },
    { "createToolBarWithBoolean:", NULL, "LRAREiToolBar", 0x1, NULL },
    { "createToolBarWithRARESPOTToolBar:", NULL, "LRAREiToolBar", 0x1, NULL },
    { "createViewerWithRAREActionLink:", NULL, "LRAREiViewer", 0x1, NULL },
    { "createViewerWithRAREiWidget:withRAREActionLink:", NULL, "LRAREiViewer", 0x1, NULL },
    { "createViewerWithRAREiWidget:withNSString:withRARESPOTViewer:withJavaNetURL:", NULL, "LRAREiViewer", 0x1, NULL },
    { "createViewerWithRAREiWidget:withRARESPOTViewer:withJavaNetURL:", NULL, "LRAREiViewer", 0x1, NULL },
    { "createWidgetConfigWithRAREActionLink:", NULL, "LRARESPOTWidget", 0x1, NULL },
    { "createWindowWithRAREiWidget:withJavaUtilMap:", NULL, "LRAREiWindow", 0x1, NULL },
    { "createWindowWithRAREiWidget:withNSString:withNSString:", NULL, "LRAREiWindow", 0x1, NULL },
    { "createWindowOrDialogWithRAREiWidget:withNSString:withNSString:withBoolean:withBoolean:", NULL, "LRAREiWindow", 0x1, NULL },
    { "getAboutDialogRunner", NULL, "LJavaLangRunnable", 0x1, NULL },
    { "getAppContext", NULL, "LRAREiPlatformAppContext", 0x1, NULL },
    { "getBounds", NULL, "LRAREUIRectangle", 0x1, NULL },
    { "getComponent", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getComponentCreator", NULL, "LRAREiPlatformComponentFactory", 0x1, NULL },
    { "getDefaultFont", NULL, "LRAREUIFont", 0x1, NULL },
    { "getDefaultMonospacedFont", NULL, "LRAREUIFont", 0x1, NULL },
    { "getInnerSizeWithRAREUIDimension:", NULL, "LRAREUIDimension", 0x1, NULL },
    { "getMainWindow", NULL, "LRAREiWindow", 0x1, NULL },
    { "getMenuBar", NULL, "LRAREiPlatformMenuBar", 0x1, NULL },
    { "getRootViewer", NULL, "LRAREiContainer", 0x1, NULL },
    { "getScriptHandler", NULL, "LRAREiScriptHandler", 0x1, NULL },
    { "getSize", NULL, "LRAREUIDimension", 0x1, NULL },
    { "getStatusBar", NULL, "LRAREiStatusBar", 0x1, NULL },
    { "getTarget", NULL, "LRAREiTarget", 0x1, NULL },
    { "getTargetWithNSString:", NULL, "LRAREiTarget", 0x1, NULL },
    { "getTargetName", NULL, "LNSString", 0x1, NULL },
    { "getTargets", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getTitle", NULL, "LNSString", 0x1, NULL },
    { "getToolBarHolder", NULL, "LRAREiToolBarHolder", 0x1, NULL },
    { "getUIWindow", NULL, "LNSObject", 0x1, NULL },
    { "getURLWithNSString:", NULL, "LJavaNetURL", 0x1, "JavaNetMalformedURLException" },
    { "getViewer", NULL, "LRAREiContainer", 0x1, NULL },
    { "getViewerWithNSString:", NULL, "LRAREiViewer", 0x1, NULL },
    { "getViewerByTargetNameWithNSString:", NULL, "LRAREiViewer", 0x1, NULL },
    { "getViewers", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getWidgetListener", NULL, "LRAREaWidgetListener", 0x1, NULL },
    { "getWindowIcons", NULL, "LJavaUtilList", 0x1, NULL },
    { "getWindowViewer", NULL, "LRAREiContainer", 0x1, NULL },
    { "getWorkspaceViewer", NULL, "LRAREiViewer", 0x1, NULL },
    { "isDesignMode", NULL, "Z", 0x1, NULL },
    { "isDisposed", NULL, "Z", 0x1, NULL },
    { "openViewerWindowWithRAREActionLink:withId:", NULL, "LRAREWindowViewer", 0x1, NULL },
    { "runnableForActivateViewerWithRAREActionLink:", NULL, "LJavaLangRunnable", 0x1, NULL },
    { "runnableForActivateViewerWithRAREiWidget:withRARESPOTViewer:withNSString:", NULL, "LJavaLangRunnable", 0x1, NULL },
    { "setViewerWithNSString:withRAREiWidget:withRAREiViewer:withJavaUtilMap:", NULL, "LRAREiViewer", 0x1, NULL },
    { "setViewerExWithNSString:withRAREiWidget:withRAREiViewer:", NULL, "LRAREiViewer", 0x1, NULL },
    { "createFrameWithRAREiWidget:withRAREaWindowManager_WindowTypeEnum:withBoolean:withBoolean:withBoolean:", NULL, "LRAREiWindowManager_iFrame", 0x404, NULL },
    { "createScriptHandlerWithRARESPOTMainWindow:", NULL, "V", 0x4, NULL },
    { "createTitleWidgetWithRARESPOTMainWindow:", NULL, "LRAREiWidget", 0x4, NULL },
    { "createWidgetListenerWithRAREiWidget:withJavaUtilMap:withRAREiScriptHandler:", NULL, "LRAREaWidgetListener", 0x404, NULL },
    { "destroyTargets", NULL, "V", 0x4, NULL },
    { "destroyViewers", NULL, "V", 0x4, NULL },
    { "fireEventWithNSString:withJavaUtilEventObject:withBoolean:", NULL, "LNSObject", 0x4, NULL },
    { "getViewerClassNameWithRARESPOTViewer:", NULL, "LNSString", 0x4, NULL },
    { "handleCustomPropertiesWithRARESPOTMainWindow:withJavaUtilMap:", NULL, "V", 0x4, NULL },
    { "handleExceptionExWithJavaLangThrowable:", NULL, "V", 0x4, NULL },
    { "setWindowIconsExWithJavaUtilList:", NULL, "V", 0x404, NULL },
    { "setWorkspaceViewerWithRAREiViewer:", NULL, "V", 0x4, NULL },
    { "showErrorDialogWithJavaLangThrowable:", NULL, "V", 0x404, NULL },
    { "supportsMultipleWindowIcons", NULL, "Z", 0x4, NULL },
    { "createToolBarHolderWithRAREiContainer:withSPOTSet:", NULL, "LRAREiToolBarHolder", 0x9, NULL },
    { "configureWithRARESPOTMainWindow:", NULL, "V", 0x401, NULL },
    { "createPopupWithRAREiWidget:", NULL, "LRAREiPopup", 0x401, NULL },
    { "onConfigurationChangedWithBoolean:", NULL, "V", 0x401, NULL },
    { "onConfigurationWillChangeWithId:", NULL, "V", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "BASE_VIEWER_", NULL, 0xa, "LNSString" },
    { "activeViewers_", NULL, 0x4, "LJavaUtilHashMap" },
    { "theTargets_", NULL, 0x4, "LJavaUtilHashMap" },
    { "appContext_", NULL, 0x4, "LRAREiPlatformAppContext" },
    { "componentCreator_", NULL, 0x4, "LRAREiPlatformComponentFactory" },
    { "contextURL_", NULL, 0x4, "LJavaNetURL" },
    { "defaultFont_", NULL, 0x4, "LRAREUIFont" },
    { "disposed_", NULL, 0x44, "Z" },
    { "mainFrame_", NULL, 0x4, "LRAREiWindowManager_iFrame" },
    { "menuBar_", NULL, 0x4, "LRAREiPlatformMenuBar" },
    { "scriptHandler_", NULL, 0x4, "LRAREiScriptHandler" },
    { "widgetListener_", NULL, 0x4, "LRAREaWidgetListener" },
    { "workspaceTarget_", NULL, 0x4, "LRAREiTarget" },
  };
  static J2ObjcClassInfo _RAREaWindowManager = { "aWindowManager", "com.appnativa.rare.ui", NULL, 0x401, 75, methods, 13, fields, 0, NULL};
  return &_RAREaWindowManager;
}

@end

static RAREaWindowManager_WindowTypeEnum *RAREaWindowManager_WindowTypeEnum_FRAME;
static RAREaWindowManager_WindowTypeEnum *RAREaWindowManager_WindowTypeEnum_DIALOG;
static RAREaWindowManager_WindowTypeEnum *RAREaWindowManager_WindowTypeEnum_POPUP;
static RAREaWindowManager_WindowTypeEnum *RAREaWindowManager_WindowTypeEnum_POPUP_ORPHAN;
IOSObjectArray *RAREaWindowManager_WindowTypeEnum_values;

@implementation RAREaWindowManager_WindowTypeEnum

+ (RAREaWindowManager_WindowTypeEnum *)FRAME {
  return RAREaWindowManager_WindowTypeEnum_FRAME;
}
+ (RAREaWindowManager_WindowTypeEnum *)DIALOG {
  return RAREaWindowManager_WindowTypeEnum_DIALOG;
}
+ (RAREaWindowManager_WindowTypeEnum *)POPUP {
  return RAREaWindowManager_WindowTypeEnum_POPUP;
}
+ (RAREaWindowManager_WindowTypeEnum *)POPUP_ORPHAN {
  return RAREaWindowManager_WindowTypeEnum_POPUP_ORPHAN;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [RAREaWindowManager_WindowTypeEnum class]) {
    RAREaWindowManager_WindowTypeEnum_FRAME = [[RAREaWindowManager_WindowTypeEnum alloc] initWithNSString:@"FRAME" withInt:0];
    RAREaWindowManager_WindowTypeEnum_DIALOG = [[RAREaWindowManager_WindowTypeEnum alloc] initWithNSString:@"DIALOG" withInt:1];
    RAREaWindowManager_WindowTypeEnum_POPUP = [[RAREaWindowManager_WindowTypeEnum alloc] initWithNSString:@"POPUP" withInt:2];
    RAREaWindowManager_WindowTypeEnum_POPUP_ORPHAN = [[RAREaWindowManager_WindowTypeEnum alloc] initWithNSString:@"POPUP_ORPHAN" withInt:3];
    RAREaWindowManager_WindowTypeEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ RAREaWindowManager_WindowTypeEnum_FRAME, RAREaWindowManager_WindowTypeEnum_DIALOG, RAREaWindowManager_WindowTypeEnum_POPUP, RAREaWindowManager_WindowTypeEnum_POPUP_ORPHAN, nil } count:4 type:[IOSClass classWithClass:[RAREaWindowManager_WindowTypeEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:RAREaWindowManager_WindowTypeEnum_values];
}

+ (RAREaWindowManager_WindowTypeEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [RAREaWindowManager_WindowTypeEnum_values count]; i++) {
    RAREaWindowManager_WindowTypeEnum *e = RAREaWindowManager_WindowTypeEnum_values->buffer_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

+ (J2ObjcClassInfo *)__metadata {
  static const char *superclass_type_args[] = {"LRAREaWindowManager_WindowTypeEnum"};
  static J2ObjcClassInfo _RAREaWindowManager_WindowTypeEnum = { "WindowType", "com.appnativa.rare.ui", "aWindowManager", 0x4019, 0, NULL, 0, NULL, 1, superclass_type_args};
  return &_RAREaWindowManager_WindowTypeEnum;
}

@end
@implementation RAREaWindowManager_ViewerActivator

- (id)initWithRAREaWindowManager:(RAREaWindowManager *)outer$
              withRAREActionLink:(RAREActionLink *)link {
  this$0_ = outer$;
  if (self = [super init]) {
    theLink_ = link;
  }
  return self;
}

- (id)initWithRAREaWindowManager:(RAREaWindowManager *)outer$
                 withRAREiWidget:(id<RAREiWidget>)context
              withRARESPOTViewer:(RARESPOTViewer *)cfg
                    withNSString:(NSString *)target {
  this$0_ = outer$;
  if (self = [super init]) {
    theLink_ = [[RAREActionLink alloc] init];
    [theLink_ setTargetNameWithNSString:target];
    [theLink_ setContextWithRAREUTiURLResolver:context];
    [theLink_ setViewerConfigurationWithRARESPOTViewer:cfg];
  }
  return self;
}

- (void)run {
  @try {
    (void) [this$0_ activateViewerWithRAREActionLink:theLink_];
  }
  @finally {
    [((RAREActionLink *) nil_chk(theLink_)) close];
  }
}

- (void)copyAllFieldsTo:(RAREaWindowManager_ViewerActivator *)other {
  [super copyAllFieldsTo:other];
  other->theLink_ = theLink_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithRAREaWindowManager:withRAREActionLink:", NULL, NULL, 0x0, NULL },
    { "initWithRAREaWindowManager:withRAREiWidget:withRARESPOTViewer:withNSString:", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaWindowManager" },
  };
  static J2ObjcClassInfo _RAREaWindowManager_ViewerActivator = { "ViewerActivator", "com.appnativa.rare.ui", "aWindowManager", 0x4, 2, methods, 1, fields, 0, NULL};
  return &_RAREaWindowManager_ViewerActivator;
}

@end
@implementation RAREaWindowManager_$1

- (void)run {
  [this$0_ handleExceptionExWithJavaLangThrowable:val$e_];
}

- (id)initWithRAREaWindowManager:(RAREaWindowManager *)outer$
           withJavaLangThrowable:(JavaLangThrowable *)capture$0 {
  this$0_ = outer$;
  val$e_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaWindowManager" },
    { "val$e_", NULL, 0x1012, "LJavaLangThrowable" },
  };
  static J2ObjcClassInfo _RAREaWindowManager_$1 = { "$1", "com.appnativa.rare.ui", "aWindowManager", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_RAREaWindowManager_$1;
}

@end
@implementation RAREaWindowManager_$2

- (void)configCreatedWithRAREiWidget:(id<RAREiWidget>)context
                  withRAREActionLink:(RAREActionLink *)link
                  withRARESPOTViewer:(RARESPOTViewer *)config {
}

- (void)errorHappenedWithRAREiWidget:(id<RAREiWidget>)context
                  withRAREActionLink:(RAREActionLink *)link
               withJavaLangException:(JavaLangException *)e {
  [((id<RAREiAsyncLoadStatusHandler>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(this$0_->appContext_)) getAsyncLoadStatusHandler])) errorOccuredWithRAREiWidget:context withRAREActionLink:link withJavaLangThrowable:e];
  [((RAREWindowViewer *) nil_chk(val$w_)) handleExceptionWithJavaLangThrowable:e];
}

- (void)startingOperationWithRAREiWidget:(id<RAREiWidget>)context
                      withRAREActionLink:(RAREActionLink *)link {
  [((id<RAREiAsyncLoadStatusHandler>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(this$0_->appContext_)) getAsyncLoadStatusHandler])) loadStartedWithRAREiWidget:context withRAREActionLink:link withRAREUTiCancelable:nil];
}

- (void)viewerCreatedWithRAREiWidget:(id<RAREiWidget>)context
                  withRAREActionLink:(RAREActionLink *)link
                     withRAREiViewer:(id<RAREiViewer>)viewer {
  [((id<RAREiAsyncLoadStatusHandler>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(this$0_->appContext_)) getAsyncLoadStatusHandler])) loadCompletedWithRAREiWidget:context withRAREActionLink:link];
  [((id<RAREiViewer>) nil_chk(viewer)) setParentWithRAREiContainer:val$winviewer_];
  if (val$viewerValue_ != nil) {
    [viewer setValueWithId:val$viewerValue_];
  }
  (void) [this$0_ setViewerExWithNSString:[((id<RAREiWindow>) nil_chk(val$win_)) getTargetName] withRAREiWidget:val$winviewer_ withRAREiViewer:viewer];
  NSString *title = (NSString *) check_class_cast(((val$opts_ == nil) ? nil : [val$opts_ getWithId:@"title"]), [NSString class]);
  if (title == nil) {
    title = [viewer getTitle];
    if ((title != nil) && ([title sequenceLength] > 0)) {
      [val$win_ setTitleWithNSString:title];
    }
  }
  [val$win_ showWindow];
}

- (id)initWithRAREaWindowManager:(RAREaWindowManager *)outer$
            withRAREWindowViewer:(RAREWindowViewer *)capture$0
              withRAREiContainer:(id<RAREiContainer>)capture$1
                          withId:(id)capture$2
                 withRAREiWindow:(id<RAREiWindow>)capture$3
                 withJavaUtilMap:(id<JavaUtilMap>)capture$4 {
  this$0_ = outer$;
  val$w_ = capture$0;
  val$winviewer_ = capture$1;
  val$viewerValue_ = capture$2;
  val$win_ = capture$3;
  val$opts_ = capture$4;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaWindowManager" },
    { "val$w_", NULL, 0x1012, "LRAREWindowViewer" },
    { "val$winviewer_", NULL, 0x1012, "LRAREiContainer" },
    { "val$viewerValue_", NULL, 0x1012, "LNSObject" },
    { "val$win_", NULL, 0x1012, "LRAREiWindow" },
    { "val$opts_", NULL, 0x1012, "LJavaUtilMap" },
  };
  static J2ObjcClassInfo _RAREaWindowManager_$2 = { "$2", "com.appnativa.rare.ui", "aWindowManager", 0x8000, 0, NULL, 6, fields, 0, NULL};
  return &_RAREaWindowManager_$2;
}

@end
