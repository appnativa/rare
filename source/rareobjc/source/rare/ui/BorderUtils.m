//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/BorderUtils.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/spot/GridCell.h"
#include "com/appnativa/rare/spot/Margin.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/ui/BorderUtils.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/RenderType.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIImageHelper.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/XPContainer.h"
#include "com/appnativa/rare/ui/border/UIBackBorder.h"
#include "com/appnativa/rare/ui/border/UIBalloonBorder.h"
#include "com/appnativa/rare/ui/border/UIBevelBorder.h"
#include "com/appnativa/rare/ui/border/UICompoundBorder.h"
#include "com/appnativa/rare/ui/border/UIDropShadowBorder.h"
#include "com/appnativa/rare/ui/border/UIEmptyBorder.h"
#include "com/appnativa/rare/ui/border/UIEtchedBorder.h"
#include "com/appnativa/rare/ui/border/UIFrameBorder.h"
#include "com/appnativa/rare/ui/border/UIIconBorder.h"
#include "com/appnativa/rare/ui/border/UILineBorder.h"
#include "com/appnativa/rare/ui/border/UIMatteBorder.h"
#include "com/appnativa/rare/ui/border/UITitledBorder.h"
#include "com/appnativa/rare/ui/border/aUIBalloonBorder.h"
#include "com/appnativa/rare/ui/border/aUIBevelBorder.h"
#include "com/appnativa/rare/ui/border/aUIEtchedBorder.h"
#include "com/appnativa/rare/ui/border/aUILineBorder.h"
#include "com/appnativa/rare/ui/border/aUITitledBorder.h"
#include "com/appnativa/rare/ui/iPath.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformPath.h"
#include "com/appnativa/rare/ui/painter/NinePatch.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SDFNode.h"
#include "com/appnativa/spot/SPOTEnumerated.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/iURLResolver.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

@implementation RAREBorderUtils

static RAREUIEmptyBorder * RAREBorderUtils_EMPTY_BORDER_;
static NSString * RAREBorderUtils_FOCUSBORDER_CONFIGURED_PROPERTY_ = @"__RARE_FOCUSBORDER_CONFIGURED_PROPERTY";
static RAREUIEmptyBorder * RAREBorderUtils_ONE_POINT_EMPTY_BORDER_;
static NSString * RAREBorderUtils_TITLEBORDER_CONFIGURED_PROPERTY_ = @"__RARE_TITLEBORDER_CONFIGURED_PROPERTY";
static RAREUIEmptyBorder * RAREBorderUtils_TWO_POINT_EMPTY_BORDER_;
static RAREUIEmptyBorder * RAREBorderUtils_TWO_LEFT_POINT_EMPTY_BORDER_;
static RAREUIEmptyBorder * RAREBorderUtils_THREE_LEFT_POINT_EMPTY_BORDER_;
static RAREUIEmptyBorder * RAREBorderUtils_TEXT_PADDING_BORDER_;
static RAREUIEmptyBorder * RAREBorderUtils_ONE_TOP_POINT_EMPTY_BORDER_;
static RAREUIEmptyBorder * RAREBorderUtils_ONE_LEFT_POINT_EMPTY_BORDER_;
static RAREUIEmptyBorder * RAREBorderUtils_ONE_BOTTOM_POINT_EMPTY_BORDER_;
static id<RAREiPlatformBorder> RAREBorderUtils_defaultButtonBorder_;
static RAREUILineBorder * RAREBorderUtils_textareaBorder_;
static RAREUILineBorder * RAREBorderUtils_textfieldBorder_;
static id<RAREiPlatformBorder> RAREBorderUtils_toolbarPressedButtonBorder_;
static id<RAREiPlatformBorder> RAREBorderUtils_widgetBorder_;

+ (RAREUIEmptyBorder *)EMPTY_BORDER {
  return RAREBorderUtils_EMPTY_BORDER_;
}

+ (NSString *)FOCUSBORDER_CONFIGURED_PROPERTY {
  return RAREBorderUtils_FOCUSBORDER_CONFIGURED_PROPERTY_;
}

+ (RAREUIEmptyBorder *)ONE_POINT_EMPTY_BORDER {
  return RAREBorderUtils_ONE_POINT_EMPTY_BORDER_;
}

+ (NSString *)TITLEBORDER_CONFIGURED_PROPERTY {
  return RAREBorderUtils_TITLEBORDER_CONFIGURED_PROPERTY_;
}

+ (RAREUIEmptyBorder *)TWO_POINT_EMPTY_BORDER {
  return RAREBorderUtils_TWO_POINT_EMPTY_BORDER_;
}

+ (RAREUIEmptyBorder *)TWO_LEFT_POINT_EMPTY_BORDER {
  return RAREBorderUtils_TWO_LEFT_POINT_EMPTY_BORDER_;
}

+ (RAREUIEmptyBorder *)THREE_LEFT_POINT_EMPTY_BORDER {
  return RAREBorderUtils_THREE_LEFT_POINT_EMPTY_BORDER_;
}

+ (RAREUIEmptyBorder *)TEXT_PADDING_BORDER {
  return RAREBorderUtils_TEXT_PADDING_BORDER_;
}

+ (RAREUIEmptyBorder *)ONE_TOP_POINT_EMPTY_BORDER {
  return RAREBorderUtils_ONE_TOP_POINT_EMPTY_BORDER_;
}

+ (RAREUIEmptyBorder *)ONE_LEFT_POINT_EMPTY_BORDER {
  return RAREBorderUtils_ONE_LEFT_POINT_EMPTY_BORDER_;
}

+ (RAREUIEmptyBorder *)ONE_BOTTOM_POINT_EMPTY_BORDER {
  return RAREBorderUtils_ONE_BOTTOM_POINT_EMPTY_BORDER_;
}

+ (id<RAREiPlatformBorder>)defaultButtonBorder {
  return RAREBorderUtils_defaultButtonBorder_;
}

+ (void)setDefaultButtonBorder:(id<RAREiPlatformBorder>)defaultButtonBorder {
  RAREBorderUtils_defaultButtonBorder_ = defaultButtonBorder;
}

+ (RAREUILineBorder *)textareaBorder {
  return RAREBorderUtils_textareaBorder_;
}

+ (void)setTextareaBorder:(RAREUILineBorder *)textareaBorder {
  RAREBorderUtils_textareaBorder_ = textareaBorder;
}

+ (RAREUILineBorder *)textfieldBorder {
  return RAREBorderUtils_textfieldBorder_;
}

+ (void)setTextfieldBorder:(RAREUILineBorder *)textfieldBorder {
  RAREBorderUtils_textfieldBorder_ = textfieldBorder;
}

+ (id<RAREiPlatformBorder>)toolbarPressedButtonBorder {
  return RAREBorderUtils_toolbarPressedButtonBorder_;
}

+ (void)setToolbarPressedButtonBorder:(id<RAREiPlatformBorder>)toolbarPressedButtonBorder {
  RAREBorderUtils_toolbarPressedButtonBorder_ = toolbarPressedButtonBorder;
}

+ (id<RAREiPlatformBorder>)widgetBorder {
  return RAREBorderUtils_widgetBorder_;
}

+ (void)setWidgetBorder:(id<RAREiPlatformBorder>)widgetBorder {
  RAREBorderUtils_widgetBorder_ = widgetBorder;
}

+ (id<RAREiPlatformPath>)createBackBorderPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)x
                                                         withFloat:(float)y
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)aw
                                                         withFloat:(float)ah
                                                       withBoolean:(BOOL)noLeft {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  float h2 = height / 2 - 1;
  height--;
  width--;
  if (noLeft) {
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:x + width withFloat:y + height];
    (void) [p lineToWithFloat:x + aw withFloat:y + height];
    (void) [p quadToWithFloat:x withFloat:y + height withFloat:x withFloat:y + height - ah];
    (void) [p lineToWithFloat:x withFloat:y + ah];
    (void) [p quadToWithFloat:x withFloat:y withFloat:x + aw withFloat:y];
    (void) [p lineToWithFloat:x + width withFloat:y];
    (void) [p moveToWithFloat:x + width withFloat:y];
  }
  else {
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:x withFloat:y + h2];
    (void) [p lineToWithFloat:x + h2 withFloat:y];
    (void) [p lineToWithFloat:x + width - aw withFloat:y];
    (void) [p quadToWithFloat:x + width withFloat:y withFloat:x + width withFloat:y + ah];
    (void) [p lineToWithFloat:x + width withFloat:y + height - ah];
    (void) [p quadToWithFloat:x + width withFloat:y + height withFloat:x + width - aw withFloat:y + height];
    (void) [p lineToWithFloat:x + h2 withFloat:y + height];
    (void) [p lineToWithFloat:x withFloat:y + h2];
    (void) [p moveToWithFloat:x withFloat:y + h2];
  }
  [((id<RAREiPlatformPath>) nil_chk(p)) close];
  return p;
}

+ (id<RAREiPlatformPath>)createBalloonLLBPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)arc
                                                         withFloat:(float)peakSize
                                                         withFloat:(float)peakOffset {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  float peak = peakSize;
  float off = peakOffset;
  (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:0 withFloat:arc];
  (void) [p quadToWithFloat:0 withFloat:0 withFloat:arc withFloat:0];
  (void) [p lineToWithFloat:width - arc withFloat:0];
  (void) [p quadToWithFloat:width withFloat:0 withFloat:width withFloat:arc];
  (void) [p lineToWithFloat:width withFloat:height - arc - peak];
  (void) [p quadToWithFloat:width withFloat:height - peak withFloat:width - arc withFloat:height - peak];
  (void) [p lineToWithFloat:arc + peak * 2 + off withFloat:height - peak];
  (void) [p lineToWithFloat:arc + peak + off withFloat:height];
  (void) [p lineToWithFloat:arc + off withFloat:height - peak];
  (void) [p lineToWithFloat:arc withFloat:height - peak];
  (void) [p quadToWithFloat:0 withFloat:height - peak withFloat:0 withFloat:height - arc - peak];
  (void) [p lineToWithFloat:0 withFloat:arc];
  [p close];
  return p;
}

+ (id<RAREiPlatformPath>)createBalloonLLLPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)arc
                                                         withFloat:(float)peakSize
                                                         withFloat:(float)peakOffset {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  float peak = peakSize;
  float off = peakOffset;
  (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:peak withFloat:arc];
  (void) [p quadToWithFloat:peak withFloat:0 withFloat:peak + arc withFloat:0];
  (void) [p lineToWithFloat:width - arc withFloat:0];
  (void) [p quadToWithFloat:width withFloat:0 withFloat:width withFloat:arc];
  (void) [p lineToWithFloat:width withFloat:height - arc];
  (void) [p quadToWithFloat:width withFloat:height withFloat:width - arc withFloat:height];
  (void) [p lineToWithFloat:arc + peak withFloat:height];
  (void) [p quadToWithFloat:peak withFloat:height withFloat:peak withFloat:height - arc];
  (void) [p lineToWithFloat:peak withFloat:height - arc - off];
  (void) [p lineToWithFloat:0 withFloat:height - arc - peak - off];
  (void) [p lineToWithFloat:peak withFloat:height - arc - peak * 2 - off];
  (void) [p lineToWithFloat:peak withFloat:arc];
  [p close];
  return p;
}

+ (id<RAREiPlatformPath>)createBalloonLRBPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)arc
                                                         withFloat:(float)peakSize
                                                         withFloat:(float)peakOffset {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  float peak = peakSize;
  float off = peakOffset;
  (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:0 withFloat:arc];
  (void) [p quadToWithFloat:0 withFloat:0 withFloat:arc withFloat:0];
  (void) [p lineToWithFloat:width - arc withFloat:0];
  (void) [p quadToWithFloat:width withFloat:0 withFloat:width withFloat:arc];
  (void) [p lineToWithFloat:width withFloat:height - arc - peak];
  (void) [p quadToWithFloat:width withFloat:height - peak withFloat:width - arc withFloat:height - peak];
  (void) [p lineToWithFloat:width - arc - off withFloat:height - peak];
  (void) [p lineToWithFloat:width - arc - peak - off withFloat:height];
  (void) [p lineToWithFloat:width - arc - peak * 2 - off withFloat:height - peak];
  (void) [p lineToWithFloat:arc withFloat:height - peak];
  (void) [p quadToWithFloat:0 withFloat:height - peak withFloat:0 withFloat:height - arc - peak];
  (void) [p lineToWithFloat:0 withFloat:arc];
  [p close];
  return p;
}

+ (id<RAREiPlatformPath>)createBalloonLRRPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)arc
                                                         withFloat:(float)peakSize
                                                         withFloat:(float)peakOffset {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  float peak = peakSize;
  float off = peakOffset;
  (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:0 withFloat:arc];
  (void) [p quadToWithFloat:0 withFloat:0 withFloat:arc withFloat:0];
  (void) [p lineToWithFloat:width - arc - peak withFloat:0];
  (void) [p quadToWithFloat:width - peak withFloat:0 withFloat:width - peak withFloat:arc];
  (void) [p lineToWithFloat:width - peak withFloat:height - arc - (peak * 2) - off];
  (void) [p lineToWithFloat:width withFloat:height - arc - peak - off];
  (void) [p lineToWithFloat:width - peak withFloat:height - arc - off];
  (void) [p lineToWithFloat:width - peak withFloat:height - arc];
  (void) [p quadToWithFloat:width - peak withFloat:height withFloat:width - arc - peak withFloat:height];
  (void) [p lineToWithFloat:arc withFloat:height];
  (void) [p quadToWithFloat:0 withFloat:height withFloat:0 withFloat:height - arc];
  (void) [p lineToWithFloat:0 withFloat:arc];
  [p close];
  return p;
}

+ (id<RAREiPlatformPath>)createBalloonULLPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)arc
                                                         withFloat:(float)peakSize
                                                         withFloat:(float)peakOffset {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  float peak = peakSize;
  float off = peakOffset;
  (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:peak withFloat:arc];
  (void) [p quadToWithFloat:peak withFloat:0 withFloat:peak + arc withFloat:0];
  (void) [p lineToWithFloat:width - arc withFloat:0];
  (void) [p quadToWithFloat:width withFloat:0 withFloat:width withFloat:arc];
  (void) [p lineToWithFloat:width withFloat:height - arc];
  (void) [p quadToWithFloat:width withFloat:height withFloat:width - arc withFloat:height];
  (void) [p lineToWithFloat:arc + peak withFloat:height];
  (void) [p quadToWithFloat:peak withFloat:height withFloat:peak withFloat:height - arc];
  (void) [p lineToWithFloat:peak withFloat:arc + peak * 2 + off];
  (void) [p lineToWithFloat:0 withFloat:arc + peak + off];
  (void) [p lineToWithFloat:peak withFloat:arc + off];
  (void) [p lineToWithFloat:peak withFloat:arc];
  [p close];
  return p;
}

+ (id<RAREiPlatformPath>)createBalloonULTPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)arc
                                                         withFloat:(float)peakSize
                                                         withFloat:(float)peakOffset {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  float peak = peakSize;
  float off = peakOffset;
  (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:0 withFloat:peak + arc];
  (void) [p quadToWithFloat:0 withFloat:peak withFloat:arc withFloat:peak];
  (void) [p lineToWithFloat:off withFloat:peak];
  (void) [p lineToWithFloat:peak + off withFloat:0];
  (void) [p lineToWithFloat:peak * 2 + off withFloat:peak];
  (void) [p lineToWithFloat:width - arc withFloat:peak];
  (void) [p quadToWithFloat:width withFloat:peak withFloat:width withFloat:peak + arc];
  (void) [p lineToWithFloat:width withFloat:height - arc];
  (void) [p quadToWithFloat:width withFloat:height withFloat:width - arc withFloat:height];
  (void) [p lineToWithFloat:arc withFloat:height];
  (void) [p quadToWithFloat:0 withFloat:height withFloat:0 withFloat:height - arc];
  (void) [p lineToWithFloat:0 withFloat:peak + arc];
  [p close];
  return p;
}

+ (id<RAREiPlatformPath>)createBalloonURRPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)arc
                                                         withFloat:(float)peakSize
                                                         withFloat:(float)peakOffset {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  float peak = peakSize;
  float off = peakOffset;
  (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:0 withFloat:arc];
  (void) [p quadToWithFloat:0 withFloat:0 withFloat:arc withFloat:0];
  (void) [p lineToWithFloat:width - arc - peak withFloat:0];
  (void) [p quadToWithFloat:width - peak withFloat:0 withFloat:width - peak withFloat:arc];
  (void) [p lineToWithFloat:width - peak withFloat:arc + off];
  (void) [p lineToWithFloat:width withFloat:arc + peak + off];
  (void) [p lineToWithFloat:width - peak withFloat:arc + peak * 2 + off];
  (void) [p lineToWithFloat:width - peak withFloat:height - arc - peak];
  (void) [p quadToWithFloat:width - peak withFloat:height withFloat:width - arc - peak withFloat:height];
  (void) [p lineToWithFloat:arc withFloat:height];
  (void) [p quadToWithFloat:0 withFloat:height withFloat:0 withFloat:height - arc];
  (void) [p lineToWithFloat:0 withFloat:arc];
  [p close];
  return p;
}

+ (id<RAREiPlatformPath>)createBalloonURTPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)arc
                                                         withFloat:(float)peakSize
                                                         withFloat:(float)peakOffset {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  float peak = peakSize;
  float off = peakOffset;
  (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:0 withFloat:peak + arc];
  (void) [p quadToWithFloat:0 withFloat:peak withFloat:arc withFloat:peak];
  (void) [p lineToWithFloat:width - arc - peak * 2 - off withFloat:peak];
  (void) [p lineToWithFloat:width - arc - peak - off withFloat:0];
  (void) [p lineToWithFloat:width - arc - off withFloat:peak];
  (void) [p lineToWithFloat:width - arc withFloat:peak];
  (void) [p quadToWithFloat:width withFloat:peak withFloat:width withFloat:peak + arc];
  (void) [p lineToWithFloat:width withFloat:height - arc];
  (void) [p quadToWithFloat:width withFloat:height withFloat:width - arc withFloat:height];
  (void) [p lineToWithFloat:arc withFloat:height];
  (void) [p quadToWithFloat:0 withFloat:height withFloat:0 withFloat:height - arc];
  (void) [p lineToWithFloat:0 withFloat:peak + arc];
  [p close];
  return p;
}

+ (id<RAREiPlatformBorder>)createBorderWithRAREiWidget:(id<RAREiWidget>)context
                                               withInt:(int)btype
                                       withJavaUtilMap:(id<JavaUtilMap>)attrs {
  id<RAREiPlatformBorder> border = nil;
  RAREUIColor *c = nil;
  IOSObjectArray *ca = nil;
  NSString *color = nil;
  float thickness = 0;
  float arcW = 0;
  float arcH = 0;
  NSString *s;
  RAREUIInsets *in = nil;
  IOSObjectArray *icons = nil;
  BOOL flatBottom = NO;
  BOOL flatTop = NO;
  BOOL flatLeft = NO;
  BOOL flatRight = NO;
  BOOL noBottom = NO;
  BOOL noTop = NO;
  BOOL padForArc = YES;
  BOOL top = NO;
  BOOL left = NO;
  BOOL bottom = YES;
  BOOL right = YES;
  RAREUIBevelBorder *bb;
  if (attrs != nil) {
    color = [attrs getWithId:@"color"];
    s = [attrs getWithId:@"cornerArc"];
    if (s != nil) {
      IOSCharArray *a = [s toCharArray];
      arcW = [RAREUTSNumber intValueWithCharArray:a withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(a)) count] withBoolean:NO];
      if (arcW < 0) {
        arcW = 0;
      }
      int i = [s indexOf:','];
      if (i != -1) {
        arcH = [RAREUTSNumber intValueWithCharArray:a withInt:i + 1 withInt:(int) [a count] - (i + 1) withBoolean:NO];
      }
      if (arcH < 1) {
        arcH = arcW;
      }
    }
    arcH *= [RAREScreenUtils PLATFORM_PIXELS_1];
    arcW *= [RAREScreenUtils PLATFORM_PIXELS_1];
    s = [attrs getWithId:@"thickness"];
    if (s != nil) {
      thickness = [RAREUTSNumber floatValueWithNSString:s];
      if (thickness < 0) {
        thickness = 0;
      }
      else if ([RAREUTSNumber isEqualWithFloat:1 withFloat:thickness]) {
        thickness = [RAREaUILineBorder onePixelThickness];
      }
      else if (thickness > 1) {
        thickness *= [RAREScreenUtils PLATFORM_PIXELS_1];
      }
    }
    noBottom = [@"true" equalsIgnoreCase:[attrs getWithId:@"noBottom"]];
    noTop = [@"true" equalsIgnoreCase:[attrs getWithId:@"noTop"]];
    flatBottom = [@"true" equalsIgnoreCase:[attrs getWithId:@"flatBottom"]];
    flatTop = [@"true" equalsIgnoreCase:[attrs getWithId:@"flatTop"]];
    flatLeft = [@"true" equalsIgnoreCase:[attrs getWithId:@"flatLeft"]];
    flatRight = [@"true" equalsIgnoreCase:[attrs getWithId:@"flatRight"]];
    padForArc = ![@"false" equalsIgnoreCase:[attrs getWithId:@"padForArc"]];
  }
  switch (btype) {
    case RARESPOTWidget_CBorder_none:
    border = RAREBorderUtils_EMPTY_BORDER_;
    break;
    case RARESPOTWidget_CBorder_raised:
    case RARESPOTWidget_CBorder_lowered:
    {
      if (color == nil) {
        ca = [RAREBorderUtils getBevelColorsWithRAREiWidget:context withBoolean:NO];
      }
      else {
        ca = [RAREColorUtils getColorsWithNSString:color withInt:2];
      }
      bb = [[RAREUIBevelBorder alloc] initWithInt:(btype == RARESPOTWidget_CBorder_raised) ? RAREaUIBevelBorder_RAISED : RAREaUIBevelBorder_LOWERED withBoolean:NO];
      [bb setFourColorBevelWithBoolean:NO];
      [bb setColorsWithRAREUIColor:IOSObjectArray_Get(nil_chk(ca), 0) withRAREUIColor:IOSObjectArray_Get(ca, 1)];
      border = bb;
      break;
    }
    case RARESPOTWidget_CBorder_bevel_raised:
    case RARESPOTWidget_CBorder_bevel_lowered:
    {
      bb = [[RAREUIBevelBorder alloc] initWithInt:(btype == RARESPOTWidget_CBorder_bevel_raised) ? RAREaUIBevelBorder_RAISED : RAREaUIBevelBorder_LOWERED withBoolean:YES];
      if (color == nil) {
        ca = [RAREBorderUtils getBevelColorsWithRAREiWidget:context withBoolean:YES];
      }
      else {
        ca = [RAREColorUtils getColorsWithNSString:color withInt:4];
      }
      [bb setFourColorBevelWithBoolean:YES];
      [bb setColorsWithRAREUIColor:IOSObjectArray_Get(nil_chk(ca), 0) withRAREUIColor:IOSObjectArray_Get(ca, 1) withRAREUIColor:IOSObjectArray_Get(ca, 2) withRAREUIColor:IOSObjectArray_Get(ca, 3)];
      border = bb;
      break;
    }
    case RARESPOTWidget_CBorder_etched_raised:
    case RARESPOTWidget_CBorder_etched_lowered:
    {
      if (color == nil) {
        ca = [RAREBorderUtils getEtchedColorsWithRAREiWidget:context];
      }
      else {
        ca = [RAREColorUtils getColorsWithNSString:color withInt:2];
      }
      border = [[RAREUIEtchedBorder alloc] initWithInt:(btype == RARESPOTWidget_CBorder_etched_raised) ? RAREaUIEtchedBorder_RAISED : RAREaUIEtchedBorder_LOWERED withRAREUIColor:IOSObjectArray_Get(nil_chk(ca), 0) withRAREUIColor:IOSObjectArray_Get(ca, 1)];
      break;
    }
    case RARESPOTWidget_CBorder_titled:
    case RARESPOTWidget_CBorder_group_box:
    border = [RAREBorderUtils createTitledBorderWithRAREiWidget:context withJavaUtilMap:attrs withNSString:color withFloat:thickness withBoolean:YES];
    break;
    case RARESPOTWidget_CBorder_line:
    {
      ca = (color == nil) ? nil : [RAREColorUtils getColorsWithNSString:color withInt:2];
      c = ((ca == nil) || (IOSObjectArray_Get(ca, 0) == nil)) ? [RAREaUILineBorder getDefaultLineColor] : IOSObjectArray_Get(ca, 0);
      if (thickness < .25) {
        thickness = (thickness == 0) ? [RAREaUILineBorder onePixelThickness] : [RAREScreenUtils PLATFORM_PIXELS_1];
      }
      RAREaUILineBorder *lb;
      lb = [RAREaUILineBorder createBorderWithRAREiWidget:context withRAREUIColor:c withFloat:thickness withFloat:arcW withFloat:arcH];
      if ((ca != nil) && (IOSObjectArray_Get(ca, 1) != nil)) {
        lb = [((RAREaUILineBorder *) nil_chk(lb)) setHilightColorWithRAREUIColor:IOSObjectArray_Get(ca, 1)];
      }
      else if ((ca == nil) || (IOSObjectArray_Get(ca, 0) == nil)) {
        lb = [((RAREaUILineBorder *) nil_chk(lb)) setHilightColorWithRAREUIColor:[((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"controlHighlight"]];
      }
      if (noBottom) {
        lb = [((RAREaUILineBorder *) nil_chk(lb)) setNoBottomWithBoolean:YES];
      }
      else if (flatBottom) {
        lb = [((RAREaUILineBorder *) nil_chk(lb)) setFlatBottomWithBoolean:YES];
      }
      if (noTop) {
        lb = [((RAREaUILineBorder *) nil_chk(lb)) setNoTopWithBoolean:YES];
      }
      else if (flatTop) {
        lb = [((RAREaUILineBorder *) nil_chk(lb)) setFlatTopWithBoolean:YES];
      }
      if (flatLeft) {
        lb = [((RAREaUILineBorder *) nil_chk(lb)) setFlatLeftWithBoolean:flatLeft];
      }
      if (flatRight) {
        lb = [((RAREaUILineBorder *) nil_chk(lb)) setFlatRightWithBoolean:flatRight];
      }
      if (attrs != nil) {
        if ([@"true" equalsIgnoreCase:[attrs getWithId:@"noLeft"]]) {
          lb = [((RAREaUILineBorder *) nil_chk(lb)) setNoLeftWithBoolean:YES];
        }
        if ([@"true" equalsIgnoreCase:[attrs getWithId:@"noRight"]]) {
          lb = [((RAREaUILineBorder *) nil_chk(lb)) setNoRightWithBoolean:YES];
        }
        s = [attrs getWithId:@"style"];
        if (s != nil) {
          lb = [((RAREaUILineBorder *) nil_chk(lb)) setLineStyleWithNSString:s];
        }
        s = [attrs getWithId:@"insets"];
        if (s != nil) {
          in = [RAREUtils getInsetsWithNSString:s];
          if (in != nil) {
            lb = [((RAREaUILineBorder *) nil_chk(lb)) setInsetsWithRAREUIInsets:in];
          }
        }
      }
      border = lb;
      break;
    }
    case RARESPOTWidget_CBorder_icon:
    {
      if (attrs != nil) {
        s = [attrs getWithId:@"insets"];
        if ((s == nil) || ([s sequenceLength] == 0)) {
          border = [[RAREUIIconBorder alloc] initWithInt:0 withInt:0 withInt:0 withInt:0];
        }
        else {
          border = [[RAREUIIconBorder alloc] initWithRAREUIInsets:[RAREUtils getInsetsWithNSString:s]];
        }
        s = [attrs getWithId:@"icon"];
        if (s != nil) {
          if ([((NSString *) nil_chk([s lowercaseStringWithJRELocale:[JavaUtilLocale US]])) hasSuffix:@".9.png"]) {
            @try {
              [((RAREUIIconBorder *) check_class_cast(border, [RAREUIIconBorder class])) setNinePatchWithRARENinePatch:[[RARENinePatch alloc] initWithRAREaUIImage:[RAREUIImageHelper createImageWithJavaNetURL:[((id<RAREiWidget>) nil_chk(context)) getURLWithNSString:s] withBoolean:YES withFloat:1]]];
            }
            @catch (JavaLangException *ex) {
              [RAREPlatform ignoreExceptionWithNSString:[NSString stringWithFormat:@"UIIconBorder:%@", s] withJavaLangThrowable:ex];
            }
          }
          else if ([s hasPrefix:@"drawable/"]) {
            [((RAREUIIconBorder *) check_class_cast(border, [RAREUIIconBorder class])) setPatternWithRAREUIImage:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getResourceAsImageWithNSString:s]];
          }
          else {
            icons = [RAREUtils getIconsWithRAREiWidget:context withNSString:s withInt:4];
            if (icons != nil) {
              [((RAREUIIconBorder *) check_class_cast(border, [RAREUIIconBorder class])) setIconsWithRAREiPlatformIcon:IOSObjectArray_Get(icons, 0) withRAREiPlatformIcon:IOSObjectArray_Get(icons, 1) withRAREiPlatformIcon:IOSObjectArray_Get(icons, 2) withRAREiPlatformIcon:IOSObjectArray_Get(icons, 3)];
            }
          }
        }
        s = [attrs getWithId:@"renderType"];
        if ((s != nil) || ([attrs getWithId:@"opacity"] != nil)) {
          IOSObjectArray *types = [RAREUtils getRenderTypesWithNSString:s withInt:4];
          in = [RAREUtils getInsetsWithNSString:[attrs getWithId:@"opacity"]];
          if (in == nil) {
            in = [[RAREUIInsets alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_1] * 32];
          }
          if (types != nil) {
            [((RAREUIIconBorder *) check_class_cast(border, [RAREUIIconBorder class])) setRenderInfoWithRARERenderTypeEnum:IOSObjectArray_Get(types, 0) withInt:(int) ((RAREUIInsets *) nil_chk(in))->top_ withRARERenderTypeEnum:IOSObjectArray_Get(types, 1) withInt:(int) in->left_ withRARERenderTypeEnum:IOSObjectArray_Get(types, 2) withInt:(int) in->bottom_ withRARERenderTypeEnum:IOSObjectArray_Get(types, 3) withInt:(int) in->right_];
          }
        }
      }
      else {
        border = [[RAREUIIconBorder alloc] initWithInt:0 withInt:0 withInt:0 withInt:0];
      }
      break;
    }
    case RARESPOTWidget_CBorder_back:
    {
      c = (color == nil) ? [RAREaUILineBorder getDefaultLineColor] : [RAREColorUtils getColorWithNSString:color];
      if (thickness < .25) {
        thickness = (thickness == 0) ? [RAREaUILineBorder onePixelThickness] : [RAREScreenUtils PLATFORM_PIXELS_1];
      }
      border = [[RAREUIBackBorder alloc] initWithRAREUIColor:c withFloat:thickness withFloat:arcW withFloat:arcH];
      if (attrs != nil) {
        if ([@"true" equalsIgnoreCase:[attrs getWithId:@"noLeft"]]) {
          (void) [((RAREUIBackBorder *) check_class_cast(border, [RAREUIBackBorder class])) setNoLeftWithBoolean:YES];
        }
      }
      break;
    }
    case RARESPOTWidget_CBorder_balloon:
    {
      c = (color == nil) ? [RAREaUILineBorder getDefaultLineColor] : [RAREColorUtils getColorWithNSString:color];
      if (thickness < .25) {
        thickness = (thickness == 0) ? [RAREaUILineBorder onePixelThickness] : [RAREScreenUtils PLATFORM_PIXELS_1];
      }
      border = [[RAREUIBalloonBorder alloc] initWithRAREUIColor:c withFloat:thickness withFloat:[JavaLangMath maxWithFloat:arcW withFloat:arcH]];
      BOOL autoLocate = YES;
      if (attrs != nil) {
        s = [attrs getWithId:@"style"];
        if (s != nil) {
          @try {
            [((RAREUIBalloonBorder *) check_class_cast(border, [RAREUIBalloonBorder class])) setPeakLocationWithRAREaUIBalloonBorder_PeakLocationEnum:[RAREaUIBalloonBorder_PeakLocationEnum valueOfWithNSString:[s uppercaseStringWithJRELocale:[JavaUtilLocale US]]]];
          }
          @catch (JavaLangException *e) {
            [RAREPlatform ignoreExceptionWithNSString:@"bad balloon border peak location in style attribute" withJavaLangThrowable:e];
          }
        }
        s = [attrs getWithId:@"insets"];
        if (s != nil) {
          int n = [s indexOf:','];
          if (n != -1) {
            int ps = [RAREUTSNumber intValueWithNSString:[((NSString *) nil_chk([s substring:n + 1])) trim]];
            if (ps != 0) {
              [((RAREUIBalloonBorder *) check_class_cast(border, [RAREUIBalloonBorder class])) setPeakSizeWithFloat:[RAREScreenUtils platformPixelsWithFloat:ps]];
            }
            s = [((NSString *) nil_chk([s substring:0 endIndex:n])) trim];
            int po = [RAREUTSNumber intValueWithNSString:s];
            if (po != 0) {
              autoLocate = NO;
              [((RAREUIBalloonBorder *) check_class_cast(border, [RAREUIBalloonBorder class])) setPeakOffsetWithFloat:[RAREScreenUtils platformPixelsWithFloat:po]];
            }
          }
        }
      }
      [((RAREUIBalloonBorder *) check_class_cast(border, [RAREUIBalloonBorder class])) setAutoLocatePeakWithBoolean:autoLocate];
      break;
    }
    case RARESPOTWidget_CBorder_matte:
    {
      c = (color == nil) ? [RAREaUILineBorder getDefaultLineColor] : [RAREColorUtils getColorWithNSString:color];
      if (thickness < .25) {
        thickness = [RAREScreenUtils PLATFORM_PIXELS_1];
      }
      s = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"insets"];
      in = [RAREUtils getInsetsWithNSString:s];
      border = [[RAREUIMatteBorder alloc] initWithRAREUIInsets:in withRAREUIColor:c];
      s = (attrs == nil) ? nil : [attrs getWithId:@"style"];
      if (s != nil) {
        [((RAREUIMatteBorder *) check_class_cast(border, [RAREUIMatteBorder class])) setLineStyleWithNSString:s];
      }
      break;
    }
    case RARESPOTWidget_CBorder_standard:
    break;
    case RARESPOTWidget_CBorder_frame_raised:
    {
      if (color == nil) {
        ca = [RAREBorderUtils getBevelColorsWithRAREiWidget:context withBoolean:YES];
        border = [[RAREUIFrameBorder alloc] initWithInt:RAREaUIBevelBorder_RAISED withRAREUIColor:IOSObjectArray_Get(nil_chk(ca), 0) withRAREUIColor:IOSObjectArray_Get(ca, 1) withRAREUIColor:IOSObjectArray_Get(ca, 2) withRAREUIColor:IOSObjectArray_Get(ca, 3)];
      }
      else {
        ca = [RAREColorUtils getColorsWithNSString:color withInt:2];
        if ((int) [((IOSObjectArray *) nil_chk(ca)) count] > 2) {
          border = [[RAREUIFrameBorder alloc] initWithInt:RAREaUIBevelBorder_RAISED withRAREUIColor:IOSObjectArray_Get(ca, 0) withRAREUIColor:IOSObjectArray_Get(ca, 1) withRAREUIColor:IOSObjectArray_Get(ca, 2) withRAREUIColor:((int) [ca count] > 3) ? IOSObjectArray_Get(ca, 3) : nil];
        }
        else {
          if ((IOSObjectArray_Get(ca, 0) == nil) || (IOSObjectArray_Get(ca, 1) == nil)) {
            ca = [RAREBorderUtils getBevelColorsWithRAREiWidget:context withBoolean:YES];
            border = [[RAREUIFrameBorder alloc] initWithInt:RAREaUIBevelBorder_RAISED withRAREUIColor:IOSObjectArray_Get(nil_chk(ca), 0) withRAREUIColor:IOSObjectArray_Get(ca, 1) withRAREUIColor:IOSObjectArray_Get(ca, 2) withRAREUIColor:IOSObjectArray_Get(ca, 3)];
          }
        }
      }
      break;
    }
    case RARESPOTWidget_CBorder_frame_lowered:
    {
      if (color == nil) {
        ca = [RAREBorderUtils getBevelColorsWithRAREiWidget:context withBoolean:NO];
        border = [[RAREUIFrameBorder alloc] initWithInt:RAREaUIBevelBorder_LOWERED withRAREUIColor:IOSObjectArray_Get(nil_chk(ca), 0) withRAREUIColor:IOSObjectArray_Get(ca, 1)];
      }
      else {
        ca = [RAREColorUtils getColorsWithNSString:color withInt:2];
        if ((int) [((IOSObjectArray *) nil_chk(ca)) count] > 2) {
          border = [[RAREUIFrameBorder alloc] initWithInt:RAREaUIBevelBorder_LOWERED withRAREUIColor:IOSObjectArray_Get(ca, 0) withRAREUIColor:IOSObjectArray_Get(ca, 1) withRAREUIColor:IOSObjectArray_Get(ca, 2) withRAREUIColor:((int) [ca count] > 3) ? IOSObjectArray_Get(ca, 3) : nil];
        }
        else {
          if ((IOSObjectArray_Get(ca, 0) == nil) || (IOSObjectArray_Get(ca, 1) == nil)) {
            ca = [RAREBorderUtils getBevelColorsWithRAREiWidget:context withBoolean:NO];
            border = [[RAREUIFrameBorder alloc] initWithInt:RAREaUIBevelBorder_LOWERED withRAREUIColor:IOSObjectArray_Get(nil_chk(ca), 0) withRAREUIColor:IOSObjectArray_Get(ca, 1)];
          }
        }
      }
      break;
    }
    case RARESPOTWidget_CBorder_drop_shadow:
    {
      c = (color == nil) ? [RAREaUIDropShadowBorder getDefaultShadowColor] : [RAREColorUtils getColorWithNSString:color];
      if (thickness < 1) {
        thickness = [RAREScreenUtils PLATFORM_PIXELS_5];
      }
      if (arcW < 1) {
        arcW = [RAREScreenUtils PLATFORM_PIXELS_6] + [RAREScreenUtils PLATFORM_PIXELS_6];
      }
      top = NO;
      left = NO;
      bottom = YES;
      right = YES;
      if (attrs != nil) {
        s = [attrs getWithId:@"insets"];
        in = [RAREUtils getInsetsWithNSString:s];
        if (in != nil) {
          top = in->top_ > 0;
          left = in->left_ > 0;
          bottom = in->bottom_ > 0;
          right = in->right_ > 0;
        }
      }
      border = [[RAREUIDropShadowBorder alloc] initWithRAREUIColor:c withFloat:thickness withFloat:.5f withFloat:arcW withBoolean:top withBoolean:left withBoolean:bottom withBoolean:right];
      break;
    }
    case RARESPOTWidget_CBorder_shadow:
    {
      c = (color == nil) ? [RAREaUIDropShadowBorder getDefaultShadowColor] : [RAREColorUtils getColorWithNSString:color];
      if (thickness < 1) {
        thickness = [RAREScreenUtils PLATFORM_PIXELS_5];
      }
      if (arcW < 1) {
        arcW = [RAREScreenUtils PLATFORM_PIXELS_6] + [RAREScreenUtils PLATFORM_PIXELS_6];
      }
      top = YES;
      left = YES;
      bottom = YES;
      right = YES;
      if (attrs != nil) {
        s = [attrs getWithId:@"insets"];
        in = [RAREUtils getInsetsWithNSString:s];
        if (in != nil) {
          top = in->top_ > 0;
          left = in->left_ > 0;
          bottom = in->bottom_ > 0;
          right = in->right_ > 0;
        }
      }
      border = [[RAREUIDropShadowBorder alloc] initWithRAREUIColor:c withFloat:thickness withFloat:.5f withFloat:arcW withBoolean:top withBoolean:left withBoolean:bottom withBoolean:right];
      break;
    }
    case RARESPOTWidget_CBorder_empty:
    {
      if (attrs != nil) {
        s = [attrs getWithId:@"insets"];
        if ((s == nil) || ([s sequenceLength] == 0)) {
          border = RAREBorderUtils_EMPTY_BORDER_;
        }
        else {
          border = [[RAREUIEmptyBorder alloc] initWithRAREUIInsets:[RAREUtils getInsetsWithNSString:s]];
        }
      }
      else {
        border = RAREBorderUtils_EMPTY_BORDER_;
      }
      break;
    }
    case RARESPOTWidget_CBorder_custom:
    {
      s = (attrs == nil) ? nil : [attrs getWithId:@"class"];
      if (s != nil) {
        if ([s hasPrefix:[RAREiConstants RESOURCE_PREFIX]]) {
          border = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBorderWithNSString:[s substring:[RAREiConstants RESOURCE_PREFIX_LENGTH]]];
        }
        else {
          @try {
            IOSClass *cls = [RAREPlatform loadClassWithNSString:s];
            JavaLangReflectConstructor *constructor = [RAREaPlatformHelper getConstructorWithIOSClass:cls withIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithProtocol:@protocol(JavaUtilMap)] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
            if (constructor != nil) {
              border = (id<RAREiPlatformBorder>) check_protocol_cast([constructor newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ attrs } count:1 type:[IOSClass classWithClass:[NSObject class]]]], @protocol(RAREiPlatformBorder));
            }
            else {
              border = (id<RAREiPlatformBorder>) check_protocol_cast([((IOSClass *) nil_chk(cls)) newInstance], @protocol(RAREiPlatformBorder));
            }
          }
          @catch (JavaLangException *ex) {
            if ([((id<RAREiWidget>) nil_chk(context)) isDesignMode]) {
              [RAREPlatform debugLogWithNSString:[NSString stringWithFormat:@"Unable to load custom border class:%@", s]];
            }
            else {
              @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:ex];
            }
          }
        }
      }
      if ([(id) border isKindOfClass:[RAREaUILineBorder class]]) {
        RAREaUILineBorder *lb = (RAREaUILineBorder *) check_class_cast(border, [RAREaUILineBorder class]);
        [((RAREaUILineBorder *) nil_chk(lb)) setCornerArcWithFloat:arcW];
        if (thickness < .25) {
          thickness = (thickness == 0) ? [RAREaUILineBorder onePixelThickness] : [RAREScreenUtils PLATFORM_PIXELS_1];
        }
        (void) [lb setThicknessWithFloat:thickness];
        if (color != nil) {
          (void) [lb setLineColorWithRAREUIColor:[RAREColorUtils getColorWithNSString:color]];
        }
        if (noBottom) {
          lb = [lb setNoBottomWithBoolean:YES];
        }
        else if (flatBottom) {
          lb = [lb setFlatBottomWithBoolean:YES];
        }
        if (noTop) {
          lb = [((RAREaUILineBorder *) nil_chk(lb)) setNoTopWithBoolean:YES];
        }
        else if (flatTop) {
          lb = [((RAREaUILineBorder *) nil_chk(lb)) setFlatTopWithBoolean:YES];
        }
        if (flatLeft) {
          lb = [((RAREaUILineBorder *) nil_chk(lb)) setFlatLeftWithBoolean:flatLeft];
        }
        if (flatRight) {
          lb = [((RAREaUILineBorder *) nil_chk(lb)) setFlatRightWithBoolean:flatRight];
        }
        if (attrs != nil) {
          if ([@"true" equalsIgnoreCase:[attrs getWithId:@"noLeft"]]) {
            lb = [((RAREaUILineBorder *) nil_chk(lb)) setNoLeftWithBoolean:YES];
          }
          if ([@"true" equalsIgnoreCase:[attrs getWithId:@"noRight"]]) {
            lb = [((RAREaUILineBorder *) nil_chk(lb)) setNoRightWithBoolean:YES];
          }
          s = [attrs getWithId:@"style"];
          if (s != nil) {
            lb = [((RAREaUILineBorder *) nil_chk(lb)) setLineStyleWithNSString:s];
          }
          s = [attrs getWithId:@"insets"];
          if (s != nil) {
            in = [RAREUtils getInsetsWithNSString:s];
            if (in != nil) {
              lb = [((RAREaUILineBorder *) nil_chk(lb)) setInsetsWithRAREUIInsets:in];
            }
          }
        }
      }
      break;
    }
    default:
    break;
  }
  if (border != nil) {
    s = (attrs == nil) ? nil : [attrs getWithId:@"customProperties"];
    if ((s != nil) && ([s sequenceLength] > 0) && (border != nil)) {
      [border handleCustomPropertiesWithJavaUtilMap:[RAREUTCharScanner parseOptionStringWithNSString:s withChar:';']];
    }
  }
  if ([(id) border isKindOfClass:[RAREUIBevelBorder class]]) {
    if (flatBottom) {
      [((RAREUIBevelBorder *) check_class_cast(border, [RAREUIBevelBorder class])) setFlatBottomWithBoolean:YES];
    }
    if (noBottom) {
      [((RAREUIBevelBorder *) check_class_cast(border, [RAREUIBevelBorder class])) setNoBottomWithBoolean:YES];
    }
  }
  if (border != nil) {
    [border setPadForArcWithBoolean:padForArc];
  }
  return border;
}

+ (id<RAREiPlatformBorder>)createBorderWithRAREiWidget:(id<RAREiWidget>)context
                                           withSPOTSet:(SPOTSet *)borders
                               withRAREiPlatformBorder:(id<RAREiPlatformBorder>)standard {
  if (borders == nil) {
    return nil;
  }
  int len = [((SPOTSet *) nil_chk(borders)) getCount];
  if (len == 0) {
    return nil;
  }
  SPOTEnumerated *e;
  if (len == 1) {
    e = (SPOTEnumerated *) check_class_cast([borders getExWithInt:0], [SPOTEnumerated class]);
    return [RAREBorderUtils createBorderWithRAREiWidget:context withInt:[((SPOTEnumerated *) nil_chk(e)) intValue] withJavaUtilMap:[e spot_getAttributesEx]];
  }
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] initWithInt:len];
  for (int i = 0; i < len; i++) {
    e = (SPOTEnumerated *) check_class_cast([borders getExWithInt:i], [SPOTEnumerated class]);
    id<RAREiPlatformBorder> b = [RAREBorderUtils createBorderWithRAREiWidget:context withInt:[((SPOTEnumerated *) nil_chk(e)) intValue] withJavaUtilMap:[e spot_getAttributesEx]];
    if ((b == nil) && ([e intValue] == RARESPOTWidget_CBorder_standard)) {
      b = standard;
    }
    if (b != nil) {
      [list addWithId:b];
    }
  }
  len = [list size];
  if (len == 0) {
    return nil;
  }
  if (len == 1) {
    return [list getWithInt:0];
  }
  if (len == 2) {
    return [[RAREUICompoundBorder alloc] initWithRAREiPlatformBorder:[list getWithInt:0] withRAREiPlatformBorder:[list getWithInt:1]];
  }
  return [[RAREUICompoundBorder alloc] initWithRAREiPlatformBorderArray:[list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:len type:[IOSClass classWithProtocol:@protocol(RAREiPlatformBorder)]]]];
}

+ (id<RAREiPlatformBorder>)createBorderWithRAREiWidget:(id<RAREiWidget>)context
                                          withNSString:(NSString *)border
                               withRAREiPlatformBorder:(id<RAREiPlatformBorder>)standard {
  if (border == nil) {
    return nil;
  }
  if ([@"none" isEqual:border]) {
    return RAREBorderUtils_EMPTY_BORDER_;
  }
  @try {
    JavaIoReader *r;
    if (![((NSString *) nil_chk(border)) hasPrefix:@"{"] && ![border hasPrefix:@"borders"]) {
      r = [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) [[RAREUTCharArray alloc] initWithInt:[border sequenceLength] + 2]) setWithChar:'{'])) appendWithNSString:border])) appendWithChar:'}'];
    }
    else {
      r = [[JavaIoStringReader alloc] initWithNSString:border];
    }
    SDFNode *node = [SDFNode parseWithJavaIoReader:r withRAREUTiFileResolver:[((id<RAREiWidget>) nil_chk(context)) getURLResolver] withNSString:nil withBoolean:NO];
    node = [((SDFNode *) nil_chk(node)) getFirstDataNode];
    SPOTSet *borders = [[SPOTSet alloc] initWithNSString:@"border" withISPOTElement:[[RARESPOTGridCell_CBorder alloc] initWithJavaLangInteger:nil withNSString:nil withJavaLangInteger:[JavaLangInteger valueOfWithInt:RARESPOTGridCell_CBorder_standard] withNSString:@"standard" withBoolean:YES] withInt:-1 withInt:-1 withBoolean:YES];
    [borders fromSDFWithSDFNode:node];
    return [RAREBorderUtils createBorderWithRAREiWidget:context withSPOTSet:borders withRAREiPlatformBorder:standard];
  }
  @catch (JavaLangException *e) {
    @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:e];
  }
}

+ (id<RAREiPlatformBorder>)createEmptyBorderWithRAREiWidget:(id<RAREiWidget>)context
                                         withRARESPOTMargin:(RARESPOTMargin *)m {
  return [[RAREUIEmptyBorder alloc] initWithRAREUIInsets:[((RARESPOTMargin *) nil_chk(m)) getInsets]];
}

+ (id<RAREiPlatformPath>)createPath {
  return [RAREaPlatformHelper createPath];
}

+ (id<RAREiPlatformPath>)createLineBorderPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)aw
                                                         withFloat:(float)ah
                                                       withBoolean:(BOOL)flatBottom
                                                       withBoolean:(BOOL)flatTop
                                                       withBoolean:(BOOL)noTop
                                                       withBoolean:(BOOL)noBottom
                                                       withBoolean:(BOOL)noLeft
                                                       withBoolean:(BOOL)noRight {
  return [RAREBorderUtils createLineBorderPathWithRAREiPlatformPath:p withFloat:width withFloat:height withFloat:aw withFloat:ah withBoolean:flatBottom withBoolean:flatTop withBoolean:NO withBoolean:NO withBoolean:noTop withBoolean:noBottom withBoolean:noLeft withBoolean:noRight];
}

+ (id<RAREiPlatformPath>)createLineBorderPathWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                                         withFloat:(float)width
                                                         withFloat:(float)height
                                                         withFloat:(float)aw
                                                         withFloat:(float)ah
                                                       withBoolean:(BOOL)flatBottom
                                                       withBoolean:(BOOL)flatTop
                                                       withBoolean:(BOOL)flatLeft
                                                       withBoolean:(BOOL)flatRight
                                                       withBoolean:(BOOL)noTop
                                                       withBoolean:(BOOL)noBottom
                                                       withBoolean:(BOOL)noLeft
                                                       withBoolean:(BOOL)noRight {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  if (((aw == 0) && (ah == 0)) || (flatBottom && flatTop && flatLeft && flatRight)) {
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:0 withFloat:0];
    if (!noTop) {
      (void) [p lineToWithFloat:width withFloat:0];
    }
    else {
      (void) [p moveToWithFloat:width withFloat:0];
    }
    if (!noRight) {
      (void) [p lineToWithFloat:width withFloat:height];
    }
    else {
      (void) [p moveToWithFloat:width withFloat:height];
    }
    if (!noBottom) {
      (void) [p lineToWithFloat:0 withFloat:height];
    }
    else {
      (void) [p moveToWithFloat:0 withFloat:height];
    }
    if (!noLeft) {
      (void) [p lineToWithFloat:0 withFloat:0];
    }
    else {
      (void) [p moveToWithFloat:0 withFloat:0];
    }
    (void) [p moveToWithFloat:0 withFloat:0];
    return p;
  }
  if (noLeft || flatLeft) {
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:0 withFloat:0];
    (void) [p lineToWithFloat:width - aw withFloat:0];
    (void) [p quadToWithFloat:width withFloat:0 withFloat:width withFloat:ah];
    (void) [p lineToWithFloat:width withFloat:height - ah];
    (void) [p quadToWithFloat:width withFloat:height withFloat:width - aw withFloat:height];
    (void) [p lineToWithFloat:0 withFloat:height];
    if (flatLeft) {
      (void) [p lineToWithFloat:0 withFloat:0];
    }
    else {
      (void) [p moveToWithFloat:0 withFloat:height];
    }
  }
  else if (noRight || flatRight) {
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:width withFloat:height];
    (void) [p lineToWithFloat:aw withFloat:height];
    (void) [p quadToWithFloat:0 withFloat:height withFloat:0 withFloat:height - ah];
    (void) [p lineToWithFloat:0 withFloat:ah];
    (void) [p quadToWithFloat:0 withFloat:0 withFloat:aw withFloat:0];
    (void) [p lineToWithFloat:width withFloat:0];
    if (flatTop) {
      (void) [p lineToWithFloat:0 withFloat:0];
    }
    else {
      (void) [p moveToWithFloat:width withFloat:0];
    }
  }
  else if (flatTop) {
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:0 withFloat:0];
    (void) [p lineToWithFloat:0 withFloat:height - ah];
    (void) [p quadToWithFloat:0 withFloat:height withFloat:aw withFloat:height];
    (void) [p lineToWithFloat:width - aw withFloat:height];
    (void) [p quadToWithFloat:width withFloat:height withFloat:width withFloat:height - ah];
    (void) [p lineToWithFloat:width withFloat:0];
    if (noTop) {
      (void) [p moveToWithFloat:width withFloat:0];
    }
    else {
      (void) [p lineToWithFloat:0 withFloat:0];
    }
  }
  else if (flatBottom) {
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:0 withFloat:height];
    (void) [p lineToWithFloat:0 withFloat:ah];
    (void) [p quadToWithFloat:0 withFloat:0 withFloat:aw withFloat:0];
    (void) [p lineToWithFloat:width - aw withFloat:0];
    (void) [p quadToWithFloat:width withFloat:0 withFloat:width withFloat:ah];
    (void) [p lineToWithFloat:width withFloat:height];
    if (noBottom) {
      (void) [p moveToWithFloat:width withFloat:height];
    }
    else {
      (void) [p lineToWithFloat:0 withFloat:height];
    }
  }
  else {
    [((id<RAREiPlatformPath>) nil_chk(p)) drawRoundedRectWithFloat:0 withFloat:0 withFloat:width withFloat:height withFloat:aw withFloat:ah];
  }
  [((id<RAREiPlatformPath>) nil_chk(p)) close];
  return p;
}

+ (RAREUIDropShadowBorder *)createShadowBorderWithFloat:(float)thickness {
  RAREUIColor *c = [RAREaUIDropShadowBorder getDefaultShadowColor];
  float arcW = [RAREScreenUtils PLATFORM_PIXELS_5];
  return [[RAREUIDropShadowBorder alloc] initWithRAREUIColor:c withFloat:thickness withFloat:.5f withFloat:arcW withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES];
}

+ (RAREUIColor *)findBorderColorWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)b {
  if ([(id) b isKindOfClass:[RAREUILineBorder class]]) {
    return [((RAREUILineBorder *) check_class_cast(b, [RAREUILineBorder class])) getLineColor];
  }
  if ([(id) b isKindOfClass:[RAREUIMatteBorder class]]) {
    return [((RAREUIMatteBorder *) check_class_cast(b, [RAREUIMatteBorder class])) getLineColor];
  }
  if ([(id) b isKindOfClass:[RAREUICompoundBorder class]]) {
    RAREUIColor *c = [RAREBorderUtils findBorderColorWithRAREiPlatformBorder:[((RAREUICompoundBorder *) check_class_cast(b, [RAREUICompoundBorder class])) getOutsideBorder]];
    if (c == nil) {
      c = [RAREBorderUtils findBorderColorWithRAREiPlatformBorder:[((RAREUICompoundBorder *) check_class_cast(b, [RAREUICompoundBorder class])) getInsideBorder]];
    }
    return c;
  }
  return nil;
}

+ (IOSObjectArray *)getBevelColorsWithRAREUIColor:(RAREUIColor *)c
                                      withBoolean:(BOOL)four {
  IOSObjectArray *ca;
  if ((c == nil) || [c isEqual:[RAREUIColor BLACK]]) {
    c = [RAREColorUtils getBackground];
  }
  if ([((RAREUIColor *) nil_chk(c)) isDarkColor]) {
    c = [c brighter];
  }
  if (four) {
    ca = [IOSObjectArray arrayWithLength:4 type:[IOSClass classWithClass:[RAREUIColor class]]];
    (void) IOSObjectArray_Set(ca, 3, [((RAREUIColor *) nil_chk([((RAREUIColor *) nil_chk(c)) darker])) darker]);
    (void) IOSObjectArray_Set(ca, 2, [c darker]);
    (void) IOSObjectArray_Set(ca, 1, [c brighterBrighter]);
    (void) IOSObjectArray_Set(ca, 0, [c brighter]);
  }
  else {
    ca = [IOSObjectArray arrayWithLength:2 type:[IOSClass classWithClass:[RAREUIColor class]]];
    (void) IOSObjectArray_Set(ca, 0, [((RAREUIColor *) nil_chk(c)) darkerDarker]);
    (void) IOSObjectArray_Set(ca, 1, [c brighter]);
  }
  return ca;
}

+ (RAREUILineBorder *)getButtonBorderWithInt:(int)pointInset {
  RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.PushButton.borderColor"];
  if (c == nil) {
    c = [((RAREUIColor *) nil_chk([RAREaUILineBorder getDefaultLineColor])) darker];
  }
  float th = [RAREPlatform isTouchDevice] ? [RAREScreenUtils platformPixelsWithFloat:1.5f] : [RAREScreenUtils PLATFORM_PIXELS_1];
  RAREUILineBorder *b = [[RAREUILineBorder alloc] initWithRAREUIColor:c withFloat:th withFloat:[RAREScreenUtils PLATFORM_PIXELS_6]];
  int n = [RAREScreenUtils platformPixelsWithFloat:pointInset];
  [b setInsetsPaddingWithFloat:n withFloat:n withFloat:n withFloat:n];
  return b;
}

+ (id<RAREiPlatformBorder>)getDefaultButtonBorder {
  if (RAREBorderUtils_defaultButtonBorder_ == nil) {
    RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.PushButton.borderColor"];
    if (c == nil) {
      c = [((RAREUIColor *) nil_chk([RAREaUILineBorder getDefaultLineColor])) darker];
    }
    float th = [RAREPlatform isTouchDevice] ? [RAREScreenUtils platformPixelsWithFloat:1.5f] : [RAREScreenUtils PLATFORM_PIXELS_1];
    RAREUILineBorder *b = [[RAREUILineBorder alloc] initWithRAREUIColor:c withFloat:th withFloat:[RAREScreenUtils PLATFORM_PIXELS_6]];
    RAREUIInsets *insets = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getInsetsWithNSString:@"Rare.PushButton.borderInsets"];
    if (insets != nil) {
      [b setInsetsPaddingWithFloat:insets->top_ withFloat:insets->right_ withFloat:insets->bottom_ withFloat:insets->left_];
    }
    else {
      int tb = [RAREScreenUtils platformPixelsWithFloat:[RAREPlatform isTouchDevice] ? 8 : 2];
      int lr = [RAREScreenUtils platformPixelsWithFloat:8];
      [b setInsetsPaddingWithFloat:tb withFloat:lr withFloat:tb withFloat:lr];
    }
    RAREBorderUtils_defaultButtonBorder_ = b;
  }
  return RAREBorderUtils_defaultButtonBorder_;
}

+ (RAREUILineBorder *)getDefaultComboBoxBorder {
  RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Widget.borderColor"];
  if (c == nil) {
    c = [((RAREUIColor *) nil_chk([RAREaUILineBorder getDefaultLineColor])) darker];
  }
  return [[RAREUILineBorder alloc] initWithRAREUIColor:c withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:[RAREScreenUtils PLATFORM_PIXELS_6]];
}

+ (id<RAREiPlatformBorder>)getDefaultWidgetBorder {
  if (RAREBorderUtils_widgetBorder_ == nil) {
    RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Widget.borderColor"];
    if (c == nil) {
      c = [((RAREUIColor *) nil_chk([RAREaUILineBorder getDefaultLineColor])) darker];
    }
    RAREBorderUtils_widgetBorder_ = [[RAREUILineBorder alloc] initWithRAREUIColor:c withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:[RAREScreenUtils PLATFORM_PIXELS_6]];
  }
  return RAREBorderUtils_widgetBorder_;
}

+ (IOSObjectArray *)getEtchedColorsWithRAREUIColor:(RAREUIColor *)c {
  IOSObjectArray *ca;
  if (c == nil) {
    c = [RAREColorUtils getBackground];
  }
  ca = [IOSObjectArray arrayWithLength:2 type:[IOSClass classWithClass:[RAREUIColor class]]];
  (void) IOSObjectArray_Set(ca, 0, [((RAREUIColor *) nil_chk(c)) brighter]);
  (void) IOSObjectArray_Set(ca, 1, [c darker]);
  return ca;
}

+ (id<RAREiPlatformBorder>)getNewDefaultWidgetBorder {
  RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Widget.borderColor"];
  if (c == nil) {
    c = [((RAREUIColor *) nil_chk([RAREaUILineBorder getDefaultLineColor])) darker];
  }
  return [[RAREUILineBorder alloc] initWithRAREUIColor:c withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:[RAREScreenUtils platformPixelsWithFloat:6]];
}

+ (id<RAREiPlatformBorder>)getTextAreaBorder {
  if (RAREBorderUtils_textareaBorder_ == nil) {
    RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Widget.borderColor"];
    if (c == nil) {
      c = [((RAREUIColor *) nil_chk([RAREaUILineBorder getDefaultLineColor])) darker];
    }
    RAREUILineBorder *b = [[RAREUILineBorder alloc] initWithRAREUIColor:c withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:0];
    [b setInsetsPaddingWithFloat:[RAREScreenUtils PLATFORM_PIXELS_2] withFloat:[RAREScreenUtils PLATFORM_PIXELS_2] withFloat:[RAREScreenUtils PLATFORM_PIXELS_2] withFloat:[RAREScreenUtils PLATFORM_PIXELS_2]];
    RAREBorderUtils_textareaBorder_ = b;
  }
  return RAREBorderUtils_textareaBorder_;
}

+ (id<RAREiPlatformBorder>)getTextFieldBorder {
  if (RAREBorderUtils_textfieldBorder_ == nil) {
    RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Widget.borderColor"];
    if (c == nil) {
      c = [((RAREUIColor *) nil_chk([RAREaUILineBorder getDefaultLineColor])) darker];
    }
    RAREUILineBorder *b = [[RAREUILineBorder alloc] initWithRAREUIColor:c withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:[RAREScreenUtils PLATFORM_PIXELS_6]];
    [b setInsetsPaddingWithFloat:2 withFloat:2 withFloat:2 withFloat:2];
    RAREBorderUtils_textfieldBorder_ = b;
  }
  return RAREBorderUtils_textfieldBorder_;
}

+ (id<RAREiPlatformBorder>)getToolbarPressedButtonBorder {
  if (RAREBorderUtils_toolbarPressedButtonBorder_ == nil) {
    RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.PushButton.borderColor"];
    if (c == nil) {
      c = [((RAREUIColor *) nil_chk([RAREaUILineBorder getDefaultLineColor])) darker];
    }
    RAREUIBevelBorder *b = [[RAREUIBevelBorder alloc] initWithInt:RAREaUIBevelBorder_LOWERED withBoolean:NO];
    IOSObjectArray *ca = [RAREBorderUtils getBevelColorsWithRAREiWidget:[RAREPlatform getContextRootViewer] withBoolean:NO];
    [b setColorsWithRAREUIColor:IOSObjectArray_Get(nil_chk(ca), 0) withRAREUIColor:IOSObjectArray_Get(ca, 1)];
    RAREUIInsets *insets = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getInsetsWithNSString:@"Rare.PushButton.borderInsets"];
    if (insets != nil) {
      [b setInsetsPaddingWithFloat:insets->top_ withFloat:insets->right_ withFloat:insets->bottom_ withFloat:insets->left_];
    }
    else {
      int tb = [RAREScreenUtils platformPixelsWithFloat:[RAREPlatform isTouchDevice] ? 8 : 4];
      [b setInsetsPaddingWithFloat:tb withFloat:tb withFloat:tb withFloat:tb];
    }
    RAREBorderUtils_toolbarPressedButtonBorder_ = b;
  }
  return RAREBorderUtils_toolbarPressedButtonBorder_;
}

+ (id<RAREiPlatformComponent>)setBorderTypeWithRAREiWidget:(id<RAREiWidget>)context
                                withRAREiPlatformComponent:(id<RAREiPlatformComponent>)comp
                                               withSPOTSet:(SPOTSet *)borders
                                              withNSString:(NSString *)title
                                                   withInt:(int)tdisplay
                                   withRAREiPlatformBorder:(id<RAREiPlatformBorder>)margin
                                               withBoolean:(BOOL)lockable {
  id<RAREiPlatformBorder> border = [RAREBorderUtils createBorderWithRAREiWidget:context withSPOTSet:borders withRAREiPlatformBorder:[((id<RAREiPlatformComponent>) nil_chk(comp)) getBorder]];
  id<RAREiPlatformComponent> panel = comp;
  BOOL titleOnly = NO;
  RAREUITitledBorder *tb = nil;
  if (border == nil) {
    border = [panel getBorder];
  }
  if ([(id) border isKindOfClass:[RAREUITitledBorder class]]) {
    tb = (RAREUITitledBorder *) check_class_cast(border, [RAREUITitledBorder class]);
  }
  else {
    id<RAREiPlatformComponent> c = [((id<RAREiWidget>) nil_chk(context)) getContainerComponent];
    tb = (RAREUITitledBorder *) check_class_cast([comp getClientPropertyWithNSString:RAREBorderUtils_TITLEBORDER_CONFIGURED_PROPERTY_], [RAREUITitledBorder class]);
    if (c != comp) {
      [comp putClientPropertyWithNSString:RAREBorderUtils_TITLEBORDER_CONFIGURED_PROPERTY_ withId:tb];
    }
  }
  if (([(id) border isKindOfClass:[RAREUIIconBorder class]]) && [(id) [((RAREUIIconBorder *) check_class_cast(border, [RAREUIIconBorder class])) getOverLayBorder] isKindOfClass:[RAREUITitledBorder class]]) {
    tb = (RAREUITitledBorder *) check_class_cast([((RAREUIIconBorder *) check_class_cast(border, [RAREUIIconBorder class])) getOverLayBorder], [RAREUITitledBorder class]);
  }
  if (margin != nil) {
    if (border == nil) {
      border = [panel getBorder];
    }
    if (border == nil) {
      border = margin;
    }
    else {
      border = [[RAREUICompoundBorder alloc] initWithRAREiPlatformBorder:border withRAREiPlatformBorder:margin];
    }
  }
  if ((title != nil) && ([title sequenceLength] > 0) && (tdisplay != -1) && (tdisplay != RARESPOTWidget_CTitleLocation_not_displayed)) {
    if (tb != nil) {
      [tb setTitleWithNSString:title];
    }
    else {
      tb = [[RAREUITitledBorder alloc] initWithRAREiPlatformBorder:(border == nil) ? RAREBorderUtils_EMPTY_BORDER_ : ((id) border) withNSString:title];
      border = tb;
      id<RAREiPlatformComponent> c = [((id<RAREiWidget>) nil_chk(context)) getContainerComponent];
      id o = [((id<RAREiPlatformComponent>) nil_chk(c)) getClientPropertyWithNSString:RAREBorderUtils_FOCUSBORDER_CONFIGURED_PROPERTY_];
      if (o != nil) {
        [panel putClientPropertyWithNSString:RAREBorderUtils_FOCUSBORDER_CONFIGURED_PROPERTY_ withId:o];
      }
    }
    switch (tdisplay) {
      case RARESPOTWidget_CTitleLocation_auto:
      if (!([(id) border isKindOfClass:[RAREUIEtchedBorder class]]) && !([(id) border isKindOfClass:[RAREUITitledBorder class]])) {
        [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_TOP];
        [tb setTitleJustificationWithInt:RAREaUITitledBorder_LEADING];
      }
      break;
      case RARESPOTWidget_CTitleLocation_frame_top_left:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_TOP];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_LEADING];
      break;
      case RARESPOTWidget_CTitleLocation_frame_top_center:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_TOP];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_CENTER];
      break;
      case RARESPOTWidget_CTitleLocation_frame_top_right:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_TOP];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_TRAILING];
      break;
      case RARESPOTWidget_CTitleLocation_top_left:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:titleOnly ? RAREaUITitledBorder_TOP : RAREaUITitledBorder_ABOVE_TOP];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_LEADING];
      break;
      case RARESPOTWidget_CTitleLocation_top_right:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:titleOnly ? RAREaUITitledBorder_TOP : RAREaUITitledBorder_ABOVE_TOP];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_TRAILING];
      break;
      case RARESPOTWidget_CTitleLocation_top_center:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:titleOnly ? RAREaUITitledBorder_TOP : RAREaUITitledBorder_ABOVE_TOP];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_CENTER];
      break;
      case RARESPOTWidget_CTitleLocation_bottom_left:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_BELOW_BOTTOM];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_LEADING];
      break;
      case RARESPOTWidget_CTitleLocation_bottom_center:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_BELOW_BOTTOM];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_CENTER];
      break;
      case RARESPOTWidget_CTitleLocation_bottom_right:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_BELOW_BOTTOM];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_TRAILING];
      break;
      case RARESPOTWidget_CTitleLocation_frame_bottom_left:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_BOTTOM];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_LEADING];
      break;
      case RARESPOTWidget_CTitleLocation_frame_bottom_center:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_BOTTOM];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_CENTER];
      break;
      case RARESPOTWidget_CTitleLocation_frame_bottom_right:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_BOTTOM];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_TRAILING];
      break;
      case RARESPOTWidget_CTitleLocation_inside_top_left:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_BELOW_TOP];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_LEADING];
      break;
      case RARESPOTWidget_CTitleLocation_inside_top_center:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_BELOW_TOP];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_CENTER];
      break;
      case RARESPOTWidget_CTitleLocation_inside_top_right:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_BELOW_TOP];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_TRAILING];
      break;
      case RARESPOTWidget_CTitleLocation_inside_bottom_left:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_ABOVE_BOTTOM];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_LEADING];
      break;
      case RARESPOTWidget_CTitleLocation_inside_bottom_center:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_ABOVE_BOTTOM];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_CENTER];
      break;
      case RARESPOTWidget_CTitleLocation_inside_bottom_right:
      [((RAREUITitledBorder *) nil_chk(tb)) setTitlePositionWithInt:RAREaUITitledBorder_ABOVE_BOTTOM];
      [tb setTitleJustificationWithInt:RAREaUITitledBorder_TRAILING];
      break;
      default:
      break;
    }
  }
  if (tb != nil) {
    [comp putClientPropertyWithNSString:RAREBorderUtils_TITLEBORDER_CONFIGURED_PROPERTY_ withId:tb];
  }
  if (border != nil) {
    panel = [RAREaPlatformHelper createBorderPanelWithRAREiPlatformComponent:comp withRAREiPlatformBorder:border];
  }
  if ((border != nil) && ([((id<RAREiPlatformComponent>) nil_chk(panel)) getBorder] != border)) {
    [panel setBorderWithRAREiPlatformBorder:border];
  }
  return panel;
}

+ (id<RAREiPlatformComponent>)setBorderTypeWithRAREiWidget:(id<RAREiWidget>)context
                                withRAREiPlatformComponent:(id<RAREiPlatformComponent>)comp
                                        withRARESPOTWidget:(RARESPOTWidget *)cfg
                                               withBoolean:(BOOL)title
                                               withBoolean:(BOOL)margin {
  NSString *s = nil;
  int tdisplay = -1;
  id<RAREiPlatformBorder> m = nil;
  if (title) {
    s = [((SPOTPrintableString *) nil_chk(((RARESPOTWidget *) nil_chk(cfg))->title_)) getValue];
    tdisplay = [((RARESPOTWidget_CTitleLocation *) nil_chk(cfg->titleLocation_)) intValue];
  }
  if (margin) {
    if ([((RARESPOTWidget *) nil_chk(cfg)) getContentPadding] != nil) {
      if ([(id) comp isKindOfClass:[RAREXPContainer class]]) {
        [((RAREXPContainer *) check_class_cast(comp, [RAREXPContainer class])) setMarginWithRAREUIInsets:[((RARESPOTMargin *) nil_chk([cfg getContentPadding])) getInsets]];
      }
      else {
        m = [[RAREUIEmptyBorder alloc] initWithRAREUIInsets:[((RARESPOTMargin *) nil_chk([cfg getContentPadding])) getInsets]];
      }
    }
  }
  return [RAREBorderUtils setBorderTypeWithRAREiWidget:context withRAREiPlatformComponent:comp withSPOTSet:[((RARESPOTWidget *) nil_chk(cfg)) getBorders] withNSString:s withInt:tdisplay withRAREiPlatformBorder:m withBoolean:NO];
}

+ (RAREUITitledBorder *)createTitledBorderWithRAREiWidget:(id<RAREiWidget>)context
                                          withJavaUtilMap:(id<JavaUtilMap>)attrs
                                             withNSString:(NSString *)color
                                                withFloat:(float)thickness
                                              withBoolean:(BOOL)always {
  NSString *title = nil;
  RAREUIColor *c = nil;
  if (attrs != nil) {
    title = [attrs getWithId:@"title"];
    if (title != nil) {
      title = [((id<RAREiWidget>) nil_chk(context)) expandStringWithNSString:title withBoolean:NO];
    }
  }
  if ((title == nil) && !always) {
    return nil;
  }
  RAREUITitledBorder *border = [[RAREUITitledBorder alloc] initWithNSString:(title == nil) ? @"" : title];
  if (attrs != nil) {
    if (thickness == 0) {
      thickness = [RAREScreenUtils PLATFORM_PIXELS_1];
    }
    RAREUITitledBorder *b = border;
    RAREUILineBorder *lb = nil;
    [b setTitleLocationWithNSString:[attrs getWithId:@"titleLocation"]];
    if (color != nil) {
      c = [RAREColorUtils getColorWithNSString:color];
      if (c != nil) {
        [b setBorderWithRAREiPlatformBorder:lb = [[RAREUILineBorder alloc] initWithRAREUIColor:c withFloat:thickness withBoolean:YES]];
      }
    }
    color = [attrs getWithId:@"titleColor"];
    if (color != nil) {
      c = [RAREColorUtils getColorWithNSString:color];
      if (c != nil) {
        [b setTitleColorWithRAREUIColor:c];
      }
    }
    NSString *s = [attrs getWithId:@"titleFont"];
    RAREUIFont *f = [RAREFontUtils parseFontWithRAREiWidget:context withRAREUIFont:[b getTitleFont] withNSString:s];
    if (f != nil) {
      [b setTitleFontWithRAREUIFont:f];
    }
    s = [attrs getWithId:@"cornerArc"];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      int n = [RAREUTSNumber intValueWithNSString:s];
      if (lb == nil) {
        lb = [[RAREUILineBorder alloc] initWithRAREUIColor:[RAREaUILineBorder getDefaultLineColor] withFloat:thickness withBoolean:YES];
        [b setBorderWithRAREiPlatformBorder:lb];
      }
      [((RAREUILineBorder *) nil_chk(lb)) setCornerArcWithFloat:n];
    }
    s = [attrs getWithId:@"style"];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      if (lb == nil) {
        lb = [[RAREUILineBorder alloc] initWithRAREUIColor:[RAREaUILineBorder getDefaultLineColor] withFloat:thickness withBoolean:YES];
        [b setBorderWithRAREiPlatformBorder:lb];
      }
      (void) [((RAREUILineBorder *) nil_chk(lb)) setLineStyleWithNSString:s];
    }
    s = [attrs getWithId:@"padForArc"];
    if ((s != nil) && ![s isEqual:@"true"]) {
      if (lb == nil) {
        lb = [[RAREUILineBorder alloc] initWithRAREUIColor:[RAREaUILineBorder getDefaultLineColor] withFloat:thickness withBoolean:YES];
        [b setBorderWithRAREiPlatformBorder:lb];
      }
      [((RAREUILineBorder *) nil_chk(lb)) setPadForArcWithBoolean:NO];
    }
  }
  return border;
}

+ (IOSObjectArray *)getBevelColorsWithRAREiWidget:(id<RAREiWidget>)widget
                                      withBoolean:(BOOL)four {
  return [RAREBorderUtils getBevelColorsWithRAREUIColor:(widget == nil) ? nil : [widget getBackground] withBoolean:four];
}

+ (IOSObjectArray *)getEtchedColorsWithRAREiWidget:(id<RAREiWidget>)widget {
  return [RAREBorderUtils getEtchedColorsWithRAREUIColor:(widget == nil) ? nil : [widget getBackground]];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [RAREBorderUtils class]) {
    RAREBorderUtils_EMPTY_BORDER_ = [[RAREUIEmptyBorder alloc] initWithFloat:0 withFloat:0 withFloat:0 withFloat:0];
    RAREBorderUtils_ONE_POINT_EMPTY_BORDER_ = [[RAREUIEmptyBorder alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_1]];
    RAREBorderUtils_TWO_POINT_EMPTY_BORDER_ = [[RAREUIEmptyBorder alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_2]];
    RAREBorderUtils_TWO_LEFT_POINT_EMPTY_BORDER_ = [[RAREUIEmptyBorder alloc] initWithFloat:0 withFloat:0 withFloat:0 withFloat:[RAREScreenUtils PLATFORM_PIXELS_2] withBoolean:YES];
    RAREBorderUtils_THREE_LEFT_POINT_EMPTY_BORDER_ = [[RAREUIEmptyBorder alloc] initWithFloat:0 withFloat:0 withFloat:0 withFloat:[RAREScreenUtils PLATFORM_PIXELS_2] withBoolean:YES];
    RAREBorderUtils_TEXT_PADDING_BORDER_ = [[RAREUIEmptyBorder alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_2] withFloat:[RAREScreenUtils PLATFORM_PIXELS_2] withFloat:[RAREScreenUtils PLATFORM_PIXELS_2] withFloat:[RAREScreenUtils PLATFORM_PIXELS_4]];
    RAREBorderUtils_ONE_TOP_POINT_EMPTY_BORDER_ = [[RAREUIEmptyBorder alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:0 withFloat:0 withFloat:0];
    RAREBorderUtils_ONE_LEFT_POINT_EMPTY_BORDER_ = [[RAREUIEmptyBorder alloc] initWithFloat:0 withFloat:0 withFloat:0 withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withBoolean:YES];
    RAREBorderUtils_ONE_BOTTOM_POINT_EMPTY_BORDER_ = [[RAREUIEmptyBorder alloc] initWithFloat:0 withFloat:0 withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:0];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createBackBorderPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withBoolean:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createBalloonLLBPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createBalloonLLLPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createBalloonLRBPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createBalloonLRRPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createBalloonULLPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createBalloonULTPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createBalloonURRPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createBalloonURTPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createBorderWithRAREiWidget:withInt:withJavaUtilMap:", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "createBorderWithRAREiWidget:withSPOTSet:withRAREiPlatformBorder:", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "createBorderWithRAREiWidget:withNSString:withRAREiPlatformBorder:", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "createEmptyBorderWithRAREiWidget:withRARESPOTMargin:", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "createPath", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createLineBorderPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createLineBorderPathWithRAREiPlatformPath:withFloat:withFloat:withFloat:withFloat:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "createShadowBorderWithFloat:", NULL, "LRAREUIDropShadowBorder", 0x9, NULL },
    { "findBorderColorWithRAREiPlatformBorder:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getBevelColorsWithRAREUIColor:withBoolean:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "getButtonBorderWithInt:", NULL, "LRAREUILineBorder", 0x9, NULL },
    { "getDefaultButtonBorder", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "getDefaultComboBoxBorder", NULL, "LRAREUILineBorder", 0x9, NULL },
    { "getDefaultWidgetBorder", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "getEtchedColorsWithRAREUIColor:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "getNewDefaultWidgetBorder", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "getTextAreaBorder", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "getTextFieldBorder", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "getToolbarPressedButtonBorder", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "setBorderTypeWithRAREiWidget:withRAREiPlatformComponent:withSPOTSet:withNSString:withInt:withRAREiPlatformBorder:withBoolean:", NULL, "LRAREiPlatformComponent", 0x9, NULL },
    { "setBorderTypeWithRAREiWidget:withRAREiPlatformComponent:withRARESPOTWidget:withBoolean:withBoolean:", NULL, "LRAREiPlatformComponent", 0x9, NULL },
    { "createTitledBorderWithRAREiWidget:withJavaUtilMap:withNSString:withFloat:withBoolean:", NULL, "LRAREUITitledBorder", 0xa, NULL },
    { "getBevelColorsWithRAREiWidget:withBoolean:", NULL, "LIOSObjectArray", 0xa, NULL },
    { "getEtchedColorsWithRAREiWidget:", NULL, "LIOSObjectArray", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "EMPTY_BORDER_", NULL, 0x19, "LRAREUIEmptyBorder" },
    { "FOCUSBORDER_CONFIGURED_PROPERTY_", NULL, 0x19, "LNSString" },
    { "ONE_POINT_EMPTY_BORDER_", NULL, 0x19, "LRAREUIEmptyBorder" },
    { "TITLEBORDER_CONFIGURED_PROPERTY_", NULL, 0x19, "LNSString" },
    { "TWO_POINT_EMPTY_BORDER_", NULL, 0x19, "LRAREUIEmptyBorder" },
    { "TWO_LEFT_POINT_EMPTY_BORDER_", NULL, 0x19, "LRAREUIEmptyBorder" },
    { "THREE_LEFT_POINT_EMPTY_BORDER_", NULL, 0x19, "LRAREUIEmptyBorder" },
    { "TEXT_PADDING_BORDER_", NULL, 0x19, "LRAREUIEmptyBorder" },
    { "ONE_TOP_POINT_EMPTY_BORDER_", NULL, 0x19, "LRAREUIEmptyBorder" },
    { "ONE_LEFT_POINT_EMPTY_BORDER_", NULL, 0x19, "LRAREUIEmptyBorder" },
    { "ONE_BOTTOM_POINT_EMPTY_BORDER_", NULL, 0x19, "LRAREUIEmptyBorder" },
    { "defaultButtonBorder_", NULL, 0xa, "LRAREiPlatformBorder" },
    { "textareaBorder_", NULL, 0xa, "LRAREUILineBorder" },
    { "textfieldBorder_", NULL, 0xa, "LRAREUILineBorder" },
    { "toolbarPressedButtonBorder_", NULL, 0xa, "LRAREiPlatformBorder" },
    { "widgetBorder_", NULL, 0xa, "LRAREiPlatformBorder" },
  };
  static J2ObjcClassInfo _RAREBorderUtils = { "BorderUtils", "com.appnativa.rare.ui", NULL, 0x1, 33, methods, 16, fields, 0, NULL};
  return &_RAREBorderUtils;
}

@end
