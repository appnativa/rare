//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/SimpleColorStateList.java
//
//  Created by decoteaud on 12/8/15.
//

#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/SimpleColorStateList.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/iPaintedButton.h"
#include "com/appnativa/util/CharScanner.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation RARESimpleColorStateList

- (id)init {
  if (self = [super init]) {
    self->defaultColor_ = [RAREColorUtils getForeground];
  }
  return self;
}

- (id)initWithRAREUIColor:(RAREUIColor *)defaultColor
          withRAREUIColor:(RAREUIColor *)disabledColor {
  if (self = [super init]) {
    self->defaultColor_ = defaultColor;
    self->disabledColor_ = disabledColor;
  }
  return self;
}

- (id)initWithRAREUIColor:(RAREUIColor *)defaultColor
          withRAREUIColor:(RAREUIColor *)disabledColor
          withRAREUIColor:(RAREUIColor *)selectedColor
          withRAREUIColor:(RAREUIColor *)selectedDisabledColor {
  if (self = [super init]) {
    self->defaultColor_ = defaultColor;
    self->disabledColor_ = disabledColor;
    self->selectedColor_ = selectedColor;
    self->selectedDisabledColor_ = selectedDisabledColor;
  }
  return self;
}

+ (RARESimpleColorStateList *)createWithRAREUTCharScanner:(RAREUTCharScanner *)sc
                                          withJavaUtilMap:(id<JavaUtilMap>)map {
  NSString *color;
  id<JavaUtilMap_Entry> e;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) iterator];
  RAREUIColor *c;
  id<JavaUtilList> list = [[JavaUtilArrayList alloc] initWithInt:3];
  RARESimpleColorStateList *cs = [[RARESimpleColorStateList alloc] init];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    e = [it next];
    color = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
    c = [RAREColorUtils getColorWithNSString:color];
    if (c == nil) {
      c = [RAREColorUtils TRANSPARENT_COLOR];
    }
    color = [e getKey];
    [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:color];
    if ([@"normal" isEqual:color]) {
      cs->defaultColor_ = c;
      continue;
    }
    list = [sc getTokensWithChar:',' withBoolean:YES withJavaUtilList:list];
    for (NSString * __strong s in nil_chk(list)) {
      if ([((NSString *) nil_chk(s)) isEqual:@"pressed"]) {
        cs->pressedColor_ = c;
      }
      else if ([s isEqual:@"hover"] || [s equalsIgnoreCase:@"rollover"]) {
        cs->rolloverColor_ = c;
      }
      else if ([s isEqual:@"focused"]) {
        cs->focusedColor_ = c;
      }
      else if ([s isEqual:@"disabled"] || [s equalsIgnoreCase:@"not_enabled"]) {
        cs->disabledColor_ = c;
      }
      else if ([s isEqual:@"selected_disabled"] || [s isEqual:@"disabled_selected"]) {
        cs->selectedDisabledColor_ = c;
      }
      else if ([s isEqual:@"selected_pressed"] || [s isEqual:@"pressed_selected"]) {
        cs->selectedPressedColor_ = c;
      }
      else if ([s isEqual:@"selected"]) {
        cs->selectedColor_ = c;
      }
    }
  }
  return cs;
}

- (void)setDefaultColorWithRAREUIColor:(RAREUIColor *)defaultColor {
  self->defaultColor_ = defaultColor;
}

- (void)setDisabledColorWithRAREUIColor:(RAREUIColor *)disabledColor {
  self->disabledColor_ = disabledColor;
}

- (void)setFocusedColorWithRAREUIColor:(RAREUIColor *)focusedColor {
  self->focusedColor_ = focusedColor;
}

- (void)setRolloverColorWithRAREUIColor:(RAREUIColor *)rolloverColor {
  self->rolloverColor_ = rolloverColor;
}

- (void)setSelectedColorWithRAREUIColor:(RAREUIColor *)selectedColor {
  self->selectedColor_ = selectedColor;
}

- (void)setSelectedDisabledColorWithRAREUIColor:(RAREUIColor *)selectedDisabledColor {
  self->selectedDisabledColor_ = selectedDisabledColor;
}

- (RAREUIColor *)getColorWithRAREiPaintedButton_ButtonStateEnum:(RAREiPaintedButton_ButtonStateEnum *)state {
  switch ([state ordinal]) {
    case RAREiPaintedButton_ButtonState_DISABLED_SELECTED:
    return [self getSelectedDisabledColor];
    case RAREiPaintedButton_ButtonState_DISABLED:
    return [self getDisabledColor];
    case RAREiPaintedButton_ButtonState_PRESSED:
    return [self getSelectedPressedColor];
    case RAREiPaintedButton_ButtonState_PRESSED_SELECTED:
    return [self getPressedColor];
    case RAREiPaintedButton_ButtonState_SELECTED:
    return [self getSelectedColor];
    case RAREiPaintedButton_ButtonState_ROLLOVER:
    return [self getRolloverColor];
    default:
    return [self getDefaultColor];
  }
}

- (RAREUIColor *)getDefaultColor {
  return defaultColor_;
}

- (RAREUIColor *)getDisabledColor {
  return (disabledColor_ == nil) ? [((RAREUIColor *) nil_chk(defaultColor_)) getDisabledColor] : disabledColor_;
}

- (RAREUIColor *)getFocusedColor {
  return (focusedColor_ == nil) ? defaultColor_ : focusedColor_;
}

- (RAREUIColor *)getPressedColor {
  return (pressedColor_ == nil) ? [self getSelectedColor] : pressedColor_;
}

- (RAREUIColor *)getRolloverColor {
  return (rolloverColor_ == nil) ? defaultColor_ : rolloverColor_;
}

- (RAREUIColor *)getSelectedColor {
  return (selectedColor_ == nil) ? defaultColor_ : selectedColor_;
}

- (RAREUIColor *)getSelectedDisabledColor {
  return (selectedDisabledColor_ == nil) ? [self getDisabledColor] : selectedDisabledColor_;
}

- (RAREUIColor *)getSelectedPressedColor {
  return (selectedPressedColor_ == nil) ? [self getPressedColor] : selectedPressedColor_;
}

- (void)setSelectedPressedColorWithRAREUIColor:(RAREUIColor *)selectedPressedColor {
  self->selectedPressedColor_ = selectedPressedColor;
}

- (void)setPressedColorWithRAREUIColor:(RAREUIColor *)pressedColor {
  self->pressedColor_ = pressedColor;
}

- (void)copyAllFieldsTo:(RARESimpleColorStateList *)other {
  [super copyAllFieldsTo:other];
  other->defaultColor_ = defaultColor_;
  other->disabledColor_ = disabledColor_;
  other->focusedColor_ = focusedColor_;
  other->pressedColor_ = pressedColor_;
  other->rolloverColor_ = rolloverColor_;
  other->selectedColor_ = selectedColor_;
  other->selectedDisabledColor_ = selectedDisabledColor_;
  other->selectedPressedColor_ = selectedPressedColor_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createWithRAREUTCharScanner:withJavaUtilMap:", NULL, "LRARESimpleColorStateList", 0x9, NULL },
    { "getColorWithRAREiPaintedButton_ButtonStateEnum:", NULL, "LRAREUIColor", 0x1, NULL },
    { "getDefaultColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getDisabledColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getFocusedColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getPressedColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getRolloverColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getSelectedColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getSelectedDisabledColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getSelectedPressedColor", NULL, "LRAREUIColor", 0x1, NULL },
  };
  static J2ObjcClassInfo _RARESimpleColorStateList = { "SimpleColorStateList", "com.appnativa.rare.ui", NULL, 0x1, 10, methods, 0, NULL, 0, NULL};
  return &_RARESimpleColorStateList;
}

@end
