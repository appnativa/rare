//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/ActionBar.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/spot/MenuBar.h"
#include "com/appnativa/rare/ui/ActionBar.h"
#include "com/appnativa/rare/ui/BorderPanel.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/Container.h"
#include "com/appnativa/rare/ui/LinearPanel.h"
#include "com/appnativa/rare/ui/MenuButtonWidget.h"
#include "com/appnativa/rare/ui/PainterUtils.h"
#include "com/appnativa/rare/ui/PopupList.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIAction.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImageIcon.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIMenuItem.h"
#include "com/appnativa/rare/ui/UIPopupMenu.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/XPContainer.h"
#include "com/appnativa/rare/ui/aBorderPanel.h"
#include "com/appnativa/rare/ui/border/UICompoundBorder.h"
#include "com/appnativa/rare/ui/border/UIEmptyBorder.h"
#include "com/appnativa/rare/ui/border/UIMatteBorder.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/painter/PainterHolder.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation RAREActionBar

static id<RAREiPlatformBorder> RAREActionBar_defaultBorder_;

+ (id<RAREiPlatformBorder>)defaultBorder {
  return RAREActionBar_defaultBorder_;
}

+ (void)setDefaultBorder:(id<RAREiPlatformBorder>)defaultBorder {
  RAREActionBar_defaultBorder_ = defaultBorder;
}

- (id)initWithRAREiWidget:(id<RAREiWidget>)context
      withRARESPOTMenuBar:(RARESPOTMenuBar *)cfg {
  if (self = [super initWithNSString:@"f:d,f:d:g,f:d" withNSString:@"c:d,c:d:g,c:d"]) {
    buttons_ = [[JavaUtilArrayList alloc] init];
    separators_ = [[JavaUtilArrayList alloc] init];
    if ([RAREPlatform isTouchDevice]) {
      sageMinHeight_ = @"2ln";
    }
    titleComponent_ = [RAREPlatformHelper createNakedButtonWithRAREiPlatformComponent:self withBoolean:NO withInt:0];
    [((id<RAREiActionComponent>) nil_chk(titleComponent_)) setAlignmentWithRARERenderableDataItem_HorizontalAlignEnum:[RARERenderableDataItem_HorizontalAlignEnum LEFT] withRARERenderableDataItem_VerticalAlignEnum:[RARERenderableDataItem_VerticalAlignEnum CENTER]];
    [titleComponent_ setWordWrapWithBoolean:YES];
    titlePane_ = titleComponent_;
    menuWidget_ = [[RAREMenuButtonWidget alloc] initWithRAREiContainer:(context == nil) ? nil : [context getFormViewer] withRAREMenuButtonWidget_iPopulateCallback:self];
    showTitleText_ = ![@"false" isEqual:[((RARESPOTMenuBar *) nil_chk(cfg)) spot_getAttributeWithNSString:@"showApplicationTitle"]];
    toolbarComponent_ = [[RARELinearPanel alloc] initWithRAREiWidget:context withBoolean:YES withNSString:@"c:d:g" withNSString:nil];
    [menuWidget_ setVisibleWithBoolean:NO];
    [titleComponent_ setVisibleWithBoolean:NO];
    if ([((SPOTPrintableString *) nil_chk(cfg->fgColor_)) getValue] != nil) {
      [self setForegroundWithRAREUIColor:[RAREColorUtils getColorWithNSString:[cfg->fgColor_ getValue]]];
    }
    float d = [RAREScreenUtils PLATFORM_PIXELS_2];
    [titleComponent_ setBorderWithRAREiPlatformBorder:[[RAREUIEmptyBorder alloc] initWithFloat:d withFloat:d * 3 withFloat:d withFloat:d]];
    [menuWidget_ setBorderWithRAREiPlatformBorder:[[RAREUIEmptyBorder alloc] initWithFloat:d withFloat:d * 3 withFloat:0 withFloat:d]];
    leftMenuButton_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBooleanWithNSString:@"Rare.MenuBar.leftActionBarMenuButton" withBoolean:NO];
    showButtons_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBooleanWithNSString:@"Rare.MenuBar.showActionBarButtons" withBoolean:YES];
    showButtonText_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBooleanWithNSString:@"Rare.MenuBar.showActionBarButtonsText" withBoolean:[RAREScreenUtils isLargeScreen]];
    showSeperators_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBooleanWithNSString:@"Rare.MenuBar.showActionBarSeparators" withBoolean:[RAREScreenUtils isLargeScreen]];
    [((id<RAREiPlatformComponent>) nil_chk([menuWidget_ getContainerComponent])) putClientPropertyWithNSString:[RAREiConstants RARE_VALIGN_PROPERTY] withId:[RARERenderableDataItem_VerticalAlignEnum CENTER]];
    if (leftMenuButton_) {
      [self setLeftViewWithRAREiPlatformComponent:[menuWidget_ getContainerComponent]];
      [self setRightViewWithRAREiPlatformComponent:toolbarComponent_];
      [self setCenterViewWithRAREiPlatformComponent:titleComponent_];
    }
    else {
      [self setLeftViewWithRAREiPlatformComponent:titleComponent_];
      [self setRightViewWithRAREiPlatformComponent:[menuWidget_ getContainerComponent]];
      [self setCenterViewWithRAREiPlatformComponent:toolbarComponent_];
    }
    NSString *s = [cfg spot_getAttributeWithNSString:@"actionButtonInsets"];
    if (s != nil) {
      buttonInsets_ = [RAREUtils getInsetsWithNSString:s];
    }
    else {
      buttonInsets_ = (RAREUIInsets *) check_class_cast([((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:@"Rare.MenuBar.actionBar.Button.insets"], [RAREUIInsets class]);
    }
    id<RAREiPlatformComponent> c = [self createSeparator];
    separatorWidth_ = ((RAREUIDimension *) nil_chk([((id<RAREiPlatformComponent>) nil_chk(c)) getPreferredSize]))->width_;
    [separators_ addWithId:c];
    id<RAREiPlatformIcon> micon = nil;
    if ([((SPOTPrintableString *) nil_chk(cfg->icon_)) getValue] != nil) {
      [self setTitleIconWithRAREiPlatformIcon:[((id<RAREiViewer>) nil_chk([RAREPlatform getContextRootViewer])) getIconWithSPOTPrintableString:cfg->icon_]];
    }
    if ([((SPOTPrintableString *) nil_chk(cfg->title_)) getValue] != nil) {
      [self setTitleWithJavaLangCharSequence:[cfg->title_ getValue]];
    }
    SPOTSet *menu = [cfg getPopupMenu];
    if (menu != nil) {
      s = [menu spot_getAttributeWithNSString:@"icon"];
      if ((s != nil) && ([s sequenceLength] > 0)) {
        micon = [((id<RAREiViewer>) nil_chk([RAREPlatform getContextRootViewer])) getIconWithNSString:s withNSString:nil];
      }
    }
    if (micon == nil) {
      micon = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getResourceAsIconWithNSString:@"Rare.icon.menu"];
    }
    [menuWidget_ setIconWithRAREiPlatformIcon:micon];
    if ([cfg getBorders] == nil) {
      [self setBorderWithRAREiPlatformBorder:[RAREActionBar getDefaultBorder]];
    }
  }
  return self;
}

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  int i = [((JavaUtilArrayList *) nil_chk(buttons_)) indexOfWithId:[((RAREActionEvent *) nil_chk(e)) getComponent]];
  if (i != -1) {
    [((RAREUIMenuItem *) nil_chk([((RAREUIPopupMenu *) nil_chk(popupMenu_)) getMenuItemWithInt:i])) fireWithRAREiWidget:[RAREPlatform getWindowViewer]];
  }
}

- (void)addWithRAREUIMenuItem:(RAREUIMenuItem *)mi {
  if (popupMenu_ == nil) {
    popupMenu_ = [[RAREUIPopupMenu alloc] init];
  }
  [((RAREUIPopupMenu *) nil_chk(popupMenu_)) addWithId:mi];
  id<RAREiActionComponent> c = [self createButtonWithRAREUIMenuItem:mi];
  [((JavaUtilArrayList *) nil_chk(buttons_)) addWithId:c];
  if (showSeperators_ && ([buttons_ size] > 1)) {
    [((JavaUtilArrayList *) nil_chk(separators_)) addWithId:[self createSeparator]];
  }
}

- (void)addActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  [((id<RAREiActionComponent>) nil_chk(titleComponent_)) addActionListenerWithRAREiActionListener:l];
}

- (void)addMenuItemsWithJavaUtilList:(id<JavaUtilList>)list {
  [((id<JavaUtilList>) nil_chk(list)) clear];
  int len = [((JavaUtilArrayList *) nil_chk(buttons_)) size];
  int count = visibleButtons_;
  for (int i = 0; i < len; i++) {
    RAREUIMenuItem *menu = [((RAREUIPopupMenu *) nil_chk(popupMenu_)) getMenuItemWithInt:i];
    if (![((RAREUIMenuItem *) nil_chk(menu)) isVisible]) {
      continue;
    }
    if (count == 0) {
      [list addWithId:menu];
    }
    else {
      count--;
    }
  }
}

- (void)dispose {
  if (menuWidget_ != nil) {
    [self removeWithRAREiPlatformComponent:[menuWidget_ getContainerComponent]];
    [menuWidget_ dispose];
    menuWidget_ = nil;
  }
  [super dispose];
  [((JavaUtilArrayList *) nil_chk(buttons_)) clear];
  [((JavaUtilArrayList *) nil_chk(separators_)) clear];
  titleComponent_ = nil;
  if (titleComponent_ != nil) {
    [titleComponent_ dispose];
    titleComponent_ = nil;
  }
  if (expansionComponent_ != nil) {
    [expansionComponent_ dispose];
    expansionComponent_ = nil;
  }
}

- (id<RAREiPlatformComponent>)getSecondaryTitle {
  return (titlePane_ == titleComponent_) ? nil : [((RAREBorderPanel *) check_class_cast(titlePane_, [RAREBorderPanel class])) getCenterView];
}

- (id<RAREiActionComponent>)getTitleComponent {
  return titleComponent_;
}

- (BOOL)hasTitleComponent {
  return YES;
}

- (BOOL)isShowButtons {
  return showButtons_;
}

- (BOOL)isShowButtonText {
  return showButtonText_;
}

- (BOOL)isShowTitleText {
  return showTitleText_;
}

- (void)removeWithRAREUIMenuItem:(RAREUIMenuItem *)mi {
  if (popupMenu_ != nil && mi != nil) {
    int i = [popupMenu_ indexOfWithId:mi];
    if (i != -1) {
      (void) [popupMenu_ removeWithInt:i];
      (void) [((JavaUtilArrayList *) nil_chk(buttons_)) removeWithInt:i];
      if (![((JavaUtilArrayList *) nil_chk(separators_)) isEmpty]) {
        (void) [separators_ removeWithInt:[separators_ size] - 1];
      }
      [self reset];
    }
  }
}

- (void)removeWithNSString:(NSString *)actionName {
  if (popupMenu_ != nil) {
    [self removeWithRAREUIMenuItem:[popupMenu_ getMenuItemWithNSString:actionName]];
  }
}

- (void)removeActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  [((id<RAREiActionComponent>) nil_chk(titleComponent_)) removeActionListenerWithRAREiActionListener:l];
}

- (void)removeAll {
  [super removeAll];
  [((JavaUtilArrayList *) nil_chk(buttons_)) clear];
  [((JavaUtilArrayList *) nil_chk(separators_)) clear];
}

- (void)setBoundsWithFloat:(float)x
                 withFloat:(float)y
                 withFloat:(float)w
                 withFloat:(float)h {
  [self layoutWithFloat:w withFloat:h];
  [super setBoundsWithFloat:x withFloat:y withFloat:w withFloat:h];
}

- (void)setFontWithRAREUIFont:(RAREUIFont *)f {
  [super setFontWithRAREUIFont:f];
  for (id<RAREiActionComponent> __strong b in nil_chk(buttons_)) {
    [((id<RAREiActionComponent>) nil_chk(b)) setFontWithRAREUIFont:f];
  }
  if ([((id<RAREiActionComponent>) nil_chk(titleComponent_)) getFontEx] == [self getFontEx]) {
    [titleComponent_ setFontWithRAREUIFont:f];
  }
}

- (void)setForegroundWithRAREUIColor:(RAREUIColor *)fg {
  [super setForegroundWithRAREUIColor:fg];
  for (id<RAREiActionComponent> __strong b in nil_chk(buttons_)) {
    [((id<RAREiActionComponent>) nil_chk(b)) setForegroundWithRAREUIColor:fg];
  }
  if ([((id<RAREiActionComponent>) nil_chk(titleComponent_)) getForegroundEx] == [self getForegroundEx]) {
    [titleComponent_ setForegroundWithRAREUIColor:fg];
  }
}

- (void)setMenuWithRAREUIPopupMenu:(RAREUIPopupMenu *)pm {
  popupMenu_ = pm;
  [((JavaUtilArrayList *) nil_chk(buttons_)) clear];
  [((JavaUtilArrayList *) nil_chk(separators_)) clear];
  if (showButtons_) {
    int len = [((RAREUIPopupMenu *) nil_chk(pm)) size];
    for (int i = 0; i < len; i++) {
      id<RAREiActionComponent> c = [self createButtonWithRAREUIMenuItem:[pm getMenuItemWithInt:i]];
      [buttons_ addWithId:c];
      if (i > 1) {
        [separators_ addWithId:[self createSeparator]];
      }
    }
  }
  [self reset];
}

- (void)setSecondaryTitleWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)comp {
  if ([(id) titlePane_ isKindOfClass:[RAREBorderPanel class]]) {
    [((RAREBorderPanel *) check_class_cast(titlePane_, [RAREBorderPanel class])) setCenterViewWithRAREiPlatformComponent:comp];
  }
  else {
    [self setLeftViewWithRAREiPlatformComponent:nil];
    RAREBorderPanel *b = [[RAREBorderPanel alloc] init];
    [b setLeftViewWithRAREiPlatformComponent:titleComponent_];
    [b setCenterViewWithRAREiPlatformComponent:comp];
    if ([((JavaUtilArrayList *) nil_chk(buttons_)) isEmpty]) {
      [self setCenterViewWithRAREiPlatformComponent:b];
    }
    else {
      [self setLeftViewWithRAREiPlatformComponent:b];
    }
    [b setVisibleWithBoolean:[((id<RAREiActionComponent>) nil_chk(titleComponent_)) isVisible]];
    titlePane_ = b;
  }
  [self reset];
}

- (void)setSecondaryTitleWithRAREiWidget:(id<RAREiWidget>)widget {
  [self setSecondaryTitleWithRAREiPlatformComponent:(widget == nil) ? nil : [widget getContainerComponent]];
}

- (void)setShowButtonsWithBoolean:(BOOL)showButtons {
  self->showButtons_ = showButtons;
  [self reset];
}

- (void)setShowButtonTextWithBoolean:(BOOL)showButtonText {
  if (self->showButtonText_ != showButtonText) {
    self->showButtonText_ = showButtonText;
    int len = [((JavaUtilArrayList *) nil_chk(buttons_)) size];
    if (len > 0) {
      for (int i = 0; i < len; i++) {
        id<RAREiActionComponent> c = [buttons_ getWithInt:i];
        RAREUIMenuItem *menu = [((RAREUIPopupMenu *) nil_chk(popupMenu_)) getMenuItemWithInt:i];
        [self setButtonTextWithRAREiActionComponent:c withRAREUIMenuItem:menu];
      }
    }
    [self reset];
  }
}

- (void)setShowTitleTextWithBoolean:(BOOL)showTitleText {
  self->showTitleText_ = showTitleText;
}

- (void)setTitleWithJavaLangCharSequence:(id<JavaLangCharSequence>)title {
  if (showTitleText_) {
    if ([self getForegroundEx] != nil) {
      [((id<RAREiActionComponent>) nil_chk(titleComponent_)) setForegroundWithRAREUIColor:[self getForegroundEx]];
    }
    if ([self getFontEx] != nil) {
      [((id<RAREiActionComponent>) nil_chk(titleComponent_)) setFontWithRAREUIFont:[self getFontEx]];
    }
    [((id<RAREiActionComponent>) nil_chk(titleComponent_)) setVisibleWithBoolean:YES];
    [titleComponent_ setTextWithJavaLangCharSequence:title];
    [self reset];
  }
}

- (void)setTitleActionWithRAREiActionListener:(id<RAREiActionListener>)l {
  if (actionListener_ != nil) {
    [((id<RAREiActionComponent>) nil_chk(titleComponent_)) removeActionListenerWithRAREiActionListener:actionListener_];
  }
  actionListener_ = l;
  [((id<RAREiActionComponent>) nil_chk(titleComponent_)) addActionListenerWithRAREiActionListener:l];
}

- (void)setTitleIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  [((id<RAREiActionComponent>) nil_chk(titleComponent_)) setVisibleWithBoolean:YES];
  [titleComponent_ setIconWithRAREiPlatformIcon:icon];
  [self reset];
}

- (id<RAREiActionComponent>)createButtonWithRAREUIMenuItem:(RAREUIMenuItem *)menu {
  id<RAREiActionComponent> c = [RAREPlatformHelper createNakedButtonWithRAREiPlatformComponent:self withBoolean:NO withInt:0];
  RAREUIComponentPainter *cp = [[RAREUIComponentPainter alloc] init];
  [cp setPainterHolderWithRAREPainterHolder:[RAREPainterUtils createToolBarButtonPaintHolder]];
  [((id<RAREiActionComponent>) nil_chk(c)) setComponentPainterWithRAREiPlatformComponentPainter:cp];
  RAREUIAction *a = [((RAREUIMenuItem *) nil_chk(menu)) getAction];
  if (a != nil) {
    [c setActionWithRAREUIAction:a];
  }
  else {
    [c setIconWithRAREiPlatformIcon:[menu getIcon]];
    [c setDisabledIconWithRAREiPlatformIcon:[menu getDisabledIcon]];
    [c addActionListenerWithRAREiActionListener:self];
  }
  [self setButtonTextWithRAREiActionComponent:c withRAREUIMenuItem:menu];
  if (buttonInsets_ != nil) {
    [c setMarginWithRAREUIInsets:buttonInsets_];
  }
  if ([self getForegroundEx] != nil) {
    [c setForegroundWithRAREUIColor:[self getForegroundEx]];
  }
  if ([self getFontEx] != nil) {
    [c setFontWithRAREUIFont:[self getFontEx]];
  }
  return c;
}

- (void)getMinimumSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                  withFloat:(float)maxWidth {
  [self getPreferredSizeExWithRAREUIDimension:size withFloat:maxWidth];
  float h = ((RAREUIDimension *) nil_chk(size))->height_;
  (void) [((id<RAREiPlatformComponent>) nil_chk([((RAREMenuButtonWidget *) nil_chk(menuWidget_)) getContainerComponent])) getPreferredSizeWithRAREUIDimension:size];
  size->height_ = [JavaLangMath maxWithFloat:h withFloat:size->height_];
}

- (void)getPreferredSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                    withFloat:(float)maxWidth {
  float width = 0;
  float height = 0;
  if ([((id<RAREiPlatformComponent>) nil_chk(titlePane_)) isVisible]) {
    if (titleSize_ == nil) {
      (void) [titlePane_ getPreferredSizeWithRAREUIDimension:size];
      titleSize_ = [[RAREUIDimension alloc] initWithRAREUIDimension:size];
    }
    else {
      [((RAREUIDimension *) nil_chk(size)) setSizeWithRAREUIDimension:titleSize_];
    }
    width += ((RAREUIDimension *) nil_chk(size))->width_ + [RAREScreenUtils PLATFORM_PIXELS_6];
    height = size->height_;
  }
  int len = [((JavaUtilArrayList *) nil_chk(buttons_)) size];
  if (len > 0) {
    width += ((len - 1) * separatorWidth_);
    for (int i = 0; i < len; i++) {
      (void) [((id<RAREiActionComponent>) nil_chk([buttons_ getWithInt:i])) getPreferredSizeWithRAREUIDimension:size];
      width += ((RAREUIDimension *) nil_chk(size))->width_;
      height = [JavaLangMath maxWithFloat:height withFloat:size->height_];
    }
  }
  ((RAREUIDimension *) nil_chk(size))->width_ = width;
  size->height_ = height;
}

- (void)layoutWithFloat:(float)width
              withFloat:(float)height {
  if ((visibleButtons_ == 0) || ([JavaLangMath absWithFloat:width - oldWidth_] > 5)) {
    oldWidth_ = width;
    RAREUIDimension *size = [[RAREUIDimension alloc] init];
    RAREUIInsets *in = [self getInsetsEx];
    if (in != nil) {
      width -= (in->left_ + in->right_);
    }
    if ([((id<RAREiPlatformComponent>) nil_chk(titlePane_)) isVisible]) {
      if (titleSize_ == nil) {
        (void) [titlePane_ getPreferredSizeWithRAREUIDimension:size];
        titleSize_ = [[RAREUIDimension alloc] initWithRAREUIDimension:size];
      }
      else {
        [size setSizeWithRAREUIDimension:titleSize_];
      }
      width -= size->width_;
      width -= [RAREScreenUtils PLATFORM_PIXELS_6];
    }
    int count = 0;
    int len = [((JavaUtilArrayList *) nil_chk(buttons_)) size];
    if (showButtons_ && (len > 0)) {
      for (int i = 0; i < len; i++) {
        RAREUIMenuItem *item = [((RAREUIPopupMenu *) nil_chk(popupMenu_)) getMenuItemWithInt:i];
        if (![((RAREUIMenuItem *) nil_chk(item)) isVisible]) {
          continue;
        }
        id<RAREiPlatformComponent> c = [buttons_ getWithInt:i];
        (void) [((id<RAREiPlatformComponent>) nil_chk(c)) getPreferredSizeWithRAREUIDimension:size];
        width -= size->width_;
        width -= separatorWidth_;
        if (width < 0) {
          width += size->width_;
          width += separatorWidth_;
          break;
        }
        count++;
      }
      if (visibleButtons_ == count) {
        if (count == 0) {
          [((RARELinearPanel *) nil_chk(toolbarComponent_)) removeAll];
          [((RAREMenuButtonWidget *) nil_chk(menuWidget_)) setVisibleWithBoolean:YES];
        }
        return;
      }
      [((RARELinearPanel *) nil_chk(toolbarComponent_)) removeAll];
      if (count < len) {
        float lbwidth = size->width_;
        if (menuSize_ == nil) {
          (void) [((id<RAREiPlatformComponent>) nil_chk([((RAREMenuButtonWidget *) nil_chk(menuWidget_)) getContainerComponent])) getPreferredSizeWithRAREUIDimension:size];
          menuSize_ = [[RAREUIDimension alloc] initWithRAREUIDimension:size];
        }
        else {
          [size setSizeWithRAREUIDimension:menuSize_];
        }
        float mw = size->width_;
        width -= mw;
        if (width < 0) {
          count--;
          width += lbwidth;
        }
        while ((width < 0) && (count > 0)) {
          id<RAREiPlatformComponent> c = [buttons_ getWithInt:--count];
          RAREUIMenuItem *item = [((RAREUIPopupMenu *) nil_chk(popupMenu_)) getMenuItemWithInt:count];
          if (![((RAREUIMenuItem *) nil_chk(item)) isVisible]) {
            continue;
          }
          (void) [((id<RAREiPlatformComponent>) nil_chk(c)) getPreferredSizeWithRAREUIDimension:size];
          width += size->width_;
          width += separatorWidth_;
        }
      }
      visibleButtons_ = count;
      if (!leftMenuButton_ && (width > 0)) {
        if (expansionComponent_ == nil) {
          expansionComponent_ = [RAREaPlatformHelper createSpacerComponentWithRAREiPlatformComponent:self];
        }
        [toolbarComponent_ addComponentWithRAREiPlatformComponent:expansionComponent_ withNSString:@"FILL:DEFAULT:GROW"];
      }
      for (int i = 0; (i < len) && (count > 0); i++) {
        RAREUIMenuItem *item = [((RAREUIPopupMenu *) nil_chk(popupMenu_)) getMenuItemWithInt:i];
        if (![((RAREUIMenuItem *) nil_chk(item)) isVisible]) {
          continue;
        }
        [toolbarComponent_ addComponentWithRAREiPlatformComponent:[buttons_ getWithInt:i]];
        if (showSeperators_) {
          [toolbarComponent_ addComponentWithRAREiPlatformComponent:[((JavaUtilArrayList *) nil_chk(separators_)) getWithInt:i]];
        }
        count--;
      }
    }
    else {
      [((RARELinearPanel *) nil_chk(toolbarComponent_)) removeAll];
      visibleButtons_ = 0;
    }
    if (visibleButtons_ < len) {
      [((RAREMenuButtonWidget *) nil_chk(menuWidget_)) setVisibleWithBoolean:YES];
    }
    else {
      len = [((RARELinearPanel *) nil_chk(toolbarComponent_)) getComponentCount];
      if (showSeperators_ && (len > 0)) {
        [toolbarComponent_ removeWithRAREiPlatformComponent:[toolbarComponent_ getComponentAtWithInt:len - 1]];
      }
      [((RAREMenuButtonWidget *) nil_chk(menuWidget_)) setVisibleWithBoolean:NO];
    }
  }
}

- (void)reset {
  oldWidth_ = 0;
  visibleButtons_ = 0;
  menuSize_ = nil;
  titleSize_ = nil;
  [((id<RAREiPlatformComponent>) nil_chk(titlePane_)) revalidate];
  [self revalidate];
}

- (void)setButtonTextWithRAREiActionComponent:(id<RAREiActionComponent>)c
                           withRAREUIMenuItem:(RAREUIMenuItem *)menu {
  if (showButtonText_) {
    [((id<RAREiActionComponent>) nil_chk(c)) setTextWithJavaLangCharSequence:[((RAREUIMenuItem *) nil_chk(menu)) getText]];
    [c setToolTipTextWithJavaLangCharSequence:[menu getTooltip]];
  }
  else {
    [((id<RAREiActionComponent>) nil_chk(c)) setTextWithJavaLangCharSequence:@""];
    id<JavaLangCharSequence> s = [((RAREUIMenuItem *) nil_chk(menu)) getTooltip];
    if (s == nil) {
      s = [menu getText];
    }
    [c setToolTipTextWithJavaLangCharSequence:s];
  }
}

- (id<RAREiPlatformComponent>)createSeparator {
  id<RAREiPlatformComponent> c = [RAREaPlatformHelper createSeparatorComponentWithRAREiPlatformComponent:self];
  [((id<RAREiPlatformComponent>) nil_chk(c)) putClientPropertyWithNSString:[RAREiConstants RARE_VALIGN_PROPERTY] withId:[RARERenderableDataItem_VerticalAlignEnum FILL]];
  return c;
}

+ (id<RAREiPlatformBorder>)getDefaultBorder {
  if (RAREActionBar_defaultBorder_ == nil) {
    RAREUIMatteBorder *mb = [[RAREUIMatteBorder alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:0 withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:0 withRAREUIColor:nil];
    RAREUIEmptyBorder *eb = [[RAREUIEmptyBorder alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_1]];
    RAREActionBar_defaultBorder_ = [[RAREUICompoundBorder alloc] initWithRAREiPlatformBorder:mb withRAREiPlatformBorder:eb];
  }
  return RAREActionBar_defaultBorder_;
}

- (void)copyAllFieldsTo:(RAREActionBar *)other {
  [super copyAllFieldsTo:other];
  other->actionListener_ = actionListener_;
  other->buttonInsets_ = buttonInsets_;
  other->buttons_ = buttons_;
  other->expansionComponent_ = expansionComponent_;
  other->leftMenuButton_ = leftMenuButton_;
  other->menuButtonWidth_ = menuButtonWidth_;
  other->menuSize_ = menuSize_;
  other->menuWidget_ = menuWidget_;
  other->oldWidth_ = oldWidth_;
  other->popupList_ = popupList_;
  other->popupMenu_ = popupMenu_;
  other->separatorWidth_ = separatorWidth_;
  other->separators_ = separators_;
  other->showButtonText_ = showButtonText_;
  other->showButtons_ = showButtons_;
  other->showSeperators_ = showSeperators_;
  other->showTitleText_ = showTitleText_;
  other->titleComponent_ = titleComponent_;
  other->titlePane_ = titlePane_;
  other->titleSize_ = titleSize_;
  other->toolbarComponent_ = toolbarComponent_;
  other->visibleButtons_ = visibleButtons_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getSecondaryTitle", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getTitleComponent", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "hasTitleComponent", NULL, "Z", 0x1, NULL },
    { "isShowButtons", NULL, "Z", 0x1, NULL },
    { "isShowButtonText", NULL, "Z", 0x1, NULL },
    { "isShowTitleText", NULL, "Z", 0x1, NULL },
    { "createButtonWithRAREUIMenuItem:", NULL, "LRAREiActionComponent", 0x4, NULL },
    { "getMinimumSizeExWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
    { "getPreferredSizeExWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
    { "layoutWithFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "reset", NULL, "V", 0x4, NULL },
    { "setButtonTextWithRAREiActionComponent:withRAREUIMenuItem:", NULL, "V", 0x4, NULL },
    { "createSeparator", NULL, "LRAREiPlatformComponent", 0x2, NULL },
    { "getDefaultBorder", NULL, "LRAREiPlatformBorder", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "defaultBorder_", NULL, 0x8, "LRAREiPlatformBorder" },
    { "buttons_", NULL, 0x0, "LJavaUtilArrayList" },
    { "separators_", NULL, 0x0, "LJavaUtilArrayList" },
    { "buttonInsets_", NULL, 0x0, "LRAREUIInsets" },
    { "expansionComponent_", NULL, 0x0, "LRAREiPlatformComponent" },
    { "leftMenuButton_", NULL, 0x0, "Z" },
    { "menuButtonWidth_", NULL, 0x0, "F" },
    { "menuSize_", NULL, 0x0, "LRAREUIDimension" },
    { "menuWidget_", NULL, 0x0, "LRAREMenuButtonWidget" },
    { "oldWidth_", NULL, 0x0, "F" },
    { "popupList_", NULL, 0x0, "LRAREPopupList" },
    { "popupMenu_", NULL, 0x0, "LRAREUIPopupMenu" },
    { "separatorWidth_", NULL, 0x0, "F" },
    { "showButtonText_", NULL, 0x0, "Z" },
    { "showButtons_", NULL, 0x0, "Z" },
    { "showSeperators_", NULL, 0x0, "Z" },
    { "titleComponent_", NULL, 0x0, "LRAREiActionComponent" },
    { "titlePane_", NULL, 0x0, "LRAREiPlatformComponent" },
    { "titleSize_", NULL, 0x0, "LRAREUIDimension" },
    { "toolbarComponent_", NULL, 0x0, "LRARELinearPanel" },
    { "visibleButtons_", NULL, 0x0, "I" },
  };
  static J2ObjcClassInfo _RAREActionBar = { "ActionBar", "com.appnativa.rare.ui", NULL, 0x1, 14, methods, 21, fields, 0, NULL};
  return &_RAREActionBar;
}

@end
