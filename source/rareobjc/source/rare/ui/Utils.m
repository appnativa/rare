//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/Utils.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/jgoodies/forms/layout/CellConstraints.h"
#include "com/appnativa/jgoodies/forms/layout/FormLayout.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/aConverter.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/net/JavaURLConnection.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/spot/CollapsibleInfo.h"
#include "com/appnativa/rare/spot/Font.h"
#include "com/appnativa/rare/spot/GridCell.h"
#include "com/appnativa/rare/spot/Label.h"
#include "com/appnativa/rare/spot/Line.h"
#include "com/appnativa/rare/spot/Link.h"
#include "com/appnativa/rare/spot/Margin.h"
#include "com/appnativa/rare/spot/NameValuePair.h"
#include "com/appnativa/rare/spot/Rectangle.h"
#include "com/appnativa/rare/spot/Viewer.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/spot/WidgetPane.h"
#include "com/appnativa/rare/ui/BorderUtils.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/Displayed.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/Frame.h"
#include "com/appnativa/rare/ui/GraphicsComposite.h"
#include "com/appnativa/rare/ui/Location.h"
#include "com/appnativa/rare/ui/RenderType.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIBorderHelper.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UIColorShade.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontHelper.h"
#include "com/appnativa/rare/ui/UIFontMetrics.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIImageIcon.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIPoint.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/aUIMenuItem.h"
#include "com/appnativa/rare/ui/aWindowManager.h"
#include "com/appnativa/rare/ui/border/UIDropShadowBorder.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/ChangeEvent.h"
#include "com/appnativa/rare/ui/event/EventListenerList.h"
#include "com/appnativa/rare/ui/event/ExpansionEvent.h"
#include "com/appnativa/rare/ui/event/ItemChangeEvent.h"
#include "com/appnativa/rare/ui/event/WindowEvent.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/event/iChangeListener.h"
#include "com/appnativa/rare/ui/event/iExpandedListener.h"
#include "com/appnativa/rare/ui/event/iItemChangeListener.h"
#include "com/appnativa/rare/ui/event/iPopupMenuListener.h"
#include "com/appnativa/rare/ui/event/iWindowListener.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iCollapsible.h"
#include "com/appnativa/rare/ui/iComposite.h"
#include "com/appnativa/rare/ui/iFormsPanel.h"
#include "com/appnativa/rare/ui/iObservableImage.h"
#include "com/appnativa/rare/ui/iPaintedButton.h"
#include "com/appnativa/rare/ui/iParentComponent.h"
#include "com/appnativa/rare/ui/iPath.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformPath.h"
#include "com/appnativa/rare/ui/iPlatformRenderingComponent.h"
#include "com/appnativa/rare/ui/iPlatformWindowManager.h"
#include "com/appnativa/rare/ui/iTabDocument.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/RenderSpace.h"
#include "com/appnativa/rare/ui/painter/UICellPainter.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/ui/painter/UIImagePainter.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iImagePainter.h"
#include "com/appnativa/rare/ui/painter/iPainterSupport.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformPainter.h"
#include "com/appnativa/rare/util/DataParser.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/aContainer.h"
#include "com/appnativa/rare/viewer/aViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iTabPaneViewer.h"
#include "com/appnativa/rare/viewer/iTarget.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/LabelWidget.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTAny.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTInteger.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/ByteArray.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/FilterableList.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/ISO88591Helper.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/UTF8Helper.h"
#include "java/beans/PropertyChangeEvent.h"
#include "java/beans/PropertyChangeListener.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation RAREUtils

static IOSIntArray * RAREUtils_EMPTY_INTS_;
static RAREUIInsets * RAREUtils_EMPTY_INSETS_;
static RAREUIDimension * RAREUtils_minButtonSize_;
static RAREUIDimension * RAREUtils_minTextFieldSize_;
static JavaLangThreadLocal * RAREUtils_perThreadScanner_;
static JavaLangThreadLocal * RAREUtils_perThreadCharArray_;
static JavaLangThreadLocal * RAREUtils_perThreadByteArray_;
static RARERenderableDataItem * RAREUtils_defaultItem_;
static int RAREUtils_minComboHeight_;

+ (IOSIntArray *)EMPTY_INTS {
  return RAREUtils_EMPTY_INTS_;
}

+ (RAREUIInsets *)EMPTY_INSETS {
  return RAREUtils_EMPTY_INSETS_;
}

+ (RAREUIDimension *)minButtonSize {
  return RAREUtils_minButtonSize_;
}

+ (void)setMinButtonSize:(RAREUIDimension *)minButtonSize {
  RAREUtils_minButtonSize_ = minButtonSize;
}

+ (RAREUIDimension *)minTextFieldSize {
  return RAREUtils_minTextFieldSize_;
}

+ (void)setMinTextFieldSize:(RAREUIDimension *)minTextFieldSize {
  RAREUtils_minTextFieldSize_ = minTextFieldSize;
}

+ (JavaLangThreadLocal *)perThreadScanner {
  return RAREUtils_perThreadScanner_;
}

+ (void)setPerThreadScanner:(JavaLangThreadLocal *)perThreadScanner {
  RAREUtils_perThreadScanner_ = perThreadScanner;
}

+ (JavaLangThreadLocal *)perThreadCharArray {
  return RAREUtils_perThreadCharArray_;
}

+ (void)setPerThreadCharArray:(JavaLangThreadLocal *)perThreadCharArray {
  RAREUtils_perThreadCharArray_ = perThreadCharArray;
}

+ (JavaLangThreadLocal *)perThreadByteArray {
  return RAREUtils_perThreadByteArray_;
}

+ (void)setPerThreadByteArray:(JavaLangThreadLocal *)perThreadByteArray {
  RAREUtils_perThreadByteArray_ = perThreadByteArray;
}

+ (RARERenderableDataItem *)defaultItem {
  return RAREUtils_defaultItem_;
}

+ (void)setDefaultItem:(RARERenderableDataItem *)defaultItem {
  RAREUtils_defaultItem_ = defaultItem;
}

+ (int)minComboHeight {
  return RAREUtils_minComboHeight_;
}

+ (int *)minComboHeightRef {
  return &RAREUtils_minComboHeight_;
}

+ (void)clearCache {
  RAREUtils_minButtonSize_ = nil;
  RAREUtils_minTextFieldSize_ = nil;
  RAREUtils_minComboHeight_ = -1;
}

+ (void)adjustTextWidgetPreferredWidthWithRAREaWidget:(RAREaWidget *)widget {
  float sw = [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getWidth];
  if ([RAREUIScreen fromPlatformPixelsWithFloat:sw] < 400) {
    sw = [RAREUIScreen getWidth];
  }
  RAREUIFont *f = [((RAREaWidget *) nil_chk(widget)) getFont];
  if (f == nil) {
    f = [RAREFontUtils getDefaultFont];
  }
  NSString *s = [widget getValueAsString];
  if ([((NSString *) nil_chk(s)) sequenceLength] != 0) {
    int cw = 0;
    int mcw = 0;
    int len = [s sequenceLength];
    for (int i = 0; i < len; i++) {
      cw++;
      if ([s charAtWithInt:i] == 0x000a) {
        if (cw > mcw) {
          mcw = cw;
        }
        cw = 0;
      }
    }
    if (mcw == 0) {
      mcw = cw;
    }
    mcw = (int) (mcw * .66);
    cw = [RAREFontUtils getCharacterWidthWithRAREUIFont:f];
    int chars = (int) sw / cw;
    chars = [JavaLangMath minWithInt:mcw withInt:chars - 2];
    chars = [JavaLangMath maxWithInt:chars withInt:2];
    s = [NSString stringWithFormat:@"%dch", chars];
    [widget setPreferredSizeWithNSString:s withNSString:nil];
  }
}

+ (void)adjustComboBoxSizeWithRAREUIDimension:(RAREUIDimension *)size {
  if (RAREUtils_minComboHeight_ == -1) {
    JavaLangInteger *h = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getIntegerWithNSString:@"Rare.ComboBox.minimumHeight"];
    RAREUtils_minComboHeight_ = (h == nil) ? 0 : [h intValue];
    if (RAREUtils_minComboHeight_ < 0) {
      RAREUtils_minComboHeight_ = 0;
    }
  }
  if (RAREUtils_minComboHeight_ > ((RAREUIDimension *) nil_chk(size))->height_) {
    size->height_ = RAREUtils_minComboHeight_;
  }
}

+ (void)adjustButtonSizeWithRAREUIDimension:(RAREUIDimension *)size {
  if (RAREUtils_minButtonSize_ == nil) {
    JavaLangInteger *w = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getIntegerWithNSString:@"Rare.Button.minimumWidth"];
    JavaLangInteger *h = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getIntegerWithNSString:@"Rare.Button.minimumHeight"];
    if ((w == nil) && (h == nil)) {
      return;
    }
    RAREUIDimension *d = [[RAREUIDimension alloc] init];
    if (w != nil) {
      d->width_ = [w intValue];
    }
    if (h != nil) {
      d->height_ = [h intValue];
    }
    RAREUtils_minButtonSize_ = d;
  }
  ((RAREUIDimension *) nil_chk(size))->width_ = [JavaLangMath maxWithFloat:size->width_ withFloat:((RAREUIDimension *) nil_chk(RAREUtils_minButtonSize_))->width_];
  size->height_ = [JavaLangMath maxWithFloat:size->height_ withFloat:RAREUtils_minButtonSize_->height_];
}

+ (void)adjustTextFieldSizeWithRAREUIDimension:(RAREUIDimension *)size {
  if (RAREUtils_minTextFieldSize_ == nil) {
    JavaLangInteger *w = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getIntegerWithNSString:@"Rare.TextField.minimumWidth"];
    JavaLangInteger *h = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getIntegerWithNSString:@"Rare.TextField.minimumHeight"];
    RAREUIDimension *d = [[RAREUIDimension alloc] init];
    if (w != nil) {
      d->width_ = [w intValue];
    }
    if (h != nil) {
      d->height_ = [h intValue];
    }
    RAREUtils_minTextFieldSize_ = d;
  }
  ((RAREUIDimension *) nil_chk(size))->width_ = [JavaLangMath maxWithFloat:size->width_ withFloat:((RAREUIDimension *) nil_chk(RAREUtils_minTextFieldSize_))->width_];
  size->height_ = [JavaLangMath maxWithFloat:size->height_ withFloat:RAREUtils_minTextFieldSize_->height_];
}

+ (IOSObjectArray *)computeDifferenceWithRAREUIRectangle:(RAREUIRectangle *)rect1
                                     withRAREUIRectangle:(RAREUIRectangle *)rect2 {
  if ((rect1 == nil) || [rect1 isEmpty] || (rect2 == nil) || [rect2 isEmpty]) {
    return [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[RAREUIRectangle class]]];
  }
  RAREUIRectangle *isection = [((RAREUIRectangle *) nil_chk(rect1)) intersectionWithRAREaUIRectangle:rect2];
  if ([((RAREUIRectangle *) nil_chk(isection)) isEmpty]) {
    return [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[RAREUIRectangle class]]];
  }
  JavaUtilArrayList *reminders = [[JavaUtilArrayList alloc] initWithInt:4];
  [RAREUtils substractWithRAREUIRectangle:rect1 withRAREUIRectangle:isection withJavaUtilArrayList:reminders];
  return (IOSObjectArray *) check_class_cast([reminders toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[RAREUIRectangle class]]]], [IOSObjectArray class]);
}

+ (RAREUICellPainter *)configureCellPainterWithRAREiWidget:(id<RAREiWidget>)context
                                      withRARESPOTGridCell:(RARESPOTGridCell *)cell {
  RAREUICellPainter *cp = nil;
  if (cell != nil) {
    cp = [[RAREUICellPainter alloc] init];
    cp->x_ = [cell getX];
    cp->y_ = [cell getY];
    cp->width_ = [cell getWidth];
    cp->height_ = [cell getHeight];
    cp->row_ = cp->y_;
    cp->column_ = cp->x_;
    cp->columnSpan_ = cp->width_;
    cp->rowSpan_ = cp->height_;
    if ([((SPOTPrintableString *) nil_chk(cell->bgColor_)) spot_valueWasSet]) {
      [RAREColorUtils configureBackgroundPainterWithRAREPaintBucket:cp withNSString:[cell->bgColor_ getValue] withJavaUtilMap:[cell->bgColor_ spot_getAttributesEx] withBoolean:NO];
    }
    if ([((SPOTPrintableString *) nil_chk(cell->bgImageURL_)) spot_valueWasSet]) {
      [cp setImagePainterWithRAREiImagePainter:[RAREUtils configureImageWithRAREiWidget:context withRAREiImagePainter:nil withSPOTPrintableString:cell->bgImageURL_ withBoolean:NO]];
    }
    id<RAREiPlatformBorder> b = [RAREBorderUtils createBorderWithRAREiWidget:context withSPOTSet:[cell getBorders] withRAREiPlatformBorder:nil];
    if (b != nil) {
      [cp setBorderWithRAREiPlatformBorder:b];
    }
  }
  return cp;
}

+ (IOSObjectArray *)configureCellPaintersWithRAREiWidget:(id<RAREiWidget>)context
                                             withSPOTSet:(SPOTSet *)set {
  int len = (set == nil) ? 0 : [set getCount];
  if (len == 0) {
    return nil;
  }
  IOSObjectArray *painters = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[RAREUICellPainter class]]];
  for (int i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(painters, i, [RAREUtils configureCellPainterWithRAREiWidget:context withRARESPOTGridCell:(RARESPOTGridCell *) check_class_cast([((SPOTSet *) nil_chk(set)) getExWithInt:i], [RARESPOTGridCell class])]);
  }
  return painters;
}

+ (void)configureCollapsibleWithRAREiWidget:(id<RAREiWidget>)context
                       withRAREiCollapsible:(id<RAREiCollapsible>)pane
                withRARESPOTCollapsibleInfo:(RARESPOTCollapsibleInfo *)cfg {
  NSString *s = [((SPOTPrintableString *) nil_chk(((RARESPOTCollapsibleInfo *) nil_chk(cfg))->title_)) getValue];
  if (s != nil) {
    [((id<RAREiCollapsible>) nil_chk(pane)) setTitleTextWithJavaLangCharSequence:[((id<RAREiWidget>) nil_chk(context)) expandStringWithNSString:s withBoolean:NO]];
  }
  s = [((SPOTPrintableString *) nil_chk(cfg->collapsedTitle_)) getValue];
  if (s != nil) {
    [((id<RAREiCollapsible>) nil_chk(pane)) setCollapsedTitleWithNSString:[((id<RAREiWidget>) nil_chk(context)) expandStringWithNSString:s withBoolean:NO]];
  }
  s = [((SPOTPrintableString *) nil_chk(cfg->expandTip_)) getValue];
  if (s != nil) {
    [((id<RAREiCollapsible>) nil_chk(pane)) setExpandTipWithNSString:[((id<RAREiWidget>) nil_chk(context)) expandStringWithNSString:s withBoolean:NO]];
  }
  s = [((SPOTPrintableString *) nil_chk(cfg->collapseTip_)) getValue];
  if (s != nil) {
    [((id<RAREiCollapsible>) nil_chk(pane)) setCollapseTipWithNSString:[((id<RAREiWidget>) nil_chk(context)) expandStringWithNSString:s withBoolean:NO]];
  }
  id<RAREiPlatformIcon> icon = [((id<RAREiWidget>) nil_chk(context)) getIconWithSPOTPrintableString:cfg->icon_];
  if (icon != nil) {
    [((id<RAREiCollapsible>) nil_chk(pane)) setTitleIconWithRAREiPlatformIcon:icon];
  }
  switch ([((RARESPOTCollapsibleInfo_CExpander *) nil_chk(cfg->expander_)) intValue]) {
    case RARESPOTCollapsibleInfo_CExpander_custom:
    [((id<RAREiCollapsible>) nil_chk(pane)) setCollapseIconWithRAREiPlatformIcon:[context getIconWithNSString:[cfg->expander_ spot_getAttributeWithNSString:@"collapseIcon"] withNSString:@"collapse icon"]];
    [pane setExpandIconWithRAREiPlatformIcon:[context getIconWithNSString:[cfg->expander_ spot_getAttributeWithNSString:@"expandIcon"] withNSString:@"expand icon"]];
    [pane setTitleIconOnLeftWithBoolean:[@"true" equalsIgnoreCase:[cfg->expander_ spot_getAttributeWithNSString:@"iconOnTheLeft"]]];
    break;
    case RARESPOTCollapsibleInfo_CExpander_chevron:
    [((id<RAREiCollapsible>) nil_chk(pane)) setUseChevronWithBoolean:YES];
    break;
    default:
    break;
  }
  RAREPaintBucket *pb = [RAREColorUtils configureWithRAREiWidget:context withRARESPOTGridCell:[cfg getTitleCell] withRAREPaintBucket:nil];
  if (pb != nil) {
    if ([pb getBorder] != nil) {
      [((id<RAREiCollapsible>) nil_chk(pane)) setTitleBorderWithRAREiPlatformBorder:[pb getBorder]];
    }
    RAREUIColor *c = [pb getForegroundColor];
    if (c != nil) {
      [((id<RAREiCollapsible>) nil_chk(pane)) setTitleForegroundWithRAREUIColor:c];
    }
    c = [pb getBackgroundColor];
    if (c != nil) {
      [((id<RAREiCollapsible>) nil_chk(pane)) setTitleBackgroundWithRAREUIColor:c];
    }
    id<RAREiPlatformComponent> comp = [((id<RAREiCollapsible>) nil_chk(pane)) getTitleComponent];
    s = [((SPOTPrintableString *) nil_chk(((RARESPOTGridCell *) nil_chk([cfg getTitleCell]))->height_)) getValue];
    if ((s != nil) && ([s sequenceLength] > 0) && ![s isEqual:@"-1"]) {
      [((id<RAREiPlatformComponent>) nil_chk(comp)) putClientPropertyWithNSString:[RAREiConstants RARE_HEIGHT_PROPERTY] withId:s];
    }
    if ([pb getComponentPainterWithBoolean:NO] != nil) {
      if ([(id) comp conformsToProtocol: @protocol(RAREiPainterSupport)]) {
        [((id<RAREiPainterSupport>) check_protocol_cast(comp, @protocol(RAREiPainterSupport))) setComponentPainterWithRAREiPlatformComponentPainter:[pb getComponentPainterWithBoolean:NO]];
      }
    }
  }
  if ([((RARESPOTFont *) nil_chk(cfg->titleFont_)) spot_hasValue]) {
    [((id<RAREiCollapsible>) nil_chk(pane)) setTitleFontWithRAREUIFont:[RAREUIFontHelper getFontWithRAREiWidget:context withRARESPOTFont:cfg->titleFont_]];
  }
  if (![((SPOTBoolean *) nil_chk(cfg->showTitleBar_)) booleanValue]) {
    [((id<RAREiCollapsible>) nil_chk(pane)) setShowTitleWithBoolean:NO];
  }
  if ([((SPOTBoolean *) nil_chk(cfg->expandOnDragover_)) booleanValue]) {
    [((id<RAREiCollapsible>) nil_chk(pane)) setExpandOnDragOverWithBoolean:YES];
  }
  if (![context isDesignMode] && [((SPOTBoolean *) nil_chk(cfg->animateTransitions_)) booleanValue]) {
    [((id<RAREiCollapsible>) nil_chk(pane)) setAnimateTransitionsWithBoolean:YES];
    [pane setAnimatorOptionsWithJavaUtilMap:[cfg->animateTransitions_ spot_getAttributesEx]];
  }
  [((id<RAREiCollapsible>) nil_chk(pane)) setUserControllableWithBoolean:[((SPOTBoolean *) nil_chk(cfg->userControllable_)) booleanValue]];
  if ([((SPOTBoolean *) nil_chk(cfg->initiallyCollapsed_)) booleanValue]) {
    [pane setCollapsedWithBoolean:YES];
  }
  if (![((SPOTBoolean *) nil_chk(cfg->opaqueTitleBar_)) booleanValue]) {
    [pane setTitleOpaqueWithBoolean:NO];
  }
}

+ (id<RAREiImagePainter>)configureImageWithRAREiWidget:(id<RAREiWidget>)context
                                 withRAREiImagePainter:(id<RAREiImagePainter>)painter
                                       withJavaUtilMap:(id<JavaUtilMap>)attrs {
  NSString *s = nil;
  @try {
    if (attrs != nil) {
      RAREUTCharScanner *scanner = [((JavaLangThreadLocal *) nil_chk(RAREUtils_perThreadScanner_)) get];
      s = [attrs getWithId:@"renderType"];
      if ((s != nil) && ([s sequenceLength] > 0)) {
        @try {
          [((RAREUTCharScanner *) nil_chk(scanner)) resetWithNSString:s];
          (void) [((RAREUTCharScanner *) nil_chk([scanner unquoteWithBoolean:YES])) toUpperCase];
          [((id<RAREiImagePainter>) nil_chk(painter)) setRenderTypeWithRARERenderTypeEnum:[RARERenderTypeEnum valueOfWithNSString:[scanner getLeftOver]]];
        }
        @catch (JavaLangException *e) {
          [RAREPlatform ignoreExceptionWithNSString:[RAREUTHelper expandStringWithNSString:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getResourceAsStringWithNSString:@"Rare.runtime.text.badAttributeValue"] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ s, @"renderType" } count:2 type:[IOSClass classWithClass:[NSString class]]]] withJavaLangThrowable:nil];
        }
      }
      s = [attrs getWithId:@"renderSpace"];
      if ((s != nil) && ([s sequenceLength] > 0)) {
        @try {
          [((RAREUTCharScanner *) nil_chk(scanner)) resetWithNSString:s];
          (void) [((RAREUTCharScanner *) nil_chk([scanner unquoteWithBoolean:YES])) toUpperCase];
          [((id<RAREiImagePainter>) nil_chk(painter)) setRenderSpaceWithRARERenderSpaceEnum:[RARERenderSpaceEnum valueOfWithNSString:[scanner getLeftOver]]];
        }
        @catch (JavaLangException *e) {
          [RAREPlatform ignoreExceptionWithNSString:[RAREUTHelper expandStringWithNSString:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getResourceAsStringWithNSString:@"Rare.runtime.text.badAttributeValue"] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ s, @"renderSpace" } count:2 type:[IOSClass classWithClass:[NSString class]]]] withJavaLangThrowable:nil];
        }
      }
      s = [attrs getWithId:@"displayed"];
      if ((s != nil) && ([s sequenceLength] > 0)) {
        @try {
          [((RAREUTCharScanner *) nil_chk(scanner)) resetWithNSString:s];
          (void) [((RAREUTCharScanner *) nil_chk([scanner unquoteWithBoolean:YES])) toUpperCase];
          [((id<RAREiImagePainter>) nil_chk(painter)) setDisplayedWithRAREDisplayedEnum:[RAREDisplayedEnum valueOfWithNSString:[scanner getLeftOver]]];
        }
        @catch (JavaLangException *e) {
          [RAREPlatform ignoreExceptionWithNSString:[RAREUTHelper expandStringWithNSString:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getResourceAsStringWithNSString:@"Rare.runtime.text.badAttributeValue"] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ s, @"displayed" } count:2 type:[IOSClass classWithClass:[NSString class]]]] withJavaLangThrowable:nil];
        }
      }
      float alpha = 1;
      s = [attrs getWithId:@"opacity"];
      if ((s != nil) && ([s sequenceLength] > 0)) {
        alpha = [RAREUTSNumber floatValueWithNSString:s];
        if ([s hasSuffix:@"%"]) {
          alpha /= 100;
        }
        if (alpha > 1) {
          alpha = (fmodf(alpha, 256)) / 255.0f;
        }
      }
      RAREiComposite_CompositeTypeEnum *ct = [RAREiComposite_CompositeTypeEnum SRC_OVER];
      s = [attrs getWithId:@"composite"];
      if (s != nil) {
        @try {
          [((RAREUTCharScanner *) nil_chk(scanner)) resetWithNSString:s];
          (void) [((RAREUTCharScanner *) nil_chk([scanner unquoteWithBoolean:YES])) toUpperCase];
          ct = [RAREiComposite_CompositeTypeEnum valueOfWithNSString:[scanner getLeftOver]];
        }
        @catch (JavaLangException *e) {
          [RAREPlatform ignoreExceptionWithNSString:[RAREUTHelper expandStringWithNSString:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getResourceAsStringWithNSString:@"Rare.runtime.text.badAttributeValue"] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ s, @"composite" } count:2 type:[IOSClass classWithClass:[NSString class]]]] withJavaLangThrowable:nil];
        }
      }
      if ((ct != [RAREiComposite_CompositeTypeEnum SRC_OVER]) || (alpha != 1)) {
        [((id<RAREiImagePainter>) nil_chk(painter)) setCompositeWithRAREiComposite:[[RAREGraphicsComposite alloc] initWithRAREiComposite_CompositeTypeEnum:ct withFloat:alpha]];
      }
      s = [attrs getWithId:@"scaling"];
      if (s != nil) {
        [((RAREUTCharScanner *) nil_chk(scanner)) resetWithNSString:s];
        (void) [((RAREUTCharScanner *) nil_chk([scanner unquoteWithBoolean:YES])) toUpperCase];
        [((id<RAREiImagePainter>) nil_chk(painter)) setScalingTypeWithRAREiImagePainter_ScalingTypeEnum:[RAREiImagePainter_ScalingTypeEnum valueOfWithNSString:[scanner getLeftOver]]];
      }
    }
  }
  @catch (JavaLangException *ex) {
    [RAREPlatform ignoreExceptionWithNSString:s withJavaLangThrowable:ex];
  }
  return painter;
}

+ (id<RAREiImagePainter>)configureImageWithRAREiWidget:(id<RAREiWidget>)context
                                 withRAREiImagePainter:(id<RAREiImagePainter>)painter
                               withSPOTPrintableString:(SPOTPrintableString *)imgURL
                                           withBoolean:(BOOL)emptyOk {
  RAREUIImage *img = [((id<RAREiWidget>) nil_chk(context)) getImageWithSPOTPrintableString:imgURL];
  if ((img == nil) && !emptyOk) {
    return nil;
  }
  if (painter == nil) {
    painter = [[RAREUIImagePainter alloc] init];
  }
  [((id<RAREiImagePainter>) nil_chk(painter)) setImageWithRAREUIImage:img];
  [painter setSourceLocationWithNSString:(img == nil) ? nil : [img getLocation]];
  return [RAREUtils configureImageWithRAREiWidget:context withRAREiImagePainter:painter withJavaUtilMap:[((SPOTPrintableString *) nil_chk(imgURL)) spot_getAttributesEx]];
}

+ (id<RAREiImagePainter>)configureImageWithRAREiWidget:(id<RAREiWidget>)context
                                 withRAREiImagePainter:(id<RAREiImagePainter>)painter
                                          withNSString:(NSString *)url
                                       withJavaUtilMap:(id<JavaUtilMap>)attrs
                                           withBoolean:(BOOL)emptyOk {
  if (url != nil) {
    url = [url trim];
    if ([((NSString *) nil_chk(url)) sequenceLength] == 0) {
      url = nil;
    }
  }
  RAREUIImage *img = (url == nil) ? nil : [((id<RAREiWidget>) nil_chk(context)) getImageWithNSString:url];
  if ((img == nil) && !emptyOk) {
    return nil;
  }
  if (painter == nil) {
    painter = [[RAREUIImagePainter alloc] init];
  }
  [((id<RAREiImagePainter>) nil_chk(painter)) setImageWithRAREUIImage:img];
  [painter setSourceLocationWithNSString:url];
  ;
  return [RAREUtils configureImageWithRAREiWidget:context withRAREiImagePainter:painter withJavaUtilMap:attrs];
}

+ (id)createAbsoluteConstraintsWithInt:(int)x
                               withInt:(int)y
                               withInt:(int)width
                               withInt:(int)height {
  return [[RAREUIRectangle alloc] initWithFloat:[RAREScreenUtils platformPixelsWithFloat:x] withFloat:[RAREScreenUtils platformPixelsWithFloat:y] withFloat:[RAREScreenUtils platformPixelsWithFloat:width] withFloat:[RAREScreenUtils platformPixelsWithFloat:height]];
}

+ (RARECellConstraints *)createCellConstraintsWithInt:(int)x
                                              withInt:(int)y
                                              withInt:(int)colSpan
                                              withInt:(int)rowSpan
       withRARERenderableDataItem_HorizontalAlignEnum:(RARERenderableDataItem_HorizontalAlignEnum *)ha
         withRARERenderableDataItem_VerticalAlignEnum:(RARERenderableDataItem_VerticalAlignEnum *)va {
  RARECellConstraints_Alignment *vAlign = [RARECellConstraints DEFAULT];
  RARECellConstraints_Alignment *hAlign = [RARECellConstraints DEFAULT];
  switch ([va ordinal]) {
    case RARERenderableDataItem_VerticalAlign_TOP:
    vAlign = [RARECellConstraints TOP];
    break;
    case RARERenderableDataItem_VerticalAlign_BOTTOM:
    vAlign = [RARECellConstraints BOTTOM];
    break;
    case RARERenderableDataItem_VerticalAlign_FILL:
    vAlign = [RARECellConstraints FILL];
    break;
    default:
    break;
  }
  switch ([ha ordinal]) {
    case RARERenderableDataItem_HorizontalAlign_CENTER:
    hAlign = [RARECellConstraints CENTER];
    break;
    case RARERenderableDataItem_HorizontalAlign_LEFT:
    hAlign = [RARECellConstraints LEFT];
    break;
    case RARERenderableDataItem_HorizontalAlign_RIGHT:
    hAlign = [RARECellConstraints RIGHT];
    break;
    case RARERenderableDataItem_HorizontalAlign_FILL:
    hAlign = [RARECellConstraints FILL];
    break;
    default:
    break;
  }
  return [[RARECellConstraints alloc] initWithInt:x + 1 withInt:y + 1 withInt:colSpan withInt:rowSpan withRARECellConstraints_Alignment:hAlign withRARECellConstraints_Alignment:vAlign];
}

+ (RARECellConstraints *)createCellConstraintsWithRARESPOTWidget:(RARESPOTWidget *)cfg
                                         withRARECellConstraints:(RARECellConstraints *)cc
                                             withRAREUIRectangle:(RAREUIRectangle *)table {
  int x;
  int y;
  int h;
  int w;
  if (table == nil) {
    x = [((RARESPOTRectangle *) nil_chk(((RARESPOTWidget *) nil_chk(cfg))->bounds_)) getX];
    y = [cfg->bounds_ getY];
  }
  else {
    x = (int) table->x_;
    y = (int) table->y_;
  }
  h = [((SPOTInteger *) nil_chk(((RARESPOTWidget *) nil_chk(cfg))->rowSpan_)) intValue];
  w = [((SPOTInteger *) nil_chk(cfg->columnSpan_)) intValue];
  if (w < 0) {
    w = (table == nil) ? -1 : (int) table->width_ - x;
  }
  if (h < 0) {
    h = (table == nil) ? -1 : (int) table->height_ - y;
  }
  if (x < 0) {
    x = 0;
  }
  if (y < 0) {
    y = 0;
  }
  RARECellConstraints_Alignment *vAlign = [RARECellConstraints DEFAULT];
  RARECellConstraints_Alignment *hAlign = [RARECellConstraints DEFAULT];
  switch ([((RARESPOTWidget_CVerticalAlign *) nil_chk(cfg->verticalAlign_)) intValue]) {
    case RARESPOTWidget_CVerticalAlign_top:
    vAlign = [RARECellConstraints TOP];
    break;
    case RARESPOTWidget_CVerticalAlign_bottom:
    vAlign = [RARECellConstraints BOTTOM];
    break;
    case RARESPOTWidget_CVerticalAlign_full:
    vAlign = [RARECellConstraints FILL];
    break;
    default:
    break;
  }
  switch ([((RARESPOTWidget_CHorizontalAlign *) nil_chk(cfg->horizontalAlign_)) intValue]) {
    case RARESPOTWidget_CHorizontalAlign_center:
    hAlign = [RARECellConstraints CENTER];
    break;
    case RARESPOTWidget_CHorizontalAlign_left:
    hAlign = [RARECellConstraints LEFT];
    break;
    case RARESPOTWidget_CHorizontalAlign_right:
    hAlign = [RARECellConstraints RIGHT];
    break;
    case RARESPOTWidget_CHorizontalAlign_full:
    hAlign = [RARECellConstraints FILL];
    break;
    default:
    break;
  }
  if ([cfg isKindOfClass:[RARESPOTLine class]]) {
    RARESPOTLine *l = (RARESPOTLine *) check_class_cast(cfg, [RARESPOTLine class]);
    if ([((SPOTBoolean *) nil_chk(l->horizontal_)) booleanValue]) {
      if (hAlign == [RARECellConstraints DEFAULT]) {
        hAlign = [RARECellConstraints FILL];
      }
    }
    else if (vAlign == [RARECellConstraints DEFAULT]) {
      vAlign = [RARECellConstraints FILL];
    }
  }
  RARESPOTMargin *m = [cfg getCellPadding];
  if (cc == nil) {
    cc = [[RARECellConstraints alloc] init];
  }
  if (m != nil) {
    ((RARECellConstraints *) nil_chk(cc))->insets_ = [m getInsets];
  }
  else {
    (void) [((RAREUIInsets *) nil_chk(((RARECellConstraints *) nil_chk(cc))->insets_)) setWithInt:0 withInt:0 withInt:0 withInt:0];
  }
  return [((RARECellConstraints *) nil_chk(cc)) xywhWithInt:x + 1 withInt:y + 1 withInt:w withInt:h withRARECellConstraints_Alignment:hAlign withRARECellConstraints_Alignment:vAlign];
}

+ (id)createConstraintsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)panel
                               withRARESPOTWidget:(RARESPOTWidget *)cfg {
  RAREFormLayout *fl = nil;
  RAREiContainer_LayoutEnum *lo;
  if ([(id) panel conformsToProtocol: @protocol(RAREiFormsPanel)]) {
    fl = [((id<RAREiFormsPanel>) check_protocol_cast(panel, @protocol(RAREiFormsPanel))) getFormLayout];
    lo = [((id<RAREiFormsPanel>) check_protocol_cast(panel, @protocol(RAREiFormsPanel))) isTableLayout] ? [RAREiContainer_LayoutEnum TABLE] : [RAREiContainer_LayoutEnum FORMS];
  }
  else {
    lo = [RAREiContainer_LayoutEnum ABSOLUTE];
  }
  switch ([lo ordinal]) {
    case RAREiContainer_Layout_TABLE:
    {
      RARECellConstraints *cc = [[RARECellConstraints alloc] init];
      int rows = [((RAREFormLayout *) nil_chk(fl)) getRowCount] * 2 - 1;
      int cols = [fl getRowCount] * 2 - 1;
      RAREUIRectangle *r = [[RAREUIRectangle alloc] initWithFloat:cols withFloat:rows];
      cc = [RAREUtils createCellConstraintsWithRARESPOTWidget:cfg withRARECellConstraints:cc withRAREUIRectangle:r];
      ((RARECellConstraints *) nil_chk(cc))->gridX_ = cc->gridX_ * 2 - 1;
      cc->gridY_ = cc->gridX_ * 2 - 1;
      if (cc->gridX_ < 0) {
        cc->gridX_ = 0;
      }
      if (cc->gridY_ < 0) {
        cc->gridY_ = 0;
      }
      return cc;
    }
    case RAREiContainer_Layout_FORMS:
    return [RAREUtils createCellConstraintsWithRARESPOTWidget:cfg withRARECellConstraints:[[RARECellConstraints alloc] init] withRAREUIRectangle:nil];
    case RAREiContainer_Layout_ABSOLUTE:
    return [RAREUtils createAbsoluteConstraintsWithInt:[((RARESPOTRectangle *) nil_chk(((RARESPOTWidget *) nil_chk(cfg))->bounds_)) getX] withInt:[cfg->bounds_ getY] withInt:[cfg->bounds_ getWidth] withInt:[cfg->bounds_ getHeight]];
    case RAREiContainer_Layout_FLOW:
    return [RAREUtils createCellConstraintsWithRARESPOTWidget:cfg withRARECellConstraints:[[RARECellConstraints alloc] init] withRAREUIRectangle:nil];
    default:
    return nil;
  }
}

+ (id<RAREiImagePainter>)createImagePainterWithRAREiWidget:(id<RAREiWidget>)context
                                              withNSString:(NSString *)painter {
  if (painter == nil) {
    return nil;
  }
  id<JavaUtilMap> map = nil;
  int n = [((NSString *) nil_chk(painter)) indexOf:'['];
  if (n != -1) {
    int p = [painter indexOf:']'];
    if (p > n) {
      NSString *s = [painter substring:n + 1 endIndex:p];
      painter = [painter substring:0 endIndex:n];
      map = [RAREUTCharScanner parseOptionStringExWithNSString:s withChar:','];
    }
  }
  return [RAREUtils configureImageWithRAREiWidget:context withRAREiImagePainter:nil withNSString:painter withJavaUtilMap:map withBoolean:NO];
}

+ (RAREActionLink *)createLinkWithRAREiWidget:(id<RAREiWidget>)context
                                 withNSString:(NSString *)target
                                  withSPOTAny:(SPOTAny *)viewer {
  RAREActionLink *link = nil;
  RARESPOTWidget *w = (RARESPOTWidget *) check_class_cast([((SPOTAny *) nil_chk(viewer)) getValue], [RARESPOTWidget class]);
  if (w != nil) {
    RARESPOTViewer *v = ([w isKindOfClass:[RARESPOTViewer class]]) ? (RARESPOTViewer *) check_class_cast(w, [RARESPOTViewer class]) : [[RARESPOTWidgetPane alloc] initWithRARESPOTWidget:w];
    link = [[RAREActionLink alloc] initWithRAREUTiURLResolver:context withRARESPOTViewer:v];
    [link setTargetNameWithNSString:target];
  }
  else {
    NSString *s = [viewer spot_getAttributeWithNSString:@"url"];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      JavaNetURL *url;
      @try {
        url = [((id<RAREiWidget>) nil_chk(context)) getURLWithNSString:s];
      }
      @catch (JavaNetMalformedURLException *ex) {
        @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:ex];
      }
      link = [[RAREActionLink alloc] initWithRAREUTiURLResolver:context withJavaNetURL:url];
    }
  }
  return link;
}

+ (id<RAREiPath>)createPath {
  return [RAREaPlatformHelper createPath];
}

+ (id<RAREiWidget>)createScrollPaneCornerFromUIPropertyWithRAREaViewer:(RAREaViewer *)host
                                                  withRARELocationEnum:(RARELocationEnum *)x
                                                  withRARELocationEnum:(RARELocationEnum *)y {
  NSString *corner = nil;
  switch ([x ordinal]) {
    case RARELocation_LEFT:
    if (y == [RARELocationEnum TOP]) {
      corner = @"Rare.ScrollPane.ulCorner";
    }
    else if (y == [RARELocationEnum BOTTOM]) {
      corner = @"Rare.ScrollPane.llCorner";
    }
    break;
    case RARELocation_RIGHT:
    if (y == [RARELocationEnum TOP]) {
      corner = @"Rare.ScrollPane.urCorner";
    }
    else if (y == [RARELocationEnum BOTTOM]) {
      corner = @"Rare.ScrollPane.lrCorner";
    }
    break;
    default:
    break;
  }
  id o = (corner == nil) ? nil : [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:corner];
  RARELabelWidget *l = nil;
  if (o != nil) {
    l = [RAREaLabelWidget createWithRAREiContainer:[((RAREaViewer *) nil_chk(host)) getContainerViewer]];
    if ([o isKindOfClass:[RAREUIColor class]]) {
      [((RARELabelWidget *) nil_chk(l)) setBackgroundWithRAREUIColor:(RAREUIColor *) check_class_cast(o, [RAREUIColor class])];
    }
    else if ([o conformsToProtocol: @protocol(RAREiBackgroundPainter)]) {
      [RAREaUIComponentPainter setBackgroundPainterWithRAREiPainterSupport:l withRAREiBackgroundPainter:(id<RAREiBackgroundPainter>) check_protocol_cast(o, @protocol(RAREiBackgroundPainter))];
    }
    else if ([o isKindOfClass:[RAREPaintBucket class]]) {
      [((RAREPaintBucket *) check_class_cast(o, [RAREPaintBucket class])) installWithRAREiPlatformComponent:[((RARELabelWidget *) nil_chk(l)) getContainerComponent]];
    }
    else if ([o conformsToProtocol: @protocol(RAREiPlatformPainter)]) {
      [RAREaUIComponentPainter setBackgroundOverlayPainterWithRAREiPainterSupport:l withRAREiPlatformPainter:(id<RAREiPlatformPainter>) check_protocol_cast(o, @protocol(RAREiPlatformPainter))];
    }
  }
  return l;
}

+ (id<RAREiTarget>)findTargetForComponentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  id<RAREiTarget> t = nil;
  while ((t == nil) && (c != nil)) {
    t = (id<RAREiTarget>) check_protocol_cast([((id<RAREiPlatformComponent>) nil_chk(c)) getClientPropertyWithNSString:[RAREiConstants RARE_TARGET_COMPONENT_PROPERTY]], @protocol(RAREiTarget));
    if (t == nil) {
      c = [c getParent];
    }
  }
  return t;
}

+ (void)fireActionEventWithRAREEventListenerList:(RAREEventListenerList *)listenerList
                             withRAREActionEvent:(RAREActionEvent *)ae {
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiActionListener)]) {
      [((id<RAREiActionListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiActionListener))) actionPerformedWithRAREActionEvent:ae];
    }
  }
}

+ (void)fireChangeEventWithRAREEventListenerList:(RAREEventListenerList *)listenerList
                             withRAREChangeEvent:(RAREChangeEvent *)e {
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiChangeListener)]) {
      [((id<RAREiChangeListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiChangeListener))) stateChangedWithJavaUtilEventObject:e];
    }
  }
}

+ (void)fireExpansionEventWithRAREEventListenerList:(RAREEventListenerList *)listenerList
                             withRAREExpansionEvent:(RAREExpansionEvent *)e
                                        withBoolean:(BOOL)expanded {
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiExpandedListener)]) {
      if (expanded) {
        [((id<RAREiExpandedListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiExpandedListener))) itemHasExpandedWithRAREExpansionEvent:e];
      }
      else {
        [((id<RAREiExpandedListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiExpandedListener))) itemHasCollapsedWithRAREExpansionEvent:e];
      }
    }
  }
}

+ (void)fireItemChangedWithRAREEventListenerList:(RAREEventListenerList *)listenerList
                         withRAREItemChangeEvent:(RAREItemChangeEvent *)e {
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiItemChangeListener)]) {
      [((id<RAREiItemChangeListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiItemChangeListener))) itemChangedWithRAREItemChangeEvent:e];
    }
  }
}

+ (void)firePopupCanceledEventWithRAREEventListenerList:(RAREEventListenerList *)listenerList
                                 withRAREExpansionEvent:(RAREExpansionEvent *)e {
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiPopupMenuListener)]) {
      [((id<RAREiPopupMenuListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiPopupMenuListener))) popupMenuCanceledWithRAREExpansionEvent:e];
    }
  }
}

+ (void)firePopupEventWithRAREEventListenerList:(RAREEventListenerList *)listenerList
                         withRAREExpansionEvent:(RAREExpansionEvent *)e
                                    withBoolean:(BOOL)popupingUp {
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiPopupMenuListener)]) {
      if (popupingUp) {
        [((id<RAREiPopupMenuListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiPopupMenuListener))) popupMenuWillBecomeVisibleWithRAREExpansionEvent:e];
      }
      else {
        [((id<RAREiPopupMenuListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiPopupMenuListener))) popupMenuWillBecomeInvisibleWithRAREExpansionEvent:e];
      }
    }
  }
}

+ (void)firePropertyChangeEventWithId:(id)source
            withRAREEventListenerList:(RAREEventListenerList *)listenerList
                         withNSString:(NSString *)name
                               withId:(id)oldValue
                               withId:(id)newValue {
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList)) getListenerList];
  JavaBeansPropertyChangeEvent *pce = nil;
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(JavaBeansPropertyChangeListener)]) {
      if (pce == nil) {
        pce = [[JavaBeansPropertyChangeEvent alloc] initWithId:source withNSString:name withId:oldValue withId:newValue];
      }
      [((id<JavaBeansPropertyChangeListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(JavaBeansPropertyChangeListener))) propertyChangeWithJavaBeansPropertyChangeEvent:pce];
    }
  }
}

+ (RAREWindowEvent *)fireWindowEventWithRAREEventListenerList:(RAREEventListenerList *)listenerList
                                                       withId:(id)source
                                 withRAREWindowEvent_TypeEnum:(RAREWindowEvent_TypeEnum *)type {
  RAREWindowEvent *e = nil;
  if (listenerList != nil) {
    IOSObjectArray *listeners = [listenerList getListenerList];
    for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
      if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiWindowListener)]) {
        if (e == nil) {
          e = [[RAREWindowEvent alloc] initWithId:source withRAREWindowEvent_TypeEnum:type];
        }
        [((id<RAREiWindowListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiWindowListener))) windowEventWithRAREWindowEvent:e];
        if ([((RAREWindowEvent *) nil_chk(e)) isConsumed]) {
          break;
        }
      }
    }
  }
  return e;
}

+ (NSString *)fixTargetWithInt:(int)type {
  switch (type) {
    case RARESPOTLink_CTarget__null:
    return [RAREiTarget TARGET_NULL];
    case RARESPOTLink_CTarget__self:
    return [RAREiTarget TARGET_SELF];
    case RARESPOTLink_CTarget__parent:
    return [RAREiTarget TARGET_PARENT];
    case RARESPOTLink_CTarget__new_popup:
    return [RAREiTarget TARGET_NEW_POPUP];
    case RARESPOTLink_CTarget__workspace:
    return [RAREiTarget TARGET_WORKSPACE];
    default:
    return [RAREiTarget TARGET_NEW_WINDOW];
  }
}

+ (NSString *)fixTargetWithNSString:(NSString *)target {
  if ([((NSString *) nil_chk(target)) sequenceLength] > 0) {
    unichar c = [target charAtWithInt:0];
    if ((c > 47) && (c < 58)) {
      return [RAREUtils fixTargetWithInt:[RAREUTSNumber intValueWithNSString:target]];
    }
  }
  return target;
}

+ (RAREUIRectangle *)getBoundsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)comp
                                         withJavaUtilMap:(id<JavaUtilMap>)options {
  RAREUIDimension *screenSize = [RAREScreenUtils getScreenSize];
  id o = [((id<JavaUtilMap>) nil_chk(options)) getWithId:@"left"];
  float left = -1;
  float top = -1;
  float height = -1;
  float width = -1;
  if ([o isKindOfClass:[NSString class]]) {
    left = [RAREScreenUtils toPlatformPixelWidthWithNSString:(NSString *) check_class_cast(o, [NSString class]) withRAREiPlatformComponent:comp withFloat:((RAREUIDimension *) nil_chk(screenSize))->width_];
  }
  else if ([o isKindOfClass:[NSNumber class]]) {
    left = [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue];
  }
  o = [options getWithId:@"top"];
  if ([o isKindOfClass:[NSString class]]) {
    top = [RAREScreenUtils toPlatformPixelHeightWithNSString:(NSString *) check_class_cast(o, [NSString class]) withRAREiPlatformComponent:comp withFloat:((RAREUIDimension *) nil_chk(screenSize))->height_];
  }
  else if ([o isKindOfClass:[NSNumber class]]) {
    top = [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue];
  }
  o = [options getWithId:@"height"];
  if ([o isKindOfClass:[NSString class]]) {
    height = [RAREScreenUtils toPlatformPixelHeightWithNSString:(NSString *) check_class_cast(o, [NSString class]) withRAREiPlatformComponent:comp withFloat:((RAREUIDimension *) nil_chk(screenSize))->height_];
  }
  else if ([o isKindOfClass:[NSNumber class]]) {
    height = [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue];
  }
  o = [options getWithId:@"width"];
  if ([o isKindOfClass:[NSString class]]) {
    width = [RAREScreenUtils toPlatformPixelWidthWithNSString:(NSString *) check_class_cast(o, [NSString class]) withRAREiPlatformComponent:comp withFloat:((RAREUIDimension *) nil_chk(screenSize))->width_];
  }
  else if ([o isKindOfClass:[NSNumber class]]) {
    width = [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue];
  }
  if (((RAREUIDimension *) nil_chk(screenSize))->width_ < width) {
    width = screenSize->width_ - 10;
  }
  if (screenSize->height_ < height) {
    height = screenSize->height_ - 50;
  }
  if ((height == -1) && (width != -1)) {
    height = screenSize->height_ - 50;
  }
  if ((width == -1) && (height != -1)) {
    width = screenSize->width_ - 10;
  }
  return [[RAREUIRectangle alloc] initWithFloat:top withFloat:left withFloat:width withFloat:height];
}

+ (NSString *)getDecimalSymbols {
  JavaTextDecimalFormatSymbols *s = [[JavaTextDecimalFormatSymbols alloc] init];
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  (void) [sb appendWithNSString:[s getCurrencySymbol]];
  (void) [sb appendWithChar:[s getDecimalSeparator]];
  (void) [sb appendWithChar:[s getGroupingSeparator]];
  (void) [sb appendWithChar:[s getMinusSign]];
  (void) [sb appendWithChar:[s getPercent]];
  return [sb description];
}

+ (int)getFlagsWithNSString:(NSString *)flags
            withJavaUtilMap:(id<JavaUtilMap>)map {
  int flag = 0;
  id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:flags withChar:'|' withBoolean:YES];
  int len = (list == nil) ? 0 : [list size];
  for (int i = 0; i < len; i++) {
    JavaLangInteger *n = [((id<JavaUtilMap>) nil_chk(map)) getWithId:[((id<JavaUtilList>) nil_chk(list)) getWithInt:i]];
    if (n != nil) {
      flag |= [n intValue];
    }
  }
  return flag;
}

+ (RARERenderableDataItem_HorizontalAlignEnum *)getHorizontalAlignmentWithInt:(int)alignment {
  switch (alignment) {
    case RARESPOTLabel_CTextHAlignment_left:
    return [RARERenderableDataItem_HorizontalAlignEnum LEFT];
    case RARESPOTLabel_CTextHAlignment_center:
    return [RARERenderableDataItem_HorizontalAlignEnum CENTER];
    case RARESPOTLabel_CTextHAlignment_right:
    return [RARERenderableDataItem_HorizontalAlignEnum RIGHT];
    case RARESPOTLabel_CTextHAlignment_leading:
    return [RARERenderableDataItem_HorizontalAlignEnum LEADING];
    case RARESPOTLabel_CTextHAlignment_trailing:
    return [RARERenderableDataItem_HorizontalAlignEnum TRAILING];
    default:
    return [RARERenderableDataItem_HorizontalAlignEnum AUTO];
  }
}

+ (RARERenderableDataItem_IconPositionEnum *)getIconPositionWithInt:(int)position {
  switch (position) {
    case RARESPOTLabel_CIconPosition_left:
    return [RARERenderableDataItem_IconPositionEnum LEFT];
    case RARESPOTLabel_CIconPosition_right:
    return [RARERenderableDataItem_IconPositionEnum RIGHT];
    case RARESPOTLabel_CIconPosition_top_left:
    return [RARERenderableDataItem_IconPositionEnum TOP_LEFT];
    case RARESPOTLabel_CIconPosition_top_right:
    return [RARERenderableDataItem_IconPositionEnum TOP_RIGHT];
    case RARESPOTLabel_CIconPosition_top_center:
    return [RARERenderableDataItem_IconPositionEnum TOP_CENTER];
    case RARESPOTLabel_CIconPosition_bottom_left:
    return [RARERenderableDataItem_IconPositionEnum BOTTOM_LEFT];
    case RARESPOTLabel_CIconPosition_bottom_right:
    return [RARERenderableDataItem_IconPositionEnum BOTTOM_RIGHT];
    case RARESPOTLabel_CIconPosition_bottom_center:
    return [RARERenderableDataItem_IconPositionEnum BOTTOM_CENTER];
    case RARESPOTLabel_CIconPosition_trailing:
    return [RARERenderableDataItem_IconPositionEnum TRAILING];
    case RARESPOTLabel_CIconPosition_leading:
    return [RARERenderableDataItem_IconPositionEnum LEADING];
    case RARESPOTLabel_CIconPosition_right_justified:
    return [RARERenderableDataItem_IconPositionEnum RIGHT_JUSTIFIED];
    default:
    return [RARERenderableDataItem_IconPositionEnum AUTO];
  }
}

+ (IOSObjectArray *)getIconsWithRAREiWidget:(id<RAREiWidget>)context
                               withNSString:(NSString *)s
                                    withInt:(int)max {
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return nil;
  }
  IOSObjectArray *icons = [IOSObjectArray arrayWithLength:max type:[IOSClass classWithProtocol:@protocol(RAREiPlatformIcon)]];
  id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:s withChar:',' withBoolean:YES];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  (void) IOSObjectArray_Set(icons, 0, (len > 0) ? [((id<RAREiWidget>) nil_chk(context)) getIconWithNSString:[list getWithInt:0] withNSString:nil] : nil);
  (void) IOSObjectArray_Set(icons, 1, (len > 1) ? [((id<RAREiWidget>) nil_chk(context)) getIconWithNSString:[list getWithInt:1] withNSString:nil] : nil);
  (void) IOSObjectArray_Set(icons, 2, (len > 2) ? [((id<RAREiWidget>) nil_chk(context)) getIconWithNSString:[list getWithInt:2] withNSString:nil] : nil);
  (void) IOSObjectArray_Set(icons, 3, (len > 3) ? [((id<RAREiWidget>) nil_chk(context)) getIconWithNSString:[list getWithInt:3] withNSString:nil] : nil);
  return icons;
}

+ (RAREUIInsets *)getInsetsWithNSString:(NSString *)s {
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return nil;
  }
  id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:s withChar:',' withBoolean:YES];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  int t = (len > 0) ? [RAREScreenUtils platformPixelsWithFloat:[RAREUTSNumber floatValueWithNSString:[list getWithInt:0]]] : 0;
  int r = (len > 1) ? [RAREScreenUtils platformPixelsWithFloat:[RAREUTSNumber floatValueWithNSString:[list getWithInt:1]]] : 0;
  int b = (len > 2) ? [RAREScreenUtils platformPixelsWithFloat:[RAREUTSNumber floatValueWithNSString:[list getWithInt:2]]] : 0;
  int l = (len > 3) ? [RAREScreenUtils platformPixelsWithFloat:[RAREUTSNumber floatValueWithNSString:[list getWithInt:3]]] : 0;
  return [[RAREUIInsets alloc] initWithInt:t withInt:r withInt:b withInt:l];
}

+ (id<JavaUtilList>)getItemsWithId:(id)o
                   withRAREaWidget:(RAREaWidget *)w
                       withBoolean:(BOOL)copy_ {
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[RARERenderableDataItem class]]] isInstance:o]) {
    IOSObjectArray *a = (IOSObjectArray *) check_class_cast(o, [IOSObjectArray class]);
    if (copy_) {
      a = [RARERenderableDataItem deepCopyWithRARERenderableDataItemArray:a];
    }
    return [JavaUtilArrays asListWithNSObjectArray:a];
  }
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:o]) {
    IOSObjectArray *a = (IOSObjectArray *) check_class_cast(o, [IOSObjectArray class]);
    int len = (int) [((IOSObjectArray *) nil_chk(a)) count];
    RAREUTFilterableList *list = [[RAREUTFilterableList alloc] initWithInt:len];
    RARERenderableDataItem *di;
    for (int i = 0; i < len; i++) {
      o = IOSObjectArray_Get(a, i);
      if ([o isKindOfClass:[RARERenderableDataItem class]]) {
        di = ((RARERenderableDataItem *) check_class_cast(o, [RARERenderableDataItem class]));
        if (copy_) {
          di = [((RARERenderableDataItem *) nil_chk(di)) deepCopy];
        }
      }
      else {
        di = [((RAREaWidget *) nil_chk(w)) createItemWithId:o];
      }
      [list addWithId:di];
    }
  }
  if (copy_ && ([o isKindOfClass:[RARERenderableDataItem class]])) {
    o = [((RARERenderableDataItem *) check_class_cast(o, [RARERenderableDataItem class])) deepCopy];
  }
  return [JavaUtilCollections singletonListWithId:[((RAREaWidget *) nil_chk(w)) createItemWithId:o]];
}

+ (RAREJavaURLConnection *)getLocaleSpecificConnectionWithNSString:(NSString *)urlWithoutExtension
                                                      withNSString:(NSString *)ext {
  IOSObjectArray *lp = [RAREUTHelper getLocalResourcePostfixWithJavaUtilLocale:[JavaUtilLocale getDefault]];
  if ((ext != nil) && ([ext sequenceLength] == 0)) {
    ext = nil;
  }
  if ((lp != nil) && ((int) [lp count] > 0)) {
    JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithInt:[((NSString *) nil_chk(urlWithoutExtension)) sequenceLength] + 10];
    (void) [sb appendWithNSString:urlWithoutExtension];
    int sblen = [sb sequenceLength];
    for (int i = 0; i < (int) [lp count]; i++) {
      [sb setLengthWithInt:sblen];
      (void) [sb appendWithNSString:IOSObjectArray_Get(lp, i)];
      if (ext != nil) {
        (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'.'])) appendWithNSString:ext];
      }
      @try {
        RAREJavaURLConnection *conn = [[RAREJavaURLConnection alloc] initWithJavaNetURLConnection:[((JavaNetURL *) [[JavaNetURL alloc] initWithNSString:[sb description]]) openConnection]];
        return conn;
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  if (ext != nil) {
    urlWithoutExtension = [NSString stringWithFormat:@"%@.%@", urlWithoutExtension, ext];
  }
  return [[RAREJavaURLConnection alloc] initWithJavaNetURLConnection:[((JavaNetURL *) [[JavaNetURL alloc] initWithNSString:urlWithoutExtension]) openConnection]];
}

+ (JavaIoFileInputStream *)getLocaleSpecificFileInputStreamWithNSString:(NSString *)fileWithoutExtension
                                                           withNSString:(NSString *)ext {
  IOSObjectArray *lp = [RAREUTHelper getLocalResourcePostfixWithJavaUtilLocale:[JavaUtilLocale getDefault]];
  if ((ext != nil) && ([ext sequenceLength] == 0)) {
    ext = nil;
  }
  if ((lp != nil) && ((int) [lp count] > 0)) {
    JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithInt:[((NSString *) nil_chk(fileWithoutExtension)) sequenceLength] + 10];
    (void) [sb appendWithNSString:fileWithoutExtension];
    int sblen = [sb sequenceLength];
    for (int i = 0; i < (int) [lp count]; i++) {
      [sb setLengthWithInt:sblen];
      (void) [sb appendWithNSString:IOSObjectArray_Get(lp, i)];
      if (ext != nil) {
        (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'.'])) appendWithNSString:ext];
      }
      @try {
        JavaIoFile *f = [[JavaIoFile alloc] initWithNSString:[sb description]];
        if ([f exists]) {
          JavaIoFileInputStream *fin = [[JavaIoFileInputStream alloc] initWithJavaIoFile:f];
          return fin;
        }
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  if (ext != nil) {
    fileWithoutExtension = [NSString stringWithFormat:@"%@.%@", fileWithoutExtension, ext];
  }
  return [[JavaIoFileInputStream alloc] initWithNSString:fileWithoutExtension];
}

+ (RAREUIInsets *)getMarginWithNSString:(NSString *)s {
  RAREUIInsets *in = [RAREUtils getInsetsWithNSString:s];
  if (in != nil) {
    float l = in->left_;
    in->left_ = in->right_;
    in->left_ = l;
  }
  return in;
}

+ (RAREUIPoint *)getPointWithNSString:(NSString *)s {
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return nil;
  }
  int n = [((NSString *) nil_chk(s)) indexOf:','];
  RAREUIPoint *p = [[RAREUIPoint alloc] init];
  p->x_ = [RAREUTSNumber intValueWithNSString:s];
  if (n != -1) {
    p->y_ = [RAREUTSNumber intValueWithNSString:[s substring:n + 1]];
  }
  return p;
}

+ (void)getProposedBoundsForLocationWithRAREUIRectangle:(RAREUIRectangle *)r
                                                withInt:(int)x
                                                withInt:(int)y
                                    withRAREUIDimension:(RAREUIDimension *)size {
  RAREUIDimension *ss = [RAREScreenUtils getUsableScreenSize];
  ((RAREUIRectangle *) nil_chk(r))->x_ = x;
  r->y_ = y;
  r->width_ = ((RAREUIDimension *) nil_chk(size))->width_;
  r->height_ = size->height_;
  size->width_ = [JavaLangMath minWithFloat:((RAREUIDimension *) nil_chk(ss))->width_ withFloat:size->width_];
  size->height_ = [JavaLangMath minWithFloat:ss->height_ withFloat:size->height_];
  if (x + size->width_ > ss->width_) {
    r->x_ = ss->width_ - size->width_;
  }
  if (y + size->height_ > ss->height_) {
    r->y_ = ss->height_ - size->height_;
  }
}

+ (void)getProposedPopupBoundsWithRAREUIRectangle:(RAREUIRectangle *)r
                       withRAREiPlatformComponent:(id<RAREiPlatformComponent>)owner
                              withRAREUIDimension:(RAREUIDimension *)contentSize
                                        withFloat:(float)popupFraction
   withRARERenderableDataItem_HorizontalAlignEnum:(RARERenderableDataItem_HorizontalAlignEnum *)contentAlignment
                          withRAREiPlatformBorder:(id<RAREiPlatformBorder>)popupBorder
                                      withBoolean:(BOOL)scrollable {
  RAREUIDimension *ss;
  RAREUIPoint *loc;
  if ([((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBooleanWithNSString:@"Rare.Popup.restrictToWindow" withBoolean:NO]) {
    RAREWindowViewer *w = [RAREPlatform getWindowViewer];
    loc = [((id<RAREiPlatformComponent>) nil_chk(owner)) getLocationOnScreen];
    ((RAREUIPoint *) nil_chk(loc))->x_ -= [((RAREWindowViewer *) nil_chk(w)) getScreenX];
    loc->y_ -= [w getScreenY];
    ss = [RAREScreenUtils getUsableScreenSizeWithRAREiPlatformComponent:owner];
    float ww = ((RAREUIDimension *) nil_chk(ss))->width_;
    float hh = ss->height_;
    ss = [w getSize];
    float tw = [w getScreenX] + ((RAREUIDimension *) nil_chk(ss))->width_;
    float th = [w getScreenY] + ss->height_;
    if (tw > ww) {
      ss->width_ -= (tw - ww);
    }
    if (th > hh) {
      ss->height_ -= (th - hh);
    }
  }
  else {
    ss = [RAREScreenUtils getUsableScreenSizeWithRAREiPlatformComponent:owner];
    loc = [((id<RAREiPlatformComponent>) nil_chk(owner)) getLocationOnScreen];
  }
  RAREUIDimension *size = [((id<RAREiPlatformComponent>) nil_chk(owner)) getOrientedSizeWithRAREUIDimension:nil];
  float ownerWidth = ((RAREUIDimension *) nil_chk(size))->width_;
  float ownerHeight = size->height_;
  float ownerY = ((RAREUIPoint *) nil_chk(loc))->y_;
  float ownerX = loc->x_;
  float width = ownerWidth;
  float height = ownerHeight * 2;
  ((RAREUIRectangle *) nil_chk(r))->x_ = 0;
  r->y_ = 0;
  float n = ((RAREUIDimension *) nil_chk(ss))->height_ - ownerHeight;
  if (n > (ss->height_ * 0.5f)) {
    ss->height_ = n;
  }
  if (popupFraction != 0) {
    width = (int) (ownerWidth * popupFraction);
    if (width < 1) {
      width = ownerWidth;
    }
  }
  else if (width < ownerWidth) {
    width = ownerWidth;
  }
  RAREUIInsets *in = (popupBorder == nil) ? RAREUtils_EMPTY_INSETS_ : [popupBorder getBorderInsetsWithRAREUIInsets:(RAREUIInsets *) check_class_cast(nil, [RAREUIInsets class])];
  if (contentSize != nil) {
    size = contentSize;
    size->width_ += in->left_ + in->right_;
    size->height_ += in->top_ + in->bottom_;
    size->width_ = [JavaLangMath minWithFloat:ss->width_ withFloat:size->width_];
    size->height_ = [JavaLangMath minWithFloat:ss->height_ withFloat:size->height_];
    switch ([contentAlignment ordinal]) {
      case RARERenderableDataItem_HorizontalAlign_LEADING:
      case RARERenderableDataItem_HorizontalAlign_LEFT:
      r->x_ = 0;
      width = size->width_;
      break;
      case RARERenderableDataItem_HorizontalAlign_RIGHT:
      case RARERenderableDataItem_HorizontalAlign_TRAILING:
      if (size->width_ < width) {
        r->x_ = width - size->width_;
        width = size->width_;
      }
      break;
      case RARERenderableDataItem_HorizontalAlign_CENTER:
      if (size->width_ < width) {
        r->x_ = (width - size->width_) / 2;
        width = size->width_;
      }
      break;
      default:
      if ((width < size->width_) && (popupFraction == 0)) {
        width = size->width_;
      }
      break;
    }
    height = size->height_;
  }
  if (width > ss->width_) {
    width = ss->width_;
  }
  if (height > ss->height_) {
    height = ss->height_;
  }
  if (scrollable) {
    if (height + ownerHeight + ownerY > ss->height_) {
      float bh = ss->height_ - ownerY - ownerHeight;
      if (bh > ownerY) {
        height = bh;
      }
      else if (height > bh) {
        height = [JavaLangMath minWithFloat:height withFloat:ownerY - [RAREScreenUtils PLATFORM_PIXELS_10]];
      }
    }
  }
  if (popupFraction != 0) {
    r->x_ = (ownerWidth - width) / 2;
  }
  else if (width > ownerWidth) {
    if (width + ownerX > ss->width_) {
      r->x_ = -(width - ownerWidth);
      if (r->x_ + ownerX < 0) {
        r->x_ = -ownerX;
      }
      else if (width > (ownerX + ownerWidth)) {
        r->x_ += (width - ownerX) + (int) ((ss->width_ - width) / 2) + [RAREScreenUtils PLATFORM_PIXELS_1];
      }
    }
  }
  if ((height + ownerHeight + ownerY) > ss->height_) {
    r->y_ = -(height + ownerHeight);
    if (height > ownerY) {
      r->y_ += (height - ownerY) + (ss->height_ - height) / 2;
      if (r->x_ - ownerWidth >= 0) {
        r->x_ += ownerWidth;
      }
      else if (r->x_ + ownerWidth + width < ss->width_) {
        if (r->x_ < 0) {
          r->x_ -= ownerWidth;
          r->x_ += [RAREScreenUtils PLATFORM_PIXELS_1];
        }
        else {
          r->x_ += ownerWidth;
        }
      }
    }
  }
  r->x_ = (float) [JavaLangMath roundWithFloat:r->x_];
  r->y_ = (float) [JavaLangMath roundWithFloat:r->y_];
  r->width_ = (float) [JavaLangMath ceilWithDouble:width];
  r->height_ = (float) [JavaLangMath ceilWithDouble:height];
}

+ (RAREUIRectangle *)getRectangleWithNSString:(NSString *)s {
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return nil;
  }
  id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:s withChar:',' withBoolean:YES];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  RAREUIRectangle *r = [[RAREUIRectangle alloc] init];
  r->x_ = (len > 0) ? [RAREUTSNumber intValueWithNSString:[list getWithInt:0]] : 0;
  r->y_ = (len > 1) ? [RAREUTSNumber intValueWithNSString:[list getWithInt:1]] : 0;
  r->width_ = (len > 2) ? [RAREUTSNumber intValueWithNSString:[list getWithInt:2]] : 0;
  r->height_ = (len > 3) ? [RAREUTSNumber intValueWithNSString:[list getWithInt:3]] : 0;
  return r;
}

+ (RARERenderTypeEnum *)getRenderTypeWithInt:(int)halign
                                     withInt:(int)valign {
  RARERenderTypeEnum *type = nil;
  switch (valign) {
    case RARESPOTWidget_CVerticalAlign_top:
    switch (halign) {
      case RARESPOTWidget_CHorizontalAlign_center:
      type = [RARERenderTypeEnum UPPER_MIDDLE];
      break;
      case RARESPOTWidget_CHorizontalAlign_left:
      type = [RARERenderTypeEnum UPPER_LEFT];
      break;
      case RARESPOTWidget_CHorizontalAlign_right:
      type = [RARERenderTypeEnum UPPER_RIGHT];
      break;
      case RARESPOTWidget_CHorizontalAlign_full:
      type = [RARERenderTypeEnum STRETCH_WIDTH];
      break;
    }
    break;
    case RARESPOTWidget_CVerticalAlign_auto:
    case RARESPOTWidget_CVerticalAlign_center:
    switch (halign) {
      case RARESPOTWidget_CHorizontalAlign_center:
      type = [RARERenderTypeEnum CENTERED];
      break;
      case RARESPOTWidget_CHorizontalAlign_left:
      type = [RARERenderTypeEnum LEFT_MIDDLE];
      break;
      case RARESPOTWidget_CHorizontalAlign_right:
      type = [RARERenderTypeEnum RIGHT_MIDDLE];
      break;
      case RARESPOTWidget_CHorizontalAlign_full:
      type = [RARERenderTypeEnum STRETCH_WIDTH_MIDDLE];
    }
    break;
    case RARESPOTWidget_CVerticalAlign_bottom:
    switch (halign) {
      case RARESPOTWidget_CHorizontalAlign_center:
      type = [RARERenderTypeEnum LOWER_MIDDLE];
      break;
      case RARESPOTWidget_CHorizontalAlign_left:
      type = [RARERenderTypeEnum LOWER_LEFT];
      break;
      case RARESPOTWidget_CHorizontalAlign_right:
      type = [RARERenderTypeEnum LOWER_RIGHT];
      break;
      case RARESPOTWidget_CHorizontalAlign_full:
      type = [RARERenderTypeEnum STRETCH_WIDTH];
      break;
    }
    break;
    case RARESPOTWidget_CVerticalAlign_full:
    switch (halign) {
      case RARESPOTWidget_CHorizontalAlign_left:
      type = [RARERenderTypeEnum STRETCH_HEIGHT];
      break;
      case RARESPOTWidget_CHorizontalAlign_full:
      type = [RARERenderTypeEnum STRETCHED];
      break;
      case RARESPOTWidget_CHorizontalAlign_center:
      type = [RARERenderTypeEnum STRETCH_HEIGHT_MIDDLE];
      break;
    }
  }
  return type;
}

+ (IOSObjectArray *)getRenderTypesWithNSString:(NSString *)s
                                       withInt:(int)max {
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return nil;
  }
  IOSObjectArray *rts = [IOSObjectArray arrayWithLength:max type:[IOSClass classWithClass:[RARERenderTypeEnum class]]];
  id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:s withChar:',' withBoolean:YES];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  (void) IOSObjectArray_Set(rts, 0, (len > 0) ? [RARERenderTypeEnum valueOfExWithNSString:[list getWithInt:0]] : nil);
  (void) IOSObjectArray_Set(rts, 1, (len > 1) ? [RARERenderTypeEnum valueOfExWithNSString:[list getWithInt:1]] : nil);
  (void) IOSObjectArray_Set(rts, 2, (len > 2) ? [RARERenderTypeEnum valueOfExWithNSString:[list getWithInt:2]] : nil);
  (void) IOSObjectArray_Set(rts, 3, (len > 3) ? [RARERenderTypeEnum valueOfExWithNSString:[list getWithInt:3]] : nil);
  return rts;
}

+ (void)getSimpleSizeWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                               withRAREUIFont:(RAREUIFont *)font
                          withRAREUIDimension:(RAREUIDimension *)size {
  int clen = 0;
  int mclen = 0;
  if (cs == nil) {
    cs = @"";
  }
  int ln = 0;
  int len = [((id<JavaLangCharSequence>) nil_chk(cs)) sequenceLength];
  int pos = 0;
  RAREUIFontMetrics *fm = [RAREUIFontMetrics getMetricsWithRAREUIFont:font];
  for (int i = 0; i < len; i++) {
    JavaLangCharacter *ca = [JavaLangCharacter valueOfWithChar:[cs charAtWithInt:i]];
    if ([ca charValue] == 0x000d) {
      continue;
    }
    if ([ca charValue] == 0x000a) {
      NSString *s = [((id<JavaLangCharSequence>) nil_chk([cs subSequenceFrom:pos to:i])) sequenceDescription];
      mclen = [JavaLangMath maxWithInt:[((RAREUIFontMetrics *) nil_chk(fm)) stringWidthWithNSString:s] withInt:mclen];
      clen = 0;
      pos = i;
    }
    else {
      if (clen == 0) {
        pos = i;
        ln++;
      }
      clen++;
    }
  }
  if (ln == 0) {
    ln = 1;
  }
  if ((clen > 0) && (pos < len)) {
    NSString *s = [((id<JavaLangCharSequence>) nil_chk([cs subSequenceFrom:pos to:len])) sequenceDescription];
    mclen = [JavaLangMath maxWithInt:[((RAREUIFontMetrics *) nil_chk(fm)) stringWidthWithNSString:s] withInt:mclen];
  }
  ((RAREUIDimension *) nil_chk(size))->width_ = mclen + 4;
  size->height_ = ln + (int) [RAREFontUtils getFontHeightWithRAREUIFont:font withBoolean:YES];
}

+ (RAREUIDimension *)getSizeWithNSString:(NSString *)s {
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return nil;
  }
  IOSCharArray *a = [((NSString *) nil_chk(s)) toCharArray];
  int len = (int) [((IOSCharArray *) nil_chk(a)) count];
  int x = [RAREUTSNumber intValueWithCharArray:a withInt:0 withInt:len withBoolean:NO];
  int y = 0;
  if (x < 0) {
    x = 0;
  }
  int i = [RAREUTCharArray indexOfWithCharArray:a withInt:0 withInt:len withChar:'x' withInt:0];
  if (i == -1) {
    i = [RAREUTCharArray indexOfWithCharArray:a withInt:0 withInt:len withChar:',' withInt:0];
  }
  if (i != -1) {
    i++;
    while ((i < len) && (IOSCharArray_Get(a, i) < 33)) {
      i++;
    }
    y = [RAREUTSNumber intValueWithCharArray:a withInt:i withInt:len - (i) withBoolean:NO];
  }
  return [[RAREUIDimension alloc] initWithFloat:[RAREScreenUtils platformPixelsWithFloat:x] withFloat:[RAREScreenUtils platformPixelsWithFloat:y]];
}

+ (RAREUIImage *)getSliceWithRAREUIImage:(RAREUIImage *)image
                                 withInt:(int)pos
                                 withInt:(int)size {
  int width = [((RAREUIImage *) nil_chk(image)) getWidth];
  int height = [image getHeight];
  int h = size;
  int w = size;
  int x = 0;
  int y = 0;
  if (height > width) {
    w = width;
    y = pos * size;
  }
  else {
    h = height;
    x = pos * size;
  }
  return [image getSliceWithInt:x withInt:y withInt:w withInt:h];
}

+ (RAREUIImage *)getSliceWithRAREUIImage:(RAREUIImage *)image
                     withRAREUIRectangle:(RAREUIRectangle *)rect {
  if ((((RAREUIRectangle *) nil_chk(rect))->width_ == 0) && (rect->height_ == 0)) {
    return [RAREUtils getSliceWithRAREUIImage:image withInt:(int) rect->x_ withInt:(int) rect->y_];
  }
  else {
    return [((RAREUIImage *) nil_chk(image)) getSubimageWithInt:(int) rect->x_ withInt:(int) rect->y_ withInt:(int) rect->width_ withInt:(int) rect->height_];
  }
}

+ (RAREiPaintedButton_ButtonStateEnum *)getStateWithBoolean:(BOOL)enabled
                                                withBoolean:(BOOL)pressed
                                                withBoolean:(BOOL)selected
                                                withBoolean:(BOOL)mouseOver {
  if (!enabled) {
    return selected ? [RAREiPaintedButton_ButtonStateEnum DISABLED_SELECTED] : [RAREiPaintedButton_ButtonStateEnum DISABLED];
  }
  if (selected) {
    return pressed ? [RAREiPaintedButton_ButtonStateEnum PRESSED_SELECTED] : [RAREiPaintedButton_ButtonStateEnum SELECTED];
  }
  if (pressed) {
    return [RAREiPaintedButton_ButtonStateEnum PRESSED];
  }
  if (mouseOver) {
    return [RAREiPaintedButton_ButtonStateEnum ROLLOVER];
  }
  return [RAREiPaintedButton_ButtonStateEnum DEFAULT];
}

+ (NSString *)getTargetWithRARESPOTLink:(RARESPOTLink *)link {
  NSString *s = [((SPOTPrintableString *) nil_chk(((RARESPOTLink *) nil_chk(link))->regionName_)) getValue];
  if (s != nil) {
    s = [s trim];
  }
  if ((s != nil) && ([s sequenceLength] > 0)) {
    return s;
  }
  switch ([((RARESPOTLink_CTarget *) nil_chk(link->target_)) intValue]) {
    case RARESPOTLink_CTarget__null:
    return [RAREiTarget TARGET_NULL];
    case RARESPOTLink_CTarget__self:
    return [RAREiTarget TARGET_SELF];
    case RARESPOTLink_CTarget__parent:
    return [RAREiTarget TARGET_PARENT];
    case RARESPOTLink_CTarget__new_window:
    return [RAREiTarget TARGET_NEW_WINDOW];
    case RARESPOTLink_CTarget__new_popup:
    return [RAREiTarget TARGET_NEW_POPUP];
    case RARESPOTLink_CTarget__workspace:
    return [RAREiTarget TARGET_WORKSPACE];
    default:
    return [link->regionName_ getValue];
  }
}

+ (id<RAREiTarget>)getTargetForComponentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  return (id<RAREiTarget>) check_protocol_cast([((id<RAREiPlatformComponent>) nil_chk(c)) getClientPropertyWithNSString:[RAREiConstants RARE_TARGET_COMPONENT_PROPERTY]], @protocol(RAREiTarget));
}

+ (RARERenderableDataItem_VerticalAlignEnum *)getVerticalAlignmentWithInt:(int)alignment {
  switch (alignment) {
    case RARESPOTLabel_CTextVAlignment_top:
    return [RARERenderableDataItem_VerticalAlignEnum TOP];
    case RARESPOTLabel_CTextVAlignment_center:
    return [RARERenderableDataItem_VerticalAlignEnum CENTER];
    case RARESPOTLabel_CTextVAlignment_bottom:
    return [RARERenderableDataItem_VerticalAlignEnum BOTTOM];
    default:
    return [RARERenderableDataItem_VerticalAlignEnum AUTO];
  }
}

+ (RARESPOTViewer *)getViewerConfigurationWithRARESPOTWidget:(RARESPOTWidget *)wc {
  if (wc == nil) {
    return nil;
  }
  else {
    if ([wc isKindOfClass:[RARESPOTViewer class]]) {
      return (RARESPOTViewer *) check_class_cast(wc, [RARESPOTViewer class]);
    }
    RARESPOTWidgetPane *wcfg = [[RARESPOTWidgetPane alloc] init];
    [((SPOTAny *) nil_chk(wcfg->widget_)) setValueWithISPOTElement:wc];
    return wcfg;
  }
}

+ (id<RAREiWidget>)getWidgetWithRAREiWidget:(id<RAREiWidget>)context
                         withRARESPOTWidget:(RARESPOTWidget *)wc {
  if (wc == nil) {
    return nil;
  }
  return [RAREaContainer createWidgetWithRAREiContainer:[((id<RAREiWidget>) nil_chk(context)) getContainerViewer] withRARESPOTWidget:wc];
}

+ (int)getWidgetCountWithRAREiTabPaneViewer:(id<RAREiTabPaneViewer>)tpv {
  int len = [((id<RAREiTabPaneViewer>) nil_chk(tpv)) getTabCount];
  int count = 0;
  for (int i = 0; i < len; i++) {
    if ([((id<RAREiTarget>) nil_chk([((id<RAREiTabDocument>) nil_chk([tpv getTabDocumentWithInt:i])) getTarget])) getViewer] != nil) {
      count++;
    }
  }
  return count;
}

+ (BOOL)isInValidSetWithNSString:(NSString *)validSet
        withJavaLangCharSequence:(id<JavaLangCharSequence>)value
                     withBoolean:(BOOL)checkDigit {
  if ((validSet != nil) && (value != nil)) {
    int len = [value sequenceLength];
    unichar c;
    for (int i = 0; i < len; i++) {
      c = [value charAtWithInt:i];
      if (checkDigit && [JavaLangCharacter isDigitWithChar:c]) {
        return YES;
      }
      if ([validSet indexOf:c] == -1) {
        return NO;
      }
    }
  }
  return YES;
}

+ (BOOL)isValidBaseURLWithJavaNetURL:(JavaNetURL *)url {
  if (url == nil) {
    return NO;
  }
  NSString *protocol = [((JavaNetURL *) nil_chk(url)) getHost];
  if ([((NSString *) nil_chk([RAREiConstants INLINE_PROTOCOL_HOSTSTRING])) isEqual:protocol] || [((NSString *) nil_chk([RAREiConstants SCRIPT_PROTOCOL_HOSTSTRING])) isEqual:protocol] || [((NSString *) nil_chk([RAREiConstants COLLECTION_PROTOCOL_HOSTSTRING])) isEqual:protocol]) {
    return NO;
  }
  protocol = [url getProtocol];
  return ![((NSString *) nil_chk([RAREiConstants INLINE_PROTOCOL_STRING])) isEqual:protocol] && ![((NSString *) nil_chk([RAREiConstants SCRIPT_PROTOCOL_STRING])) isEqual:protocol] && ![((NSString *) nil_chk([RAREiConstants COLLECTION_PROTOCOL_STRING])) isEqual:protocol];
}

+ (NSString *)makeInvalidRangeStringWithInt:(int)min
                                    withInt:(int)max {
  if ((min == -1) && (max == -1)) {
    return nil;
  }
  NSString *s = nil;
  if (min == -1) {
    s = [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.fieldValueToSmall"];
    s = [RAREUTHelper expandStringWithNSString:s withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfInt:min] } count:1 type:[IOSClass classWithClass:[NSString class]]]];
  }
  else if (max == -1) {
    s = [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.fieldValueToBig"];
    s = [RAREUTHelper expandStringWithNSString:s withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfInt:max] } count:1 type:[IOSClass classWithClass:[NSString class]]]];
  }
  else {
    s = [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.fieldValueNotInRange"];
    s = [RAREUTHelper expandStringWithNSString:s withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfInt:min], [NSString valueOfInt:max] } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  }
  s = [NSString stringWithFormat:@"%@%@", s, [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.fieldInvalidCharsSufffix"]];
  return s;
}

+ (NSString *)makeWidgetNameWithRARESPOTWidget:(RARESPOTWidget *)cfg
                               withRAREiWidget:(id<RAREiWidget>)w {
  NSString *s = [[((RARESPOTWidget *) nil_chk(cfg)) getClass] getName];
  int n = [((NSString *) nil_chk(s)) lastIndexOf:'.'];
  if (n != -1) {
    s = [s substring:n + 1];
  }
  return [NSString stringWithFormat:@"a%@__%d", s, [JavaLangSystem identityHashCodeWithId:w]];
}

+ (id)nameValuePairGetValueWithRAREiWidget:(id<RAREiWidget>)context
                 withRARESPOTNameValuePair:(RARESPOTNameValuePair *)pair {
  id ctx;
  id<RAREiDataConverter> cvt;
  NSString *cc;
  NSString *s;
  NSString *type;
  id o;
  o = s = [((RARESPOTNameValuePair *) nil_chk(pair)) getValue];
  cc = [pair spot_getAttributeWithNSString:@"converterClass"];
  type = [pair spot_getAttributeWithNSString:@"type"];
  if (((cc != nil) && ([cc sequenceLength] > 0)) || ((type != nil) && ([type sequenceLength] > 0))) {
    @try {
      cvt = [RAREaConverter createConverterWithRAREiWidget:context withNSString:cc withInt:[RARERenderableDataItem typeOfWithNSString:s]];
      if (cvt != nil) {
        cc = [pair spot_getAttributeWithNSString:@"converterContext"];
        ctx = nil;
        if ((cc != nil) && ([cc sequenceLength] > 0)) {
          ctx = [cvt createContextWithRAREiWidget:context withNSString:cc];
        }
        o = [cvt objectFromStringWithRAREiWidget:context withNSString:s withId:ctx];
      }
    }
    @catch (JavaLangException *ex) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:ex];
    }
  }
  return o;
}

+ (id<JavaUtilMap>)nameValuePairSetToMapWithRAREiWidget:(id<RAREiWidget>)context
                                            withSPOTSet:(SPOTSet *)set
                                        withJavaUtilMap:(id<JavaUtilMap>)map {
  if (context == nil) {
    context = [RAREPlatform getContextRootViewer];
  }
  int len = [((SPOTSet *) nil_chk(set)) getCount];
  if (len == 0) {
    return nil;
  }
  if (map == nil) {
    map = [[JavaUtilHashMap alloc] init];
  }
  RARESPOTNameValuePair *p;
  id ctx;
  id<RAREiDataConverter> cvt;
  NSString *cc;
  NSString *s;
  NSString *type;
  id o;
  for (int i = 0; i < len; i++) {
    p = (RARESPOTNameValuePair *) check_class_cast([set getWithInt:i], [RARESPOTNameValuePair class]);
    o = s = [((RARESPOTNameValuePair *) nil_chk(p)) getValue];
    cc = [p spot_getAttributeWithNSString:@"converterClass"];
    type = [p spot_getAttributeWithNSString:@"type"];
    if (((cc != nil) && ([cc sequenceLength] > 0)) || ((type != nil) && ([type sequenceLength] > 0))) {
      @try {
        cvt = [RAREaConverter createConverterWithRAREiWidget:context withNSString:cc withInt:[RARERenderableDataItem typeOfWithNSString:s]];
        if (cvt != nil) {
          cc = [p spot_getAttributeWithNSString:@"converterContext"];
          ctx = nil;
          if ((cc != nil) && ([cc sequenceLength] > 0)) {
            ctx = [cvt createContextWithRAREiWidget:context withNSString:cc];
          }
          o = [cvt objectFromStringWithRAREiWidget:context withNSString:s withId:ctx];
        }
      }
      @catch (JavaLangException *ex) {
        [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:ex];
      }
    }
    (void) [((id<JavaUtilMap>) nil_chk(map)) putWithId:[p getName] withId:o];
  }
  return map;
}

+ (void)paintCenteredIconWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon
                                         withFloat:(float)x
                                         withFloat:(float)y
                                         withFloat:(float)width
                                         withFloat:(float)height {
  int iw = [((id<RAREiPlatformIcon>) nil_chk(icon)) getIconWidth];
  int ih = [icon getIconHeight];
  x += (width - iw) / 2;
  y += (height - ih) / 2;
  [icon paintWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:width withFloat:height];
}

+ (id<JavaUtilMap>)resolveOptionsWithRAREiWidget:(id<RAREiWidget>)widget
                                 withJavaUtilMap:(id<JavaUtilMap>)origOptions
                                 withJavaUtilMap:(id<JavaUtilMap>)resolvedOptions {
  if (origOptions == nil) {
    return resolvedOptions;
  }
  if (resolvedOptions == nil) {
    resolvedOptions = [[JavaUtilHashMap alloc] initWithInt:[((id<JavaUtilMap>) nil_chk(origOptions)) size]];
  }
  id<JavaUtilMap> map = resolvedOptions;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(origOptions)) entrySet])) iterator];
  id<JavaUtilMap_Entry> e;
  NSString *value;
  NSString *nv;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    e = [it next];
    value = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
    if ((value == nil) || ([value sequenceLength] == 0)) {
      continue;
    }
    nv = [((id<RAREiWidget>) nil_chk(widget)) expandStringWithNSString:value withBoolean:NO];
    (void) [((id<JavaUtilMap>) nil_chk(map)) putWithId:[((NSString *) nil_chk([e getKey])) lowercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]] withId:nv];
  }
  return map;
}

+ (id)resolveUIPropertyWithRAREiWidget:(id<RAREiWidget>)context
                          withNSString:(NSString *)name
                          withNSString:(NSString *)propvalue {
  id value = propvalue;
  id<RAREiPlatformAppContext> app = (context == nil) ? [RAREPlatform getAppContext] : [context getAppContext];
  @try {
    do {
      if (propvalue == nil) {
        break;
      }
      RAREUTCharScanner *scanner = [((JavaLangThreadLocal *) nil_chk(RAREUtils_perThreadScanner_)) get];
      [((RAREUTCharScanner *) nil_chk(scanner)) resetWithNSString:propvalue];
      (void) [scanner unquoteWithBoolean:YES];
      value = nil;
      IOSIntArray *tok = [scanner findTokenWithChar:'|'];
      if (tok == nil) {
        value = [scanner getLeftOver];
        break;
      }
      (void) [scanner toLowerCaseWithIntArray:tok];
      NSString *type = [scanner getTokenWithIntArray:tok];
      (void) [((RAREUTCharScanner *) nil_chk([scanner unquoteWithBoolean:YES])) trim];
      propvalue = [scanner getLeftOver];
      if ([((NSString *) nil_chk(type)) isEqual:@"integer"]) {
        value = [JavaLangInteger valueOfWithInt:[RAREUTSNumber intValueWithNSString:propvalue]];
        break;
      }
      if ([type isEqual:@"long"]) {
        value = [JavaLangLong valueOfWithLong:[RAREUTSNumber longValueWithNSString:propvalue]];
        break;
      }
      if ([type isEqual:@"double"]) {
        value = [JavaLangDouble valueOfWithDouble:[RAREUTSNumber doubleValueWithNSString:propvalue]];
        break;
      }
      if ([type isEqual:@"float"]) {
        value = [JavaLangFloat valueOfWithFloat:[RAREUTSNumber floatValueWithNSString:propvalue]];
        break;
      }
      if ([type isEqual:@"boolean"]) {
        value = [JavaLangBoolean valueOfWithBoolean:[((NSString *) nil_chk(propvalue)) equalsIgnoreCase:@"true"]];
        break;
      }
      if (([type indexOfString:@"color"] != -1) && ([((NSString *) nil_chk(propvalue)) sequenceLength] > 0)) {
        RAREUIColor *c;
        if ([type hasPrefix:@"background"] || ([propvalue indexOf:','] != -1)) {
          c = [RAREColorUtils getBackgroundColorWithNSString:propvalue];
        }
        else {
          c = [RAREColorUtils getColorWithNSString:propvalue];
        }
        if (([RAREColorUtils KEEP_COLOR_KEYS]) || [type contains:@"shade"]) {
          if (!([c isKindOfClass:[RAREUIColorShade class]])) {
            c = [[RAREUIColorShade alloc] initWithRAREUIColor:c withNSString:name];
          }
          else {
            RAREUIColorShade *cs = (RAREUIColorShade *) check_class_cast(c, [RAREUIColorShade class]);
            if ([((RAREUIColorShade *) nil_chk(cs)) getColorKey] == nil) {
              [cs setColorKeyWithNSString:name];
            }
            else {
              cs = [[RAREUIColorShade alloc] initWithRAREUIColor:c withNSString:name];
            }
            c = cs;
          }
        }
        value = c;
        break;
      }
      if ([type isEqual:@"border"]) {
        value = [((RAREUIProperties *) nil_chk([app getUIDefaults])) getBorderWithNSString:propvalue];
        if (value == nil) {
          value = [RAREBorderUtils createBorderWithRAREiWidget:context withNSString:propvalue withRAREiPlatformBorder:[((RAREUIProperties *) nil_chk([app getUIDefaults])) getBorderWithNSString:name]];
        }
        break;
      }
      if ([type isEqual:@"icon"]) {
        value = [((id<RAREiWidget>) nil_chk(context)) getIconWithNSString:propvalue withNSString:name];
        if (value == nil) {
          if ([((NSString *) nil_chk(propvalue)) hasPrefix:[RAREiConstants RESOURCE_PREFIX]]) {
            value = [((id<RAREiPlatformAppContext>) nil_chk([context getAppContext])) getResourceAsIconWithNSString:[propvalue substring:[((NSString *) nil_chk([RAREiConstants RESOURCE_PREFIX])) sequenceLength]]];
          }
          else {
            @try {
              value = [context getIconWithNSString:propvalue withNSString:propvalue];
            }
            @catch (JavaLangException *ex) {
              @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:ex];
            }
          }
        }
        break;
      }
      if ([type isEqual:@"insets"] || [type isEqual:@"margin"]) {
        unichar c = ([((NSString *) nil_chk(propvalue)) indexOf:';'] != -1) ? ';' : ',';
        id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:propvalue withChar:c withBoolean:YES];
        int len = [((id<JavaUtilList>) nil_chk(list)) size];
        if (len != 4) {
          value = nil;
          break;
        }
        RAREUIInsets *insets = [[RAREUIInsets alloc] initWithInt:0 withInt:0 withInt:0 withInt:0];
        propvalue = [list getWithInt:0];
        if ([((NSString *) nil_chk(propvalue)) hasPrefix:@"("] || [propvalue hasPrefix:@"{"]) {
          propvalue = [((NSString *) nil_chk([propvalue substring:1])) trim];
        }
        insets->top_ = [RAREScreenUtils platformPixelsWithFloat:[RAREUTSNumber intValueWithNSString:propvalue]];
        insets->bottom_ = [RAREUTSNumber intValueWithNSString:[list getWithInt:2]];
        if ([type charAtWithInt:0] == 'm') {
          insets->right_ = [RAREScreenUtils platformPixelsWithFloat:[RAREUTSNumber intValueWithNSString:[list getWithInt:1]]];
          insets->left_ = [RAREScreenUtils platformPixelsWithFloat:[RAREUTSNumber intValueWithNSString:[list getWithInt:3]]];
        }
        else {
          insets->left_ = [RAREScreenUtils platformPixelsWithFloat:[RAREUTSNumber intValueWithNSString:[list getWithInt:1]]];
          insets->right_ = [RAREScreenUtils platformPixelsWithFloat:[RAREUTSNumber intValueWithNSString:[list getWithInt:3]]];
        }
        value = insets;
      }
      if ([type isEqual:@"font"]) {
        value = [((RAREUIProperties *) nil_chk([app getUIDefaults])) getFontWithNSString:propvalue];
        if (value == nil) {
          RAREUIFont *f = [((RAREUIProperties *) nil_chk([app getUIDefaults])) getFontWithNSString:name];
          value = [RAREFontUtils parseFontWithRAREiWidget:context withRAREUIFont:f withNSString:propvalue];
        }
        break;
      }
      if ([type isEqual:@"gridcell"]) {
        RARESPOTGridCell *cell = (RARESPOTGridCell *) check_class_cast([RAREDataParser loadSPOTObjectSDFWithRAREiWidget:context withJavaIoReader:[[JavaIoStringReader alloc] initWithNSString:propvalue] withISPOTElement:[[RARESPOTGridCell alloc] init] withNSString:nil withJavaNetURL:nil], [RARESPOTGridCell class]);
        value = [RAREUIColorHelper getPaintBucketWithRAREiWidget:context withRARESPOTGridCell:cell];
        break;
      }
      if ([type isEqual:@"cellpainter"]) {
        RARESPOTGridCell *cell = (RARESPOTGridCell *) check_class_cast([RAREDataParser loadSPOTObjectSDFWithRAREiWidget:context withJavaIoReader:[[JavaIoStringReader alloc] initWithNSString:propvalue] withISPOTElement:[[RARESPOTGridCell alloc] init] withNSString:nil withJavaNetURL:nil], [RARESPOTGridCell class]);
        value = [RAREUtils configureCellPainterWithRAREiWidget:context withRARESPOTGridCell:cell];
        break;
      }
      if ([type isEqual:@"backgroundpainter"]) {
        value = [RAREColorUtils getBackgroundPainterWithNSString:propvalue];
        break;
      }
      if ([type isEqual:@"imagepainter"]) {
        value = [RAREUtils createImagePainterWithRAREiWidget:context withNSString:propvalue];
        break;
      }
      if ([type isEqual:@"drawable"]) {
        value = [RAREaPlatformHelper getResourceAsDrawableWithNSString:propvalue];
        break;
      }
      if ([type isEqual:@"spot"]) {
        value = [RAREDataParser loadSPOTObjectSDFWithRAREiWidget:context withJavaIoReader:[[JavaIoStringReader alloc] initWithNSString:propvalue] withISPOTElement:nil withNSString:nil withJavaNetURL:nil];
        break;
      }
      if ([type isEqual:@"property"]) {
        value = [((RAREUIProperties *) nil_chk([app getUIDefaults])) getWithNSString:propvalue];
        break;
      }
      if ([type isEqual:@"string"]) {
        value = [((id<RAREiWidget>) nil_chk(context)) expandStringWithNSString:propvalue withBoolean:NO];
        break;
      }
      if ([type isEqual:@"dimension"]) {
        value = [RAREUtils getSizeWithNSString:propvalue];
        break;
      }
      if ([type isEqual:@"url"]) {
        value = [((id<RAREiWidget>) nil_chk(context)) getURLWithNSString:propvalue];
      }
      if ([type isEqual:@"style"]) {
        value = [RAREaPlatformHelper getResourceIdWithNSString:propvalue];
      }
    }
    while (NO);
    return value;
  }
  @catch (JavaLangException *e) {
    [RAREPlatform ignoreExceptionWithNSString:@"resolveUIProperty" withJavaLangThrowable:e];
    return nil;
  }
}

+ (void)setBackgroundWithRAREiPainterSupport:(id<RAREiPainterSupport>)c
                                      withId:(id)color {
  if ([color isKindOfClass:[RAREPaintBucket class]]) {
    RAREPaintBucket *pb = (RAREPaintBucket *) check_class_cast(color, [RAREPaintBucket class]);
    id<RAREiPlatformComponentPainter> cp = [((RAREPaintBucket *) nil_chk(pb)) getComponentPainterWithBoolean:YES];
    if (cp != nil) {
      [((id<RAREiPainterSupport>) nil_chk(c)) setComponentPainterWithRAREiPlatformComponentPainter:cp];
    }
    return;
  }
  if ([color isKindOfClass:[RAREUIColor class]]) {
    id<RAREiPlatformComponentPainter> cp = [((id<RAREiPainterSupport>) nil_chk(c)) getComponentPainter];
    if (cp == nil) {
      cp = [[RAREUIComponentPainter alloc] init];
      [c setComponentPainterWithRAREiPlatformComponentPainter:cp];
    }
    [((id<RAREiPlatformComponentPainter>) nil_chk(cp)) setBackgroundColorWithRAREUIColor:(RAREUIColor *) check_class_cast(color, [RAREUIColor class])];
    return;
  }
  if ([color conformsToProtocol: @protocol(RAREiBackgroundPainter)]) {
    id<RAREiPlatformComponentPainter> cp = [((id<RAREiPainterSupport>) nil_chk(c)) getComponentPainter];
    if (cp == nil) {
      cp = [[RAREUIComponentPainter alloc] init];
      [c setComponentPainterWithRAREiPlatformComponentPainter:cp];
    }
    [((id<RAREiPlatformComponentPainter>) nil_chk(cp)) setBackgroundPainterWithRAREiBackgroundPainter:(id<RAREiBackgroundPainter>) check_protocol_cast(color, @protocol(RAREiBackgroundPainter)) withBoolean:NO];
  }
}

+ (void)setBackgroundWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c
                                         withId:(id)color {
  if ([color isKindOfClass:[RAREPaintBucket class]]) {
    [((RAREPaintBucket *) check_class_cast(color, [RAREPaintBucket class])) installWithRAREiPlatformComponent:c];
    return;
  }
  if ([color isKindOfClass:[RAREUIColor class]]) {
    [((id<RAREiPlatformComponent>) nil_chk(c)) setBackgroundWithRAREUIColor:(RAREUIColor *) check_class_cast(color, [RAREUIColor class])];
    return;
  }
  if (([color conformsToProtocol: @protocol(RAREiBackgroundPainter)]) && ([(id) c conformsToProtocol: @protocol(RAREiPainterSupport)])) {
    [RAREUtils setBackgroundPainterWithRAREiPainterSupport:(id<RAREiPainterSupport>) check_protocol_cast(c, @protocol(RAREiPainterSupport)) withRAREiBackgroundPainter:(id<RAREiBackgroundPainter>) check_protocol_cast(color, @protocol(RAREiBackgroundPainter))];
  }
}

+ (void)setBackgroundColorWithRAREiPainterSupport:(id<RAREiPainterSupport>)ps
                                  withRAREUIColor:(RAREUIColor *)bg {
  if (ps == nil) {
    return;
  }
  id<RAREiPlatformComponentPainter> cp = [((id<RAREiPainterSupport>) nil_chk(ps)) getComponentPainter];
  if (cp == nil) {
    cp = [[RAREUIComponentPainter alloc] init];
    [ps setComponentPainterWithRAREiPlatformComponentPainter:cp];
  }
  [((id<RAREiPlatformComponentPainter>) nil_chk(cp)) setBackgroundColorWithRAREUIColor:bg];
}

+ (void)setBackgroundOverlayPainterWithRAREiPainterSupport:(id<RAREiPainterSupport>)ps
                                  withRAREiPlatformPainter:(id<RAREiPlatformPainter>)p {
  if (ps == nil) {
    return;
  }
  id<RAREiPlatformComponentPainter> cp = [((id<RAREiPainterSupport>) nil_chk(ps)) getComponentPainter];
  if (cp == nil) {
    cp = [[RAREUIComponentPainter alloc] init];
    [ps setComponentPainterWithRAREiPlatformComponentPainter:cp];
  }
  [((id<RAREiPlatformComponentPainter>) nil_chk(cp)) setBackgroundOverlayPainterWithRAREiPlatformPainter:p];
}

+ (void)setBackgroundPainterWithRAREiPainterSupport:(id<RAREiPainterSupport>)ps
                         withRAREiBackgroundPainter:(id<RAREiBackgroundPainter>)bp {
  if (ps == nil) {
    return;
  }
  id<RAREiPlatformComponentPainter> cp = [((id<RAREiPainterSupport>) nil_chk(ps)) getComponentPainter];
  if (cp == nil) {
    cp = [[RAREUIComponentPainter alloc] init];
    [ps setComponentPainterWithRAREiPlatformComponentPainter:cp];
  }
  [((id<RAREiPlatformComponentPainter>) nil_chk(cp)) setBackgroundPainterWithRAREiBackgroundPainter:bp withBoolean:NO];
}

+ (id<RAREiPlatformIcon>)getIconWithRARERenderableDataItem:(RARERenderableDataItem *)item
                                            withRAREColumn:(RAREColumn *)col
                                               withBoolean:(BOOL)enabled
                                               withBoolean:(BOOL)alternateState
                                     withRAREiPlatformIcon:(id<RAREiPlatformIcon>)delayedIcon {
  if (item == nil) {
    if (col == nil) {
      return nil;
    }
    item = RAREUtils_defaultItem_;
  }
  BOOL column = [item isKindOfClass:[RAREColumn class]];
  RAREColumn *c = nil;
  if (column) {
    c = (RAREColumn *) check_class_cast(item, [RAREColumn class]);
  }
  id<RAREiPlatformIcon> icon;
  id<RAREiPlatformIcon> dicon = nil;
  if (column) {
    icon = [((RAREColumn *) nil_chk(c)) getHeaderIcon];
  }
  else {
    icon = [((RARERenderableDataItem *) nil_chk(item)) getIcon];
    if (alternateState) {
      dicon = [item getAlternateIcon];
      if (dicon != nil) {
        icon = dicon;
      }
      dicon = nil;
    }
    if ((icon == nil) && (col != nil)) {
      if (alternateState) {
        icon = [col getAlternateIcon];
      }
      if (icon == nil) {
        icon = [col getIcon];
      }
    }
  }
  if (!enabled) {
    dicon = [((RARERenderableDataItem *) nil_chk(item)) getDisabledIcon];
    if ((dicon == nil) && (col != nil)) {
      dicon = [col getDisabledIcon];
    }
    if ((dicon == nil) && (icon != nil)) {
      dicon = [icon getDisabledVersion];
    }
    icon = dicon;
  }
  if ((delayedIcon != nil) && ([(id) icon conformsToProtocol: @protocol(RAREiObservableImage)]) && ![((id<RAREiObservableImage>) check_protocol_cast(icon, @protocol(RAREiObservableImage))) isImageLoadedWithRAREiImageObserver:nil]) {
    icon = delayedIcon;
  }
  return icon;
}

+ (void)setIconAndAlignmentWithRAREiPlatformRenderingComponent:(id<RAREiPlatformRenderingComponent>)rc
                                    withRARERenderableDataItem:(RARERenderableDataItem *)item
                                    withRARERenderableDataItem:(RARERenderableDataItem *)row
                                                withRAREColumn:(RAREColumn *)col
                                                   withBoolean:(BOOL)enabled
                                                   withBoolean:(BOOL)center
                                                   withBoolean:(BOOL)top
                                                   withBoolean:(BOOL)seticon
                                         withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  if (item == nil) {
    if ((col == nil) && (row == nil)) {
      [((id<RAREiPlatformRenderingComponent>) nil_chk(rc)) setIconWithRAREiPlatformIcon:nil];
      return;
    }
    item = RAREUtils_defaultItem_;
  }
  BOOL column = [item isKindOfClass:[RAREColumn class]];
  RAREColumn *c = nil;
  if (column) {
    c = (RAREColumn *) check_class_cast(item, [RAREColumn class]);
  }
  if (seticon) {
    [((id<RAREiPlatformRenderingComponent>) nil_chk(rc)) setIconWithRAREiPlatformIcon:icon];
    float f = 0;
    if ([((RARERenderableDataItem *) nil_chk(item)) isScaleIcon]) {
      f = [item getIconScaleFactor];
    }
    else if ((col != nil) && [col isScaleIcon]) {
      f = [col getIconScaleFactor];
    }
    [rc setScaleIconWithBoolean:f > 0 withFloat:f];
  }
  RARERenderableDataItem_VerticalAlignEnum *va;
  RARERenderableDataItem_HorizontalAlignEnum *ha;
  if (top) {
    va = [RARERenderableDataItem_VerticalAlignEnum TOP];
  }
  else {
    if (column) {
      va = [((RAREColumn *) nil_chk(c)) getHeaderVerticalAlignment];
    }
    else {
      va = [((RARERenderableDataItem *) nil_chk(item)) getVerticalAlignment];
      if (va == [RARERenderableDataItem_VerticalAlignEnum AUTO]) {
        if (row != nil) {
          va = [row getVerticalAlignment];
        }
      }
      if ((col != nil) && (va == [RARERenderableDataItem_VerticalAlignEnum AUTO])) {
        va = [col getVerticalAlignment];
      }
    }
  }
  if (center) {
    ha = [RARERenderableDataItem_HorizontalAlignEnum CENTER];
  }
  else {
    if (column) {
      ha = [((RAREColumn *) nil_chk(c)) getHeaderHorizontalAlignment];
    }
    else {
      ha = [((RARERenderableDataItem *) nil_chk(item)) getHorizontalAlignment];
      if (ha == [RARERenderableDataItem_HorizontalAlignEnum AUTO]) {
        if (row != nil) {
          ha = [row getHorizontalAlignment];
        }
      }
      if ((col != nil) && (ha == [RARERenderableDataItem_HorizontalAlignEnum AUTO])) {
        ha = [col getHorizontalAlignment];
      }
    }
  }
  [((id<RAREiPlatformRenderingComponent>) nil_chk(rc)) setAlignmentWithRARERenderableDataItem_HorizontalAlignEnum:ha withRARERenderableDataItem_VerticalAlignEnum:va];
  RARERenderableDataItem_IconPositionEnum *ip;
  if (column) {
    ip = [((RAREColumn *) nil_chk(c)) getHeaderIconPosition];
  }
  else {
    ip = [((RARERenderableDataItem *) nil_chk(item)) getIconPosition];
    if (ip == [RARERenderableDataItem_IconPositionEnum LEADING]) {
      ip = [RARERenderableDataItem_IconPositionEnum LEADING];
    }
    if (ip == [RARERenderableDataItem_IconPositionEnum AUTO]) {
      if (row != nil) {
        ip = [row getIconPosition];
      }
    }
    if ((col != nil) && (ip == [RARERenderableDataItem_IconPositionEnum AUTO])) {
      ip = [col getIconPosition];
    }
  }
  [rc setIconPositionWithRARERenderableDataItem_IconPositionEnum:ip];
  RARERenderableDataItem_OrientationEnum *o = [((RARERenderableDataItem *) nil_chk(item)) getOrientation];
  if (((o == nil) || (o == [RARERenderableDataItem_OrientationEnum AUTO])) && (row != nil)) {
    o = [row getOrientation];
  }
  if (((o == nil) || (o == [RARERenderableDataItem_OrientationEnum AUTO])) && (col != nil)) {
    o = [col getOrientation];
  }
  if (o != nil) {
    [rc setOrientationWithRARERenderableDataItem_OrientationEnum:o];
  }
}

+ (NSString *)setMnemonicAndTextWithRAREaUIMenuItem:(RAREaUIMenuItem *)item
                                       withNSString:(NSString *)text {
  unichar mn = 0;
  if (text == nil) {
    text = @"";
  }
  int len = [((NSString *) nil_chk(text)) sequenceLength];
  int n = -1;
  if ((len > 0) && ![text hasPrefix:@"<html>"]) {
    n = [text indexOf:'_'];
  }
  if ((n != -1) && (n < len - 1)) {
    if (n == 0) {
      mn = [text charAtWithInt:1];
      text = [text substring:1];
    }
    else {
      mn = [text charAtWithInt:n + 1];
      text = [NSString stringWithFormat:@"%@%@", [text substring:0 endIndex:n], [text substring:n + 1]];
    }
  }
  [((RAREaUIMenuItem *) nil_chk(item)) setTextWithJavaLangCharSequence:text];
  if (mn != 0) {
    [item setMnemonicWithChar:mn];
  }
  return text;
}

+ (NSString *)setMnemonicAndTextWithRAREiActionComponent:(id<RAREiActionComponent>)item
                                            withNSString:(NSString *)text {
  unichar mn = 0;
  if (text == nil) {
    text = @"";
  }
  int len = [((NSString *) nil_chk(text)) sequenceLength];
  int n = -1;
  if ((len > 0) && ![text hasPrefix:@"<html>"]) {
    n = [text indexOf:'_'];
  }
  if ((n != -1) && (n < len - 1)) {
    if (n == 0) {
      mn = [text charAtWithInt:1];
      text = [text substring:1];
    }
    else {
      mn = [text charAtWithInt:n + 1];
      text = [NSString stringWithFormat:@"%@%@", [text substring:0 endIndex:n], [text substring:n + 1]];
    }
  }
  [((id<RAREiActionComponent>) nil_chk(item)) setTextWithJavaLangCharSequence:text];
  if (mn != 0) {
    [item setMnemonicWithChar:mn];
  }
  return text;
}

+ (void)setOrientationWithRAREiActionComponent:(id<RAREiActionComponent>)component
                                       withInt:(int)cfgOrientation {
  switch (cfgOrientation) {
    case RARESPOTLabel_COrientation_horizontal:
    [((id<RAREiActionComponent>) nil_chk(component)) setOrientationWithRARERenderableDataItem_OrientationEnum:[RARERenderableDataItem_OrientationEnum HORIZONTAL]];
    break;
    case RARESPOTLabel_COrientation_vertical_up:
    [((id<RAREiActionComponent>) nil_chk(component)) setOrientationWithRARERenderableDataItem_OrientationEnum:[RARERenderableDataItem_OrientationEnum VERTICAL_UP]];
    break;
    case RARESPOTLabel_COrientation_vertical_down:
    [((id<RAREiActionComponent>) nil_chk(component)) setOrientationWithRARERenderableDataItem_OrientationEnum:[RARERenderableDataItem_OrientationEnum VERTICAL_DOWN]];
    break;
    default:
    break;
  }
}

+ (void)setupWindowOptionsWithRAREFrame:(RAREFrame *)frame
                        withJavaUtilMap:(id<JavaUtilMap>)options {
  BOOL isframe = [((RAREFrame *) nil_chk(frame)) getWindowType] == [RAREaWindowManager_WindowTypeEnum FRAME];
  RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Dialog.backgroundColor"];
  if (c == nil) {
    c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Alert.backgroundColor"];
  }
  if (c == nil) {
    c = [RAREColorUtils getBackground];
  }
  if (![frame isUndecorated]) {
    if ([frame isUsesRuntimeDecorations]) {
      id<RAREiPlatformComponentPainter> cp = [[RAREUIComponentPainter alloc] init];
      [cp setBorderWithRAREiPlatformBorder:[RAREBorderUtils createShadowBorderWithFloat:[RAREUIScreen PLATFORM_PIXELS_7]]];
      [cp setBackgroundColorWithRAREUIColor:c];
      [frame setComponentPainterWithRAREiPlatformComponentPainter:cp];
    }
    else if (![frame isTransparent]) {
      [frame setBackgroundWithRAREUIColor:c];
    }
  }
  else if (![frame isTransparent]) {
    [frame setBackgroundWithRAREUIColor:c];
  }
  if ((options == nil) || [options isEmpty]) {
    if (isframe) {
      [frame setMovableWithBoolean:YES];
      [frame setResizableWithBoolean:YES];
    }
    return;
  }
  BOOL resizable = isframe;
  BOOL movable = isframe;
  float height = -1;
  float left = -1;
  float top = -1;
  float width = -1;
  id o;
  id<RAREiPlatformComponent> win = [frame getComponent];
  RAREUIDimension *screenSize = [RAREScreenUtils getScreenSize];
  o = [((id<JavaUtilMap>) nil_chk(options)) getWithId:@"left"];
  if ([o isKindOfClass:[NSString class]]) {
    left = [RAREScreenUtils toPlatformPixelWidthWithNSString:(NSString *) check_class_cast(o, [NSString class]) withRAREiPlatformComponent:win withFloat:((RAREUIDimension *) nil_chk(screenSize))->width_];
  }
  else if ([o isKindOfClass:[NSNumber class]]) {
    left = [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue];
  }
  o = [options getWithId:@"top"];
  if ([o isKindOfClass:[NSString class]]) {
    top = [RAREScreenUtils toPlatformPixelHeightWithNSString:(NSString *) check_class_cast(o, [NSString class]) withRAREiPlatformComponent:win withFloat:((RAREUIDimension *) nil_chk(screenSize))->height_];
  }
  else if ([o isKindOfClass:[NSNumber class]]) {
    top = [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue];
  }
  o = [options getWithId:@"height"];
  if ([o isKindOfClass:[NSString class]]) {
    height = [RAREScreenUtils toPlatformPixelHeightWithNSString:(NSString *) check_class_cast(o, [NSString class]) withRAREiPlatformComponent:win withFloat:((RAREUIDimension *) nil_chk(screenSize))->height_];
  }
  else if ([o isKindOfClass:[NSNumber class]]) {
    height = [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue];
  }
  o = [options getWithId:@"width"];
  if ([o isKindOfClass:[NSString class]]) {
    width = [RAREScreenUtils toPlatformPixelWidthWithNSString:(NSString *) check_class_cast(o, [NSString class]) withRAREiPlatformComponent:win withFloat:((RAREUIDimension *) nil_chk(screenSize))->width_];
  }
  else if ([o isKindOfClass:[NSNumber class]]) {
    width = [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue];
  }
  NSString *s;
  o = [options getWithId:@"border"];
  if (o != nil) {
    id<RAREiPlatformBorder> b = nil;
    if ([o isKindOfClass:[NSString class]]) {
      s = [((NSString *) check_class_cast(o, [NSString class])) trim];
      b = [RAREUIBorderHelper createBorderWithNSString:s];
    }
    if (b != nil) {
      [((id<RAREiPlatformComponent>) nil_chk(win)) setBorderWithRAREiPlatformBorder:b];
    }
  }
  o = [options getWithId:@"resizable"];
  if ([o isKindOfClass:[JavaLangBoolean class]]) {
    resizable = [((JavaLangBoolean *) check_class_cast(o, [JavaLangBoolean class])) booleanValue];
  }
  else if ([o isKindOfClass:[NSString class]]) {
    s = (NSString *) check_class_cast(o, [NSString class]);
    if ((s != nil) && ([s sequenceLength] > 0)) {
      resizable = [RAREUTSNumber booleanValueWithNSString:s];
    }
  }
  o = [options getWithId:@"movable"];
  if ([o isKindOfClass:[JavaLangBoolean class]]) {
    movable = [((JavaLangBoolean *) check_class_cast(o, [JavaLangBoolean class])) booleanValue];
  }
  else if ([o isKindOfClass:[NSString class]]) {
    s = (NSString *) check_class_cast(o, [NSString class]);
    if ((s != nil) && ([s sequenceLength] > 0)) {
      movable = [RAREUTSNumber booleanValueWithNSString:s];
    }
  }
  [frame setResizableWithBoolean:resizable];
  [frame setMovableWithBoolean:movable];
  s = (NSString *) check_class_cast([options getWithId:@"title"], [NSString class]);
  if ((s == nil) || ([s sequenceLength] == 0)) {
    s = [((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getWindowManager])) getTitle];
  }
  else {
    s = [s trim];
  }
  [frame setTitleWithNSString:s];
  RAREUIImageIcon *icon = nil;
  o = [options getWithId:@"icon"];
  if ([o isKindOfClass:[RAREUIImageIcon class]]) {
    icon = (RAREUIImageIcon *) check_class_cast(o, [RAREUIImageIcon class]);
  }
  else {
    s = ([o isKindOfClass:[NSString class]]) ? (NSString *) check_class_cast(o, [NSString class]) : nil;
    if ((s == nil) || ([s sequenceLength] == 0)) {
      s = (NSString *) check_class_cast([options getWithId:@"iconurl"], [NSString class]);
    }
    if ((s != nil) && ([s sequenceLength] > 0)) {
      icon = (RAREUIImageIcon *) check_class_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getIconWithNSString:s], [RAREUIImageIcon class]);
    }
  }
  if (icon != nil) {
  }
  c = nil;
  o = [options getWithId:@"bgcolor"];
  if ([o isKindOfClass:[RAREUIColor class]]) {
    c = (RAREUIColor *) check_class_cast(o, [RAREUIColor class]);
  }
  else {
    s = ([o isKindOfClass:[NSString class]]) ? (NSString *) check_class_cast(o, [NSString class]) : nil;
    if ((s != nil) && ([s sequenceLength] > 0)) {
      c = [RAREUIColorHelper getColorWithNSString:s];
    }
  }
  if (c != nil) {
    [((id<RAREiPlatformComponent>) nil_chk(win)) setBackgroundWithRAREUIColor:c];
  }
  if ((width > 0) || (height > 0)) {
    if ((width < 1) || (height < 1)) {
      [frame setPartialSizeWithRAREUIDimension:[[RAREUIDimension alloc] initWithFloat:width withFloat:height]];
    }
    else {
      [frame setSizeWithFloat:width withFloat:height];
    }
  }
  if ((left > -1) || (top > -1)) {
    if ((left < 0) || (top < 0)) {
      [frame setPartialLocationWithRAREUIPoint:[[RAREUIPoint alloc] initWithFloat:left withFloat:top]];
    }
    else {
      [frame setLocationWithFloat:left withFloat:top];
    }
  }
}

+ (void)setWindowSizeAndLocationFromPartialWithRAREFrame:(RAREFrame *)frame
                                         withRAREUIPoint:(RAREUIPoint *)partialLocation
                                     withRAREUIDimension:(RAREUIDimension *)partialSize {
  RAREUIDimension *d = [((id<RAREiPlatformComponent>) nil_chk([((RAREFrame *) nil_chk(frame)) getComponent])) getPreferredSize];
  if (partialSize != nil) {
    if (partialSize->width_ > 0) {
      ((RAREUIDimension *) nil_chk(d))->width_ = partialSize->width_;
    }
    if (partialSize->height_ > 0) {
      ((RAREUIDimension *) nil_chk(d))->height_ = partialSize->height_;
    }
    [frame setSizeWithFloat:((RAREUIDimension *) nil_chk(d))->width_ withFloat:d->height_];
  }
  if (partialLocation != nil) {
    RAREUIDimension *sd = [RAREScreenUtils getScreenSizeWithRAREiPlatformComponent:[frame getComponent]];
    if (partialLocation->x_ < 0) {
      partialLocation->x_ = (((RAREUIDimension *) nil_chk(sd))->width_ - ((RAREUIDimension *) nil_chk(d))->width_) / 2;
    }
    if (partialLocation->x_ < 0) {
      partialLocation->y_ = (((RAREUIDimension *) nil_chk(sd))->height_ - ((RAREUIDimension *) nil_chk(d))->height_) / 2;
    }
    [frame setLocationWithFloat:partialLocation->x_ withFloat:partialLocation->y_];
  }
}

+ (NSString *)stripMnemonicWithNSString:(NSString *)text {
  if (text == nil) {
    text = @"";
  }
  int len = [((NSString *) nil_chk(text)) sequenceLength];
  int n = -1;
  if ((len > 0) && ![text hasPrefix:@"<html>"]) {
    n = [text indexOf:'&'];
  }
  if ((n != -1) && (n < len - 1)) {
    if ([text charAtWithInt:n + 1] != '&') {
      if (n == 0) {
        text = [text substring:1];
      }
      else {
        text = [NSString stringWithFormat:@"%@%@", [text substring:0 endIndex:n], [text substring:n + 1]];
      }
    }
    else {
      text = [NSString stringWithFormat:@"%@%@", [text substring:0 endIndex:n], [text substring:n + 1]];
    }
  }
  return text;
}

+ (void)transformPointWithRAREUIPoint:(RAREUIPoint *)pt
                              withInt:(int)rotation
                            withFloat:(float)width
                            withFloat:(float)height {
  float x = ((RAREUIPoint *) nil_chk(pt))->x_;
  float y = pt->y_;
  float n;
  switch (rotation) {
    case 180:
    y = height - y;
    x = width - x;
    break;
    case 90:
    n = x;
    x = y;
    y = width - n;
    n = width;
    width = height;
    height = n;
    break;
    case -90:
    case 270:
    n = x;
    x = height - y;
    y = n;
    n = width;
    width = height;
    height = n;
    break;
    default:
    break;
  }
  pt->x_ = x;
  pt->y_ = y;
}

+ (NSString *)utf8StringWithNSString:(NSString *)value {
  if ((value == nil) || ([value sequenceLength] == 0)) {
    return value;
  }
  RAREUTCharArray *ca = [((JavaLangThreadLocal *) nil_chk(RAREUtils_perThreadCharArray_)) get];
  RAREUTByteArray *ba = [((JavaLangThreadLocal *) nil_chk(RAREUtils_perThreadByteArray_)) get];
  (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:value];
  ((RAREUTByteArray *) nil_chk(ba))->_length_ = [((RAREUTUTF8Helper *) nil_chk([RAREUTUTF8Helper getInstance])) getBytesWithCharArray:ca->A_ withInt:0 withInt:ca->_length_ withRAREUTByteArray:ba withInt:0];
  ca->_length_ = 0;
  (void) [ba getCharsWithRAREUTCharArray:ca withRAREUTiCharsetHelper:[RAREUTISO88591Helper getInstance]];
  NSString *s = [ca description];
  if ((int) [((IOSCharArray *) nil_chk(ca->A_)) count] > 65538) {
    ca->_length_ = 256;
    [ca trimToSize];
  }
  if ((int) [((IOSByteArray *) nil_chk(ba->A_)) count] > 65538) {
    ba->_length_ = 256;
    [ba trimToSize];
  }
  return s;
}

+ (void)substractWithRAREUIRectangle:(RAREUIRectangle *)rect
                 withRAREUIRectangle:(RAREUIRectangle *)isection
               withJavaUtilArrayList:(JavaUtilArrayList *)remainders {
  float isectionRight = ((RAREUIRectangle *) nil_chk(isection))->x_ + isection->width_;
  float rectRight = ((RAREUIRectangle *) nil_chk(rect))->x_ + rect->width_;
  float isectionBottom = isection->y_ + isection->height_;
  float rectBottom = rect->y_ + rect->height_;
  if (isection->y_ > rect->y_) {
    [((JavaUtilArrayList *) nil_chk(remainders)) addWithId:[[RAREUIRectangle alloc] initWithFloat:rect->x_ withFloat:rect->y_ withFloat:rect->width_ withFloat:isection->y_ - rect->y_]];
  }
  if (isection->x_ > rect->x_) {
    [((JavaUtilArrayList *) nil_chk(remainders)) addWithId:[[RAREUIRectangle alloc] initWithFloat:rect->x_ withFloat:isection->y_ withFloat:isection->x_ - rect->x_ withFloat:isection->height_]];
  }
  if (isectionRight < rectRight) {
    [((JavaUtilArrayList *) nil_chk(remainders)) addWithId:[[RAREUIRectangle alloc] initWithFloat:isectionRight withFloat:isection->y_ withFloat:rectRight - isectionRight withFloat:isection->height_]];
  }
  if (isectionBottom < rectBottom) {
    [((JavaUtilArrayList *) nil_chk(remainders)) addWithId:[[RAREUIRectangle alloc] initWithFloat:rect->x_ withFloat:isectionBottom withFloat:rect->width_ withFloat:rectBottom - isectionBottom]];
  }
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [RAREUtils class]) {
    RAREUtils_EMPTY_INTS_ = [IOSIntArray arrayWithLength:0];
    RAREUtils_EMPTY_INSETS_ = [[RAREUIInsets alloc] init];
    RAREUtils_perThreadScanner_ = [[RAREUtils_$1 alloc] init];
    RAREUtils_perThreadCharArray_ = [[RAREUtils_$2 alloc] init];
    RAREUtils_perThreadByteArray_ = [[RAREUtils_$3 alloc] init];
    RAREUtils_defaultItem_ = [[RARERenderableDataItem alloc] initWithId:@""];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "computeDifferenceWithRAREUIRectangle:withRAREUIRectangle:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "configureCellPainterWithRAREiWidget:withRARESPOTGridCell:", NULL, "LRAREUICellPainter", 0x9, NULL },
    { "configureCellPaintersWithRAREiWidget:withSPOTSet:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "configureImageWithRAREiWidget:withRAREiImagePainter:withJavaUtilMap:", NULL, "LRAREiImagePainter", 0x9, NULL },
    { "configureImageWithRAREiWidget:withRAREiImagePainter:withSPOTPrintableString:withBoolean:", NULL, "LRAREiImagePainter", 0x9, NULL },
    { "configureImageWithRAREiWidget:withRAREiImagePainter:withNSString:withJavaUtilMap:withBoolean:", NULL, "LRAREiImagePainter", 0x9, NULL },
    { "createAbsoluteConstraintsWithInt:withInt:withInt:withInt:", NULL, "LNSObject", 0x9, NULL },
    { "createCellConstraintsWithInt:withInt:withInt:withInt:withRARERenderableDataItem_HorizontalAlignEnum:withRARERenderableDataItem_VerticalAlignEnum:", NULL, "LRARECellConstraints", 0x9, NULL },
    { "createCellConstraintsWithRARESPOTWidget:withRARECellConstraints:withRAREUIRectangle:", NULL, "LRARECellConstraints", 0x9, NULL },
    { "createConstraintsWithRAREiPlatformComponent:withRARESPOTWidget:", NULL, "LNSObject", 0x9, NULL },
    { "createImagePainterWithRAREiWidget:withNSString:", NULL, "LRAREiImagePainter", 0x9, NULL },
    { "createLinkWithRAREiWidget:withNSString:withSPOTAny:", NULL, "LRAREActionLink", 0x9, NULL },
    { "createPath", NULL, "LRAREiPath", 0x9, NULL },
    { "createScrollPaneCornerFromUIPropertyWithRAREaViewer:withRARELocationEnum:withRARELocationEnum:", NULL, "LRAREiWidget", 0x9, NULL },
    { "findTargetForComponentWithRAREiPlatformComponent:", NULL, "LRAREiTarget", 0x9, NULL },
    { "fireWindowEventWithRAREEventListenerList:withId:withRAREWindowEvent_TypeEnum:", NULL, "LRAREWindowEvent", 0x9, NULL },
    { "fixTargetWithInt:", NULL, "LNSString", 0x9, NULL },
    { "fixTargetWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "getBoundsWithRAREiPlatformComponent:withJavaUtilMap:", NULL, "LRAREUIRectangle", 0x9, NULL },
    { "getDecimalSymbols", NULL, "LNSString", 0x9, NULL },
    { "getHorizontalAlignmentWithInt:", NULL, "LRARERenderableDataItem_HorizontalAlignEnum", 0x9, NULL },
    { "getIconPositionWithInt:", NULL, "LRARERenderableDataItem_IconPositionEnum", 0x9, NULL },
    { "getIconsWithRAREiWidget:withNSString:withInt:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "getInsetsWithNSString:", NULL, "LRAREUIInsets", 0x9, NULL },
    { "getItemsWithId:withRAREaWidget:withBoolean:", NULL, "LJavaUtilList", 0x9, NULL },
    { "getLocaleSpecificConnectionWithNSString:withNSString:", NULL, "LRAREJavaURLConnection", 0x9, "JavaIoIOException" },
    { "getLocaleSpecificFileInputStreamWithNSString:withNSString:", NULL, "LJavaIoFileInputStream", 0x9, "JavaIoIOException" },
    { "getMarginWithNSString:", NULL, "LRAREUIInsets", 0x9, NULL },
    { "getPointWithNSString:", NULL, "LRAREUIPoint", 0x9, NULL },
    { "getRectangleWithNSString:", NULL, "LRAREUIRectangle", 0x9, NULL },
    { "getRenderTypeWithInt:withInt:", NULL, "LRARERenderTypeEnum", 0x9, NULL },
    { "getRenderTypesWithNSString:withInt:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "getSizeWithNSString:", NULL, "LRAREUIDimension", 0x9, NULL },
    { "getSliceWithRAREUIImage:withInt:withInt:", NULL, "LRAREUIImage", 0x9, NULL },
    { "getSliceWithRAREUIImage:withRAREUIRectangle:", NULL, "LRAREUIImage", 0x9, NULL },
    { "getStateWithBoolean:withBoolean:withBoolean:withBoolean:", NULL, "LRAREiPaintedButton_ButtonStateEnum", 0x9, NULL },
    { "getTargetWithRARESPOTLink:", NULL, "LNSString", 0x9, NULL },
    { "getTargetForComponentWithRAREiPlatformComponent:", NULL, "LRAREiTarget", 0x9, NULL },
    { "getVerticalAlignmentWithInt:", NULL, "LRARERenderableDataItem_VerticalAlignEnum", 0x9, NULL },
    { "getViewerConfigurationWithRARESPOTWidget:", NULL, "LRARESPOTViewer", 0x9, NULL },
    { "getWidgetWithRAREiWidget:withRARESPOTWidget:", NULL, "LRAREiWidget", 0x9, NULL },
    { "isInValidSetWithNSString:withJavaLangCharSequence:withBoolean:", NULL, "Z", 0x9, NULL },
    { "isValidBaseURLWithJavaNetURL:", NULL, "Z", 0x9, NULL },
    { "makeInvalidRangeStringWithInt:withInt:", NULL, "LNSString", 0x9, NULL },
    { "makeWidgetNameWithRARESPOTWidget:withRAREiWidget:", NULL, "LNSString", 0x9, NULL },
    { "nameValuePairGetValueWithRAREiWidget:withRARESPOTNameValuePair:", NULL, "LNSObject", 0x9, NULL },
    { "nameValuePairSetToMapWithRAREiWidget:withSPOTSet:withJavaUtilMap:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "resolveOptionsWithRAREiWidget:withJavaUtilMap:withJavaUtilMap:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "resolveUIPropertyWithRAREiWidget:withNSString:withNSString:", NULL, "LNSObject", 0x9, NULL },
    { "getIconWithRARERenderableDataItem:withRAREColumn:withBoolean:withBoolean:withRAREiPlatformIcon:", NULL, "LRAREiPlatformIcon", 0x9, NULL },
    { "setMnemonicAndTextWithRAREaUIMenuItem:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "setMnemonicAndTextWithRAREiActionComponent:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "stripMnemonicWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "utf8StringWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "substractWithRAREUIRectangle:withRAREUIRectangle:withJavaUtilArrayList:", NULL, "V", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "EMPTY_INTS_", NULL, 0x19, "LIOSIntArray" },
    { "EMPTY_INSETS_", NULL, 0x1a, "LRAREUIInsets" },
    { "minButtonSize_", NULL, 0x8, "LRAREUIDimension" },
    { "minTextFieldSize_", NULL, 0x8, "LRAREUIDimension" },
    { "perThreadScanner_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "perThreadCharArray_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "perThreadByteArray_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "defaultItem_", NULL, 0xa, "LRARERenderableDataItem" },
    { "minComboHeight_", NULL, 0xa, "I" },
  };
  static J2ObjcClassInfo _RAREUtils = { "Utils", "com.appnativa.rare.ui", NULL, 0x1, 55, methods, 9, fields, 0, NULL};
  return &_RAREUtils;
}

@end
@implementation RAREUtils_$1

- (RAREUTCharScanner *)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharScanner alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LRAREUTCharScanner", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LRAREUTCharScanner"};
  static J2ObjcClassInfo _RAREUtils_$1 = { "$1", "com.appnativa.rare.ui", "Utils", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREUtils_$1;
}

@end
@implementation RAREUtils_$2

- (RAREUTCharArray *)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharArray alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LRAREUTCharArray", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LRAREUTCharArray"};
  static J2ObjcClassInfo _RAREUtils_$2 = { "$2", "com.appnativa.rare.ui", "Utils", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREUtils_$2;
}

@end
@implementation RAREUtils_$3

- (RAREUTByteArray *)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTByteArray alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LRAREUTByteArray", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LRAREUTByteArray"};
  static J2ObjcClassInfo _RAREUtils_$3 = { "$3", "com.appnativa.rare.ui", "Utils", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREUtils_$3;
}

@end
