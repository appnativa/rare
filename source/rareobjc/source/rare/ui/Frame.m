//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple/com/appnativa/rare/ui/Frame.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iAppContext.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/platform/apple/ui/view/ButtonView.h"
#include "com/appnativa/rare/platform/apple/ui/view/View.h"
#include "com/appnativa/rare/platform/apple/ui/view/Window.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/Container.h"
#include "com/appnativa/rare/ui/Frame.h"
#include "com/appnativa/rare/ui/OverlayContainer.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIPoint.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/WindowPane.h"
#include "com/appnativa/rare/ui/WindowTarget.h"
#include "com/appnativa/rare/ui/aComponent.h"
#include "com/appnativa/rare/ui/aWindowManager.h"
#include "com/appnativa/rare/ui/event/EventListenerList.h"
#include "com/appnativa/rare/ui/event/WindowEvent.h"
#include "com/appnativa/rare/ui/event/iWindowListener.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformMenuBar.h"
#include "com/appnativa/rare/ui/iStatusBar.h"
#include "com/appnativa/rare/ui/iToolBarHolder.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iTarget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/appnativa/util/SNumber.h"
#include "java/lang/Integer.h"
#include "java/util/Map.h"

@implementation RAREFrame

- (id)initWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)app
                       withRAREWindow:(RAREWindow *)win
                         withNSString:(NSString *)targetName
withRAREaWindowManager_WindowTypeEnum:(RAREaWindowManager_WindowTypeEnum *)type {
  if (self = [super initWithRAREParentView:win]) {
    closed_ = NO;
    menuOffset_ = 0;
    undecorated_ = NO;
    transparent_ = NO;
    self->windowType_ = type;
    self->window_ = win;
    if (targetName == nil) {
      targetName = [NSString stringWithFormat:@"_new_window_%@", [JavaLangInteger toHexStringWithInt:(int) [self hash]]];
    }
    target_ = [[RAREWindowTarget alloc] initWithRAREiPlatformAppContext:[RAREPlatform getAppContext] withNSString:targetName withRAREiParentComponent:self];
  }
  return self;
}

- (id)initWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)app
                       withRAREWindow:(RAREWindow *)win
withRAREaWindowManager_WindowTypeEnum:(RAREaWindowManager_WindowTypeEnum *)type {
  if (self = [super initWithRAREParentView:win]) {
    closed_ = NO;
    menuOffset_ = 0;
    undecorated_ = NO;
    transparent_ = NO;
    self->window_ = win;
    self->windowType_ = type;
    self->mainWindow_ = YES;
    [self setNeedsHiearachyInvalidatedWithBoolean:NO];
  }
  return self;
}

- (void)addWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c
                               withId:(id)constraints
                              withInt:(int)position {
  if (c != nil) {
    [((RAREUTIdentityArrayList *) nil_chk(components_)) clear];
    [components_ addWithId:c];
    if (overlayContainer_ != nil) {
      [overlayContainer_ setMainComponentWithRAREiPlatformComponent:c];
    }
    else {
      [((RAREWindow *) nil_chk(window_)) setContentWithRAREiPlatformComponent:c];
    }
  }
  if ((defaultButton_ != nil) && (c != nil) && ([(id) [c getWidget] conformsToProtocol: @protocol(RAREiContainer)])) {
    id<RAREiWidget> w = [((id<RAREiContainer>) check_protocol_cast([c getWidget], @protocol(RAREiContainer))) getWidgetWithNSString:defaultButton_];
    if ((w != nil) && ([(id) [w getDataComponent] isKindOfClass:[RAREButtonView class]])) {
      [((RAREButtonView *) check_class_cast([((id<RAREiPlatformComponent>) nil_chk([w getDataComponent])) getView], [RAREButtonView class])) setDefaultButtonWithBoolean:YES];
    }
  }
}

- (void)addManagedOverlayWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  if (c != nil) {
    [((RAREOverlayContainer *) nil_chk([self getOverlayContainer])) addManagedOverlayWithRAREiPlatformComponent:c];
  }
}

- (void)addOverlayWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  if (c != nil) {
    [((RAREOverlayContainer *) nil_chk([self getOverlayContainer])) addOverlayWithRAREiPlatformComponent:c];
  }
}

- (void)addWindowListenerWithRAREiWindowListener:(id<RAREiWindowListener>)l {
  [((RAREEventListenerList *) nil_chk([self getEventListenerList])) addWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiWindowListener)] withId:l];
}

- (void)center {
  [((RAREWindow *) nil_chk(window_)) centerOnScreen];
}

- (void)close {
  if (!closed_) {
    RAREWindowEvent *e = [RAREUtils fireWindowEventWithRAREEventListenerList:listenerList_ withId:self withRAREWindowEvent_TypeEnum:[RAREWindowEvent_TypeEnum WillClose]];
    if ((e == nil) || ![e isConsumed]) {
      if ((windowViewer_ == nil) || [windowViewer_ isClosingAllowed]) {
        [self dispose];
      }
    }
  }
}

- (void)dispose {
  closed_ = YES;
  if (window_ != nil) {
    @try {
      [window_ close];
      if (overlayContainer_ != nil) {
        [overlayContainer_ dispose];
      }
      if (target_ != nil) {
        [target_ disposeWithBoolean:YES];
      }
      if (titleWidget_ != nil) {
        [titleWidget_ dispose];
      }
      (void) [RAREUtils fireWindowEventWithRAREEventListenerList:listenerList_ withId:self withRAREWindowEvent_TypeEnum:[RAREWindowEvent_TypeEnum Closed]];
      [super dispose];
    }
    @finally {
      titleWidget_ = nil;
      window_ = nil;
      windowViewer_ = nil;
      target_ = nil;
      window_ = nil;
      overlayContainer_ = nil;
    }
  }
}

- (void)disposeOfWindow {
  [self dispose];
}

- (void)finishWindowSetupWithJavaUtilMap:(id<JavaUtilMap>)options {
  if (!undecorated_ && (titleWidget_ == nil)) {
    BOOL show = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBooleanWithNSString:@"Rare.Dialog.showCloseButton" withBoolean:YES];
    NSString *s = options != nil ? (NSString *) check_class_cast([options getWithId:@"showCloseButton"], [NSString class]) : nil;
    if (s != nil) {
      show = [RAREUTSNumber booleanValueWithNSString:s];
    }
    [((RAREWindow *) nil_chk(window_)) createDialogTitleBarWithRAREWindowViewer:windowViewer_ withBoolean:show];
    runtimeDecorations_ = YES;
  }
  NSString *s = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(options)) getWithId:@"keystrokes"], [NSString class]);
  if ((s != nil) && ![RAREPlatform isIOS]) {
    [RAREaPlatformHelper configureKeystrokesWithRAREiWidget:windowViewer_ withRAREiPlatformComponent:self withNSString:s];
  }
  defaultButton_ = (NSString *) check_class_cast([options getWithId:@"defaultButton"], [NSString class]);
  [RAREUtils setupWindowOptionsWithRAREFrame:self withJavaUtilMap:options];
}

- (id<RAREiAppContext>)getAppContext {
  return [RAREPlatform getAppContext];
}

- (id<RAREiPlatformComponent>)getComponent {
  return self;
}

- (RAREUIRectangle *)getInnerBoundsWithRAREUIRectangle:(RAREUIRectangle *)rect {
  return [((RAREWindow *) nil_chk(window_)) getInnerBoundsWithRAREUIRectangle:rect];
}

- (RAREUIDimension *)getInnerSizeWithRAREUIDimension:(RAREUIDimension *)size {
  RAREUIRectangle *rect = [self getInnerBoundsWithRAREUIRectangle:nil];
  if (size == nil) {
    size = [[RAREUIDimension alloc] init];
  }
  ((RAREUIDimension *) nil_chk(size))->width_ = [RAREUIScreen snapToSizeWithFloat:((RAREUIRectangle *) nil_chk(rect))->width_];
  size->height_ = [RAREUIScreen snapToSizeWithFloat:rect->height_];
  return size;
}

- (id<RAREiPlatformMenuBar>)getMenuBar {
  return [((RAREWindow *) nil_chk(window_)) getMenuBar];
}

- (int)getScreenX {
  return (int) [((RAREWindow *) nil_chk(window_)) getX];
}

- (int)getScreenY {
  return (int) [((RAREWindow *) nil_chk(window_)) getY];
}

- (id<RAREiStatusBar>)getStatusBar {
  return [((RAREWindow *) nil_chk(window_)) getStatusBar];
}

- (id<RAREiTarget>)getTarget {
  return target_;
}

- (NSString *)getTargetName {
  return (target_ == nil) ? nil : [target_ getName];
}

- (NSString *)getTitle {
  if (titleWidget_ != nil) {
    return [titleWidget_ getValueAsString];
  }
  return [((RAREWindow *) nil_chk(window_)) getTitle];
}

- (id<RAREiWidget>)getTitleWidget {
  return titleWidget_;
}

- (id<RAREiToolBarHolder>)getToolBarHolder {
  return [((RAREWindow *) nil_chk(window_)) getiToolBarHolder];
}

- (id)getUIWindow {
  return window_;
}

- (id<RAREiContainer>)getViewer {
  return windowViewer_;
}

- (RAREaWindowManager_WindowTypeEnum *)getWindowType {
  return windowType_;
}

- (RAREWindowViewer *)getWindowViewer {
  return windowViewer_;
}

- (void)hideWindow {
  [((RAREWindow *) nil_chk(window_)) setVisibleWithBoolean:NO];
}

- (BOOL)isAutoDispose {
  return autoDispose_;
}

- (BOOL)isDialog {
  return windowType_ == [RAREaWindowManager_WindowTypeEnum DIALOG];
}

- (BOOL)isMainWindow {
  return mainWindow_;
}

- (BOOL)isPopup {
  return windowType_ == [RAREaWindowManager_WindowTypeEnum POPUP];
}

- (BOOL)isShowing {
  if (window_ != nil) {
    return [window_ isShowing];
  }
  return !closed_ && [super isShowing];
}

- (BOOL)isTransparent {
  return transparent_;
}

- (BOOL)isUsesRuntimeDecorations {
  return runtimeDecorations_;
}

- (BOOL)isUndecorated {
  return undecorated_;
}

- (void)moveByWithFloat:(float)x
              withFloat:(float)y {
  if ((x != 0) && (y != 0)) {
    [((RAREWindow *) nil_chk(window_)) moveByWithFloat:x withFloat:y];
  }
}

- (void)moveToWithFloat:(float)x
              withFloat:(float)y {
  [self setLocationWithFloat:x withFloat:y];
}

- (void)pack {
  if (!mainWindow_) {
    [((RAREWindow *) nil_chk(window_)) pack];
  }
}

- (void)removeWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  if (([((RAREUTIdentityArrayList *) nil_chk(components_)) size] == 1) && ([components_ getWithInt:0] == c)) {
    [super removeWithRAREiPlatformComponent:c];
    if (overlayContainer_ != nil) {
      [overlayContainer_ setMainComponentWithRAREiPlatformComponent:nil];
    }
    else {
      [((RAREWindow *) nil_chk(window_)) setContentWithRAREiPlatformComponent:nil];
    }
  }
}

- (void)removeAll {
  [super removeAll];
  [((RAREWindow *) nil_chk(window_)) setContentWithRAREiPlatformComponent:nil];
  if (overlayContainer_ != nil) {
    [overlayContainer_ dispose];
    overlayContainer_ = nil;
  }
}

- (void)removeOverlayWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  if (overlayContainer_ != nil) {
    [overlayContainer_ removeOverlayWithRAREiPlatformComponent:c];
  }
}

- (void)removeWindowListenerWithRAREiWindowListener:(id<RAREiWindowListener>)l {
  if (listenerList_ != nil) {
    [listenerList_ removeWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiWindowListener)] withId:l];
  }
}

- (void)revalidate {
  [((RAREWindow *) nil_chk(window_)) revalidate];
}

- (void)setAutoDisposeWithBoolean:(BOOL)autoDispose {
  self->autoDispose_ = autoDispose;
}

- (void)setCanCloseWithBoolean:(BOOL)can {
  if (windowViewer_ != nil) {
    [windowViewer_ setCanCloseWithBoolean:can];
  }
}

- (void)setComponentPainterWithRAREiPlatformComponentPainter:(id<RAREiPlatformComponentPainter>)cp {
  [((RAREWindow *) nil_chk(window_)) setComponentPainterWithRAREiPlatformComponentPainter:cp];
}

- (void)setDefaultButtonWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)button {
}

- (void)setLocationWithInt:(int)x
                   withInt:(int)y {
  located_ = YES;
  [((RAREWindow *) nil_chk(window_)) setLocationWithFloat:x withFloat:y];
}

- (void)setMenuBarWithRAREiPlatformMenuBar:(id<RAREiPlatformMenuBar>)mb {
  [((RAREWindow *) nil_chk(window_)) setMenuBarWithRAREiPlatformMenuBar:mb];
}

- (void)setMovableWithBoolean:(BOOL)movable {
  [((RAREWindow *) nil_chk(window_)) setMovableWithBoolean:movable];
}

- (void)setPartialLocationWithRAREUIPoint:(RAREUIPoint *)partialLocation {
  self->partialLocation_ = partialLocation;
}

- (void)setPartialSizeWithRAREUIDimension:(RAREUIDimension *)partialSize {
  self->partialSize_ = partialSize;
}

- (void)setResizableWithBoolean:(BOOL)resizable {
  [((RAREWindow *) nil_chk(window_)) setResizableWithBoolean:resizable];
}

- (void)setSizeWithInt:(int)width
               withInt:(int)height {
  sized_ = YES;
  [((RAREWindow *) nil_chk(window_)) setSizeWithFloat:width withFloat:height];
}

- (void)setStatusBarWithRAREiStatusBar:(id<RAREiStatusBar>)sb {
  [((RAREWindow *) nil_chk(window_)) setStatusBarWithRAREiStatusBar:sb];
}

- (void)setTargetWithRAREiTarget:(id<RAREiTarget>)target {
  self->target_ = target;
}

- (void)setTitleWithNSString:(NSString *)title {
  if (titleWidget_ != nil) {
    [titleWidget_ setValueWithId:title];
  }
  else {
    [((RAREWindow *) nil_chk(window_)) setTitleWithNSString:title];
  }
}

- (void)setTitleWidgetWithRAREiWidget:(id<RAREiWidget>)widget {
  titleWidget_ = widget;
  [((RAREWindow *) nil_chk(window_)) setTitleViewWithRAREiPlatformComponent:(widget == nil) ? nil : [widget getContainerComponent]];
}

- (void)setToolBarHolderWithRAREiToolBarHolder:(id<RAREiToolBarHolder>)tbh {
  [((RAREWindow *) nil_chk(window_)) setToolBarHolderWithRAREiToolBarHolder:tbh];
}

- (void)setVisibleWithBoolean:(BOOL)visible {
  if (visible) {
    [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) closePopupWindowsWithBoolean:NO];
    if ((partialSize_ != nil) || (partialLocation_ != nil)) {
      [RAREUtils setWindowSizeAndLocationFromPartialWithRAREFrame:self withRAREUIPoint:partialLocation_ withRAREUIDimension:partialSize_];
      partialLocation_ = nil;
      partialSize_ = nil;
    }
    if (!sized_) {
      [self pack];
    }
    if (!located_) {
      [self center];
    }
    [((RAREUTIdentityArrayList *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getActiveWindows])) addIfNotPresentWithId:self];
  }
  [((RAREWindow *) nil_chk(window_)) setVisibleWithBoolean:visible];
}

- (void)showWindow {
  [self setVisibleWithBoolean:YES];
  [((RAREWindow *) nil_chk(window_)) requestFocus];
}

- (void)showWindowWithInt:(int)x
                  withInt:(int)y {
  [self setLocationWithInt:x withInt:y];
  [self setVisibleWithBoolean:YES];
  [((RAREWindow *) nil_chk(window_)) requestFocus];
}

- (void)toBack {
  [((RAREWindow *) nil_chk(window_)) toBack];
}

- (void)toFront {
  [((RAREWindow *) nil_chk(window_)) toFront];
}

- (void)update {
  [((RAREWindow *) nil_chk(window_)) revalidate];
}

- (void)setWindowViewerWithRAREWindowViewer:(RAREWindowViewer *)windowViewer {
  self->windowViewer_ = windowViewer;
}

- (RAREOverlayContainer *)getOverlayContainer {
  if (overlayContainer_ == nil) {
    RAREWindowPane *p = [((RAREWindow *) nil_chk(window_)) getWindowPane];
    id<RAREiPlatformComponent> oc = [((RAREWindowPane *) nil_chk(p)) getContent];
    [p setContentWithRAREiPlatformComponent:nil];
    overlayContainer_ = [[RAREOverlayContainer alloc] initWithRAREiPlatformComponent:oc];
    [p setContentWithRAREiPlatformComponent:overlayContainer_];
  }
  return overlayContainer_;
}

- (void)copyAllFieldsTo:(RAREFrame *)other {
  [super copyAllFieldsTo:other];
  other->autoDispose_ = autoDispose_;
  other->closed_ = closed_;
  other->defaultButton_ = defaultButton_;
  other->located_ = located_;
  other->mainWindow_ = mainWindow_;
  other->menuOffset_ = menuOffset_;
  other->overlayContainer_ = overlayContainer_;
  other->partialLocation_ = partialLocation_;
  other->partialSize_ = partialSize_;
  other->runtimeDecorations_ = runtimeDecorations_;
  other->sized_ = sized_;
  other->target_ = target_;
  other->titleWidget_ = titleWidget_;
  other->transparent_ = transparent_;
  other->undecorated_ = undecorated_;
  other->window_ = window_;
  other->windowType_ = windowType_;
  other->windowViewer_ = windowViewer_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getAppContext", NULL, "LRAREiAppContext", 0x1, NULL },
    { "getComponent", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getInnerBoundsWithRAREUIRectangle:", NULL, "LRAREUIRectangle", 0x1, NULL },
    { "getInnerSizeWithRAREUIDimension:", NULL, "LRAREUIDimension", 0x1, NULL },
    { "getMenuBar", NULL, "LRAREiPlatformMenuBar", 0x1, NULL },
    { "getStatusBar", NULL, "LRAREiStatusBar", 0x1, NULL },
    { "getTarget", NULL, "LRAREiTarget", 0x1, NULL },
    { "getTargetName", NULL, "LNSString", 0x1, NULL },
    { "getTitle", NULL, "LNSString", 0x1, NULL },
    { "getTitleWidget", NULL, "LRAREiWidget", 0x1, NULL },
    { "getToolBarHolder", NULL, "LRAREiToolBarHolder", 0x1, NULL },
    { "getUIWindow", NULL, "LNSObject", 0x1, NULL },
    { "getViewer", NULL, "LRAREiContainer", 0x1, NULL },
    { "getWindowType", NULL, "LRAREaWindowManager_WindowTypeEnum", 0x1, NULL },
    { "getWindowViewer", NULL, "LRAREWindowViewer", 0x1, NULL },
    { "isAutoDispose", NULL, "Z", 0x1, NULL },
    { "isDialog", NULL, "Z", 0x1, NULL },
    { "isMainWindow", NULL, "Z", 0x1, NULL },
    { "isPopup", NULL, "Z", 0x1, NULL },
    { "isShowing", NULL, "Z", 0x1, NULL },
    { "isTransparent", NULL, "Z", 0x1, NULL },
    { "isUsesRuntimeDecorations", NULL, "Z", 0x1, NULL },
    { "isUndecorated", NULL, "Z", 0x1, NULL },
    { "getOverlayContainer", NULL, "LRAREOverlayContainer", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "closed_", NULL, 0x0, "Z" },
    { "located_", NULL, 0x0, "Z" },
    { "sized_", NULL, 0x0, "Z" },
    { "menuOffset_", NULL, 0x4, "I" },
    { "undecorated_", NULL, 0x0, "Z" },
    { "transparent_", NULL, 0x0, "Z" },
    { "target_", NULL, 0x4, "LRAREiTarget" },
    { "titleWidget_", NULL, 0x4, "LRAREiWidget" },
    { "window_", NULL, 0x4, "LRAREWindow" },
    { "windowViewer_", NULL, 0x4, "LRAREWindowViewer" },
    { "overlayContainer_", NULL, 0x0, "LRAREOverlayContainer" },
    { "windowType_", NULL, 0x4, "LRAREaWindowManager_WindowTypeEnum" },
  };
  static J2ObjcClassInfo _RAREFrame = { "Frame", "com.appnativa.rare.ui", NULL, 0x1, 24, methods, 12, fields, 0, NULL};
  return &_RAREFrame;
}

@end
