//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple/com/appnativa/rare/ui/Frame.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iAppContext.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/platform/apple/ui/view/ButtonView.h"
#include "com/appnativa/rare/platform/apple/ui/view/PopupWindow.h"
#include "com/appnativa/rare/platform/apple/ui/view/View.h"
#include "com/appnativa/rare/platform/apple/ui/view/Window.h"
#include "com/appnativa/rare/scripting/WidgetContext.h"
#include "com/appnativa/rare/scripting/iScriptHandler.h"
#include "com/appnativa/rare/spot/StatusBar.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/Container.h"
#include "com/appnativa/rare/ui/Frame.h"
#include "com/appnativa/rare/ui/OverlayContainer.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIBorderHelper.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIImageIcon.h"
#include "com/appnativa/rare/ui/UIPoint.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/WidgetListener.h"
#include "com/appnativa/rare/ui/WindowPane.h"
#include "com/appnativa/rare/ui/WindowTarget.h"
#include "com/appnativa/rare/ui/aComponent.h"
#include "com/appnativa/rare/ui/event/iWindowListener.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformMenuBar.h"
#include "com/appnativa/rare/ui/iPlatformWindowManager.h"
#include "com/appnativa/rare/ui/iStatusBar.h"
#include "com/appnativa/rare/ui/iToolBarHolder.h"
#include "com/appnativa/rare/ui/iWindow.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/aContainer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iTarget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/appnativa/util/SNumber.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation RAREFrame

- (id)initWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)app
                       withRAREWindow:(RAREWindow *)win {
  if (self = [super initWithRAREParentView:win]) {
    menuOffset_ = 0;
    undecorated_ = NO;
    transparent_ = NO;
    self->window_ = win;
    appContext_ = app;
    mainWindow_ = YES;
    [self setNeedsHiearachyInvalidatedWithBoolean:NO];
  }
  return self;
}

- (id)initWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)app
                       withRAREWindow:(RAREWindow *)win
                         withNSString:(NSString *)targetName {
  if (self = [super initWithRAREParentView:win]) {
    menuOffset_ = 0;
    undecorated_ = NO;
    transparent_ = NO;
    self->window_ = win;
    appContext_ = app;
    if (targetName == nil) {
      targetName = [NSString stringWithFormat:@"_new_window_%@", [JavaLangInteger toHexStringWithInt:[self hash]]];
    }
    target_ = [[RAREWindowTarget alloc] initWithRAREiPlatformAppContext:app withNSString:targetName withRAREiParentComponent:self];
  }
  return self;
}

- (void)addWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c
                               withId:(id)constraints
                              withInt:(int)position {
  if (c != nil) {
    [((RAREUTIdentityArrayList *) nil_chk(components_)) clear];
    [components_ addWithId:c];
    if (overlayContainer_ != nil) {
      [overlayContainer_ setMainComponentWithRAREiPlatformComponent:c];
    }
    else {
      [((RAREWindow *) nil_chk(window_)) setContentWithRAREiPlatformComponent:c];
    }
  }
  if ((defaultButton_ != nil) && (c != nil) && ([(id) [c getWidget] conformsToProtocol: @protocol(RAREiContainer)])) {
    id<RAREiWidget> w = [((id<RAREiContainer>) check_protocol_cast([c getWidget], @protocol(RAREiContainer))) getWidgetWithNSString:defaultButton_];
    if ((w != nil) && ([(id) [w getDataComponent] isKindOfClass:[RAREButtonView class]])) {
      [((RAREButtonView *) check_class_cast([((id<RAREiPlatformComponent>) nil_chk([w getDataComponent])) getView], [RAREButtonView class])) setDefaultButtonWithBoolean:YES];
    }
  }
}

- (void)addManagedOverlayWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  if (c != nil) {
    [((RAREOverlayContainer *) nil_chk([self getOverlayContainer])) addManagedOverlayWithRAREiPlatformComponent:c];
  }
}

- (void)addOverlayWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  if (c != nil) {
    [((RAREOverlayContainer *) nil_chk([self getOverlayContainer])) addOverlayWithRAREiPlatformComponent:c];
  }
}

- (void)addWindowListenerWithRAREiWindowListener:(id<RAREiWindowListener>)l {
  [((RAREWindow *) nil_chk(window_)) addWindowListenerWithRAREiWindowListener:l];
}

- (void)center {
  [((RAREWindow *) nil_chk(window_)) centerOnScreen];
}

- (void)close {
  [((RAREWindow *) nil_chk(window_)) close];
}

- (void)dispose {
  if (window_ != nil) {
    [window_ close];
    if (overlayContainer_ != nil) {
      [overlayContainer_ dispose];
    }
    if (target_ != nil) {
      [target_ disposeWithBoolean:YES];
    }
    if (menuBar_ != nil) {
      [menuBar_ dispose];
    }
    if (statusBar_ != nil) {
      [statusBar_ dispose];
    }
    if (toolbarHolder_ != nil) {
      [toolbarHolder_ dispose];
    }
    if (titleWidget_ != nil) {
      [titleWidget_ dispose];
    }
    [super dispose];
    titleWidget_ = nil;
    toolbarHolder_ = nil;
    statusBar_ = nil;
    window_ = nil;
    windowViewer_ = nil;
    menuBar_ = nil;
    target_ = nil;
    window_ = nil;
    overlayContainer_ = nil;
    appContext_ = nil;
  }
}

- (void)disposeOfWindow {
  [self dispose];
}

- (id<RAREiAppContext>)getAppContext {
  return [RAREPlatform getAppContext];
}

- (id<RAREiPlatformComponent>)getComponent {
  return self;
}

- (RAREUIRectangle *)getInnerBoundsWithRAREUIRectangle:(RAREUIRectangle *)rect {
  return [((RAREWindow *) nil_chk(window_)) getInnerBoundsWithRAREUIRectangle:rect];
}

- (RAREUIDimension *)getInnerSizeWithRAREUIDimension:(RAREUIDimension *)size {
  RAREUIRectangle *rect = [self getInnerBoundsWithRAREUIRectangle:nil];
  if (size == nil) {
    size = [[RAREUIDimension alloc] init];
  }
  ((RAREUIDimension *) nil_chk(size))->width_ = [RAREUIScreen snapToSizeWithFloat:((RAREUIRectangle *) nil_chk(rect))->width_];
  size->height_ = [RAREUIScreen snapToSizeWithFloat:rect->height_];
  return size;
}

- (id<RAREiPlatformMenuBar>)getMenuBar {
  return menuBar_;
}

- (RAREOverlayContainer *)getOverlayContainer {
  if (overlayContainer_ == nil) {
    RAREWindowPane *p = [((RAREWindow *) nil_chk(window_)) getWindowPane];
    id<RAREiPlatformComponent> oc = [((RAREWindowPane *) nil_chk(p)) getContent];
    [p setContentWithRAREiPlatformComponent:nil];
    overlayContainer_ = [[RAREOverlayContainer alloc] initWithRAREiPlatformComponent:oc];
    [p setContentWithRAREiPlatformComponent:overlayContainer_];
  }
  return overlayContainer_;
}

- (int)getScreenX {
  return (int) [((RAREWindow *) nil_chk(window_)) getX];
}

- (int)getScreenY {
  return (int) [((RAREWindow *) nil_chk(window_)) getY];
}

- (id<RAREiStatusBar>)getStatusBar {
  return statusBar_;
}

- (id<RAREiTarget>)getTarget {
  return target_;
}

- (NSString *)getTargetName {
  return (target_ == nil) ? nil : [target_ getName];
}

- (NSString *)getTitle {
  if (titleWidget_ != nil) {
    return [titleWidget_ getValueAsString];
  }
  return [((RAREWindow *) nil_chk(window_)) getTitle];
}

- (id<RAREiWidget>)getTitleWidget {
  return titleWidget_;
}

- (id<RAREiToolBarHolder>)getToolBarHolder {
  return toolbarHolder_;
}

- (id)getUIWindow {
  return window_;
}

- (id<RAREiContainer>)getViewer {
  return windowViewer_;
}

- (RAREWindowViewer *)getWindowViewer {
  return windowViewer_;
}

- (void)hideWindow {
  [((RAREWindow *) nil_chk(window_)) setVisibleWithBoolean:NO];
}

- (BOOL)isAutoDispose {
  return autoDispose_;
}

- (BOOL)isDialog {
  return dialog_;
}

- (BOOL)isMainWindow {
  return mainWindow_;
}

- (BOOL)isPopup {
  return popup_;
}

- (BOOL)isTransparent {
  return undecorated_;
}

- (BOOL)isUndecorated {
  return undecorated_;
}

- (void)moveByWithFloat:(float)x
              withFloat:(float)y {
  if ((x != 0) && (y != 0)) {
    [((RAREWindow *) nil_chk(window_)) moveByWithFloat:x withFloat:y];
  }
}

- (void)moveToWithFloat:(float)x
              withFloat:(float)y {
  [self setLocationWithFloat:x withFloat:y];
}

- (void)pack {
  if (!mainWindow_) {
    RAREUIDimension *d = [self getPreferredSize];
    if (![self isUndecorated]) {
      RAREUIDimension *dd = [RAREaPlatformHelper getWindowDecorationSize];
      ((RAREUIDimension *) nil_chk(d))->width_ += ((RAREUIDimension *) nil_chk(dd))->width_;
      d->height_ += dd->height_;
    }
    RAREUIDimension *sd = [RAREScreenUtils getSize];
    ((RAREUIDimension *) nil_chk(d))->width_ = [JavaLangMath minWithFloat:((RAREUIDimension *) nil_chk(sd))->width_ - 4 withFloat:d->width_];
    d->height_ = [JavaLangMath minWithFloat:sd->height_ - 24 withFloat:d->height_];
    [self setSizeWithFloat:d->width_ withFloat:d->height_];
  }
}

- (void)removeWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  if (([((RAREUTIdentityArrayList *) nil_chk(components_)) size] == 1) && ([components_ getWithInt:0] == c)) {
    [super removeWithRAREiPlatformComponent:c];
    if (overlayContainer_ != nil) {
      [overlayContainer_ setMainComponentWithRAREiPlatformComponent:nil];
    }
    else {
      [((RAREWindow *) nil_chk(window_)) setContentWithRAREiPlatformComponent:nil];
    }
  }
}

- (void)removeAll {
  [super removeAll];
  [((RAREWindow *) nil_chk(window_)) setContentWithRAREiPlatformComponent:nil];
  if (overlayContainer_ != nil) {
    [overlayContainer_ dispose];
    overlayContainer_ = nil;
  }
}

- (void)removeOverlayWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  if (overlayContainer_ != nil) {
    [overlayContainer_ removeOverlayWithRAREiPlatformComponent:c];
  }
}

- (void)removeWindowListenerWithRAREiWindowListener:(id<RAREiWindowListener>)l {
  [((RAREWindow *) nil_chk(window_)) removeWindowListenerWithRAREiWindowListener:l];
}

- (void)setAutoDisposeWithBoolean:(BOOL)autoDispose {
  self->autoDispose_ = autoDispose;
}

- (void)setCanCloseWithBoolean:(BOOL)can {
  if (windowViewer_ != nil) {
    [windowViewer_ setCanCloseWithBoolean:can];
  }
}

- (void)setComponentPainterWithRAREiPlatformComponentPainter:(id<RAREiPlatformComponentPainter>)cp {
  [((RAREWindow *) nil_chk(window_)) setComponentPainterWithRAREiPlatformComponentPainter:cp];
}

- (void)setDefaultButtonWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)button {
}

- (void)setLocationWithInt:(int)x
                   withInt:(int)y {
  located_ = YES;
  [((RAREWindow *) nil_chk(window_)) setLocationWithFloat:x withFloat:y];
}

- (id<RAREiPlatformMenuBar>)setMenuBarWithRAREiPlatformMenuBar:(id<RAREiPlatformMenuBar>)mb {
  id<RAREiPlatformMenuBar> omb = menuBar_;
  [((RAREWindow *) nil_chk(window_)) setMenuBarWithRAREiPlatformMenuBar:mb];
  menuBar_ = mb;
  return omb;
}

- (void)setMovableWithBoolean:(BOOL)movable {
  [((RAREWindow *) nil_chk(window_)) setMovableWithBoolean:movable];
}

- (void)setPartialLocationWithRAREUIPoint:(RAREUIPoint *)partialLocation {
  self->partialLocation_ = partialLocation;
}

- (void)setPartialSizeWithRAREUIDimension:(RAREUIDimension *)partialSize {
  self->partialSize_ = partialSize;
}

- (void)setResizableWithBoolean:(BOOL)resizable {
  [((RAREWindow *) nil_chk(window_)) setResizableWithBoolean:resizable];
}

- (void)setSizeWithInt:(int)width
               withInt:(int)height {
  sized_ = YES;
  [((RAREWindow *) nil_chk(window_)) setSizeWithFloat:width withFloat:height];
}

- (id<RAREiStatusBar>)setStatusBarWithRAREiStatusBar:(id<RAREiStatusBar>)sb {
  id<RAREiStatusBar> osb = statusBar_;
  [((RAREWindow *) nil_chk(window_)) setStatusBarWithRAREiStatusBar:sb];
  statusBar_ = sb;
  return osb;
}

- (void)setTargetWithRAREiTarget:(id<RAREiTarget>)target {
  self->target_ = target;
}

- (void)setTitleWithNSString:(NSString *)title {
  if (titleWidget_ != nil) {
    [titleWidget_ setValueWithId:title];
  }
  else {
    [((RAREWindow *) nil_chk(window_)) setTitleWithNSString:title];
  }
}

- (void)setTitleWidgetWithRAREiWidget:(id<RAREiWidget>)widget {
  titleWidget_ = widget;
  [((RAREWindow *) nil_chk(window_)) setTitleViewWithRAREiPlatformComponent:(widget == nil) ? nil : [widget getContainerComponent]];
}

- (id<RAREiToolBarHolder>)setToolBarHolderWithRAREiToolBarHolder:(id<RAREiToolBarHolder>)tbh {
  id<RAREiToolBarHolder> otbh = toolbarHolder_;
  toolbarHolder_ = tbh;
  [((RAREWindow *) nil_chk(window_)) setToolBarWithRAREiToolBarHolder:tbh];
  return otbh;
}

- (void)setupWindowWithRAREWindowViewer:(RAREWindowViewer *)parent
                        withJavaUtilMap:(id<JavaUtilMap>)options
                            withBoolean:(BOOL)emulate {
  if (parent == nil) {
    parent = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getWindowViewer];
  }
  RAREFrame *main = (RAREFrame *) check_class_cast([((id<RAREiWindow>) nil_chk([((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getWindowManager])) getMainWindow])) getComponent], [RAREFrame class]);
  id<RAREiPlatformComponent> mainComponent = [((RAREFrame *) nil_chk(main)) getComponent];
  id<RAREiScriptHandler> sh = [((RAREWindowViewer *) nil_chk(parent)) getScriptHandler];
  windowViewer_ = [[RAREWindowViewer alloc] initWithRAREiPlatformAppContext:appContext_ withNSString:[((id<RAREiTarget>) nil_chk(target_)) getName] withRAREFrame:self withRAREWindowViewer:parent withRAREiScriptHandler:sh];
  (void) [((id<RAREiScriptHandler>) nil_chk(sh)) setScriptingContextWithRAREiViewer:windowViewer_ withNSString:nil withNSString:nil withNSString:nil withBoolean:YES];
  if (emulate) {
    RAREPaintBucket *pb = (RAREPaintBucket *) check_class_cast([((id<RAREiPlatformComponent>) nil_chk(mainComponent)) getClientPropertyWithNSString:[RAREiConstants RARE_PAINTBUCKET_PROPERTY]], [RAREPaintBucket class]);
    [((RAREPaintBucket *) nil_chk(pb)) installWithRAREiPlatformComponent:self];
    RAREActionLink *link = (RAREActionLink *) check_class_cast([mainComponent getClientPropertyWithNSString:[RAREiConstants RARE_WINDOW_TITLELINK]], [RAREActionLink class]);
    if (link != nil) {
      id<RAREiWidget> w = [RAREaContainer createWidgetWithRAREiContainer:windowViewer_ withRAREActionLink:link];
      if (w != nil) {
        [self setTitleWidgetWithRAREiWidget:w];
      }
    }
  }
  if (options == nil) {
    return;
  }
  id o = [((id<JavaUtilMap>) nil_chk(options)) getWithId:@"cpborder"];
  id<RAREiPlatformBorder> b = nil;
  if ([o conformsToProtocol: @protocol(RAREiPlatformBorder)]) {
    b = (id<RAREiPlatformBorder>) check_protocol_cast(o, @protocol(RAREiPlatformBorder));
  }
  else if (o != nil) {
    b = [RAREUIBorderHelper createBorderWithNSString:[o description]];
  }
  if (b != nil) {
    [self setBorderWithRAREiPlatformBorder:b];
  }
  NSString *s = (NSString *) check_class_cast([options getWithId:@"status"], [NSString class]);
  if ((s != nil) && ([s sequenceLength] > 0)) {
    s = [s trim];
    if (statusBar_ == nil) {
      RARESPOTStatusBar *sb = nil;
      if ([RAREUTSNumber booleanValueWithNSString:(NSString *) check_class_cast([options getWithId:@"resizable"], [NSString class])] && ![@"false" equalsIgnoreCase:(NSString *) check_class_cast([options getWithId:@"resizeCorner"], [NSString class])]) {
        sb = [[RARESPOTStatusBar alloc] init];
        [((SPOTBoolean *) nil_chk(sb->showMemoryUsage_)) setValueWithBoolean:NO];
        [((SPOTBoolean *) nil_chk(sb->showInsertOverwrite_)) setValueWithBoolean:NO];
        [((SPOTBoolean *) nil_chk(sb->showTime_)) setValueWithBoolean:NO];
        [((SPOTBoolean *) nil_chk(sb->showResizeCorner_)) setValueWithBoolean:YES];
      }
      (void) [self setStatusBarWithRAREiStatusBar:[((id<RAREiPlatformWindowManager>) nil_chk([appContext_ getWindowManager])) createStatusBarWithRARESPOTStatusBar:sb]];
    }
    [((id<RAREiStatusBar>) nil_chk(statusBar_)) showMessageWithNSString:s];
  }
  s = (NSString *) check_class_cast([options getWithId:@"keystrokes"], [NSString class]);
  if (s != nil) {
    [RAREaPlatformHelper configureKeystrokesWithRAREiWidget:[appContext_ getRootViewer] withRAREiPlatformComponent:self withNSString:s];
  }
  id<JavaUtilMap> map = [RAREaWidgetListener createEventMapWithJavaUtilMap:options];
  if (map != nil) {
    [windowViewer_ setWidgetListenerWithRAREaWidgetListener:[[RAREWidgetListener alloc] initWithRAREiWidget:windowViewer_ withJavaUtilMap:map withRAREiScriptHandler:[windowViewer_ getScriptHandler]]];
  }
  defaultButton_ = (NSString *) check_class_cast([options getWithId:@"defaultButton"], [NSString class]);
  [RAREUtils setupWindowOptionsWithRAREFrame:self withJavaUtilMap:options];
}

- (void)setViewerWithRAREWindowViewer:(RAREWindowViewer *)wv {
  windowViewer_ = wv;
}

- (void)setVisibleWithBoolean:(BOOL)visible {
  if (visible) {
    [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) closePopupWindowsWithBoolean:NO];
    if ((partialSize_ != nil) || (partialLocation_ != nil)) {
      [RAREUtils setWindowSizeAndLocationFromPartialWithRAREFrame:self withRAREUIPoint:partialLocation_ withRAREUIDimension:partialSize_];
      partialLocation_ = nil;
      partialSize_ = nil;
    }
    if (!sized_) {
      [self pack];
    }
    if (!located_) {
      [self center];
    }
    [((RAREUTIdentityArrayList *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getActiveWindows])) addIfNotPresentWithId:self];
  }
  [((RAREWindow *) nil_chk(window_)) setVisibleWithBoolean:visible];
}

- (void)showWindow {
  [self setVisibleWithBoolean:YES];
  [((RAREWindow *) nil_chk(window_)) requestFocus];
}

- (void)showWindowWithInt:(int)x
                  withInt:(int)y {
  [self setLocationWithInt:x withInt:y];
  [self setVisibleWithBoolean:YES];
  [((RAREWindow *) nil_chk(window_)) requestFocus];
}

- (void)toBack {
  [((RAREWindow *) nil_chk(window_)) toBack];
}

- (void)toFront {
  [((RAREWindow *) nil_chk(window_)) toFront];
}

- (void)update {
  [((RAREWindow *) nil_chk(window_)) revalidate];
}

- (void)revalidate {
  [((RAREWindow *) nil_chk(window_)) revalidate];
}

+ (RAREFrame *)createWithRAREiWidget:(id<RAREiWidget>)context
                        withNSString:(NSString *)title
                        withNSString:(NSString *)target
                         withBoolean:(BOOL)modal
                         withBoolean:(BOOL)decorated {
  id<JavaUtilMap> map = [[JavaUtilHashMap alloc] init];
  if (title != nil) {
    (void) [map putWithId:@"title" withId:title];
  }
  (void) [map putWithId:@"modal" withId:[JavaLangBoolean valueOfWithBoolean:modal]];
  (void) [map putWithId:@"decorated" withId:[JavaLangBoolean valueOfWithBoolean:decorated]];
  return [RAREFrame createFromOptionsWithRAREiWidget:context withNSString:target withJavaUtilMap:map];
}

+ (RAREFrame *)createFromOptionsWithRAREiWidget:(id<RAREiWidget>)context
                                   withNSString:(NSString *)targetName
                                withJavaUtilMap:(id<JavaUtilMap>)options {
  id<RAREiPlatformAppContext> app = [((id<RAREiWidget>) nil_chk(context)) getAppContext];
  BOOL modal = YES;
  BOOL dialog = NO;
  BOOL popup = NO;
  NSString *type = @"frame";
  id o;
  o = [((id<JavaUtilMap>) nil_chk(options)) getWithId:@"modal"];
  if ([o isKindOfClass:[JavaLangBoolean class]]) {
    modal = [(JavaLangBoolean *) check_class_cast(o, [JavaLangBoolean class]) booleanValue];
  }
  else if ([o isKindOfClass:[NSString class]]) {
    modal = [RAREUTSNumber booleanValueWithNSString:(NSString *) check_class_cast(o, [NSString class])];
  }
  type = (NSString *) check_class_cast([options getWithId:@"windowtype"], [NSString class]);
  if (type == nil) {
    type = (NSString *) check_class_cast([options getWithId:@"dialog"], [NSString class]);
    if ([@"true" equalsIgnoreCase:type] || [RAREPlatform isIOS]) {
      type = @"dialog";
    }
    else {
      type = @"frame";
    }
  }
  RAREWindow *win;
  o = [options getWithId:@"emulateMainWindow"];
  if (o == nil) {
    o = [((RAREUIProperties *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(app)) getUIDefaults])) getWithNSString:@"Rare.emulateMainWindow"];
  }
  BOOL emulate = ((o == [JavaLangBoolean getTRUE]) || [@"true" isEqual:o]);
  BOOL decorated = YES;
  BOOL transparent = NO;
  if (emulate) {
    RAREFrame *main = (RAREFrame *) check_class_cast([((id<RAREiWindow>) nil_chk([((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(app)) getWindowManager])) getMainWindow])) getComponent], [RAREFrame class]);
    decorated = ![((RAREFrame *) nil_chk(main)) isUndecorated];
    transparent = [main isTransparent];
  }
  o = [options getWithId:@"decorated"];
  if (o != nil) {
    decorated = [@"true" isEqual:o] || (o == [JavaLangBoolean getTRUE]);
    if (!emulate) {
      transparent = !decorated;
    }
  }
  o = [options getWithId:@"opaque"];
  if (o != nil) {
    transparent = [@"false" isEqual:o] || (o == [JavaLangBoolean getFALSE]);
  }
  if ([((NSString *) nil_chk(type)) equalsIgnoreCase:@"dialog"]) {
    dialog = YES;
    win = [RAREaPlatformHelper createDialogWithRAREWindow:[((RAREView *) nil_chk([((id<RAREiPlatformComponent>) nil_chk([context getDataComponent])) getView])) getWindow] withBoolean:transparent withBoolean:decorated withBoolean:modal];
    popup = YES;
  }
  else if ([type equalsIgnoreCase:@"popup"]) {
    win = [RAREaPlatformHelper createPopupWithBoolean:YES withBoolean:transparent];
    popup = YES;
  }
  else if ([type equalsIgnoreCase:@"popup_orphan"]) {
    win = [RAREaPlatformHelper createPopupWithBoolean:NO withBoolean:transparent];
  }
  else {
    win = [RAREPlatformHelper createWindowWithBoolean:modal withBoolean:transparent withBoolean:decorated];
  }
  RAREFrame *frame = [[RAREFrame alloc] initWithRAREiPlatformAppContext:app withRAREWindow:win withNSString:targetName];
  RAREWindowViewer *parent = [RAREPlatform getWindowViewerWithRAREiWidget:context];
  frame->dialog_ = dialog;
  frame->popup_ = popup;
  frame->undecorated_ = !decorated;
  if (decorated) {
    [((RAREWindow *) nil_chk(win)) setTitleWithNSString:[((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getWindowManager])) getTitle]];
    [win setIconWithRAREiPlatformIcon:[((id<JavaUtilList>) nil_chk([((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getWindowManager])) getWindowIcons])) getWithInt:0]];
  }
  [frame setupWindowWithRAREWindowViewer:parent withJavaUtilMap:options withBoolean:emulate];
  return frame;
}

- (void)copyAllFieldsTo:(RAREFrame *)other {
  [super copyAllFieldsTo:other];
  other->appContext_ = appContext_;
  other->autoDispose_ = autoDispose_;
  other->defaultButton_ = defaultButton_;
  other->dialog_ = dialog_;
  other->located_ = located_;
  other->mainWindow_ = mainWindow_;
  other->menuBar_ = menuBar_;
  other->menuOffset_ = menuOffset_;
  other->overlayContainer_ = overlayContainer_;
  other->partialLocation_ = partialLocation_;
  other->partialSize_ = partialSize_;
  other->popup_ = popup_;
  other->sized_ = sized_;
  other->statusBar_ = statusBar_;
  other->target_ = target_;
  other->titleWidget_ = titleWidget_;
  other->toolbarHolder_ = toolbarHolder_;
  other->transparent_ = transparent_;
  other->undecorated_ = undecorated_;
  other->window_ = window_;
  other->windowViewer_ = windowViewer_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getAppContext", NULL, "LRAREiAppContext", 0x1, NULL },
    { "getComponent", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getInnerBoundsWithRAREUIRectangle:", NULL, "LRAREUIRectangle", 0x1, NULL },
    { "getInnerSizeWithRAREUIDimension:", NULL, "LRAREUIDimension", 0x1, NULL },
    { "getMenuBar", NULL, "LRAREiPlatformMenuBar", 0x1, NULL },
    { "getOverlayContainer", NULL, "LRAREOverlayContainer", 0x0, NULL },
    { "getStatusBar", NULL, "LRAREiStatusBar", 0x1, NULL },
    { "getTarget", NULL, "LRAREiTarget", 0x1, NULL },
    { "getTargetName", NULL, "LNSString", 0x1, NULL },
    { "getTitle", NULL, "LNSString", 0x1, NULL },
    { "getTitleWidget", NULL, "LRAREiWidget", 0x1, NULL },
    { "getToolBarHolder", NULL, "LRAREiToolBarHolder", 0x1, NULL },
    { "getUIWindow", NULL, "LNSObject", 0x1, NULL },
    { "getViewer", NULL, "LRAREiContainer", 0x1, NULL },
    { "getWindowViewer", NULL, "LRAREWindowViewer", 0x1, NULL },
    { "isAutoDispose", NULL, "Z", 0x1, NULL },
    { "isDialog", NULL, "Z", 0x1, NULL },
    { "isMainWindow", NULL, "Z", 0x1, NULL },
    { "isPopup", NULL, "Z", 0x1, NULL },
    { "isTransparent", NULL, "Z", 0x1, NULL },
    { "isUndecorated", NULL, "Z", 0x1, NULL },
    { "setMenuBarWithRAREiPlatformMenuBar:", NULL, "LRAREiPlatformMenuBar", 0x1, NULL },
    { "setStatusBarWithRAREiStatusBar:", NULL, "LRAREiStatusBar", 0x1, NULL },
    { "setToolBarHolderWithRAREiToolBarHolder:", NULL, "LRAREiToolBarHolder", 0x1, NULL },
    { "setupWindowWithRAREWindowViewer:withJavaUtilMap:withBoolean:", NULL, "V", 0x4, NULL },
    { "createWithRAREiWidget:withNSString:withNSString:withBoolean:withBoolean:", NULL, "LRAREFrame", 0x9, NULL },
    { "createFromOptionsWithRAREiWidget:withNSString:withJavaUtilMap:", NULL, "LRAREFrame", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "located_", NULL, 0x0, "Z" },
    { "sized_", NULL, 0x0, "Z" },
    { "menuOffset_", NULL, 0x4, "I" },
    { "undecorated_", NULL, 0x0, "Z" },
    { "transparent_", NULL, 0x0, "Z" },
    { "appContext_", NULL, 0x4, "LRAREiPlatformAppContext" },
    { "menuBar_", NULL, 0x4, "LRAREiPlatformMenuBar" },
    { "statusBar_", NULL, 0x4, "LRAREiStatusBar" },
    { "target_", NULL, 0x4, "LRAREiTarget" },
    { "titleWidget_", NULL, 0x4, "LRAREiWidget" },
    { "toolbarHolder_", NULL, 0x4, "LRAREiToolBarHolder" },
    { "window_", NULL, 0x4, "LRAREWindow" },
    { "windowViewer_", NULL, 0x4, "LRAREWindowViewer" },
    { "overlayContainer_", NULL, 0x0, "LRAREOverlayContainer" },
  };
  static J2ObjcClassInfo _RAREFrame = { "Frame", "com.appnativa.rare.ui", NULL, 0x1, 27, methods, 14, fields, 0, NULL};
  return &_RAREFrame;
}

@end
