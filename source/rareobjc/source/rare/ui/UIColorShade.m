//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple/com/appnativa/rare/ui/UIColorShade.java
//
//  Created by decoteaud on 3/11/16.
//

#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/Conversions.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/SimpleColorStateList.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorShade.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/iPaintedButton.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/PainterHolder.h"
#include "com/appnativa/rare/ui/painter/UISimpleBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"

@implementation RAREUIColorShade

static long long int RAREUIColorShade_colorUpdateTime_;

+ (long long int)colorUpdateTime {
  return RAREUIColorShade_colorUpdateTime_;
}

+ (long long int *)colorUpdateTimeRef {
  return &RAREUIColorShade_colorUpdateTime_;
}

- (id)initWithRAREiBackgroundPainter:(id<RAREiBackgroundPainter>)painter {
  if (self = [super initWithInt:([((id<RAREiBackgroundPainter>) nil_chk(painter)) getBackgroundColor] == nil) ? 0 : [((RAREUIColor *) nil_chk([painter getBackgroundColor])) getColor]]) {
    alpha_ = 255;
    self->backgroundPainter_ = painter;
    self->shade_ = [RAREColorUtils_ShadeEnum BGPAINT];
  }
  return self;
}

- (id)initRAREUIColorShadeWithInt:(int)color {
  if (self = [super initWithInt:color]) {
    alpha_ = 255;
  }
  return self;
}

- (id)initWithInt:(int)color {
  return [self initRAREUIColorShadeWithInt:color];
}

- (id)initWithRARESimpleColorStateList:(RARESimpleColorStateList *)list {
  if (self = [super initWithRAREUIColor:[((RARESimpleColorStateList *) nil_chk(list)) getDefaultColor]]) {
    alpha_ = 255;
    self->colorStateList_ = list;
    self->shade_ = [RAREColorUtils_ShadeEnum COLOR_LIST];
  }
  return self;
}

- (id)initWithInt:(int)c
withRAREColorUtils_ShadeEnum:(RAREColorUtils_ShadeEnum *)shade {
  if (self = [self initRAREUIColorShadeWithInt:c]) {
    self->shade_ = shade;
  }
  return self;
}

- (id)initWithRAREUIColor:(RAREUIColor *)color
withRAREiBackgroundPainter:(id<RAREiBackgroundPainter>)bp {
  if (self = [self initRAREUIColorShadeWithRAREUIColor:color withRAREColorUtils_ShadeEnum:[RAREColorUtils_ShadeEnum BGPAINT]]) {
    backgroundPainter_ = bp;
  }
  return self;
}

- (id)initWithRAREUIColor:(RAREUIColor *)c
                  withInt:(int)lumAdjustment {
  if (self = [self initRAREUIColorShadeWithRAREUIColor:c]) {
    shade_ = [RAREColorUtils_ShadeEnum LUM_ADJUSTMENT];
    self->lumAdjustment_ = lumAdjustment;
  }
  return self;
}

- (id)initWithRAREUIColor:(RAREUIColor *)bg
    withRAREPainterHolder:(RAREPainterHolder *)ph {
  if (self = [self initRAREUIColorShadeWithRAREUIColor:bg withRAREColorUtils_ShadeEnum:[RAREColorUtils_ShadeEnum BGPAINT]]) {
    self->painterHolder_ = ph;
    if (((RAREPainterHolder *) nil_chk(ph))->normalPainter_ != nil) {
      backgroundPainter_ = [ph->normalPainter_ getBackgroundPainter];
    }
  }
  return self;
}

- (id)initRAREUIColorShadeWithRAREUIColor:(RAREUIColor *)c
             withRAREColorUtils_ShadeEnum:(RAREColorUtils_ShadeEnum *)shade {
  if (self = [self initRAREUIColorShadeWithRAREUIColor:c]) {
    self->shade_ = shade;
  }
  return self;
}

- (id)initWithRAREUIColor:(RAREUIColor *)c
withRAREColorUtils_ShadeEnum:(RAREColorUtils_ShadeEnum *)shade {
  return [self initRAREUIColorShadeWithRAREUIColor:c withRAREColorUtils_ShadeEnum:shade];
}

- (id)initWithRAREUIColor:(RAREUIColor *)c
             withNSString:(NSString *)key {
  if (self = [self initRAREUIColorShadeWithRAREUIColor:c]) {
    self->shade_ = [RAREColorUtils_ShadeEnum UIMANAGER];
    self->colorKey_ = key;
  }
  return self;
}

- (id)initRAREUIColorShadeWithRAREUIColor:(RAREUIColor *)color {
  if (self = [super initWithInt:[((RAREUIColor *) nil_chk(color)) getColor]]) {
    alpha_ = 255;
    sourceColor_ = color;
  }
  return self;
}

- (id)initWithRAREUIColor:(RAREUIColor *)color {
  return [self initRAREUIColorShadeWithRAREUIColor:color];
}

- (void)copyShadeWithRAREUIColorShade:(RAREUIColorShade *)cs {
  self->sourceColor_ = ((RAREUIColorShade *) nil_chk(cs))->sourceColor_;
  self->shade_ = cs->shade_;
  self->backgroundPainter_ = cs->backgroundPainter_;
  self->lumAdjustment_ = cs->lumAdjustment_;
  self->alpha_ = cs->alpha_;
  self->colorStateList_ = cs->colorStateList_;
  [self clearCache];
}

- (id)clone {
  return [super clone];
}

- (NSString *)description {
  if (colorKey_ != nil) {
    return colorKey_;
  }
  if (backgroundPainter_ != nil) {
    return [backgroundPainter_ description];
  }
  NSString *s = [RAREConversions colorToHEXStringWithRAREUIColor:self];
  return [RAREColorUtils shadeKeyToStringWithRAREColorUtils_ShadeEnum:shade_ withNSString:s withInt:lumAdjustment_ withInt:alpha_];
}

- (void)setAlphaWithInt:(int)alpha {
  self->alpha_ = alpha;
  proxy_ = nil;
}

- (void)setPaintBucketWithRAREPaintBucket:(RAREPaintBucket *)pb {
  if (backgroundPainter_ != nil) {
    [((RAREPaintBucket *) nil_chk(pb)) setBackgroundPainterWithRAREiBackgroundPainter:backgroundPainter_];
  }
  else {
    [((RAREPaintBucket *) nil_chk(pb)) setBackgroundColorWithRAREUIColor:self];
  }
}

- (void)setToColorWithRAREUIColor:(RAREUIColor *)c {
  self->sourceColor_ = c;
  self->shade_ = [RAREColorUtils_ShadeEnum UIMANAGER];
  self->backgroundPainter_ = nil;
  self->lumAdjustment_ = 0;
  self->alpha_ = 255;
  [self clearCache];
}

- (id<RAREiBackgroundPainter>)getBackgroundPainter {
  return backgroundPainter_;
}

- (int)getColor {
  if (![self isDynamic]) {
    return [super getColor];
  }
  int c;
  if (shade_ == [RAREColorUtils_ShadeEnum UIMANAGER]) {
    RAREUIColor *cc = (colorKey_ == nil) ? nil : [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:colorKey_];
    cc = (cc == nil) ? sourceColor_ : cc;
    if ([cc isKindOfClass:[RAREUIColorShade class]]) {
      if (cc == self) {
        c = [((RAREUIColor *) nil_chk(sourceColor_)) getColor];
      }
      else {
        c = [cc getColor];
      }
    }
    else {
      sourceColor_ = cc;
      c = [cc getColor];
    }
    if (!colorCached_ || (c != cachedColor_)) {
      proxy_ = nil;
    }
    colorCached_ = YES;
    cachedColor_ = c;
    return c;
  }
  if (sourceColor_ == nil) {
    return color_;
  }
  c = [((RAREUIColor *) nil_chk(sourceColor_)) getColor];
  if (colorCached_ && (c == cachedColor_)) {
    return cachedRGB_;
  }
  colorCached_ = YES;
  cachedColor_ = c;
  proxy_ = nil;
  switch ([shade_ ordinal]) {
    case RAREColorUtils_Shade_DARKER:
    c = [RAREColorUtils darkerWithInt:c];
    break;
    case RAREColorUtils_Shade_DARKER_DARKER:
    c = [RAREColorUtils darkerWithInt:[RAREColorUtils darkerWithInt:c]];
    break;
    case RAREColorUtils_Shade_BRIGHTER:
    c = [RAREColorUtils brighterWithInt:c];
    break;
    case RAREColorUtils_Shade_BRIGHTER_BRIGHTER:
    c = [RAREColorUtils brighterWithInt:[RAREColorUtils brighterWithInt:c]];
    break;
    case RAREColorUtils_Shade_LUM_ADJUSTMENT:
    c = [RAREColorUtils adjustLuminanceWithInt:c withInt:lumAdjustment_];
    break;
    case RAREColorUtils_Shade_DYN_LUM_ADJUSTMENT:
    if ([sourceColor_ isDarkColor]) {
      c = [RAREColorUtils adjustLuminanceWithInt:c withInt:lumAdjustment_];
    }
    else {
      c = [RAREColorUtils adjustLuminanceWithInt:c withInt:-lumAdjustment_];
    }
    break;
    case RAREColorUtils_Shade_ALPHA:
    c = [RAREColorUtils setAlphaWithInt:c withInt:alpha_];
    break;
    default:
    break;
  }
  cachedRGB_ = c;
  return c;
}

- (NSString *)getColorKey {
  return colorKey_;
}

- (RARESimpleColorStateList *)getColorStateList {
  return colorStateList_;
}

- (RAREUIColor *)getColorWithRAREiPaintedButton_ButtonStateEnum:(RAREiPaintedButton_ButtonStateEnum *)state {
  if (colorStateList_ != nil) {
    return [colorStateList_ getColorWithRAREiPaintedButton_ButtonStateEnum:state];
  }
  return [super getColorWithRAREiPaintedButton_ButtonStateEnum:state];
}

- (RAREUIColor *)getDisabledColor {
  if (colorStateList_ != nil) {
    return [colorStateList_ getDisabledColor];
  }
  return [super getDisabledColor];
}

- (RAREPainterHolder *)getPainterHolder {
  return painterHolder_;
}

- (RAREColorUtils_ShadeEnum *)getShade {
  return shade_;
}

- (BOOL)isDynamic {
  return ((shade_ != [RAREColorUtils_ShadeEnum UIMANAGER]) || [RAREColorUtils KEEP_COLOR_KEYS]) || ((sourceColor_ != nil) && [sourceColor_ isDynamic]);
}

- (id)getAPColor {
  if (RAREUIColorShade_colorUpdateTime_ != updateTime_) {
    updateTime_ = RAREUIColorShade_colorUpdateTime_;
    if ([self isDynamic]) {
      proxy_ = nil;
    }
  }
  return [super getAPColor];
}

- (BOOL)isSimpleColor {
  if (backgroundPainter_ != nil) {
    return NO;
  }
  return YES;
}

- (BOOL)isEqual:(id)obj {
  if ((obj == nil) || !([obj isKindOfClass:[RAREUIColorShade class]])) {
    return NO;
  }
  if (obj == self) {
    return YES;
  }
  RAREUIColorShade *cs = (RAREUIColorShade *) check_class_cast(obj, [RAREUIColorShade class]);
  if (((RAREUIColorShade *) nil_chk(cs))->shade_ != shade_) {
    return NO;
  }
  switch ([shade_ ordinal]) {
    case RAREColorUtils_Shade_UIMANAGER:
    return [((NSString *) nil_chk(colorKey_)) isEqual:cs->colorKey_];
    case RAREColorUtils_Shade_BGPAINT:
    return cs->backgroundPainter_ == backgroundPainter_;
    case RAREColorUtils_Shade_ALPHA:
    return cs->alpha_ == alpha_;
    case RAREColorUtils_Shade_COLOR_LIST:
    return cs->colorStateList_ == colorStateList_;
    case RAREColorUtils_Shade_LUM_ADJUSTMENT:
    return cs->lumAdjustment_ == lumAdjustment_;
    case RAREColorUtils_Shade_BRIGHTER:
    case RAREColorUtils_Shade_BRIGHTER_BRIGHTER:
    case RAREColorUtils_Shade_DARKER:
    case RAREColorUtils_Shade_DARKER_DARKER:
    return [((RAREUIColor *) nil_chk(cs->sourceColor_)) isEqual:sourceColor_];
    default:
    return NO;
  }
}

- (void)setColorKeyWithNSString:(NSString *)name {
  colorKey_ = name;
}

- (id<RAREiBackgroundPainter>)getPainter {
  if (backgroundPainter_ != nil) {
    return backgroundPainter_;
  }
  return [[RAREUISimpleBackgroundPainter alloc] initWithRAREUIColor:self];
}

- (void)setShadeWithRAREColorUtils_ShadeEnum:(RAREColorUtils_ShadeEnum *)shade {
  self->shade_ = shade;
  [self clearCache];
}

- (void)clearCache {
  proxy_ = nil;
  colorCached_ = NO;
}

- (void)copyAllFieldsTo:(RAREUIColorShade *)other {
  [super copyAllFieldsTo:other];
  other->alpha_ = alpha_;
  other->backgroundPainter_ = backgroundPainter_;
  other->cachedColor_ = cachedColor_;
  other->cachedRGB_ = cachedRGB_;
  other->colorCached_ = colorCached_;
  other->colorKey_ = colorKey_;
  other->colorStateList_ = colorStateList_;
  other->lumAdjustment_ = lumAdjustment_;
  other->myColorUpdateTime_ = myColorUpdateTime_;
  other->painterHolder_ = painterHolder_;
  other->shade_ = shade_;
  other->sourceColor_ = sourceColor_;
  other->updateTime_ = updateTime_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithRAREUIColor:", NULL, NULL, 0x4, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "getBackgroundPainter", NULL, "LRAREiBackgroundPainter", 0x1, NULL },
    { "getColorKey", NULL, "LNSString", 0x1, NULL },
    { "getColorStateList", NULL, "LRARESimpleColorStateList", 0x1, NULL },
    { "getColorWithRAREiPaintedButton_ButtonStateEnum:", NULL, "LRAREUIColor", 0x1, NULL },
    { "getDisabledColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getPainterHolder", NULL, "LRAREPainterHolder", 0x1, NULL },
    { "getShade", NULL, "LRAREColorUtils_ShadeEnum", 0x1, NULL },
    { "isDynamic", NULL, "Z", 0x1, NULL },
    { "getAPColor", NULL, "LNSObject", 0x1, NULL },
    { "isSimpleColor", NULL, "Z", 0x1, NULL },
    { "getPainter", NULL, "LRAREiBackgroundPainter", 0x4, NULL },
    { "clearCache", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "colorUpdateTime_", NULL, 0x9, "J" },
    { "myColorUpdateTime_", NULL, 0x1, "J" },
  };
  static J2ObjcClassInfo _RAREUIColorShade = { "UIColorShade", "com.appnativa.rare.ui", NULL, 0x1, 14, methods, 2, fields, 0, NULL};
  return &_RAREUIColorShade;
}

@end
