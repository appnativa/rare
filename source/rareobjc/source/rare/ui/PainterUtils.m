//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/PainterUtils.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/ui/BorderUtils.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/GraphicsComposite.h"
#include "com/appnativa/rare/ui/PainterUtils.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorShade.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/UIStroke.h"
#include "com/appnativa/rare/ui/border/UICompoundBorder.h"
#include "com/appnativa/rare/ui/border/UIEmptyBorder.h"
#include "com/appnativa/rare/ui/border/UILineBorder.h"
#include "com/appnativa/rare/ui/iComposite.h"
#include "com/appnativa/rare/ui/iListHandler.h"
#include "com/appnativa/rare/ui/iPath.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformPaint.h"
#include "com/appnativa/rare/ui/iPlatformPath.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/PainterHolder.h"
#include "com/appnativa/rare/ui/painter/UIBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/ui/painter/UISimpleBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iGradientPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformPainter.h"
#include "com/appnativa/rare/ui/renderer/aListItemRenderer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSequence.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/Throwable.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

@implementation RAREPainterUtils

static NSString * RAREPainterUtils_COMBOBOX_BUTTON_KEY_ = @"_Rare.ComboBox.button.painterHolder";
static NSString * RAREPainterUtils_COMBOBOX_KEY_ = @"_Rare.ComboBox.painterHolder";
static NSString * RAREPainterUtils_HYPERLINK_KEY_ = @"_Rare.PushButton.hyperlink.painterHolder";
static NSString * RAREPainterUtils_PUSHBUTTON_KEY_ = @"_Rare.PushButton.painterHolder";
static NSString * RAREPainterUtils_RED_HYPERLINK_KEY_ = @"_Rare.PushButton.hyperlink.redPainterHolder";
static NSString * RAREPainterUtils_SPINNER_BUTTON_KEY_ = @"_Rare.Spinner.button.painterHolder";
static NSString * RAREPainterUtils_TOGGLE_TOOLBARBUTTON_KEY_ = @"_Rare.PushButton.toolbar.toggle.painterHolder";
static NSString * RAREPainterUtils_TOOLBARBUTTON_KEY_ = @"_Rare.PushButton.toolbar.painterHolder";
static JavaUtilHashMap * RAREPainterUtils_compositeMap_;

+ (NSString *)COMBOBOX_BUTTON_KEY {
  return RAREPainterUtils_COMBOBOX_BUTTON_KEY_;
}

+ (void)setCOMBOBOX_BUTTON_KEY:(NSString *)COMBOBOX_BUTTON_KEY {
  RAREPainterUtils_COMBOBOX_BUTTON_KEY_ = COMBOBOX_BUTTON_KEY;
}

+ (NSString *)COMBOBOX_KEY {
  return RAREPainterUtils_COMBOBOX_KEY_;
}

+ (void)setCOMBOBOX_KEY:(NSString *)COMBOBOX_KEY {
  RAREPainterUtils_COMBOBOX_KEY_ = COMBOBOX_KEY;
}

+ (NSString *)HYPERLINK_KEY {
  return RAREPainterUtils_HYPERLINK_KEY_;
}

+ (void)setHYPERLINK_KEY:(NSString *)HYPERLINK_KEY {
  RAREPainterUtils_HYPERLINK_KEY_ = HYPERLINK_KEY;
}

+ (NSString *)PUSHBUTTON_KEY {
  return RAREPainterUtils_PUSHBUTTON_KEY_;
}

+ (void)setPUSHBUTTON_KEY:(NSString *)PUSHBUTTON_KEY {
  RAREPainterUtils_PUSHBUTTON_KEY_ = PUSHBUTTON_KEY;
}

+ (NSString *)RED_HYPERLINK_KEY {
  return RAREPainterUtils_RED_HYPERLINK_KEY_;
}

+ (void)setRED_HYPERLINK_KEY:(NSString *)RED_HYPERLINK_KEY {
  RAREPainterUtils_RED_HYPERLINK_KEY_ = RED_HYPERLINK_KEY;
}

+ (NSString *)SPINNER_BUTTON_KEY {
  return RAREPainterUtils_SPINNER_BUTTON_KEY_;
}

+ (void)setSPINNER_BUTTON_KEY:(NSString *)SPINNER_BUTTON_KEY {
  RAREPainterUtils_SPINNER_BUTTON_KEY_ = SPINNER_BUTTON_KEY;
}

+ (NSString *)TOGGLE_TOOLBARBUTTON_KEY {
  return RAREPainterUtils_TOGGLE_TOOLBARBUTTON_KEY_;
}

+ (void)setTOGGLE_TOOLBARBUTTON_KEY:(NSString *)TOGGLE_TOOLBARBUTTON_KEY {
  RAREPainterUtils_TOGGLE_TOOLBARBUTTON_KEY_ = TOGGLE_TOOLBARBUTTON_KEY;
}

+ (NSString *)TOOLBARBUTTON_KEY {
  return RAREPainterUtils_TOOLBARBUTTON_KEY_;
}

+ (void)setTOOLBARBUTTON_KEY:(NSString *)TOOLBARBUTTON_KEY {
  RAREPainterUtils_TOOLBARBUTTON_KEY_ = TOOLBARBUTTON_KEY;
}

+ (JavaUtilHashMap *)compositeMap {
  return RAREPainterUtils_compositeMap_;
}

- (id)init {
  return [super init];
}

+ (void)clearCache {
  RAREUIProperties *props = [RAREPlatform getUIDefaults];
  [((RAREUIProperties *) nil_chk(props)) putWithNSString:RAREPainterUtils_COMBOBOX_BUTTON_KEY_ withId:nil];
  [props putWithNSString:RAREPainterUtils_COMBOBOX_KEY_ withId:nil];
  [props putWithNSString:RAREPainterUtils_PUSHBUTTON_KEY_ withId:nil];
  [props putWithNSString:RAREPainterUtils_RED_HYPERLINK_KEY_ withId:nil];
  [props putWithNSString:RAREPainterUtils_HYPERLINK_KEY_ withId:nil];
  [props putWithNSString:RAREPainterUtils_TOGGLE_TOOLBARBUTTON_KEY_ withId:nil];
  [props putWithNSString:RAREPainterUtils_TOOLBARBUTTON_KEY_ withId:nil];
  [props putWithNSString:RAREPainterUtils_SPINNER_BUTTON_KEY_ withId:nil];
}

+ (id<RAREiPlatformComponentPainter>)createProgressPopupPainter {
  id o = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:@"Rare.ProgressPopup.background"];
  if ([o isKindOfClass:[RAREPaintBucket class]]) {
    return [((RAREPaintBucket *) check_class_cast(o, [RAREPaintBucket class])) getCachedComponentPainter];
  }
  id<RAREiBackgroundPainter> bp = [((RAREUIProperties *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getUIDefaults])) getBackgroundPainterWithNSString:@"Rare.ProgressPopup.background"];
  if (bp == nil) {
    bp = [[RAREUISimpleBackgroundPainter alloc] initWithRAREUIColor:[RAREColorUtils getBackground]];
  }
  RAREUICompoundBorder *b = [[RAREUICompoundBorder alloc] init];
  [b setInsideBorderWithRAREiPlatformBorder:[[RAREUIEmptyBorder alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_16] withFloat:[RAREScreenUtils PLATFORM_PIXELS_8] withFloat:[RAREScreenUtils PLATFORM_PIXELS_16] withFloat:[RAREScreenUtils PLATFORM_PIXELS_8]]];
  [b setOutsideBorderWithRAREiPlatformBorder:[[RAREUILineBorder alloc] initWithRAREUIColor:[RAREaUILineBorder getDefaultLineColor] withFloat:[RAREScreenUtils PLATFORM_PIXELS_2] withFloat:[RAREScreenUtils PLATFORM_PIXELS_4] withFloat:[RAREScreenUtils PLATFORM_PIXELS_4]]];
  RAREUIComponentPainter *cp = [[RAREUIComponentPainter alloc] init];
  [cp setBackgroundPainterWithRAREiBackgroundPainter:bp withBoolean:NO];
  [cp setBorderWithRAREiPlatformBorder:b];
  return cp;
}

+ (RAREPainterHolder *)createButtonPaintHolder {
  RAREPainterHolder *ph = (RAREPainterHolder *) check_class_cast([((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:RAREPainterUtils_PUSHBUTTON_KEY_], [RAREPainterHolder class]);
  if (ph == nil) {
    ph = [RAREPainterHolder createWithNSString:@"Rare.PushButton." withBoolean:NO withBoolean:YES withBoolean:NO];
    if (((RAREPainterHolder *) nil_chk(ph))->normalPainter_ == nil) {
      ph->normalPainter_ = [RAREPainterUtils getUnpressedButtonPaintBucket];
      [((RAREPaintBucket *) nil_chk(ph->normalPainter_)) setBorderWithRAREiPlatformBorder:[RAREBorderUtils getDefaultButtonBorder]];
    }
    if ((ph->pressedPainter_ == nil) && (ph->selectedPainter_ == nil)) {
      ph->pressedPainter_ = [RAREPainterUtils getPressedButtonPaintBucket];
    }
    [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:RAREPainterUtils_PUSHBUTTON_KEY_ withId:ph];
    [ph setSharedWithBoolean:YES];
  }
  return ph;
}

+ (RAREPainterHolder *)createComboBoxButtonPaintHolder {
  RAREPainterHolder *ph = (RAREPainterHolder *) check_class_cast([((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:RAREPainterUtils_COMBOBOX_BUTTON_KEY_], [RAREPainterHolder class]);
  if (ph == nil) {
    ph = [RAREPainterHolder createWithNSString:@"Rare.ComboBox.button." withBoolean:NO withBoolean:YES withBoolean:NO];
    if (((RAREPainterHolder *) nil_chk(ph))->normalPainter_ == nil) {
      ph->normalPainter_ = [RAREColorUtils getPaintBucketWithNSString:@"Rare.background-30,Rare.background+5"];
      ph->pressedPainter_ = [RAREPainterUtils getPressedButtonPaintBucket];
    }
    [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:RAREPainterUtils_COMBOBOX_BUTTON_KEY_ withId:ph];
    [ph setSharedWithBoolean:YES];
  }
  return ph;
}

+ (RAREPainterHolder *)createComboBoxPaintHolder {
  RAREPainterHolder *ph = (RAREPainterHolder *) check_class_cast([((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:RAREPainterUtils_COMBOBOX_KEY_], [RAREPainterHolder class]);
  if (ph == nil) {
    ph = [RAREPainterHolder createWithNSString:@"Rare.ComboBox." withBoolean:NO withBoolean:YES withBoolean:NO];
    if (((RAREPainterHolder *) nil_chk(ph))->normalPainter_ == nil) {
      ph->normalPainter_ = [RAREColorUtils getPaintBucketWithNSString:@"Rare.background-15,Rare.background+15"];
    }
    [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:RAREPainterUtils_COMBOBOX_KEY_ withId:ph];
    [ph setSharedWithBoolean:YES];
  }
  return ph;
}

+ (RAREPainterHolder *)createHyperlinkPaintHolder {
  RAREPainterHolder *ph = (RAREPainterHolder *) check_class_cast([((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:RAREPainterUtils_HYPERLINK_KEY_], [RAREPainterHolder class]);
  if (ph == nil) {
    ph = [RAREPainterHolder createWithNSString:@"Rare.PushButton.hyperlink." withBoolean:NO withBoolean:YES withBoolean:NO];
    if (((RAREPainterHolder *) nil_chk(ph))->normalPainter_ == nil) {
      ph->normalPainter_ = [[RAREPaintBucket alloc] init];
      [ph->normalPainter_ setBorderWithRAREiPlatformBorder:[RAREBorderUtils getDefaultEmptyButtonBorder]];
    }
    if (ph->foregroundColor_ == nil) {
      RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.PushButton.hyperlinkColor"];
      if (c == nil) {
        c = [RAREColorUtils getForeground];
      }
      ph->foregroundColor_ = c;
    }
    if (ph->pressedPainter_ == nil) {
      ph->pressedPainter_ = [[RAREPaintBucket alloc] init];
      [ph->pressedPainter_ setBorderWithRAREiPlatformBorder:[((RAREPaintBucket *) nil_chk(ph->normalPainter_)) getBorder]];
      [ph->pressedPainter_ setForegroundColorWithRAREUIColor:[RAREColorUtils getPressedVersionWithRAREUIColor:ph->foregroundColor_]];
    }
    [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:RAREPainterUtils_HYPERLINK_KEY_ withId:ph];
    [ph setSharedWithBoolean:YES];
  }
  return ph;
}

+ (RAREPainterHolder *)createPaintHolderFromAttributesWithRAREiWidget:(id<RAREiWidget>)context
                                                      withJavaUtilMap:(id<JavaUtilMap>)attrs {
  if ((attrs == nil) || [attrs isEmpty]) {
    return nil;
  }
  RAREPaintBucket *pb = nil;
  RAREPaintBucket *ppb = nil;
  RAREPaintBucket *rpb = nil;
  RAREPaintBucket *dpb = nil;
  id<RAREiPlatformIcon> icon = nil;
  id<RAREiPlatformIcon> ricon = nil;
  id<RAREiPlatformIcon> dicon = nil;
  id<RAREiPlatformIcon> picon = nil;
  id<RAREiPlatformIcon> sicon = nil;
  RAREUIColor *fg = nil;
  NSString *s = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"bgColor"], [NSString class]);
  if (s != nil) {
    pb = [RAREColorUtils getPaintBucketWithNSString:s];
  }
  s = (NSString *) check_class_cast([attrs getWithId:@"pressedBgColor"], [NSString class]);
  if (s != nil) {
    ppb = [RAREColorUtils getPaintBucketWithNSString:s];
  }
  s = (NSString *) check_class_cast([attrs getWithId:@"rolloverBgColor"], [NSString class]);
  if (s != nil) {
    rpb = [RAREColorUtils getPaintBucketWithNSString:s];
  }
  s = (NSString *) check_class_cast([attrs getWithId:@"disabledBgColor"], [NSString class]);
  if (s != nil) {
    dpb = [RAREColorUtils getPaintBucketWithNSString:s];
  }
  s = (NSString *) check_class_cast([attrs getWithId:@"Icon"], [NSString class]);
  if (s != nil) {
    icon = [((id<RAREiWidget>) nil_chk(context)) getIconWithNSString:s withNSString:nil];
  }
  s = (NSString *) check_class_cast([attrs getWithId:@"pressedIcon"], [NSString class]);
  if (s != nil) {
    picon = [((id<RAREiWidget>) nil_chk(context)) getIconWithNSString:s withNSString:nil];
  }
  s = (NSString *) check_class_cast([attrs getWithId:@"rolloverIcon"], [NSString class]);
  if (s != nil) {
    ricon = [((id<RAREiWidget>) nil_chk(context)) getIconWithNSString:s withNSString:nil];
  }
  s = (NSString *) check_class_cast([attrs getWithId:@"disabledIcon"], [NSString class]);
  if (s != nil) {
    dicon = [((id<RAREiWidget>) nil_chk(context)) getIconWithNSString:s withNSString:nil];
  }
  s = (NSString *) check_class_cast([attrs getWithId:@"selectedIcon"], [NSString class]);
  if (s != nil) {
    sicon = [((id<RAREiWidget>) nil_chk(context)) getIconWithNSString:s withNSString:nil];
  }
  s = (NSString *) check_class_cast([attrs getWithId:@"fgColor"], [NSString class]);
  if (s != nil) {
    fg = [RAREColorUtils getColorWithNSString:s];
  }
  if ((fg == nil) && (pb == nil) && (ppb == nil) && (rpb == nil) && (dpb == nil) && (icon == nil) && (sicon == nil) && (ricon == nil) && (dicon == nil) && (picon == nil)) {
    return nil;
  }
  RAREPainterHolder *ph = [[RAREPainterHolder alloc] initWithRAREiPlatformIcon:icon withRAREiPlatformIcon:sicon withRAREiPlatformIcon:ricon withRAREiPlatformIcon:picon withRAREiPlatformIcon:dicon];
  ph->normalPainter_ = pb;
  ph->pressedPainter_ = ppb;
  ph->rolloverPainter_ = rpb;
  ph->disabledPainter_ = dpb;
  ph->foregroundColor_ = fg;
  return ph;
}

+ (RAREPainterHolder *)createPaintHolderFromSequenceWithRAREiWidget:(id<RAREiWidget>)context
                                                   withSPOTSequence:(SPOTSequence *)seq {
  RAREPaintBucket *pb = nil;
  RAREPaintBucket *ppb = nil;
  RAREPaintBucket *rpb = nil;
  RAREPaintBucket *dpb = nil;
  id<RAREiPlatformIcon> icon = nil;
  id<RAREiPlatformIcon> ricon = nil;
  id<RAREiPlatformIcon> dicon = nil;
  id<RAREiPlatformIcon> picon = nil;
  id<RAREiPlatformIcon> sicon = nil;
  RAREUIColor *fg = nil;
  id<iSPOTElement> s = [((SPOTSequence *) nil_chk(seq)) spot_elementForWithNSString:@"bgColor"];
  if ([(id) s isKindOfClass:[SPOTPrintableString class]]) {
    pb = [RAREColorUtils getPaintBucketWithSPOTPrintableString:(SPOTPrintableString *) check_class_cast(s, [SPOTPrintableString class])];
  }
  s = [seq spot_elementForWithNSString:@"pressedBgColor"];
  if ([(id) s isKindOfClass:[SPOTPrintableString class]]) {
    ppb = [RAREColorUtils getPaintBucketWithSPOTPrintableString:(SPOTPrintableString *) check_class_cast(s, [SPOTPrintableString class])];
  }
  s = [seq spot_elementForWithNSString:@"rolloverBgColor"];
  if ([(id) s isKindOfClass:[SPOTPrintableString class]]) {
    rpb = [RAREColorUtils getPaintBucketWithSPOTPrintableString:(SPOTPrintableString *) check_class_cast(s, [SPOTPrintableString class])];
  }
  s = [seq spot_elementForWithNSString:@"disabledBgColor"];
  if ([(id) s isKindOfClass:[SPOTPrintableString class]]) {
    dpb = [RAREColorUtils getPaintBucketWithSPOTPrintableString:(SPOTPrintableString *) check_class_cast(s, [SPOTPrintableString class])];
  }
  s = [seq spot_elementForWithNSString:@"icon"];
  if ([(id) s isKindOfClass:[SPOTPrintableString class]]) {
    icon = [((id<RAREiWidget>) nil_chk(context)) getIconWithSPOTPrintableString:(SPOTPrintableString *) check_class_cast(s, [SPOTPrintableString class])];
  }
  s = [seq spot_elementForWithNSString:@"pressedIcon"];
  if ([(id) s isKindOfClass:[SPOTPrintableString class]]) {
    picon = [((id<RAREiWidget>) nil_chk(context)) getIconWithSPOTPrintableString:(SPOTPrintableString *) check_class_cast(s, [SPOTPrintableString class])];
  }
  s = [seq spot_elementForWithNSString:@"rolloverIcon"];
  if ([(id) s isKindOfClass:[SPOTPrintableString class]]) {
    ricon = [((id<RAREiWidget>) nil_chk(context)) getIconWithSPOTPrintableString:(SPOTPrintableString *) check_class_cast(s, [SPOTPrintableString class])];
  }
  s = [seq spot_elementForWithNSString:@"disabledIcon"];
  if ([(id) s isKindOfClass:[SPOTPrintableString class]]) {
    dicon = [((id<RAREiWidget>) nil_chk(context)) getIconWithSPOTPrintableString:(SPOTPrintableString *) check_class_cast(s, [SPOTPrintableString class])];
  }
  s = [seq spot_elementForWithNSString:@"selectedIcon"];
  if ([(id) s isKindOfClass:[SPOTPrintableString class]]) {
    sicon = [((id<RAREiWidget>) nil_chk(context)) getIconWithSPOTPrintableString:(SPOTPrintableString *) check_class_cast(s, [SPOTPrintableString class])];
  }
  s = [seq spot_elementForWithNSString:@"fgColor"];
  if ([(id) s isKindOfClass:[SPOTPrintableString class]]) {
    fg = [RAREColorUtils getColorWithNSString:[((SPOTPrintableString *) check_class_cast(s, [SPOTPrintableString class])) stringValue]];
  }
  if ((fg == nil) && (pb == nil) && (ppb == nil) && (rpb == nil) && (dpb == nil) && (icon == nil) && (sicon != nil) && (ricon == nil) && (dicon == nil) && (picon == nil)) {
    return nil;
  }
  RAREPainterHolder *ph = [[RAREPainterHolder alloc] initWithRAREiPlatformIcon:icon withRAREiPlatformIcon:sicon withRAREiPlatformIcon:ricon withRAREiPlatformIcon:picon withRAREiPlatformIcon:dicon];
  ph->normalPainter_ = pb;
  ph->pressedPainter_ = ppb;
  ph->rolloverPainter_ = rpb;
  ph->disabledPainter_ = dpb;
  ph->foregroundColor_ = fg;
  return ph;
}

+ (RAREPainterHolder *)createRedHyperlinkPainterHolder {
  RAREPainterHolder *ph = (RAREPainterHolder *) check_class_cast([((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:RAREPainterUtils_RED_HYPERLINK_KEY_], [RAREPainterHolder class]);
  if (ph == nil) {
    ph = (RAREPainterHolder *) check_class_cast([((RAREPainterHolder *) nil_chk([RAREPainterUtils createHyperlinkPaintHolder])) clone], [RAREPainterHolder class]);
    RAREUIColor *fg = [RAREPlatformHelper getColorStateListWithRAREUIColor:[RAREUIColor RED] withRAREUIColor:[((RAREUIColor *) nil_chk([RAREUIColor RED])) getDisabledColor] withRAREUIColor:[RAREColorUtils getPressedVersionWithRAREUIColor:[RAREUIColor RED]]];
    [((RAREPainterHolder *) nil_chk(ph)) setForegroundColorWithRAREUIColor:fg];
    [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:RAREPainterUtils_RED_HYPERLINK_KEY_ withId:ph];
  }
  return ph;
}

+ (RAREPainterHolder *)createSpinnerButtonPaintHolder {
  RAREPainterHolder *ph = (RAREPainterHolder *) check_class_cast([((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:RAREPainterUtils_SPINNER_BUTTON_KEY_], [RAREPainterHolder class]);
  if (ph == nil) {
    ph = [RAREPainterHolder createWithNSString:@"Rare.Spinner.button." withBoolean:NO withBoolean:NO withBoolean:NO];
    if (((RAREPainterHolder *) nil_chk(ph))->foregroundColor_ == nil) {
      ph->foregroundColor_ = [RAREColorUtils getForeground];
    }
    if (ph->normalPainter_ == nil) {
      ph->normalPainter_ = [RAREColorUtils getPaintBucketWithNSString:@"Rare.background,Rare.backgroundDkShadow"];
      ph->pressedPainter_ = [RAREPainterUtils getPressedButtonPaintBucket];
    }
    [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:RAREPainterUtils_SPINNER_BUTTON_KEY_ withId:ph];
    [ph setSharedWithBoolean:YES];
  }
  return ph;
}

+ (RAREPaintBucket *)getPressedButtonPaintBucket {
  RAREPaintBucket *pb = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getPaintBucketWithNSString:@"Rare.PushButton.pressedPainter"];
  if (pb != nil) {
    return pb;
  }
  return [RAREColorUtils getPaintBucketWithNSString:@"Rare.backgroundDkShadow,Rare.background"];
}

+ (RAREPaintBucket *)getUnpressedButtonPaintBucket {
  RAREPaintBucket *pb = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getPaintBucketWithNSString:@"Rare.PushButton.painter"];
  if (pb != nil) {
    return pb;
  }
  return [RAREColorUtils getPaintBucketWithNSString:@"Rare.background-5,Rare.background+5"];
}

+ (RAREPainterHolder *)createToggleToolBarButtonPaintHolder {
  RAREPainterHolder *ph = (RAREPainterHolder *) check_class_cast([((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:RAREPainterUtils_TOGGLE_TOOLBARBUTTON_KEY_], [RAREPainterHolder class]);
  if (ph == nil) {
    ph = [RAREPainterHolder createWithNSString:@"Rare.PushButton.toolbar.toggle." withBoolean:NO withBoolean:NO withBoolean:NO];
    if (ph == nil) {
      ph = [RAREPainterUtils createToolBarButtonPaintHolder];
    }
    else {
      if (ph->foregroundColor_ == nil) {
        ph->foregroundColor_ = [RAREColorUtils getForeground];
      }
      if (ph->pressedPainter_ == nil) {
        ph->pressedPainter_ = [RAREPainterUtils getPressedButtonPaintBucket];
        [((RAREPaintBucket *) nil_chk(ph->pressedPainter_)) setBorderWithRAREiPlatformBorder:[RAREBorderUtils getToolbarPressedButtonBorder]];
        if (ph->selectedPainter_ == nil) {
          ph->selectedPainter_ = [RAREColorUtils getPaintBucketWithNSString:@"Rare.backgroundDkShadow"];
          [((RAREPaintBucket *) nil_chk(ph->selectedPainter_)) setBorderWithRAREiPlatformBorder:[ph->pressedPainter_ getBorder]];
        }
      }
      if (ph->normalPainter_ == nil) {
        ph->normalPainter_ = [[RAREPaintBucket alloc] init];
      }
      if ([((RAREPaintBucket *) nil_chk(ph->normalPainter_)) getBorder] == nil) {
        RAREUIInsets *insets = [((id<RAREiPlatformBorder>) nil_chk([((RAREPaintBucket *) nil_chk(ph->pressedPainter_)) getBorder])) getBorderInsetsWithRAREUIInsets:[[RAREUIInsets alloc] init]];
        [ph->normalPainter_ setBorderWithRAREiPlatformBorder:[[RAREUIEmptyBorder alloc] initWithRAREUIInsets:insets]];
      }
    }
    [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:RAREPainterUtils_TOGGLE_TOOLBARBUTTON_KEY_ withId:ph];
    [((RAREPainterHolder *) nil_chk(ph)) setSharedWithBoolean:YES];
  }
  return ph;
}

+ (RAREPainterHolder *)createToolBarButtonPaintHolder {
  RAREPainterHolder *ph = (RAREPainterHolder *) check_class_cast([((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:RAREPainterUtils_TOOLBARBUTTON_KEY_], [RAREPainterHolder class]);
  if (ph == nil) {
    ph = [RAREPainterHolder createWithNSString:@"Rare.PushButton.toolbar." withBoolean:NO withBoolean:NO withBoolean:NO];
    if (((RAREPainterHolder *) nil_chk(ph))->rolloverPainter_ == nil) {
      ph->rolloverPainter_ = [RAREColorUtils getPaintBucketWithNSString:@"Rare.background,Rare.backgroundDkShadow"];
      [((RAREPaintBucket *) nil_chk(ph->rolloverPainter_)) setBorderWithRAREiPlatformBorder:[RAREBorderUtils getToolbarPressedButtonBorder]];
    }
    if (ph->pressedPainter_ == nil) {
      ph->pressedPainter_ = ph->rolloverPainter_;
    }
    if (ph->normalPainter_ == nil) {
      ph->normalPainter_ = [[RAREPaintBucket alloc] init];
      id<RAREiPlatformBorder> b = [((RAREPaintBucket *) nil_chk(ph->pressedPainter_)) getBorder];
      if (b == nil) {
        int size = [RAREScreenUtils platformPixelsWithFloat:![RAREPlatform hasPointingDevice] ? 8 : 4];
        [ph->normalPainter_ setBorderWithRAREiPlatformBorder:[[RAREUIEmptyBorder alloc] initWithFloat:size]];
      }
      else {
        [ph->normalPainter_ setBorderWithRAREiPlatformBorder:[[RAREUIEmptyBorder alloc] initWithRAREUIInsets:[b getBorderInsetsWithRAREUIInsets:(RAREUIInsets *) check_class_cast(nil, [RAREUIInsets class])]]];
      }
    }
    [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:RAREPainterUtils_TOOLBARBUTTON_KEY_ withId:ph];
    [ph setSharedWithBoolean:YES];
  }
  return ph;
}

+ (id<RAREiPlatformPath>)drawArrowWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                              withFloat:(float)width
                                              withFloat:(float)height
                                            withBoolean:(BOOL)down {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  else {
    [p reset];
  }
  float y = 0;
  float x = 0;
  float w = (width / 2);
  float len = w / 2;
  x += len - 1;
  y += [JavaLangMath floorWithDouble:(height / 2) - (len / 2)];
  if (down) {
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:x withFloat:y];
    (void) [p lineToWithFloat:x + w withFloat:y];
    (void) [p lineToWithFloat:x + len withFloat:y + len];
    (void) [p lineToWithFloat:x withFloat:y];
  }
  else {
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:x + len withFloat:y];
    (void) [p lineToWithFloat:x + w withFloat:y + len];
    (void) [p lineToWithFloat:x withFloat:y + len];
    (void) [p lineToWithFloat:x + len withFloat:y];
  }
  return p;
}

+ (id<RAREiPlatformPath>)drawTwistyWithRAREiPlatformPath:(id<RAREiPlatformPath>)p
                                               withFloat:(float)width
                                               withFloat:(float)height
                                             withBoolean:(BOOL)down {
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
  }
  else {
    [p reset];
  }
  float w = down ? (width / 2) : (width / 1.5f);
  float len = w / 2;
  if (down) {
    float x = 2;
    float y = 2;
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:x withFloat:y + w];
    (void) [p lineToWithFloat:x + w withFloat:y + w];
    (void) [p lineToWithFloat:x + w withFloat:y];
    (void) [p lineToWithFloat:x withFloat:y + w];
  }
  else {
    float x = 2;
    float y = (float) [JavaLangMath floorWithDouble:(height - w) / 2];
    (void) [((id<RAREiPlatformPath>) nil_chk(p)) moveToWithFloat:x withFloat:y];
    (void) [p lineToWithFloat:x + len withFloat:y + len];
    (void) [p lineToWithFloat:x withFloat:y + w];
    (void) [p lineToWithFloat:x withFloat:y];
  }
  return p;
}

+ (void)setPopupListRenderingDefaultsWithRAREiListHandler:(id<RAREiListHandler>)lh
                                withRAREaListItemRenderer:(RAREaListItemRenderer *)renderer
                                              withBoolean:(BOOL)forMenu {
  id<RAREiPlatformComponent> list = [((id<RAREiListHandler>) nil_chk(lh)) getListComponent];
  RAREUIProperties *p = [RAREPlatform getUIDefaults];
  RAREUIColor *c = [((RAREUIProperties *) nil_chk(p)) getColorWithNSString:@"Rare.ComboBox.list.selectedForeground"];
  RAREPaintBucket *pb = [p getPaintBucketWithNSString:@"Rare.ComboBox.list.selectedBackground"];
  if ((c != nil) || (pb != nil)) {
    if (pb == nil) {
      pb = (RAREPaintBucket *) check_class_cast([((RAREPaintBucket *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getSelectionPainter])) clone], [RAREPaintBucket class]);
      [((RAREPaintBucket *) nil_chk(pb)) setForegroundColorWithRAREUIColor:c];
    }
    [((RAREaListItemRenderer *) nil_chk(renderer)) setSelectionPaintWithRAREPaintBucket:pb];
  }
  c = [p getColorWithNSString:@"Rare.ComboBox.list.foreground"];
  if (c == nil) {
    c = [RAREColorUtils getListForeground];
  }
  [((id<RAREiPlatformComponent>) nil_chk(list)) setForegroundWithRAREUIColor:c];
  c = [p getColorWithNSString:@"Rare.ComboBox.list.background"];
  if (c == nil) {
    c = [RAREColorUtils getListBackground];
  }
  [((id<RAREiPlatformComponent>) nil_chk([lh getContainerComponent])) setBackgroundWithRAREUIColor:c];
  c = nil;
  float d = [RAREScreenUtils PLATFORM_PIXELS_2];
  [((RAREaListItemRenderer *) nil_chk(renderer)) setInsetsWithRAREUIInsets:[[RAREUIInsets alloc] initWithDouble:d withDouble:d withDouble:d withDouble:[RAREScreenUtils PLATFORM_PIXELS_4]]];
  BOOL showDivider = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBooleanWithNSString:@"Rare.ComboBox.list.showDivider" withBoolean:[RAREPlatform isTouchableDevice] || forMenu];
  if (showDivider) {
    if (forMenu) {
      c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.PopupMenu.list.dividerLineColor"];
    }
    if (c == nil) {
      c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.ComboBox.list.dividerLineColor"];
    }
    if (c == nil) {
      c = [RAREColorUtils getListDividerColor];
    }
    [lh setShowDividerWithBoolean:YES];
    [lh setDividerLineWithRAREUIColor:c withRAREUIStroke:[RAREUIStroke SOLID_STROKE]];
  }
  else {
    [lh setShowDividerWithBoolean:NO];
  }
  [lh setSingleClickActionWithBoolean:YES];
  [lh setAutoHilightWithBoolean:YES];
  [lh setRowHeightWithInt:[RAREScreenUtils toPlatformPixelHeightWithNSString:[RAREaPlatformHelper getDefaultRowHeight] withRAREiPlatformComponent:list withFloat:100]];
}

+ (id<RAREiComposite>)getCompositeWithNSString:(NSString *)type
                                     withFloat:(float)alpha {
  type = [((NSString *) nil_chk(type)) lowercaseStringWithJRELocale:[JavaUtilLocale US]];
  RAREiComposite_CompositeTypeEnum *ct = [((JavaUtilHashMap *) nil_chk(RAREPainterUtils_compositeMap_)) getWithId:type];
  if (ct == nil) {
    NSString *s = [((NSString *) nil_chk(type)) uppercaseStringWithJRELocale:[JavaUtilLocale US]];
    @try {
      ct = [RAREiComposite_CompositeTypeEnum valueOfWithNSString:s];
    }
    @catch (JavaLangThrowable *ignore) {
    }
  }
  if (ct == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:type];
  }
  return [[RAREGraphicsComposite alloc] initWithNSString:type withRAREiComposite_CompositeTypeEnum:ct withFloat:alpha];
}

+ (RAREiComposite_CompositeTypeEnum *)getCompositeTypeWithNSString:(NSString *)type {
  type = [((NSString *) nil_chk(type)) lowercaseStringWithJRELocale:[JavaUtilLocale US]];
  return [((JavaUtilHashMap *) nil_chk(RAREPainterUtils_compositeMap_)) getWithId:type];
}

+ (void)initialize {
  if (self == [RAREPainterUtils class]) {
    RAREPainterUtils_compositeMap_ = [[JavaUtilHashMap alloc] init];
    {
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"source-atop" withId:[RAREiComposite_CompositeTypeEnum SRC_ATOP]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"source-in" withId:[RAREiComposite_CompositeTypeEnum SRC_IN]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"source-out" withId:[RAREiComposite_CompositeTypeEnum SRC_OUT]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"source-over" withId:[RAREiComposite_CompositeTypeEnum SRC_OVER]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"destination-atop" withId:[RAREiComposite_CompositeTypeEnum DST_ATOP]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"destination-in" withId:[RAREiComposite_CompositeTypeEnum DST_IN]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"destination-out" withId:[RAREiComposite_CompositeTypeEnum DST_OUT]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"destination-over" withId:[RAREiComposite_CompositeTypeEnum DST_OVER]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"lighter" withId:[RAREiComposite_CompositeTypeEnum LIGHTEN]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"darker" withId:[RAREiComposite_CompositeTypeEnum DARKEN]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"xor" withId:[RAREiComposite_CompositeTypeEnum XOR]];
      (void) [RAREPainterUtils_compositeMap_ putWithId:@"copy" withId:[RAREiComposite_CompositeTypeEnum COPY]];
    }
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL },
    { "createProgressPopupPainter", NULL, "LRAREiPlatformComponentPainter", 0x9, NULL },
    { "createButtonPaintHolder", NULL, "LRAREPainterHolder", 0x9, NULL },
    { "createComboBoxButtonPaintHolder", NULL, "LRAREPainterHolder", 0x9, NULL },
    { "createComboBoxPaintHolder", NULL, "LRAREPainterHolder", 0x9, NULL },
    { "createHyperlinkPaintHolder", NULL, "LRAREPainterHolder", 0x9, NULL },
    { "createPaintHolderFromAttributesWithRAREiWidget:withJavaUtilMap:", NULL, "LRAREPainterHolder", 0x9, NULL },
    { "createPaintHolderFromSequenceWithRAREiWidget:withSPOTSequence:", NULL, "LRAREPainterHolder", 0x9, NULL },
    { "createRedHyperlinkPainterHolder", NULL, "LRAREPainterHolder", 0x9, NULL },
    { "createSpinnerButtonPaintHolder", NULL, "LRAREPainterHolder", 0x9, NULL },
    { "getPressedButtonPaintBucket", NULL, "LRAREPaintBucket", 0x9, NULL },
    { "getUnpressedButtonPaintBucket", NULL, "LRAREPaintBucket", 0x9, NULL },
    { "createToggleToolBarButtonPaintHolder", NULL, "LRAREPainterHolder", 0x9, NULL },
    { "createToolBarButtonPaintHolder", NULL, "LRAREPainterHolder", 0x9, NULL },
    { "drawArrowWithRAREiPlatformPath:withFloat:withFloat:withBoolean:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "drawTwistyWithRAREiPlatformPath:withFloat:withFloat:withBoolean:", NULL, "LRAREiPlatformPath", 0x9, NULL },
    { "getCompositeWithNSString:withFloat:", NULL, "LRAREiComposite", 0x9, NULL },
    { "getCompositeTypeWithNSString:", NULL, "LRAREiComposite_CompositeTypeEnum", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "COMBOBOX_BUTTON_KEY_", NULL, 0xa, "LNSString" },
    { "COMBOBOX_KEY_", NULL, 0xa, "LNSString" },
    { "HYPERLINK_KEY_", NULL, 0xa, "LNSString" },
    { "PUSHBUTTON_KEY_", NULL, 0xa, "LNSString" },
    { "RED_HYPERLINK_KEY_", NULL, 0xa, "LNSString" },
    { "SPINNER_BUTTON_KEY_", NULL, 0xa, "LNSString" },
    { "TOGGLE_TOOLBARBUTTON_KEY_", NULL, 0xa, "LNSString" },
    { "TOOLBARBUTTON_KEY_", NULL, 0xa, "LNSString" },
    { "compositeMap_", NULL, 0x1c, "LJavaUtilHashMap" },
  };
  static J2ObjcClassInfo _RAREPainterUtils = { "PainterUtils", "com.appnativa.rare.ui", NULL, 0x1, 18, methods, 9, fields, 0, NULL};
  return &_RAREPainterUtils;
}

@end
@implementation RAREPainterUtils_ChevronIcon

- (id)initWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)owner
                         withBoolean:(BOOL)up {
  if (self = [super init]) {
    iconSize_ = [RAREUIScreen platformPixelsWithInt:24];
    self->up_ = up;
  }
  return self;
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height {
  if (circleColor_ == nil) {
    circleColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.ChevronIcon.circleColor"];
    disabledCircleColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.ChevronIcon.disabledCircleColor"];
    chevronColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.ChevronIcon.color"];
    disabledChevronColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.ChevronIcon.disabledColor"];
    if (circleColor_ == nil) {
      circleColor_ = [RAREaUILineBorder getDefaultLineColor];
    }
    if (disabledCircleColor_ == nil) {
      disabledCircleColor_ = [((RAREUIColor *) nil_chk(circleColor_)) getDisabledColor];
    }
    if (chevronColor_ == nil) {
      chevronColor_ = [RAREColorUtils getForeground];
    }
    if (disabledChevronColor_ == nil) {
      disabledChevronColor_ = [((RAREUIColor *) nil_chk(chevronColor_)) getDisabledColor];
    }
  }
  float size = iconSize_ - [RAREScreenUtils PLATFORM_PIXELS_4];
  y += [RAREScreenUtils PLATFORM_PIXELS_1];
  x += [RAREScreenUtils PLATFORM_PIXELS_1];
  if (circlePaint_ == nil) {
    RAREUIBackgroundPainter *bp = [[RAREUIBackgroundPainter alloc] initWithRAREUIColor:[RAREColorUtils getBackground] withRAREUIColor:circleColor_ withRAREiGradientPainter_DirectionEnum:[RAREiGradientPainter_DirectionEnum CENTER]];
    [bp setGradientTypeWithRAREiGradientPainter_TypeEnum:[RAREiGradientPainter_TypeEnum RADIAL]];
    circlePaint_ = bp;
  }
  float sw = [((id<RAREiPlatformGraphics>) nil_chk(g)) getStrokeWidth];
  RAREUIColor *c = [g getColor];
  id<RAREiPlatformPaint> paint = [g getPaint];
  [g setPaintWithRAREiPlatformPaint:[((id<RAREiPlatformPainter>) nil_chk(circlePaint_)) getPaintWithFloat:size withFloat:size]];
  [g fillRoundRectWithFloat:x withFloat:y withFloat:size withFloat:size withFloat:size withFloat:size];
  RAREUIColor *cc;
  if (([self getOwner] == nil) || [((id<RAREiPlatformComponent>) nil_chk([self getOwner])) isEnabled]) {
    [g setColorWithRAREUIColor:circleColor_];
    cc = chevronColor_;
  }
  else {
    [g setColorWithRAREUIColor:disabledCircleColor_];
    cc = disabledChevronColor_;
  }
  [g setStrokeWidthWithFloat:[RAREScreenUtils platformPixelsfWithFloat:1.5f]];
  [g drawRoundRectWithFloat:x withFloat:y withFloat:size withFloat:size withFloat:size withFloat:size];
  [g setColorWithRAREUIColor:cc];
  float f = [JavaLangMath maxWithFloat:1 withFloat:size / [RAREScreenUtils PLATFORM_PIXELS_16]];
  float n3 = [RAREScreenUtils PLATFORM_PIXELS_3] * f;
  float n4 = [RAREScreenUtils PLATFORM_PIXELS_4] * f;
  float n6 = [RAREScreenUtils PLATFORM_PIXELS_6] * f;
  if (horizontal_) {
    x += n4 + [RAREScreenUtils PLATFORM_PIXELS_1];
    y += n4;
    if (up_) {
      [g drawLineWithFloat:x + n3 withFloat:y withFloat:x withFloat:y + n3];
      [g drawLineWithFloat:x + n3 withFloat:y withFloat:x + n3 withFloat:y + n6];
      x += n4;
      [g drawLineWithFloat:x + n3 withFloat:y withFloat:x withFloat:y + n3];
      [g drawLineWithFloat:x + n3 withFloat:y withFloat:x + n3 withFloat:y + n6];
    }
    else {
      [g drawLineWithFloat:x withFloat:y withFloat:x + n3 withFloat:y + n3];
      [g drawLineWithFloat:x + n3 withFloat:y + n3 withFloat:x withFloat:y + n6];
      x += n4;
      [g drawLineWithFloat:x withFloat:y withFloat:x + n3 withFloat:y + n3];
      [g drawLineWithFloat:x + n3 withFloat:y + n3 withFloat:x withFloat:y + n6];
    }
  }
  else {
    x += n4 + [RAREScreenUtils PLATFORM_PIXELS_1];
    y += n4;
    if (up_) {
      [g drawLineWithFloat:x + n3 withFloat:y withFloat:x withFloat:y + n3];
      [g drawLineWithFloat:x + n3 withFloat:y withFloat:x + n6 withFloat:y + n3];
      y += n4;
      [g drawLineWithFloat:x + n3 withFloat:y withFloat:x withFloat:y + n3];
      [g drawLineWithFloat:x + n3 withFloat:y withFloat:x + n6 withFloat:y + n3];
    }
    else {
      [g drawLineWithFloat:x withFloat:y withFloat:x + n3 withFloat:y + n3];
      [g drawLineWithFloat:x + n3 withFloat:y + n3 withFloat:x + n6 withFloat:y];
      y += n4;
      [g drawLineWithFloat:x withFloat:y withFloat:x + n3 withFloat:y + n3];
      [g drawLineWithFloat:x + n3 withFloat:y + n3 withFloat:x + n6 withFloat:y];
    }
  }
  [g setStrokeWidthWithFloat:sw];
  [g setColorWithRAREUIColor:c];
  [g setPaintWithRAREiPlatformPaint:paint];
}

- (void)setDirectionWithBoolean:(BOOL)up {
  self->up_ = up;
}

- (void)setIconSizeWithInt:(int)size {
  int n = [RAREUIScreen platformPixelsWithInt:24];
  iconSize_ = [JavaLangMath maxWithInt:n withInt:size];
}

- (void)setOwnerWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)owner {
  self->owner_ = owner;
}

- (id<RAREiPlatformIcon>)getDisabledVersion {
  return self;
}

- (int)getIconHeight {
  return iconSize_;
}

- (int)getIconWidth {
  return iconSize_;
}

- (id<RAREiPlatformComponent>)getOwner {
  return owner_;
}

- (void)setHorizontalWithBoolean:(BOOL)horizontal {
  self->horizontal_ = horizontal;
}

- (BOOL)isHorizontal {
  return horizontal_;
}

- (void)copyAllFieldsTo:(RAREPainterUtils_ChevronIcon *)other {
  [super copyAllFieldsTo:other];
  other->chevronColor_ = chevronColor_;
  other->circle_ = circle_;
  other->circleColor_ = circleColor_;
  other->circlePaint_ = circlePaint_;
  other->dcc_ = dcc_;
  other->disabledChevronColor_ = disabledChevronColor_;
  other->disabledCircleColor_ = disabledCircleColor_;
  other->horizontal_ = horizontal_;
  other->iconSize_ = iconSize_;
  other->owner_ = owner_;
  other->up_ = up_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDisabledVersion", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getOwner", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "setHorizontalWithBoolean:", NULL, "V", 0x4, NULL },
    { "isHorizontal", NULL, "Z", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iconSize_", NULL, 0x0, "I" },
    { "circle_", NULL, 0x4, "LRAREiPlatformPath" },
    { "circleColor_", NULL, 0x4, "LRAREUIColor" },
    { "circlePaint_", NULL, 0x4, "LRAREiPlatformPainter" },
    { "dcc_", NULL, 0x4, "LRAREUIColor" },
    { "horizontal_", NULL, 0x4, "Z" },
    { "owner_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "up_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _RAREPainterUtils_ChevronIcon = { "ChevronIcon", "com.appnativa.rare.ui", "PainterUtils", 0x9, 4, methods, 8, fields, 0, NULL};
  return &_RAREPainterUtils_ChevronIcon;
}

@end
@implementation RAREPainterUtils_GripperIcon

- (id)initWithBoolean:(BOOL)vertical {
  return [self initRAREPainterUtils_GripperIconWithBoolean:vertical withRAREUIColor:[((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.backgroundShadow"] withRAREUIColor:[((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.backgroundLtShadow"]];
}

- (id)initWithBoolean:(BOOL)vertical
      withRAREUIColor:(RAREUIColor *)fg {
  if (self = [super init]) {
    iconWidth_ = [RAREScreenUtils platformPixelsWithFloat:16];
    iconHeight_ = [RAREScreenUtils platformPixelsWithFloat:16];
    self->vertical_ = vertical;
    [self setColorsWithRAREUIColor:[[RAREUIColorShade alloc] initWithRAREUIColor:fg withInt:(255 * -25) / 100] withRAREUIColor:[[RAREUIColorShade alloc] initWithRAREUIColor:fg withInt:(255 * -15) / 100]];
  }
  return self;
}

- (id)initRAREPainterUtils_GripperIconWithBoolean:(BOOL)vertical
                                  withRAREUIColor:(RAREUIColor *)colorOne
                                  withRAREUIColor:(RAREUIColor *)colorTwo {
  if (self = [super init]) {
    iconWidth_ = [RAREScreenUtils platformPixelsWithFloat:16];
    iconHeight_ = [RAREScreenUtils platformPixelsWithFloat:16];
    self->vertical_ = vertical;
    [self setColorsWithRAREUIColor:colorOne withRAREUIColor:colorTwo];
  }
  return self;
}

- (id)initWithBoolean:(BOOL)vertical
      withRAREUIColor:(RAREUIColor *)colorOne
      withRAREUIColor:(RAREUIColor *)colorTwo {
  return [self initRAREPainterUtils_GripperIconWithBoolean:vertical withRAREUIColor:colorOne withRAREUIColor:colorTwo];
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height {
  float pm = [RAREScreenUtils getPixelMultiplier];
  float h = vertical_ ? height : width;
  int four = (int) [JavaLangMath maxWithFloat:4 withFloat:(4 * (pm / 1.5f))];
  int length = (int) [JavaLangMath minWithFloat:9 * pm withFloat:(h - 6) / four] * 2;
  int lines = 3;
  if (vertical_) {
    while (lines * four > (width + 1)) {
      lines--;
    }
    y += (height - length) / 2;
    x = (int) [JavaLangMath ceilWithDouble:width / 2];
    if (lines == 3) {
      x -= four;
    }
    else if (lines == 2) {
      x -= (four / 2);
    }
  }
  else {
    while (lines * four > (width + 1)) {
      lines--;
    }
    x += (width - length) / 2;
    y = (int) [JavaLangMath ceilWithDouble:height / 2];
    if (lines == 3) {
      y -= four;
    }
    else if (lines == 2) {
      y -= (four / 2);
    }
  }
  for (int i = 0; i < lines; i++) {
    while (lines * four > (height + 1)) {
      lines--;
    }
    if (vertical_) {
      [((id<RAREiPlatformGraphics>) nil_chk(g)) setColorWithRAREUIColor:colorOne_];
      [g drawLineWithFloat:x withFloat:y withFloat:x withFloat:y + length];
      [g setColorWithRAREUIColor:colorTwo_];
      [g drawLineWithFloat:x + 1 withFloat:y withFloat:x + 1 withFloat:y + length];
      x += four;
    }
    else {
      [((id<RAREiPlatformGraphics>) nil_chk(g)) setColorWithRAREUIColor:colorOne_];
      [g drawLineWithFloat:x withFloat:y withFloat:x + length withFloat:y];
      [g setColorWithRAREUIColor:colorTwo_];
      [g drawLineWithFloat:x withFloat:y + 1 withFloat:x + length withFloat:y + 1];
      y += four;
    }
  }
}

- (void)setColorsWithRAREUIColor:(RAREUIColor *)colorOne
                 withRAREUIColor:(RAREUIColor *)colorTwo {
  self->colorOne_ = colorOne;
  self->colorTwo_ = colorTwo;
}

- (void)setSizeWithInt:(int)width
               withInt:(int)height {
  iconWidth_ = width;
  iconHeight_ = height;
}

- (void)setVerticalWithBoolean:(BOOL)vertical {
  self->vertical_ = vertical;
}

- (id<RAREiPlatformIcon>)getDisabledVersion {
  return nil;
}

- (int)getIconHeight {
  return iconHeight_;
}

- (int)getIconWidth {
  return iconWidth_;
}

- (BOOL)isVertical {
  return vertical_;
}

- (void)copyAllFieldsTo:(RAREPainterUtils_GripperIcon *)other {
  [super copyAllFieldsTo:other];
  other->colorOne_ = colorOne_;
  other->colorTwo_ = colorTwo_;
  other->iconHeight_ = iconHeight_;
  other->iconWidth_ = iconWidth_;
  other->vertical_ = vertical_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDisabledVersion", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "isVertical", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "iconWidth_", NULL, 0x4, "I" },
    { "iconHeight_", NULL, 0x4, "I" },
    { "colorOne_", NULL, 0x4, "LRAREUIColor" },
    { "colorTwo_", NULL, 0x4, "LRAREUIColor" },
    { "vertical_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _RAREPainterUtils_GripperIcon = { "GripperIcon", "com.appnativa.rare.ui", "PainterUtils", 0x9, 2, methods, 5, fields, 0, NULL};
  return &_RAREPainterUtils_GripperIcon;
}

@end
@implementation RAREPainterUtils_ListEditorIcon

static RAREUIStroke * RAREPainterUtils_ListEditorIcon_checkmarkStroke_;
static RAREUIStroke * RAREPainterUtils_ListEditorIcon_borderStroke_;

+ (RAREUIStroke *)checkmarkStroke {
  return RAREPainterUtils_ListEditorIcon_checkmarkStroke_;
}

+ (void)setCheckmarkStroke:(RAREUIStroke *)checkmarkStroke {
  RAREPainterUtils_ListEditorIcon_checkmarkStroke_ = checkmarkStroke;
}

+ (RAREUIStroke *)borderStroke {
  return RAREPainterUtils_ListEditorIcon_borderStroke_;
}

+ (void)setBorderStroke:(RAREUIStroke *)borderStroke {
  RAREPainterUtils_ListEditorIcon_borderStroke_ = borderStroke;
}

- (id)initWithBoolean:(BOOL)checked {
  if (self = [super init]) {
    self->checked_ = checked;
    iconSize_ = [RAREUIScreen platformPixelsWithInt:24];
    [self setFillColorWithRAREUIColor:[((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.List.EditIcon.fillColor"]];
    checkMarkColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.List.EditIcon.checkMarkColor"];
    borderColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.List.EditIcon.borderColor"];
    checkedBorderColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.List.EditIcon.borderColor"];
    checkedFillColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.List.EditIcon.checkedFillColor"];
    if (borderColor_ == nil) {
      borderColor_ = [RAREUIColor GRAY];
    }
    if (checkedBorderColor_ == nil) {
      checkedBorderColor_ = borderColor_;
    }
    if ([((RAREUIColor *) nil_chk(borderColor_)) getAlpha] == 0) {
      borderColor_ = nil;
    }
    if ([((RAREUIColor *) nil_chk(checkedBorderColor_)) getAlpha] == 0) {
      checkedBorderColor_ = nil;
    }
    if (checkMarkColor_ == nil) {
      checkMarkColor_ = borderColor_;
      if (checkMarkColor_ == nil) {
        checkMarkColor_ = [RAREColorUtils getListForeground];
      }
    }
    float size = iconSize_ - [RAREScreenUtils PLATFORM_PIXELS_4];
    circleSize_ = size;
    if (checkedBorderColor_ == nil) {
      checkMarkSize_ = size;
    }
    else {
      checkMarkSize_ = (int) [JavaLangMath floorWithDouble:[JavaLangMath sqrtWithDouble:(size * size) / 2]];
      if (fmodf(checkMarkSize_, 2) == 1) {
        checkMarkSize_--;
      }
    }
  }
  return self;
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height {
  RAREUIStroke *s = [((id<RAREiPlatformGraphics>) nil_chk(g)) getStroke];
  RAREUIColor *c = [g getColor];
  [g translateWithFloat:x withFloat:y];
  if (borderColor_ != nil) {
    [self drawCircleWithRAREiPlatformGraphics:g];
  }
  if (checked_) {
    [self drawCheckmarkWithRAREiPlatformGraphics:g];
  }
  [g setColorWithRAREUIColor:c];
  [g setStrokeWithRAREUIStroke:s];
  [g translateWithFloat:-x withFloat:-y];
}

- (void)setBorderColorWithRAREUIColor:(RAREUIColor *)borderColor {
  self->borderColor_ = borderColor;
}

- (void)setCheckMarkColorWithRAREUIColor:(RAREUIColor *)checkMarkColor {
  self->checkMarkColor_ = checkMarkColor;
}

- (void)setCheckedWithBoolean:(BOOL)checked {
  self->checked_ = checked;
}

- (void)setCheckedBorderColorWithRAREUIColor:(RAREUIColor *)checkedBorderColor {
  self->checkedBorderColor_ = checkedBorderColor;
}

- (void)setCheckedFillColorWithRAREUIColor:(RAREUIColor *)checkedFillColor {
  self->checkedFillColor_ = checkedFillColor;
}

- (void)setFillColorWithRAREUIColor:(RAREUIColor *)fillColor {
  self->fillColor_ = fillColor;
}

- (RAREUIColor *)getBorderColor {
  return borderColor_;
}

- (RAREUIColor *)getCheckMarkColor {
  return checkMarkColor_;
}

- (RAREUIColor *)getCheckedBorderColor {
  return checkedBorderColor_;
}

- (RAREUIColor *)getCheckedFillColor {
  return checkedFillColor_;
}

- (id<RAREiPlatformIcon>)getDisabledVersion {
  return self;
}

- (RAREUIColor *)getFillColor {
  return fillColor_;
}

- (int)getIconHeight {
  return (int) iconSize_;
}

- (int)getIconWidth {
  return (int) iconSize_;
}

- (void)drawCheckmarkWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g {
  float size = checkMarkSize_;
  float p1 = [RAREScreenUtils PLATFORM_PIXELS_1];
  float d2 = iconSize_ - size;
  float loc = d2 / 2;
  if (checkMarkSize_ == circleSize_) {
    d2 = (iconSize_ - size) * 2;
  }
  else {
    d2 = circleSize_ - size;
  }
  float d = d2 / 2 - p1;
  [((id<RAREiPlatformGraphics>) nil_chk(g)) translateWithFloat:loc withFloat:loc];
  int h3 = (int) [JavaLangMath ceilWithDouble:size / 3.0f];
  [g setStrokeWithRAREUIStroke:RAREPainterUtils_ListEditorIcon_checkmarkStroke_];
  [g setColorWithRAREUIColor:checkMarkColor_];
  [g drawLineWithFloat:d withFloat:d2 withFloat:h3 + p1 withFloat:size - h3 + p1];
  [g drawLineWithFloat:h3 + p1 withFloat:size - h3 + p1 withFloat:size - d - p1 withFloat:h3];
  [g translateWithFloat:-loc withFloat:-loc];
}

- (void)drawCircleWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g {
  float size = circleSize_;
  float d = (iconSize_ - size) / 2;
  [((id<RAREiPlatformGraphics>) nil_chk(g)) setStrokeWithRAREUIStroke:RAREPainterUtils_ListEditorIcon_borderStroke_];
  float p1 = [RAREScreenUtils PLATFORM_PIXELS_1];
  RAREUIColor *cc = checked_ ? checkedFillColor_ : fillColor_;
  if (cc != nil) {
    id<RAREiPlatformPainter> p = [RAREColorUtils getPainterWithRAREUIColor:cc];
    if (p == nil) {
      [g setColorWithRAREUIColor:cc];
    }
    else {
      [g setPaintWithRAREiPlatformPaint:[p getPaintWithFloat:size withFloat:size]];
    }
    [g fillRoundRectWithFloat:d + p1 withFloat:d + p1 withFloat:size - p1 withFloat:size - p1 withFloat:size - p1 withFloat:size - p1];
  }
  RAREUIColor *bc = checked_ ? checkedBorderColor_ : borderColor_;
  if (bc != nil) {
    [g setColorWithRAREUIColor:bc];
    [g drawRoundRectWithFloat:d withFloat:d withFloat:size withFloat:size withFloat:size withFloat:size];
  }
}

+ (void)initialize {
  if (self == [RAREPainterUtils_ListEditorIcon class]) {
    RAREPainterUtils_ListEditorIcon_checkmarkStroke_ = [[RAREUIStroke alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_2] withRAREUIStroke_CapEnum:[RAREUIStroke_CapEnum ROUND] withRAREUIStroke_JoinEnum:[RAREUIStroke_JoinEnum MITER]];
    RAREPainterUtils_ListEditorIcon_borderStroke_ = [[RAREUIStroke alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_1]];
  }
}

- (void)copyAllFieldsTo:(RAREPainterUtils_ListEditorIcon *)other {
  [super copyAllFieldsTo:other];
  other->borderColor_ = borderColor_;
  other->checkMarkColor_ = checkMarkColor_;
  other->checkMarkSize_ = checkMarkSize_;
  other->checked_ = checked_;
  other->checkedBorderColor_ = checkedBorderColor_;
  other->checkedFillColor_ = checkedFillColor_;
  other->circleSize_ = circleSize_;
  other->fillColor_ = fillColor_;
  other->iconSize_ = iconSize_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getBorderColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getCheckMarkColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getCheckedBorderColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getCheckedFillColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getDisabledVersion", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getFillColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "drawCheckmarkWithRAREiPlatformGraphics:", NULL, "V", 0x4, NULL },
    { "drawCircleWithRAREiPlatformGraphics:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "checkmarkStroke_", NULL, 0xc, "LRAREUIStroke" },
    { "borderStroke_", NULL, 0xc, "LRAREUIStroke" },
    { "borderColor_", NULL, 0x4, "LRAREUIColor" },
    { "checkMarkColor_", NULL, 0x4, "LRAREUIColor" },
    { "checkMarkSize_", NULL, 0x4, "F" },
    { "checked_", NULL, 0x4, "Z" },
    { "checkedBorderColor_", NULL, 0x4, "LRAREUIColor" },
    { "checkedFillColor_", NULL, 0x4, "LRAREUIColor" },
    { "circleSize_", NULL, 0x4, "F" },
    { "fillColor_", NULL, 0x4, "LRAREUIColor" },
    { "iconSize_", NULL, 0x4, "F" },
  };
  static J2ObjcClassInfo _RAREPainterUtils_ListEditorIcon = { "ListEditorIcon", "com.appnativa.rare.ui", "PainterUtils", 0x9, 8, methods, 11, fields, 0, NULL};
  return &_RAREPainterUtils_ListEditorIcon;
}

@end
@implementation RAREPainterUtils_TwistyIcon

static RAREUIColor * RAREPainterUtils_TwistyIcon_borderColor_;
static RAREUIColor * RAREPainterUtils_TwistyIcon_collapsedColor_;
static RAREUIColor * RAREPainterUtils_TwistyIcon_disabledColor_;
static RAREUIColor * RAREPainterUtils_TwistyIcon_expandedColor_;

+ (RAREUIColor *)borderColor {
  return RAREPainterUtils_TwistyIcon_borderColor_;
}

+ (void)setBorderColor:(RAREUIColor *)borderColor {
  RAREPainterUtils_TwistyIcon_borderColor_ = borderColor;
}

+ (RAREUIColor *)collapsedColor {
  return RAREPainterUtils_TwistyIcon_collapsedColor_;
}

+ (void)setCollapsedColor:(RAREUIColor *)collapsedColor {
  RAREPainterUtils_TwistyIcon_collapsedColor_ = collapsedColor;
}

+ (RAREUIColor *)disabledColor {
  return RAREPainterUtils_TwistyIcon_disabledColor_;
}

+ (void)setDisabledColor:(RAREUIColor *)disabledColor {
  RAREPainterUtils_TwistyIcon_disabledColor_ = disabledColor;
}

+ (RAREUIColor *)expandedColor {
  return RAREPainterUtils_TwistyIcon_expandedColor_;
}

+ (void)setExpandedColor:(RAREUIColor *)expandedColor {
  RAREPainterUtils_TwistyIcon_expandedColor_ = expandedColor;
}

- (id)initWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)owner
                         withBoolean:(BOOL)up {
  if (self = [super init]) {
    up_ = YES;
    iconSize_ = [RAREUIScreen platformPixelsWithInt:![RAREPlatform hasPointingDevice] ? 20 : 12];
    self->up_ = up;
    self->owner_ = owner;
    if (RAREPainterUtils_TwistyIcon_expandedColor_ == nil) {
      RAREPainterUtils_TwistyIcon_expandedColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.TwistyIcon.expandedColor"];
      RAREPainterUtils_TwistyIcon_collapsedColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.TwistyIcon.collapsedColor"];
      RAREPainterUtils_TwistyIcon_borderColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.TwistyIcon.borderColor"];
      RAREPainterUtils_TwistyIcon_disabledColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.TwistyIcon.disabledColor"];
      if (RAREPainterUtils_TwistyIcon_collapsedColor_ == nil) {
        RAREPainterUtils_TwistyIcon_collapsedColor_ = [RAREUIColor WHITE];
      }
      if (RAREPainterUtils_TwistyIcon_expandedColor_ == nil) {
        RAREPainterUtils_TwistyIcon_expandedColor_ = [RAREUIColor DARKGRAY];
      }
      if (RAREPainterUtils_TwistyIcon_borderColor_ == nil) {
        RAREPainterUtils_TwistyIcon_borderColor_ = [RAREUIColor GRAY];
      }
      if (RAREPainterUtils_TwistyIcon_disabledColor_ == nil) {
        RAREPainterUtils_TwistyIcon_disabledColor_ = [RAREUIColor LIGHTGRAY];
      }
    }
  }
  return self;
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height {
  float sw = [((id<RAREiPlatformGraphics>) nil_chk(g)) getStrokeWidth];
  RAREUIColor *c = [g getColor];
  float size = iconSize_;
  id<RAREiPlatformPath> p = [RAREPainterUtils drawTwistyWithRAREiPlatformPath:path_ withFloat:size withFloat:size withBoolean:!up_];
  path_ = p;
  if ((owner_ == nil) || [owner_ isEnabled]) {
    [g setColorWithRAREUIColor:up_ ? RAREPainterUtils_TwistyIcon_collapsedColor_ : RAREPainterUtils_TwistyIcon_expandedColor_];
  }
  else {
    [g setColorWithRAREUIColor:RAREPainterUtils_TwistyIcon_disabledColor_];
  }
  int off = iconSize_ / 8;
  x += off;
  if (!up_) {
    y += off;
  }
  [g fillShapeWithRAREiPlatformShape:p withFloat:x withFloat:y];
  [g setStrokeWidthWithFloat:1.0f];
  [g setColorWithRAREUIColor:RAREPainterUtils_TwistyIcon_borderColor_];
  [g drawShapeWithRAREiPlatformShape:p withFloat:x withFloat:y];
  [g setStrokeWidthWithFloat:sw];
  [g setColorWithRAREUIColor:c];
}

- (void)setDirectionWithBoolean:(BOOL)up {
  self->up_ = up;
}

- (void)setIconSizeWithInt:(int)size {
  int n = [RAREUIScreen platformPixelsWithInt:![RAREPlatform hasPointingDevice] ? 20 : 12];
  iconSize_ = [JavaLangMath maxWithInt:n withInt:size];
}

- (void)setOwnerWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)owner {
  self->owner_ = owner;
}

- (id<RAREiPlatformIcon>)getDisabledVersion {
  return self;
}

- (int)getIconHeight {
  return iconSize_;
}

- (int)getIconWidth {
  return iconSize_;
}

- (id<RAREiPlatformComponent>)getOwner {
  return owner_;
}

- (void)copyAllFieldsTo:(RAREPainterUtils_TwistyIcon *)other {
  [super copyAllFieldsTo:other];
  other->iconSize_ = iconSize_;
  other->owner_ = owner_;
  other->path_ = path_;
  other->up_ = up_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDisabledVersion", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getOwner", NULL, "LRAREiPlatformComponent", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "borderColor_", NULL, 0x8, "LRAREUIColor" },
    { "collapsedColor_", NULL, 0x8, "LRAREUIColor" },
    { "disabledColor_", NULL, 0x8, "LRAREUIColor" },
    { "expandedColor_", NULL, 0x8, "LRAREUIColor" },
    { "up_", NULL, 0x0, "Z" },
    { "iconSize_", NULL, 0x0, "I" },
    { "owner_", NULL, 0x0, "LRAREiPlatformComponent" },
    { "path_", NULL, 0x0, "LRAREiPlatformPath" },
  };
  static J2ObjcClassInfo _RAREPainterUtils_TwistyIcon = { "TwistyIcon", "com.appnativa.rare.ui", "PainterUtils", 0x9, 2, methods, 8, fields, 0, NULL};
  return &_RAREPainterUtils_TwistyIcon;
}

@end
