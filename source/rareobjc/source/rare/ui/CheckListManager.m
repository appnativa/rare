//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/CheckListManager.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/ui/CheckListManager.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformListDataModel.h"
#include "com/appnativa/util/IntList.h"
#include "com/appnativa/util/iFilterableList.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation RARECheckListManager

- (id)initWithBoolean:(BOOL)manageSelections
              withInt:(int)expandableColumn {
  if (self = [super init]) {
    self->manageSelections_ = manageSelections;
    self->expandableColumn_ = expandableColumn;
  }
  return self;
}

- (void)clear {
  if (listModel_ != nil) {
    [self clearWithJavaUtilList:listModel_];
  }
}

- (void)contentsChangedWithId:(id)source {
  id<RAREiPlatformListDataModel> list = (id<RAREiPlatformListDataModel>) check_protocol_cast(source, @protocol(RAREiPlatformListDataModel));
  if (expandableColumn_ > -2) {
    RARERenderableDataItem *item = ([((id<RAREiPlatformListDataModel>) nil_chk(list)) size] == 0) ? nil : [list getWithInt:0];
    if (item == nil) {
      childItemCount_ = 0;
    }
    else {
      RARERenderableDataItem *parent = item;
      while (item != nil) {
        item = [item getParentItem];
        if (item != nil) {
          parent = item;
        }
      }
      [self countListItemsWithJavaUtilList:parent];
    }
  }
  else {
    [self countListItemsWithJavaUtilList:list];
  }
}

- (void)contentsChangedWithId:(id)source
                      withInt:(int)index0
                      withInt:(int)index1 {
  int size = index1 - index0;
  if ((size == childItemCount_) || (expandableColumn_ < -1)) {
    [self contentsChangedWithId:source];
  }
}

- (int)countListItemsWithJavaUtilList:(id<JavaUtilList>)list {
  childItemCount_ = [self countListItemsExWithJavaUtilList:list];
  return childItemCount_;
}

- (void)dispose {
}

- (void)intervalAddedWithId:(id)source
                    withInt:(int)index0
                    withInt:(int)index1 {
  if (expandableColumn_ < -1) {
    childItemCount_ += [JavaLangMath absWithInt:index1 - index0];
  }
}

- (void)intervalRemovedWithId:(id)source
                      withInt:(int)index0
                      withInt:(int)index1
             withJavaUtilList:(id<JavaUtilList>)removed {
  if (expandableColumn_ < -1) {
    childItemCount_ -= [JavaLangMath absWithInt:index1 - index0];
    if (childItemCount_ <= 0) {
      [self contentsChangedWithId:source];
    }
  }
}

- (void)structureChangedWithId:(id)source {
  [self contentsChangedWithId:source];
}

- (BOOL)toggleManagedRowWithInt:(int)row {
  return [self toggleManagedRowWithInt:row withRARERenderableDataItem:[((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row]];
}

- (BOOL)toggleManagedRowWithInt:(int)row
     withRARERenderableDataItem:(RARERenderableDataItem *)parent {
  BOOL checked = [((RARERenderableDataItem *) nil_chk(parent)) isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED];
  if (checked && [parent isStateFlagSetWithShort:RAREiConstants_ITEM_INDETERMINATE]) {
    checked = NO;
  }
  checked = !checked;
  BOOL dirty = [self updateManagedItemWithInt:row withRARERenderableDataItem:parent withBoolean:checked];
  if (manageSelections_) {
    parent = [parent getParentItem];
    if (parent != nil) {
      if (checked) {
        if (![parent isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED]) {
          [self setIndeterminateWithInt:-1 withRARERenderableDataItem:parent withBoolean:YES];
          dirty = [self makeIndeterminateUpwardsWithRARERenderableDataItem:parent];
        }
        else if (checkCount_ == childItemCount_) {
          if ([self setSelectedUpwardsWithRARERenderableDataItem:parent withBoolean:YES]) {
            dirty = YES;
          }
        }
      }
      else {
        if (checkCount_ == 0) {
          if ([self setSelectedUpwardsWithRARERenderableDataItem:parent withBoolean:NO]) {
            dirty = YES;
          }
        }
        else if ([self checkIndeterminateWithRARERenderableDataItem:parent withInt:expandableColumn_]) {
          dirty = YES;
        }
      }
    }
  }
  return dirty;
}

- (BOOL)toggleRowWithInt:(int)row {
  return [self toggleRowWithInt:row withRARERenderableDataItem:[((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row]];
}

- (BOOL)toggleRowWithInt:(int)row
withRARERenderableDataItem:(RARERenderableDataItem *)item {
  BOOL checked = ![((RARERenderableDataItem *) nil_chk(item)) isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED];
  [self setSelectedWithRARERenderableDataItem:item withBoolean:checked];
  if (manageSelections_) {
    RARERenderableDataItem *parent = [item getParentItem];
    if (parent != nil) {
      if (checked) {
        if (![parent isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED]) {
          [self setIndeterminateWithInt:-1 withRARERenderableDataItem:parent withBoolean:YES];
          return [self makeIndeterminateUpwardsWithRARERenderableDataItem:parent];
        }
        else if (checkCount_ == childItemCount_) {
          return [self setSelectedUpwardsWithRARERenderableDataItem:parent withBoolean:YES];
        }
      }
      else {
        if (checkCount_ == 0) {
          return [self setSelectedUpwardsWithRARERenderableDataItem:parent withBoolean:NO];
        }
        return [self checkIndeterminateWithRARERenderableDataItem:parent withInt:expandableColumn_];
      }
    }
  }
  return NO;
}

- (void)setCheckedRowsWithIntArray:(IOSIntArray *)indices {
  id<JavaUtilList> list = listModel_;
  [self clearWithJavaUtilList:list];
  if (indices == nil) {
    return;
  }
  {
    IOSIntArray *a__ = indices;
    int const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    int const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      int i = (*b__++);
      RARERenderableDataItem *item = [((id<JavaUtilList>) nil_chk(list)) getWithInt:i];
      id<JavaUtilList> clist = [self getChildrenWithRARERenderableDataItem:item];
      if ((clist != nil) && ([clist size] > 0)) {
        [self updateManagedItemWithInt:i withRARERenderableDataItem:item withBoolean:YES];
        continue;
      }
      [self toggleRowWithInt:i withRARERenderableDataItem:item];
      if (manageSelections_) {
        RARERenderableDataItem *parent = [((RARERenderableDataItem *) nil_chk(item)) getParentItem];
        if (parent != nil) {
          [self setIndeterminateWithInt:-1 withRARERenderableDataItem:parent withBoolean:YES];
        }
      }
    }
  }
}

- (void)setExpandableColumnWithInt:(int)expandableColumn {
  self->expandableColumn_ = expandableColumn;
}

- (void)setIconsWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)checked
                withRAREiPlatformIcon:(id<RAREiPlatformIcon>)unchecked
                withRAREiPlatformIcon:(id<RAREiPlatformIcon>)indeterminate {
  checkedIcon_ = checked;
  uncheckedIcon_ = unchecked;
  indeterminateIcon_ = indeterminate;
}

- (BOOL)setIndeterminateWithInt:(int)row
     withRARERenderableDataItem:(RARERenderableDataItem *)item
                    withBoolean:(BOOL)indeterminate {
  BOOL dirty = NO;
  if (indeterminate) {
    dirty = ![((RARERenderableDataItem *) nil_chk(item)) isStateFlagSetWithShort:RAREiConstants_ITEM_INDETERMINATE];
    if ([self setSelectedWithRARERenderableDataItem:item withBoolean:YES]) {
      dirty = YES;
    }
    [item setStateFlagWithShort:RAREiConstants_ITEM_INDETERMINATE];
  }
  else {
    dirty = [((RARERenderableDataItem *) nil_chk(item)) isStateFlagSetWithShort:RAREiConstants_ITEM_INDETERMINATE];
    [item unsetStateFlagWithShort:RAREiConstants_ITEM_INDETERMINATE];
  }
  return dirty;
}

- (void)setListModelWithRAREiPlatformListDataModel:(id<RAREiPlatformListDataModel>)listModel {
  if (self->listModel_ != nil) {
    [self->listModel_ removeDataModelListenerWithRAREiDataModelListener:self];
  }
  self->listModel_ = listModel;
  if (listModel != nil) {
    [((id<RAREiPlatformListDataModel>) nil_chk(self->listModel_)) removeDataModelListenerWithRAREiDataModelListener:self];
    [self->listModel_ addDataModelListenerWithRAREiDataModelListener:self];
    [self contentsChangedWithId:listModel];
  }
  else {
    childItemCount_ = 0;
  }
}

- (void)setManageSelectionsWithBoolean:(BOOL)manageSelections {
  self->manageSelections_ = manageSelections;
}

- (int)getCheckedCount {
  return checkCount_;
}

- (id<RAREiPlatformIcon>)getCheckedIcon {
  return checkedIcon_;
}

- (id<JavaUtilList>)getCheckedRowsWithJavaUtilList:(id<JavaUtilList>)list {
  return [self getCheckedRowsWithJavaUtilList:list withJavaUtilList:nil];
}

- (IOSIntArray *)getCheckedRowsIndicesWithJavaUtilList:(id<JavaUtilList>)list {
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  RAREUTIntList *rlist = nil;
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *item = [list getWithInt:i];
    if ([((RARERenderableDataItem *) nil_chk(item)) isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED]) {
      if (rlist == nil) {
        rlist = [[RAREUTIntList alloc] init];
      }
      [((RAREUTIntList *) nil_chk(rlist)) addWithInt:i];
    }
  }
  return (rlist == nil) ? nil : [rlist toArray];
}

- (int)getExpandableColumn {
  return expandableColumn_;
}

- (id<RAREiPlatformIcon>)getIndeterminateIcon {
  return indeterminateIcon_;
}

- (id<RAREiPlatformListDataModel>)getListModel {
  return listModel_;
}

- (id<RAREiPlatformIcon>)getRowIconWithInt:(int)row {
  RARERenderableDataItem *item = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row];
  return [self getRowIconWithInt:row withRARERenderableDataItem:item];
}

- (id<RAREiPlatformIcon>)getRowIconWithInt:(int)row
                withRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (![((RARERenderableDataItem *) nil_chk(item)) isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED]) {
    return uncheckedIcon_;
  }
  if ([item isStateFlagSetWithShort:RAREiConstants_ITEM_INDETERMINATE]) {
    return indeterminateIcon_;
  }
  return checkedIcon_;
}

- (id<RAREiPlatformIcon>)getUncheckedIcon {
  return uncheckedIcon_;
}

- (BOOL)hasCheckedRows {
  return checkCount_ > 0;
}

- (BOOL)isManageSelections {
  return manageSelections_;
}

- (BOOL)isRowCheckedWithInt:(int)row {
  RARERenderableDataItem *item = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row];
  return [((RARERenderableDataItem *) nil_chk(item)) isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED];
}

- (BOOL)checkIndeterminateWithRARERenderableDataItem:(RARERenderableDataItem *)parent
                                             withInt:(int)expandableColumn {
  id<JavaUtilList> list = [self getChildrenWithRARERenderableDataItem:parent];
  int len = (list == nil) ? 0 : [list size];
  if (len == 0) {
    return NO;
  }
  int count = 0;
  for (int i = 0; i < len; i++) {
    if ([((RARERenderableDataItem *) nil_chk([((id<JavaUtilList>) nil_chk(list)) getWithInt:i])) isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED]) {
      count++;
    }
  }
  if (count == 0) {
    [self setSelectedWithRARERenderableDataItem:parent withBoolean:NO];
    if (checkCount_ > 0) {
      [self makeIndeterminateUpwardsWithRARERenderableDataItem:[((RARERenderableDataItem *) nil_chk(parent)) getParentItem]];
    }
    else if (checkCount_ == 0) {
      [self setSelectedUpwardsWithRARERenderableDataItem:parent withBoolean:NO];
    }
    return YES;
  }
  else if (count == len) {
    [self setSelectedWithRARERenderableDataItem:parent withBoolean:YES];
    if (checkCount_ >= childItemCount_) {
      return [self setSelectedUpwardsWithRARERenderableDataItem:[((RARERenderableDataItem *) nil_chk(parent)) getParentItem] withBoolean:YES];
    }
    return [self makeIndeterminateUpwardsWithRARERenderableDataItem:[((RARERenderableDataItem *) nil_chk(parent)) getParentItem]];
  }
  else {
    [self setIndeterminateWithInt:-1 withRARERenderableDataItem:parent withBoolean:YES];
    [self makeIndeterminateUpwardsWithRARERenderableDataItem:[((RARERenderableDataItem *) nil_chk(parent)) getParentItem]];
    return YES;
  }
}

- (void)clearWithJavaUtilList:(id<JavaUtilList>)list {
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *item = [list getWithInt:i];
    [self setSelectedWithRARERenderableDataItem:item withBoolean:NO];
    id<JavaUtilList> clist = [self getChildrenWithRARERenderableDataItem:item];
    if ((clist != nil) && ([clist size] > 0)) {
      [self clearWithJavaUtilList:clist];
    }
  }
}

- (BOOL)updateManagedItemWithInt:(int)row
      withRARERenderableDataItem:(RARERenderableDataItem *)parent
                     withBoolean:(BOOL)checked {
  [self setSelectedWithRARERenderableDataItem:parent withBoolean:checked];
  BOOL deep = NO;
  id<JavaUtilList> list = [self getChildrenWithRARERenderableDataItem:parent];
  int len = (list == nil) ? 0 : [list size];
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *item = [((id<JavaUtilList>) nil_chk(list)) getWithInt:i];
    id<JavaUtilList> clist = [self getChildrenWithRARERenderableDataItem:item];
    if ((clist != nil) && ([clist size] > 0)) {
      [self updateManagedItemWithInt:i withRARERenderableDataItem:item withBoolean:checked];
      deep = YES;
    }
    else if ([((RARERenderableDataItem *) nil_chk(item)) isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED] != checked) {
      [self setSelectedWithRARERenderableDataItem:item withBoolean:checked];
      deep = YES;
    }
  }
  return deep;
}

- (id<JavaUtilList>)getCheckedRowsWithJavaUtilList:(id<JavaUtilList>)list
                                  withJavaUtilList:(id<JavaUtilList>)rlist {
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *item = [list getWithInt:i];
    if ([((RARERenderableDataItem *) nil_chk(item)) isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED]) {
      if (rlist == nil) {
        rlist = [[JavaUtilArrayList alloc] init];
      }
      [((id<JavaUtilList>) nil_chk(rlist)) addWithId:item];
      id<JavaUtilList> clist = [self getChildrenWithRARERenderableDataItem:item];
      if ((clist != nil) && ([clist size] > 0)) {
        (void) [self getCheckedRowsWithJavaUtilList:clist withJavaUtilList:rlist];
      }
    }
  }
  return rlist;
}

- (id<JavaUtilList>)getChildrenWithRARERenderableDataItem:(RARERenderableDataItem *)parent {
  if (expandableColumn_ < -1) {
    return nil;
  }
  RARERenderableDataItem *item = (expandableColumn_ == -1) ? parent : [((RARERenderableDataItem *) nil_chk(parent)) getWithInt:expandableColumn_];
  return (item == nil) ? nil : [item getItems];
}

- (int)countListItemsExWithJavaUtilList:(id<JavaUtilList>)list {
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  int children = len;
  if (expandableColumn_ > -2) {
    children = 0;
    for (int i = 0; i < len; i++) {
      id<JavaUtilList> clist = [self getChildrenWithRARERenderableDataItem:[list getWithInt:i]];
      children++;
      if ((clist != nil) && ([clist size] > 0)) {
        children += [self countListItemsExWithJavaUtilList:clist];
      }
    }
  }
  return children;
}

- (BOOL)makeIndeterminateUpwardsWithRARERenderableDataItem:(RARERenderableDataItem *)parent {
  BOOL dirty = NO;
  while (parent != nil) {
    if ([self setIndeterminateWithInt:-1 withRARERenderableDataItem:parent withBoolean:YES]) {
      dirty = YES;
    }
    parent = [((RARERenderableDataItem *) nil_chk(parent)) getParentItem];
  }
  return dirty;
}

- (BOOL)setSelectedWithRARERenderableDataItem:(RARERenderableDataItem *)item
                                  withBoolean:(BOOL)selected {
  BOOL dirty = [((RARERenderableDataItem *) nil_chk(item)) isStateFlagSetWithShort:RAREiConstants_ITEM_INDETERMINATE];
  if (dirty) {
    [item unsetStateFlagWithShort:RAREiConstants_ITEM_INDETERMINATE];
  }
  if (selected) {
    if (![item isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED]) {
      [item setStateFlagWithShort:RAREiConstants_ITEM_SELECTED];
      if ((expandableColumn_ < -1) || ([item getParentItem] != nil)) {
        checkCount_++;
      }
      dirty = YES;
    }
  }
  else {
    if ([item isStateFlagSetWithShort:RAREiConstants_ITEM_SELECTED]) {
      [item unsetStateFlagWithShort:RAREiConstants_ITEM_SELECTED];
      if ((expandableColumn_ < -1) || ([item getParentItem] != nil)) {
        checkCount_--;
      }
      if (checkCount_ < 0) {
        checkCount_ = 0;
      }
      dirty = YES;
    }
  }
  return dirty;
}

- (BOOL)setSelectedUpwardsWithRARERenderableDataItem:(RARERenderableDataItem *)parent
                                         withBoolean:(BOOL)checked {
  BOOL dirty = NO;
  while (parent != nil) {
    if ([self setSelectedWithRARERenderableDataItem:parent withBoolean:checked]) {
      dirty = YES;
    }
    parent = [((RARERenderableDataItem *) nil_chk(parent)) getParentItem];
  }
  return dirty;
}

- (void)copyAllFieldsTo:(RARECheckListManager *)other {
  [super copyAllFieldsTo:other];
  other->checkCount_ = checkCount_;
  other->checkedIcon_ = checkedIcon_;
  other->childItemCount_ = childItemCount_;
  other->expandableColumn_ = expandableColumn_;
  other->indeterminateIcon_ = indeterminateIcon_;
  other->listModel_ = listModel_;
  other->manageSelections_ = manageSelections_;
  other->uncheckedIcon_ = uncheckedIcon_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "toggleManagedRowWithInt:", NULL, "Z", 0x1, NULL },
    { "toggleManagedRowWithInt:withRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "toggleRowWithInt:", NULL, "Z", 0x1, NULL },
    { "toggleRowWithInt:withRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "setIndeterminateWithInt:withRARERenderableDataItem:withBoolean:", NULL, "Z", 0x1, NULL },
    { "getCheckedIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getCheckedRowsWithJavaUtilList:", NULL, "LJavaUtilList", 0x1, NULL },
    { "getCheckedRowsIndicesWithJavaUtilList:", NULL, "LIOSIntArray", 0x1, NULL },
    { "getIndeterminateIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getListModel", NULL, "LRAREiPlatformListDataModel", 0x1, NULL },
    { "getRowIconWithInt:", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getRowIconWithInt:withRARERenderableDataItem:", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getUncheckedIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "hasCheckedRows", NULL, "Z", 0x1, NULL },
    { "isManageSelections", NULL, "Z", 0x1, NULL },
    { "isRowCheckedWithInt:", NULL, "Z", 0x1, NULL },
    { "checkIndeterminateWithRARERenderableDataItem:withInt:", NULL, "Z", 0x4, NULL },
    { "clearWithJavaUtilList:", NULL, "V", 0x4, NULL },
    { "updateManagedItemWithInt:withRARERenderableDataItem:withBoolean:", NULL, "Z", 0x4, NULL },
    { "getCheckedRowsWithJavaUtilList:withJavaUtilList:", NULL, "LJavaUtilList", 0x4, NULL },
    { "getChildrenWithRARERenderableDataItem:", NULL, "LJavaUtilList", 0x4, NULL },
    { "countListItemsExWithJavaUtilList:", NULL, "I", 0x2, NULL },
    { "makeIndeterminateUpwardsWithRARERenderableDataItem:", NULL, "Z", 0x2, NULL },
    { "setSelectedWithRARERenderableDataItem:withBoolean:", NULL, "Z", 0x2, NULL },
    { "setSelectedUpwardsWithRARERenderableDataItem:withBoolean:", NULL, "Z", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "checkCount_", NULL, 0x4, "I" },
    { "checkedIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "indeterminateIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "uncheckedIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
  };
  static J2ObjcClassInfo _RARECheckListManager = { "CheckListManager", "com.appnativa.rare.ui", NULL, 0x1, 25, methods, 4, fields, 0, NULL};
  return &_RARECheckListManager;
}

@end
