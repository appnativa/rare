//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/FontUtils.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/spot/Font.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SDFNode.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/iURLResolver.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Exception.h"
#include "java/net/URL.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@implementation RAREFontUtils

static RAREUIFont * RAREFontUtils_defaultFont_;
static RAREUIFont * RAREFontUtils_systemFont_;
static float RAREFontUtils_relativeFontSize_ = 1;
static JavaUtilConcurrentConcurrentHashMap * RAREFontUtils_customFonts_;
static int RAREFontUtils_defaultCharWidth_;
static float RAREFontUtils_defaultFontSize_;
static int RAREFontUtils_defaultLineHeight_;

+ (RAREUIFont *)defaultFont {
  return RAREFontUtils_defaultFont_;
}

+ (void)setDefaultFont:(RAREUIFont *)defaultFont {
  RAREFontUtils_defaultFont_ = defaultFont;
}

+ (RAREUIFont *)systemFont {
  return RAREFontUtils_systemFont_;
}

+ (void)setSystemFont:(RAREUIFont *)systemFont {
  RAREFontUtils_systemFont_ = systemFont;
}

+ (float)relativeFontSize {
  return RAREFontUtils_relativeFontSize_;
}

+ (float *)relativeFontSizeRef {
  return &RAREFontUtils_relativeFontSize_;
}

+ (JavaUtilConcurrentConcurrentHashMap *)customFonts {
  return RAREFontUtils_customFonts_;
}

+ (void)setCustomFonts:(JavaUtilConcurrentConcurrentHashMap *)customFonts {
  RAREFontUtils_customFonts_ = customFonts;
}

+ (int)defaultCharWidth {
  return RAREFontUtils_defaultCharWidth_;
}

+ (int *)defaultCharWidthRef {
  return &RAREFontUtils_defaultCharWidth_;
}

+ (float)defaultFontSize {
  return RAREFontUtils_defaultFontSize_;
}

+ (float *)defaultFontSizeRef {
  return &RAREFontUtils_defaultFontSize_;
}

+ (int)defaultLineHeight {
  return RAREFontUtils_defaultLineHeight_;
}

+ (int *)defaultLineHeightRef {
  return &RAREFontUtils_defaultLineHeight_;
}

+ (void)addCustomFontWithNSString:(NSString *)name
                   withRAREUIFont:(RAREUIFont *)font {
  if (RAREFontUtils_customFonts_ == nil) {
    RAREFontUtils_customFonts_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
  }
  (void) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(RAREFontUtils_customFonts_)) putWithId:name withId:font];
}

+ (void)addCustomFontNamesToListWithJavaUtilList:(id<JavaUtilList>)list {
  if (RAREFontUtils_customFonts_ != nil) {
    [((id<JavaUtilList>) nil_chk(list)) addAllWithJavaUtilCollection:[RAREFontUtils_customFonts_ keySet]];
  }
}

+ (void)addCustomFontsToListWithJavaUtilList:(id<JavaUtilList>)list {
  if (RAREFontUtils_customFonts_ != nil) {
    [((id<JavaUtilList>) nil_chk(list)) addAllWithJavaUtilCollection:[RAREFontUtils_customFonts_ values]];
  }
}

+ (void)loadFontWithNSString:(NSString *)name
              withJavaNetURL:(JavaNetURL *)location
                withNSString:(NSString *)type {
  [RAREPlatformHelper loadFontWithNSString:name withJavaNetURL:location withNSString:type];
}

+ (RARESPOTFont *)parseFontWithRAREiWidget:(id<RAREiWidget>)context
                              withNSString:(NSString *)s {
  @try {
    JavaIoReader *r;
    if (![((NSString *) nil_chk(s)) hasPrefix:@"{"]) {
      r = [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) [[RAREUTCharArray alloc] initWithInt:[s sequenceLength] + 2]) setWithChar:'{'])) appendWithNSString:s])) appendWithChar:'}'];
    }
    else {
      r = [[JavaIoStringReader alloc] initWithNSString:s];
    }
    SDFNode *node = [SDFNode parseWithJavaIoReader:r withRAREUTiFileResolver:[((id<RAREiWidget>) nil_chk(context)) getURLResolver] withNSString:nil withBoolean:NO];
    RARESPOTFont *f = [[RARESPOTFont alloc] init];
    node = [((SDFNode *) nil_chk(node)) getFirstDataNode];
    if (node == nil) {
      return nil;
    }
    [f fromSDFWithSDFNode:node];
    return f;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

+ (RAREUIFont *)parseFontWithRAREiWidget:(id<RAREiWidget>)context
                          withRAREUIFont:(RAREUIFont *)base
                            withNSString:(NSString *)s {
  if (s == nil) {
    return nil;
  }
  @try {
    JavaIoReader *r;
    if (![((NSString *) nil_chk(s)) hasPrefix:@"{"]) {
      r = [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) [[RAREUTCharArray alloc] initWithInt:[s sequenceLength] + 2]) setWithChar:'{'])) appendWithNSString:s])) appendWithChar:'}'];
    }
    else {
      r = [[JavaIoStringReader alloc] initWithNSString:s];
    }
    SDFNode *node = [SDFNode parseWithJavaIoReader:r withRAREUTiFileResolver:[((id<RAREiWidget>) nil_chk(context)) getURLResolver] withNSString:nil withBoolean:NO];
    node = [((SDFNode *) nil_chk(node)) getFirstDataNode];
    if (node != nil) {
      s = [node getNodeValueWithNSString:@"style"];
      int style = [RAREUIFont PLAIN];
      if (s != nil) {
        if ([s isEqual:@"bold"]) {
          style = [RAREUIFont BOLD];
        }
        else if ([s isEqual:@"italic"]) {
          style = [RAREUIFont ITALIC];
        }
        else if ([s isEqual:@"italic_bold"]) {
          style = [RAREUIFont ITALIC] | [RAREUIFont BOLD];
        }
      }
      BOOL monospaced = [@"true" isEqual:[node getNodeValueWithNSString:@"monospaced"]];
      BOOL underlined = [@"true" isEqual:[node getNodeValueWithNSString:@"underlined"]];
      BOOL strikeThrough = [@"true" isEqual:[node getNodeValueWithNSString:@"strikeThrough"]];
      return [RAREFontUtils getFontWithRAREUIFont:base withNSString:[node getNodeValueWithNSString:@"family"] withInt:style withNSString:[node getNodeValueWithNSString:@"size"] withBoolean:monospaced withBoolean:underlined withBoolean:strikeThrough];
    }
  }
  @catch (JavaLangException *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
  }
  return nil;
}

- (void)unloadFontWithNSString:(NSString *)name {
  if (RAREFontUtils_customFonts_ != nil) {
    (void) [RAREFontUtils_customFonts_ removeWithId:name];
  }
}

+ (void)setDefaultFontWithRAREUIFont:(RAREUIFont *)font {
  RAREFontUtils_defaultFont_ = font;
  RAREFontUtils_defaultFontSize_ = [((RAREUIFont *) nil_chk(font)) getSize2D];
  [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:@"Rare.font.default" withId:font];
  [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) putWithNSString:@"Rare.font.plaintext" withId:[RAREFontUtils getMonospacedFontWithInt:[font getSize] - 1]];
  RAREFontUtils_defaultCharWidth_ = 0;
  [RAREaPlatformHelper defaultFontUpdatedWithRAREUIFont:font];
  RAREFontUtils_defaultLineHeight_ = [RAREScreenUtils calculateLineHeight];
}

+ (void)setRelativeFontSizeWithFloat:(float)size {
  RAREFontUtils_relativeFontSize_ = size;
  RAREUIFont *f = [RAREFontUtils getDefaultFont];
  size *= RAREFontUtils_defaultFontSize_;
  if (![RAREUTSNumber isEqualWithFloat:[((RAREUIFont *) nil_chk(f)) getSize2D] withFloat:size]) {
    [RAREFontUtils setDefaultFontWithRAREUIFont:[f deriveFontSizeWithFloat:size]];
  }
}

+ (void)setSystemFontWithRAREUIFont:(RAREUIFont *)font {
  RAREFontUtils_systemFont_ = font;
}

+ (int)getCharacterWidthWithRAREUIFont:(RAREUIFont *)f {
  if (f == RAREFontUtils_defaultFont_) {
    if (RAREFontUtils_defaultCharWidth_ == 0) {
      RAREFontUtils_defaultCharWidth_ = [RAREPlatformHelper getCharacterWidthWithRAREUIFont:f];
    }
    return RAREFontUtils_defaultCharWidth_;
  }
  return [RAREPlatformHelper getCharacterWidthWithRAREUIFont:f];
}

+ (RAREUIFont *)getDefaultFont {
  if (RAREFontUtils_defaultFont_ == nil) {
    return [RAREFontUtils getSystemFont];
  }
  return RAREFontUtils_defaultFont_;
}

+ (float)getDefaultFontSize {
  return RAREFontUtils_defaultFontSize_;
}

+ (int)getDefaultLineHeight {
  return RAREFontUtils_defaultLineHeight_;
}

+ (int)getDefaultWidgetHeight {
  return [RAREScreenUtils platformPixelsWithFloat:28];
}

+ (RAREUIFont *)getFontWithRAREUIFont:(RAREUIFont *)base
                         withNSString:(NSString *)family
                         withNSString:(NSString *)sstyle
                         withNSString:(NSString *)ssize
                          withBoolean:(BOOL)monospaced {
  int style = -1;
  if (sstyle != nil) {
    if ([sstyle contains:@"italic"]) {
      style = [RAREUIFont ITALIC];
      if ([sstyle contains:@"bold"]) {
        style |= [RAREUIFont BOLD];
      }
    }
    else {
      if ([sstyle contains:@"bold"]) {
        style = [RAREUIFont BOLD];
      }
    }
  }
  return [RAREFontUtils getFontWithRAREUIFont:base withNSString:family withInt:style withNSString:ssize withBoolean:monospaced withBoolean:NO withBoolean:NO];
}

+ (RAREUIFont *)getFontWithRAREUIFont:(RAREUIFont *)base
                         withNSString:(NSString *)family
                              withInt:(int)style
                         withNSString:(NSString *)ssize
                          withBoolean:(BOOL)monospaced
                          withBoolean:(BOOL)underlined
                          withBoolean:(BOOL)strikeThrough {
  RAREUIFont *f = (base == nil) ? [RAREFontUtils getDefaultFont] : base;
  if (monospaced) {
    f = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getFontWithNSString:@"Rare.font.plaintext"];
    if ((style == 0) && (ssize == nil)) {
      if (strikeThrough || underlined) {
        f = [[RAREUIFont alloc] initWithRAREUIFont:f];
        f = [f deriveWithBoolean:strikeThrough withBoolean:underlined];
      }
      return f;
    }
  }
  else if (family != nil) {
    if ([@"system" equalsIgnoreCase:family]) {
      f = [RAREFontUtils getSystemFont];
    }
    else if ([family hasPrefix:@"(default)"]) {
      family = nil;
    }
  }
  if (f == nil) {
    f = [RAREFontUtils getDefaultFont];
  }
  if (style == -1) {
    style = [((RAREUIFont *) nil_chk(f)) getStyle];
  }
  float size = [((RAREUIFont *) nil_chk(f)) getSize];
  if (size == 0) {
    size = 8;
  }
  float fsize = size;
  RAREUIFont *ff;
  BOOL sizeSame = (ssize == nil) || ([ssize indexOf:','] == -1);
  if (sizeSame && (ssize != nil)) {
    fsize = [RAREFontUtils getSizeWithNSString:ssize withFloat:size];
  }
  if ((family != nil) && ([family indexOf:','] != -1)) {
    int i = 0;
    NSString *s, *ss;
    while ((s = [RAREUTCharScanner getPieceWithNSString:family withChar:',' withInt:++i]) != nil) {
      if ([((NSString *) nil_chk(s)) equalsIgnoreCase:@"sans-serif"]) {
        s = @"SansSerif";
      }
      if (!sizeSame) {
        ss = [RAREUTCharScanner getPieceWithNSString:ssize withChar:',' withInt:i];
        if ((ss != nil) && ([ss sequenceLength] > 0)) {
          fsize = [RAREFontUtils getSizeWithNSString:ss withFloat:size];
        }
      }
      ff = [[RAREUIFont alloc] initWithNSString:s withInt:style withInt:(int) fsize];
      if (![((NSString *) nil_chk([ff getFamily])) isEqual:@"Dialog"]) {
        if (fsize != (int) fsize) {
          ff = [ff deriveFontSizeWithFloat:fsize];
        }
        return ff;
      }
    }
    fsize = size;
    family = nil;
  }
  else if ([@"sans-serif" equalsIgnoreCase:family]) {
    family = @"SansSerif";
  }
  if (family != nil) {
    f = [RAREFontUtils newFontWithRAREUIFont:f withNSString:family withInt:style withFloat:fsize withBoolean:[((NSString *) nil_chk([f getFamily])) equalsIgnoreCase:family]];
    if (strikeThrough || underlined) {
      f = [((RAREUIFont *) nil_chk(f)) deriveWithBoolean:strikeThrough withBoolean:underlined];
    }
    return f;
  }
  f = [RAREFontUtils newFontWithRAREUIFont:f withNSString:[((RAREUIFont *) nil_chk(f)) getFamily] withInt:style withFloat:fsize withBoolean:YES];
  if (strikeThrough || underlined) {
    f = [((RAREUIFont *) nil_chk(f)) deriveWithBoolean:strikeThrough withBoolean:underlined];
  }
  return f;
}

+ (float)getFontHeightWithRAREUIFont:(RAREUIFont *)f
                         withBoolean:(BOOL)full {
  return [RAREPlatformHelper getFontHeightWithRAREUIFont:f withBoolean:full];
}

+ (RAREUIFont *)getMonospacedFontWithInt:(int)size {
  return [RAREaPlatformHelper getMonospacedFontWithInt:size];
}

+ (float)getRelativeFontSize {
  return RAREFontUtils_relativeFontSize_;
}

+ (float)getSizeWithNSString:(NSString *)ssize
                   withFloat:(float)size {
  if ((ssize != nil) && ([ssize sequenceLength] > 0)) {
    if ([ssize hasSuffix:@"px"]) {
      size = [RAREScreenUtils getCssPixelSizeWithFloat:[RAREUTSNumber floatValueWithNSString:ssize]];
    }
    else if ([ssize hasPrefix:@"+"]) {
      size += [RAREUTSNumber floatValueWithNSString:ssize];
    }
    else if ([ssize hasPrefix:@"-"]) {
      size += [RAREUTSNumber floatValueWithNSString:ssize];
    }
    else if ([ssize hasPrefix:@"*"]) {
      size *= [RAREUTSNumber floatValueWithNSString:[ssize substring:1]];
    }
    else if ([ssize hasSuffix:@"pt"]) {
      size = [RAREScreenUtils toPlatformPixelsWithFloat:[RAREUTSNumber floatValueWithNSString:ssize] withRAREScreenUtils_UnitEnum:[RAREScreenUtils_UnitEnum POINT] withBoolean:YES];
    }
    else if ([ssize hasSuffix:@"em"]) {
      size *= [RAREUTSNumber floatValueWithNSString:ssize];
    }
    else if ([ssize hasSuffix:@"%"]) {
      size *= [RAREUTSNumber floatValueWithNSString:ssize];
      size /= 100;
    }
    else if ([ssize hasSuffix:@"pc"]) {
      size = [RAREScreenUtils toPlatformPixelsWithFloat:[RAREUTSNumber floatValueWithNSString:ssize] withRAREScreenUtils_UnitEnum:[RAREScreenUtils_UnitEnum PICA] withBoolean:YES];
    }
    else {
      size = [RAREUTSNumber floatValueWithNSString:ssize];
    }
  }
  return size;
}

+ (RAREUIFont *)getSystemFont {
  return RAREFontUtils_systemFont_;
}

+ (RAREUIFont *)newFontWithRAREUIFont:(RAREUIFont *)base
                         withNSString:(NSString *)family
                              withInt:(int)style
                            withFloat:(float)fsize
                          withBoolean:(BOOL)sameFamily {
  int size = (int) fsize;
  RAREUIFont *f;
  if (!sameFamily && (RAREFontUtils_customFonts_ != nil)) {
    f = [RAREFontUtils_customFonts_ getWithId:family];
    if (f != nil) {
      base = f;
      sameFamily = YES;
    }
  }
  if (sameFamily) {
    f = [((RAREUIFont *) nil_chk(base)) deriveFontWithInt:style withFloat:fsize];
  }
  else {
    f = [[RAREUIFont alloc] initWithNSString:family withInt:style withInt:size];
    if (size != (int) fsize) {
      f = [f deriveFontSizeWithFloat:fsize];
    }
  }
  return f;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "parseFontWithRAREiWidget:withNSString:", NULL, "LRARESPOTFont", 0x9, NULL },
    { "parseFontWithRAREiWidget:withRAREUIFont:withNSString:", NULL, "LRAREUIFont", 0x9, NULL },
    { "getDefaultFont", NULL, "LRAREUIFont", 0x9, NULL },
    { "getFontWithRAREUIFont:withNSString:withNSString:withNSString:withBoolean:", NULL, "LRAREUIFont", 0x9, NULL },
    { "getFontWithRAREUIFont:withNSString:withInt:withNSString:withBoolean:withBoolean:withBoolean:", NULL, "LRAREUIFont", 0x9, NULL },
    { "getMonospacedFontWithInt:", NULL, "LRAREUIFont", 0x9, NULL },
    { "getSystemFont", NULL, "LRAREUIFont", 0x9, NULL },
    { "newFontWithRAREUIFont:withNSString:withInt:withFloat:withBoolean:", NULL, "LRAREUIFont", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "defaultFont_", NULL, 0x8, "LRAREUIFont" },
    { "systemFont_", NULL, 0x8, "LRAREUIFont" },
    { "relativeFontSize_", NULL, 0xa, "F" },
    { "customFonts_", NULL, 0xa, "LJavaUtilConcurrentConcurrentHashMap" },
    { "defaultCharWidth_", NULL, 0xa, "I" },
    { "defaultFontSize_", NULL, 0xa, "F" },
    { "defaultLineHeight_", NULL, 0xa, "I" },
  };
  static J2ObjcClassInfo _RAREFontUtils = { "FontUtils", "com.appnativa.rare.ui", NULL, 0x1, 8, methods, 7, fields, 0, NULL};
  return &_RAREFontUtils;
}

@end
