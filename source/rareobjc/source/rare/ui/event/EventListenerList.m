//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/ui/event/EventListenerList.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/ui/event/EventListenerList.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Arrays.h"
#include "java/util/EventListener.h"

@implementation RAREEventListenerList

- (void)addWithIOSClass:(IOSClass *)listenerClass
                 withId:(id)listener {
  @synchronized(self) {
    {
      if (listener == nil) {
        return;
      }
      int position = -1;
      for (int i = (int) [((IOSObjectArray *) nil_chk(listenerList_)) count] - 1; i > 0; i -= 2) {
        if ((listenerClass == IOSObjectArray_Get(listenerList_, i - 1)) && (listener == IOSObjectArray_Get(listenerList_, i))) {
          position = i - 1;
          break;
        }
      }
      if (position >= 0) {
        return;
      }
      IOSObjectArray *newList = [IOSObjectArray arrayWithLength:(int) [listenerList_ count] + 2 type:[IOSClass classWithClass:[NSObject class]]];
      [JavaLangSystem arraycopyWithId:listenerList_ withInt:0 withId:newList withInt:0 withInt:(int) [listenerList_ count]];
      (void) IOSObjectArray_Set(newList, (int) [listenerList_ count], listenerClass);
      (void) IOSObjectArray_Set(newList, (int) [listenerList_ count] + 1, listener);
      listenerList_ = newList;
    }
  }
}

- (void)clear {
  if (listenerList_ != nil) {
    [JavaUtilArrays fillWithNSObjectArray:listenerList_ withId:nil];
  }
}

- (void)removeWithIOSClass:(IOSClass *)listenerClass
                    withId:(id)listener {
  @synchronized(self) {
    {
      if (listener == nil) {
        return;
      }
      int position = -1;
      for (int i = (int) [((IOSObjectArray *) nil_chk(listenerList_)) count] - 1; i > 0; i -= 2) {
        if ((listenerClass == IOSObjectArray_Get(listenerList_, i - 1)) && [nil_chk(listener) isEqual:IOSObjectArray_Get(listenerList_, i)]) {
          position = i - 1;
          break;
        }
      }
      if (position >= 0) {
        IOSObjectArray *newList = [IOSObjectArray arrayWithLength:(int) [listenerList_ count] - 2 type:[IOSClass classWithClass:[NSObject class]]];
        [JavaLangSystem arraycopyWithId:listenerList_ withInt:0 withId:newList withInt:0 withInt:position];
        [JavaLangSystem arraycopyWithId:listenerList_ withInt:position + 2 withId:newList withInt:position withInt:(int) [listenerList_ count] - position - 2];
        listenerList_ = newList;
      }
    }
  }
}

- (NSString *)description {
  NSString *str = @"EventListenerList: ";
  str = [NSString stringWithFormat:@"%@%@", str, [NSString stringWithFormat:@"%d listeners:", [self getListenerCount]]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(listenerList_)) count]; i += 2) {
    str = [NSString stringWithFormat:@"%@%@", str, [NSString stringWithFormat:@" type %@ listener %@", [((IOSClass *) check_class_cast(IOSObjectArray_Get(listenerList_, i), [IOSClass class])) getName], [IOSObjectArray_Get(listenerList_, i + 1) description]]];
  }
  return str;
}

- (int)getListenerCount {
  return (int) [((IOSObjectArray *) nil_chk(listenerList_)) count] >> 1;
}

- (int)getListenerCountWithIOSClass:(IOSClass *)listenerClass {
  int count = 0;
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(listenerList_)) count]; i += 2) {
    if (IOSObjectArray_Get(listenerList_, i) == listenerClass) {
      count++;
    }
  }
  return count;
}

- (IOSObjectArray *)getListenerList {
  return listenerList_;
}

- (IOSObjectArray *)getListenersWithIOSClass:(IOSClass *)listenerClass {
  int numClassListeners = [self getListenerCountWithIOSClass:listenerClass];
  IOSObjectArray *listeners = (IOSObjectArray *) check_class_cast(([JavaLangReflectArray newInstanceWithIOSClass:listenerClass withInt:numClassListeners]), [IOSObjectArray class]);
  if (numClassListeners > 0) {
    for (int innerIndex = 0, outerIndex = 0; outerIndex < numClassListeners; innerIndex += 2) {
      if (IOSObjectArray_Get(nil_chk(listenerList_), innerIndex) == listenerClass) {
        (void) IOSObjectArray_Set(nil_chk(listeners), numClassListeners - 1 - outerIndex, (id<JavaUtilEventListener>) IOSObjectArray_Get(listenerList_, innerIndex + 1));
        ++outerIndex;
      }
    }
  }
  return listeners;
}

- (BOOL)hasListenerWithIOSClass:(IOSClass *)listenerClass
                         withId:(id)listener {
  @synchronized(self) {
    {
      if (listener == nil) {
        return NO;
      }
      int position = -1;
      for (int i = (int) [((IOSObjectArray *) nil_chk(listenerList_)) count] - 1; i > 0; i -= 2) {
        if ((listenerClass == IOSObjectArray_Get(listenerList_, i - 1)) && [nil_chk(listener) isEqual:IOSObjectArray_Get(listenerList_, i)]) {
          position = i - 1;
          break;
        }
      }
      return position >= 0;
    }
  }
}

- (BOOL)hasListenersWithIOSClass:(IOSClass *)listenerClass {
  return [self getListenerCountWithIOSClass:listenerClass] > 0;
}

- (id)init {
  if (self = [super init]) {
    listenerList_ = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]];
  }
  return self;
}

- (void)copyAllFieldsTo:(RAREEventListenerList *)other {
  [super copyAllFieldsTo:other];
  other->listenerList_ = listenerList_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addWithIOSClass:withId:", NULL, "V", 0x21, NULL },
    { "removeWithIOSClass:withId:", NULL, "V", 0x21, NULL },
    { "getListenerList", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getListenersWithIOSClass:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "hasListenerWithIOSClass:withId:", NULL, "Z", 0x21, NULL },
    { "hasListenersWithIOSClass:", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "listenerList_", NULL, 0x84, "LIOSObjectArray" },
  };
  static J2ObjcClassInfo _RAREEventListenerList = { "EventListenerList", "com.appnativa.rare.ui.event", NULL, 0x1, 6, methods, 1, fields, 0, NULL};
  return &_RAREEventListenerList;
}

@end
