//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/scripting/EventHandlerInterface.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iWeakReference.h"
#include "com/appnativa/rare/scripting/EventHandlerInterface.h"
#include "com/appnativa/rare/ui/event/EventBase.h"
#include "com/appnativa/rare/ui/iEventHandler.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "java/lang/Exception.h"
#include "java/lang/reflect/Method.h"
#include "java/util/EventObject.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@implementation RAREEventHandlerInterface

static JavaUtilConcurrentConcurrentHashMap * RAREEventHandlerInterface_handlerMap_;

+ (JavaUtilConcurrentConcurrentHashMap *)handlerMap {
  return RAREEventHandlerInterface_handlerMap_;
}

+ (void)setHandlerMap:(JavaUtilConcurrentConcurrentHashMap *)handlerMap {
  RAREEventHandlerInterface_handlerMap_ = handlerMap;
}

- (id)initWithNSString:(NSString *)unparsedString {
  if (self = [super init]) {
    unparsedString = [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) expandStringWithNSString:unparsedString];
    int n = [((NSString *) nil_chk(unparsedString)) indexOfString:@"#"];
    if (n == -1) {
      className__ = [unparsedString substring:6];
    }
    else {
      className__ = [unparsedString substring:6 endIndex:n];
      methodName_ = [unparsedString substring:n + 1];
      n = [((NSString *) nil_chk(methodName_)) indexOf:'?'];
      if (n != -1) {
        queryString_ = [methodName_ substring:n + 1];
        methodName_ = [methodName_ substring:0 endIndex:n];
      }
    }
  }
  return self;
}

- (id)initWithNSString:(NSString *)methodName
          withNSString:(NSString *)className_ {
  if (self = [super init]) {
    self->methodName_ = methodName;
    self->className__ = className_;
  }
  return self;
}

- (void)callHandlerWithNSString:(NSString *)eventName
                withRAREiWidget:(id<RAREiWidget>)widget
        withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if ((eventHandler_ == nil) || ((method_ == nil) && (methodName_ != nil))) {
    [self createHandlerWithNSString:eventName withRAREiWidget:widget];
  }
  if ((queryString_ != nil) && ([event isKindOfClass:[RAREEventBase class]])) {
    [((RAREEventBase *) check_class_cast(event, [RAREEventBase class])) setQueryStringWithNSString:queryString_];
  }
  if (method_ == nil) {
    [((id<RAREiEventHandler>) nil_chk(eventHandler_)) onEventWithNSString:eventName withRAREiWidget:widget withJavaUtilEventObject:event];
  }
  else {
    @try {
      (void) [method_ invokeWithId:eventHandler_ withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ eventName, widget, event } count:3 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    @catch (JavaLangException *e) {
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
    }
  }
}

- (id<RAREiEventHandler>)getHandler {
  return eventHandler_;
}

+ (id<RAREiEventHandler>)getHandlerWithNSString:(NSString *)className_ {
  id<RAREiWeakReference> ref = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(RAREEventHandlerInterface_handlerMap_)) getWithId:className_];
  id<RAREiEventHandler> h = (id<RAREiEventHandler>) check_protocol_cast(((ref == nil) ? nil : [ref get]), @protocol(RAREiEventHandler));
  if (h == nil) {
    h = (id<RAREiEventHandler>) check_protocol_cast([RAREPlatform createObjectWithNSString:className_], @protocol(RAREiEventHandler));
    (void) [RAREEventHandlerInterface_handlerMap_ putWithId:className_ withId:[RAREPlatform createWeakReferenceWithId:h]];
  }
  return h;
}

- (void)createHandlerWithNSString:(NSString *)eventName
                  withRAREiWidget:(id<RAREiWidget>)widget {
  if (eventHandler_ == nil) {
    @try {
      id<RAREiWeakReference> ref = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(RAREEventHandlerInterface_handlerMap_)) getWithId:className__];
      eventHandler_ = (id<RAREiEventHandler>) check_protocol_cast(((ref == nil) ? nil : [ref get]), @protocol(RAREiEventHandler));
      if (eventHandler_ == nil) {
        IOSClass *cls = [RAREPlatform loadClassWithNSString:className__];
        if (cls != nil) {
          ref = [RAREEventHandlerInterface_handlerMap_ getWithId:[cls getName]];
          eventHandler_ = (id<RAREiEventHandler>) check_protocol_cast(((ref == nil) ? nil : [ref get]), @protocol(RAREiEventHandler));
          if (eventHandler_ == nil) {
            eventHandler_ = (id<RAREiEventHandler>) check_protocol_cast([cls newInstance], @protocol(RAREiEventHandler));
            (void) [RAREEventHandlerInterface_handlerMap_ putWithId:className__ withId:[RAREPlatform createWeakReferenceWithId:eventHandler_]];
            NSString *name = [cls getName];
            if (![((NSString *) nil_chk(name)) isEqual:className__]) {
              (void) [RAREEventHandlerInterface_handlerMap_ putWithId:name withId:[RAREPlatform createWeakReferenceWithId:eventHandler_]];
            }
          }
        }
      }
    }
    @catch (JavaLangException *ignore) {
    }
    if (eventHandler_ == nil) {
      @throw [[RAREApplicationException alloc] initWithNSString:[NSString stringWithFormat:@"could not create event handler:%@", className__]];
    }
  }
  if (methodName_ != nil) {
    NSString *name = methodName_;
    if ([name sequenceLength] == 0) {
      name = [((id<RAREiWidget>) nil_chk(widget)) getName];
    }
    else {
      if ([name indexOfString:@"{widget}"] != -1) {
        name = [name replace:@"{widget}" withSequence:[((id<RAREiWidget>) nil_chk(widget)) getName]];
      }
      if ([((NSString *) nil_chk(name)) indexOfString:@"{widget}"] != -1) {
        name = [name replace:@"{event}" withSequence:eventName];
      }
    }
    @try {
      method_ = [[((id<RAREiEventHandler>) nil_chk(eventHandler_)) getClass] getMethod:methodName_ parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]], [IOSClass classWithProtocol:@protocol(RAREiWidget)], [IOSClass classWithClass:[JavaUtilEventObject class]] } count:3 type:[IOSClass classWithClass:[IOSClass class]]]];
    }
    @catch (JavaLangException *e) {
      @throw [[RAREApplicationException alloc] initWithNSString:[NSString stringWithFormat:@"could not find method:%@ in class:%@", name, className__]];
    }
  }
}

+ (void)initialize {
  if (self == [RAREEventHandlerInterface class]) {
    RAREEventHandlerInterface_handlerMap_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
  }
}

- (void)copyAllFieldsTo:(RAREEventHandlerInterface *)other {
  [super copyAllFieldsTo:other];
  other->className__ = className__;
  other->eventHandler_ = eventHandler_;
  other->method_ = method_;
  other->methodName_ = methodName_;
  other->queryString_ = queryString_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getHandler", NULL, "LRAREiEventHandler", 0x1, NULL },
    { "getHandlerWithNSString:", NULL, "LRAREiEventHandler", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "handlerMap_", NULL, 0x8, "LJavaUtilConcurrentConcurrentHashMap" },
    { "eventHandler_", NULL, 0x0, "LRAREiEventHandler" },
    { "methodName_", NULL, 0x0, "LNSString" },
    { "className__", "className", 0x0, "LNSString" },
    { "queryString_", NULL, 0x0, "LNSString" },
    { "method_", NULL, 0x0, "LJavaLangReflectMethod" },
  };
  static J2ObjcClassInfo _RAREEventHandlerInterface = { "EventHandlerInterface", "com.appnativa.rare.scripting", NULL, 0x1, 2, methods, 6, fields, 0, NULL};
  return &_RAREEventHandlerInterface;
}

@end
