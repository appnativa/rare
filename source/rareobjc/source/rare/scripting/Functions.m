//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/scripting/Functions.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/FunctionCallbackChainer.h"
#include "com/appnativa/rare/FunctionCallbackWaiter.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/Conversions.h"
#include "com/appnativa/rare/converters/DateContext.h"
#include "com/appnativa/rare/converters/DateConverter.h"
#include "com/appnativa/rare/converters/DateTimeConverter.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iFunctionCallback.h"
#include "com/appnativa/rare/iFunctionHandler.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/JavaURLConnection.h"
#include "com/appnativa/rare/net/iURLConnection.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/scripting/EventHandlerInterface.h"
#include "com/appnativa/rare/scripting/FunctionHelper.h"
#include "com/appnativa/rare/scripting/Functions.h"
#include "com/appnativa/rare/scripting/WidgetContext.h"
#include "com/appnativa/rare/scripting/iScriptHandler.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIBorderHelper.h"
#include "com/appnativa/rare/ui/UIBorderIcon.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UIColorShade.h"
#include "com/appnativa/rare/ui/UICompoundIcon.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontHelper.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/UITextIcon.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/border/UICompoundBorder.h"
#include "com/appnativa/rare/ui/effects/iAnimator.h"
#include "com/appnativa/rare/ui/effects/iAnimatorValueListener.h"
#include "com/appnativa/rare/ui/iEventHandler.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/painter/UICompoundPainter.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformPainter.h"
#include "com/appnativa/rare/ui/text/Segment.h"
#include "com/appnativa/rare/util/DataItemJSONParser.h"
#include "com/appnativa/rare/util/DataItemParserHandler.h"
#include "com/appnativa/rare/util/Grouper.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/Base64.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/ContainsFilter.h"
#include "com/appnativa/util/EqualityFilter.h"
#include "com/appnativa/util/FilterableList.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/ISO88591Helper.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/appnativa/util/IntList.h"
#include "com/appnativa/util/ObjectCache.h"
#include "com/appnativa/util/ObjectHolder.h"
#include "com/appnativa/util/RegularExpressionFilter.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/SimpleDateFormatEx.h"
#include "com/appnativa/util/Streams.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/URLEncoder.h"
#include "com/appnativa/util/iCancelable.h"
#include "com/appnativa/util/iFilter.h"
#include "com/appnativa/util/iFilterableList.h"
#include "com/appnativa/util/iPreferences.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONException.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/appnativa/util/xml/XMLUtils.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/net/URL.h"
#include "java/text/DateFormat.h"
#include "java/text/DateFormatSymbols.h"
#include "java/text/DecimalFormat.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Calendar.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@implementation RAREFunctions

static IOSCharArray * RAREFunctions_BR_;
static JavaLangThreadLocal * RAREFunctions_perThreadCharArray_;
static JavaLangThreadLocal * RAREFunctions_perThreadScanner_;
static JavaLangThreadLocal * RAREFunctions_perThreadStringList_;
static JavaUtilHashMap * RAREFunctions_functionMap_;
static JavaUtilRegexPattern * RAREFunctions_urlPattern_;
static IOSCharArray * RAREFunctions_wwwPrefixChars_;
static IOSCharArray * RAREFunctions_urlParamsTokens_;
static IOSCharArray * RAREFunctions_httpsPrefixChars_;
static IOSCharArray * RAREFunctions_httpPrefixChars_;
static BOOL RAREFunctions__initialized_;
static RAREFunctions * RAREFunctions__instance_;
static NSString * RAREFunctions_osVersion_;
static JavaUtilRandom * RAREFunctions_randomGenerator_;

+ (int)FUNC_ADD {
  return RAREFunctions_FUNC_ADD;
}

+ (int)FUNC_APPURL {
  return RAREFunctions_FUNC_APPURL;
}

+ (int)FUNC_BASE64 {
  return RAREFunctions_FUNC_BASE64;
}

+ (int)FUNC_BOLD {
  return RAREFunctions_FUNC_BOLD;
}

+ (int)FUNC_CHOP {
  return RAREFunctions_FUNC_CHOP;
}

+ (int)FUNC_CODEBASE {
  return RAREFunctions_FUNC_CODEBASE;
}

+ (int)FUNC_COLOR {
  return RAREFunctions_FUNC_COLOR;
}

+ (int)FUNC_CONCAT {
  return RAREFunctions_FUNC_CONCAT;
}

+ (int)FUNC_CURRENTDATE {
  return RAREFunctions_FUNC_CURRENTDATE;
}

+ (int)FUNC_CURRENTTIME {
  return RAREFunctions_FUNC_CURRENTTIME;
}

+ (int)FUNC_CURRENT_TIME {
  return RAREFunctions_FUNC_CURRENT_TIME;
}

+ (int)FUNC_DATE {
  return RAREFunctions_FUNC_DATE;
}

+ (int)FUNC_DATE_TIME {
  return RAREFunctions_FUNC_DATE_TIME;
}

+ (int)FUNC_DOCBASE {
  return RAREFunctions_FUNC_DOCBASE;
}

+ (int)FUNC_END_TAG {
  return RAREFunctions_FUNC_END_TAG;
}

+ (int)FUNC_ESCAPE {
  return RAREFunctions_FUNC_ESCAPE;
}

+ (int)FUNC_HMAC_MD5 {
  return RAREFunctions_FUNC_HMAC_MD5;
}

+ (int)FUNC_HMAC_SHA {
  return RAREFunctions_FUNC_HMAC_SHA;
}

+ (int)FUNC_HTML {
  return RAREFunctions_FUNC_HTML;
}

+ (int)FUNC_ITALIC {
  return RAREFunctions_FUNC_ITALIC;
}

+ (int)FUNC_LENGTH {
  return RAREFunctions_FUNC_LENGTH;
}

+ (int)FUNC_LOCATION {
  return RAREFunctions_FUNC_LOCATION;
}

+ (int)FUNC_LOWER_CASE {
  return RAREFunctions_FUNC_LOWER_CASE;
}

+ (int)FUNC_MD5 {
  return RAREFunctions_FUNC_MD5;
}

+ (int)FUNC_NANOTIME {
  return RAREFunctions_FUNC_NANOTIME;
}

+ (int)FUNC_ORIENTATION {
  return RAREFunctions_FUNC_ORIENTATION;
}

+ (int)FUNC_PIECE {
  return RAREFunctions_FUNC_PIECE;
}

+ (int)FUNC_PROPERTY {
  return RAREFunctions_FUNC_PROPERTY;
}

+ (int)FUNC_RANDOM {
  return RAREFunctions_FUNC_RANDOM;
}

+ (int)FUNC_REPLACE_PIECE {
  return RAREFunctions_FUNC_REPLACE_PIECE;
}

+ (int)FUNC_RESOLVE {
  return RAREFunctions_FUNC_RESOLVE;
}

+ (int)FUNC_RFORMAT {
  return RAREFunctions_FUNC_RFORMAT;
}

+ (int)FUNC_SERVERBASE {
  return RAREFunctions_FUNC_SERVERBASE;
}

+ (int)FUNC_SHA {
  return RAREFunctions_FUNC_SHA;
}

+ (int)FUNC_SOUND {
  return RAREFunctions_FUNC_SOUND;
}

+ (int)FUNC_START_TAG {
  return RAREFunctions_FUNC_START_TAG;
}

+ (int)FUNC_SUBSTRING {
  return RAREFunctions_FUNC_SUBSTRING;
}

+ (int)FUNC_TRIM {
  return RAREFunctions_FUNC_TRIM;
}

+ (int)FUNC_UNDERLINED {
  return RAREFunctions_FUNC_UNDERLINED;
}

+ (int)FUNC_UPPER_CASE {
  return RAREFunctions_FUNC_UPPER_CASE;
}

+ (IOSCharArray *)BR {
  return RAREFunctions_BR_;
}

+ (JavaLangThreadLocal *)perThreadCharArray {
  return RAREFunctions_perThreadCharArray_;
}

+ (void)setPerThreadCharArray:(JavaLangThreadLocal *)perThreadCharArray {
  RAREFunctions_perThreadCharArray_ = perThreadCharArray;
}

+ (JavaLangThreadLocal *)perThreadScanner {
  return RAREFunctions_perThreadScanner_;
}

+ (void)setPerThreadScanner:(JavaLangThreadLocal *)perThreadScanner {
  RAREFunctions_perThreadScanner_ = perThreadScanner;
}

+ (JavaLangThreadLocal *)perThreadStringList {
  return RAREFunctions_perThreadStringList_;
}

+ (void)setPerThreadStringList:(JavaLangThreadLocal *)perThreadStringList {
  RAREFunctions_perThreadStringList_ = perThreadStringList;
}

+ (JavaUtilHashMap *)functionMap {
  return RAREFunctions_functionMap_;
}

+ (JavaUtilRegexPattern *)urlPattern {
  return RAREFunctions_urlPattern_;
}

+ (IOSCharArray *)wwwPrefixChars {
  return RAREFunctions_wwwPrefixChars_;
}

+ (void)setWwwPrefixChars:(IOSCharArray *)wwwPrefixChars {
  RAREFunctions_wwwPrefixChars_ = wwwPrefixChars;
}

+ (IOSCharArray *)urlParamsTokens {
  return RAREFunctions_urlParamsTokens_;
}

+ (void)setUrlParamsTokens:(IOSCharArray *)urlParamsTokens {
  RAREFunctions_urlParamsTokens_ = urlParamsTokens;
}

+ (IOSCharArray *)httpsPrefixChars {
  return RAREFunctions_httpsPrefixChars_;
}

+ (void)setHttpsPrefixChars:(IOSCharArray *)httpsPrefixChars {
  RAREFunctions_httpsPrefixChars_ = httpsPrefixChars;
}

+ (IOSCharArray *)httpPrefixChars {
  return RAREFunctions_httpPrefixChars_;
}

+ (void)setHttpPrefixChars:(IOSCharArray *)httpPrefixChars {
  RAREFunctions_httpPrefixChars_ = httpPrefixChars;
}

+ (BOOL)_initialized {
  return RAREFunctions__initialized_;
}

+ (BOOL *)_initializedRef {
  return &RAREFunctions__initialized_;
}

+ (RAREFunctions *)_instance {
  return RAREFunctions__instance_;
}

+ (void)set_instance:(RAREFunctions *)_instance {
  RAREFunctions__instance_ = _instance;
}

+ (NSString *)osVersion {
  return RAREFunctions_osVersion_;
}

+ (void)setOsVersion:(NSString *)osVersion {
  RAREFunctions_osVersion_ = osVersion;
}

+ (JavaUtilRandom *)randomGenerator {
  return RAREFunctions_randomGenerator_;
}

+ (void)setRandomGenerator:(JavaUtilRandom *)randomGenerator {
  RAREFunctions_randomGenerator_ = randomGenerator;
}

- (id)init {
  if (self = [super init]) {
    zero_string_ = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:[IOSClass classWithClass:[NSString class]]];
    if (!RAREFunctions__initialized_) {
      RAREFunctions__initialized_ = YES;
      [RAREFunctions initializeFunctionMap];
      RAREFunctions__instance_ = self;
    }
  }
  return self;
}

+ (NSNumber *)addWithId:(id)a
                 withId:(id)b {
  return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithNSString:[nil_chk(a) description]]) addWithNSString:[nil_chk(b) description]];
}

+ (NSString *)aesDecryptWithNSString:(NSString *)val
                        withNSString:(NSString *)password
                        withNSString:(NSString *)salt
                             withInt:(int)iteration
                         withBoolean:(BOOL)base64 {
  return [RAREFunctionHelper aesDecryptWithNSString:val withNSString:password withNSString:salt withInt:iteration withBoolean:base64];
}

+ (NSString *)aesEncryptWithNSString:(NSString *)val
                        withNSString:(NSString *)password
                        withNSString:(NSString *)salt
                             withInt:(int)iteration
                         withBoolean:(BOOL)base64 {
  return [RAREFunctionHelper aesEncryptWithNSString:val withNSString:password withNSString:salt withInt:iteration withBoolean:base64];
}

+ (NSString *)applicationURL {
  return [((JavaNetURL *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getApplicationURL])) description];
}

+ (NSString *)applicationURLWithRAREiWidget:(id<RAREiWidget>)context {
  return [((JavaNetURL *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getApplicationURL])) description];
}

+ (id<JavaUtilList>)asListWithId:(id)o {
  if ([o conformsToProtocol: @protocol(JavaUtilList)]) {
    return (id<JavaUtilList>) check_protocol_cast(o, @protocol(JavaUtilList));
  }
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:o]) {
    return [JavaUtilArrays asListWithNSObjectArray:(IOSObjectArray *) check_class_cast(o, [IOSObjectArray class])];
  }
  return [JavaUtilCollections nCopiesWithInt:1 withId:o];
}

+ (NSString *)base64WithNSString:(NSString *)val {
  if (val == nil) {
    return @"";
  }
  return [RAREUTBase64 encodeWithByteArray:[((RAREUTISO88591Helper *) nil_chk([RAREUTISO88591Helper getInstance])) getBytesWithNSString:val]];
}

+ (NSString *)base64NOLFWithNSString:(NSString *)val {
  if (val == nil) {
    return @"";
  }
  return [RAREUTBase64 encodeBytesWithByteArray:[((RAREUTISO88591Helper *) nil_chk([RAREUTISO88591Helper getInstance])) getBytesWithNSString:val] withInt:RAREUTBase64_DONT_BREAK_LINES];
}

+ (BOOL)booleanValueWithId:(id)o {
  if (o == nil) {
    return NO;
  }
  if ([o isKindOfClass:[JavaLangBoolean class]]) {
    return [((JavaLangBoolean *) check_class_cast(o, [JavaLangBoolean class])) booleanValue];
  }
  if ([o isKindOfClass:[NSNumber class]]) {
    return [((NSNumber *) check_class_cast(o, [NSNumber class])) floatValue] != 0;
  }
  return [RAREUTSNumber booleanValueWithNSString:[nil_chk(o) description]];
}

+ (BOOL)cacheDataWithNSString:(NSString *)name
        withJavaIoInputStream:(JavaIoInputStream *)inArg {
  @try {
    JavaIoFile *f = [RAREFunctions createCacheFileWithNSString:name];
    JavaIoFileOutputStream *o = [[JavaIoFileOutputStream alloc] initWithJavaIoFile:f];
    @try {
      [RAREUTStreams streamToStreamWithJavaIoInputStream:inArg withJavaIoOutputStream:o withByteArray:nil];
    }
    @finally {
      [o close];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    return NO;
  }
}

+ (BOOL)cacheDataWithNSString:(NSString *)name
                 withNSString:(NSString *)data {
  @try {
    JavaIoFile *f = [RAREFunctions createCacheFileWithNSString:name];
    JavaIoOutputStreamWriter *o = [[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:[[JavaIoFileOutputStream alloc] initWithJavaIoFile:f] withNSString:@"utf-8"];
    @try {
      [o writeWithNSString:data];
    }
    @finally {
      [o close];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    return NO;
  }
}

+ (NSString *)charToStringWithChar:(unichar)c {
  return [NSString valueOfChar:c];
}

+ (NSString *)chopWithNSString:(NSString *)val
                       withInt:(int)size {
  if (val == nil) {
    return @"";
  }
  if (size == 0) {
    return val;
  }
  BOOL left = NO;
  if (size < 0) {
    left = YES;
    size *= -1;
  }
  int len = [((NSString *) nil_chk(val)) sequenceLength];
  if (size >= len) {
    return @"";
  }
  val = left ? [val substring:size] : [val substring:0 endIndex:len - size];
  return val;
}

+ (NSString *)codeBase {
  return [RAREFunctions codeBaseWithRAREiWidget:[RAREPlatform getContextRootViewer]];
}

+ (NSString *)codeBaseWithRAREiWidget:(id<RAREiWidget>)context {
  id u = [((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getCodeBase];
  return (u == nil) ? nil : [u description];
}

+ (NSString *)colorToHexStringWithRAREUIColor:(RAREUIColor *)c {
  return [RAREConversions colorToHEXStringWithRAREUIColor:c];
}

+ (NSString *)colorToRGBStringWithRAREUIColor:(RAREUIColor *)c {
  return [RAREConversions colorToRGBStringWithRAREUIColor:c];
}

+ (NSString *)concatWithId:(id)a
                    withId:(id)b {
  return [NSString stringWithFormat:@"%@%@", [nil_chk(a) description], [nil_chk(b) description]];
}

+ (NSString *)convertDateWithRAREiWidget:(id<RAREiWidget>)context
                                  withId:(id)date {
  return [RAREFunctions convertDateWithRAREiWidget:context withId:date withBoolean:YES];
}

+ (NSString *)convertDateWithRAREiWidget:(id<RAREiWidget>)context
                                  withId:(id)date
                             withBoolean:(BOOL)display {
  if (date == nil) {
    return @"";
  }
  JavaUtilDate *d;
  if ([date isKindOfClass:[JavaUtilDate class]]) {
    d = (JavaUtilDate *) check_class_cast(date, [JavaUtilDate class]);
  }
  else if ([date isKindOfClass:[JavaUtilCalendar class]]) {
    d = [((JavaUtilCalendar *) check_class_cast(date, [JavaUtilCalendar class])) getTime];
  }
  else {
    RAREDateConverter *cvt = [[RAREDateConverter alloc] init];
    d = (JavaUtilDate *) check_class_cast([cvt fromStringWithNSString:[nil_chk(date) description] withRAREConverterContext:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateContext]], [JavaUtilDate class]);
  }
  JavaTextDateFormat *df = display ? [((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateContext])) getDisplayFormat] : [((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateContext])) getItemFormat];
  return [df formatWithJavaUtilDate:d];
}

+ (NSString *)convertDateWithRAREiWidget:(id<RAREiWidget>)context
                                  withId:(id)date
                            withNSString:(NSString *)outputFormat {
  if (date == nil) {
    return @"";
  }
  JavaUtilDate *d;
  if ([date isKindOfClass:[JavaUtilDate class]]) {
    d = (JavaUtilDate *) check_class_cast(date, [JavaUtilDate class]);
  }
  else if ([date isKindOfClass:[JavaUtilCalendar class]]) {
    d = [((JavaUtilCalendar *) check_class_cast(date, [JavaUtilCalendar class])) getTime];
  }
  else {
    NSString *s = (NSString *) check_class_cast(date, [NSString class]);
    if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
      return nil;
    }
    RAREDateConverter *cvt = [[RAREDateConverter alloc] init];
    d = (JavaUtilDate *) check_class_cast([cvt fromStringWithNSString:s withRAREConverterContext:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateContext]], [JavaUtilDate class]);
  }
  RAREUTSimpleDateFormatEx *df = [[RAREUTSimpleDateFormatEx alloc] initWithNSString:outputFormat];
  return [df formatWithJavaUtilDate:d];
}

+ (NSString *)convertDateWithRAREiWidget:(id<RAREiWidget>)context
                                  withId:(id)date
                            withNSString:(NSString *)inputFormat
                            withNSString:(NSString *)outputFormat {
  if (date == nil) {
    return @"";
  }
  JavaUtilDate *d;
  if ([date isKindOfClass:[JavaUtilDate class]]) {
    d = (JavaUtilDate *) check_class_cast(date, [JavaUtilDate class]);
  }
  else if ([date isKindOfClass:[JavaUtilCalendar class]]) {
    d = [((JavaUtilCalendar *) check_class_cast(date, [JavaUtilCalendar class])) getTime];
  }
  else {
    NSString *s = (NSString *) check_class_cast(date, [NSString class]);
    if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
      return nil;
    }
    RAREDateConverter *cvt = [[RAREDateConverter alloc] init];
    d = (JavaUtilDate *) check_class_cast([cvt fromStringWithNSString:s withRAREConverterContext:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateContext]], [JavaUtilDate class]);
  }
  RAREUTSimpleDateFormatEx *df = [[RAREUTSimpleDateFormatEx alloc] initWithNSString:outputFormat];
  return [df formatWithJavaUtilDate:d];
}

+ (NSString *)convertDateTimeWithRAREiWidget:(id<RAREiWidget>)context
                                      withId:(id)date {
  return [RAREFunctions convertDateTimeWithRAREiWidget:context withId:date withBoolean:YES];
}

+ (NSString *)convertDateTimeWithRAREiWidget:(id<RAREiWidget>)context
                                      withId:(id)date
                                 withBoolean:(BOOL)display {
  if (date == nil) {
    return @"";
  }
  JavaUtilDate *d;
  if ([date isKindOfClass:[JavaUtilDate class]]) {
    d = (JavaUtilDate *) check_class_cast(date, [JavaUtilDate class]);
  }
  else if ([date isKindOfClass:[JavaUtilCalendar class]]) {
    d = [((JavaUtilCalendar *) check_class_cast(date, [JavaUtilCalendar class])) getTime];
  }
  else {
    NSString *s = (NSString *) check_class_cast(date, [NSString class]);
    if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
      return nil;
    }
    RAREDateTimeConverter *cvt = [[RAREDateTimeConverter alloc] init];
    d = (JavaUtilDate *) check_class_cast([cvt fromStringWithNSString:s withRAREConverterContext:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateTimeContext]], [JavaUtilDate class]);
  }
  JavaTextDateFormat *df = display ? [((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateTimeContext])) getDisplayFormat] : [((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateTimeContext])) getItemFormat];
  return [df formatWithJavaUtilDate:d];
}

+ (id<RAREiBackgroundPainter>)createBackgroundPainterWithRAREUIColor:(RAREUIColor *)bg {
  if (([bg isKindOfClass:[RAREUIColorShade class]]) && [((RAREUIColorShade *) check_class_cast(bg, [RAREUIColorShade class])) getBackgroundPainter] != nil) {
    return [((RAREUIColorShade *) check_class_cast(bg, [RAREUIColorShade class])) getBackgroundPainter];
  }
  return [RAREUIColorHelper getBackgroundPainterWithRAREUIColor:bg];
}

+ (id<RAREiPlatformBorder>)createBorderWithNSString:(NSString *)borderString {
  return [RAREUIBorderHelper createBorderWithNSString:borderString];
}

+ (id<RAREiPlatformIcon>)createBorderIconWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)border
                                           withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  return [[RAREUIBorderIcon alloc] initWithRAREiPlatformBorder:border withRAREiPlatformIcon:icon];
}

+ (JavaIoFile *)createCacheFileWithNSString:(NSString *)name {
  return [RAREPlatform createCacheFileWithNSString:name];
}

+ (RAREUTObjectCache *)createCacheMapWithInt:(int)len
                                     withInt:(int)maxSize {
  RAREUTObjectCache *oc = [[RAREUTObjectCache alloc] initWithInt:len];
  [oc setBufferSizeWithInt:maxSize];
  return oc;
}

+ (JavaUtilCalendar *)createCalendarWithNSString:(NSString *)spec {
  return (spec == nil) ? [JavaUtilCalendar getInstance] : [RAREUTHelper createCalendarWithNSString:spec];
}

+ (id<RAREiPlatformIcon>)createColorIconWithRAREUIColor:(RAREUIColor *)color
                                                withInt:(int)width
                                                withInt:(int)height
                                withRAREiPlatformBorder:(id<RAREiPlatformBorder>)border {
  return [RAREFunctionHelper createColorIconWithRAREUIColor:color withInt:width withInt:height withRAREiPlatformBorder:border];
}

+ (RAREUICompoundBorder *)createCompoundBorderWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)firstBorder
                                              withRAREiPlatformBorder:(id<RAREiPlatformBorder>)secondBorder {
  return [[RAREUICompoundBorder alloc] initWithRAREiPlatformBorder:firstBorder withRAREiPlatformBorder:secondBorder];
}

+ (RAREUICompoundIcon *)createCompoundIconWithRAREiPlatformIconArray:(IOSObjectArray *)icons {
  return [RAREaUICompoundIcon createWithRAREiPlatformIconArray:icons];
}

+ (RAREUICompoundPainter *)createCompoundPainterWithRAREiPlatformPainter:(id<RAREiPlatformPainter>)firstPainter
                                                withRAREiPlatformPainter:(id<RAREiPlatformPainter>)secondPainter {
  return [[RAREUICompoundPainter alloc] initWithRAREiPlatformPainter:firstPainter withRAREiPlatformPainter:secondPainter];
}

+ (id<JavaUtilMap>)createConcurrentHashMapWithInt:(int)len {
  return (len < 1) ? [[JavaUtilConcurrentConcurrentHashMap alloc] init] : [[JavaUtilConcurrentConcurrentHashMap alloc] init];
}

+ (RAREUTContainsFilter *)createContainsFilterWithNSString:(NSString *)value
                                               withBoolean:(BOOL)startsWith {
  return [[RAREUTContainsFilter alloc] initWithNSString:value withBoolean:YES withBoolean:startsWith];
}

+ (JavaUtilDate *)createDateWithNSString:(NSString *)spec {
  return [RAREUTHelper createDateWithNSString:spec];
}

+ (id<RAREiPlatformIcon>)createEmptyIconWithInt:(int)width
                                        withInt:(int)height
                                withRAREUIColor:(RAREUIColor *)borderColor {
  return [RAREFunctionHelper createEmptyIconWithInt:width withInt:height withRAREUIColor:borderColor];
}

+ (RAREUTEqualityFilter *)createEqualityFilterWithNSString:(NSString *)value
                                               withBoolean:(BOOL)ignorecase {
  return [[RAREUTEqualityFilter alloc] initWithNSString:value withBoolean:ignorecase];
}

+ (RAREFunctionCallbackChainer *)createFunctionCallbackChainner {
  return [[RAREFunctionCallbackChainer alloc] init];
}

+ (RAREFunctionCallbackWaiter *)createFunctionCallbackWaiter {
  return [[RAREFunctionCallbackWaiter alloc] init];
}

+ (RAREGrouper *)createGrouper {
  return [[RAREGrouper alloc] init];
}

+ (id<JavaUtilMap>)createHashMapWithInt:(int)len {
  return (len < 1) ? [[JavaUtilLinkedHashMap alloc] init] : [[JavaUtilLinkedHashMap alloc] initWithInt:len];
}

+ (id<JavaUtilMap>)createIdentityHashMapWithInt:(int)len {
  return (len < 1) ? [[JavaUtilIdentityHashMap alloc] init] : [[JavaUtilIdentityHashMap alloc] initWithInt:len];
}

+ (id<JavaUtilList>)createIdentityListWithInt:(int)len {
  return (len < 1) ? [[RAREUTIdentityArrayList alloc] init] : [[RAREUTIdentityArrayList alloc] initWithInt:len];
}

+ (IOSIntArray *)createIntArrayWithInt:(int)size {
  return [IOSIntArray arrayWithLength:size];
}

+ (RAREUTIntList *)createIntArrayListWithInt:(int)size {
  return [[RAREUTIntList alloc] initWithInt:(size < 1) ? 10 : size];
}

+ (RAREUTJSONArray *)createJSONArrayWithId:(id)o {
  if ([o isKindOfClass:[NSString class]]) {
    return [[RAREUTJSONArray alloc] initWithNSString:(NSString *) check_class_cast(o, [NSString class])];
  }
  if ([o conformsToProtocol: @protocol(JavaUtilCollection)]) {
    return [[RAREUTJSONArray alloc] initWithJavaUtilCollection:(id<JavaUtilCollection>) check_protocol_cast(o, @protocol(JavaUtilCollection))];
  }
  if (o != nil) {
    return [[RAREUTJSONArray alloc] initWithNSString:[o description]];
  }
  return [[RAREUTJSONArray alloc] init];
}

+ (RAREUTJSONObject *)createJSONObjectWithId:(id)o {
  if ([o isKindOfClass:[NSString class]]) {
    return [[RAREUTJSONObject alloc] initWithNSString:(NSString *) check_class_cast(o, [NSString class])];
  }
  if ([o conformsToProtocol: @protocol(JavaUtilMap)]) {
    return [[RAREUTJSONObject alloc] initWithJavaUtilMap:(id<JavaUtilMap>) check_protocol_cast(o, @protocol(JavaUtilMap))];
  }
  if (o != nil) {
    return [[RAREUTJSONObject alloc] initWithNSString:[o description]];
  }
  return [[RAREUTJSONObject alloc] init];
}

+ (id<JavaUtilList>)createListWithId:(id)obj {
  if ([obj conformsToProtocol: @protocol(JavaUtilList)]) {
    return [[RAREUTFilterableList alloc] initWithJavaUtilList:(id<JavaUtilList>) check_protocol_cast(obj, @protocol(JavaUtilList))];
  }
  if ((obj == nil) || ([obj isKindOfClass:[NSNumber class]])) {
    int len = (obj == nil) ? -1 : [((NSNumber *) check_class_cast(obj, [NSNumber class])) intValue];
    return (len == -1) ? [[RAREUTFilterableList alloc] init] : [[RAREUTFilterableList alloc] initWithInt:len];
  }
  id<JavaUtilList> l = [[RAREUTFilterableList alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(obj)) count]];
  return l;
}

+ (IOSObjectArray *)createObjectArrayWithInt:(int)size {
  return [IOSObjectArray arrayWithLength:size type:[IOSClass classWithClass:[NSObject class]]];
}

+ (RAREUTObjectHolder *)createObjectHolderWithId:(id)key
                                          withId:(id)value {
  return [[RAREUTObjectHolder alloc] initWithId:key withId:value];
}

+ (RAREUTRegularExpressionFilter *)createRegExFilterWithNSString:(NSString *)value
                                                     withBoolean:(BOOL)parse {
  if (parse) {
    return [RAREUTRegularExpressionFilter createFilterWithNSString:value];
  }
  return [[RAREUTRegularExpressionFilter alloc] initWithNSString:value];
}

+ (id)createScriptableVarWithRAREiWidget:(id<RAREiWidget>)context
                                  withId:(id)javaobj {
  if (context == nil) {
    context = [RAREPlatform getContextRootViewer];
  }
  return [((id<RAREiScriptHandler>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getScriptHandler])) createVariableValueWithRAREWidgetContext:[context getScriptingContext] withId:javaobj];
}

+ (id<JavaUtilMap>)createSortedMap {
  return [[JavaUtilTreeMap alloc] init];
}

+ (IOSObjectArray *)createStringArrayWithInt:(int)size {
  return [IOSObjectArray arrayWithLength:size type:[IOSClass classWithClass:[NSString class]]];
}

+ (RAREUITextIcon *)createTextIconWithNSString:(NSString *)text
                               withRAREUIColor:(RAREUIColor *)fg
                                withRAREUIFont:(RAREUIFont *)font
                       withRAREiPlatformBorder:(id<RAREiPlatformBorder>)border {
  return [[RAREUITextIcon alloc] initWithJavaLangCharSequence:text withRAREUIColor:fg withRAREUIFont:font withRAREiPlatformBorder:border];
}

+ (RAREUIImage *)createTextImageWithNSString:(NSString *)text
                              withRAREUIFont:(RAREUIFont *)font {
  return [RAREFunctions createTextImageWithNSString:text withRAREUIFont:font withRAREUIColor:nil withRAREUIColor:nil withRAREiPlatformBorder:nil withBoolean:NO];
}

+ (RAREUIImage *)createTextImageWithNSString:(NSString *)text
                              withRAREUIFont:(RAREUIFont *)font
                             withRAREUIColor:(RAREUIColor *)fg
                             withRAREUIColor:(RAREUIColor *)bg
                     withRAREiPlatformBorder:(id<RAREiPlatformBorder>)b
                                 withBoolean:(BOOL)square {
  return [RAREFunctionHelper createTextImageWithNSString:text withRAREUIFont:font withRAREUIColor:fg withRAREUIColor:bg withRAREiPlatformBorder:b withBoolean:square];
}

+ (RAREUITextIcon *)createTextPainterWithNSString:(NSString *)text {
  return [[RAREUITextIcon alloc] initWithJavaLangCharSequence:text];
}

+ (id<RAREiAnimator>)createValueAnimatorWithDouble:(double)start
                                        withDouble:(double)end
                                        withDouble:(double)inc
                                       withBoolean:(BOOL)accelerate
                                       withBoolean:(BOOL)decelerate
                    withRAREiAnimatorValueListener:(id<RAREiAnimatorValueListener>)l {
  return [RAREFunctionHelper createValueAnimatorWithDouble:start withDouble:end withDouble:inc withBoolean:accelerate withBoolean:decelerate withRAREiAnimatorValueListener:l];
}

+ (NSString *)currentDateWithNSString:(NSString *)format {
  return [RAREFunctions currentDateWithRAREiWidget:nil withNSString:format];
}

+ (NSString *)currentDateWithRAREiWidget:(id<RAREiWidget>)context
                            withNSString:(NSString *)format {
  if (context == nil) {
    context = [RAREPlatform getContextRootViewer];
  }
  JavaUtilDate *date = [[JavaUtilDate alloc] init];
  JavaTextDateFormat *df = (format == nil) ? [((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateContext])) getDisplayFormat] : [[RAREUTSimpleDateFormatEx alloc] initWithNSString:format];
  return [df formatWithJavaUtilDate:date];
}

+ (long long int)currentTime {
  return [JavaLangSystem currentTimeMillis];
}

+ (NSString *)currentTimeWithNSString:(NSString *)format {
  return [RAREFunctions currentTimeWithRAREiWidget:nil withNSString:format];
}

+ (NSString *)currentTimeWithRAREiWidget:(id<RAREiWidget>)context
                            withNSString:(NSString *)format {
  if (context == nil) {
    context = [RAREPlatform getContextRootViewer];
  }
  JavaUtilDate *date = [[JavaUtilDate alloc] init];
  JavaTextDateFormat *df = (format == nil) ? [((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultTimeContext])) getDisplayFormat] : [[RAREUTSimpleDateFormatEx alloc] initWithNSString:format];
  return [df formatWithJavaUtilDate:date];
}

+ (NSString *)dateWithNSString:(NSString *)spec {
  return [RAREFunctions dateWithRAREiWidget:[RAREPlatform getContextRootViewer] withNSString:spec];
}

+ (NSString *)dateWithRAREiWidget:(id<RAREiWidget>)context
                     withNSString:(NSString *)spec {
  JavaUtilDate *date = [RAREUTHelper createDateWithNSString:spec];
  return [((JavaTextDateFormat *) nil_chk([((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateContext])) getDisplayFormat])) formatWithJavaUtilDate:date];
}

+ (NSString *)dateWithNSString:(NSString *)spec
                  withNSString:(NSString *)format {
  return [RAREFunctions dateWithRAREiWidget:[RAREPlatform getContextRootViewer] withNSString:spec];
}

+ (NSString *)dateTimeWithNSString:(NSString *)spec {
  return [RAREFunctions dateTimeWithRAREiWidget:[RAREPlatform getContextRootViewer] withNSString:spec];
}

+ (NSString *)dateTimeWithRAREiWidget:(id<RAREiWidget>)context
                         withNSString:(NSString *)spec {
  JavaUtilDate *date = [RAREUTHelper createDateWithNSString:spec];
  JavaTextDateFormat *df = [((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateTimeContext])) getDisplayFormat];
  return [((JavaTextDateFormat *) nil_chk(df)) formatWithJavaUtilDate:date];
}

+ (NSString *)dateTimeWithNSString:(NSString *)spec
                      withNSString:(NSString *)format {
  return [RAREFunctions dateTimeWithRAREiWidget:[RAREPlatform getContextRootViewer] withNSString:spec withNSString:format];
}

+ (NSString *)dateTimeWithRAREiWidget:(id<RAREiWidget>)context
                         withNSString:(NSString *)spec
                         withNSString:(NSString *)format {
  JavaUtilDate *date = [RAREUTHelper createDateWithNSString:spec];
  JavaTextDateFormat *df = (format == nil) ? [((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateContext])) getDisplayFormat] : [[RAREUTSimpleDateFormatEx alloc] initWithNSString:format];
  return [df formatWithJavaUtilDate:date];
}

+ (NSString *)decodeWithNSString:(NSString *)str {
  return [RAREUTURLEncoder decodeWithNSString:str];
}

+ (NSString *)decodeBase64WithNSString:(NSString *)val {
  if (val == nil) {
    return @"";
  }
  IOSByteArray *b = [RAREUTBase64 decodeWithByteArray:[((RAREUTISO88591Helper *) nil_chk([RAREUTISO88591Helper getInstance])) getBytesWithNSString:val]];
  return [((RAREUTISO88591Helper *) nil_chk([RAREUTISO88591Helper getInstance])) getStringWithByteArray:b];
}

+ (void)deleteCachedDataWithNSString:(NSString *)name {
  @try {
    JavaIoFile *f = [RAREFunctions createCacheFileWithNSString:name];
    if ((f != nil) && [f exists]) {
      [f delete__];
    }
  }
  @catch (JavaLangException *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
  }
}

+ (void)deleteFileWithJavaIoFile:(JavaIoFile *)file {
  @try {
    [((JavaIoFile *) nil_chk(file)) delete__];
  }
  @catch (JavaLangException *ignore) {
  }
}

+ (void)disableDebugLogging {
}

+ (NSString *)documentBase {
  return [RAREFunctions documentBaseWithRAREiWidget:[RAREPlatform getContextRootViewer]];
}

+ (NSString *)documentBaseWithRAREiWidget:(id<RAREiWidget>)context {
  JavaNetURL *u = [((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDocumentBase];
  return (u == nil) ? nil : [RAREJavaURLConnection toExternalFormWithJavaNetURL:u];
}

+ (NSString *)documentServerBase {
  JavaNetURL *u = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDocumentBase];
  return (u == nil) ? nil : [RAREJavaURLConnection baseToExternalFormWithJavaNetURL:u];
}

+ (NSString *)encodeWithNSString:(NSString *)str {
  return [RAREUTURLEncoder encodeWithNSString:str];
}

+ (NSString *)encodeFullWithNSString:(NSString *)str {
  return [RAREUTURLEncoder encodeExWithNSString:str];
}

+ (void)eprintlnWithId:(id)o {
  [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithId:o];
}

+ (NSString *)escapeWithNSString:(NSString *)val {
  return [RAREUTCharScanner escapeWithNSString:val];
}

+ (NSString *)escapeHTMLWithNSString:(NSString *)str
                         withBoolean:(BOOL)whitespace
                         withBoolean:(BOOL)addHTMLTag {
  if (str == nil) {
    return @"";
  }
  RAREUTCharArray *ca = [((JavaLangThreadLocal *) nil_chk(RAREFunctions_perThreadCharArray_)) get];
  ((RAREUTCharArray *) nil_chk(ca))->_length_ = 0;
  if (addHTMLTag) {
    (void) [ca appendWithNSString:@"<html>"];
  }
  IOSCharArray *a = [((NSString *) nil_chk(str)) toCharArray];
  (void) [RAREUTXMLUtils escapeWithCharArray:a withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(a)) count] withBoolean:whitespace withRAREUTCharArray:ca];
  if (addHTMLTag) {
    (void) [ca appendWithNSString:@"</html>"];
  }
  NSString *s = [ca description];
  if (ca->_length_ > 512) {
    ca->_length_ = 0;
    ca->A_ = [IOSCharArray arrayWithLength:512];
  }
  return s;
}

- (NSString *)executeWithRAREiWidget:(id<RAREiWidget>)context
                        withNSString:(NSString *)function {
  IOSObjectArray *parameters = zero_string_;
  NSString *name = nil;
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk(RAREFunctions_perThreadScanner_)) get];
  [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:function];
  int n = [sc indexOfWithChar:'('];
  if ([sc getCurrentChar] == '$') {
    name = (n == -1) ? [((NSString *) nil_chk(function)) substring:1] : [((NSString *) nil_chk(function)) substring:1 endIndex:n];
  }
  else {
    name = (n == -1) ? function : [((NSString *) nil_chk(function)) substring:0 endIndex:n];
  }
  if (n > 0) {
    [sc consumeWithInt:n + 1];
    [sc chopWithInt:1];
    JavaUtilArrayList *list = [((JavaLangThreadLocal *) nil_chk(RAREFunctions_perThreadStringList_)) get];
    [((JavaUtilArrayList *) nil_chk(list)) clear];
    (void) [sc getTokensWithChar:',' withBoolean:YES withBoolean:YES withBoolean:YES withJavaUtilList:list];
    int len = [list size];
    if (len > 0) {
      parameters = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[NSString class]]];
      for (int i = 0; i < len; i++) {
        (void) IOSObjectArray_Set(parameters, i, [self resolveParameterWithRAREiWidget:context withNSString:[list getWithInt:i] withRAREUTCharScanner:sc]);
      }
    }
  }
  return [self executeFunctionWithRAREiWidget:context withNSString:name withNSStringArray:parameters];
}

- (NSString *)resolveParameterWithRAREiWidget:(id<RAREiWidget>)context
                                 withNSString:(NSString *)s
                        withRAREUTCharScanner:(RAREUTCharScanner *)sc {
  if ([((NSString *) nil_chk(s)) indexOf:'+'] != -1) {
    [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:s];
    id<JavaUtilList> list = [sc getTokensWithChar:'+' withBoolean:YES withBoolean:NO withBoolean:YES];
    JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
    for (NSString * __strong tok in nil_chk(list)) {
      (void) [sb appendWithNSString:[self resolveParameterWithRAREiWidget:context withNSString:tok withRAREUTCharScanner:sc]];
    }
    return [sb description];
  }
  int n = [s sequenceLength];
  unichar c = (n == 0) ? 0 : [s charAtWithInt:0];
  if ((c == '\'') || (c == '"')) {
    s = [RAREUTCharScanner cleanQuotedWithNSString:s];
  }
  else if (![JavaLangCharacter isDigitWithChar:c] && (n > 0)) {
    id o = [((id<RAREiWidget>) nil_chk(context)) getAttributeWithNSString:s];
    s = (o == nil) ? @"" : [o description];
  }
  return s;
}

+ (id<RAREiEventHandler>)getEventHandlerWithNSString:(NSString *)className_ {
  return [RAREEventHandlerInterface getHandlerWithNSString:className_];
}

- (NSString *)executeFunctionWithRAREiWidget:(id<RAREiWidget>)context
                                withNSString:(NSString *)name
                           withNSStringArray:(IOSObjectArray *)parameters {
  name = [((NSString *) nil_chk(name)) lowercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]];
  JavaLangInteger *in = [((JavaUtilHashMap *) nil_chk(RAREFunctions_functionMap_)) getWithId:name];
  if (in == nil) {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"UnsupportedOperationException: $%@", name]];
  }
  NSString *s;
  IOSObjectArray *a;
  int start = 1;
  int end = 1;
  int plen = (parameters == nil) ? 0 : (int) [parameters count];
  {
    int chars;
    NSString *color;
    switch ([((JavaLangInteger *) nil_chk(in)) intValue]) {
      case RAREFunctions_FUNC_ESCAPE:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [RAREUTURLEncoder encodeWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_UPPER_CASE:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [RAREFunctions upperCaseWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_LOWER_CASE:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [RAREFunctions lowerCaseWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_TRIM:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [RAREFunctions trimWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_LENGTH:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      if (plen == 1) {
        s = IOSObjectArray_Get(nil_chk(parameters), 0);
        if (s == nil) {
          return @"0";
        }
        return [RAREUTStringCache valueOfWithInt:[((NSString *) nil_chk(s)) sequenceLength]];
      }
      return [RAREUTStringCache valueOfWithInt:[RAREFunctions lengthWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0) withNSString:IOSObjectArray_Get(parameters, 1)]];
      case RAREFunctions_FUNC_CHOP:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      if (plen > 1) {
        start = [RAREUTSNumber intValueWithNSString:IOSObjectArray_Get(nil_chk(parameters), 1)];
      }
      return [RAREFunctions chopWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0) withInt:start];
      case RAREFunctions_FUNC_RANDOM:
      if (plen > 0) {
        return [RAREUTStringCache valueOfWithLong:[RAREUTSNumber longValueWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0)]];
      }
      return [RAREUTStringCache valueOfWithLong:[RAREFunctions randomLong]];
      case RAREFunctions_FUNC_SUBSTRING:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:2];
      start = [RAREUTSNumber intValueWithNSString:IOSObjectArray_Get(nil_chk(parameters), 1)];
      end = -1;
      if (plen > 1) {
        end = [RAREUTSNumber intValueWithNSString:IOSObjectArray_Get(parameters, 2)];
      }
      return [RAREFunctions substringWithNSString:IOSObjectArray_Get(parameters, 0) withInt:start withInt:end];
      case RAREFunctions_FUNC_BASE64:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [RAREFunctions base64WithNSString:IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_HMAC_MD5:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:2];
      return [RAREFunctions hmacMD5WithNSString:IOSObjectArray_Get(nil_chk(parameters), 0) withNSString:IOSObjectArray_Get(parameters, 1) withBoolean:YES];
      case RAREFunctions_FUNC_HMAC_SHA:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:2];
      return [RAREFunctions hmacSHAWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0) withNSString:IOSObjectArray_Get(parameters, 1) withBoolean:YES];
      case RAREFunctions_FUNC_PIECE:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:2];
      if (plen > 2) {
        start = [RAREUTSNumber intValueWithNSString:IOSObjectArray_Get(nil_chk(parameters), 2)];
      }
      if (plen > 3) {
        end = [RAREUTSNumber intValueWithNSString:IOSObjectArray_Get(nil_chk(parameters), 3)];
      }
      return [RAREFunctions pieceWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0) withNSString:IOSObjectArray_Get(parameters, 1) withInt:start withInt:end];
      case RAREFunctions_FUNC_BOLD:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [NSString stringWithFormat:@"<b>%@</b>", IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_ITALIC:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [NSString stringWithFormat:@"<i>%@</i>", IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_UNDERLINED:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [NSString stringWithFormat:@"<u>%@</u>", IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_HTML:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      chars = (plen == 1) ? 0 : [RAREUTSNumber intValueWithNSString:IOSObjectArray_Get(nil_chk(parameters), 1)];
      if (chars < 1) {
        return [NSString stringWithFormat:@"<html>%@</html>", IOSObjectArray_Get(nil_chk(parameters), 0)];
      }
      else {
        return [RAREFunctions htmlWordWrapWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0) withInt:chars withBoolean:YES];
      }
      case RAREFunctions_FUNC_COLOR:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      color = [RAREFunctions colorToHexStringWithRAREUIColor:[RAREColorUtils getColorWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0)]];
      if (plen > 1) {
        return [NSString stringWithFormat:@"<font color=\"%@\">%@</font>", color, IOSObjectArray_Get(parameters, 1)];
      }
      return color;
      case RAREFunctions_FUNC_CONCAT:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:2];
      return [NSString stringWithFormat:@"%@%@", [((NSString *) IOSObjectArray_Get(nil_chk(parameters), 0)) description], [((NSString *) IOSObjectArray_Get(parameters, 1)) description]];
      case RAREFunctions_FUNC_ADD:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:2];
      return [((NSNumber *) nil_chk([RAREFunctions addWithId:IOSObjectArray_Get(nil_chk(parameters), 0) withId:IOSObjectArray_Get(parameters, 1)])) description];
      case RAREFunctions_FUNC_START_TAG:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [NSString stringWithFormat:@"<%@>", IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_END_TAG:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [NSString stringWithFormat:@"</%@>", IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_DATE:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [RAREFunctions dateWithRAREiWidget:context withNSString:IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_CURRENT_TIME:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [RAREFunctions currentTimeWithRAREiWidget:context withNSString:IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_DATE_TIME:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      s = (plen < 2) ? nil : IOSObjectArray_Get(nil_chk(parameters), 1);
      return [RAREFunctions dateTimeWithRAREiWidget:context withNSString:IOSObjectArray_Get(nil_chk(parameters), 0) withNSString:s];
      case RAREFunctions_FUNC_CURRENTTIME:
      return [NSString valueOfLong:[RAREFunctions currentTime]];
      case RAREFunctions_FUNC_NANOTIME:
      return [NSString valueOfLong:[RAREFunctions nanoTime]];
      case RAREFunctions_FUNC_RESOLVE:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      return [RAREFunctions resolveWithRAREiWidget:context withNSString:IOSObjectArray_Get(nil_chk(parameters), 0)];
      case RAREFunctions_FUNC_CODEBASE:
      return [RAREFunctions codeBaseWithRAREiWidget:context];
      case RAREFunctions_FUNC_RFORMAT:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:2];
      if (plen == 2) {
        return [RAREFunctions rformatWithRAREiWidget:context withNSString:IOSObjectArray_Get(nil_chk(parameters), 0) withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(parameters, 1) } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      }
      a = [IOSObjectArray arrayWithLength:plen - 1 type:[IOSClass classWithClass:[NSString class]]];
      [JavaLangSystem arraycopyWithId:parameters withInt:1 withId:a withInt:0 withInt:plen - 1];
      return [RAREFunctions rformatWithRAREiWidget:context withNSString:IOSObjectArray_Get(nil_chk(parameters), 0) withNSObjectArray:(IOSObjectArray *) check_class_cast(a, [IOSObjectArray class])];
      case RAREFunctions_FUNC_SERVERBASE:
      return [RAREFunctions serverBaseWithRAREiWidget:context];
      case RAREFunctions_FUNC_DOCBASE:
      return [RAREFunctions documentBaseWithRAREiWidget:context];
      case RAREFunctions_FUNC_APPURL:
      return [RAREFunctions applicationURLWithRAREiWidget:context];
      case RAREFunctions_FUNC_CURRENTDATE:
      return [RAREFunctions currentDateWithRAREiWidget:context withNSString:(plen > 0) ? IOSObjectArray_Get(nil_chk(parameters), 0) : nil];
      case RAREFunctions_FUNC_PROPERTY:
      [RAREFunctions checkParmLengthWithRAREiWidget:context withInt:plen withInt:1];
      s = (plen < 2) ? @"" : IOSObjectArray_Get(nil_chk(parameters), 1);
      return [RAREFunctions propertyWithNSString:IOSObjectArray_Get(nil_chk(parameters), 0) withNSString:s];
      case RAREFunctions_FUNC_ORIENTATION:
      return [RAREFunctions getScreenOrientation];
      case RAREFunctions_FUNC_LOCATION:
      s = [RAREFunctions getLocation];
      return (s == nil) ? @"" : s;
      default:
      @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"$%@", name]];
    }
  }
}

+ (NSString *)expandWithNSString:(NSString *)pattern
               withNSStringArray:(IOSObjectArray *)args {
  return [RAREUTHelper expandStringWithNSString:pattern withNSStringArray:args];
}

+ (id<RAREUTiCancelable>)filterInBackgroundWithJavaUtilList:(id<JavaUtilList>)list
                                          withRAREUTiFilter:(id<RAREUTiFilter>)filter
                                  withRAREiFunctionCallback:(id<RAREiFunctionCallback>)cb {
  id<JavaLangRunnable> r = [[RAREFunctions_$4 alloc] initWithJavaUtilList:list withRAREUTiFilter:filter withRAREiFunctionCallback:cb];
  return [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeBackgroundTaskWithJavaLangRunnable:r];
}

+ (RARESPOTWidget *)findWidgetWithRARESPOTWidget:(RARESPOTWidget *)w
                                    withNSString:(NSString *)name
                                     withBoolean:(BOOL)useNameMap {
  int n = [((NSString *) nil_chk(name)) indexOf:'/'];
  if (n == -1) {
    return [((RARESPOTWidget *) nil_chk(w)) findWidgetWithNSString:name];
  }
  if (n > 0) {
    w = [((RARESPOTWidget *) nil_chk(w)) findWidgetWithNSString:[name substring:0 endIndex:n] withBoolean:useNameMap];
  }
  return (w == nil) ? nil : [RAREFunctions findWidgetWithRARESPOTWidget:w withNSString:[name substring:n + 1] withBoolean:useNameMap];
}

+ (float)floatValueWithNSString:(NSString *)s {
  return [RAREUTSNumber floatValueWithNSString:s];
}

+ (void)focusLaterWithRAREiWidget:(id<RAREiWidget>)widget {
  [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREFunctions_$5 alloc] initWithRAREiWidget:widget]];
}

+ (NSString *)formatWithNSString:(NSString *)pattern
               withNSObjectArray:(IOSObjectArray *)args {
  if ((args == nil) || ((int) [args count] == 0)) {
    return nil;
  }
  if ((int) [((IOSObjectArray *) nil_chk(args)) count] == 1) {
    id obj = IOSObjectArray_Get(args, 0);
    if ([obj isKindOfClass:[NSNumber class]]) {
      JavaTextDecimalFormat *df = [[JavaTextDecimalFormat alloc] initWithNSString:pattern];
      return [df formatWithId:obj];
    }
    if (([obj isKindOfClass:[JavaUtilDate class]]) || ([obj isKindOfClass:[JavaUtilCalendar class]])) {
      return [RAREFunctions convertDateWithRAREiWidget:[RAREPlatform getContextRootViewer] withId:obj withNSString:pattern];
    }
  }
  return [RAREaPlatformHelper formatWithNSString:pattern withNSObjectArray:args];
}

+ (NSString *)generateKeyWithNSString:(NSString *)password
                         withNSString:(NSString *)salt
                              withInt:(int)iteration {
  return [RAREFunctionHelper generateKeyWithNSString:password withNSString:salt withInt:iteration];
}

+ (NSString *)generateSaltWithInt:(int)bytes {
  return [RAREFunctionHelper generateSaltWithInt:bytes];
}

+ (NSString *)hmacMD5WithNSString:(NSString *)val
                     withNSString:(NSString *)key
                      withBoolean:(BOOL)base64 {
  return [RAREFunctionHelper hmacMD5WithNSString:val withNSString:key withBoolean:base64];
}

+ (NSString *)hmacSHAWithNSString:(NSString *)val
                     withNSString:(NSString *)key
                      withBoolean:(BOOL)base64 {
  return [RAREFunctionHelper hmacSHAWithNSString:val withNSString:key withBoolean:base64];
}

+ (NSString *)htmlReplaceWithNSString:(NSString *)s
             withJavaUtilRegexPattern:(JavaUtilRegexPattern *)urlPattern
                         withNSString:(NSString *)replacement
                          withBoolean:(BOOL)escape
                         withNSString:(NSString *)tag {
  RAREUTCharArray *ca = [((JavaLangThreadLocal *) nil_chk(RAREFunctions_perThreadCharArray_)) get];
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk(RAREFunctions_perThreadScanner_)) get];
  int i = 0;
  int len;
  ((RAREUTCharArray *) nil_chk(ca))->_length_ = 0;
  @try {
    if (escape) {
      (void) [RAREUTXMLUtils escapeWithNSString:s withBoolean:YES withRAREUTCharArray:ca];
      [((RAREUTCharScanner *) nil_chk(sc)) resetWithRAREUTCharArray:ca withBoolean:YES];
    }
    else {
      [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:s];
    }
    IOSCharArray *a = [((RAREUTCharScanner *) nil_chk(sc)) getContent];
    RARESegment *seg = [[RARESegment alloc] initWithCharArray:a withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(a)) count]];
    ca->_length_ = 0;
    if (tag != nil) {
      (void) [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([ca appendWithChar:'<'])) appendWithNSString:tag])) appendWithChar:'>'];
    }
    while (i != -1) {
      i = [sc indexOfWithChar:'<'];
      if (i == -1) {
        len = (int) [a count] - seg->offset_;
      }
      else {
        len = i - seg->offset_;
      }
      [sc consumeWithInt:len + 1];
      seg->count_ = len;
      if (len > 0) {
        (void) [ca appendWithNSString:[((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(urlPattern)) matcherWithJavaLangCharSequence:seg])) replaceAllWithNSString:replacement]];
      }
      if (i == -1) {
        break;
      }
      seg->offset_ = i;
      i = [sc indexOfWithChar:'>'];
      if (i == -1) {
        len = (int) [a count] - seg->offset_;
      }
      else {
        len = i - seg->offset_ + 1;
      }
      [sc consumeWithInt:len];
      (void) [ca appendWithCharArray:a withInt:seg->offset_ withInt:len];
      seg->offset_ += len;
    }
    if (tag != nil) {
      (void) [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([ca appendWithNSString:@"</"])) appendWithNSString:tag])) appendWithChar:'>'];
    }
    return [ca description];
  }
  @catch (JavaLangException *e) {
    return s;
  }
  @finally {
    [((RAREUTCharScanner *) nil_chk(sc)) clear];
  }
}

+ (NSString *)htmlWordWrapWithNSString:(NSString *)s
                               withInt:(int)width
                           withBoolean:(BOOL)html_tag {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] initWithInt:[((NSString *) nil_chk(s)) sequenceLength] + 20];
  int lastspace = -1;
  int linestart = 0;
  int i = 0;
  int brlen = (int) [((IOSCharArray *) nil_chk(RAREFunctions_BR_)) count];
  if (html_tag) {
    (void) [buf appendWithNSString:@"<html>"];
    i += 7;
  }
  (void) [buf appendWithNSString:s];
  while (i < [buf sequenceLength]) {
    if ([buf charAtWithInt:i] == ' ') {
      lastspace = i;
    }
    if ([buf charAtWithInt:i] == 0x000a) {
      [buf setCharAtWithInt:i withChar:IOSCharArray_Get(RAREFunctions_BR_, 0)];
      (void) [buf insertWithInt:i + 1 withCharArray:RAREFunctions_BR_ withInt:1 withInt:brlen - 1];
      linestart = i + brlen;
      lastspace = -1;
    }
    if (i > linestart + width - 1) {
      if (lastspace != -1) {
        [buf setCharAtWithInt:lastspace withChar:IOSCharArray_Get(RAREFunctions_BR_, 0)];
        (void) [buf insertWithInt:lastspace + 1 withCharArray:RAREFunctions_BR_ withInt:1 withInt:brlen - 1];
        linestart = lastspace + brlen;
        lastspace = -1;
      }
      else {
        [buf setCharAtWithInt:i withChar:IOSCharArray_Get(RAREFunctions_BR_, 0)];
        (void) [buf insertWithInt:i + 1 withCharArray:RAREFunctions_BR_ withInt:1 withInt:brlen - 1];
        linestart = i + brlen;
      }
    }
    i++;
  }
  if (html_tag) {
    (void) [buf appendWithNSString:@"</html>"];
  }
  return [buf description];
}

+ (int)intValueWithId:(id)o {
  if (o == nil) {
    return 0;
  }
  if ([o isKindOfClass:[NSString class]]) {
    return [RAREUTSNumber intValueWithNSString:(NSString *) check_class_cast(o, [NSString class])];
  }
  if ([o isKindOfClass:[NSNumber class]]) {
    return [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue];
  }
  return [RAREUTSNumber intValueWithNSString:[nil_chk(o) description]];
}

+ (NSString *)joinWithJavaUtilList:(id<JavaUtilList>)list
                      withNSString:(NSString *)sep {
  return [RAREUTHelper toStringWithJavaUtilList:list withNSString:sep];
}

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)array
                       withNSString:(NSString *)sep {
  return [RAREUTHelper toStringWithNSObjectArray:array withNSString:sep];
}

+ (int)lengthWithNSString:(NSString *)val
             withNSString:(NSString *)tok {
  if (val == nil) {
    return 0;
  }
  int n = 1;
  int i = 0;
  int tl = [((NSString *) nil_chk(tok)) sequenceLength];
  while ((i = [((NSString *) nil_chk(val)) indexOfString:tok fromIndex:i]) != -1) {
    i += tl;
    n++;
  }
  return n;
}

+ (NSString *)linefeedToHTMLBreakWithNSString:(NSString *)s {
  if (s == nil) {
    return s;
  }
  return [RAREFunctions tokenToHTMLBreakWithNSString:s withNSString:@"\n" withBoolean:NO withNSString:nil withNSString:nil withInt:-1];
}

+ (NSString *)linefeedToHTMLBreakWithNSString:(NSString *)s
                                  withBoolean:(BOOL)html {
  if (s == nil) {
    return s;
  }
  return [RAREFunctions tokenToHTMLBreakWithNSString:s withNSString:@"\n" withBoolean:html withNSString:nil withNSString:nil withInt:-1];
}

+ (NSString *)lowerCaseWithNSString:(NSString *)val {
  return (val == nil) ? @"" : [val lowercaseStringWithJRELocale:[JavaUtilLocale getDefault]];
}

+ (NSString *)makeHyperlinksWithNSString:(NSString *)s
                             withBoolean:(BOOL)escape
                            withNSString:(NSString *)tag {
  RAREUTCharArray *ca = [((JavaLangThreadLocal *) nil_chk(RAREFunctions_perThreadCharArray_)) get];
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk(RAREFunctions_perThreadScanner_)) get];
  int i = 0;
  int len;
  JavaUtilRegexPattern *pattern = RAREFunctions_urlPattern_;
  @try {
    [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:s];
    if (escape) {
      ((RAREUTCharArray *) nil_chk(ca))->_length_ = 0;
      (void) [RAREUTXMLUtils escapeWithCharArray:[sc getContent] withInt:0 withInt:[sc getLength] withBoolean:YES withRAREUTCharArray:ca];
      if (ca->_length_ != [sc getLength]) {
        [sc resetWithRAREUTCharArray:ca withBoolean:YES];
      }
    }
    int alen = [sc getLength];
    IOSCharArray *a = [sc getContent];
    RARESegment *seg = [[RARESegment alloc] initWithCharArray:a withInt:0 withInt:alen];
    JavaUtilRegexMatcher *matcher;
    int pos, end, start;
    ((RAREUTCharArray *) nil_chk(ca))->_length_ = 0;
    if (tag != nil) {
      (void) [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([ca appendWithChar:'<'])) appendWithNSString:tag])) appendWithChar:'>'];
    }
    while (i != -1) {
      i = [sc indexOfWithChar:'<'];
      if (i == -1) {
        len = alen - seg->offset_;
      }
      else {
        len = i - seg->offset_;
      }
      [sc consumeWithInt:len];
      seg->count_ = len;
      if (len > 0) {
        matcher = [((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:seg];
        end = 0;
        pos = seg->offset_;
        while ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
          start = [matcher start];
          len = start - end;
          (void) [ca appendWithCharArray:a withInt:pos withInt:len];
          pos += len;
          end = [matcher end];
          len = end - start;
          if ([RAREUTCharArray indexOfWithCharArray:a withInt:pos withInt:len withCharArray:RAREFunctions_wwwPrefixChars_ withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(RAREFunctions_wwwPrefixChars_)) count] withInt:0] == 0) {
            (void) [ca appendWithNSString:@"<a href=\"http://"];
            (void) [ca appendWithCharArray:a withInt:pos withInt:len];
            (void) [ca appendWithNSString:@"\">"];
            (void) [ca appendWithCharArray:a withInt:pos withInt:len];
            (void) [ca appendWithNSString:@"</a>"];
          }
          else if (([RAREUTCharArray indexOfWithCharArray:a withInt:pos withInt:len withCharArray:RAREFunctions_httpPrefixChars_ withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(RAREFunctions_httpPrefixChars_)) count] withInt:0] == 0) || ([RAREUTCharArray indexOfWithCharArray:a withInt:pos withInt:len withCharArray:RAREFunctions_httpsPrefixChars_ withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(RAREFunctions_httpsPrefixChars_)) count] withInt:0] == 0)) {
            (void) [ca appendWithNSString:@"<a href=\""];
            (void) [ca appendWithCharArray:a withInt:pos withInt:len];
            (void) [ca appendWithNSString:@"\">"];
            (void) [ca appendWithCharArray:a withInt:pos withInt:len];
            (void) [ca appendWithNSString:@"</a>"];
          }
          else {
            (void) [ca appendWithCharArray:a withInt:pos withInt:len];
          }
          pos += len;
        }
        if (pos < [seg getEndIndex]) {
          (void) [ca appendWithCharArray:a withInt:pos withInt:[seg getEndIndex] - pos];
        }
      }
      if (i == -1) {
        break;
      }
      seg->offset_ = i;
      i = [sc indexOfWithChar:'>'];
      if (i == -1) {
        len = alen - seg->offset_;
      }
      else {
        len = i - seg->offset_ + 1;
      }
      [sc consumeWithInt:len];
      (void) [ca appendWithCharArray:a withInt:seg->offset_ withInt:len];
      seg->offset_ += len;
    }
    if (tag != nil) {
      (void) [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([ca appendWithNSString:@"</"])) appendWithNSString:tag])) appendWithChar:'>'];
    }
    return [ca description];
  }
  @catch (JavaLangException *e) {
    ((RAREUTCharArray *) nil_chk(ca))->_length_ = 0;
    (void) [RAREUTXMLUtils escapeWithNSString:s withBoolean:YES withRAREUTCharArray:ca];
    return [ca description];
  }
  @finally {
    [((RAREUTCharScanner *) nil_chk(sc)) clear];
  }
}

+ (NSString *)md5WithNSString:(NSString *)val {
  return [RAREFunctions md5WithNSString:val withBoolean:YES];
}

+ (NSString *)md5WithNSString:(NSString *)val
                  withBoolean:(BOOL)base64 {
  return [RAREFunctionHelper md5WithNSString:val withBoolean:base64];
}

+ (long long int)nanoTime {
  return [JavaLangSystem nanoTime];
}

+ (JavaUtilDate *)parseDateStringWithRAREiWidget:(id<RAREiWidget>)context
                                    withNSString:(NSString *)date {
  if ((date == nil) || ([date sequenceLength] == 0)) {
    return nil;
  }
  RAREDateConverter *cvt = [[RAREDateConverter alloc] init];
  return (JavaUtilDate *) check_class_cast([cvt fromStringWithNSString:date withRAREConverterContext:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateContext]], [JavaUtilDate class]);
}

+ (JavaUtilDate *)parseDateStringWithRAREiWidget:(id<RAREiWidget>)context
                                    withNSString:(NSString *)date
                                    withNSString:(NSString *)inputFormat {
  RAREUTSimpleDateFormatEx *df = [[RAREUTSimpleDateFormatEx alloc] initWithNSString:inputFormat];
  return [df parseWithNSString:date];
}

+ (id<JavaUtilList>)parseJSONObjectWithRAREiWidget:(id<RAREiWidget>)context
                              withRAREUTJSONObject:(RAREUTJSONObject *)json
                                       withBoolean:(BOOL)tabular {
  RAREDataItemJSONParser *p = [[RAREDataItemJSONParser alloc] init];
  RAREDataItemParserHandler *ph = [[RAREDataItemParserHandler alloc] initWithRAREiWidget:context];
  [p parseWithRAREiWidget:context withRAREUTJSONObject:json withRAREiDataItemParserCallback:ph];
  return [ph getListEx];
}

+ (JavaUtilDate *)parseDateTimeStringWithRAREiWidget:(id<RAREiWidget>)context
                                        withNSString:(NSString *)date {
  if ((date == nil) || ([date sequenceLength] == 0)) {
    return nil;
  }
  RAREDateConverter *cvt = [[RAREDateConverter alloc] init];
  return (JavaUtilDate *) check_class_cast([cvt fromStringWithNSString:date withRAREConverterContext:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getDefaultDateTimeContext]], [JavaUtilDate class]);
}

+ (id<JavaUtilMap>)parseOptionsStringWithNSString:(NSString *)options {
  return [RAREUTCharScanner parseOptionStringExWithNSString:options withChar:'&' withBoolean:YES];
}

+ (id<JavaUtilMap>)parseOptionsStringWithNSString:(NSString *)options
                                         withChar:(unichar)delimiter
                                      withBoolean:(BOOL)unquote {
  return [RAREUTCharScanner parseOptionStringExWithNSString:options withChar:delimiter withBoolean:unquote];
}

+ (NSString *)pieceWithNSString:(NSString *)val
                   withNSString:(NSString *)tok {
  return [RAREFunctions pieceWithNSString:val withNSString:tok withInt:1 withInt:1];
}

+ (NSString *)pieceWithNSString:(NSString *)val
                   withNSString:(NSString *)tok
                        withInt:(int)start {
  return [RAREFunctions pieceWithNSString:val withNSString:tok withInt:start withInt:start];
}

+ (NSString *)pieceWithNSString:(NSString *)val
                   withNSString:(NSString *)tok
                        withInt:(int)start
                        withInt:(int)end {
  int i = 0;
  int n = 1;
  int oi = 0;
  int pos;
  int tl = [((NSString *) nil_chk(tok)) sequenceLength];
  if ((end < 1) || (end < start) || (tl == 0)) {
    return @"";
  }
  while ((n < start) && ((i = [((NSString *) nil_chk(val)) indexOfString:tok fromIndex:i]) != -1)) {
    i += tl;
    n++;
  }
  if ((n < start) || (i == -1)) {
    return @"";
  }
  oi = i;
  i = [((NSString *) nil_chk(val)) indexOfString:tok fromIndex:i];
  if (i == -1) {
    return [val substring:oi];
  }
  if (start == end) {
    return (oi == i) ? @"" : [val substring:oi endIndex:i];
  }
  pos = oi;
  i += tl;
  while ((n < end) && ((i = [val indexOfString:tok fromIndex:i]) != -1)) {
    n++;
    i += tl;
  }
  if (i == -1) {
    return [val substring:pos];
  }
  i -= tl;
  return (pos == i) ? @"" : [val substring:pos endIndex:i];
}

+ (void)printWithNSObjectArray:(IOSObjectArray *)o {
  int len = (o == nil) ? 0 : (int) [o count];
  for (int i = 0; i < len; i++) {
    [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printWithId:IOSObjectArray_Get(nil_chk(o), i)];
  }
}

+ (void)printlnWithNSObjectArray:(IOSObjectArray *)o {
  int len = (o == nil) ? 0 : (int) [o count];
  for (int i = 0; i < len; i++) {
    [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithId:IOSObjectArray_Get(nil_chk(o), i)];
  }
}

+ (NSString *)propertyWithNSString:(NSString *)name
                      withNSString:(NSString *)def {
  NSString *o = nil;
  @try {
    o = [JavaLangSystem getPropertyWithNSString:name withNSString:def];
  }
  @catch (JavaLangException *e) {
  }
  return (o == nil) ? def : o;
}

+ (NSString *)quoteWithNSString:(NSString *)str {
  RAREUTCharArray *ca = [((JavaLangThreadLocal *) nil_chk(RAREFunctions_perThreadCharArray_)) get];
  ((RAREUTCharArray *) nil_chk(ca))->_length_ = 0;
  return [((RAREUTCharArray *) nil_chk([RAREUTCharScanner escapeWithNSString:str withBoolean:YES withRAREUTCharArray:ca])) description];
}

+ (long long int)randomLong {
  @synchronized (RAREFunctions_functionMap_) {
    if (RAREFunctions_randomGenerator_ == nil) {
      RAREFunctions_randomGenerator_ = [[JavaUtilRandom alloc] initWithLong:[JavaLangSystem currentTimeMillis]];
    }
  }
  long long int r = 0;
  @synchronized (RAREFunctions_functionMap_) {
    r = [((JavaUtilRandom *) nil_chk(RAREFunctions_randomGenerator_)) nextLong];
    if (r < 0) {
      r *= -1;
    }
  }
  return r;
}

+ (long long int)randomLongWithLong:(long long int)max {
  return [RAREFunctions randomLong] % max;
}

+ (NSString *)readWithRAREiWidget:(id<RAREiWidget>)context
                           withId:(id)entity {
  JavaNetURL *u = nil;
  if (context == nil) {
    context = [RAREPlatform getContextRootViewer];
  }
  if ([entity isKindOfClass:[JavaNetURL class]]) {
    u = (JavaNetURL *) check_class_cast(entity, [JavaNetURL class]);
  }
  if ([entity isKindOfClass:[JavaIoFile class]]) {
    u = [RAREaPlatformHelper fileToURLWithJavaIoFile:((JavaIoFile *) check_class_cast(entity, [JavaIoFile class]))];
  }
  else if (entity != nil) {
    u = [((id<RAREiWidget>) nil_chk(context)) getURLWithNSString:[entity description]];
  }
  if (u == nil) {
    return nil;
  }
  id<RAREiURLConnection> c = [((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) openConnectionWithJavaNetURL:u];
  @try {
    return [((id<RAREiURLConnection>) nil_chk(c)) getContentAsString];
  }
  @finally {
    if (c != nil) {
      [c close];
    }
  }
}

+ (id<JavaUtilMap>)removeAllWithJavaUtilMap:(id<JavaUtilMap>)main
                            withJavaUtilMap:(id<JavaUtilMap>)remove {
  if (remove != nil) {
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([remove keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      (void) [((id<JavaUtilMap>) nil_chk(main)) removeWithId:[it next]];
    }
  }
  return main;
}

+ (NSString *)replacePieceWithNSString:(NSString *)val
                          withNSString:(NSString *)tok
                               withInt:(int)tlen
                               withInt:(int)pos
                               withInt:(int)pos2
                          withNSString:(NSString *)rval {
  int i = 0;
  int n = 0;
  JavaLangStringBuilder *strBuffer = [[JavaLangStringBuilder alloc] init];
  if (val == nil) {
    val = @"";
  }
  n = 1;
  if (tlen == 0) {
    if (pos == 1) {
      (void) [strBuffer appendWithNSString:rval];
    }
    else {
      (void) [strBuffer appendWithNSString:val];
      (void) [strBuffer appendWithNSString:rval];
    }
  }
  else {
    while (n < pos) {
      i = [((NSString *) nil_chk(val)) indexOfString:tok fromIndex:i];
      if (i == -1) {
        break;
      }
      i += tlen;
      n++;
    }
    if (n < pos) {
      (void) [strBuffer appendWithNSString:val];
      while (n < pos) {
        (void) [strBuffer appendWithJavaLangCharSequence:tok withInt:0 withInt:tlen];
        n++;
      }
    }
    else {
      if (i != 0) {
        (void) [strBuffer appendWithJavaLangCharSequence:val withInt:0 withInt:i];
      }
    }
    (void) [strBuffer appendWithNSString:rval];
    if (i > -1) {
      pos2++;
      while (n < pos2) {
        i = [((NSString *) nil_chk(val)) indexOfString:tok fromIndex:i];
        if (i == -1) {
          break;
        }
        i += tlen;
        n++;
      }
    }
    if ((n == pos2) && (i > 0)) {
      (void) [strBuffer appendWithJavaLangCharSequence:val withInt:i - tlen withInt:-1];
    }
  }
  return [strBuffer description];
}

+ (NSString *)resolveWithNSString:(NSString *)str {
  return [((id<RAREiViewer>) nil_chk([RAREPlatform getContextRootViewer])) expandStringWithNSString:str withBoolean:NO];
}

+ (NSString *)resolveWithRAREiWidget:(id<RAREiWidget>)context
                        withNSString:(NSString *)str {
  return [((id<RAREiWidget>) nil_chk(context)) expandStringWithNSString:str withBoolean:NO];
}

+ (NSString *)rformatWithRAREiWidget:(id<RAREiWidget>)context
                        withNSString:(NSString *)resource_string
                   withNSObjectArray:(IOSObjectArray *)args {
  resource_string = [((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getResourceAsStringWithNSString:resource_string];
  if ((args != nil) && !([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:args])) {
    args = [IOSObjectArray arrayWithObjects:(id[]){ args } count:1 type:[IOSClass classWithClass:[NSObject class]]];
  }
  return [RAREaPlatformHelper formatWithNSString:resource_string withNSObjectArray:args];
}

+ (id<RAREUTiCancelable>)searchInBackgroundWithJavaUtilList:(id<JavaUtilList>)list
                                          withRAREUTiFilter:(id<RAREUTiFilter>)filter
                                                withBoolean:(BOOL)returnIndexes
                                  withRAREiFunctionCallback:(id<RAREiFunctionCallback>)cb {
  id<JavaLangRunnable> r = [[RAREFunctions_$6 alloc] initWithJavaUtilList:list withRAREUTiFilter:filter withBoolean:returnIndexes withRAREiFunctionCallback:cb];
  return [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeBackgroundTaskWithJavaLangRunnable:r];
}

+ (NSString *)serverBase {
  return [RAREFunctions serverBaseWithRAREiWidget:[RAREPlatform getContextRootViewer]];
}

+ (NSString *)serverBaseWithRAREiWidget:(id<RAREiWidget>)context {
  JavaNetURL *u = [((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getCodeBase];
  if (u == nil) {
    u = [((id<RAREiPlatformAppContext>) nil_chk([context getAppContext])) getApplicationURL];
  }
  return [RAREJavaURLConnection baseToExternalFormWithJavaNetURL:u];
}

+ (NSString *)sha1WithNSString:(NSString *)val {
  return [RAREFunctions sha1WithNSString:val withBoolean:YES];
}

+ (NSString *)sha1WithByteArray:(IOSByteArray *)val
                    withBoolean:(BOOL)base64 {
  return [RAREFunctionHelper sha1WithByteArray:val withBoolean:base64];
}

+ (NSString *)sha1WithNSString:(NSString *)val
                   withBoolean:(BOOL)base64 {
  return [RAREFunctionHelper sha1WithNSString:val withBoolean:base64];
}

+ (id<RAREUTiCancelable>)sortInBackgroundWithJavaUtilList:(id<JavaUtilList>)list
                                   withJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                withRAREiFunctionCallback:(id<RAREiFunctionCallback>)cb {
  id<JavaLangRunnable> r = [[RAREFunctions_$7 alloc] initWithJavaUtilComparator:comparator withJavaUtilList:list withRAREiFunctionCallback:cb];
  return [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeBackgroundTaskWithJavaLangRunnable:r];
}

+ (NSString *)stringValueWithInt:(int)number {
  return [RAREUTStringCache valueOfWithInt:number];
}

+ (NSString *)stringValueWithLong:(long long int)number {
  return [RAREUTStringCache valueOfWithLong:number];
}

+ (NSString *)stringValueWithDouble:(double)number {
  return [RAREUTSNumber toStringWithDouble:number];
}

+ (NSString *)stringValueWithId:(id)obj {
  if (obj == nil) {
    return nil;
  }
  if ([obj isKindOfClass:[NSString class]]) {
    return (NSString *) check_class_cast(obj, [NSString class]);
  }
  if ([obj isKindOfClass:[JavaLangInteger class]]) {
    return [RAREUTStringCache valueOfWithInt:[((JavaLangInteger *) check_class_cast(obj, [JavaLangInteger class])) intValue]];
  }
  if ([obj isKindOfClass:[JavaLangLong class]]) {
    return [RAREUTStringCache valueOfWithLong:[((JavaLangLong *) check_class_cast(obj, [JavaLangLong class])) longLongValue]];
  }
  if ([obj isKindOfClass:[NSNumber class]]) {
    return [RAREUTSNumber toStringWithDouble:[((NSNumber *) check_class_cast(obj, [NSNumber class])) doubleValue]];
  }
  if (([obj isKindOfClass:[JavaUtilDate class]]) || ([obj isKindOfClass:[JavaUtilCalendar class]])) {
    return [RAREFunctions convertDateTimeWithRAREiWidget:[RAREPlatform getContextRootViewer] withId:obj withBoolean:YES];
  }
  if ([obj isKindOfClass:[JavaNetURL class]]) {
    return [RAREJavaURLConnection toExternalFormWithJavaNetURL:(JavaNetURL *) check_class_cast(obj, [JavaNetURL class])];
  }
  return [nil_chk(obj) description];
}

+ (NSString *)stripMnemonicWithNSString:(NSString *)text {
  return [RAREUtils stripMnemonicWithNSString:text];
}

+ (NSString *)substringWithNSString:(NSString *)val
                            withInt:(int)start
                            withInt:(int)end {
  if (val == nil) {
    return @"";
  }
  int len = [((NSString *) nil_chk(val)) sequenceLength];
  if (end == -1) {
    end = len;
  }
  if (end > len) {
    end = len;
  }
  if ((end < 1) || (end < start) || (start > end)) {
    return @"";
  }
  return [val substring:start endIndex:end];
}

+ (NSString *)titleCaseWithNSString:(NSString *)val {
  return (val == nil) ? @"" : [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) [[RAREUTCharArray alloc] initWithNSString:val]) toTitleCase])) description];
}

+ (NSString *)titleCaseWithNSString:(NSString *)val
                       withNSString:(NSString *)wordSeparators {
  if (wordSeparators == nil) {
    return (val == nil) ? @"" : [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) [[RAREUTCharArray alloc] initWithNSString:val]) toTitleCase])) description];
  }
  return (val == nil) ? @"" : [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) [[RAREUTCharArray alloc] initWithNSString:val]) toTitleCaseWithCharArray:[((NSString *) nil_chk(wordSeparators)) toCharArray]])) description];
}

+ (NSString *)toExternalFormWithJavaNetURL:(JavaNetURL *)url {
  return (url == nil) ? nil : [RAREJavaURLConnection toExternalFormWithJavaNetURL:url];
}

+ (NSString *)tokenReplacementWithNSString:(NSString *)s
                              withNSString:(NSString *)what
                              withNSString:(NSString *)with
                               withBoolean:(BOOL)html
                              withNSString:(NSString *)prefix
                              withNSString:(NSString *)suffix
                                   withInt:(int)maxLineCount {
  return [RAREUTHelper tokenReplacementWithNSString:s withNSString:what withNSString:with withBoolean:html withNSString:prefix withNSString:suffix withInt:maxLineCount];
}

+ (NSString *)tokenToHTMLBreakWithNSString:(NSString *)s
                              withNSString:(NSString *)tok
                               withBoolean:(BOOL)html {
  return [RAREUTHelper tokenReplacementWithNSString:s withNSString:tok withNSString:@"<br/>" withBoolean:html withNSString:nil withNSString:nil withInt:-1];
}

+ (NSString *)tokenToHTMLBreakWithNSString:(NSString *)s
                              withNSString:(NSString *)tok
                               withBoolean:(BOOL)html
                              withNSString:(NSString *)prefix
                              withNSString:(NSString *)suffix
                                   withInt:(int)maxLineCount {
  return [RAREUTHelper tokenReplacementWithNSString:s withNSString:tok withNSString:@"<br/>" withBoolean:html withNSString:prefix withNSString:suffix withInt:maxLineCount];
}

+ (NSString *)trimWithNSString:(NSString *)val {
  return (val == nil) ? @"" : [val trim];
}

+ (NSString *)unescapeWithNSString:(NSString *)val {
  return [RAREUTCharScanner unescapeWithNSString:val];
}

+ (NSString *)unescapeQuotedStringWithNSString:(NSString *)val {
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk(RAREFunctions_perThreadScanner_)) get];
  [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:val];
  (void) [sc unesacpe];
  (void) [sc unquoteWithBoolean:NO];
  return [sc description];
}

+ (id<JavaUtilList>)ungroupWithJavaUtilList:(id<JavaUtilList>)list
                                    withInt:(int)groupings
                           withJavaUtilList:(id<JavaUtilList>)outArg {
  if (outArg == nil) {
    outArg = [RAREFunctions createListWithId:[JavaLangInteger valueOfWithInt:10]];
  }
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  groupings--;
  RARERenderableDataItem *item;
  for (int i = 0; i < len; i++) {
    item = [list getWithInt:i];
    if (groupings > 0) {
      (void) [RAREFunctions ungroupWithJavaUtilList:[((RARERenderableDataItem *) nil_chk(item)) getItems] withInt:groupings withJavaUtilList:outArg];
    }
    else {
      [((id<JavaUtilList>) nil_chk(outArg)) addAllWithJavaUtilCollection:item];
    }
  }
  return outArg;
}

+ (void)updateUIColorWithNSString:(NSString *)name
                           withId:(id)value {
  [RAREUIColorHelper updateColorWithNSString:name withId:value];
}

+ (NSString *)upperCaseWithNSString:(NSString *)val {
  return (val == nil) ? @"" : [val uppercaseStringWithJRELocale:[JavaUtilLocale getDefault]];
}

+ (NSString *)utf8StringWithNSString:(NSString *)value {
  return [RAREUtils utf8StringWithNSString:value];
}

+ (void)setOptimizationEnabledWithBoolean:(BOOL)enabled {
  [RAREPlatformHelper setOptimizationEnabledWithBoolean:enabled];
}

+ (void)setRelativeFontSizeWithFloat:(float)size {
  [RAREUIFontHelper setRelativeFontSizeWithFloat:size];
}

+ (void)setStrictScriptingModeWithBoolean:(BOOL)strict {
  [RAREaPlatformHelper setStrictScriptingModeWithBoolean:strict];
}

+ (id)getCachedDataWithNSString:(NSString *)name
                    withBoolean:(BOOL)asString {
  @try {
    JavaIoFile *f = [RAREPlatform createCacheFileWithNSString:name];
    if ((f == nil) || ![f exists]) {
      return nil;
    }
    JavaIoInputStream *in = [[JavaIoFileInputStream alloc] initWithJavaIoFile:f];
    if (asString && (in != nil)) {
      return [RAREUTStreams readerToStringWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:in withNSString:@"utf-8"]];
    }
    return in;
  }
  @catch (JavaLangException *ex) {
    return nil;
  }
}

- (RAREFunctions *)getFunctions {
  return self;
}

+ (id<RAREiFunctionHandler>)getInstance {
  if (RAREFunctions__instance_ == nil) {
    RAREFunctions__instance_ = [[RAREFunctions alloc] init];
  }
  return RAREFunctions__instance_;
}

+ (long long int)getLastConnectionSuccessTime {
  return [RAREJavaURLConnection getLastConnectionSuccessTime];
}

+ (NSString *)getLinesWithNSString:(NSString *)s
                           withInt:(int)lines {
  if (s == nil) {
    return s;
  }
  int n = -1;
  while (lines-- > 0) {
    n = [((NSString *) nil_chk(s)) indexOf:0x000a fromIndex:n + 1];
    if (n == -1) {
      break;
    }
  }
  return (n == -1) ? s : [((NSString *) nil_chk(s)) substring:0 endIndex:n];
}

+ (NSString *)getLocation {
  return [RAREFunctionHelper getLocation];
}

+ (id<JavaUtilList>)getMonths {
  IOSObjectArray *a = [((JavaTextDateFormatSymbols *) [[JavaTextDateFormatSymbols alloc] init]) getMonths];
  int len = (int) [((IOSObjectArray *) nil_chk(a)) count];
  id<JavaUtilList> list = [[RAREUTFilterableList alloc] initWithInt:12];
  for (int i = 0; i < len; i++) {
    if ((IOSObjectArray_Get(a, i) != nil) && ([((NSString *) IOSObjectArray_Get(a, i)) sequenceLength] > 0)) {
      [list addWithId:IOSObjectArray_Get(a, i)];
    }
  }
  return list;
}

+ (id<JavaUtilList>)getMonthsShortNames {
  IOSObjectArray *a = [((JavaTextDateFormatSymbols *) [[JavaTextDateFormatSymbols alloc] init]) getShortMonths];
  int len = (int) [((IOSObjectArray *) nil_chk(a)) count];
  id<JavaUtilList> list = [[RAREUTFilterableList alloc] initWithInt:12];
  for (int i = 0; i < len; i++) {
    if ((IOSObjectArray_Get(a, i) != nil) && ([((NSString *) IOSObjectArray_Get(a, i)) sequenceLength] > 0)) {
      [list addWithId:IOSObjectArray_Get(a, i)];
    }
  }
  return list;
}

+ (NSString *)getOs {
  return [RAREPlatform getOsType];
}

+ (NSString *)getOsVersion {
  if (RAREFunctions_osVersion_ == nil) {
    RAREFunctions_osVersion_ = [RAREUTSNumber toStringWithDouble:[RAREPlatform getOsVersion]];
  }
  return RAREFunctions_osVersion_;
}

+ (float)getPixelMultipler {
  return [RAREScreenUtils getPixelMultiplier];
}

+ (id<RAREUTiPreferences>)getPreferencesWithNSString:(NSString *)appKey {
  return [RAREaPlatformHelper getPreferencesWithNSString:appKey];
}

+ (float)getRelativeFontSize {
  return [RAREUIFontHelper getRelativeFontSize];
}

+ (NSString *)getScreenOrientation {
  return [RAREUIScreen getOrientationName];
}

+ (RAREUIDimension *)getScreenSize {
  return [RAREUIScreen getScreenSize];
}

+ (RAREUIProperties *)getUIDefaults {
  return [RAREPlatform getUIDefaults];
}

+ (NSString *)getURLQueryParameterWithNSString:(NSString *)url
                                  withNSString:(NSString *)param {
  if ((url == nil) || (param == nil)) {
    return nil;
  }
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk(RAREFunctions_perThreadScanner_)) get];
  [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:url];
  [sc setTokenDelimitersWithCharArray:RAREFunctions_urlParamsTokens_];
  NSString *s;
  @try {
    while ((s = [sc nextToken]) != nil) {
      if ([((NSString *) nil_chk(s)) hasPrefix:param]) {
        int n = [s indexOf:'='];
        if (n == [((NSString *) nil_chk(param)) sequenceLength]) {
          return [((NSString *) nil_chk([s substring:n + 1])) trim];
        }
      }
    }
    return nil;
  }
  @finally {
    [sc setTokenDelimitersWithCharArray:nil];
  }
}

+ (BOOL)isAndroid {
  return [RAREPlatform isAndroid];
}

+ (BOOL)isExceptionWithId:(id)o {
  return [o isKindOfClass:[JavaLangThrowable class]];
}

+ (BOOL)isJava6OrAbove {
  return [RAREPlatform getJavaVersion] >= 1.6;
}

+ (BOOL)isJava7OrAbove {
  return [RAREPlatform getJavaVersion] >= 1.7;
}

+ (BOOL)isLinux {
  return [RAREPlatform isLinux];
}

+ (BOOL)isMac {
  return [RAREPlatform isMac];
}

+ (BOOL)isOptimizationEnabled {
  return [RAREaPlatformHelper isOptimizationEnabled];
}

+ (BOOL)isEqualWithId:(id)o1
               withId:(id)o2 {
  return o1 == o2;
}

+ (BOOL)isPrintableCharWithChar:(unichar)c {
  if ([JavaLangCharacter isJavaIdentifierStartWithChar:c]) {
    return YES;
  }
  if ([JavaLangCharacter isDigitWithChar:c]) {
    return YES;
  }
  switch ([JavaLangCharacter getTypeWithChar:c]) {
    case JavaLangCharacter_MODIFIER_SYMBOL:
    return YES;
    case JavaLangCharacter_DASH_PUNCTUATION:
    return YES;
    case JavaLangCharacter_MATH_SYMBOL:
    return YES;
    case JavaLangCharacter_OTHER_PUNCTUATION:
    return YES;
    case JavaLangCharacter_START_PUNCTUATION:
    return YES;
    case JavaLangCharacter_END_PUNCTUATION:
    return YES;
  }
  return NO;
}

+ (BOOL)isRunningInBackground {
  return ![RAREPlatform isUIThread];
}

+ (BOOL)isStrictScriptingMode {
  return [RAREaPlatformHelper getStrictScriptingMode];
}

+ (BOOL)isTouchDevice {
  return [RAREPlatform isTouchDevice];
}

+ (BOOL)isTouchableDevice {
  return [RAREPlatform isTouchableDevice];
}

+ (BOOL)isUnix {
  return YES;
}

+ (BOOL)isWindows {
  return [RAREPlatform isWindows];
}

+ (void)checkParmLengthWithRAREiWidget:(id<RAREiWidget>)w
                               withInt:(int)actual
                               withInt:(int)required {
  if (actual < required) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(w)) getAppContext])) getResourceAsStringWithNSString:@"Rare.runtime.text.missingParameter"]];
  }
}

+ (void)initializeFunctionMap {
  JavaLangInteger *in;
  (void) [((JavaUtilHashMap *) nil_chk(RAREFunctions_functionMap_)) putWithId:@"toupr" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_UPPER_CASE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"uppercase" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"ucase" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"tolwr" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_LOWER_CASE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"lowercase" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"lcase" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"sub" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_SUBSTRING]];
  (void) [RAREFunctions_functionMap_ putWithId:@"substr" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"substring" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"len" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_LENGTH]];
  (void) [RAREFunctions_functionMap_ putWithId:@"length" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"trim" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_TRIM]];
  (void) [RAREFunctions_functionMap_ putWithId:@"concat" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_CONCAT]];
  (void) [RAREFunctions_functionMap_ putWithId:@"add" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_ADD]];
  (void) [RAREFunctions_functionMap_ putWithId:@"chop" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_CHOP]];
  (void) [RAREFunctions_functionMap_ putWithId:@"piece" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_PIECE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"replacepiece" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_REPLACE_PIECE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"sha" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_SHA]];
  (void) [RAREFunctions_functionMap_ putWithId:@"md5" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_MD5]];
  (void) [RAREFunctions_functionMap_ putWithId:@"random" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_RANDOM]];
  (void) [RAREFunctions_functionMap_ putWithId:@"hmacsha" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_HMAC_SHA]];
  (void) [RAREFunctions_functionMap_ putWithId:@"hmacmd5" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_HMAC_MD5]];
  (void) [RAREFunctions_functionMap_ putWithId:@"base64" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_BASE64]];
  (void) [RAREFunctions_functionMap_ putWithId:@"sound" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_SOUND]];
  (void) [RAREFunctions_functionMap_ putWithId:@"bold" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_BOLD]];
  (void) [RAREFunctions_functionMap_ putWithId:@"b" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"italic" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_ITALIC]];
  (void) [RAREFunctions_functionMap_ putWithId:@"i" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"underlined" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_UNDERLINED]];
  (void) [RAREFunctions_functionMap_ putWithId:@"u" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"html" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_HTML]];
  (void) [RAREFunctions_functionMap_ putWithId:@"h" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"color" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_COLOR]];
  (void) [RAREFunctions_functionMap_ putWithId:@"starttag" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_START_TAG]];
  (void) [RAREFunctions_functionMap_ putWithId:@"stag" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"endtag" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_END_TAG]];
  (void) [RAREFunctions_functionMap_ putWithId:@"etag" withId:in];
  (void) [RAREFunctions_functionMap_ putWithId:@"date" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_DATE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"datetime" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_DATE_TIME]];
  (void) [RAREFunctions_functionMap_ putWithId:@"escape" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_ESCAPE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"currenttime" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_CURRENTTIME]];
  (void) [RAREFunctions_functionMap_ putWithId:@"nanotime" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_NANOTIME]];
  (void) [RAREFunctions_functionMap_ putWithId:@"property" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_PROPERTY]];
  (void) [RAREFunctions_functionMap_ putWithId:@"codebase" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_CODEBASE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"applicationurl" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_APPURL]];
  (void) [RAREFunctions_functionMap_ putWithId:@"appurl" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_APPURL]];
  (void) [RAREFunctions_functionMap_ putWithId:@"resolve" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_RESOLVE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"serverbase" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_SERVERBASE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"documentbase" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_DOCBASE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"currentdate" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_CURRENTDATE]];
  (void) [RAREFunctions_functionMap_ putWithId:@"currentTime" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_CURRENTTIME]];
  (void) [RAREFunctions_functionMap_ putWithId:@"time" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_CURRENTTIME]];
  (void) [RAREFunctions_functionMap_ putWithId:@"rformat" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_RFORMAT]];
  (void) [RAREFunctions_functionMap_ putWithId:@"screenorientation" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_ORIENTATION]];
  (void) [RAREFunctions_functionMap_ putWithId:@"location" withId:in = [JavaLangInteger valueOfWithInt:RAREFunctions_FUNC_LOCATION]];
}

+ (void)initialize {
  if (self == [RAREFunctions class]) {
    RAREFunctions_BR_ = [@"<br/>" toCharArray];
    RAREFunctions_perThreadCharArray_ = [[RAREFunctions_$1 alloc] init];
    RAREFunctions_perThreadScanner_ = [[RAREFunctions_$2 alloc] init];
    RAREFunctions_perThreadStringList_ = [[RAREFunctions_$3 alloc] init];
    RAREFunctions_functionMap_ = [[JavaUtilHashMap alloc] init];
    RAREFunctions_urlPattern_ = [JavaUtilRegexPattern compileWithNSString:@"\\b(www\\.|http://|https://)\\S+\\b"];
    RAREFunctions_wwwPrefixChars_ = [@"www." toCharArray];
    RAREFunctions_urlParamsTokens_ = [@"?&;" toCharArray];
    RAREFunctions_httpsPrefixChars_ = [@"https://" toCharArray];
    RAREFunctions_httpPrefixChars_ = [@"http://" toCharArray];
  }
}

- (void)copyAllFieldsTo:(RAREFunctions *)other {
  [super copyAllFieldsTo:other];
  other->zero_string_ = zero_string_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addWithId:withId:", NULL, "LNSNumber", 0x9, NULL },
    { "aesDecryptWithNSString:withNSString:withNSString:withInt:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "aesEncryptWithNSString:withNSString:withNSString:withInt:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "applicationURL", NULL, "LNSString", 0x9, NULL },
    { "applicationURLWithRAREiWidget:", NULL, "LNSString", 0x9, NULL },
    { "asListWithId:", NULL, "LJavaUtilList", 0x9, NULL },
    { "base64WithNSString:", NULL, "LNSString", 0x9, NULL },
    { "base64NOLFWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "booleanValueWithId:", NULL, "Z", 0x9, NULL },
    { "cacheDataWithNSString:withJavaIoInputStream:", NULL, "Z", 0x9, NULL },
    { "cacheDataWithNSString:withNSString:", NULL, "Z", 0x9, NULL },
    { "charToStringWithChar:", NULL, "LNSString", 0x9, NULL },
    { "chopWithNSString:withInt:", NULL, "LNSString", 0x9, NULL },
    { "codeBase", NULL, "LNSString", 0x9, NULL },
    { "codeBaseWithRAREiWidget:", NULL, "LNSString", 0x9, NULL },
    { "colorToHexStringWithRAREUIColor:", NULL, "LNSString", 0x9, NULL },
    { "colorToRGBStringWithRAREUIColor:", NULL, "LNSString", 0x9, NULL },
    { "concatWithId:withId:", NULL, "LNSString", 0x9, NULL },
    { "convertDateWithRAREiWidget:withId:", NULL, "LNSString", 0x9, NULL },
    { "convertDateWithRAREiWidget:withId:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "convertDateWithRAREiWidget:withId:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "convertDateWithRAREiWidget:withId:withNSString:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "convertDateTimeWithRAREiWidget:withId:", NULL, "LNSString", 0x9, NULL },
    { "convertDateTimeWithRAREiWidget:withId:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "createBackgroundPainterWithRAREUIColor:", NULL, "LRAREiBackgroundPainter", 0x9, NULL },
    { "createBorderWithNSString:", NULL, "LRAREiPlatformBorder", 0x9, NULL },
    { "createBorderIconWithRAREiPlatformBorder:withRAREiPlatformIcon:", NULL, "LRAREiPlatformIcon", 0x9, NULL },
    { "createCacheFileWithNSString:", NULL, "LJavaIoFile", 0x9, "JavaIoIOException" },
    { "createCacheMapWithInt:withInt:", NULL, "LRAREUTObjectCache", 0x9, NULL },
    { "createCalendarWithNSString:", NULL, "LJavaUtilCalendar", 0x9, NULL },
    { "createColorIconWithRAREUIColor:withInt:withInt:withRAREiPlatformBorder:", NULL, "LRAREiPlatformIcon", 0x9, NULL },
    { "createCompoundBorderWithRAREiPlatformBorder:withRAREiPlatformBorder:", NULL, "LRAREUICompoundBorder", 0x9, NULL },
    { "createCompoundIconWithRAREiPlatformIconArray:", NULL, "LRAREUICompoundIcon", 0x89, NULL },
    { "createCompoundPainterWithRAREiPlatformPainter:withRAREiPlatformPainter:", NULL, "LRAREUICompoundPainter", 0x9, NULL },
    { "createConcurrentHashMapWithInt:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "createContainsFilterWithNSString:withBoolean:", NULL, "LRAREUTContainsFilter", 0x9, NULL },
    { "createDateWithNSString:", NULL, "LJavaUtilDate", 0x9, NULL },
    { "createEmptyIconWithInt:withInt:withRAREUIColor:", NULL, "LRAREiPlatformIcon", 0x9, NULL },
    { "createEqualityFilterWithNSString:withBoolean:", NULL, "LRAREUTEqualityFilter", 0x9, NULL },
    { "createFunctionCallbackChainner", NULL, "LRAREFunctionCallbackChainer", 0x9, NULL },
    { "createFunctionCallbackWaiter", NULL, "LRAREFunctionCallbackWaiter", 0x9, NULL },
    { "createGrouper", NULL, "LRAREGrouper", 0x9, NULL },
    { "createHashMapWithInt:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "createIdentityHashMapWithInt:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "createIdentityListWithInt:", NULL, "LJavaUtilList", 0x9, NULL },
    { "createIntArrayWithInt:", NULL, "LIOSIntArray", 0x9, NULL },
    { "createIntArrayListWithInt:", NULL, "LRAREUTIntList", 0x9, NULL },
    { "createJSONArrayWithId:", NULL, "LRAREUTJSONArray", 0x9, "RAREUTJSONException" },
    { "createJSONObjectWithId:", NULL, "LRAREUTJSONObject", 0x9, "RAREUTJSONException" },
    { "createListWithId:", NULL, "LJavaUtilList", 0x9, NULL },
    { "createObjectArrayWithInt:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "createObjectHolderWithId:withId:", NULL, "LRAREUTObjectHolder", 0x9, NULL },
    { "createRegExFilterWithNSString:withBoolean:", NULL, "LRAREUTRegularExpressionFilter", 0x9, NULL },
    { "createScriptableVarWithRAREiWidget:withId:", NULL, "LNSObject", 0x9, NULL },
    { "createSortedMap", NULL, "LJavaUtilMap", 0x9, NULL },
    { "createStringArrayWithInt:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "createTextIconWithNSString:withRAREUIColor:withRAREUIFont:withRAREiPlatformBorder:", NULL, "LRAREUITextIcon", 0x9, NULL },
    { "createTextImageWithNSString:withRAREUIFont:", NULL, "LRAREUIImage", 0x9, NULL },
    { "createTextImageWithNSString:withRAREUIFont:withRAREUIColor:withRAREUIColor:withRAREiPlatformBorder:withBoolean:", NULL, "LRAREUIImage", 0x9, NULL },
    { "createTextPainterWithNSString:", NULL, "LRAREUITextIcon", 0x9, NULL },
    { "createValueAnimatorWithDouble:withDouble:withDouble:withBoolean:withBoolean:withRAREiAnimatorValueListener:", NULL, "LRAREiAnimator", 0x9, NULL },
    { "currentDateWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "currentDateWithRAREiWidget:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "currentTimeWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "currentTimeWithRAREiWidget:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "dateWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "dateWithRAREiWidget:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "dateWithNSString:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "dateTimeWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "dateTimeWithRAREiWidget:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "dateTimeWithNSString:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "dateTimeWithRAREiWidget:withNSString:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "decodeWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "decodeBase64WithNSString:", NULL, "LNSString", 0x9, NULL },
    { "documentBase", NULL, "LNSString", 0x9, NULL },
    { "documentBaseWithRAREiWidget:", NULL, "LNSString", 0x9, NULL },
    { "documentServerBase", NULL, "LNSString", 0x9, NULL },
    { "encodeWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "encodeFullWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "escapeWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "escapeHTMLWithNSString:withBoolean:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "executeWithRAREiWidget:withNSString:", NULL, "LNSString", 0x1, "JavaTextParseException" },
    { "resolveParameterWithRAREiWidget:withNSString:withRAREUTCharScanner:", NULL, "LNSString", 0x4, "JavaTextParseException" },
    { "getEventHandlerWithNSString:", NULL, "LRAREiEventHandler", 0x9, NULL },
    { "executeFunctionWithRAREiWidget:withNSString:withNSStringArray:", NULL, "LNSString", 0x1, NULL },
    { "expandWithNSString:withNSStringArray:", NULL, "LNSString", 0x89, NULL },
    { "filterInBackgroundWithJavaUtilList:withRAREUTiFilter:withRAREiFunctionCallback:", NULL, "LRAREUTiCancelable", 0x9, NULL },
    { "findWidgetWithRARESPOTWidget:withNSString:withBoolean:", NULL, "LRARESPOTWidget", 0x9, NULL },
    { "formatWithNSString:withNSObjectArray:", NULL, "LNSString", 0x89, NULL },
    { "generateKeyWithNSString:withNSString:withInt:", NULL, "LNSString", 0x9, NULL },
    { "generateSaltWithInt:", NULL, "LNSString", 0x9, NULL },
    { "hmacMD5WithNSString:withNSString:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "hmacSHAWithNSString:withNSString:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "htmlReplaceWithNSString:withJavaUtilRegexPattern:withNSString:withBoolean:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "htmlWordWrapWithNSString:withInt:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "joinWithJavaUtilList:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "joinWithNSObjectArray:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "linefeedToHTMLBreakWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "linefeedToHTMLBreakWithNSString:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "lowerCaseWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "makeHyperlinksWithNSString:withBoolean:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "md5WithNSString:", NULL, "LNSString", 0x9, NULL },
    { "md5WithNSString:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "parseDateStringWithRAREiWidget:withNSString:", NULL, "LJavaUtilDate", 0x9, "JavaTextParseException" },
    { "parseDateStringWithRAREiWidget:withNSString:withNSString:", NULL, "LJavaUtilDate", 0x9, "JavaTextParseException" },
    { "parseJSONObjectWithRAREiWidget:withRAREUTJSONObject:withBoolean:", NULL, "LJavaUtilList", 0x9, "JavaIoIOException" },
    { "parseDateTimeStringWithRAREiWidget:withNSString:", NULL, "LJavaUtilDate", 0x9, "JavaTextParseException" },
    { "parseOptionsStringWithNSString:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "parseOptionsStringWithNSString:withChar:withBoolean:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "pieceWithNSString:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "pieceWithNSString:withNSString:withInt:", NULL, "LNSString", 0x9, NULL },
    { "pieceWithNSString:withNSString:withInt:withInt:", NULL, "LNSString", 0x9, NULL },
    { "printWithNSObjectArray:", NULL, "V", 0x89, NULL },
    { "printlnWithNSObjectArray:", NULL, "V", 0x89, NULL },
    { "propertyWithNSString:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "quoteWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "readWithRAREiWidget:withId:", NULL, "LNSString", 0x9, "JavaIoIOException" },
    { "removeAllWithJavaUtilMap:withJavaUtilMap:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "replacePieceWithNSString:withNSString:withInt:withInt:withInt:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "resolveWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "resolveWithRAREiWidget:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "rformatWithRAREiWidget:withNSString:withNSObjectArray:", NULL, "LNSString", 0x89, NULL },
    { "searchInBackgroundWithJavaUtilList:withRAREUTiFilter:withBoolean:withRAREiFunctionCallback:", NULL, "LRAREUTiCancelable", 0x9, NULL },
    { "serverBase", NULL, "LNSString", 0x9, NULL },
    { "serverBaseWithRAREiWidget:", NULL, "LNSString", 0x9, NULL },
    { "sha1WithNSString:", NULL, "LNSString", 0x9, NULL },
    { "sha1WithByteArray:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "sha1WithNSString:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "sortInBackgroundWithJavaUtilList:withJavaUtilComparator:withRAREiFunctionCallback:", NULL, "LRAREUTiCancelable", 0x9, NULL },
    { "stringValueWithInt:", NULL, "LNSString", 0x9, NULL },
    { "stringValueWithLong:", NULL, "LNSString", 0x9, NULL },
    { "stringValueWithDouble:", NULL, "LNSString", 0x9, NULL },
    { "stringValueWithId:", NULL, "LNSString", 0x9, NULL },
    { "stripMnemonicWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "substringWithNSString:withInt:withInt:", NULL, "LNSString", 0x9, NULL },
    { "titleCaseWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "titleCaseWithNSString:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "toExternalFormWithJavaNetURL:", NULL, "LNSString", 0x9, NULL },
    { "tokenReplacementWithNSString:withNSString:withNSString:withBoolean:withNSString:withNSString:withInt:", NULL, "LNSString", 0x9, NULL },
    { "tokenToHTMLBreakWithNSString:withNSString:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "tokenToHTMLBreakWithNSString:withNSString:withBoolean:withNSString:withNSString:withInt:", NULL, "LNSString", 0x9, NULL },
    { "trimWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "unescapeWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "unescapeQuotedStringWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "ungroupWithJavaUtilList:withInt:withJavaUtilList:", NULL, "LJavaUtilList", 0x9, NULL },
    { "upperCaseWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "utf8StringWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "getCachedDataWithNSString:withBoolean:", NULL, "LNSObject", 0x9, NULL },
    { "getFunctions", NULL, "LRAREFunctions", 0x1, NULL },
    { "getInstance", NULL, "LRAREiFunctionHandler", 0x9, NULL },
    { "getLinesWithNSString:withInt:", NULL, "LNSString", 0x9, NULL },
    { "getLocation", NULL, "LNSString", 0x9, NULL },
    { "getMonths", NULL, "LJavaUtilList", 0x9, NULL },
    { "getMonthsShortNames", NULL, "LJavaUtilList", 0x9, NULL },
    { "getOs", NULL, "LNSString", 0x9, NULL },
    { "getOsVersion", NULL, "LNSString", 0x9, NULL },
    { "getPreferencesWithNSString:", NULL, "LRAREUTiPreferences", 0x9, NULL },
    { "getScreenOrientation", NULL, "LNSString", 0x9, NULL },
    { "getScreenSize", NULL, "LRAREUIDimension", 0x9, NULL },
    { "getUIDefaults", NULL, "LRAREUIProperties", 0x9, NULL },
    { "getURLQueryParameterWithNSString:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "isAndroid", NULL, "Z", 0x9, NULL },
    { "isExceptionWithId:", NULL, "Z", 0x9, NULL },
    { "isJava6OrAbove", NULL, "Z", 0x9, NULL },
    { "isJava7OrAbove", NULL, "Z", 0x9, NULL },
    { "isLinux", NULL, "Z", 0x9, NULL },
    { "isMac", NULL, "Z", 0x9, NULL },
    { "isOptimizationEnabled", NULL, "Z", 0x9, NULL },
    { "isEqualWithId:withId:", NULL, "Z", 0x9, NULL },
    { "isPrintableCharWithChar:", NULL, "Z", 0x9, NULL },
    { "isRunningInBackground", NULL, "Z", 0x9, NULL },
    { "isStrictScriptingMode", NULL, "Z", 0x9, NULL },
    { "isTouchDevice", NULL, "Z", 0x9, NULL },
    { "isTouchableDevice", NULL, "Z", 0x9, NULL },
    { "isUnix", NULL, "Z", 0x9, NULL },
    { "isWindows", NULL, "Z", 0x9, NULL },
    { "checkParmLengthWithRAREiWidget:withInt:withInt:", NULL, "V", 0xa, NULL },
    { "initializeFunctionMap", NULL, "V", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "FUNC_ADD_", NULL, 0x1c, "I" },
    { "FUNC_APPURL_", NULL, 0x1c, "I" },
    { "FUNC_BASE64_", NULL, 0x1c, "I" },
    { "FUNC_BOLD_", NULL, 0x1c, "I" },
    { "FUNC_CHOP_", NULL, 0x1c, "I" },
    { "FUNC_CODEBASE_", NULL, 0x1c, "I" },
    { "FUNC_COLOR_", NULL, 0x1c, "I" },
    { "FUNC_CONCAT_", NULL, 0x1c, "I" },
    { "FUNC_CURRENTDATE_", NULL, 0x1c, "I" },
    { "FUNC_CURRENTTIME_", NULL, 0x1c, "I" },
    { "FUNC_CURRENT_TIME_", NULL, 0x1c, "I" },
    { "FUNC_DATE_", NULL, 0x1c, "I" },
    { "FUNC_DATE_TIME_", NULL, 0x1c, "I" },
    { "FUNC_DOCBASE_", NULL, 0x1c, "I" },
    { "FUNC_END_TAG_", NULL, 0x1c, "I" },
    { "FUNC_ESCAPE_", NULL, 0x1c, "I" },
    { "FUNC_HMAC_MD5_", NULL, 0x1c, "I" },
    { "FUNC_HMAC_SHA_", NULL, 0x1c, "I" },
    { "FUNC_HTML_", NULL, 0x1c, "I" },
    { "FUNC_ITALIC_", NULL, 0x1c, "I" },
    { "FUNC_LENGTH_", NULL, 0x1c, "I" },
    { "FUNC_LOCATION_", NULL, 0x1c, "I" },
    { "FUNC_LOWER_CASE_", NULL, 0x1c, "I" },
    { "FUNC_MD5_", NULL, 0x1c, "I" },
    { "FUNC_NANOTIME_", NULL, 0x1c, "I" },
    { "FUNC_ORIENTATION_", NULL, 0x1c, "I" },
    { "FUNC_PIECE_", NULL, 0x1c, "I" },
    { "FUNC_PROPERTY_", NULL, 0x1c, "I" },
    { "FUNC_RANDOM_", NULL, 0x1c, "I" },
    { "FUNC_REPLACE_PIECE_", NULL, 0x1c, "I" },
    { "FUNC_RESOLVE_", NULL, 0x1c, "I" },
    { "FUNC_RFORMAT_", NULL, 0x1c, "I" },
    { "FUNC_SERVERBASE_", NULL, 0x1c, "I" },
    { "FUNC_SHA_", NULL, 0x1c, "I" },
    { "FUNC_SOUND_", NULL, 0x1c, "I" },
    { "FUNC_START_TAG_", NULL, 0x1c, "I" },
    { "FUNC_SUBSTRING_", NULL, 0x1c, "I" },
    { "FUNC_TRIM_", NULL, 0x1c, "I" },
    { "FUNC_UNDERLINED_", NULL, 0x1c, "I" },
    { "FUNC_UPPER_CASE_", NULL, 0x1c, "I" },
    { "BR_", NULL, 0x1a, "LIOSCharArray" },
    { "perThreadCharArray_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "perThreadScanner_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "perThreadStringList_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "functionMap_", NULL, 0x1a, "LJavaUtilHashMap" },
    { "urlPattern_", NULL, 0x1a, "LJavaUtilRegexPattern" },
    { "wwwPrefixChars_", NULL, 0xa, "LIOSCharArray" },
    { "urlParamsTokens_", NULL, 0xa, "LIOSCharArray" },
    { "httpsPrefixChars_", NULL, 0xa, "LIOSCharArray" },
    { "httpPrefixChars_", NULL, 0xa, "LIOSCharArray" },
    { "_initialized_", NULL, 0xa, "Z" },
    { "_instance_", NULL, 0xa, "LRAREFunctions" },
    { "osVersion_", NULL, 0xa, "LNSString" },
    { "randomGenerator_", NULL, 0xa, "LJavaUtilRandom" },
  };
  static J2ObjcClassInfo _RAREFunctions = { "Functions", "com.appnativa.rare.scripting", NULL, 0x1, 178, methods, 54, fields, 0, NULL};
  return &_RAREFunctions;
}

@end
@implementation RAREFunctions_$1

- (RAREUTCharArray *)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharArray alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LRAREUTCharArray", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LRAREUTCharArray"};
  static J2ObjcClassInfo _RAREFunctions_$1 = { "$1", "com.appnativa.rare.scripting", "Functions", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREFunctions_$1;
}

@end
@implementation RAREFunctions_$2

- (RAREUTCharScanner *)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharScanner alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LRAREUTCharScanner", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LRAREUTCharScanner"};
  static J2ObjcClassInfo _RAREFunctions_$2 = { "$2", "com.appnativa.rare.scripting", "Functions", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREFunctions_$2;
}

@end
@implementation RAREFunctions_$3

- (JavaUtilArrayList *)initialValue {
  @synchronized(self) {
    {
      return [[JavaUtilArrayList alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LJavaUtilArrayList", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LJavaUtilArrayList"};
  static J2ObjcClassInfo _RAREFunctions_$3 = { "$3", "com.appnativa.rare.scripting", "Functions", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREFunctions_$3;
}

@end
@implementation RAREFunctions_$4

- (void)run {
  id<RAREUTiFilterableList> fl;
  if ([(id) val$list_ conformsToProtocol: @protocol(RAREUTiFilterableList)]) {
    fl = (id<RAREUTiFilterableList>) check_protocol_cast(val$list_, @protocol(RAREUTiFilterableList));
  }
  else {
    fl = [[RAREUTFilterableList alloc] initWithJavaUtilList:val$list_];
  }
  [((id<RAREUTiFilterableList>) nil_chk(fl)) filterWithRAREUTiFilter:val$filter_];
  [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREFunctions_$4_$1 alloc] initWithRAREFunctions_$4:self withRAREUTiFilterableList:fl]];
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)capture$0
         withRAREUTiFilter:(id<RAREUTiFilter>)capture$1
 withRAREiFunctionCallback:(id<RAREiFunctionCallback>)capture$2 {
  val$list_ = capture$0;
  val$filter_ = capture$1;
  val$cb_ = capture$2;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$list_", NULL, 0x1012, "LJavaUtilList" },
    { "val$filter_", NULL, 0x1012, "LRAREUTiFilter" },
    { "val$cb_", NULL, 0x1012, "LRAREiFunctionCallback" },
  };
  static J2ObjcClassInfo _RAREFunctions_$4 = { "$4", "com.appnativa.rare.scripting", "Functions", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_RAREFunctions_$4;
}

@end
@implementation RAREFunctions_$4_$1

- (void)run {
  [((id<RAREiFunctionCallback>) nil_chk(this$0_->val$cb_)) finishedWithBoolean:NO withId:[[RAREUTObjectHolder alloc] initWithId:this$0_->val$list_ withId:this$0_->val$filter_ withId:val$fl_]];
}

- (id)initWithRAREFunctions_$4:(RAREFunctions_$4 *)outer$
     withRAREUTiFilterableList:(id<RAREUTiFilterableList>)capture$0 {
  this$0_ = outer$;
  val$fl_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREFunctions_$4" },
    { "val$fl_", NULL, 0x1012, "LRAREUTiFilterableList" },
  };
  static J2ObjcClassInfo _RAREFunctions_$4_$1 = { "$1", "com.appnativa.rare.scripting", "Functions$$4", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_RAREFunctions_$4_$1;
}

@end
@implementation RAREFunctions_$5

- (void)run {
  [((id<RAREiWidget>) nil_chk(val$widget_)) requestFocus];
}

- (id)initWithRAREiWidget:(id<RAREiWidget>)capture$0 {
  val$widget_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$widget_", NULL, 0x1012, "LRAREiWidget" },
  };
  static J2ObjcClassInfo _RAREFunctions_$5 = { "$5", "com.appnativa.rare.scripting", "Functions", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_RAREFunctions_$5;
}

@end
@implementation RAREFunctions_$6

- (void)run {
  id<JavaUtilList> itemResults = nil;
  RAREUTIntList *indexResults = nil;
  int len = [((id<JavaUtilList>) nil_chk(val$list_)) size];
  for (int i = 0; i < len; i++) {
    id o = [val$list_ getWithInt:i];
    if (o == nil) {
      return;
    }
    if ([((id<RAREUTiFilter>) nil_chk(val$filter_)) passesWithId:o withRAREUTiStringConverter:nil]) {
      if (val$returnIndexes_) {
        if (indexResults == nil) {
          indexResults = [[RAREUTIntList alloc] init];
        }
        [((RAREUTIntList *) nil_chk(indexResults)) addWithInt:i];
      }
      else {
        if (itemResults == nil) {
          itemResults = [[JavaUtilArrayList alloc] init];
        }
        [((id<JavaUtilList>) nil_chk(itemResults)) addWithId:o];
      }
    }
  }
  id results = val$returnIndexes_ ? indexResults : ((id) itemResults);
  [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREFunctions_$6_$1 alloc] initWithRAREFunctions_$6:self withId:results]];
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)capture$0
         withRAREUTiFilter:(id<RAREUTiFilter>)capture$1
               withBoolean:(BOOL)capture$2
 withRAREiFunctionCallback:(id<RAREiFunctionCallback>)capture$3 {
  val$list_ = capture$0;
  val$filter_ = capture$1;
  val$returnIndexes_ = capture$2;
  val$cb_ = capture$3;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$list_", NULL, 0x1012, "LJavaUtilList" },
    { "val$filter_", NULL, 0x1012, "LRAREUTiFilter" },
    { "val$returnIndexes_", NULL, 0x1012, "Z" },
    { "val$cb_", NULL, 0x1012, "LRAREiFunctionCallback" },
  };
  static J2ObjcClassInfo _RAREFunctions_$6 = { "$6", "com.appnativa.rare.scripting", "Functions", 0x8000, 0, NULL, 4, fields, 0, NULL};
  return &_RAREFunctions_$6;
}

@end
@implementation RAREFunctions_$6_$1

- (void)run {
  [((id<RAREiFunctionCallback>) nil_chk(this$0_->val$cb_)) finishedWithBoolean:NO withId:[[RAREUTObjectHolder alloc] initWithId:this$0_->val$list_ withId:this$0_->val$filter_ withId:val$results_]];
}

- (id)initWithRAREFunctions_$6:(RAREFunctions_$6 *)outer$
                        withId:(id)capture$0 {
  this$0_ = outer$;
  val$results_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREFunctions_$6" },
    { "val$results_", NULL, 0x1012, "LNSObject" },
  };
  static J2ObjcClassInfo _RAREFunctions_$6_$1 = { "$1", "com.appnativa.rare.scripting", "Functions$$6", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_RAREFunctions_$6_$1;
}

@end
@implementation RAREFunctions_$7

- (void)run {
  if (val$comparator_ != nil) {
    [JavaUtilCollections sortWithJavaUtilList:val$list_ withJavaUtilComparator:val$comparator_];
  }
  else {
    [JavaUtilCollections sortWithJavaUtilList:val$list_];
  }
  [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREFunctions_$7_$1 alloc] initWithRAREFunctions_$7:self]];
}

- (id)initWithJavaUtilComparator:(id<JavaUtilComparator>)capture$0
                withJavaUtilList:(id<JavaUtilList>)capture$1
       withRAREiFunctionCallback:(id<RAREiFunctionCallback>)capture$2 {
  val$comparator_ = capture$0;
  val$list_ = capture$1;
  val$cb_ = capture$2;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$comparator_", NULL, 0x1012, "LJavaUtilComparator" },
    { "val$list_", NULL, 0x1012, "LJavaUtilList" },
    { "val$cb_", NULL, 0x1012, "LRAREiFunctionCallback" },
  };
  static J2ObjcClassInfo _RAREFunctions_$7 = { "$7", "com.appnativa.rare.scripting", "Functions", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_RAREFunctions_$7;
}

@end
@implementation RAREFunctions_$7_$1

- (void)run {
  [((id<RAREiFunctionCallback>) nil_chk(this$0_->val$cb_)) finishedWithBoolean:NO withId:[[RAREUTObjectHolder alloc] initWithId:this$0_->val$list_ withId:this$0_->val$comparator_ withId:this$0_->val$list_]];
}

- (id)initWithRAREFunctions_$7:(RAREFunctions_$7 *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREFunctions_$7" },
  };
  static J2ObjcClassInfo _RAREFunctions_$7_$1 = { "$1", "com.appnativa.rare.scripting", "Functions$$7", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_RAREFunctions_$7_$1;
}

@end
