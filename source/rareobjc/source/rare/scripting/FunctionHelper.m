//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple/com/appnativa/rare/scripting/FunctionHelper.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSByteArray.h"
#include "com/appnativa/rare/platform/apple/ui/util/ImageUtils.h"
#include "com/appnativa/rare/scripting/FunctionHelper.h"
#include "com/appnativa/rare/ui/UIBorderIcon.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UITextIcon.h"
#include "com/appnativa/rare/ui/border/UILineBorder.h"
#include "com/appnativa/rare/ui/effects/iAnimator.h"
#include "com/appnativa/rare/ui/effects/iAnimatorValueListener.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "java/lang/StringBuilder.h"
#import <CommonCrypto/CommonDigest.h>
#import <CommonCrypto/CommonHMAC.h>
#import <CommonCrypto/CommonCryptor.h>
#import <CommonCrypto/CommonKeyDerivation.h>
#import "com/appnativa/util/Base64.h"

@implementation RAREFunctionHelper

+ (NSString *)aesDecryptWithNSString:(NSString *)val
                        withNSString:(NSString *)password
                        withNSString:(NSString *)salt
                             withInt:(int)iteration
                         withBoolean:(BOOL)base64 {
  return [RAREFunctionHelper aesOperationWithBoolean:YES withNSString:val withNSString:password withNSString:salt withInt:iteration withBoolean:base64];
}

+ (NSString *)aesEncryptWithNSString:(NSString *)val
                        withNSString:(NSString *)password
                        withNSString:(NSString *)salt
                             withInt:(int)iteration
                         withBoolean:(BOOL)base64 {
  return [RAREFunctionHelper aesOperationWithBoolean:NO withNSString:val withNSString:password withNSString:salt withInt:iteration withBoolean:base64];
}

+ (NSString *)aesOperationWithBoolean:(BOOL)decrypt
                         withNSString:(NSString *)val
                         withNSString:(NSString *)password
                         withNSString:(NSString *)salt
                              withInt:(int)iteration
                          withBoolean:(BOOL)base64 {
  size_t outLength;
  size_t dataLength=[val lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
  NSMutableData *
  cipherData = [NSMutableData dataWithLength:dataLength +
  kCCBlockSizeAES128];
  
  CCOperation operation=decrypt ? kCCDecrypt : kCCEncrypt;
  CCCryptorStatus
  result = CCCrypt(operation,
  kCCAlgorithmAES128, // Algorithm
  kCCOptionPKCS7Padding, // options
  password.UTF8String, // key
  [password lengthOfBytesUsingEncoding:NSUTF8StringEncoding], // keylength
  nil,// iv
  val.UTF8String, // key
  dataLength, // keylength
  cipherData.mutableBytes, // dataOut
  cipherData.length, // dataOutAvailable
  &outLength); // dataOutMoved
  
  if (result == kCCSuccess) {
    cipherData.length = outLength;
  }
  else {
    [NSException raise:@"Unable to encrypt value" format:@"error code is %d", result];
  }
  if(base64) {
    if([cipherData respondsToSelector:@selector(base64EncodedStringWithOptions:)]) {
      return [cipherData base64EncodedStringWithOptions:0];
    }
    else {
      return [cipherData base64Encoding];
    }
  }
  
  return [[NSString alloc] initWithData:cipherData encoding:NSISOLatin1StringEncoding];
}

+ (id<RAREiPlatformIcon>)createColorIconWithRAREUIColor:(RAREUIColor *)color
                                                withInt:(int)width
                                                withInt:(int)height
                                withRAREiPlatformBorder:(id<RAREiPlatformBorder>)border {
  id<RAREiPlatformIcon> icon = [[RAREFunctionHelper_$1 alloc] initWithInt:width withInt:height withRAREUIColor:color];
  if (border == nil) {
    return icon;
  }
  return [[RAREUIBorderIcon alloc] initWithRAREiPlatformBorder:border withRAREiPlatformIcon:icon];
}

+ (id<RAREiPlatformIcon>)createEmptyIconWithInt:(int)width
                                        withInt:(int)height
                                withRAREUIColor:(RAREUIColor *)borderColor {
  id<RAREiPlatformIcon> ic = [[RAREFunctionHelper_$2 alloc] initWithInt:width withInt:height];
  if (borderColor == nil) {
    return ic;
  }
  return [[RAREUIBorderIcon alloc] initWithRAREiPlatformBorder:[[RAREUILineBorder alloc] initWithRAREUIColor:borderColor] withRAREiPlatformIcon:ic];
}

+ (RAREUIImage *)createTextImageWithNSString:(NSString *)text
                              withRAREUIFont:(RAREUIFont *)font
                             withRAREUIColor:(RAREUIColor *)fg
                             withRAREUIColor:(RAREUIColor *)bg
                     withRAREiPlatformBorder:(id<RAREiPlatformBorder>)b
                                 withBoolean:(BOOL)square {
  RAREUITextIcon *icon = [[RAREUITextIcon alloc] initWithJavaLangCharSequence:text withRAREUIColor:fg withRAREUIFont:font withRAREiPlatformBorder:b];
  if (bg != nil) {
    [icon setBackgroundColorWithRAREUIColor:bg];
  }
  return [RAREImageUtils createImageWithRAREiPlatformIcon:icon];
}

+ (id<RAREiAnimator>)createValueAnimatorWithDouble:(double)start
                                        withDouble:(double)end
                                        withDouble:(double)inc
                                       withBoolean:(BOOL)accelerate
                                       withBoolean:(BOOL)decelerate
                    withRAREiAnimatorValueListener:(id<RAREiAnimatorValueListener>)l {
  return nil;
}

+ (NSString *)generateKeyWithNSString:(NSString *)password
                         withNSString:(NSString *)salt
                              withInt:(int)iteration {
  NSMutableData *data = [NSMutableData dataWithLength:kCCKeySizeAES128];
  int  result = CCKeyDerivationPBKDF(kCCPBKDF2,            // algorithm
  password.UTF8String,  // password
  [password lengthOfBytesUsingEncoding:NSUTF8StringEncoding],  // passwordLength
  (uint8_t*)[salt cStringUsingEncoding:NSISOLatin1StringEncoding],           // salt
  [salt lengthOfBytesUsingEncoding:NSISOLatin1StringEncoding],          // saltLen
  kCCPRFHmacAlgSHA1,    // PRF
  iteration,         // rounds
  data.mutableBytes, // derivedKey
  data.length); // derivedKeyLen
  
  if(result!=0) {
    [NSException raise:@"Unable to create key" format:@"error code is %d", result];
  }
  return [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding];
}

+ (NSString *)generateSaltWithInt:(int)bytes {
  NSMutableData *data = [NSMutableData dataWithLength:bytes];
  
  int result = SecRandomCopyBytes(kSecRandomDefault,
  bytes,
  data.mutableBytes);
  if(result!=0) {
    [NSException raise:@"Unable to generate salt" format:@"error code is %d", result];
  }
  return [[NSString alloc] initWithData:data encoding:NSISOLatin1StringEncoding];
}

+ (NSString *)hmacMD5WithNSString:(NSString *)val
                     withNSString:(NSString *)key
                      withBoolean:(BOOL)base64 {
  if(!val || !key) {
    return @"";
  }
  const char *cKey  = [key cStringUsingEncoding:NSUTF8StringEncoding];
  const char *cData = [val cStringUsingEncoding:NSUTF8StringEncoding];
  unsigned char digest[CC_MD5_DIGEST_LENGTH];
  CCHmac(kCCHmacAlgMD5, cKey, (CC_LONG)strlen(cKey), cData, (CC_LONG)strlen(cData), digest);
  if(base64) {
    NSData* data=[NSData dataWithBytes:digest length:CC_MD5_DIGEST_LENGTH];
    if([data respondsToSelector:@selector(base64EncodedStringWithOptions:)]) {
      return [data base64EncodedStringWithOptions:0];
    }
    else {
      return [data base64Encoding];
    }
  }
  return [[NSString alloc] initWithBytes:digest
  length:CC_MD5_DIGEST_LENGTH
  encoding:NSISOLatin1StringEncoding];
}

+ (NSString *)hmacSHAWithNSString:(NSString *)val
                     withNSString:(NSString *)key
                      withBoolean:(BOOL)base64 {
  if(!val || !key) {
    return @"";
  }
  const char *cKey  = [key cStringUsingEncoding:NSUTF8StringEncoding];
  const char *cData = [val cStringUsingEncoding:NSUTF8StringEncoding];
  unsigned char digest[CC_SHA256_DIGEST_LENGTH];
  CCHmac(kCCHmacAlgSHA256, cKey, (CC_LONG)strlen(cKey), cData, (CC_LONG)strlen(cData), digest);
  if(base64) {
    NSData* data=[NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];
    if([data respondsToSelector:@selector(base64EncodedStringWithOptions:)]) {
      return [data base64EncodedStringWithOptions:0];
    }
    else {
      return [data base64Encoding];
    }
  }
  return [[NSString alloc] initWithBytes:digest
  length:CC_SHA256_DIGEST_LENGTH
  encoding:NSASCIIStringEncoding];
}

+ (NSString *)md5WithNSString:(NSString *)val
                  withBoolean:(BOOL)base64 {
  const char *bytes = [val cStringUsingEncoding:NSUTF8StringEncoding];
  
  uint8_t digest[CC_MD5_DIGEST_LENGTH];
  
  CC_MD5(bytes, (CC_LONG)strlen(bytes), digest);
  if(base64) {
    NSData* data=[NSData dataWithBytes:digest length:CC_MD5_DIGEST_LENGTH];
    if([data respondsToSelector:@selector(base64EncodedStringWithOptions:)]) {
      return [data base64EncodedStringWithOptions:0];
    }
    else {
      return [data base64Encoding];
    }
  }
  return [[NSString alloc] initWithBytes:digest
  length:CC_MD5_DIGEST_LENGTH
  encoding:NSISOLatin1StringEncoding];
}

+ (NSString *)sha1WithByteArray:(IOSByteArray *)val
                    withBoolean:(BOOL)base64 {
  const char *bytes = val->buffer_;
  
  uint8_t digest[CC_SHA1_DIGEST_LENGTH];
  
  CC_SHA1(bytes, (CC_LONG)val->size_, digest);
  if(base64) {
    NSData* data=[NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH];
    if([data respondsToSelector:@selector(base64EncodedStringWithOptions:)]) {
      return [data base64EncodedStringWithOptions:0];
    }
    else {
      return [data base64Encoding];
    }
  }
  return [[NSString alloc] initWithBytes:digest
  length:CC_SHA1_DIGEST_LENGTH
  encoding:NSISOLatin1StringEncoding];
}

+ (NSString *)sha1WithNSString:(NSString *)val
                   withBoolean:(BOOL)base64 {
  const char *bytes = [val cStringUsingEncoding:NSUTF8StringEncoding];
  
  uint8_t digest[CC_SHA1_DIGEST_LENGTH];
  
  CC_SHA1(bytes, (CC_LONG)strlen(bytes), digest);
  if(base64) {
    NSData* data=[NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH];
    if([data respondsToSelector:@selector(base64EncodedStringWithOptions:)]) {
      return [data base64EncodedStringWithOptions:0];
    }
    else {
      return [data base64Encoding];
    }
  }
  return [[NSString alloc] initWithBytes:digest
  length:CC_SHA1_DIGEST_LENGTH
  encoding:NSISOLatin1StringEncoding];
}

+ (NSString *)getLocation {
  return nil;
}

+ (JavaLangStringBuilder *)getMethodsWithId:(id)o
                  withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  return sb;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "aesDecryptWithNSString:withNSString:withNSString:withInt:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "aesEncryptWithNSString:withNSString:withNSString:withInt:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "aesOperationWithBoolean:withNSString:withNSString:withNSString:withInt:withBoolean:", NULL, "LNSString", 0x109, NULL },
    { "createColorIconWithRAREUIColor:withInt:withInt:withRAREiPlatformBorder:", NULL, "LRAREiPlatformIcon", 0x9, NULL },
    { "createEmptyIconWithInt:withInt:withRAREUIColor:", NULL, "LRAREiPlatformIcon", 0x9, NULL },
    { "createTextImageWithNSString:withRAREUIFont:withRAREUIColor:withRAREUIColor:withRAREiPlatformBorder:withBoolean:", NULL, "LRAREUIImage", 0x9, NULL },
    { "createValueAnimatorWithDouble:withDouble:withDouble:withBoolean:withBoolean:withRAREiAnimatorValueListener:", NULL, "LRAREiAnimator", 0x9, NULL },
    { "generateKeyWithNSString:withNSString:withInt:", NULL, "LNSString", 0x109, NULL },
    { "generateSaltWithInt:", NULL, "LNSString", 0x109, NULL },
    { "hmacMD5WithNSString:withNSString:withBoolean:", NULL, "LNSString", 0x109, NULL },
    { "hmacSHAWithNSString:withNSString:withBoolean:", NULL, "LNSString", 0x109, NULL },
    { "md5WithNSString:withBoolean:", NULL, "LNSString", 0x109, NULL },
    { "sha1WithByteArray:withBoolean:", NULL, "LNSString", 0x109, NULL },
    { "sha1WithNSString:withBoolean:", NULL, "LNSString", 0x109, NULL },
    { "getLocation", NULL, "LNSString", 0x9, NULL },
    { "getMethodsWithId:withJavaLangStringBuilder:", NULL, "LJavaLangStringBuilder", 0x9, NULL },
  };
  static J2ObjcClassInfo _RAREFunctionHelper = { "FunctionHelper", "com.appnativa.rare.scripting", NULL, 0x1, 16, methods, 0, NULL, 0, NULL};
  return &_RAREFunctionHelper;
}

@end
@implementation RAREFunctionHelper_$1

- (int)getIconWidth {
  return val$width_;
}

- (int)getIconHeight {
  return val$height_;
}

- (id<RAREiPlatformIcon>)getDisabledVersion {
  return self;
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height {
  [((id<RAREiPlatformGraphics>) nil_chk(g)) clearRectWithRAREUIColor:val$color_ withFloat:x withFloat:y withFloat:width withFloat:height];
}

- (id)initWithInt:(int)capture$0
          withInt:(int)capture$1
  withRAREUIColor:(RAREUIColor *)capture$2 {
  val$width_ = capture$0;
  val$height_ = capture$1;
  val$color_ = capture$2;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDisabledVersion", NULL, "LRAREiPlatformIcon", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$width_", NULL, 0x1012, "I" },
    { "val$height_", NULL, 0x1012, "I" },
    { "val$color_", NULL, 0x1012, "LRAREUIColor" },
  };
  static J2ObjcClassInfo _RAREFunctionHelper_$1 = { "$1", "com.appnativa.rare.scripting", "FunctionHelper", 0x8000, 1, methods, 3, fields, 0, NULL};
  return &_RAREFunctionHelper_$1;
}

@end
@implementation RAREFunctionHelper_$2

- (int)getIconWidth {
  return val$width_;
}

- (int)getIconHeight {
  return val$height_;
}

- (id<RAREiPlatformIcon>)getDisabledVersion {
  return self;
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height {
}

- (id)initWithInt:(int)capture$0
          withInt:(int)capture$1 {
  val$width_ = capture$0;
  val$height_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDisabledVersion", NULL, "LRAREiPlatformIcon", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$width_", NULL, 0x1012, "I" },
    { "val$height_", NULL, 0x1012, "I" },
  };
  static J2ObjcClassInfo _RAREFunctionHelper_$2 = { "$2", "com.appnativa.rare.scripting", "FunctionHelper", 0x8000, 1, methods, 2, fields, 0, NULL};
  return &_RAREFunctionHelper_$2;
}

@end
