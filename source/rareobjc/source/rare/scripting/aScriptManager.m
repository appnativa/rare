//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/scripting/aScriptManager.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/ErrorInformation.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iDebugHandler.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/scripting/DynamicBindings.h"
#include "com/appnativa/rare/scripting/EnvConstants.h"
#include "com/appnativa/rare/scripting/EventHandlerInterface.h"
#include "com/appnativa/rare/scripting/Functions.h"
#include "com/appnativa/rare/scripting/MultiScript.h"
#include "com/appnativa/rare/scripting/ScriptingEvent.h"
#include "com/appnativa/rare/scripting/WidgetContext.h"
#include "com/appnativa/rare/scripting/aScriptManager.h"
#include "com/appnativa/rare/scripting/iScriptHandler.h"
#include "com/appnativa/rare/spot/Application.h"
#include "com/appnativa/rare/ui/UIBorderHelper.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UIImageHelper.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/iEventHandler.h"
#include "com/appnativa/rare/ui/iWindow.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/aWindowViewer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/iCancelable.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/EventObject.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "javax/script/Bindings.h"
#include "javax/script/Compilable.h"
#include "javax/script/CompiledScript.h"
#include "javax/script/Invocable.h"
#include "javax/script/ScriptContext.h"
#include "javax/script/ScriptEngine.h"
#include "javax/script/ScriptEngineFactory.h"
#include "javax/script/ScriptEngineManager.h"
#include "javax/script/ScriptException.h"
#include "javax/script/SimpleBindings.h"
#include "javax/script/SimpleScriptContext.h"

@implementation RAREaScriptManager

static JavaUtilHashMap * RAREaScriptManager_loadedEngines_;
static BOOL RAREaScriptManager__constants_populated_ = NO;
static JavaxScriptSimpleBindings * RAREaScriptManager_nullBindings_;
static JavaUtilHashSet * RAREaScriptManager_protocols_;
static id<RAREiDebugHandler> RAREaScriptManager__debugger_;
static BOOL RAREaScriptManager__rhinoInitialized_;
static BOOL RAREaScriptManager_debuggerLoaded_;
static JavaxScriptScriptEngineManager * RAREaScriptManager_engineManager_;
static id<JavaxScriptBindings> RAREaScriptManager_globalBindings_;
static JavaUtilConcurrentConcurrentHashMap * RAREaScriptManager_nameMappings_;
static id RAREaScriptManager_postExecuteCode_;
static id RAREaScriptManager_preExecuteCode_;
static int RAREaScriptManager_shellPort_;

+ (JavaUtilHashMap *)loadedEngines {
  return RAREaScriptManager_loadedEngines_;
}

+ (BOOL)_constants_populated {
  return RAREaScriptManager__constants_populated_;
}

+ (BOOL *)_constants_populatedRef {
  return &RAREaScriptManager__constants_populated_;
}

+ (JavaxScriptSimpleBindings *)nullBindings {
  return RAREaScriptManager_nullBindings_;
}

+ (void)setNullBindings:(JavaxScriptSimpleBindings *)nullBindings {
  RAREaScriptManager_nullBindings_ = nullBindings;
}

+ (JavaUtilHashSet *)protocols {
  return RAREaScriptManager_protocols_;
}

+ (id<RAREiDebugHandler>)_debugger {
  return RAREaScriptManager__debugger_;
}

+ (void)set_debugger:(id<RAREiDebugHandler>)_debugger {
  RAREaScriptManager__debugger_ = _debugger;
}

+ (BOOL)_rhinoInitialized {
  return RAREaScriptManager__rhinoInitialized_;
}

+ (BOOL *)_rhinoInitializedRef {
  return &RAREaScriptManager__rhinoInitialized_;
}

+ (BOOL)debuggerLoaded {
  return RAREaScriptManager_debuggerLoaded_;
}

+ (BOOL *)debuggerLoadedRef {
  return &RAREaScriptManager_debuggerLoaded_;
}

+ (JavaxScriptScriptEngineManager *)engineManager {
  return RAREaScriptManager_engineManager_;
}

+ (void)setEngineManager:(JavaxScriptScriptEngineManager *)engineManager {
  RAREaScriptManager_engineManager_ = engineManager;
}

+ (id<JavaxScriptBindings>)globalBindings {
  return RAREaScriptManager_globalBindings_;
}

+ (void)setGlobalBindings:(id<JavaxScriptBindings>)globalBindings {
  RAREaScriptManager_globalBindings_ = globalBindings;
}

+ (JavaUtilConcurrentConcurrentHashMap *)nameMappings {
  return RAREaScriptManager_nameMappings_;
}

+ (void)setNameMappings:(JavaUtilConcurrentConcurrentHashMap *)nameMappings {
  RAREaScriptManager_nameMappings_ = nameMappings;
}

+ (id)postExecuteCode {
  return RAREaScriptManager_postExecuteCode_;
}

+ (void)setPostExecuteCode:(id)postExecuteCode {
  RAREaScriptManager_postExecuteCode_ = postExecuteCode;
}

+ (id)preExecuteCode {
  return RAREaScriptManager_preExecuteCode_;
}

+ (void)setPreExecuteCode:(id)preExecuteCode {
  RAREaScriptManager_preExecuteCode_ = preExecuteCode;
}

+ (int)shellPort {
  return RAREaScriptManager_shellPort_;
}

+ (int *)shellPortRef {
  return &RAREaScriptManager_shellPort_;
}

- (id)init {
  return [super init];
}

- (id)initWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)ctx
              withRARESPOTApplication:(RARESPOTApplication *)app {
  return [self initRAREaScriptManagerWithRAREiPlatformAppContext:ctx withRARESPOTApplication:app withJavaxScriptBindings:[[JavaxScriptSimpleBindings alloc] init]];
}

- (id)initRAREaScriptManagerWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)ctx
                                withRARESPOTApplication:(RARESPOTApplication *)app
                                withJavaxScriptBindings:(id<JavaxScriptBindings>)globals {
  if (self = [super init]) {
    appContext_ = ctx;
    RAREaScriptManager_globalBindings_ = globals;
    if ([((SPOTBoolean *) nil_chk(((RARESPOTApplication *) nil_chk(app))->populateGlobalConstants_)) booleanValue]) {
      RAREaScriptManager__constants_populated_ = YES;
      [RAREEnvConstants populateWithJavaUtilMap:RAREaScriptManager_globalBindings_];
    }
    NSString *s = [app spot_getAttributeWithNSString:@"onPreExecute"];
    s = (s == nil) ? nil : [s trim];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      RAREaScriptManager_preExecuteCode_ = s;
    }
    s = [app spot_getAttributeWithNSString:@"onPostExecute"];
    s = (s == nil) ? nil : [s trim];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      RAREaScriptManager_postExecuteCode_ = s;
    }
    (void) [((id<JavaxScriptBindings>) nil_chk(RAREaScriptManager_globalBindings_)) putWithId:@"rare" withId:[RAREPlatform getGlobalFunctions]];
    (void) [RAREaScriptManager_globalBindings_ putWithId:@"uiFunctions" withId:[RAREPlatform getGlobalFunctions]];
    (void) [RAREaScriptManager_globalBindings_ putWithId:@"uiPlatform" withId:[[RAREPlatform alloc] init]];
    (void) [RAREaScriptManager_globalBindings_ putWithId:@"uiColor" withId:[RAREUIColor TRANSPARENT]];
    (void) [RAREaScriptManager_globalBindings_ putWithId:@"uiScreen" withId:[[RAREUIScreen alloc] init]];
    (void) [RAREaScriptManager_globalBindings_ putWithId:@"uiImageHelper" withId:[[RAREUIImageHelper alloc] init]];
    (void) [RAREaScriptManager_globalBindings_ putWithId:@"uiColorHelper" withId:[[RAREUIColorHelper alloc] init]];
    (void) [RAREaScriptManager_globalBindings_ putWithId:@"uiBorderHelper" withId:[[RAREUIBorderHelper alloc] init]];
    if (RAREaScriptManager_nameMappings_ == nil) {
      [self initializeMappings];
    }
  }
  return self;
}

- (id)initWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)ctx
              withRARESPOTApplication:(RARESPOTApplication *)app
              withJavaxScriptBindings:(id<JavaxScriptBindings>)globals {
  return [self initRAREaScriptManagerWithRAREiPlatformAppContext:ctx withRARESPOTApplication:app withJavaxScriptBindings:globals];
}

- (id)initWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)app
          withJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
              withJavaxScriptBindings:(id<JavaxScriptBindings>)bindings
                               withId:(id)frame
                         withNSString:(NSString *)scriptName
                         withNSString:(NSString *)source {
  if (self = [super init]) {
    appContext_ = app;
    scriptEngine_ = engine;
    [self initializeCompiler];
    @try {
      theWindow_ = [self createWindowViewerWithRAREiPlatformAppContext:app withNSString:@"_top" withId:frame withRAREWindowViewer:nil withRAREiScriptHandler:self];
      scriptContext_ = [self createScriptContextWithJavaxScriptScriptEngine:engine];
      [((id<JavaxScriptScriptContext>) nil_chk(scriptContext_)) setBindingsWithJavaxScriptBindings:RAREaScriptManager_globalBindings_ withInt:JavaxScriptScriptContext_GLOBAL_SCOPE];
      if (bindings != nil) {
        [scriptContext_ setBindingsWithJavaxScriptBindings:bindings withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      }
      else {
        if ([((id<RAREiPlatformAppContext>) nil_chk(app)) isDynamicNameLookupEnabled]) {
          [self setupDynamicBindingsWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:scriptContext_];
        }
      }
      if (mainWindowBindings_ == nil) {
        mainWindowBindings_ = [scriptContext_ getBindingsWithInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      }
      RAREWidgetContext *oc = [self newWidgetContext];
      ((RAREWidgetContext *) nil_chk(oc))->scriptContext_ = scriptContext_;
      oc->scriptObject_ = theWindow_;
      oc->scriptName_ = scriptName;
      oc->scriptEngine_ = engine;
      [((RAREWindowViewer *) nil_chk(theWindow_)) setScriptingContextWithRAREWidgetContext:oc];
      [self setWindowWithJavaxScriptScriptContext:scriptContext_ withId:theWindow_];
      [scriptContext_ setAttributeWithNSString:@"_top" withId:theWindow_ withInt:JavaxScriptScriptContext_GLOBAL_SCOPE];
      self->scriptName_ = scriptName;
      selfObject_ = theWindow_;
      [self initializeEngineWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:scriptContext_];
      [self initializeEngineExWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:scriptContext_];
      if (scriptName != nil) {
        [((id<JavaxScriptScriptEngine>) nil_chk(scriptEngine_)) putWithNSString:[JavaxScriptScriptEngine FILENAME] withId:scriptName];
      }
      if ([RAREaScriptManager_preExecuteCode_ isKindOfClass:[NSString class]]) {
        RAREaScriptManager_preExecuteCode_ = [self compileWithRAREWidgetContext:oc withNSString:@"preExecute" withNSString:(NSString *) check_class_cast(RAREaScriptManager_preExecuteCode_, [NSString class])];
      }
      if ([RAREaScriptManager_postExecuteCode_ isKindOfClass:[NSString class]]) {
        RAREaScriptManager_postExecuteCode_ = [self compileWithRAREWidgetContext:oc withNSString:@"postExecuteCode" withNSString:(NSString *) check_class_cast(RAREaScriptManager_postExecuteCode_, [NSString class])];
      }
      [self setupScriptingShellWithJavaxScriptScriptEngine:engine];
      if (RAREaScriptManager__debugger_ != nil) {
        @try {
          [RAREaScriptManager__debugger_ scriptContextInitWithRAREiScriptHandler:self withId:engine withId:scriptContext_];
        }
        @catch (JavaLangThrowable *t) {
          [RAREPlatform ignoreExceptionWithNSString:@"debugger.scriptContextInit()" withJavaLangThrowable:t];
        }
      }
      if (source != nil) {
        if ([RAREaScriptManager isInlineScriptWithNSString:scriptName]) {
          [self saveSourceForDebuggingWithNSString:scriptName withNSString:source];
        }
        [self addLoadedScriptWithNSString:scriptName];
        (void) [self evaluateWithRAREWidgetContext:oc withNSString:source withRAREScriptingEvent:nil];
      }
    }
    @catch (JavaLangThrowable *e) {
      if ([e isKindOfClass:[JavaLangRuntimeException class]]) {
        @throw (JavaLangRuntimeException *) check_class_cast(e, [JavaLangRuntimeException class]);
      }
      else {
        @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
      }
    }
  }
  return self;
}

- (id)callFunctionWithRAREWidgetContext:(RAREWidgetContext *)context
                           withNSString:(NSString *)name
                      withNSObjectArray:(IOSObjectArray *)args {
  @try {
    id o;
    id<JavaxScriptScriptEngine> e = (id<JavaxScriptScriptEngine>) check_protocol_cast(((RAREWidgetContext *) nil_chk(context))->scriptEngine_, @protocol(JavaxScriptScriptEngine));
    id<JavaxScriptScriptContext> sc = (id<JavaxScriptScriptContext>) check_protocol_cast(context->scriptContext_, @protocol(JavaxScriptScriptContext));
    if (sc == nil) {
      sc = scriptContext_;
    }
    if ([(id) e conformsToProtocol: @protocol(JavaxScriptInvocable)]) {
      id<JavaxScriptInvocable> inv = (id<JavaxScriptInvocable>) check_protocol_cast(e, @protocol(JavaxScriptInvocable));
      o = [((id<JavaxScriptInvocable>) nil_chk(inv)) invokeFunctionWithNSString:name withNSObjectArray:args];
    }
    else {
      NSString *s;
      IOSObjectArray *a = nil;
      int len = (args == nil) ? 0 : (int) [args count];
      if (len == 0) {
        s = [self getFunctionCallWithNSString:name withNSStringArray:(IOSObjectArray *) check_class_cast(nil, [IOSObjectArray class])];
      }
      else {
        a = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[NSString class]]];
        for (int i = 0; i < len; i++) {
          (void) IOSObjectArray_Set(a, i, [NSString stringWithFormat:@"_rareP%d", i]);
          [((id<JavaxScriptScriptContext>) nil_chk(sc)) setAttributeWithNSString:IOSObjectArray_Get(a, i) withId:IOSObjectArray_Get(nil_chk(args), i) withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
        }
        s = [self getFunctionCallWithNSString:name withNSStringArray:a];
      }
      @try {
        o = [((id<JavaxScriptScriptEngine>) nil_chk(e)) evalWithNSString:s withJavaxScriptScriptContext:sc];
      }
      @finally {
        if ((len > 0) && (a != nil)) {
          for (int i = 0; i < len; i++) {
            (void) IOSObjectArray_Set(a, i, [NSString stringWithFormat:@"_rareP%d", i]);
            (void) [((id<JavaxScriptScriptContext>) nil_chk(sc)) removeAttributeWithNSString:IOSObjectArray_Get(a, i) withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
          }
        }
      }
    }
    return o;
  }
  @catch (JavaLangException *e) {
    if ([e isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast(e, [JavaLangRuntimeException class]);
    }
    else {
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
    }
  }
}

+ (void)clearGlobalConstants {
  if (RAREaScriptManager__constants_populated_) {
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([RAREEnvConstants getConstants])) keySet])) iterator];
    id<JavaxScriptBindings> gb = RAREaScriptManager_globalBindings_;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      (void) [((id<JavaxScriptBindings>) nil_chk(gb)) removeWithId:[it next]];
    }
  }
}

- (id)compileWithRAREWidgetContext:(RAREWidgetContext *)context
                      withNSString:(NSString *)name
                      withNSString:(NSString *)code {
  return [self compileWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>) check_protocol_cast(((RAREWidgetContext *) nil_chk(context))->scriptEngine_, @protocol(JavaxScriptScriptEngine)) withRAREWidgetContext:context withNSString:name withNSString:code];
}

- (id<RAREiScriptHandler_iScriptRunnable>)createRunnerWithRAREWidgetContext:(RAREWidgetContext *)context
                                                                     withId:(id)compiled
                                                     withRAREScriptingEvent:(RAREScriptingEvent *)e {
  return [self createRunnerWithRAREWidgetContext:context withId:compiled withBoolean:NO withRAREScriptingEvent:e];
}

- (id<RAREiScriptHandler_iScriptRunnable>)createRunnerWithRAREWidgetContext:(RAREWidgetContext *)context
                                                               withNSString:(NSString *)source
                                                     withRAREScriptingEvent:(RAREScriptingEvent *)e {
  return [[RAREaScriptManager_EvalRunner alloc] initWithRAREiScriptHandler:self withRAREWidgetContext:context withNSString:source withRAREScriptingEvent:e];
}

- (id<RAREiScriptHandler_iScriptRunnable>)createRunnerWithRAREWidgetContext:(RAREWidgetContext *)context
                                                               withNSString:(NSString *)code
                                                               withNSString:(NSString *)language
                                                     withRAREScriptingEvent:(RAREScriptingEvent *)e {
  return [self createRunnerWithRAREWidgetContext:context withNSString:code withNSString:language withBoolean:NO withRAREScriptingEvent:e];
}

- (RAREWidgetContext *)createScriptingContextWithId:(id)javaobj {
  RAREWidgetContext *oc = [self newWidgetContext];
  id engine = scriptEngine_;
  if ([javaobj conformsToProtocol: @protocol(RAREiWidget)]) {
    id<RAREiWidget> w = (id<RAREiWidget>) check_protocol_cast(javaobj, @protocol(RAREiWidget));
    id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(w)) getFormViewer];
    RAREWidgetContext *fc = nil;
    if ((fv != nil) && (fv != w) && ([fv getViewer] != w)) {
      fc = [fv getScriptingContext];
    }
    if ((fc != nil) && (fc->scriptEngine_ != nil)) {
      engine = fc->scriptEngine_;
      ((RAREWidgetContext *) nil_chk(oc))->scriptContext_ = fc->scriptContext_;
    }
  }
  ((RAREWidgetContext *) nil_chk(oc))->scriptEngine_ = engine;
  oc->scriptObject_ = javaobj;
  return oc;
}

- (void)dispose {
  if (RAREaScriptManager__debugger_ != nil) {
    @try {
      [RAREaScriptManager__debugger_ dispose];
    }
    @catch (JavaLangThrowable *ignore) {
    }
  }
  RAREaScriptManager__debugger_ = nil;
  if ([RAREPlatform isShuttingDown]) {
    if (scriptContext_ != nil) {
      id<JavaxScriptBindings> b;
      b = [scriptContext_ getBindingsWithInt:JavaxScriptScriptContext_GLOBAL_SCOPE];
      if (b != nil) {
        [b clear];
      }
      b = [scriptContext_ getBindingsWithInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      if (b != nil) {
        [b clear];
      }
      [((id<JavaxScriptScriptEngine>) nil_chk(scriptEngine_)) setContextWithJavaxScriptScriptContext:[[JavaxScriptSimpleScriptContext alloc] init]];
    }
  }
  else if (selfObject_ == theWindow_) {
    if (scriptContext_ != nil) {
      [self setWindowWithJavaxScriptScriptContext:scriptContext_ withId:nil];
      [scriptContext_ setBindingsWithJavaxScriptBindings:RAREaScriptManager_nullBindings_ withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      [scriptContext_ setBindingsWithJavaxScriptBindings:RAREaScriptManager_nullBindings_ withInt:JavaxScriptScriptContext_GLOBAL_SCOPE];
    }
  }
  scriptContext_ = nil;
  selfObject_ = nil;
  theWindow_ = nil;
  scriptEngine_ = nil;
}

- (id)evaluateWithRAREWidgetContext:(RAREWidgetContext *)context
                             withId:(id)compiled
             withRAREScriptingEvent:(RAREScriptingEvent *)e {
  id<RAREiScriptHandler_iScriptRunnable> r = [self createRunnerWithRAREWidgetContext:context withId:compiled withBoolean:NO withRAREScriptingEvent:e];
  if ([RAREPlatform isUIThread]) {
    [((id<RAREiScriptHandler_iScriptRunnable>) nil_chk(r)) run];
  }
  else {
    [self invokeAndWaitWithRAREiScriptHandler_iScriptRunnable:r];
  }
  return [((id<RAREiScriptHandler_iScriptRunnable>) nil_chk(r)) getResult];
}

- (id)evaluateWithRAREWidgetContext:(RAREWidgetContext *)context
                       withNSString:(NSString *)code
             withRAREScriptingEvent:(RAREScriptingEvent *)e {
  id<RAREiScriptHandler_iScriptRunnable> r = [self createRunnerWithRAREWidgetContext:context withId:code withBoolean:NO withRAREScriptingEvent:e];
  [self runTaskWithRAREiScriptHandler_iScriptRunnable:r];
  return [((id<RAREiScriptHandler_iScriptRunnable>) nil_chk(r)) getResult];
}

- (id)evaluateWithRAREWidgetContext:(RAREWidgetContext *)context
                       withNSString:(NSString *)code
                       withNSString:(NSString *)language
             withRAREScriptingEvent:(RAREScriptingEvent *)e {
  id<RAREiScriptHandler_iScriptRunnable> r = [self createRunnerWithRAREWidgetContext:context withNSString:code withNSString:language withBoolean:NO withRAREScriptingEvent:e];
  [self runTaskWithRAREiScriptHandler_iScriptRunnable:r];
  return [((id<RAREiScriptHandler_iScriptRunnable>) nil_chk(r)) getResult];
}

- (void)executeWithRAREWidgetContext:(RAREWidgetContext *)context
                              withId:(id)compiled
              withRAREScriptingEvent:(RAREScriptingEvent *)e {
  [self submitTaskWithRAREiScriptHandler_iScriptRunnable:[self createRunnerWithRAREWidgetContext:context withId:compiled withBoolean:NO withRAREScriptingEvent:e]];
}

- (void)executeWithRAREWidgetContext:(RAREWidgetContext *)context
                        withNSString:(NSString *)code
              withRAREScriptingEvent:(RAREScriptingEvent *)e {
  [self submitTaskWithRAREiScriptHandler_iScriptRunnable:[self createRunnerWithRAREWidgetContext:context withId:code withBoolean:NO withRAREScriptingEvent:e]];
}

- (void)executeWithRAREWidgetContext:(RAREWidgetContext *)context
                        withNSString:(NSString *)code
                        withNSString:(NSString *)language
              withRAREScriptingEvent:(RAREScriptingEvent *)e {
  [self submitTaskWithRAREiScriptHandler_iScriptRunnable:[self createRunnerWithRAREWidgetContext:context withNSString:code withNSString:language withBoolean:NO withRAREScriptingEvent:e]];
}

- (void)loadScriptWithNSString:(NSString *)name
                  withNSString:(NSString *)code
                  withNSString:(NSString *)language {
  id<JavaxScriptScriptEngine> e = (language == nil) ? scriptEngine_ : [self getEngineWithNSString:language withBoolean:YES withJavaxScriptScriptContext:scriptContext_];
  RAREaScriptManager_CompiledScriptEx *script = [[RAREaScriptManager_CompiledScriptEx alloc] initWithJavaxScriptScriptEngine:e withJavaxScriptScriptContext:scriptContext_ withNSString:name withNSString:code];
  @try {
    (void) [script eval];
  }
  @catch (JavaxScriptScriptException *ex) {
    @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:ex];
  }
}

+ (void)registerEngineFactoriesWithNSString:(NSString *)stringList {
  if ((stringList != nil) && ([stringList sequenceLength] > 0)) {
    id<JavaUtilList> l = [RAREUTCharScanner getTokensWithNSString:stringList withChar:',' withBoolean:YES];
    for (NSString * __strong e in nil_chk(l)) {
      [RAREaScriptManager registerEngineFactoryWithNSString:e];
    }
  }
}

+ (void)registerEngineFactoryWithNSString:(NSString *)className_ {
  @try {
    id<JavaxScriptScriptEngineFactory> f = (id<JavaxScriptScriptEngineFactory>) check_protocol_cast([((IOSClass *) nil_chk([RAREPlatform loadClassWithNSString:className_])) newInstance], @protocol(JavaxScriptScriptEngineFactory));
    [((JavaxScriptScriptEngineManager *) nil_chk(RAREaScriptManager_engineManager_)) registerEngineNameWithNSString:[((id<JavaxScriptScriptEngineFactory>) nil_chk(f)) getEngineName] withJavaxScriptScriptEngineFactory:f];
    id<JavaUtilList> l = [f getNames];
    for (NSString * __strong s in nil_chk(l)) {
      [RAREaScriptManager_engineManager_ registerEngineNameWithNSString:s withJavaxScriptScriptEngineFactory:f];
    }
    l = [f getExtensions];
    for (NSString * __strong s in nil_chk(l)) {
      [RAREaScriptManager_engineManager_ registerEngineExtensionWithNSString:s withJavaxScriptScriptEngineFactory:f];
    }
    l = [f getMimeTypes];
    for (NSString * __strong s in nil_chk(l)) {
      [RAREaScriptManager_engineManager_ registerEngineMimeTypeWithNSString:s withJavaxScriptScriptEngineFactory:f];
    }
  }
  @catch (JavaLangException *ex) {
    if ([RAREPlatform isDebugEnabled]) {
      [((JavaLangException *) nil_chk(ex)) printStackTrace];
    }
  }
}

- (void)restoreSaveWindowWithJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)sc
                                withRAREWidgetContext:(RAREWidgetContext *)wc {
  if (((RAREWidgetContext *) nil_chk(wc))->savedWindow_ != nil) {
    [((id<JavaxScriptScriptContext>) nil_chk(sc)) setAttributeWithNSString:@"window" withId:wc->savedWindow_ withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
    [sc setAttributeWithNSString:@"rwindow" withId:wc->savedWindow_ withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
  }
}

- (void)runTaskWithRAREiScriptHandler_iScriptRunnable:(id<RAREiScriptHandler_iScriptRunnable>)r {
  if ([RAREPlatform isUIThread]) {
    [((id<RAREiScriptHandler_iScriptRunnable>) nil_chk(r)) run];
  }
  else {
    [self invokeAndWaitWithRAREiScriptHandler_iScriptRunnable:r];
  }
}

- (void)submitTaskWithRAREiScriptHandler_iScriptRunnable:(id<RAREiScriptHandler_iScriptRunnable>)r {
  [RAREPlatform invokeLaterWithJavaLangRunnable:r];
}

- (void)setGlobalVariableWithNSString:(NSString *)name
                               withId:(id)value {
  if (![@"self" isEqual:name] && ![@"window" isEqual:name]) {
    (void) [((id<JavaxScriptBindings>) nil_chk(RAREaScriptManager_globalBindings_)) putWithId:name withId:value];
  }
}

- (RAREWidgetContext *)setScriptingContextWithRAREiViewer:(id<RAREiViewer>)viewer
                                             withNSString:(NSString *)type
                                             withNSString:(NSString *)name
                                             withNSString:(NSString *)source
                                              withBoolean:(BOOL)shared {
  if (name == nil) {
    if (source == nil) {
      name = scriptName_;
    }
    else {
      name = [((id<RAREiViewer>) nil_chk(viewer)) getName];
      if (name == nil) {
        name = @"eval";
      }
    }
  }
  id<JavaxScriptScriptContext> ctx;
  id<JavaxScriptScriptEngine> engine = [self getEngineWithNSString:type withBoolean:YES withJavaxScriptScriptContext:nil];
  if (!shared) {
    ctx = [self createScriptContextWithJavaxScriptScriptEngine:engine];
  }
  else {
    ctx = scriptContext_;
  }
  RAREWidgetContext *oc = [self newWidgetContext];
  [((id<RAREiViewer>) nil_chk(viewer)) setScriptingContextWithRAREWidgetContext:oc];
  if (!shared) {
    if ([((id<RAREiPlatformAppContext>) nil_chk([viewer getAppContext])) isDynamicNameLookupEnabled]) {
      [self setupDynamicBindingsWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:ctx];
    }
    else {
      [((id<JavaxScriptScriptContext>) nil_chk(ctx)) setBindingsWithJavaxScriptBindings:[((id<JavaxScriptScriptEngine>) nil_chk(engine)) createBindings] withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
    }
    [((id<JavaxScriptScriptContext>) nil_chk(ctx)) setBindingsWithJavaxScriptBindings:[((id<JavaxScriptScriptContext>) nil_chk(scriptContext_)) getBindingsWithInt:JavaxScriptScriptContext_GLOBAL_SCOPE] withInt:JavaxScriptScriptContext_GLOBAL_SCOPE];
    [((id<JavaxScriptBindings>) nil_chk([ctx getBindingsWithInt:JavaxScriptScriptContext_ENGINE_SCOPE])) putAllWithJavaUtilMap:[scriptContext_ getBindingsWithInt:JavaxScriptScriptContext_ENGINE_SCOPE]];
  }
  ((RAREWidgetContext *) nil_chk(oc))->scriptEngine_ = engine;
  oc->scriptObject_ = viewer;
  oc->scriptName_ = name;
  oc->scriptContext_ = ctx;
  if ((RAREaScriptManager__debugger_ != nil) && (source != nil)) {
    [self configureDebuggingInfoWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:ctx withNSString:name withNSString:source];
  }
  if (source != nil) {
    @try {
      JavaUtilEventObject *e = [[JavaUtilEventObject alloc] initWithId:viewer];
      RAREScriptingEvent *evt = [[RAREScriptingEvent alloc] initWithRAREiScriptHandler:self withNSString:[RAREiConstants ATTRIBUTE_FUNCTION_EVAL] withJavaUtilEventObject:e withId:viewer withId:nil];
      (void) [self evaluateWithRAREWidgetContext:oc withNSString:source withRAREScriptingEvent:evt];
    }
    @catch (JavaLangThrowable *e) {
      if ([e isKindOfClass:[JavaLangRuntimeException class]]) {
        @throw (JavaLangRuntimeException *) check_class_cast(e, [JavaLangRuntimeException class]);
      }
      else {
        @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
      }
    }
  }
  return oc;
}

- (void)setScriptingVariableWithRAREWidgetContext:(RAREWidgetContext *)context
                                     withNSString:(NSString *)name
                                           withId:(id)scriptobj {
  if (![@"self" isEqual:name] && ![@"window" isEqual:name]) {
    [((id<JavaxScriptScriptContext>) nil_chk([self getScriptContextWithRAREWidgetContext:context])) setAttributeWithNSString:name withId:scriptobj withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
  }
}

- (id<RAREiPlatformAppContext>)getAppContext {
  return appContext_;
}

- (RAREWindowViewer *)getCurrentWindowViewer {
  RAREWindowViewer *w = nil;
  if (scriptContext_ != nil) {
    w = (RAREWindowViewer *) check_class_cast([scriptContext_ getAttributeWithNSString:@"window" withInt:JavaxScriptScriptContext_ENGINE_SCOPE], [RAREWindowViewer class]);
    if ([((RAREWindowViewer *) nil_chk(w)) isDisposed]) {
      w = nil;
    }
  }
  return (w == nil) ? theWindow_ : w;
}

- (id<JavaxScriptScriptEngine>)getEngineWithNSString:(NSString *)type
                                         withBoolean:(BOOL)reuse
                        withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context {
  @synchronized (RAREaScriptManager_loadedEngines_) {
    NSString *language = type;
    id<JavaxScriptScriptEngine> engine = nil;
    NSString *className_ = nil;
    if (language == nil) {
      language = [((id<RAREiPlatformAppContext>) nil_chk(appContext_)) getDefaultScrptingLanguage];
      type = language;
    }
    else {
      int n = [language indexOf:';'];
      if (n != -1) {
        language = [language substring:0 endIndex:n];
      }
      language = [((NSString *) nil_chk(language)) trim];
    }
    int n = [((NSString *) nil_chk(language)) lastIndexOf:'.'];
    if (n != -1) {
      className_ = language;
    }
    NSString *lang = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(RAREaScriptManager_nameMappings_)) getWithId:language];
    if (lang != nil) {
      language = lang;
    }
    if (reuse) {
      if (lang != nil) {
        engine = [((JavaUtilHashMap *) nil_chk(RAREaScriptManager_loadedEngines_)) getWithId:lang];
        if (engine != nil) {
          return engine;
        }
        language = lang;
      }
    }
    if ([@"js" isEqual:language] || [@"javascript" equalsIgnoreCase:language] || [@"ecmascript" equalsIgnoreCase:language]) {
      className_ = [self spiClassNameForJavascripEngineFactory];
    }
    if (className_ != nil) {
      id<JavaUtilList> fs = [((JavaxScriptScriptEngineManager *) nil_chk(RAREaScriptManager_engineManager_)) getEngineFactories];
      for (id<JavaxScriptScriptEngineFactory> __strong f in nil_chk(fs)) {
        if ([((NSString *) nil_chk([[((id<JavaxScriptScriptEngineFactory>) nil_chk(f)) getClass] getName])) isEqual:className_]) {
          engine = [f getScriptEngine];
          break;
        }
      }
    }
    if (engine == nil) {
      engine = [((JavaxScriptScriptEngineManager *) nil_chk(RAREaScriptManager_engineManager_)) getEngineByMimeTypeWithNSString:type];
      if (engine == nil) {
        engine = [RAREaScriptManager_engineManager_ getEngineByNameWithNSString:language];
      }
      if (engine == nil) {
        engine = [RAREaScriptManager_engineManager_ getEngineByExtensionWithNSString:language];
      }
    }
    if (engine == nil) {
      @throw [[RAREApplicationException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported scripting language:%@", type]];
    }
    language = [((id<JavaxScriptScriptEngineFactory>) nil_chk([((id<JavaxScriptScriptEngine>) nil_chk(engine)) getFactory])) getLanguageName];
    (void) [((JavaUtilHashMap *) nil_chk(RAREaScriptManager_loadedEngines_)) putWithId:language withId:engine];
    if (className_ != nil) {
      (void) [RAREaScriptManager_loadedEngines_ putWithId:className_ withId:engine];
    }
    [self initializeEngineWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:context];
    if (!RAREaScriptManager_debuggerLoaded_) {
      [self loadDebugger];
    }
    if (RAREaScriptManager__debugger_ != nil) {
      [RAREaScriptManager__debugger_ scriptEngineInitWithRAREiScriptHandler:self withId:engine];
    }
    return engine;
  }
}

- (RAREErrorInformation *)getErrorInformationWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)app
                                                                  withId:(id)error {
  RAREErrorInformation *ei = [self getNativeScriptErrorInformationWithId:error];
  if (ei == nil) {
    if ([error isKindOfClass:[JavaLangThrowable class]]) {
      ei = [[RAREErrorInformation alloc] initWithJavaLangThrowable:(JavaLangThrowable *) check_class_cast(error, [JavaLangThrowable class])];
    }
    if (ei == nil) {
      ei = [[RAREErrorInformation alloc] initWithId:error withNSString:nil withNSString:(error == nil) ? @"" : [error description]];
    }
  }
  return ei;
}

- (id<RAREiFormViewer>)getFormViewer {
  if (scriptContext_ != nil) {
    return (id<RAREiFormViewer>) check_protocol_cast([scriptContext_ getAttributeWithNSString:@"form" withInt:JavaxScriptScriptContext_ENGINE_SCOPE], @protocol(RAREiFormViewer));
  }
  return nil;
}

- (NSString *)getFunctionCallWithNSString:(NSString *)function
                        withNSStringArray:(IOSObjectArray *)args {
  if ((args == nil) || ((int) [args count] == 0)) {
    return [NSString stringWithFormat:@"%@()", function];
  }
  NSString *ret = function;
  ret = [NSString stringWithFormat:@"%@(", ret];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(args)) count]; i++) {
    ret = [NSString stringWithFormat:@"%@%@", ret, IOSObjectArray_Get(args, i)];
    if (i == (int) [args count] - 1) {
      ret = [NSString stringWithFormat:@"%@)", ret];
    }
    else {
      ret = [NSString stringWithFormat:@"%@,", ret];
    }
  }
  return ret;
}

- (id<JavaxScriptBindings>)getGlobalBindings {
  return RAREaScriptManager_globalBindings_;
}

+ (id<JavaxScriptScriptEngine>)getJavaScriptEngine {
  return [((JavaxScriptScriptEngineManager *) nil_chk(RAREaScriptManager_engineManager_)) getEngineByExtensionWithNSString:@"js"];
}

- (NSString *)getMethodCallWithNSString:(NSString *)obj
                           withNSString:(NSString *)method
                      withNSStringArray:(IOSObjectArray *)args {
  return [((id<JavaxScriptScriptEngineFactory>) nil_chk([((id<JavaxScriptScriptEngine>) nil_chk(scriptEngine_)) getFactory])) getMethodCallSyntaxWithNSString:obj withNSString:method withNSStringArray:args];
}

+ (JavaxScriptScriptEngineManager *)getScriptEngineManager {
  return RAREaScriptManager_engineManager_;
}

- (id)getScriptingContext {
  return scriptContext_;
}

- (id<JavaxScriptScriptEngine>)getScriptingEngine {
  return scriptEngine_;
}

- (NSString *)getScriptingName {
  return executingScriptName_;
}

- (id)getScriptingVariableWithRAREWidgetContext:(RAREWidgetContext *)context
                                   withNSString:(NSString *)name {
  return [((id<JavaxScriptScriptContext>) nil_chk([self getScriptContextWithRAREWidgetContext:context])) getAttributeWithNSString:name];
}

- (id<RAREiWidget>)getWidget {
  if (scriptContext_ != nil) {
    return (id<RAREiWidget>) check_protocol_cast([scriptContext_ getAttributeWithNSString:@"widget" withInt:JavaxScriptScriptContext_ENGINE_SCOPE], @protocol(RAREiWidget));
  }
  return nil;
}

- (RAREaWindowViewer *)getWindowViewer {
  return theWindow_;
}

+ (BOOL)isInlineScriptWithNSString:(NSString *)name {
  if (name == nil) {
    return NO;
  }
  int n = [((NSString *) nil_chk(name)) indexOf:':'];
  if (n == -1) {
    return YES;
  }
  return ![((JavaUtilHashSet *) nil_chk(RAREaScriptManager_protocols_)) containsWithId:[name substring:0 endIndex:n]];
}

+ (BOOL)isRhinoInitialized {
  return RAREaScriptManager__rhinoInitialized_;
}

- (id<JavaxScriptScriptContext>)getScriptContextWithRAREWidgetContext:(RAREWidgetContext *)context {
  if ((context != nil) && (context->scriptContext_ != nil)) {
    return (id<JavaxScriptScriptContext>) check_protocol_cast(context->scriptContext_, @protocol(JavaxScriptScriptContext));
  }
  return scriptContext_;
}

- (id)InvokeNativeScriptFunctionObjectWithId:(id)function
                 withJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
                withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context
                                      withId:(id)scriptObject {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addLoadedScriptWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)compileWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)e
                   withRAREWidgetContext:(RAREWidgetContext *)context
                            withNSString:(NSString *)name
                            withNSString:(NSString *)code {
  id<JavaxScriptScriptContext> sc = (id<JavaxScriptScriptContext>) check_protocol_cast(((RAREWidgetContext *) nil_chk(context))->scriptContext_, @protocol(JavaxScriptScriptContext));
  if (sc == nil) {
    sc = scriptContext_;
  }
  if ([((NSString *) nil_chk(code)) hasPrefix:@"class:"]) {
    if ((context != nil) && ([context->scriptObject_ isKindOfClass:[RAREaWidget class]])) {
      code = [((RAREaWidget *) check_class_cast(context->scriptObject_, [RAREaWidget class])) expandStringWithNSString:code];
    }
    return [[RAREaScriptManager_EventHandlerInterfaceScript alloc] initWithJavaxScriptScriptEngine:e withJavaxScriptScriptContext:sc withRAREEventHandlerInterface:[[RAREEventHandlerInterface alloc] initWithNSString:code]];
  }
  if (([(id) e conformsToProtocol: @protocol(JavaxScriptCompilable)]) && ![RAREPlatform isDebugEnabled]) {
    id savedName = [((id<JavaxScriptScriptContext>) nil_chk(sc)) getAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
    if (name != nil) {
      [sc setAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withId:name withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
    }
    else if ([savedName isKindOfClass:[NSString class]]) {
      name = (NSString *) check_class_cast(savedName, [NSString class]);
    }
    @try {
      return [[RAREaScriptManager_CompiledScriptEx alloc] initWithJavaxScriptScriptEngine:e withJavaxScriptScriptContext:sc withNSString:name withJavaxScriptCompiledScript:[((id<JavaxScriptCompilable>) check_protocol_cast(e, @protocol(JavaxScriptCompilable))) compileWithNSString:code]];
    }
    @catch (JavaxScriptScriptException *ex) {
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:ex];
    }
    @finally {
      [sc setAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withId:savedName withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
    }
  }
  if ([RAREPlatform isDebuggingEnabled]) {
    if (name == nil) {
      name = [((id<RAREiWidget>) nil_chk([context getWidget])) getName];
    }
    int n = [((NSString *) nil_chk(name)) indexOf:':'];
    if ((n == -1) || ![((JavaUtilHashSet *) nil_chk(RAREaScriptManager_protocols_)) containsWithId:[name substring:0 endIndex:n]]) {
      name = [NSString stringWithFormat:@"%@__%d", name, [JavaLangSystem identityHashCodeWithId:code]];
      [self saveSourceForDebuggingWithNSString:name withNSString:code];
    }
  }
  return [[RAREaScriptManager_CompiledScriptEx alloc] initWithJavaxScriptScriptEngine:e withJavaxScriptScriptContext:sc withNSString:name withNSString:code];
}

- (void)configureDebuggingInfoWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
                             withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)ctx
                                             withNSString:(NSString *)name
                                             withNSString:(NSString *)source {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<RAREiScriptHandler_iScriptRunnable>)createRunnerWithRAREWidgetContext:(RAREWidgetContext *)context
                                                                     withId:(id)code
                                                                withBoolean:(BOOL)string
                                                     withRAREScriptingEvent:(RAREScriptingEvent *)e {
  id<JavaxScriptScriptEngine> se = (id<JavaxScriptScriptEngine>) check_protocol_cast(((RAREWidgetContext *) nil_chk(context))->scriptEngine_, @protocol(JavaxScriptScriptEngine));
  id<JavaxScriptScriptContext> sc = (id<JavaxScriptScriptContext>) check_protocol_cast(context->scriptContext_, @protocol(JavaxScriptScriptContext));
  if (sc == nil) {
    sc = scriptContext_;
  }
  if ([code conformsToProtocol: @protocol(JavaLangRunnable)]) {
    code = [[RAREaScriptManager_RunnableScript alloc] initWithJavaxScriptScriptEngine:se withJavaxScriptScriptContext:sc withJavaLangRunnable:(id<JavaLangRunnable>) check_protocol_cast(code, @protocol(JavaLangRunnable))];
  }
  else if ([code isKindOfClass:[RAREEventHandlerInterface class]]) {
    code = [[RAREaScriptManager_EventHandlerInterfaceScript alloc] initWithJavaxScriptScriptEngine:se withJavaxScriptScriptContext:sc withRAREEventHandlerInterface:(RAREEventHandlerInterface *) check_class_cast(code, [RAREEventHandlerInterface class])];
  }
  else if ([self isNativeScriptFunctionObjectWithId:code]) {
    code = [[RAREaScriptManager_JSFunctionScript alloc] initWithJavaxScriptScriptEngine:se withJavaxScriptScriptContext:sc withId:code];
  }
  else if ([code isKindOfClass:[RAREMultiScript class]]) {
    code = [[RAREaScriptManager_CompiledMultiScript alloc] initWithJavaxScriptScriptEngine:se withJavaxScriptScriptContext:sc withRAREMultiScript:(RAREMultiScript *) check_class_cast(code, [RAREMultiScript class])];
  }
  else if ([code isKindOfClass:[NSString class]]) {
    code = [self compileWithRAREWidgetContext:context withNSString:nil withNSString:(NSString *) check_class_cast(code, [NSString class])];
  }
  return [[RAREaScriptManager_EvalRunner alloc] initWithRAREiScriptHandler:self withRAREWidgetContext:context withId:code withBoolean:NO withRAREScriptingEvent:e];
}

- (id<RAREiScriptHandler_iScriptRunnable>)createRunnerWithRAREWidgetContext:(RAREWidgetContext *)context
                                                               withNSString:(NSString *)source
                                                               withNSString:(NSString *)language
                                                                withBoolean:(BOOL)string
                                                     withRAREScriptingEvent:(RAREScriptingEvent *)e {
  id<JavaxScriptScriptEngine> se = [self getEngineWithNSString:language withBoolean:YES withJavaxScriptScriptContext:scriptContext_];
  id<JavaxScriptScriptContext> sc = (id<JavaxScriptScriptContext>) check_protocol_cast(((RAREWidgetContext *) nil_chk(context))->scriptContext_, @protocol(JavaxScriptScriptContext));
  if ([((NSString *) nil_chk(language)) equalsIgnoreCase:@"coffee"] || [language equalsIgnoreCase:@"coffeescript"]) {
    NSString *var = [NSString stringWithFormat:@"_coffeeSrc_%lld", [JavaLangSystem currentTimeMillis]];
    [((id<JavaxScriptScriptEngine>) nil_chk(se)) putWithNSString:var withId:source];
    source = [NSString stringWithFormat:@"CoffeeScript.compile(%@);%@=null", var, var];
  }
  if (sc == nil) {
    context->scriptContext_ = scriptContext_;
  }
  NSString *type = (e == nil) ? @"unknownEvent" : [e getType];
  id compiled = [self compileWithJavaxScriptScriptEngine:se withRAREWidgetContext:context withNSString:[NSString stringWithFormat:@"%@_%@", [((id<RAREiWidget>) nil_chk([context getWidget])) getName], type] withNSString:source];
  return [[RAREaScriptManager_EvalRunner alloc] initWithRAREiScriptHandler:self withRAREWidgetContext:context withId:compiled withBoolean:NO withRAREScriptingEvent:e];
}

- (id<JavaxScriptScriptContext>)createScriptContextWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)e {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (RAREWindowViewer *)createWindowViewerWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)ctx
                                                       withNSString:(NSString *)name
                                                             withId:(id)win
                                               withRAREWindowViewer:(RAREWindowViewer *)parent
                                             withRAREiScriptHandler:(id<RAREiScriptHandler>)sh {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)handleScriptTracingWithNSString:(NSString *)source {
}

- (void)initializeCompiler {
  if (([(id) scriptEngine_ conformsToProtocol: @protocol(JavaxScriptCompilable)]) && ![RAREPlatform isDebugEnabled]) {
    scriptCompiler_ = (id<JavaxScriptCompilable>) check_protocol_cast(scriptEngine_, @protocol(JavaxScriptCompilable));
  }
}

- (void)initializeEngineExWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
                         withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context {
  NSString *fileName = (NSString *) check_class_cast([((id<JavaxScriptScriptContext>) nil_chk(context)) getAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withInt:JavaxScriptScriptContext_ENGINE_SCOPE], [NSString class]);
  @try {
    NSString *source = [NSString stringWithFormat:@"%@.init", [((NSString *) nil_chk([((id<JavaxScriptScriptEngineFactory>) nil_chk([((id<JavaxScriptScriptEngine>) nil_chk(engine)) getFactory])) getLanguageName])) lowercaseString]];
    NSString *code = [self getInitScriptWithNSString:source];
    if (code != nil) {
      [context setAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withId:source withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      (void) [engine evalWithNSString:code withJavaxScriptScriptContext:context];
    }
  }
  @catch (JavaLangThrowable *e) {
    [context setAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withId:fileName withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
    [RAREPlatform debugLogWithNSString:[((JavaLangThrowable *) nil_chk(e)) description]];
  }
}

- (NSString *)getInitScriptWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)initializeEngineWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
                       withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initializeMappings {
  RAREaScriptManager_nameMappings_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
  id<JavaUtilList> names;
  id<JavaUtilList> list = [((JavaxScriptScriptEngineManager *) nil_chk(RAREaScriptManager_engineManager_)) getEngineFactories];
  id<JavaxScriptScriptEngineFactory> f;
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  int len2;
  int n;
  NSString *language;
  for (int i = 0; i < len; i++) {
    f = [list getWithInt:i];
    language = [((id<JavaxScriptScriptEngineFactory>) nil_chk(f)) getLanguageName];
    names = [f getExtensions];
    len2 = [((id<JavaUtilList>) nil_chk(names)) size];
    for (n = 0; n < len2; n++) {
      (void) [RAREaScriptManager_nameMappings_ putWithId:[names getWithInt:n] withId:language];
    }
    names = [f getMimeTypes];
    len2 = [((id<JavaUtilList>) nil_chk(names)) size];
    for (n = 0; n < len2; n++) {
      (void) [RAREaScriptManager_nameMappings_ putWithId:[names getWithInt:n] withId:language];
    }
  }
  (void) [RAREaScriptManager_nameMappings_ putWithId:@"coffee" withId:@"javascript"];
  (void) [RAREaScriptManager_nameMappings_ putWithId:@"coffeescript" withId:@"javascript"];
}

- (void)invokeAndWaitWithRAREiScriptHandler_iScriptRunnable:(id<RAREiScriptHandler_iScriptRunnable>)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)loadDebugger {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (RAREWidgetContext *)newWidgetContext {
  return [[RAREWidgetContext alloc] init];
}

- (void)saveCurrentWindowWithJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)sc
                                withRAREWidgetContext:(RAREWidgetContext *)wc {
  ((RAREWidgetContext *) nil_chk(wc))->savedWindow_ = [((id<JavaxScriptScriptContext>) nil_chk(sc)) getAttributeWithNSString:@"window" withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
}

- (void)saveSourceForDebuggingWithNSString:(NSString *)scriptName
                              withNSString:(NSString *)source {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setupDebugger {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setupDynamicBindingsWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)e
                           withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)sc {
  [((id<JavaxScriptScriptContext>) nil_chk(sc)) setBindingsWithJavaxScriptBindings:[[RAREDynamicBindings alloc] initWithJavaxScriptBindings:[((id<JavaxScriptScriptEngine>) nil_chk(e)) getBindingsWithInt:JavaxScriptScriptContext_ENGINE_SCOPE]] withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
}

- (void)setupScriptingShellWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)spiClassNameForJavascripEngineFactory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setWindowWithJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)sc
                                       withId:(id)window {
  [((id<JavaxScriptScriptContext>) nil_chk(scriptContext_)) setAttributeWithNSString:@"window" withId:window withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
  [scriptContext_ setAttributeWithNSString:@"rwindow" withId:window withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
}

- (RAREErrorInformation *)getNativeScriptErrorInformationWithId:(id)error {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isNativeScriptFunctionObjectWithId:(id)function {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)createVariableValueWithRAREWidgetContext:(RAREWidgetContext *)param0
                                        withId:(id)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RAREiScriptHandler>)getRootHandlerWithRAREiPlatformAppContext:(id<RAREiPlatformAppContext>)param0
                                                    withRAREiWindow:(id<RAREiWindow>)param1
                                                       withNSString:(NSString *)param2
                                                       withNSString:(NSString *)param3
                                                       withNSString:(NSString *)param4
                                                        withBoolean:(BOOL)param5 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)unwrapWithId:(id)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (void)initialize {
  if (self == [RAREaScriptManager class]) {
    RAREaScriptManager_loadedEngines_ = [[JavaUtilHashMap alloc] init];
    RAREaScriptManager_nullBindings_ = [[JavaxScriptSimpleBindings alloc] init];
    RAREaScriptManager_protocols_ = [[JavaUtilHashSet alloc] init];
    {
      [RAREaScriptManager_protocols_ addWithId:@"http"];
      [RAREaScriptManager_protocols_ addWithId:@"lib"];
      [RAREaScriptManager_protocols_ addWithId:@"file"];
      [RAREaScriptManager_protocols_ addWithId:@"jar"];
      [RAREaScriptManager_protocols_ addWithId:@"https"];
    }
  }
}

- (void)copyAllFieldsTo:(RAREaScriptManager *)other {
  [super copyAllFieldsTo:other];
  other->appContext_ = appContext_;
  other->executingScriptName_ = executingScriptName_;
  other->mainWindowBindings_ = mainWindowBindings_;
  other->scriptCompiler_ = scriptCompiler_;
  other->scriptContext_ = scriptContext_;
  other->scriptEngine_ = scriptEngine_;
  other->scriptName_ = scriptName_;
  other->selfObject_ = selfObject_;
  other->theWindow_ = theWindow_;
  other->tracingEnabled_ = tracingEnabled_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "callFunctionWithRAREWidgetContext:withNSString:withNSObjectArray:", NULL, "LNSObject", 0x1, NULL },
    { "compileWithRAREWidgetContext:withNSString:withNSString:", NULL, "LNSObject", 0x1, NULL },
    { "createRunnerWithRAREWidgetContext:withId:withRAREScriptingEvent:", NULL, "LRAREiScriptHandler_iScriptRunnable", 0x1, NULL },
    { "createRunnerWithRAREWidgetContext:withNSString:withRAREScriptingEvent:", NULL, "LRAREiScriptHandler_iScriptRunnable", 0x1, NULL },
    { "createRunnerWithRAREWidgetContext:withNSString:withNSString:withRAREScriptingEvent:", NULL, "LRAREiScriptHandler_iScriptRunnable", 0x1, NULL },
    { "createScriptingContextWithId:", NULL, "LRAREWidgetContext", 0x1, NULL },
    { "evaluateWithRAREWidgetContext:withId:withRAREScriptingEvent:", NULL, "LNSObject", 0x1, NULL },
    { "evaluateWithRAREWidgetContext:withNSString:withRAREScriptingEvent:", NULL, "LNSObject", 0x1, NULL },
    { "evaluateWithRAREWidgetContext:withNSString:withNSString:withRAREScriptingEvent:", NULL, "LNSObject", 0x1, NULL },
    { "setScriptingContextWithRAREiViewer:withNSString:withNSString:withNSString:withBoolean:", NULL, "LRAREWidgetContext", 0x1, NULL },
    { "getAppContext", NULL, "LRAREiPlatformAppContext", 0x1, NULL },
    { "getCurrentWindowViewer", NULL, "LRAREWindowViewer", 0x1, NULL },
    { "getEngineWithNSString:withBoolean:withJavaxScriptScriptContext:", NULL, "LJavaxScriptScriptEngine", 0x1, NULL },
    { "getErrorInformationWithRAREiPlatformAppContext:withId:", NULL, "LRAREErrorInformation", 0x1, NULL },
    { "getFormViewer", NULL, "LRAREiFormViewer", 0x1, NULL },
    { "getFunctionCallWithNSString:withNSStringArray:", NULL, "LNSString", 0x1, NULL },
    { "getGlobalBindings", NULL, "LJavaxScriptBindings", 0x1, NULL },
    { "getJavaScriptEngine", NULL, "LJavaxScriptScriptEngine", 0x9, NULL },
    { "getMethodCallWithNSString:withNSString:withNSStringArray:", NULL, "LNSString", 0x1, NULL },
    { "getScriptEngineManager", NULL, "LJavaxScriptScriptEngineManager", 0x9, NULL },
    { "getScriptingContext", NULL, "LNSObject", 0x1, NULL },
    { "getScriptingEngine", NULL, "LJavaxScriptScriptEngine", 0x1, NULL },
    { "getScriptingName", NULL, "LNSString", 0x1, NULL },
    { "getScriptingVariableWithRAREWidgetContext:withNSString:", NULL, "LNSObject", 0x1, NULL },
    { "getWidget", NULL, "LRAREiWidget", 0x1, NULL },
    { "getWindowViewer", NULL, "LRAREaWindowViewer", 0x1, NULL },
    { "isInlineScriptWithNSString:", NULL, "Z", 0x9, NULL },
    { "isRhinoInitialized", NULL, "Z", 0x9, NULL },
    { "getScriptContextWithRAREWidgetContext:", NULL, "LJavaxScriptScriptContext", 0x0, NULL },
    { "InvokeNativeScriptFunctionObjectWithId:withJavaxScriptScriptEngine:withJavaxScriptScriptContext:withId:", NULL, "LNSObject", 0x404, NULL },
    { "addLoadedScriptWithNSString:", NULL, "V", 0x404, NULL },
    { "compileWithJavaxScriptScriptEngine:withRAREWidgetContext:withNSString:withNSString:", NULL, "LNSObject", 0x4, NULL },
    { "configureDebuggingInfoWithJavaxScriptScriptEngine:withJavaxScriptScriptContext:withNSString:withNSString:", NULL, "V", 0x404, NULL },
    { "createRunnerWithRAREWidgetContext:withId:withBoolean:withRAREScriptingEvent:", NULL, "LRAREiScriptHandler_iScriptRunnable", 0x4, NULL },
    { "createRunnerWithRAREWidgetContext:withNSString:withNSString:withBoolean:withRAREScriptingEvent:", NULL, "LRAREiScriptHandler_iScriptRunnable", 0x4, NULL },
    { "createScriptContextWithJavaxScriptScriptEngine:", NULL, "LJavaxScriptScriptContext", 0x404, NULL },
    { "createWindowViewerWithRAREiPlatformAppContext:withNSString:withId:withRAREWindowViewer:withRAREiScriptHandler:", NULL, "LRAREWindowViewer", 0x404, NULL },
    { "handleScriptTracingWithNSString:", NULL, "V", 0x4, NULL },
    { "initializeCompiler", NULL, "V", 0x4, NULL },
    { "initializeEngineExWithJavaxScriptScriptEngine:withJavaxScriptScriptContext:", NULL, "V", 0x4, NULL },
    { "getInitScriptWithNSString:", NULL, "LNSString", 0x404, NULL },
    { "initializeEngineWithJavaxScriptScriptEngine:withJavaxScriptScriptContext:", NULL, "V", 0x404, NULL },
    { "initializeMappings", NULL, "V", 0x4, NULL },
    { "invokeAndWaitWithRAREiScriptHandler_iScriptRunnable:", NULL, "V", 0x404, NULL },
    { "loadDebugger", NULL, "V", 0x404, NULL },
    { "newWidgetContext", NULL, "LRAREWidgetContext", 0x4, NULL },
    { "saveCurrentWindowWithJavaxScriptScriptContext:withRAREWidgetContext:", NULL, "V", 0x4, NULL },
    { "saveSourceForDebuggingWithNSString:withNSString:", NULL, "V", 0x404, NULL },
    { "setupDebugger", NULL, "V", 0x404, NULL },
    { "setupDynamicBindingsWithJavaxScriptScriptEngine:withJavaxScriptScriptContext:", NULL, "V", 0x4, NULL },
    { "setupScriptingShellWithJavaxScriptScriptEngine:", NULL, "V", 0x404, NULL },
    { "spiClassNameForJavascripEngineFactory", NULL, "LNSString", 0x404, NULL },
    { "setWindowWithJavaxScriptScriptContext:withId:", NULL, "V", 0x4, NULL },
    { "getNativeScriptErrorInformationWithId:", NULL, "LRAREErrorInformation", 0x404, NULL },
    { "isNativeScriptFunctionObjectWithId:", NULL, "Z", 0x404, NULL },
    { "createVariableValueWithRAREWidgetContext:withId:", NULL, "LNSObject", 0x401, NULL },
    { "getRootHandlerWithRAREiPlatformAppContext:withRAREiWindow:withNSString:withNSString:withNSString:withBoolean:", NULL, "LRAREiScriptHandler", 0x401, NULL },
    { "unwrapWithId:", NULL, "LNSObject", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "loadedEngines_", NULL, 0x1c, "LJavaUtilHashMap" },
    { "_constants_populated_", NULL, 0xc, "Z" },
    { "nullBindings_", NULL, 0x4c, "LJavaxScriptSimpleBindings" },
    { "protocols_", NULL, 0x1c, "LJavaUtilHashSet" },
    { "_debugger_", NULL, 0xc, "LRAREiDebugHandler" },
    { "_rhinoInitialized_", NULL, 0xc, "Z" },
    { "debuggerLoaded_", NULL, 0x4c, "Z" },
    { "engineManager_", NULL, 0xc, "LJavaxScriptScriptEngineManager" },
    { "globalBindings_", NULL, 0x4c, "LJavaxScriptBindings" },
    { "nameMappings_", NULL, 0xc, "LJavaUtilConcurrentConcurrentHashMap" },
    { "postExecuteCode_", NULL, 0x4c, "LNSObject" },
    { "preExecuteCode_", NULL, 0x4c, "LNSObject" },
    { "shellPort_", NULL, 0xc, "I" },
    { "appContext_", NULL, 0x4, "LRAREiPlatformAppContext" },
    { "executingScriptName_", NULL, 0x4, "LNSString" },
    { "mainWindowBindings_", NULL, 0x44, "LJavaxScriptBindings" },
    { "scriptCompiler_", NULL, 0x4, "LJavaxScriptCompilable" },
    { "scriptContext_", NULL, 0x4, "LJavaxScriptScriptContext" },
    { "scriptEngine_", NULL, 0x4, "LJavaxScriptScriptEngine" },
    { "scriptName_", NULL, 0x4, "LNSString" },
    { "selfObject_", NULL, 0x4, "LNSObject" },
    { "theWindow_", NULL, 0x4, "LRAREWindowViewer" },
    { "tracingEnabled_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _RAREaScriptManager = { "aScriptManager", "com.appnativa.rare.scripting", NULL, 0x401, 58, methods, 23, fields, 0, NULL};
  return &_RAREaScriptManager;
}

@end
@implementation RAREaScriptManager_aCompiledScript

- (id)initWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
         withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context {
  if (self = [super init]) {
    usesBindings_ = YES;
    self->engine_ = engine;
    self->context_ = context;
  }
  return self;
}

- (void)cancelWithBoolean:(BOOL)interrupt {
}

- (id)eval {
  return [self evalWithJavaxScriptScriptContext:context_];
}

- (id)evalWithJavaxScriptBindings:(id<JavaxScriptBindings>)bindings {
  id<JavaxScriptBindings> ob = nil;
  id value;
  id<JavaxScriptScriptContext> ctx = (context_ == nil) ? [((id<JavaxScriptScriptEngine>) nil_chk(engine_)) getContext] : context_;
  if (bindings != nil) {
    ob = [ctx getBindingsWithInt:JavaxScriptScriptContext_ENGINE_SCOPE];
    [ctx setBindingsWithJavaxScriptBindings:bindings withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
  }
  @try {
    value = [self evalWithJavaxScriptScriptContext:ctx];
  }
  @finally {
    if (ob != nil) {
      [ctx setBindingsWithJavaxScriptBindings:ob withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
    }
  }
  return value;
}

- (void)setEnvironmentWithRAREaScriptManager:(RAREaScriptManager *)sm
                       withRAREWidgetContext:(RAREWidgetContext *)wc
                      withRAREScriptingEvent:(RAREScriptingEvent *)event {
  scriptManager_ = sm;
  widgetContext_ = wc;
}

- (id<JavaxScriptScriptEngine>)getEngine {
  return engine_;
}

- (void)copyAllFieldsTo:(RAREaScriptManager_aCompiledScript *)other {
  [super copyAllFieldsTo:other];
  other->context_ = context_;
  other->engine_ = engine_;
  other->scriptManager_ = scriptManager_;
  other->scriptName_ = scriptName_;
  other->usesBindings_ = usesBindings_;
  other->widgetContext_ = widgetContext_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "eval", NULL, "LNSObject", 0x1, "JavaxScriptScriptException" },
    { "evalWithJavaxScriptBindings:", NULL, "LNSObject", 0x1, "JavaxScriptScriptException" },
    { "getEngine", NULL, "LJavaxScriptScriptEngine", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "context_", NULL, 0x0, "LJavaxScriptScriptContext" },
    { "engine_", NULL, 0x0, "LJavaxScriptScriptEngine" },
    { "scriptManager_", NULL, 0x0, "LRAREaScriptManager" },
    { "scriptName_", NULL, 0x0, "LNSString" },
    { "widgetContext_", NULL, 0x0, "LRAREWidgetContext" },
    { "usesBindings_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _RAREaScriptManager_aCompiledScript = { "aCompiledScript", "com.appnativa.rare.scripting", "aScriptManager", 0x40c, 3, methods, 6, fields, 0, NULL};
  return &_RAREaScriptManager_aCompiledScript;
}

@end
@implementation RAREaScriptManager_CompiledMultiScript

- (id)initWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
         withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context
                  withRAREMultiScript:(RAREMultiScript *)ms {
  if (self = [super initWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:context]) {
    self->theScript_ = ms;
  }
  return self;
}

- (id)evalWithJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context {
  if (context == nil) {
    context = [((id<JavaxScriptScriptEngine>) nil_chk(engine_)) getContext];
  }
  JavaUtilArrayList *list = [((RAREMultiScript *) nil_chk(theScript_)) getCompiledCode];
  int len = [((JavaUtilArrayList *) nil_chk(list)) size];
  for (int i = 0; i < len; i++) {
    id o = [list getWithInt:i];
    if ([o isKindOfClass:[JavaxScriptCompiledScript class]]) {
      (void) [((JavaxScriptCompiledScript *) check_class_cast(o, [JavaxScriptCompiledScript class])) evalWithJavaxScriptScriptContext:context];
    }
    else if ([((RAREaScriptManager *) nil_chk(scriptManager_)) isNativeScriptFunctionObjectWithId:o]) {
      (void) [scriptManager_ InvokeNativeScriptFunctionObjectWithId:o withJavaxScriptScriptEngine:engine_ withJavaxScriptScriptContext:context withId:((RAREWidgetContext *) nil_chk(widgetContext_))->scriptObject_];
    }
    else if ([o isKindOfClass:[NSString class]]) {
      o = [self compileWithNSString:(NSString *) check_class_cast(o, [NSString class]) withJavaxScriptScriptContext:context];
      (void) [((JavaxScriptCompiledScript *) check_class_cast(o, [JavaxScriptCompiledScript class])) evalWithJavaxScriptScriptContext:context];
    }
    else if ([o conformsToProtocol: @protocol(JavaLangRunnable)]) {
      [((id<JavaLangRunnable>) check_protocol_cast(o, @protocol(JavaLangRunnable))) run];
    }
  }
  return nil;
}

- (NSString *)description {
  return [((RAREMultiScript *) nil_chk(theScript_)) description];
}

- (id)compileWithNSString:(NSString *)code
withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)sc {
  NSString *name = [((RAREMultiScript *) nil_chk(theScript_)) getEvent];
  id<JavaxScriptScriptEngine> e = engine_;
  if (([(id) e conformsToProtocol: @protocol(JavaxScriptCompilable)]) && ![RAREPlatform isDebugEnabled]) {
    id savedName = [((id<JavaxScriptScriptContext>) nil_chk(sc)) getAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
    if (name != nil) {
      [sc setAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withId:name withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
    }
    @try {
      return [[RAREaScriptManager_CompiledScriptEx alloc] initWithJavaxScriptScriptEngine:e withJavaxScriptScriptContext:sc withNSString:name withJavaxScriptCompiledScript:[((id<JavaxScriptCompilable>) check_protocol_cast(e, @protocol(JavaxScriptCompilable))) compileWithNSString:code]];
    }
    @catch (JavaxScriptScriptException *ex) {
      [sc setAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withId:savedName withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:ex];
    }
  }
  return [[RAREaScriptManager_CompiledScriptEx alloc] initWithJavaxScriptScriptEngine:e withJavaxScriptScriptContext:sc withNSString:name withNSString:code];
}

- (void)copyAllFieldsTo:(RAREaScriptManager_CompiledMultiScript *)other {
  [super copyAllFieldsTo:other];
  other->theScript_ = theScript_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "evalWithJavaxScriptScriptContext:", NULL, "LNSObject", 0x1, "JavaxScriptScriptException" },
    { "compileWithNSString:withJavaxScriptScriptContext:", NULL, "LNSObject", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "theScript_", NULL, 0x0, "LRAREMultiScript" },
  };
  static J2ObjcClassInfo _RAREaScriptManager_CompiledMultiScript = { "CompiledMultiScript", "com.appnativa.rare.scripting", "aScriptManager", 0xc, 2, methods, 1, fields, 0, NULL};
  return &_RAREaScriptManager_CompiledMultiScript;
}

@end
@implementation RAREaScriptManager_CompiledScriptEx

- (id)initWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
         withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context
                         withNSString:(NSString *)name
        withJavaxScriptCompiledScript:(JavaxScriptCompiledScript *)script {
  if (self = [super initWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:context]) {
    scriptName_ = name;
    theScript_ = script;
  }
  return self;
}

- (id)initWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
         withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context
                         withNSString:(NSString *)name
                         withNSString:(NSString *)code {
  if (self = [super initWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:context]) {
    scriptName_ = name;
    theCode_ = code;
  }
  return self;
}

- (id)evalWithJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context {
  if (context == nil) {
    context = [((id<JavaxScriptScriptEngine>) nil_chk(engine_)) getContext];
  }
  return (theScript_ == nil) ? [((id<JavaxScriptScriptEngine>) nil_chk([self getEngine])) evalWithNSString:theCode_ withJavaxScriptScriptContext:context] : [theScript_ evalWithJavaxScriptScriptContext:context];
}

- (NSString *)description {
  return (theCode_ == nil) ? [((JavaxScriptCompiledScript *) nil_chk(theScript_)) description] : theCode_;
}

- (void)copyAllFieldsTo:(RAREaScriptManager_CompiledScriptEx *)other {
  [super copyAllFieldsTo:other];
  other->theCode_ = theCode_;
  other->theScript_ = theScript_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "evalWithJavaxScriptScriptContext:", NULL, "LNSObject", 0x1, "JavaxScriptScriptException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "theCode_", NULL, 0x0, "LNSString" },
    { "theScript_", NULL, 0x0, "LJavaxScriptCompiledScript" },
  };
  static J2ObjcClassInfo _RAREaScriptManager_CompiledScriptEx = { "CompiledScriptEx", "com.appnativa.rare.scripting", "aScriptManager", 0xc, 1, methods, 2, fields, 0, NULL};
  return &_RAREaScriptManager_CompiledScriptEx;
}

@end
@implementation RAREaScriptManager_EvalRunner

static NSString * RAREaScriptManager_EvalRunner_DISPOSE_EVENT_TYPE_;

+ (NSString *)DISPOSE_EVENT_TYPE {
  return RAREaScriptManager_EvalRunner_DISPOSE_EVENT_TYPE_;
}

- (id)initWithRAREiScriptHandler:(id<RAREiScriptHandler>)sh
           withRAREWidgetContext:(RAREWidgetContext *)context
                    withNSString:(NSString *)source
          withRAREScriptingEvent:(RAREScriptingEvent *)e {
  if (self = [super init]) {
    handleException_ = YES;
    scriptHandler_ = sh;
    runContext_ = context;
    theSource_ = source;
    event_ = e;
  }
  return self;
}

- (id)initWithRAREiScriptHandler:(id<RAREiScriptHandler>)sh
           withRAREWidgetContext:(RAREWidgetContext *)context
                          withId:(id)script
                     withBoolean:(BOOL)string
          withRAREScriptingEvent:(RAREScriptingEvent *)e {
  if (self = [super init]) {
    handleException_ = YES;
    scriptHandler_ = sh;
    runContext_ = context;
    theScript_ = script;
    event_ = e;
  }
  return self;
}

- (id)call {
  [self run];
  return [self getResult];
}

- (void)cancelWithBoolean:(BOOL)canInterrupt {
  id<JavaLangRunnable> r = [self getRunnableWithId:cancelRunner_];
  canceled_ = YES;
  @try {
    if ([theScript_ isKindOfClass:[RAREaScriptManager_aCompiledScript class]]) {
      [((RAREaScriptManager_aCompiledScript *) check_class_cast(theScript_, [RAREaScriptManager_aCompiledScript class])) cancelWithBoolean:canInterrupt];
    }
    if (r != nil) {
      if (cancelerOnEventThread_) {
        [RAREPlatform invokeLaterWithJavaLangRunnable:r];
      }
      else {
        [r run];
      }
    }
  }
  @finally {
    [self dispose];
  }
}

- (void)dispose {
  if (!disposed_) {
    disposed_ = YES;
    scriptHandler_ = nil;
    theSource_ = nil;
    event_ = nil;
    theScript_ = nil;
    theResult_ = nil;
    executionException_ = nil;
    notifierRunner_ = nil;
    cancelRunner_ = nil;
  }
}

- (void)run {
  canceled_ = NO;
  theResult_ = nil;
  runTime_ = [JavaLangSystem currentTimeMillis];
  RAREWindowViewer *win = (RAREWindowViewer *) check_class_cast([((id<RAREiScriptHandler>) nil_chk(scriptHandler_)) getWindowViewer], [RAREWindowViewer class]);
  if ((win == nil) || (((RAREWidgetContext *) nil_chk(runContext_))->scriptObject_ == nil)) {
    return;
  }
  id<RAREiWidget> w = [((RAREWidgetContext *) nil_chk(runContext_)) getWidget];
  if (w != nil) {
    id<RAREiViewer> v = [w getViewer];
    if (v == nil) {
      return;
    }
    if ([(id) v isKindOfClass:[RAREWindowViewer class]]) {
      win = (RAREWindowViewer *) check_class_cast(v, [RAREWindowViewer class]);
    }
    else {
      win = [((id<RAREiViewer>) nil_chk(v)) getWindow];
    }
    if ((win == nil) && (event_ != nil) && ([event_ isInvokeLater] || [((NSString *) nil_chk(RAREaScriptManager_EvalRunner_DISPOSE_EVENT_TYPE_)) isEqual:[event_ getType]])) {
      win = (RAREWindowViewer *) check_class_cast([scriptHandler_ getWindowViewer], [RAREWindowViewer class]);
      w = win;
    }
    if (win == nil) {
      return;
    }
  }
  RAREScriptingEvent *se = [((RAREWindowViewer *) nil_chk(win)) getEvent];
  if ((event_ != nil) && [RAREPlatform isUIThread]) {
    [win setEventExWithRAREScriptingEvent:event_];
  }
  id<JavaLangRunnable> nr = [self getRunnableWithId:notifierRunner_];
  done_ = NO;
  JavaLangThrowable *exception = nil;
  @try {
    theResult_ = [self executeCodeWithRAREWindowViewer:win withRAREiWidget:w];
  }
  @catch (JavaLangThrowable *e) {
    exception = e;
  }
  done_ = YES;
  if ([RAREPlatform isUIThread]) {
    [win setEventExWithRAREScriptingEvent:se];
  }
  if (exception != nil) {
    cancelRunner_ = nil;
    if (handleException_) {
      id<RAREiWidget> ww = (w == nil) ? win : ((id) w);
      JavaLangThrowable *ex = exception;
      id<JavaLangRunnable> r = [[RAREaScriptManager_EvalRunner_$1 alloc] initWithRAREiWidget:ww withJavaLangThrowable:ex];
      [RAREPlatform invokeLaterWithJavaLangRunnable:r];
    }
    else {
      executionException_ = [RAREApplicationException runtimeExceptionWithJavaLangThrowable:exception];
    }
  }
  if (!canceled_ && (nr != nil)) {
    if (notifierOnEventThread_) {
      [RAREPlatform invokeLaterWithJavaLangRunnable:nr];
    }
    else {
      [nr run];
    }
  }
}

- (void)setCancelRunnerWithId:(id)code
                  withBoolean:(BOOL)runOnEventThread {
  if (code != self) {
    cancelRunner_ = code;
    cancelerOnEventThread_ = runOnEventThread;
  }
}

- (void)setHandleExceptionWithBoolean:(BOOL)handle {
  handleException_ = handle;
}

- (void)setNotifierRunnerWithId:(id)code
                    withBoolean:(BOOL)runOnEventThread {
  if (code != self) {
    notifierRunner_ = code;
    notifierOnEventThread_ = runOnEventThread;
  }
}

- (id)getCancelRunner {
  return cancelRunner_;
}

- (JavaLangThrowable *)getExecutionException {
  return executionException_;
}

- (id)getNotifierRunner {
  return notifierRunner_;
}

- (id)getResult {
  if (executionException_ != nil) {
    @throw executionException_;
  }
  id o = theResult_;
  theResult_ = nil;
  return o;
}

- (NSString *)getResultString {
  if (executionException_ != nil) {
    @throw executionException_;
  }
  return (NSString *) check_class_cast(theResult_, [NSString class]);
}

- (BOOL)isCanceled {
  return canceled_;
}

- (BOOL)isDisposed {
  return disposed_;
}

- (BOOL)isDone {
  return done_ || canceled_;
}

- (id)executeCodeWithRAREWindowViewer:(RAREWindowViewer *)win
                      withRAREiWidget:(id<RAREiWidget>)w {
  id<JavaxScriptScriptEngine> e = (id<JavaxScriptScriptEngine>) check_protocol_cast(((RAREWidgetContext *) nil_chk(runContext_))->scriptEngine_, @protocol(JavaxScriptScriptEngine));
  if (e == nil) {
    e = (id<JavaxScriptScriptEngine>) check_protocol_cast(((RAREWidgetContext *) nil_chk([((RAREWindowViewer *) nil_chk(win)) getScriptingContext]))->scriptEngine_, @protocol(JavaxScriptScriptEngine));
  }
  id<JavaxScriptScriptContext> scriptContext = (id<JavaxScriptScriptContext>) check_protocol_cast(runContext_->scriptContext_, @protocol(JavaxScriptScriptContext));
  if (scriptContext == nil) {
    scriptContext = (id<JavaxScriptScriptContext>) check_protocol_cast(((RAREWidgetContext *) nil_chk([((RAREWindowViewer *) nil_chk(win)) getScriptingContext]))->scriptContext_, @protocol(JavaxScriptScriptContext));
  }
  id savedWidget = nil;
  id savedForm = nil;
  id savedName = nil;
  id form = (w == nil) ? nil : [w getFormViewer];
  BOOL backgroundExecution = ![RAREPlatform isUIThread];
  RAREaScriptManager *sm = (RAREaScriptManager *) check_class_cast(scriptHandler_, [RAREaScriptManager class]);
  RAREaScriptManager_aCompiledScript *cs = (RAREaScriptManager_aCompiledScript *) check_class_cast(theScript_, [RAREaScriptManager_aCompiledScript class]);
  BOOL save = ((cs == nil) || cs->usesBindings_) && !backgroundExecution;
  @try {
    if (save) {
      savedWidget = [((id<JavaxScriptScriptContext>) nil_chk(scriptContext)) getAttributeWithNSString:[RAREDynamicBindings WIDGET] withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      savedForm = [scriptContext getAttributeWithNSString:[RAREDynamicBindings FORM] withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      [scriptContext setAttributeWithNSString:[RAREDynamicBindings WIDGET] withId:w withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      [scriptContext setAttributeWithNSString:[RAREDynamicBindings FORM] withId:form withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      [((RAREaScriptManager *) nil_chk(sm)) saveCurrentWindowWithJavaxScriptScriptContext:scriptContext withRAREWidgetContext:runContext_];
      [sm setWindowWithJavaxScriptScriptContext:scriptContext withId:win];
    }
    if (save && (runContext_->scriptName_ != nil)) {
      savedName = [((id<JavaxScriptScriptContext>) nil_chk(scriptContext)) getAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      [scriptContext setAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withId:runContext_->scriptName_ withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      ((RAREaScriptManager *) nil_chk(sm))->executingScriptName_ = runContext_->scriptName_;
    }
    if (cs != nil) {
      if (((RAREaScriptManager *) nil_chk(sm))->tracingEnabled_) {
        [sm handleScriptTracingWithNSString:[nil_chk(theScript_) description]];
      }
      if ([RAREaScriptManager preExecuteCode] != nil) {
        (void) [((JavaxScriptCompiledScript *) check_class_cast([RAREaScriptManager preExecuteCode], [JavaxScriptCompiledScript class])) evalWithJavaxScriptScriptContext:scriptContext];
      }
      [cs setEnvironmentWithRAREaScriptManager:(RAREaScriptManager *) check_class_cast(scriptHandler_, [RAREaScriptManager class]) withRAREWidgetContext:runContext_ withRAREScriptingEvent:event_];
      id o = [cs evalWithJavaxScriptScriptContext:scriptContext];
      if ([RAREaScriptManager postExecuteCode] != nil) {
        (void) [((JavaxScriptCompiledScript *) check_class_cast([RAREaScriptManager postExecuteCode], [JavaxScriptCompiledScript class])) evalWithJavaxScriptScriptContext:scriptContext];
      }
      return o;
    }
    else {
      if (((RAREaScriptManager *) nil_chk(sm))->tracingEnabled_) {
        [sm handleScriptTracingWithNSString:theSource_];
      }
      return [((id<JavaxScriptScriptEngine>) nil_chk(e)) evalWithNSString:theSource_ withJavaxScriptScriptContext:scriptContext];
    }
  }
  @finally {
    if (save) {
      [((RAREaScriptManager *) nil_chk(sm)) restoreSaveWindowWithJavaxScriptScriptContext:scriptContext withRAREWidgetContext:runContext_];
      [((id<JavaxScriptScriptContext>) nil_chk(scriptContext)) setAttributeWithNSString:@"widget" withId:savedWidget withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      [scriptContext setAttributeWithNSString:@"form" withId:savedForm withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      if (runContext_->scriptName_ != nil) {
        sm->executingScriptName_ = (NSString *) check_class_cast(savedName, [NSString class]);
        [scriptContext setAttributeWithNSString:[JavaxScriptScriptEngine FILENAME] withId:savedName withInt:JavaxScriptScriptContext_ENGINE_SCOPE];
      }
    }
  }
}

- (void)notifyAllWithId:(id)o {
}

- (id<JavaLangRunnable>)getRunnableWithId:(id)o {
  if ((o == nil) || ([o conformsToProtocol: @protocol(JavaLangRunnable)])) {
    return (id<JavaLangRunnable>) check_protocol_cast(o, @protocol(JavaLangRunnable));
  }
  return [((id<RAREiScriptHandler>) nil_chk(scriptHandler_)) createRunnerWithRAREWidgetContext:runContext_ withId:o withRAREScriptingEvent:event_];
}

+ (void)initialize {
  if (self == [RAREaScriptManager_EvalRunner class]) {
    RAREaScriptManager_EvalRunner_DISPOSE_EVENT_TYPE_ = [((NSString *) nil_chk([RAREiConstants ATTRIBUTE_ON_DISPOSE])) substring:2];
  }
}

- (void)copyAllFieldsTo:(RAREaScriptManager_EvalRunner *)other {
  [super copyAllFieldsTo:other];
  other->cancelRunner_ = cancelRunner_;
  other->canceled_ = canceled_;
  other->cancelerOnEventThread_ = cancelerOnEventThread_;
  other->disposed_ = disposed_;
  other->done_ = done_;
  other->event_ = event_;
  other->executionException_ = executionException_;
  other->handleException_ = handleException_;
  other->notifierOnEventThread_ = notifierOnEventThread_;
  other->notifierRunner_ = notifierRunner_;
  other->runContext_ = runContext_;
  other->runTime_ = runTime_;
  other->scriptHandler_ = scriptHandler_;
  other->theResult_ = theResult_;
  other->theScript_ = theScript_;
  other->theSource_ = theSource_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "call", NULL, "LNSObject", 0x1, "JavaLangException" },
    { "getCancelRunner", NULL, "LNSObject", 0x1, NULL },
    { "getExecutionException", NULL, "LJavaLangThrowable", 0x1, NULL },
    { "getNotifierRunner", NULL, "LNSObject", 0x1, NULL },
    { "getResult", NULL, "LNSObject", 0x1, NULL },
    { "getResultString", NULL, "LNSString", 0x1, NULL },
    { "isCanceled", NULL, "Z", 0x1, NULL },
    { "isDisposed", NULL, "Z", 0x1, NULL },
    { "isDone", NULL, "Z", 0x1, NULL },
    { "executeCodeWithRAREWindowViewer:withRAREiWidget:", NULL, "LNSObject", 0x4, "JavaLangException" },
    { "notifyAllWithId:", NULL, "V", 0x4, NULL },
    { "getRunnableWithId:", NULL, "LJavaLangRunnable", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "DISPOSE_EVENT_TYPE_", NULL, 0x1a, "LNSString" },
    { "disposed_", NULL, 0x0, "Z" },
    { "runTime_", NULL, 0x0, "J" },
    { "handleException_", NULL, 0x4, "Z" },
    { "cancelRunner_", NULL, 0x4, "LNSObject" },
    { "event_", NULL, 0x4, "LRAREScriptingEvent" },
    { "executionException_", NULL, 0x4, "LJavaLangRuntimeException" },
    { "runContext_", NULL, 0x4, "LRAREWidgetContext" },
    { "scriptHandler_", NULL, 0x4, "LRAREiScriptHandler" },
    { "theResult_", NULL, 0x4, "LNSObject" },
    { "theScript_", NULL, 0x4, "LNSObject" },
    { "theSource_", NULL, 0x4, "LNSString" },
    { "canceled_", NULL, 0x42, "Z" },
    { "done_", NULL, 0x42, "Z" },
  };
  static J2ObjcClassInfo _RAREaScriptManager_EvalRunner = { "EvalRunner", "com.appnativa.rare.scripting", "aScriptManager", 0xc, 12, methods, 14, fields, 0, NULL};
  return &_RAREaScriptManager_EvalRunner;
}

@end
@implementation RAREaScriptManager_EvalRunner_$1

- (void)run {
  if ([((id<RAREiWidget>) nil_chk(val$ww_)) isDisposed]) {
    @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:val$ex_];
  }
  else {
    [val$ww_ handleExceptionWithJavaLangThrowable:[RAREApplicationException runtimeExceptionWithJavaLangThrowable:val$ex_]];
  }
}

- (id)initWithRAREiWidget:(id<RAREiWidget>)capture$0
    withJavaLangThrowable:(JavaLangThrowable *)capture$1 {
  val$ww_ = capture$0;
  val$ex_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$ww_", NULL, 0x1012, "LRAREiWidget" },
    { "val$ex_", NULL, 0x1012, "LJavaLangThrowable" },
  };
  static J2ObjcClassInfo _RAREaScriptManager_EvalRunner_$1 = { "$1", "com.appnativa.rare.scripting", "aScriptManager$EvalRunner", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_RAREaScriptManager_EvalRunner_$1;
}

@end
@implementation RAREaScriptManager_JSFunctionScript

- (id)initWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
         withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context
                               withId:(id)f {
  if (self = [super initWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:context]) {
    self->function_ = f;
  }
  return self;
}

- (id)evalWithJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context {
  if (context == nil) {
    context = [((id<JavaxScriptScriptEngine>) nil_chk(engine_)) getContext];
  }
  return [((RAREaScriptManager *) nil_chk(scriptManager_)) InvokeNativeScriptFunctionObjectWithId:function_ withJavaxScriptScriptEngine:engine_ withJavaxScriptScriptContext:context withId:_this_];
}

- (NSString *)description {
  return [nil_chk(function_) description];
}

- (void)setEnvironmentWithRAREaScriptManager:(RAREaScriptManager *)sm
                       withRAREWidgetContext:(RAREWidgetContext *)wc
                      withRAREScriptingEvent:(RAREScriptingEvent *)event {
  [super setEnvironmentWithRAREaScriptManager:sm withRAREWidgetContext:wc withRAREScriptingEvent:event];
  _this_ = ((RAREWidgetContext *) nil_chk(wc))->scriptObject_;
}

- (void)copyAllFieldsTo:(RAREaScriptManager_JSFunctionScript *)other {
  [super copyAllFieldsTo:other];
  other->_this_ = _this_;
  other->function_ = function_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "evalWithJavaxScriptScriptContext:", NULL, "LNSObject", 0x1, "JavaxScriptScriptException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "_this_", NULL, 0x0, "LNSObject" },
    { "function_", NULL, 0x0, "LNSObject" },
  };
  static J2ObjcClassInfo _RAREaScriptManager_JSFunctionScript = { "JSFunctionScript", "com.appnativa.rare.scripting", "aScriptManager", 0xc, 1, methods, 2, fields, 0, NULL};
  return &_RAREaScriptManager_JSFunctionScript;
}

@end
@implementation RAREaScriptManager_RunnableScript

- (id)initWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
         withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context
                 withJavaLangRunnable:(id<JavaLangRunnable>)r {
  if (self = [super initWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:context]) {
    self->runnable_ = r;
  }
  return self;
}

- (void)cancelWithBoolean:(BOOL)interrupt {
  if ([(id) runnable_ conformsToProtocol: @protocol(RAREUTiCancelable)]) {
    @try {
      [((id<RAREUTiCancelable>) check_protocol_cast(runnable_, @protocol(RAREUTiCancelable))) cancelWithBoolean:interrupt];
    }
    @catch (JavaLangThrowable *ignore) {
    }
  }
}

- (id)evalWithJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context {
  [((id<JavaLangRunnable>) nil_chk(runnable_)) run];
  return nil;
}

- (NSString *)description {
  return [((id<JavaLangRunnable>) nil_chk(runnable_)) description];
}

- (void)copyAllFieldsTo:(RAREaScriptManager_RunnableScript *)other {
  [super copyAllFieldsTo:other];
  other->runnable_ = runnable_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "evalWithJavaxScriptScriptContext:", NULL, "LNSObject", 0x1, "JavaxScriptScriptException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "runnable_", NULL, 0x0, "LJavaLangRunnable" },
  };
  static J2ObjcClassInfo _RAREaScriptManager_RunnableScript = { "RunnableScript", "com.appnativa.rare.scripting", "aScriptManager", 0xc, 1, methods, 1, fields, 0, NULL};
  return &_RAREaScriptManager_RunnableScript;
}

@end
@implementation RAREaScriptManager_EventHandlerInterfaceScript

- (id)initWithJavaxScriptScriptEngine:(id<JavaxScriptScriptEngine>)engine
         withJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context
        withRAREEventHandlerInterface:(RAREEventHandlerInterface *)handler {
  if (self = [super initWithJavaxScriptScriptEngine:engine withJavaxScriptScriptContext:context]) {
    self->handler_ = handler;
    usesBindings_ = NO;
  }
  return self;
}

- (void)setEnvironmentWithRAREaScriptManager:(RAREaScriptManager *)sm
                       withRAREWidgetContext:(RAREWidgetContext *)wc
                      withRAREScriptingEvent:(RAREScriptingEvent *)event {
  [super setEnvironmentWithRAREaScriptManager:sm withRAREWidgetContext:wc withRAREScriptingEvent:event];
  self->nativeEvent_ = [((RAREScriptingEvent *) nil_chk(event)) getUIEvent];
  eventName_ = [event getType];
}

- (id)evalWithJavaxScriptScriptContext:(id<JavaxScriptScriptContext>)context {
  @try {
    [((RAREEventHandlerInterface *) nil_chk(handler_)) callHandlerWithNSString:eventName_ withRAREiWidget:[((RAREWidgetContext *) nil_chk(widgetContext_)) getWidget] withJavaUtilEventObject:nativeEvent_];
  }
  @finally {
    nativeEvent_ = nil;
  }
  return nil;
}

- (void)copyAllFieldsTo:(RAREaScriptManager_EventHandlerInterfaceScript *)other {
  [super copyAllFieldsTo:other];
  other->eventHandler_ = eventHandler_;
  other->eventName_ = eventName_;
  other->handler_ = handler_;
  other->nativeEvent_ = nativeEvent_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "evalWithJavaxScriptScriptContext:", NULL, "LNSObject", 0x1, "JavaxScriptScriptException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "handler_", NULL, 0x0, "LRAREEventHandlerInterface" },
    { "eventHandler_", NULL, 0x0, "LRAREiEventHandler" },
    { "nativeEvent_", NULL, 0x0, "LJavaUtilEventObject" },
    { "eventName_", NULL, 0x0, "LNSString" },
  };
  static J2ObjcClassInfo _RAREaScriptManager_EventHandlerInterfaceScript = { "EventHandlerInterfaceScript", "com.appnativa.rare.scripting", "aScriptManager", 0xc, 1, methods, 4, fields, 0, NULL};
  return &_RAREaScriptManager_EventHandlerInterfaceScript;
}

@end
