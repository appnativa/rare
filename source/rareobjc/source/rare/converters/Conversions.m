//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/converters/Conversions.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/Conversions.h"
#include "com/appnativa/rare/converters/DateContext.h"
#include "com/appnativa/rare/converters/NumberContext.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iExceptionHandler.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/util/DataParser.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/SDecimal.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/SimpleDateFormatEx.h"
#include "java/io/StringReader.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigDecimal.h"
#include "java/text/DateFormat.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/List.h"

@implementation RAREConversions

static JavaLangThreadLocal * RAREConversions_perThreadScanner_;

+ (JavaLangThreadLocal *)perThreadScanner {
  return RAREConversions_perThreadScanner_;
}

+ (void)setPerThreadScanner:(JavaLangThreadLocal *)perThreadScanner {
  RAREConversions_perThreadScanner_ = perThreadScanner;
}

- (id)init {
  return [super init];
}

+ (RAREUIColor *)colorFromHexStringWithNSString:(NSString *)s {
  if (s == nil) {
    return nil;
  }
  int len = [((NSString *) nil_chk(s)) sequenceLength];
  int r = 0;
  int g = 0;
  int b = 0;
  int i = 0;
  int a = 255;
  if (len == 0) {
    return [RAREUIColor BLACK];
  }
  if ([s charAtWithInt:0] == '#') {
    i++;
  }
  int inc = (len - i == 3) ? 1 : 2;
  if ((i + 1) < len) {
    r = (([JavaLangCharacter digitWithChar:[s charAtWithInt:i] withInt:16] << 4) & (int) 0xff);
    r += ([JavaLangCharacter digitWithChar:[s charAtWithInt:i + 1] withInt:16] & (int) 0xff);
    i += inc;
  }
  if ((i + 1) < len) {
    g = (([JavaLangCharacter digitWithChar:[s charAtWithInt:i] withInt:16] << 4) & (int) 0xff);
    g += ([JavaLangCharacter digitWithChar:[s charAtWithInt:i + inc - 1] withInt:16] & (int) 0xff);
    i += inc;
  }
  if ((i + 1) < len) {
    b = (([JavaLangCharacter digitWithChar:[s charAtWithInt:i] withInt:16] << 4) & (int) 0xff);
    b += ([JavaLangCharacter digitWithChar:[s charAtWithInt:i + inc - 1] withInt:16] & (int) 0xff);
    i += inc;
  }
  if ((i + 1) < len) {
    a = r;
    r = b;
    b = g;
    g = (([JavaLangCharacter digitWithChar:[s charAtWithInt:i] withInt:16] << 4) & (int) 0xff);
    g += ([JavaLangCharacter digitWithChar:[s charAtWithInt:i + inc - 1] withInt:16] & (int) 0xff);
  }
  return [[RAREUIColor alloc] initWithInt:r withInt:g withInt:b withInt:a];
}

+ (RAREUIColor *)colorFromHexStringWithCharArray:(IOSCharArray *)chars
                                         withInt:(int)pos
                                         withInt:(int)len {
  int r = 0;
  int g = 0;
  int b = 0;
  int i = pos;
  int a = 255;
  if (len == 0) {
    return [RAREUIColor BLACK];
  }
  len += pos;
  if (IOSCharArray_Get(nil_chk(chars), i) == '#') {
    i++;
  }
  int inc = (len - i == 3) ? 1 : 2;
  if ((i + 1) < len) {
    r = (([JavaLangCharacter digitWithChar:IOSCharArray_Get(chars, i) withInt:16] << 4) & (int) 0xff);
    r += ([JavaLangCharacter digitWithChar:IOSCharArray_Get(chars, i + inc - 1) withInt:16] & (int) 0xff);
    i += inc;
  }
  if ((i + inc - 1) < len) {
    g = (([JavaLangCharacter digitWithChar:IOSCharArray_Get(chars, i) withInt:16] << 4) & (int) 0xff);
    g += ([JavaLangCharacter digitWithChar:IOSCharArray_Get(chars, i + inc - 1) withInt:16] & (int) 0xff);
    i += inc;
  }
  if ((i + inc - 1) < len) {
    b = (([JavaLangCharacter digitWithChar:IOSCharArray_Get(chars, i) withInt:16] << 4) & (int) 0xff);
    b += ([JavaLangCharacter digitWithChar:IOSCharArray_Get(chars, i + inc - 1) withInt:16] & (int) 0xff);
    i += inc;
  }
  if ((i + inc - 1) < len) {
    a = r;
    r = g;
    g = b;
    b = (([JavaLangCharacter digitWithChar:IOSCharArray_Get(chars, i) withInt:16] << 4) & (int) 0xff);
    b += ([JavaLangCharacter digitWithChar:IOSCharArray_Get(chars, i + inc - 1) withInt:16] & (int) 0xff);
  }
  if ((r < 0) || (r > 255) || (g < 0) || (g > 255) || (b < 0) || (b > 255) || (a < 0) || (a > 255)) {
    return nil;
  }
  return [[RAREUIColor alloc] initWithInt:r withInt:g withInt:b withInt:a];
}

+ (RAREUIColor *)colorFromRGBStringWithNSString:(NSString *)s {
  if (s == nil) {
    return nil;
  }
  return [RAREConversions colorFromRGBStringWithCharArray:[((NSString *) nil_chk(s)) toCharArray] withInt:0 withInt:[s sequenceLength]];
}

+ (RAREUIColor *)colorFromRGBStringWithCharArray:(IOSCharArray *)chars
                                         withInt:(int)pos
                                         withInt:(int)len {
  int r = 0;
  int g = 0;
  int b = 0;
  int a = 255;
  if (len < 1) {
    return [RAREUIColor BLACK];
  }
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk(RAREConversions_perThreadScanner_)) get];
  [((RAREUTCharScanner *) nil_chk(sc)) resetWithCharArray:chars withInt:pos withInt:len withBoolean:NO];
  if ([sc getCurrentChar] == '(') {
    [sc consumeWithInt:1];
  }
  IOSIntArray *tok = [sc trimWithIntArray:[sc findTokenWithChar:',']];
  if (tok != nil) {
    r = (int) [RAREUTSNumber longValueWithCharArray:chars withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1) withBoolean:NO] % 256;
    if (IOSCharArray_Get(nil_chk(chars), IOSIntArray_Get(tok, 0) + IOSIntArray_Get(tok, 1) - 1) == '%') {
      r = ((int) ((r) * 2.55f)) % 256;
    }
    tok = [sc trimWithIntArray:[sc findTokenWithChar:',']];
  }
  if (tok != nil) {
    g = (int) [RAREUTSNumber longValueWithCharArray:chars withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1) withBoolean:NO] % 256;
    if (IOSCharArray_Get(nil_chk(chars), IOSIntArray_Get(tok, 0) + IOSIntArray_Get(tok, 1) - 1) == '%') {
      g = ((int) ((g) * 2.55f)) % 256;
    }
    tok = [sc trimWithIntArray:[sc findTokenWithChar:',']];
  }
  if (tok != nil) {
    b = (int) [RAREUTSNumber longValueWithCharArray:chars withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1) withBoolean:NO] % 256;
    if (IOSCharArray_Get(nil_chk(chars), IOSIntArray_Get(tok, 0) + IOSIntArray_Get(tok, 1) - 1) == '%') {
      b = ((int) ((b) * 2.55f)) % 256;
    }
    tok = [sc trimWithIntArray:[sc findTokenWithChar:',']];
  }
  if (tok != nil) {
    a = (int) ([RAREUTSNumber floatValueWithCharArray:chars withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1) withBoolean:NO] * 255) % 256;
  }
  if (r < 0) {
    r = 0;
  }
  if (g < 0) {
    g = 0;
  }
  if (b < 0) {
    b = 0;
  }
  if (a < 0) {
    a = 255;
  }
  return [[RAREUIColor alloc] initWithInt:r withInt:g withInt:b withInt:a];
}

+ (NSString *)colorToHEXStringWithRAREUIColor:(RAREUIColor *)c {
  return [RAREConversions colorToHEXStringWithJavaLangStringBuilder:[[JavaLangStringBuilder alloc] initWithInt:9] withRAREUIColor:c];
}

+ (NSString *)colorToHEXStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                        withRAREUIColor:(RAREUIColor *)c {
  if (c == nil) {
    return nil;
  }
  int r = [((RAREUIColor *) nil_chk(c)) getRed];
  int g = [c getGreen];
  int b = [c getBlue];
  int a = [c getAlpha];
  NSString *s;
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"#"];
  if (a != 255) {
    s = [JavaLangInteger toHexStringWithInt:a];
    if ([((NSString *) nil_chk(s)) sequenceLength] == 1) {
      (void) [sb appendWithChar:'0'];
    }
    (void) [sb appendWithNSString:s];
  }
  s = [JavaLangInteger toHexStringWithInt:r];
  if ([((NSString *) nil_chk(s)) sequenceLength] == 1) {
    (void) [sb appendWithChar:'0'];
  }
  (void) [sb appendWithNSString:s];
  s = [JavaLangInteger toHexStringWithInt:g];
  if ([((NSString *) nil_chk(s)) sequenceLength] == 1) {
    (void) [sb appendWithChar:'0'];
  }
  (void) [sb appendWithNSString:s];
  s = [JavaLangInteger toHexStringWithInt:b];
  if ([((NSString *) nil_chk(s)) sequenceLength] == 1) {
    (void) [sb appendWithChar:'0'];
  }
  (void) [sb appendWithNSString:s];
  return [sb description];
}

+ (NSString *)colorToCSSStringWithRAREUIColor:(RAREUIColor *)c {
  if (c == nil) {
    return nil;
  }
  int alpha = [((RAREUIColor *) nil_chk(c)) getAlpha];
  if (alpha == 255) {
    return [NSString stringWithFormat:@"color: rgb(%d,%d,%d);", [c getRed], [c getGreen], [c getBlue]];
  }
  else {
    float a = (int) ((float) alpha / 255.0f * 100);
    a /= 100;
    return [NSString stringWithFormat:@"color: rgba(%d,%d,%d,%f);", [c getRed], [c getGreen], [c getBlue], a];
  }
}

+ (NSString *)colorToRGBStringWithRAREUIColor:(RAREUIColor *)c {
  if (c == nil) {
    return nil;
  }
  int alpha = [((RAREUIColor *) nil_chk(c)) getAlpha];
  if (alpha == 255) {
    return [NSString stringWithFormat:@"rgb(%d,%d,%d);", [c getRed], [c getGreen], [c getBlue]];
  }
  else {
    float a = (int) ((float) alpha / 255.0f * 100);
    a /= 100;
    return [NSString stringWithFormat:@"rgba(%d,%d,%d,%f);", [c getRed], [c getGreen], [c getBlue], a];
  }
}

+ (RAREDateContext *)createDateContextWithNSString:(NSString *)format
                                       withBoolean:(BOOL)localize {
  if (format == nil) {
    return nil;
  }
  return (RAREDateContext *) check_class_cast([RAREConversions createContextWithNSString:format withBoolean:localize withBoolean:YES], [RAREDateContext class]);
}

+ (RARENumberContext *)createNumberContextWithNSString:(NSString *)format
                                           withBoolean:(BOOL)localize {
  if (format == nil) {
    return nil;
  }
  return (RARENumberContext *) check_class_cast([RAREConversions createContextWithNSString:format withBoolean:localize withBoolean:NO], [RARENumberContext class]);
}

+ (RAREUTSimpleDateFormatEx *)createDateFormatWithNSString:(NSString *)format
                                               withBoolean:(BOOL)localize {
  if (format == nil) {
    return nil;
  }
  @try {
    RAREUTSimpleDateFormatEx *df = [[RAREUTSimpleDateFormatEx alloc] initWithNSString:format];
    if (localize) {
      format = [df toLocalizedPattern];
      [df applyLocalizedPatternWithNSString:format];
    }
    return df;
  }
  @catch (JavaLangException *e) {
    [((id<RAREiExceptionHandler>) nil_chk([RAREPlatform getDefaultExceptionHandlerWithRAREiWidget:nil])) handleExceptionWithJavaLangThrowable:e];
    return nil;
  }
}

+ (JavaTextNumberFormat *)createNumberFormatWithNSString:(NSString *)format
                                             withBoolean:(BOOL)localize {
  if (format == nil) {
    return nil;
  }
  @try {
    JavaTextNumberFormat *nf = [JavaTextNumberFormat getInstance];
    if (![((NSString *) nil_chk(format)) isEqual:@"*"] && ([nf isKindOfClass:[JavaTextDecimalFormat class]])) {
      JavaTextDecimalFormat *df = (JavaTextDecimalFormat *) check_class_cast(nf, [JavaTextDecimalFormat class]);
      [((JavaTextDecimalFormat *) nil_chk(df)) applyPatternWithNSString:format];
      if (localize) {
        format = [df toLocalizedPattern];
        [df applyLocalizedPatternWithNSString:format];
      }
    }
    return nf;
  }
  @catch (JavaLangException *e) {
    [((id<RAREiExceptionHandler>) nil_chk([RAREPlatform getDefaultExceptionHandlerWithRAREiWidget:nil])) handleExceptionWithJavaLangThrowable:e];
    return nil;
  }
}

+ (id<iSPOTElement>)createSPOTElementWithRAREiWidget:(id<RAREiWidget>)context
                                        withNSString:(NSString *)source {
  if ((source == nil) || ([source sequenceLength] == 0)) {
    return nil;
  }
  JavaIoStringReader *r = [[JavaIoStringReader alloc] initWithNSString:source];
  @try {
    if ([((NSString *) nil_chk(source)) hasPrefix:@"<"]) {
      @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"XML format not supported"];
    }
    else {
      return [RAREDataParser loadSPOTObjectSDFWithRAREiWidget:context withJavaIoReader:r withISPOTElement:nil withNSString:nil withJavaNetURL:nil];
    }
  }
  @catch (JavaLangException *ex) {
    if ([ex isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast(ex, [JavaLangRuntimeException class]);
    }
    else {
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:ex];
    }
  }
}

+ (NSString *)fontToStringWithRAREUIFont:(RAREUIFont *)f {
  NSString *style = @", Plain, ";
  if ([((RAREUIFont *) nil_chk(f)) isBold]) {
    style = [f isItalic] ? @", BoldItalic, " : @", Bold, ";
  }
  else if ([f isItalic]) {
    style = @", Italic, ";
  }
  return [NSString stringWithFormat:@"%@%@%d", [f getFamily], style, [f getSize]];
}

+ (RAREUIFont *)stringToFontWithNSString:(NSString *)value {
  if ((value == nil) || ([value sequenceLength] == 0)) {
    return nil;
  }
  NSString *family = [RAREUTCharScanner getPieceWithNSString:value withChar:',' withInt:1];
  NSString *sstyle = [RAREUTCharScanner getPieceWithNSString:value withChar:',' withInt:2];
  if (sstyle == nil) {
    sstyle = @"plain";
  }
  sstyle = [((NSString *) nil_chk(sstyle)) lowercaseString];
  int style = [RAREUIFont PLAIN];
  if ([((NSString *) nil_chk(sstyle)) contains:@"italic"]) {
    style |= [RAREUIFont ITALIC];
  }
  if ([sstyle contains:@"bold"]) {
    style |= [RAREUIFont BOLD];
  }
  int size = [RAREUTSNumber intValueWithNSString:[RAREUTCharScanner getPieceWithNSString:value withChar:',' withInt:3]];
  if (size < 8) {
    size = 8;
  }
  return [[RAREUIFont alloc] initWithNSString:family withInt:style withInt:size];
}

+ (JavaMathBigDecimal *)toBigDecimalWithNSString:(NSString *)value {
  RAREUTSNumber *num = [[RAREUTSNumber alloc] initWithNSString:value];
  return [RAREUTSDecimal toBigDecimalWithRAREUTSNumber:num];
}

+ (JavaLangBoolean *)toBooleanWithNSString:(NSString *)value {
  return [JavaLangBoolean valueOfWithBoolean:[RAREUTSNumber booleanValueWithNSString:value]];
}

+ (JavaLangLong *)toLongWithNSString:(NSString *)value {
  return [JavaLangLong valueOfWithLong:[RAREUTSNumber longValueWithNSString:value]];
}

- (NSNumber *)toNumberWithNSString:(NSString *)value {
  return [[RAREUTSNumber alloc] initWithNSString:value];
}

+ (id)createContextWithNSString:(NSString *)format
                    withBoolean:(BOOL)localize
                    withBoolean:(BOOL)date {
  if (format == nil) {
    return nil;
  }
  NSString *sep;
  if (date) {
    sep = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getStringWithNSString:@"Rare.format.multiDateItemSeparator"];
  }
  else {
    sep = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getStringWithNSString:@"Rare.format.multiNumberItemSeparator"];
  }
  if (sep == nil) {
    sep = @";";
  }
  @try {
    NSString *iformat = nil;
    NSString *dformat = nil;
    IOSObjectArray *patterns = nil;
    int n = [((NSString *) nil_chk(format)) indexOf:'|'];
    if (n == -1) {
      iformat = format;
    }
    else {
      int len = [format sequenceLength];
      if (n == 0) {
        dformat = [format substring:1];
      }
      else if (n == (len - 1)) {
        iformat = [format substring:0 endIndex:len - 1];
      }
      else {
        iformat = [format substring:0 endIndex:n];
        dformat = [format substring:n + 1];
      }
    }
    if (iformat != nil) {
      if ([iformat indexOfString:sep] != -1) {
        id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:iformat withChar:[((NSString *) nil_chk(sep)) charAtWithInt:0] withBoolean:YES];
        patterns = [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(list)) size] type:[IOSClass classWithClass:[NSString class]]]];
      }
      else {
        patterns = [IOSObjectArray arrayWithObjects:(id[]){ iformat } count:1 type:[IOSClass classWithClass:[NSString class]]];
      }
    }
    if (date) {
      IOSObjectArray *a = nil;
      if (patterns != nil) {
        a = [IOSObjectArray arrayWithLength:(int) [patterns count] type:[IOSClass classWithClass:[JavaTextDateFormat class]]];
        for (int i = 0; i < (int) [a count]; i++) {
          (void) IOSObjectArray_Set(a, i, [RAREConversions createDateFormatWithNSString:IOSObjectArray_Get(patterns, i) withBoolean:localize]);
        }
      }
      RAREUTSimpleDateFormatEx *ddf = (dformat == nil) ? nil : [RAREConversions createDateFormatWithNSString:dformat withBoolean:localize];
      RAREDateContext *def;
      if (date) {
        def = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDefaultDateContext];
      }
      else {
        def = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDefaultDateTimeContext];
      }
      return (def == nil) ? [[RAREDateContext alloc] initWithJavaTextDateFormatArray:a withJavaTextDateFormat:ddf] : [def createWithJavaTextDateFormatArray:a withJavaTextDateFormat:ddf];
    }
    else {
      IOSObjectArray *a = nil;
      if (patterns != nil) {
        a = [IOSObjectArray arrayWithLength:(int) [patterns count] type:[IOSClass classWithClass:[JavaTextNumberFormat class]]];
        for (int i = 0; i < (int) [a count]; i++) {
          (void) IOSObjectArray_Set(a, i, [RAREConversions createNumberFormatWithNSString:IOSObjectArray_Get(patterns, i) withBoolean:localize]);
        }
      }
      JavaTextNumberFormat *ddf = (dformat == nil) ? nil : [RAREConversions createNumberFormatWithNSString:dformat withBoolean:localize];
      RARENumberContext *nc = [[RARENumberContext alloc] initWithJavaTextNumberFormatArray:a withJavaTextNumberFormat:ddf];
      return nc;
    }
  }
  @catch (JavaLangException *e) {
    [((id<RAREiExceptionHandler>) nil_chk([RAREPlatform getDefaultExceptionHandlerWithRAREiWidget:nil])) handleExceptionWithJavaLangThrowable:e];
    return nil;
  }
}

+ (void)initialize {
  if (self == [RAREConversions class]) {
    RAREConversions_perThreadScanner_ = [[RAREConversions_$1 alloc] init];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "colorFromHexStringWithNSString:", NULL, "LRAREUIColor", 0x9, NULL },
    { "colorFromHexStringWithCharArray:withInt:withInt:", NULL, "LRAREUIColor", 0x9, NULL },
    { "colorFromRGBStringWithNSString:", NULL, "LRAREUIColor", 0x9, NULL },
    { "colorFromRGBStringWithCharArray:withInt:withInt:", NULL, "LRAREUIColor", 0x9, NULL },
    { "colorToHEXStringWithRAREUIColor:", NULL, "LNSString", 0x9, NULL },
    { "colorToHEXStringWithJavaLangStringBuilder:withRAREUIColor:", NULL, "LNSString", 0x9, NULL },
    { "colorToCSSStringWithRAREUIColor:", NULL, "LNSString", 0x9, NULL },
    { "colorToRGBStringWithRAREUIColor:", NULL, "LNSString", 0x9, NULL },
    { "createDateContextWithNSString:withBoolean:", NULL, "LRAREDateContext", 0x9, NULL },
    { "createNumberContextWithNSString:withBoolean:", NULL, "LRARENumberContext", 0x9, NULL },
    { "createDateFormatWithNSString:withBoolean:", NULL, "LRAREUTSimpleDateFormatEx", 0x9, NULL },
    { "createNumberFormatWithNSString:withBoolean:", NULL, "LJavaTextNumberFormat", 0x9, NULL },
    { "createSPOTElementWithRAREiWidget:withNSString:", NULL, "LiSPOTElement", 0x9, NULL },
    { "fontToStringWithRAREUIFont:", NULL, "LNSString", 0x9, NULL },
    { "stringToFontWithNSString:", NULL, "LRAREUIFont", 0x9, NULL },
    { "toBigDecimalWithNSString:", NULL, "LJavaMathBigDecimal", 0x9, NULL },
    { "toBooleanWithNSString:", NULL, "LJavaLangBoolean", 0x9, NULL },
    { "toLongWithNSString:", NULL, "LJavaLangLong", 0x9, NULL },
    { "toNumberWithNSString:", NULL, "LNSNumber", 0x1, NULL },
    { "createContextWithNSString:withBoolean:withBoolean:", NULL, "LNSObject", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "perThreadScanner_", NULL, 0xa, "LJavaLangThreadLocal" },
  };
  static J2ObjcClassInfo _RAREConversions = { "Conversions", "com.appnativa.rare.converters", NULL, 0x1, 20, methods, 1, fields, 0, NULL};
  return &_RAREConversions;
}

@end
@implementation RAREConversions_$1

- (RAREUTCharScanner *)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharScanner alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LRAREUTCharScanner", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LRAREUTCharScanner"};
  static J2ObjcClassInfo _RAREConversions_$1 = { "$1", "com.appnativa.rare.converters", "Conversions", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREConversions_$1;
}

@end
