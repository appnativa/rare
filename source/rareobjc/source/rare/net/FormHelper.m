//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/net/FormHelper.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/net/FormHelper.h"
#include "com/appnativa/rare/util/MIMEMap.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/Streams.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/URLEncoder.h"
#include "com/appnativa/util/UTF8Helper.h"
#include "com/appnativa/util/json/JSONException.h"
#include "com/appnativa/util/json/JSONWriter.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation RAREFormHelper

static NSString * RAREFormHelper_BOUNDARY_PREFIX_ = @"--";
static NSString * RAREFormHelper_NEWLINE_ = @"\x0d\n";

+ (NSString *)BOUNDARY_PREFIX {
  return RAREFormHelper_BOUNDARY_PREFIX_;
}

+ (NSString *)NEWLINE {
  return RAREFormHelper_NEWLINE_;
}

+ (void)writeBoundaryEndWithJavaIoWriter:(JavaIoWriter *)writer
                            withNSString:(NSString *)boundary {
  [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:RAREFormHelper_NEWLINE_];
  [writer writeWithNSString:RAREFormHelper_BOUNDARY_PREFIX_];
  [writer writeWithNSString:boundary];
  [writer writeWithNSString:RAREFormHelper_BOUNDARY_PREFIX_];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
}

+ (void)writeFieldHeaderWithBoolean:(BOOL)first
                   withJavaIoWriter:(JavaIoWriter *)writer
                       withNSString:(NSString *)boundary
                       withNSString:(NSString *)name {
  if ((name == nil) || ([name sequenceLength] == 0)) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field name cannot be null or empty."];
  }
  if (!first) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:RAREFormHelper_NEWLINE_];
  }
  [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:RAREFormHelper_BOUNDARY_PREFIX_];
  [writer writeWithNSString:boundary];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  [writer writeWithNSString:[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"", name]];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
}

+ (void)writeFieldHeaderWithBoolean:(BOOL)first
                   withJavaIoWriter:(JavaIoWriter *)writer
                       withNSString:(NSString *)boundary
                       withNSString:(NSString *)name
                       withNSString:(NSString *)mimeType {
  if ((name == nil) || ([name sequenceLength] == 0)) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field name cannot be null or empty."];
  }
  if (!first) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:RAREFormHelper_NEWLINE_];
  }
  [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:RAREFormHelper_BOUNDARY_PREFIX_];
  [writer writeWithNSString:boundary];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  [writer writeWithNSString:[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"", name]];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  if (mimeType != nil) {
    [writer writeWithNSString:@"Content-type: "];
    [writer writeWithNSString:mimeType];
    [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  }
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
}

+ (void)writeFileWithBoolean:(BOOL)first
            withJavaIoWriter:(JavaIoWriter *)writer
                withNSString:(NSString *)boundary
                withNSString:(NSString *)name
                withNSString:(NSString *)file {
  [RAREFormHelper writeFileWithBoolean:first withJavaIoWriter:writer withNSString:boundary withNSString:name withJavaIoFile:[[JavaIoFile alloc] initWithNSString:file] withBoolean:NO];
}

+ (void)writeFileWithBoolean:(BOOL)first
            withJavaIoWriter:(JavaIoWriter *)writer
                withNSString:(NSString *)boundary
                withNSString:(NSString *)name
              withJavaIoFile:(JavaIoFile *)file
                 withBoolean:(BOOL)attachment {
  NSString *fileName = [((JavaIoFile *) nil_chk(file)) getName];
  int n = [((NSString *) nil_chk(fileName)) lastIndexOf:'.'];
  NSString *ext = (n == -1) ? @"bin" : [fileName substring:n + 1];
  NSString *mimeType = [RAREMIMEMap typeFromExtensionWithNSString:ext];
  [RAREFormHelper writeFileHeaderWithBoolean:first withJavaIoWriter:writer withNSString:boundary withNSString:name withNSString:mimeType withNSString:fileName withBoolean:attachment];
  JavaIoFileInputStream *fin = [[JavaIoFileInputStream alloc] initWithJavaIoFile:file];
  [RAREUTStreams streamToWriterWithJavaIoInputStream:fin withJavaIoWriter:writer withCharArray:nil];
  [((JavaIoWriter *) nil_chk(writer)) flush];
}

+ (void)writeFileWithBoolean:(BOOL)first
            withJavaIoWriter:(JavaIoWriter *)writer
                withNSString:(NSString *)boundary
                withNSString:(NSString *)name
                withNSString:(NSString *)mimeType
                withNSString:(NSString *)fileName
              withJavaIoFile:(JavaIoFile *)file
                 withBoolean:(BOOL)attachment {
  if (fileName == nil) {
    fileName = [((JavaIoFile *) nil_chk(file)) getName];
  }
  if (mimeType == nil) {
    int n = [((NSString *) nil_chk(fileName)) lastIndexOf:'.'];
    NSString *ext = (n == -1) ? @"bin" : [fileName substring:n + 1];
    mimeType = [RAREMIMEMap typeFromExtensionWithNSString:ext];
  }
  [RAREFormHelper writeFileHeaderWithBoolean:first withJavaIoWriter:writer withNSString:boundary withNSString:name withNSString:mimeType withNSString:fileName withBoolean:attachment];
  JavaIoFileInputStream *fin = [[JavaIoFileInputStream alloc] initWithJavaIoFile:file];
  [RAREUTStreams streamToWriterWithJavaIoInputStream:fin withJavaIoWriter:writer withCharArray:nil];
  [((JavaIoWriter *) nil_chk(writer)) flush];
}

+ (void)writeFileWithBoolean:(BOOL)first
            withJavaIoWriter:(JavaIoWriter *)writer
                withNSString:(NSString *)boundary
                withNSString:(NSString *)name
                withNSString:(NSString *)mimeType
                withNSString:(NSString *)fileName
            withJavaIoReader:(JavaIoReader *)file
                 withBoolean:(BOOL)attachment {
  if (mimeType == nil) {
    int n = [((NSString *) nil_chk(fileName)) lastIndexOf:'.'];
    NSString *ext = (n == -1) ? @"bin" : [fileName substring:n + 1];
    mimeType = [RAREMIMEMap typeFromExtensionWithNSString:ext];
  }
  [RAREFormHelper writeFileHeaderWithBoolean:first withJavaIoWriter:writer withNSString:boundary withNSString:name withNSString:mimeType withNSString:fileName withBoolean:attachment];
  [RAREUTStreams readerToWriterWithJavaIoReader:file withJavaIoWriter:writer withCharArray:nil];
  [((JavaIoWriter *) nil_chk(writer)) flush];
}

+ (void)writeFileHeaderWithBoolean:(BOOL)first
                  withJavaIoWriter:(JavaIoWriter *)writer
                      withNSString:(NSString *)boundary
                      withNSString:(NSString *)name
                      withNSString:(NSString *)mimeType
                      withNSString:(NSString *)fileName
                       withBoolean:(BOOL)attachment {
  if ((fileName == nil) || ([fileName sequenceLength] == 0)) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"File name cannot be null or empty."];
  }
  if (!first) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:RAREFormHelper_NEWLINE_];
  }
  [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:RAREFormHelper_BOUNDARY_PREFIX_];
  [writer writeWithNSString:boundary];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  if (attachment) {
    [writer writeWithNSString:[NSString stringWithFormat:@"Content-Disposition: attachment; filename=\"%@\"", fileName]];
  }
  else {
    [writer writeWithNSString:[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"; filename=\"%@\"", name, fileName]];
  }
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  if (mimeType != nil) {
    [writer writeWithNSString:[NSString stringWithFormat:@"Content-Type: %@", mimeType]];
    [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  }
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
}

+ (void)writeHTTPContentWithJavaIoWriter:(JavaIoWriter *)writer
                            withNSString:(NSString *)name
                            withNSString:(NSString *)value {
  [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:@"Content-Disposition: form-data; name=\""];
  [writer writeWithNSString:name];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  [writer writeWithNSString:value];
}

+ (void)writeHTTPContentWithBoolean:(BOOL)first
                   withJavaIoWriter:(JavaIoWriter *)writer
                       withNSString:(NSString *)boundary
                       withNSString:(NSString *)name
                       withIntArray:(IOSIntArray *)value {
  NSString *s;
  int len = (value == nil) ? 0 : (int) [value count];
  for (int i = 0; i < len; i++) {
    s = [RAREUTStringCache valueOfWithInt:IOSIntArray_Get(nil_chk(value), i)];
    [RAREFormHelper writeFieldHeaderWithBoolean:first withJavaIoWriter:writer withNSString:boundary withNSString:name];
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:s];
  }
}

+ (void)writeHTTPContentWithBoolean:(BOOL)first
                    withRAREiWidget:(id<RAREiWidget>)context
                   withJavaIoWriter:(JavaIoWriter *)writer
                       withNSString:(NSString *)boundary
                    withJavaUtilMap:(id<JavaUtilMap>)values
                        withBoolean:(BOOL)expand {
  if (values != nil) {
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([values entrySet])) iterator];
    id<JavaUtilMap_Entry> e;
    NSString *value;
    NSString *name;
    id o;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      e = [it next];
      name = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]);
      o = [e getValue];
      if ([o isKindOfClass:[JavaIoFile class]]) {
        [RAREFormHelper writeFileWithBoolean:first withJavaIoWriter:writer withNSString:boundary withNSString:name withJavaIoFile:(JavaIoFile *) check_class_cast(o, [JavaIoFile class]) withBoolean:[@"__attachment__" isEqual:name]];
        first = NO;
      }
      else if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[JavaIoFile class]]] isInstance:o]) {
        {
          IOSObjectArray *a__ = (IOSObjectArray *) check_class_cast(o, [IOSObjectArray class]);
          id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            JavaIoFile *f = (*b__++);
            [RAREFormHelper writeFileWithBoolean:first withJavaIoWriter:writer withNSString:boundary withNSString:name withJavaIoFile:f withBoolean:YES];
            first = NO;
          }
        }
      }
      else {
        value = (o == nil) ? @"" : [o description];
        [RAREFormHelper writeFieldHeaderWithBoolean:first withJavaIoWriter:writer withNSString:boundary withNSString:name withNSString:@"text/plain; charset=utf-8"];
        first = NO;
        if (value != nil) {
          if (expand && (context != nil)) {
            value = [context expandStringWithNSString:value withBoolean:NO];
            value = [RAREUTUTF8Helper utf8StringWithNSString:value];
          }
          [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:value];
        }
      }
    }
  }
}

+ (void)writeHTTPContentWithBoolean:(BOOL)first
                   withJavaIoWriter:(JavaIoWriter *)writer
                       withNSString:(NSString *)boundary
                       withNSString:(NSString *)name
                  withNSStringArray:(IOSObjectArray *)value
                        withBoolean:(BOOL)encode {
  int len = (value == nil) ? 0 : (int) [value count];
  NSString *s;
  for (int i = 0; i < len; i++) {
    [RAREFormHelper writeFieldHeaderWithBoolean:first withJavaIoWriter:writer withNSString:boundary withNSString:name];
    s = IOSObjectArray_Get(nil_chk(value), i);
    if (s != nil) {
      if (encode) {
        s = [RAREUTUTF8Helper utf8StringWithNSString:s];
      }
      [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:s];
      [writer writeWithNSString:@"\x0d\n"];
    }
  }
}

+ (BOOL)writeHTTPValueWithBoolean:(BOOL)first
                 withJavaIoWriter:(JavaIoWriter *)writer
                     withNSString:(NSString *)name
                     withIntArray:(IOSIntArray *)value {
  int len = (value == nil) ? 0 : (int) [value count];
  for (int i = 0; i < len; i++) {
    if (!first) {
      [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'&'];
    }
    first = NO;
    [RAREUTURLEncoder encodeWithNSString:name withNSString:@"ISO-8859-1" withJavaIoWriter:writer];
    [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'='];
    [writer writeWithNSString:[RAREUTStringCache valueOfWithInt:IOSIntArray_Get(nil_chk(value), i)]];
  }
  return !first;
}

+ (BOOL)writeHTTPValueWithBoolean:(BOOL)first
                 withJavaIoWriter:(JavaIoWriter *)writer
                     withNSString:(NSString *)name
                withNSStringArray:(IOSObjectArray *)value {
  int len = (value == nil) ? 0 : (int) [value count];
  for (int i = 0; i < len; i++) {
    if (!first) {
      [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'&'];
    }
    first = NO;
    [RAREUTURLEncoder encodeWithNSString:name withNSString:@"ISO-8859-1" withJavaIoWriter:writer];
    [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'='];
    [writer writeWithNSString:IOSObjectArray_Get(nil_chk(value), i)];
  }
  return !first;
}

+ (BOOL)writeHTTPValuesWithBoolean:(BOOL)first
                   withRAREiWidget:(id<RAREiWidget>)context
                  withJavaIoWriter:(JavaIoWriter *)writer
                   withJavaUtilMap:(id<JavaUtilMap>)values
                       withBoolean:(BOOL)expand {
  if (values != nil) {
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([values entrySet])) iterator];
    id<JavaUtilMap_Entry> e;
    NSString *value;
    id o;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      e = [it next];
      if (!first) {
        [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'&'];
      }
      else {
        first = NO;
      }
      [RAREUTURLEncoder encodeWithNSString:(NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]) withNSString:@"US-ASCII" withJavaIoWriter:writer];
      [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'='];
      o = [e getValue];
      value = (o == nil) ? nil : [o description];
      if (value != nil) {
        if (expand && (context != nil)) {
          [context expandStringWithNSString:value withBoolean:YES withJavaIoWriter:writer];
        }
        else {
          [writer writeWithNSString:value];
        }
      }
    }
  }
  return !first;
}

+ (BOOL)writeJSONValuesWithRAREiWidget:(id<RAREiWidget>)context
                  withRAREUTJSONWriter:(RAREUTJSONWriter *)writer
                       withJavaUtilMap:(id<JavaUtilMap>)values
                           withBoolean:(BOOL)expand {
  BOOL written = NO;
  if ((values != nil) && (![values isEmpty])) {
    @try {
      id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([values entrySet])) iterator];
      id<JavaUtilMap_Entry> e;
      NSString *value;
      id o;
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        e = [it next];
        o = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
        value = (o == nil) ? nil : [o description];
        if ((value != nil) && expand && (context != nil)) {
          value = [context expandStringWithNSString:value withBoolean:NO];
        }
        if (value != nil) {
          if (!written) {
            written = YES;
          }
          (void) [((RAREUTJSONWriter *) nil_chk(writer)) keyWithNSString:(NSString *) check_class_cast([e getKey], [NSString class])];
          (void) [writer valueWithId:value];
        }
      }
    }
    @catch (RAREUTJSONException *e) {
      @throw [[JavaIoIOException alloc] initWithJavaLangThrowable:e];
    }
  }
  return written;
}

+ (void)writeMultiPartFieldHeaderWithBoolean:(BOOL)first
                            withJavaIoWriter:(JavaIoWriter *)writer
                                withNSString:(NSString *)boundary
                                withNSString:(NSString *)name
                                withNSString:(NSString *)partboundary {
  if ((name == nil) || ([name sequenceLength] == 0)) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Field name cannot be null or empty."];
  }
  if (first) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:RAREFormHelper_NEWLINE_];
  }
  [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:RAREFormHelper_BOUNDARY_PREFIX_];
  [writer writeWithNSString:boundary];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  [writer writeWithNSString:[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"%@\"", name]];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  [writer writeWithNSString:[NSString stringWithFormat:@"Content-type: multipart/mixed, boundary=%@", partboundary]];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
  [writer writeWithNSString:RAREFormHelper_NEWLINE_];
}

+ (BOOL)writeRawHTTPValuesWithBoolean:(BOOL)first
                      withRAREiWidget:(id<RAREiWidget>)context
                     withJavaIoWriter:(JavaIoWriter *)writer
                      withJavaUtilMap:(id<JavaUtilMap>)values {
  if (values != nil) {
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([values entrySet])) iterator];
    id<JavaUtilMap_Entry> e;
    NSString *value;
    id o;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      e = [it next];
      if (!first) {
        [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'&'];
      }
      else {
        first = NO;
      }
      [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:(NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class])];
      [writer writeWithInt:'='];
      o = [e getValue];
      value = (o == nil) ? nil : [o description];
      if (value != nil) {
        [writer writeWithNSString:value];
      }
    }
  }
  return !first;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "writeBoundaryEndWithJavaIoWriter:withNSString:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeFieldHeaderWithBoolean:withJavaIoWriter:withNSString:withNSString:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeFieldHeaderWithBoolean:withJavaIoWriter:withNSString:withNSString:withNSString:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeFileWithBoolean:withJavaIoWriter:withNSString:withNSString:withNSString:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeFileWithBoolean:withJavaIoWriter:withNSString:withNSString:withJavaIoFile:withBoolean:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeFileWithBoolean:withJavaIoWriter:withNSString:withNSString:withNSString:withNSString:withJavaIoFile:withBoolean:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeFileWithBoolean:withJavaIoWriter:withNSString:withNSString:withNSString:withNSString:withJavaIoReader:withBoolean:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeFileHeaderWithBoolean:withJavaIoWriter:withNSString:withNSString:withNSString:withNSString:withBoolean:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeHTTPContentWithJavaIoWriter:withNSString:withNSString:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeHTTPContentWithBoolean:withJavaIoWriter:withNSString:withNSString:withIntArray:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeHTTPContentWithBoolean:withRAREiWidget:withJavaIoWriter:withNSString:withJavaUtilMap:withBoolean:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeHTTPContentWithBoolean:withJavaIoWriter:withNSString:withNSString:withNSStringArray:withBoolean:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeHTTPValueWithBoolean:withJavaIoWriter:withNSString:withIntArray:", NULL, "Z", 0x9, "JavaIoIOException" },
    { "writeHTTPValueWithBoolean:withJavaIoWriter:withNSString:withNSStringArray:", NULL, "Z", 0x9, "JavaIoIOException" },
    { "writeHTTPValuesWithBoolean:withRAREiWidget:withJavaIoWriter:withJavaUtilMap:withBoolean:", NULL, "Z", 0x9, "JavaIoIOException" },
    { "writeJSONValuesWithRAREiWidget:withRAREUTJSONWriter:withJavaUtilMap:withBoolean:", NULL, "Z", 0x9, "JavaIoIOException" },
    { "writeMultiPartFieldHeaderWithBoolean:withJavaIoWriter:withNSString:withNSString:withNSString:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeRawHTTPValuesWithBoolean:withRAREiWidget:withJavaIoWriter:withJavaUtilMap:", NULL, "Z", 0x9, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "BOUNDARY_PREFIX_", NULL, 0x19, "LNSString" },
    { "NEWLINE_", NULL, 0x19, "LNSString" },
  };
  static J2ObjcClassInfo _RAREFormHelper = { "FormHelper", "com.appnativa.rare.net", NULL, 0x1, 18, methods, 2, fields, 0, NULL};
  return &_RAREFormHelper;
}

@end
