//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/net/InlineURLConnection.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/net/InlineURLConnection.h"
#include "com/appnativa/rare/net/JavaURLConnection.h"
#include "com/appnativa/rare/net/NetHelper.h"
#include "com/appnativa/util/ASCII85InputStream.h"
#include "com/appnativa/util/Base64.h"
#include "com/appnativa/util/ByteArray.h"
#include "com/appnativa/util/Streams.h"
#include "com/appnativa/util/io/BufferedReaderEx.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Exception.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/util/Map.h"

@implementation RAREInlineURLConnection

- (id)initWithJavaNetURL:(JavaNetURL *)url {
  return [self initRAREInlineURLConnectionWithJavaNetURL:url withNSString:nil];
}

- (id)initRAREInlineURLConnectionWithJavaNetURL:(JavaNetURL *)url
                                   withNSString:(NSString *)type {
  if (self = [super initWithJavaNetURL:url]) {
    defaultCharset_ = @"ISO-8859-1";
    NSString *s = [((JavaNetURL *) nil_chk(url)) getPath];
    int n = [((NSString *) nil_chk(s)) indexOf:','];
    inlineData_ = [s substring:n + 1];
    s = [s substring:0 endIndex:n];
    n = [((NSString *) nil_chk(s)) indexOf:';'];
    if (n != -1) {
      mimeType_ = [((NSString *) nil_chk([s substring:0 endIndex:n])) trim];
      s = [((NSString *) nil_chk([s substring:n + 1])) trim];
      n = [((NSString *) nil_chk(s)) indexOf:';'];
      if (n == -1) {
        contentEncoding_ = s;
      }
      else {
        if ([s hasPrefix:@"charset="]) {
          charSet_ = [s substring:[@"charset=" sequenceLength] endIndex:n];
        }
        contentEncoding_ = [((NSString *) nil_chk([s substring:n + 1])) trim];
      }
    }
    else {
      mimeType_ = s;
    }
    if (type != nil) {
      mimeType_ = type;
    }
  }
  return self;
}

- (id)initWithJavaNetURL:(JavaNetURL *)url
            withNSString:(NSString *)type {
  return [self initRAREInlineURLConnectionWithJavaNetURL:url withNSString:type];
}

- (id)initWithJavaNetURL:(JavaNetURL *)url
            withNSString:(NSString *)data
            withNSString:(NSString *)mime
            withNSString:(NSString *)enc {
  if (self = [super initWithJavaNetURL:url]) {
    defaultCharset_ = @"ISO-8859-1";
    inlineData_ = data;
    mimeType_ = mime;
    contentEncoding_ = enc;
    charSet_ = [RAREJavaURLConnection getCharsetWithNSString:mimeType_ withNSString:@"ISO-8859-1"];
  }
  return self;
}

- (void)close {
}

- (void)connect {
}

+ (JavaNetURL *)createURLWithNSString:(NSString *)data
                         withNSString:(NSString *)mimeType
                         withNSString:(NSString *)enc {
  return [RAREaNetHelper createInlineURLWithNSString:data withNSString:mimeType withNSString:enc];
}

+ (JavaNetURL *)createURLWithNSString:(NSString *)hier_part {
  @try {
    int n = [((NSString *) nil_chk(hier_part)) indexOf:','];
    NSString *data = [hier_part substring:n + 1];
    int p = [hier_part indexOf:';'];
    NSString *enc = (p == -1) ? nil : [hier_part substring:p + 1 endIndex:n];
    if (p == -1) {
      p = n;
    }
    NSString *mimeType = [hier_part substring:0 endIndex:p];
    if ([((NSString *) nil_chk(mimeType)) sequenceLength] == 0) {
      mimeType = @"application/x-www-form-urlencoded";
    }
    return [RAREaNetHelper createInlineURLWithNSString:data withNSString:mimeType withNSString:enc];
  }
  @catch (JavaLangException *e) {
    @throw [[JavaNetMalformedURLException alloc] initWithNSString:hier_part];
  }
}

- (void)disconnect {
}

- (void)dispose {
}

- (BOOL)exist {
  return YES;
}

- (void)open {
  [self connect];
}

- (void)setCharsetWithNSString:(NSString *)cs {
  charSet_ = cs;
}

- (void)setDefaultCharsetWithNSString:(NSString *)charset {
  if (charset == nil) {
    charset = @"ISO-8859-1";
  }
  defaultCharset_ = charset;
}

- (void)setHeaderFieldWithNSString:(NSString *)name
                      withNSString:(NSString *)value {
  if ([@"content-type" equalsIgnoreCase:name]) {
    mimeType_ = value;
  }
}

- (RAREUTByteArray *)getByteArray {
  JavaIoInputStream *in = [self getInputStream];
  if ([in isKindOfClass:[RAREUTByteArray class]]) {
    return (RAREUTByteArray *) check_class_cast(in, [RAREUTByteArray class]);
  }
  RAREUTByteArray *ba = [[RAREUTByteArray alloc] initWithInt:[((NSString *) nil_chk(inlineData_)) sequenceLength]];
  (void) [RAREUTStreams streamToBytesWithJavaIoInputStream:in withRAREUTByteArray:ba];
  return ba;
}

- (NSString *)getCharset {
  return (charSet_ != nil) ? charSet_ : defaultCharset_;
}

- (id)getConnectionObject {
  return self;
}

- (IOSClass *)getConnectionObjectClass {
  return [self getClass];
}

- (NSString *)getContentAsString {
  return inlineData_;
}

- (int)getContentLength {
  return [((NSString *) nil_chk(inlineData_)) sequenceLength];
}

- (NSString *)getContentType {
  NSString *s = mimeType_;
  if (s == nil) {
    s = @"text/plain";
  }
  return s;
}

- (NSString *)getHeaderFieldWithNSString:(NSString *)name {
  return [RAREJavaURLConnection getHeaderFieldWithRAREiURLConnection:self withNSString:name];
}

- (id<JavaUtilMap>)getHeaderFields {
  return [RAREJavaURLConnection getHeaderFieldsWithRAREiURLConnection:self];
}

- (JavaIoInputStream *)getInputStream {
  IOSByteArray *bytes = nil;
  if (contentEncoding_ != nil) {
    if ([contentEncoding_ isEqual:@"base64"]) {
      bytes = [RAREUTBase64 decodeWithNSString:inlineData_];
    }
    else if ([contentEncoding_ equalsIgnoreCase:@"base85"] || [contentEncoding_ equalsIgnoreCase:@"ascii85"]) {
      bytes = [((NSString *) nil_chk(inlineData_)) getBytesWithCharsetName:@"US-ASCII"];
      return [[RAREUTASCII85InputStream alloc] initWithJavaIoInputStream:[[RAREUTByteArray alloc] initWithByteArray:bytes]];
    }
  }
  if (bytes == nil) {
    bytes = [((NSString *) nil_chk(inlineData_)) getBytesWithCharsetName:[self getCharset]];
  }
  return [[RAREUTByteArray alloc] initWithByteArray:bytes];
}

- (JavaIoReader *)getReader {
  if (contentEncoding_ != nil) {
    return [[RAREUTBufferedReaderEx alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[self getInputStream] withNSString:[self getCharset]]];
  }
  return [[RAREUTBufferedReaderEx alloc] initWithJavaIoReader:[[JavaIoStringReader alloc] initWithNSString:inlineData_] withInt:([((NSString *) nil_chk(inlineData_)) sequenceLength] == 0) ? 1 : [inlineData_ sequenceLength]];
}

- (int)getResponseCode {
  return 200;
}

+ (BOOL)isInlineURLWithJavaNetURL:(JavaNetURL *)url {
  if (url == nil) {
    return NO;
  }
  if ([RAREaNetHelper hasStreamHandlerPermission]) {
    return [((NSString *) nil_chk([((JavaNetURL *) nil_chk(url)) getProtocol])) isEqual:[RAREiConstants INLINE_PROTOCOL_STRING]];
  }
  return [((NSString *) nil_chk([((JavaNetURL *) nil_chk(url)) getHost])) isEqual:[RAREiConstants INLINE_PROTOCOL_HOSTSTRING]];
}

- (void)copyAllFieldsTo:(RAREInlineURLConnection *)other {
  [super copyAllFieldsTo:other];
  other->charSet_ = charSet_;
  other->contentEncoding_ = contentEncoding_;
  other->defaultCharset_ = defaultCharset_;
  other->externalForm_ = externalForm_;
  other->inlineData_ = inlineData_;
  other->mimeType_ = mimeType_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "connect", NULL, "V", 0x1, "JavaIoIOException" },
    { "createURLWithNSString:withNSString:withNSString:", NULL, "LJavaNetURL", 0x9, "JavaNetMalformedURLException" },
    { "createURLWithNSString:", NULL, "LJavaNetURL", 0x9, "JavaNetMalformedURLException" },
    { "exist", NULL, "Z", 0x1, NULL },
    { "open", NULL, "V", 0x1, "JavaIoIOException" },
    { "getByteArray", NULL, "LRAREUTByteArray", 0x1, "JavaIoIOException" },
    { "getCharset", NULL, "LNSString", 0x1, NULL },
    { "getConnectionObject", NULL, "LNSObject", 0x1, NULL },
    { "getConnectionObjectClass", NULL, "LIOSClass", 0x1, NULL },
    { "getContentAsString", NULL, "LNSString", 0x1, "JavaIoIOException" },
    { "getContentType", NULL, "LNSString", 0x1, NULL },
    { "getHeaderFieldWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getHeaderFields", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getInputStream", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "getReader", NULL, "LJavaIoReader", 0x1, "JavaIoIOException" },
    { "isInlineURLWithJavaNetURL:", NULL, "Z", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "externalForm_", NULL, 0x0, "LNSString" },
  };
  static J2ObjcClassInfo _RAREInlineURLConnection = { "InlineURLConnection", "com.appnativa.rare.net", NULL, 0x1, 16, methods, 1, fields, 0, NULL};
  return &_RAREInlineURLConnection;
}

@end
