//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/net/MultipartMimeHandler.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "com/appnativa/rare/net/JavaURLConnection.h"
#include "com/appnativa/rare/net/MultipartInputStream.h"
#include "com/appnativa/rare/net/MultipartMimeHandler.h"
#include "com/appnativa/rare/net/iMultipartMimeHandler.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/Streams.h"
#include "com/appnativa/util/io/BufferedReaderEx.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

@implementation RAREMultipartMimeHandler

- (id<RAREiMultipartMimeHandler_iMultipart>)getFirstPartWithJavaIoInputStream:(JavaIoInputStream *)stream
                                                                 withNSString:(NSString *)type {
  int n = [((NSString *) nil_chk(type)) indexOfString:@"boundary="];
  if (n == -1) {
    @throw [[JavaIoIOException alloc] initWithNSString:@"missing boundary for multipart MIME document"];
  }
  RAREUTCharScanner *sc = [[RAREUTCharScanner alloc] initWithNSString:type];
  [sc consumeWithInt:n + 9];
  (void) [sc unquoteWithBoolean:NO];
  RAREMultipartInputStream *mi = [[RAREMultipartInputStream alloc] initWithJavaIoInputStream:stream withNSString:[sc getLeftOver] withBoolean:YES];
  [mi nextPart];
  return [[RAREMultipartMimeHandler_Multipart alloc] initWithRAREMultipartInputStream:mi];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getFirstPartWithJavaIoInputStream:withNSString:", NULL, "LRAREiMultipartMimeHandler_iMultipart", 0x1, "JavaIoIOException" },
  };
  static J2ObjcClassInfo _RAREMultipartMimeHandler = { "MultipartMimeHandler", "com.appnativa.rare.net", NULL, 0x1, 1, methods, 0, NULL, 0, NULL};
  return &_RAREMultipartMimeHandler;
}

@end
@implementation RAREMultipartMimeHandler_Multipart

- (id)initWithRAREMultipartInputStream:(RAREMultipartInputStream *)mpi {
  if (self = [super init]) {
    self->mpStream_ = mpi;
    while ([((RAREMultipartInputStream *) nil_chk(mpi)) nextHeader]) {
      [self addHeaderWithNSString:[mpi getHeaderName] withNSString:[mpi getHeaderValue]];
    }
  }
  return self;
}

- (id<RAREiMultipartMimeHandler_iMultipart>)nextPart {
  if (![((RAREMultipartInputStream *) nil_chk(mpStream_)) nextPart]) {
    return nil;
  }
  return [[RAREMultipartMimeHandler_Multipart alloc] initWithRAREMultipartInputStream:mpStream_];
}

- (id)getContent {
  return mpStream_;
}

- (NSString *)getContentType {
  if ((mHeaders_ == nil) || (contentType_ != nil)) {
    return contentType_;
  }
  contentType_ = [self getHeaderWithNSString:@"content-type"];
  return contentType_;
}

- (NSString *)getHeaderWithNSString:(NSString *)name {
  if (mHeaders_ == nil) {
    return nil;
  }
  name = [((NSString *) nil_chk(name)) lowercaseStringWithJRELocale:[JavaUtilLocale US]];
  id o = [((id<JavaUtilMap>) nil_chk(mHeaders_)) getWithId:name];
  if ([o isKindOfClass:[NSString class]]) {
    return (NSString *) check_class_cast(o, [NSString class]);
  }
  if ([o conformsToProtocol: @protocol(JavaUtilList)]) {
    return (NSString *) check_class_cast([((id<JavaUtilList>) check_protocol_cast(o, @protocol(JavaUtilList))) getWithInt:[((id<JavaUtilList>) check_protocol_cast(o, @protocol(JavaUtilList))) size] - 1], [NSString class]);
  }
  return nil;
}

- (id<JavaUtilMap>)getHeaders {
  return mHeaders_;
}

- (JavaIoInputStream *)getInputStream {
  return mpStream_;
}

- (NSString *)getPreamble {
  return [((RAREMultipartInputStream *) nil_chk(mpStream_)) getPreamble];
}

- (void)addHeaderWithNSString:(NSString *)name
                 withNSString:(NSString *)value {
  if (mHeaders_ == nil) {
    mHeaders_ = [[JavaUtilHashMap alloc] init];
  }
  name = [((NSString *) nil_chk(name)) lowercaseStringWithJRELocale:[JavaUtilLocale US]];
  id o = [((id<JavaUtilMap>) nil_chk(mHeaders_)) getWithId:name];
  if (o == nil) {
    (void) [mHeaders_ putWithId:name withId:value];
  }
  else {
    if ([o conformsToProtocol: @protocol(JavaUtilList)]) {
      [((id<JavaUtilList>) check_protocol_cast(o, @protocol(JavaUtilList))) addWithId:value];
    }
    else {
      JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
      [list addWithId:o];
      [list addWithId:value];
      (void) [mHeaders_ putWithId:name withId:list];
    }
  }
}

- (NSString *)getContentAsString {
  return [RAREUTStreams readerToStringWithJavaIoReader:[self getReader]];
}

- (JavaIoReader *)getReader {
  NSString *enc = [self getHeaderWithNSString:@"content-encoding"];
  JavaIoReader *r;
  NSString *cs = [RAREJavaURLConnection getCharsetWithNSString:[self getContentType] withNSString:nil];
  int bz = [self getBufferSize];
  if (enc == nil) {
    r = [[RAREUTBufferedReaderEx alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[self getInputStream] withNSString:cs]];
  }
  else {
    r = [RAREUTStreams getDecodingReaderWithJavaIoInputStream:[self getInputStream] withNSString:enc withNSString:cs withInt:bz];
  }
  return r;
}

- (int)getBufferSize {
  int n = [RAREUTSNumber intValueWithNSString:[self getHeaderWithNSString:@"content-length"]];
  if ((n < 1) || (n > 4096)) {
    n = 4096;
  }
  return n;
}

- (void)copyAllFieldsTo:(RAREMultipartMimeHandler_Multipart *)other {
  [super copyAllFieldsTo:other];
  other->contentType_ = contentType_;
  other->mHeaders_ = mHeaders_;
  other->mpStream_ = mpStream_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithRAREMultipartInputStream:", NULL, NULL, 0x1, "JavaIoIOException" },
    { "nextPart", NULL, "LRAREiMultipartMimeHandler_iMultipart", 0x1, "JavaIoIOException" },
    { "getContent", NULL, "LNSObject", 0x1, "JavaIoIOException" },
    { "getContentType", NULL, "LNSString", 0x1, NULL },
    { "getHeaderWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getHeaders", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getInputStream", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "getPreamble", NULL, "LNSString", 0x1, NULL },
    { "addHeaderWithNSString:withNSString:", NULL, "V", 0x4, NULL },
    { "getContentAsString", NULL, "LNSString", 0x1, "JavaIoIOException" },
    { "getReader", NULL, "LJavaIoReader", 0x1, "JavaIoIOException" },
    { "getBufferSize", NULL, "I", 0x2, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "mHeaders_", NULL, 0x4, "LJavaUtilMap" },
    { "mpStream_", NULL, 0x4, "LRAREMultipartInputStream" },
  };
  static J2ObjcClassInfo _RAREMultipartMimeHandler_Multipart = { "Multipart", "com.appnativa.rare.net", "MultipartMimeHandler", 0x9, 12, methods, 2, fields, 0, NULL};
  return &_RAREMultipartMimeHandler_Multipart;
}

@end
