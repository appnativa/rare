//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/rare/net/JavaURLConnection.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/HTTPException.h"
#include "com/appnativa/rare/net/InlineURLConnection.h"
#include "com/appnativa/rare/net/JavaURLConnection.h"
#include "com/appnativa/rare/net/iConnectionChecker.h"
#include "com/appnativa/rare/net/iURLConnection.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/util/MIMEMap.h"
#include "com/appnativa/util/Base64.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/appnativa/util/Streams.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/io/BufferedReaderEx.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

@implementation RAREJavaURLConnection

static int RAREJavaURLConnection_MAX_REDIRECTS_ = 5;
static BOOL RAREJavaURLConnection_disableHTTPSKeepAlive_;
static BOOL RAREJavaURLConnection_disableKeepAlive_;
static id<RAREiConnectionChecker> RAREJavaURLConnection_connectionChecker_;
static BOOL RAREJavaURLConnection_connectionCheckerEnabled_;
static NSString * RAREJavaURLConnection_httpAgent_;
static long long int RAREJavaURLConnection_lastConnectionSuccess_;
static RAREUTIdentityArrayList * RAREJavaURLConnection_openConnections_;
static JavaUtilConcurrentLocksReentrantLock * RAREJavaURLConnection_openLock_;
static BOOL RAREJavaURLConnection_trackOpenConnections_;

+ (int)MAX_REDIRECTS {
  return RAREJavaURLConnection_MAX_REDIRECTS_;
}

+ (int *)MAX_REDIRECTSRef {
  return &RAREJavaURLConnection_MAX_REDIRECTS_;
}

+ (BOOL)disableHTTPSKeepAlive {
  return RAREJavaURLConnection_disableHTTPSKeepAlive_;
}

+ (BOOL *)disableHTTPSKeepAliveRef {
  return &RAREJavaURLConnection_disableHTTPSKeepAlive_;
}

+ (BOOL)disableKeepAlive {
  return RAREJavaURLConnection_disableKeepAlive_;
}

+ (BOOL *)disableKeepAliveRef {
  return &RAREJavaURLConnection_disableKeepAlive_;
}

+ (id<RAREiConnectionChecker>)connectionChecker {
  return RAREJavaURLConnection_connectionChecker_;
}

+ (void)setConnectionChecker:(id<RAREiConnectionChecker>)connectionChecker {
  RAREJavaURLConnection_connectionChecker_ = connectionChecker;
}

+ (BOOL)connectionCheckerEnabled {
  return RAREJavaURLConnection_connectionCheckerEnabled_;
}

+ (BOOL *)connectionCheckerEnabledRef {
  return &RAREJavaURLConnection_connectionCheckerEnabled_;
}

+ (NSString *)httpAgent {
  return RAREJavaURLConnection_httpAgent_;
}

+ (long long int)lastConnectionSuccess {
  return RAREJavaURLConnection_lastConnectionSuccess_;
}

+ (long long int *)lastConnectionSuccessRef {
  return &RAREJavaURLConnection_lastConnectionSuccess_;
}

+ (RAREUTIdentityArrayList *)openConnections {
  return RAREJavaURLConnection_openConnections_;
}

+ (void)setOpenConnections:(RAREUTIdentityArrayList *)openConnections {
  RAREJavaURLConnection_openConnections_ = openConnections;
}

+ (JavaUtilConcurrentLocksReentrantLock *)openLock {
  return RAREJavaURLConnection_openLock_;
}

+ (void)setOpenLock:(JavaUtilConcurrentLocksReentrantLock *)openLock {
  RAREJavaURLConnection_openLock_ = openLock;
}

+ (BOOL)trackOpenConnections {
  return RAREJavaURLConnection_trackOpenConnections_;
}

+ (BOOL *)trackOpenConnectionsRef {
  return &RAREJavaURLConnection_trackOpenConnections_;
}

- (id)initWithJavaNetURLConnection:(JavaNetURLConnection *)conn {
  return [self initRAREJavaURLConnectionWithJavaNetURLConnection:conn withNSString:nil];
}

- (id)initRAREJavaURLConnectionWithJavaNetURLConnection:(JavaNetURLConnection *)conn
                                           withNSString:(NSString *)userInfo {
  if (self = [super init]) {
    defaultCharset_ = @"ISO-8859-1";
    handleRedirection_ = YES;
    aConnection_ = conn;
    if ([aConnection_ isKindOfClass:[JavaNetHttpURLConnection class]]) {
      if (RAREJavaURLConnection_httpAgent_ != nil) {
        [((JavaNetHttpURLConnection *) check_class_cast(conn, [JavaNetHttpURLConnection class])) setRequestPropertyWithNSString:@"User-Agent" withNSString:RAREJavaURLConnection_httpAgent_];
      }
      if (RAREJavaURLConnection_disableKeepAlive_) {
        [((JavaNetHttpURLConnection *) check_class_cast(conn, [JavaNetHttpURLConnection class])) setRequestPropertyWithNSString:@"Connection" withNSString:@"close"];
      }
      else if (RAREJavaURLConnection_disableHTTPSKeepAlive_ && [((NSString *) nil_chk([((JavaNetURL *) nil_chk([((JavaNetURLConnection *) nil_chk(conn)) getURL])) getProtocol])) isEqual:@"https"]) {
        [((JavaNetHttpURLConnection *) check_class_cast(conn, [JavaNetHttpURLConnection class])) setRequestPropertyWithNSString:@"Connection" withNSString:@"close"];
      }
    }
    NSString *ui = [((JavaNetURL *) nil_chk([((JavaNetURLConnection *) nil_chk(aConnection_)) getURL])) getUserInfo];
    if (ui == nil) {
      ui = userInfo;
    }
    if (ui != nil) {
      if ([ui indexOf:':'] != -1) {
        ui = [RAREUTBase64 encodeWithByteArray:[ui getBytes]];
        int n = [((NSString *) nil_chk(ui)) indexOf:0x000a];
        if (n != -1) {
          ui = [RAREUTCharArray removeLinefeedsWithNSString:ui];
        }
      }
      [aConnection_ setRequestPropertyWithNSString:@"Authorization" withNSString:[NSString stringWithFormat:@"Basic %@", ui]];
    }
  }
  return self;
}

- (id)initWithJavaNetURLConnection:(JavaNetURLConnection *)conn
                      withNSString:(NSString *)userInfo {
  return [self initRAREJavaURLConnectionWithJavaNetURLConnection:conn withNSString:userInfo];
}

- (id)initWithJavaNetURLConnection:(JavaNetURLConnection *)conn
                      withNSString:(NSString *)userInfo
                      withNSString:(NSString *)mimeType {
  if (self = [self initRAREJavaURLConnectionWithJavaNetURLConnection:conn withNSString:userInfo]) {
    self->mimeType_ = mimeType;
  }
  return self;
}

+ (NSString *)baseToExternalFormWithJavaNetURL:(JavaNetURL *)url {
  if (url == nil) {
    return @"";
  }
  int len = [((NSString *) nil_chk([((JavaNetURL *) nil_chk(url)) getProtocol])) sequenceLength] + 1;
  if (([url getAuthority] != nil) && ([((NSString *) nil_chk([url getAuthority])) sequenceLength] > 0)) {
    len += 2 + [((NSString *) nil_chk([url getAuthority])) sequenceLength];
  }
  JavaLangStringBuilder *result = [[JavaLangStringBuilder alloc] initWithInt:len];
  (void) [result appendWithNSString:[url getProtocol]];
  (void) [result appendWithNSString:@":"];
  if ([((NSString *) nil_chk([url getProtocol])) hasPrefix:@"file"]) {
    (void) [result appendWithNSString:@"//"];
  }
  else if (([url getAuthority] != nil) && ([((NSString *) nil_chk([url getAuthority])) sequenceLength] > 0)) {
    (void) [result appendWithNSString:@"//"];
    (void) [result appendWithNSString:[url getAuthority]];
  }
  (void) [result appendWithNSString:@"/"];
  return [result description];
}

- (void)close {
  if (aConnection_ != nil) {
    [RAREJavaURLConnection connectionClosedWithRAREJavaURLConnection:self];
  }
  connected_ = NO;
  outputUri_ = nil;
  if (connected_ && ([aConnection_ isKindOfClass:[JavaNetHttpURLConnection class]])) {
    JavaNetHttpURLConnection *hc = (JavaNetHttpURLConnection *) check_class_cast(aConnection_, [JavaNetHttpURLConnection class]);
    IOSByteArray *buf = nil;
    int ret;
    @try {
      [((JavaNetHttpURLConnection *) nil_chk(hc)) setReadTimeoutWithInt:500];
    }
    @catch (JavaLangException *ignored) {
    }
    if (inputStream_ != nil) {
      @try {
        JavaIoInputStream *stream = [((JavaNetHttpURLConnection *) nil_chk(hc)) getInputStream];
        ret = [((JavaIoInputStream *) nil_chk(stream)) read];
        if (ret > -1) {
          buf = [IOSByteArray arrayWithLength:256];
          while ([stream readWithByteArray:buf] > 0) {
          }
        }
        [stream close];
      }
      @catch (JavaIoIOException *e) {
        @try {
          JavaIoInputStream *es = [((JavaNetHttpURLConnection *) nil_chk(hc)) getErrorStream];
          if (es != nil) {
            if (buf == nil) {
              buf = [IOSByteArray arrayWithLength:256];
            }
            while ([es readWithByteArray:buf] > 0) {
            }
            [es close];
          }
        }
        @catch (JavaLangException *ignored) {
        }
      }
      @try {
        [inputStream_ close];
      }
      @catch (JavaLangException *ignored) {
      }
    }
    else {
      @try {
        [((JavaNetHttpURLConnection *) nil_chk(hc)) disconnect];
      }
      @catch (JavaLangException *ignored) {
      }
    }
  }
  aConnection_ = nil;
  inputStream_ = nil;
}

+ (void)closeOpenConnectionsWithBoolean:(BOOL)debug {
  if (RAREJavaURLConnection_trackOpenConnections_ && (RAREJavaURLConnection_openConnections_ != nil) && ![RAREJavaURLConnection_openConnections_ isEmpty]) {
    IOSObjectArray *a = nil;
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(RAREJavaURLConnection_openLock_)) lock];
    @try {
      a = [RAREJavaURLConnection_openConnections_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[RAREJavaURLConnection_openConnections_ size] type:[IOSClass classWithClass:[RAREJavaURLConnection class]]]];
      [RAREJavaURLConnection_openConnections_ clear];
    }
    @finally {
      [RAREJavaURLConnection_openLock_ unlock];
    }
    if (a != nil) {
      {
        IOSObjectArray *a__ = a;
        id const *b__ = a__->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          RAREJavaURLConnection *conn = (*b__++);
          if (debug) {
            @try {
              [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithNSString:[NSString stringWithFormat:@"Closing open connection: %@", [((RAREJavaURLConnection *) nil_chk(conn)) getURL]]];
            }
            @catch (JavaLangException *ignore) {
            }
          }
          @try {
            [((RAREJavaURLConnection *) nil_chk(conn)) close];
          }
          @catch (JavaLangThrowable *e) {
          }
        }
      }
    }
  }
}

+ (IOSObjectArray *)getOpenConnections {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(RAREJavaURLConnection_openLock_)) lock];
  @try {
    return [RAREJavaURLConnection_openConnections_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((RAREUTIdentityArrayList *) nil_chk(RAREJavaURLConnection_openConnections_)) size] type:[IOSClass classWithClass:[RAREJavaURLConnection class]]]];
  }
  @finally {
    [RAREJavaURLConnection_openLock_ unlock];
  }
}

- (void)dispose {
  [self close];
}

+ (void)disposeWithJavaNetURLConnection:(JavaNetURLConnection *)con {
  @try {
    RAREJavaURLConnection *jcon = [[RAREJavaURLConnection alloc] initWithJavaNetURLConnection:con];
    [jcon dispose];
  }
  @catch (JavaLangThrowable *ignored) {
  }
}

- (BOOL)exist {
  @try {
    if ([aConnection_ isKindOfClass:[JavaNetHttpURLConnection class]]) {
      [((JavaNetHttpURLConnection *) check_class_cast(aConnection_, [JavaNetHttpURLConnection class])) setRequestMethodWithNSString:@"HEAD"];
      return [((JavaNetHttpURLConnection *) check_class_cast(aConnection_, [JavaNetHttpURLConnection class])) getResponseCode] < 400;
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
  @finally {
    [self close];
  }
}

- (void)open {
  [self connectAndCheckForError];
}

+ (NSString *)parenToExternalFormWithJavaNetURL:(JavaNetURL *)url {
  if (url == nil) {
    return @"";
  }
  int len = [((NSString *) nil_chk([((JavaNetURL *) nil_chk(url)) getProtocol])) sequenceLength] + 1;
  if (([url getAuthority] != nil) && ([((NSString *) nil_chk([url getAuthority])) sequenceLength] > 0)) {
    len += 2 + [((NSString *) nil_chk([url getAuthority])) sequenceLength];
  }
  JavaLangStringBuilder *result = [[JavaLangStringBuilder alloc] initWithInt:len];
  (void) [result appendWithNSString:[url getProtocol]];
  (void) [result appendWithNSString:@":"];
  if ([((NSString *) nil_chk([url getProtocol])) hasPrefix:@"file"]) {
    (void) [result appendWithNSString:@"//"];
  }
  else if (([url getAuthority] != nil) && ([((NSString *) nil_chk([url getAuthority])) sequenceLength] > 0)) {
    (void) [result appendWithNSString:@"//"];
    (void) [result appendWithNSString:[url getAuthority]];
  }
  NSString *s = [url getPath];
  if ([((NSString *) nil_chk(s)) sequenceLength] > 0) {
    int n = [s lastIndexOf:'/'];
    if (n + 1 == [s sequenceLength]) {
      n = [s lastIndexOf:'/' fromIndex:n - 1];
    }
    if (n != -1) {
      s = [s substring:0 endIndex:n];
    }
    (void) [result appendWithNSString:s];
  }
  (void) [result appendWithNSString:@"/"];
  return [result description];
}

+ (NSString *)toExternalFormWithJavaNetURL:(JavaNetURL *)url {
  if (url == nil) {
    return @"";
  }
  NSString *s = [((JavaNetURL *) nil_chk(url)) toExternalForm];
  if ([((NSString *) nil_chk([url getProtocol])) isEqual:@"file"] && ![((NSString *) nil_chk(s)) hasPrefix:@"file://"]) {
    NSString *p = [url getPath];
    int n = [s indexOfString:p];
    if (n != -1) {
      s = [NSString stringWithFormat:@"file://%@", [s substring:n]];
    }
  }
  return s;
}

+ (NSString *)toInternalFormWithJavaNetURL:(JavaNetURL *)url {
  if ([RAREInlineURLConnection isInlineURLWithJavaNetURL:url]) {
    return [JavaLangInteger toHexStringWithInt:[JavaLangSystem identityHashCodeWithId:url]];
  }
  return [RAREJavaURLConnection toExternalFormWithJavaNetURL:url];
}

- (void)setCharsetWithNSString:(NSString *)cs {
  charSet_ = cs;
}

+ (void)setConnectionCheckerEnabledWithBoolean:(BOOL)enabled {
  RAREJavaURLConnection_connectionCheckerEnabled_ = enabled;
}

- (void)setDefaultCharsetWithNSString:(NSString *)charset {
  if (charset == nil) {
    charset = @"ISO-8859-1";
  }
  defaultCharset_ = charset;
}

- (void)setHandleRedirectionWithBoolean:(BOOL)handleRedirection {
  self->handleRedirection_ = handleRedirection;
}

- (void)setHeaderFieldWithNSString:(NSString *)name
                      withNSString:(NSString *)value {
  [((JavaNetURLConnection *) nil_chk(aConnection_)) setRequestPropertyWithNSString:name withNSString:value];
}

- (void)setReadTimeoutWithInt:(int)milliseconds {
  [((JavaNetURLConnection *) nil_chk(aConnection_)) setReadTimeoutWithInt:milliseconds];
  [aConnection_ setConnectTimeoutWithInt:milliseconds];
}

+ (void)setTrackOpenConnectionsWithBoolean:(BOOL)trackOpenConnections {
  RAREJavaURLConnection_trackOpenConnections_ = trackOpenConnections;
  if (RAREJavaURLConnection_openConnections_ == nil) {
    RAREJavaURLConnection_openConnections_ = [[RAREUTIdentityArrayList alloc] initWithInt:5];
    RAREJavaURLConnection_openLock_ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
  }
}

- (NSString *)getCharset {
  if (charSet_ != nil) {
    return charSet_;
  }
  charSet_ = [RAREJavaURLConnection getCharsetWithNSString:[self getContentType] withNSString:defaultCharset_];
  return charSet_;
}

+ (NSString *)getCharsetWithNSString:(NSString *)mime
                        withNSString:(NSString *)defcharset {
  NSString *charSet = defcharset;
  if (charSet == nil) {
    charSet = @"ISO-8859-1";
  }
  NSString *s = mime;
  if ((s != nil) && ([s sequenceLength] > 0)) {
    int n = [s indexOfString:@"charset="];
    if (n == -1) {
      s = nil;
    }
    else {
      n += [@"charset=" sequenceLength];
      int p = [s indexOf:';' fromIndex:n];
      if (p == -1) {
        s = [s substring:n];
      }
      else {
        s = [s substring:n endIndex:p];
      }
      s = [((NSString *) nil_chk(s)) trim];
    }
  }
  if ((s != nil) && ([s sequenceLength] > 0)) {
    charSet = s;
  }
  return charSet;
}

- (id)getConnectionObject {
  return aConnection_;
}

- (IOSClass *)getConnectionObjectClass {
  return [((JavaNetURLConnection *) nil_chk(aConnection_)) getClass];
}

- (id)getContent {
  @try {
    [self connectAndCheckForError];
    return [((JavaNetURLConnection *) nil_chk(aConnection_)) getContent];
  }
  @finally {
    [self close];
  }
}

- (NSString *)getContentAsString {
  JavaIoReader *r = [[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[self getInputStream] withNSString:[self getCharset]];
  @try {
    return [RAREUTStreams readerToStringWithJavaIoReader:r];
  }
  @finally {
    [self close];
  }
}

- (NSString *)getContentEncoding {
  [self connectAndCheckForError];
  return [((JavaNetURLConnection *) nil_chk(aConnection_)) getContentEncoding];
}

- (int)getContentLength {
  return [((JavaNetURLConnection *) nil_chk(aConnection_)) getContentLength];
}

- (NSString *)getContentType {
  if (mimeType_ != nil) {
    return mimeType_;
  }
  [self connectAndCheckForError];
  NSString *s = [((JavaNetURLConnection *) nil_chk(aConnection_)) getContentType];
  if ((s == nil) || [((NSString *) nil_chk([RAREiConstants UNKNOWN_MIME_TYPE])) isEqual:s]) {
    s = [RAREMIMEMap typeFromFileWithNSString:[((JavaNetURL *) nil_chk([self getURL])) toExternalForm]];
    mimeType_ = s;
  }
  return s;
}

- (JavaNetURL *)getHTTP301URL {
  return url301_;
}

- (NSString *)getHeaderFieldWithNSString:(NSString *)name {
  return [((JavaNetURLConnection *) nil_chk(aConnection_)) getHeaderFieldWithNSString:name];
}

+ (NSString *)getHeaderFieldWithRAREiURLConnection:(id<RAREiURLConnection>)conn
                                      withNSString:(NSString *)name {
  @try {
    if ([@"content-type" equalsIgnoreCase:name]) {
      return [((id<RAREiURLConnection>) nil_chk(conn)) getContentType];
    }
    if ([@"content-length" equalsIgnoreCase:name]) {
      return [((id<RAREiURLConnection>) nil_chk(conn)) getContentType];
    }
  }
  @catch (JavaIoIOException *ignored) {
  }
  return nil;
}

- (id<JavaUtilMap>)getHeaderFields {
  return [((JavaNetURLConnection *) nil_chk(aConnection_)) getHeaderFields];
}

+ (id<JavaUtilMap>)getHeaderFieldsWithRAREiURLConnection:(id<RAREiURLConnection>)conn {
  @try {
    NSString *t = [((id<RAREiURLConnection>) nil_chk(conn)) getContentType];
    int len = [conn getContentLength];
    JavaUtilHashMap *headers = [[JavaUtilHashMap alloc] init];
    (void) [headers putWithId:@"Content-Type" withId:[JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ t } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    (void) [headers putWithId:@"Content-Length" withId:[JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [RAREUTStringCache valueOfWithInt:len] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    return headers;
  }
  @catch (JavaIoIOException *ex) {
    return [JavaUtilCollections EMPTY_MAP];
  }
}

- (JavaIoInputStream *)getInputStream {
  [self connectAndCheckForError];
  return inputStream_ = [((JavaNetURLConnection *) nil_chk(aConnection_)) getInputStream];
}

+ (long long int)getLastConnectionSuccessTime {
  return RAREJavaURLConnection_lastConnectionSuccess_;
}

- (long long int)getLastModified {
  return [((JavaNetURLConnection *) nil_chk(aConnection_)) getLastModified];
}

- (JavaIoOutputStream *)getOutputStream {
  if (!connected_) {
    outputUri_ = [RAREaPlatformHelper handleCookieInjectionWithJavaNetURLConnection:aConnection_];
    connected_ = YES;
  }
  return [((JavaNetURLConnection *) nil_chk(aConnection_)) getOutputStream];
}

- (NSString *)getPassedInMimeType {
  return mimeType_;
}

- (int)getReadTimeout {
  return [((JavaNetURLConnection *) nil_chk(aConnection_)) getReadTimeout];
}

- (JavaIoReader *)getReader {
  [self connectAndCheckForError];
  int n = [self getContentLength];
  if ((n > 0) && (n < 8192)) {
    return [[RAREUTBufferedReaderEx alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[((JavaNetURLConnection *) nil_chk(aConnection_)) getInputStream] withNSString:[self getCharset]] withInt:n];
  }
  return [[RAREUTBufferedReaderEx alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[((JavaNetURLConnection *) nil_chk(aConnection_)) getInputStream] withNSString:[self getCharset]] withInt:(n > 0) ? 8192 : 4096];
}

- (int)getResponseCode {
  if ([aConnection_ isKindOfClass:[JavaNetHttpURLConnection class]]) {
    return [((JavaNetHttpURLConnection *) check_class_cast(aConnection_, [JavaNetHttpURLConnection class])) getResponseCode];
  }
  return -1;
}

- (JavaNetURL *)getURL {
  return [((JavaNetURLConnection *) nil_chk(aConnection_)) getURL];
}

+ (NSString *)getWindowsDrivePartWithJavaNetURL:(JavaNetURL *)url {
  if ((url != nil) && [((NSString *) nil_chk([url getProtocol])) isEqual:@"file"] && [RAREJavaURLConnection isWindows]) {
    NSString *s = [url getFile];
    int n = [((NSString *) nil_chk(s)) indexOf:':'];
    if (n != -1) {
      n = [s indexOf:'/' fromIndex:n];
    }
    if (n != -1) {
      return [s substring:0 endIndex:n];
    }
  }
  return nil;
}

- (BOOL)isConnected {
  return connected_;
}

- (BOOL)isHandleRedirection {
  return handleRedirection_;
}

+ (BOOL)isTrackOpenConnections {
  return RAREJavaURLConnection_trackOpenConnections_;
}

- (void)connectAndCheckForError {
  if (connected_) {
    return;
  }
  NSString *uri = connected_ ? outputUri_ : [RAREaPlatformHelper handleCookieInjectionWithJavaNetURLConnection:aConnection_];
  outputUri_ = nil;
  [RAREJavaURLConnection connectionOpenedWithRAREJavaURLConnection:self];
  [((JavaNetURLConnection *) nil_chk(aConnection_)) connect];
  int count = 0;
  int code = 200;
  while (count <= RAREJavaURLConnection_MAX_REDIRECTS_) {
    if (!handleRedirection_ || !([aConnection_ isKindOfClass:[JavaNetHttpURLConnection class]])) {
      break;
    }
    JavaNetHttpURLConnection *hc = (JavaNetHttpURLConnection *) check_class_cast(aConnection_, [JavaNetHttpURLConnection class]);
    code = [hc getResponseCode];
    if ((code == 301) || (code == 302) || (code == 303)) {
      if (count == RAREJavaURLConnection_MAX_REDIRECTS_) {
        NSString *s = [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.redirectionMaxExceeded"];
        s = [RAREaPlatformHelper formatWithNSString:s withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:RAREJavaURLConnection_MAX_REDIRECTS_] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
        @throw [[RAREHTTPException alloc] initWithNSString:s withJavaNetHttpURLConnection:hc];
      }
      if ((code != 303) && [hc getDoOutput]) {
        @throw [[RAREHTTPException alloc] initWithJavaNetHttpURLConnection:hc];
      }
      NSString *s = [hc getHeaderFieldWithNSString:@"Location"];
      if ((s != nil) && ([s sequenceLength] > 0)) {
        aConnection_ = [((JavaNetURL *) [[JavaNetURL alloc] initWithNSString:s]) openConnection];
        if ((code == 301) && (url301_ == nil)) {
          url301_ = [((JavaNetURLConnection *) nil_chk(aConnection_)) getURL];
        }
      }
      else {
        @throw [[RAREHTTPException alloc] initWithJavaNetHttpURLConnection:hc];
      }
      code = 200;
      count++;
      continue;
    }
    break;
  }
  if (code != 200) {
    connected_ = NO;
    if (uri == nil) {
      uri = [((JavaNetURL *) nil_chk([((JavaNetURLConnection *) nil_chk(aConnection_)) getURL])) toExternalForm];
    }
    [RAREPlatform debugLogWithNSString:[NSString stringWithFormat:@"failed to connect to %@: code=%d", uri, code]];
    @try {
      [RAREPlatform debugLogWithNSString:[NSString stringWithFormat:@"Data:%@", [RAREUTStreams streamToStringWithJavaIoInputStream:[((JavaNetURLConnection *) nil_chk(aConnection_)) getInputStream]]]];
    }
    @catch (JavaLangThrowable *e) {
    }
    @throw [[RAREHTTPException alloc] initWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *) check_class_cast(aConnection_, [JavaNetHttpURLConnection class])];
  }
  else {
    connected_ = YES;
    RAREJavaURLConnection_lastConnectionSuccess_ = [JavaLangSystem currentTimeMillis];
    if (uri != nil) {
      [RAREaPlatformHelper handleCookieExtractionWithNSString:uri withJavaNetURLConnection:aConnection_];
    }
  }
  if ((RAREJavaURLConnection_connectionChecker_ != nil) && RAREJavaURLConnection_connectionCheckerEnabled_) {
    [RAREJavaURLConnection_connectionChecker_ checkWithRAREiURLConnection:self];
  }
}

+ (void)connectionClosedWithRAREJavaURLConnection:(RAREJavaURLConnection *)conn {
  if (RAREJavaURLConnection_trackOpenConnections_) {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(RAREJavaURLConnection_openLock_)) lock];
    @try {
      [((RAREUTIdentityArrayList *) nil_chk(RAREJavaURLConnection_openConnections_)) removeWithId:conn];
    }
    @finally {
      [RAREJavaURLConnection_openLock_ unlock];
    }
  }
}

+ (void)stopTrackingConnectionWithRAREJavaURLConnection:(RAREJavaURLConnection *)conn {
  if (RAREJavaURLConnection_trackOpenConnections_) {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(RAREJavaURLConnection_openLock_)) lock];
    @try {
      [((RAREUTIdentityArrayList *) nil_chk(RAREJavaURLConnection_openConnections_)) removeWithId:conn];
    }
    @finally {
      [RAREJavaURLConnection_openLock_ unlock];
    }
  }
}

+ (void)connectionOpenedWithRAREJavaURLConnection:(RAREJavaURLConnection *)conn {
  if (RAREJavaURLConnection_trackOpenConnections_) {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(RAREJavaURLConnection_openLock_)) lock];
    @try {
      [((RAREUTIdentityArrayList *) nil_chk(RAREJavaURLConnection_openConnections_)) addIfNotPresentWithId:conn];
    }
    @finally {
      [RAREJavaURLConnection_openLock_ unlock];
    }
  }
}

+ (BOOL)isWindows {
  @try {
    NSString *os = [JavaLangSystem getPropertyWithNSString:@"os.name"];
    return (os != nil) && ([os indexOfString:@"Windows"] != -1);
  }
  @catch (JavaLangThrowable *ignore) {
    return NO;
  }
}

+ (void)initialize {
  if (self == [RAREJavaURLConnection class]) {
    {
      NSString *agent = nil;
      if ([RAREPlatform getAppContext] != nil && [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) isWebStart]) {
        @try {
          agent = [JavaLangSystem getPropertyWithNSString:@"http.agent" withNSString:nil];
        }
        @catch (JavaLangException *e) {
          [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
        }
      }
      RAREJavaURLConnection_httpAgent_ = agent;
      @try {
        NSString *name = [JavaLangSystem getPropertyWithNSString:@"rare.net.connectionChecker" withNSString:nil];
        if (name != nil) {
          RAREJavaURLConnection_connectionChecker_ = (id<RAREiConnectionChecker>) check_protocol_cast([((IOSClass *) nil_chk([IOSClass forName:name])) newInstance], @protocol(RAREiConnectionChecker));
        }
      }
      @catch (JavaLangException *e) {
        [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
      }
      @try {
        NSString *s = [JavaLangSystem getPropertyWithNSString:@"rare.net.trackOpenConnections" withNSString:nil];
        if ((s != nil) && [s isEqual:@"true"]) {
          [RAREJavaURLConnection setTrackOpenConnectionsWithBoolean:YES];
        }
      }
      @catch (JavaLangException *e) {
        [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
      }
    }
  }
}

- (void)copyAllFieldsTo:(RAREJavaURLConnection *)other {
  [super copyAllFieldsTo:other];
  other->aConnection_ = aConnection_;
  other->charSet_ = charSet_;
  other->connected_ = connected_;
  other->defaultCharset_ = defaultCharset_;
  other->handleRedirection_ = handleRedirection_;
  other->inputStream_ = inputStream_;
  other->mimeType_ = mimeType_;
  other->outputUri_ = outputUri_;
  other->url301_ = url301_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "baseToExternalFormWithJavaNetURL:", NULL, "LNSString", 0x9, NULL },
    { "getOpenConnections", NULL, "LIOSObjectArray", 0x9, NULL },
    { "exist", NULL, "Z", 0x1, NULL },
    { "open", NULL, "V", 0x1, "JavaIoIOException" },
    { "parenToExternalFormWithJavaNetURL:", NULL, "LNSString", 0x9, NULL },
    { "toExternalFormWithJavaNetURL:", NULL, "LNSString", 0x9, NULL },
    { "toInternalFormWithJavaNetURL:", NULL, "LNSString", 0x9, NULL },
    { "getCharset", NULL, "LNSString", 0x1, "JavaIoIOException" },
    { "getCharsetWithNSString:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "getConnectionObject", NULL, "LNSObject", 0x1, NULL },
    { "getConnectionObjectClass", NULL, "LIOSClass", 0x1, NULL },
    { "getContent", NULL, "LNSObject", 0x1, "JavaIoIOException" },
    { "getContentAsString", NULL, "LNSString", 0x1, "JavaIoIOException" },
    { "getContentEncoding", NULL, "LNSString", 0x1, "JavaIoIOException" },
    { "getContentType", NULL, "LNSString", 0x1, "JavaIoIOException" },
    { "getHTTP301URL", NULL, "LJavaNetURL", 0x1, NULL },
    { "getHeaderFieldWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getHeaderFieldWithRAREiURLConnection:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "getHeaderFields", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getHeaderFieldsWithRAREiURLConnection:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "getInputStream", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "getOutputStream", NULL, "LJavaIoOutputStream", 0x1, "JavaIoIOException" },
    { "getPassedInMimeType", NULL, "LNSString", 0x1, NULL },
    { "getReader", NULL, "LJavaIoReader", 0x1, "JavaIoIOException" },
    { "getResponseCode", NULL, "I", 0x1, "JavaIoIOException" },
    { "getURL", NULL, "LJavaNetURL", 0x1, NULL },
    { "getWindowsDrivePartWithJavaNetURL:", NULL, "LNSString", 0x9, NULL },
    { "isConnected", NULL, "Z", 0x1, NULL },
    { "isHandleRedirection", NULL, "Z", 0x1, NULL },
    { "isTrackOpenConnections", NULL, "Z", 0x9, NULL },
    { "connectAndCheckForError", NULL, "V", 0x4, "JavaIoIOException" },
    { "connectionClosedWithRAREJavaURLConnection:", NULL, "V", 0xa, NULL },
    { "connectionOpenedWithRAREJavaURLConnection:", NULL, "V", 0xa, NULL },
    { "isWindows", NULL, "Z", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "MAX_REDIRECTS_", NULL, 0x9, "I" },
    { "disableHTTPSKeepAlive_", NULL, 0x9, "Z" },
    { "disableKeepAlive_", NULL, 0x9, "Z" },
    { "connectionChecker_", NULL, 0xa, "LRAREiConnectionChecker" },
    { "connectionCheckerEnabled_", NULL, 0xa, "Z" },
    { "httpAgent_", NULL, 0x1a, "LNSString" },
    { "lastConnectionSuccess_", NULL, 0xa, "J" },
    { "openConnections_", NULL, 0x4a, "LRAREUTIdentityArrayList" },
    { "openLock_", NULL, 0xa, "LJavaUtilConcurrentLocksReentrantLock" },
    { "trackOpenConnections_", NULL, 0x4a, "Z" },
    { "aConnection_", NULL, 0x4, "LJavaNetURLConnection" },
    { "charSet_", NULL, 0x4, "LNSString" },
    { "inputStream_", NULL, 0x4, "LJavaIoInputStream" },
    { "mimeType_", NULL, 0x4, "LNSString" },
    { "outputUri_", NULL, 0x4, "LNSString" },
    { "defaultCharset_", NULL, 0x4, "LNSString" },
    { "handleRedirection_", NULL, 0x4, "Z" },
    { "connected_", NULL, 0x4, "Z" },
    { "url301_", NULL, 0x4, "LJavaNetURL" },
  };
  static J2ObjcClassInfo _RAREJavaURLConnection = { "JavaURLConnection", "com.appnativa.rare.net", NULL, 0x1, 34, methods, 19, fields, 0, NULL};
  return &_RAREJavaURLConnection;
}

@end
