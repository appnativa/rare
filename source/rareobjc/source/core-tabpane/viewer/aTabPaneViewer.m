//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-tabpane/com/appnativa/rare/viewer/aTabPaneViewer.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iFunctionCallback.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/spot/Font.h"
#include "com/appnativa/rare/spot/GridCell.h"
#include "com/appnativa/rare/spot/Margin.h"
#include "com/appnativa/rare/spot/Tab.h"
#include "com/appnativa/rare/spot/TabPane.h"
#include "com/appnativa/rare/spot/Viewer.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Location.h"
#include "com/appnativa/rare/ui/RenderType.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontHelper.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/aWidgetListener.h"
#include "com/appnativa/rare/ui/effects/aAnimator.h"
#include "com/appnativa/rare/ui/effects/aSizeAnimation.h"
#include "com/appnativa/rare/ui/effects/iPlatformAnimator.h"
#include "com/appnativa/rare/ui/effects/iTransitionAnimator.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformWindowManager.h"
#include "com/appnativa/rare/ui/iTabDocument.h"
#include "com/appnativa/rare/ui/iTabPaneComponent.h"
#include "com/appnativa/rare/ui/iWindowManager.h"
#include "com/appnativa/rare/ui/listener/iTabPaneListener.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/tabpane/TabDocument.h"
#include "com/appnativa/rare/ui/tabpane/TabPaneComponent.h"
#include "com/appnativa/rare/viewer/WidgetPaneViewer.h"
#include "com/appnativa/rare/viewer/aContainer.h"
#include "com/appnativa/rare/viewer/aPlatformRegionViewer.h"
#include "com/appnativa/rare/viewer/aTabPaneViewer.h"
#include "com/appnativa/rare/viewer/aViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iTabPaneViewer.h"
#include "com/appnativa/rare/viewer/iTarget.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTAny.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTInteger.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/appnativa/util/MutableInteger.h"
#include "com/appnativa/util/SNumber.h"
#include "java/lang/Integer.h"
#include "java/net/URL.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation RAREaTabPaneViewer

- (id)init {
  return [self initRAREaTabPaneViewerWithRAREiContainer:nil];
}

- (id)initRAREaTabPaneViewerWithRAREiContainer:(id<RAREiContainer>)parent {
  if (self = [super initWithRAREiContainer:parent]) {
    unique_ = [[RAREUTMutableInteger alloc] initWithInt:1];
    widgetType_ = [RAREiWidget_WidgetTypeEnum TabPane];
  }
  return self;
}

- (id)initWithRAREiContainer:(id<RAREiContainer>)parent {
  return [self initRAREaTabPaneViewerWithRAREiContainer:parent];
}

- (int)addTabWithNSString:(NSString *)name
             withNSString:(NSString *)title
    withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  return [self addTabWithNSString:name withNSString:title withRAREiPlatformIcon:icon withRAREiViewer:(id<RAREiViewer>) check_protocol_cast(nil, @protocol(RAREiViewer))];
}

- (int)addTabWithNSString:(NSString *)name
             withNSString:(NSString *)title
    withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon
withRAREiPlatformComponent:(id<RAREiPlatformComponent>)comp {
  (void) [self createNewDocumentWithNSString:name withNSString:title withRAREiPlatformIcon:icon];
  (void) [((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getWindowManager])) setViewerWithNSString:name withRAREiWidget:self withRAREiViewer:[[RAREWidgetPaneViewer alloc] initWithRAREaContainer:self withRAREiPlatformComponent:comp] withJavaUtilMap:nil];
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTabCount] - 1;
}

- (int)addTabWithNSString:(NSString *)name
             withNSString:(NSString *)title
    withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon
          withRAREiViewer:(id<RAREiViewer>)v {
  (void) [self createNewDocumentWithNSString:name withNSString:title withRAREiPlatformIcon:icon];
  if (v != nil) {
    (void) [((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getWindowManager])) setViewerWithNSString:name withRAREiWidget:self withRAREiViewer:v withJavaUtilMap:nil];
  }
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTabCount] - 1;
}

- (int)addTabWithNSString:(NSString *)name
             withNSString:(NSString *)title
    withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon
           withJavaNetURL:(JavaNetURL *)url
              withBoolean:(BOOL)load_ {
  id<RAREiTabDocument> doc = [self createNewDocumentWithNSString:name withNSString:title withRAREiPlatformIcon:icon];
  [((id<RAREiTabDocument>) nil_chk(doc)) setActionLinkWithRAREActionLink:[[RAREActionLink alloc] initWithRAREiWidget:self withJavaNetURL:url withNSString:nil]];
  if (load_) {
    [doc reloadWithRAREiFunctionCallback:nil];
  }
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTabCount] - 1;
}

- (void)addTabPaneListenerWithRAREiTabPaneListener:(id<RAREiTabPaneListener>)l {
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) addTabPaneListenerWithRAREiTabPaneListener:l];
}

- (void)clearContents {
  if (tabPane_ != nil) {
    [self closeAll];
  }
  initiallySelectedIndex_ = -1;
  selectedDocument_ = nil;
}

- (void)closeAll {
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) closeAll];
}

- (void)closeAllButWithInt:(int)pos {
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) closeAllButWithInt:pos];
}

- (void)closeAllButWithNSString:(NSString *)name {
  int pos = [self indexForNameWithNSString:name];
  if (pos != -1) {
    [self closeAllButWithInt:pos];
  }
}

- (void)closeTabWithInt:(int)pos {
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) closeTabWithInt:pos];
}

- (void)closeTabWithNSString:(NSString *)name {
  int pos = [self indexForNameWithNSString:name];
  if (pos != -1) {
    [self closeTabWithInt:pos];
  }
}

- (void)configureWithRARESPOTViewer:(RARESPOTViewer *)vcfg {
  vcfg = [self checkForURLConfigWithRARESPOTViewer:vcfg];
  [self configureExWithRARESPOTTabPane:(RARESPOTTabPane *) check_class_cast(vcfg, [RARESPOTTabPane class])];
  [self handleInitialSelectionWithInt:[((SPOTInteger *) nil_chk(((RARESPOTTabPane *) nil_chk(vcfg))->selectedIndex_)) intValue]];
  [self fireConfigureEventWithRARESPOTWidget:vcfg withNSString:[RAREiConstants EVENT_CONFIGURE]];
}

+ (void)configureTabOptionsWithRARESPOTTabPane:(RARESPOTTabPane *)tc
             withRAREaTabPaneViewer_TabOptions:(RAREaTabPaneViewer_TabOptions *)tabOptions
                               withRAREiViewer:(id<RAREiViewer>)context
                    withRAREiPlatformComponent:(id<RAREiPlatformComponent>)container {
  ((RAREaTabPaneViewer_TabOptions *) nil_chk(tabOptions))->tabClosePosition_ = [((RARESPOTTabPane_CCloseButton *) nil_chk(((RARESPOTTabPane *) nil_chk(tc))->closeButton_)) intValue];
  tabOptions->tabAreaPainter_ = [RAREColorUtils configureWithRAREiWidget:context withRARESPOTGridCell:[tc getTabAreaPainter] withRAREPaintBucket:nil];
  tabOptions->boldSelectedTab_ = [((SPOTBoolean *) nil_chk(tc->boldSelectedTab_)) booleanValue];
  tabOptions->editingAllowed_ = [((SPOTBoolean *) nil_chk(tc->tabEditingAllowed_)) booleanValue];
  tabOptions->showIconsOnTab_ = [((SPOTBoolean *) nil_chk(tc->showIconsOnTab_)) booleanValue];
  tabOptions->canCloseTabs_ = [tc->closeButton_ intValue] != RARESPOTTabPane_CCloseButton_none;
  tabOptions->tabStyle_ = [((RARESPOTTabPane_CTabStyle *) nil_chk(tc->tabStyle_)) intValue];
  if ([((RARESPOTTabPane_CTabPosition *) nil_chk(tc->tabPosition_)) spot_valueWasSet]) {
    tabOptions->tabPosition_ = [tc->tabPosition_ intValue];
  }
  if ([tc getContentPadding] != nil) {
    tabOptions->tabAreaMargin_ = [((RARESPOTMargin *) nil_chk([tc getContentPadding])) getInsets];
  }
  else if ((tabOptions->tabAreaPainter_ == nil) || ([tabOptions->tabAreaPainter_ getBorder] == nil)) {
    tabOptions->tabAreaMargin_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getInsetsWithNSString:@"Rare.TabPane.tabAreaMargin"];
    if (tabOptions->tabAreaMargin_ == nil) {
      tabOptions->tabAreaMargin_ = [[RAREUIInsets alloc] initWithInt:3 withInt:2 withInt:2 withInt:2];
    }
  }
  tabOptions->tabColorHolder_ = [RAREUIColorHelper configureWithRAREiWidget:context withRARESPOTGridCell:[tc getTabPainter] withRAREPaintBucket:nil];
  tabOptions->selectedTabColorHolder_ = [RAREUIColorHelper configureWithRAREiWidget:context withRARESPOTGridCell:[tc getSelectedTabPainter] withRAREPaintBucket:nil];
  if ([((RARESPOTFont *) nil_chk(tc->font_)) spot_hasValue]) {
    tabOptions->tabFont_ = [RAREUIFontHelper getFontWithRAREiWidget:context withRARESPOTFont:tc->font_];
  }
}

- (void)setReloadTimeoutWithLong:(long long int)reloadTimeout {
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) setReloadTimeoutWithLong:reloadTimeout];
}

- (long long int)getReloadTimeout {
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getReloadTimeout];
}

+ (void)configureTabVisualsWithRAREiViewer:(id<RAREiViewer>)context
                      withRAREiTabDocument:(id<RAREiTabDocument>)doc
                           withRARESPOTTab:(RARESPOTTab *)tab
         withRAREaTabPaneViewer_TabOptions:(RAREaTabPaneViewer_TabOptions *)tabOptions {
  NSString *s;
  RAREPaintBucket *colorHolder = nil;
  if (tab != nil) {
    s = [((SPOTPrintableString *) nil_chk(tab->fgColor_)) getValue];
    if (s != nil) {
      colorHolder = [RAREaTabPaneViewer newColorHolderWithRAREaTabPaneViewer_TabOptions:tabOptions];
      [((RAREPaintBucket *) nil_chk(colorHolder)) setForegroundColorWithRAREUIColor:[RAREColorUtils getColorWithNSString:s]];
    }
    if ([((SPOTPrintableString *) nil_chk(tab->bgColor_)) getValue] != nil) {
      if (colorHolder == nil) {
        colorHolder = [RAREaTabPaneViewer newColorHolderWithRAREaTabPaneViewer_TabOptions:tabOptions];
        ;
      }
      colorHolder = [RAREUIColorHelper configureBackgroundColorWithSPOTPrintableString:tab->bgColor_ withRAREPaintBucket:colorHolder];
    }
  }
  if (colorHolder != nil) {
    [((id<RAREiTabDocument>) nil_chk(doc)) setTabColorsWithRAREPaintBucket:colorHolder];
  }
}

- (void)dispose {
  [super dispose];
  tabPane_ = nil;
}

- (int)indexForIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) indexOfTabWithRAREiPlatformIcon:icon];
}

- (int)indexForNameWithNSString:(NSString *)name {
  int len = [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTabCount];
  for (int i = 0; i < len; i++) {
    id<RAREiTabDocument> doc = [tabPane_ getDocumentAtWithInt:i];
    if ([((NSString *) nil_chk([((id<RAREiTabDocument>) nil_chk(doc)) getTabName])) isEqual:name]) {
      return i;
    }
  }
  return -1;
}

- (int)indexOfWithId:(id)o {
  if ([o conformsToProtocol: @protocol(RAREiViewer)]) {
    return [self indexForTabViewerWithRAREiViewer:(id<RAREiViewer>) check_protocol_cast(o, @protocol(RAREiViewer))];
  }
  return [super indexOfWithId:o];
}

- (int)indexForTabViewerWithRAREiViewer:(id<RAREiViewer>)v {
  int len = [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTabCount];
  for (int i = 0; i < len; i++) {
    if ([self getTabViewerWithInt:i] == v) {
      return i;
    }
  }
  return -1;
}

- (int)indexForTitleWithNSString:(NSString *)title {
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) indexOfTabWithNSString:title];
}

- (int)indexOfWithRAREiTabDocument:(id<RAREiTabDocument>)doc {
  if ((doc == nil) || (tabPane_ == nil)) {
    return -1;
  }
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) indexOfDocumentWithRAREiTabDocument:doc];
}

- (void)onConfigurationChangedWithBoolean:(BOOL)reset {
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) checkOrientationWithId:nil];
  if (reset) {
    [self reset];
  }
  else {
    int len = [tabPane_ getTabCount];
    for (int i = 0; i < len; i++) {
      id<RAREiTabDocument> doc = [tabPane_ getDocumentAtWithInt:i];
      if ((doc != nil) && ([doc getViewer] != nil)) {
        [((id<RAREiViewer>) nil_chk([doc getViewer])) onConfigurationChangedWithBoolean:NO];
      }
    }
  }
  [self handleViewerConfigurationChangedWithBoolean:reset];
}

- (void)register__ {
  [self callaViewerRegister];
  if (!targetsRegistered_) {
    targetsRegistered_ = YES;
    int len = [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTabCount];
    for (int i = 0; i < len; i++) {
      id<RAREiTabDocument> doc = [tabPane_ getDocumentAtWithInt:i];
      id<RAREiTarget> t = [((id<RAREiTabDocument>) nil_chk(doc)) getTarget];
      [((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getWindowManager])) registerTargetWithNSString:[((id<RAREiTarget>) nil_chk(t)) getName] withRAREiTarget:t];
      id<RAREiViewer> v = [t getViewer];
      if (v != nil) {
        [v setParentWithRAREiContainer:self];
        [v targetAcquiredWithRAREiTarget:t];
      }
    }
  }
  [self registerWidgets];
}

- (void)reloadWithBoolean:(BOOL)context {
  wasReset_ = NO;
  if (!context && (viewerActionLink_ != nil)) {
    [super reloadWithBoolean:context];
    return;
  }
  id<RAREiTabDocument> adoc = [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getSelectedDocument];
  if (!context) {
    int len = [tabPane_ getTabCount];
    for (int i = 0; i < len; i++) {
      id<RAREiTabDocument> doc = [tabPane_ getDocumentAtWithInt:i];
      if ((doc != nil) && (doc != adoc)) {
        [doc reset];
      }
    }
    if ((initiallySelectedIndex_ > -1) && (initiallySelectedIndex_ < len)) {
      [self setSelectedTabWithInt:initiallySelectedIndex_];
    }
    else {
      if (adoc != nil) {
        [adoc reloadWithRAREiFunctionCallback:nil];
      }
    }
  }
}

- (void)removeTabPaneListenerWithRAREiTabPaneListener:(id<RAREiTabPaneListener>)l {
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) removeTabPaneListenerWithRAREiTabPaneListener:l];
}

- (void)unregisterWithBoolean:(BOOL)disposing {
  [super unregisterWithBoolean:disposing];
  if ([self isDisposed]) {
    return;
  }
  id<RAREiWindowManager> wm = ([self getAppContext] == nil) ? nil : [((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getWindowManager];
  if ((wm != nil) && targetsRegistered_) {
    targetsRegistered_ = NO;
    if (tabPane_ != nil) {
      int len = [tabPane_ getTabCount];
      for (int i = 0; i < len; i++) {
        id<RAREiTabDocument> doc = [tabPane_ getDocumentAtWithInt:i];
        id<RAREiTarget> t = [((id<RAREiTabDocument>) nil_chk(doc)) getTarget];
        [wm unRegisterTargetWithNSString:[((id<RAREiTarget>) nil_chk(t)) getName]];
        id<RAREiViewer> v = [t getViewer];
        if (v != nil) {
          [v targetLostWithRAREiTarget:t];
          [v setParentWithRAREiContainer:nil];
        }
      }
    }
  }
}

- (void)setCloseButtonWithInt:(int)location {
}

- (void)setSelectedTabWithInt:(int)index {
  if ([((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getSelectedIndex] != index) {
    [tabPane_ setSelectedIndexWithInt:index];
  }
}

- (void)setSelectedTabNameWithNSString:(NSString *)name {
  int index = [self indexForNameWithNSString:name];
  if (index == -1) {
    @throw [[RAREApplicationException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid name (%@)", name]];
  }
  [self setSelectedTabWithInt:index];
}

- (void)setTabChangeCancelableWithBoolean:(BOOL)tabChangeCancelable {
  self->tabChangeCancelable_ = tabChangeCancelable;
}

- (void)setTabEnabledWithInt:(int)pos
                 withBoolean:(BOOL)enable {
  if ((pos > -1) && (pos < [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTabCount])) {
    [tabPane_ setEnabledAtWithInt:pos withBoolean:enable];
  }
}

- (void)setTabIconWithInt:(int)pos
    withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) setIconAtWithInt:pos withRAREiPlatformIcon:icon];
}

- (void)setTabNameWithInt:(int)pos
             withNSString:(NSString *)name {
  id<RAREiTabDocument> doc = [self getTabDocumentWithInt:pos];
  if (doc != nil) {
    [doc setTabNameWithNSString:name];
  }
}

- (void)setTabPlacementWithRARELocationEnum:(RARELocationEnum *)location {
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) setTabPlacementWithRARELocationEnum:location];
}

- (void)setTabStyleWithInt:(int)style {
  [RAREaTabPaneViewer_TabOptions setTabStyleWithRAREiTabPaneComponent:tabPane_ withInt:style];
}

- (void)setTabTitleWithInt:(int)pos
              withNSString:(NSString *)title {
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) setTitleAtWithInt:pos withNSString:title];
}

- (void)setTabToolTipWithInt:(int)pos
                withNSString:(NSString *)tooltip {
}

- (void)setTabViewerWithInt:(int)pos
            withRAREiViewer:(id<RAREiViewer>)v {
  id<RAREiTabDocument> doc = [self getTabDocumentWithInt:pos];
  if (doc != nil) {
    id<RAREiViewer> ov = [((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getWindowManager])) setViewerWithNSString:[((id<RAREiTarget>) nil_chk([doc getTarget])) getName] withRAREiWidget:self withRAREiViewer:v withJavaUtilMap:nil];
    if ((ov != nil) && [ov isAutoDispose]) {
      [ov dispose];
    }
  }
}

- (void)setTransitionAnimatorWithRAREiTransitionAnimator:(id<RAREiTransitionAnimator>)ca {
  id<RAREiTabPaneComponent> c = (id<RAREiTabPaneComponent>) check_protocol_cast([self getDataComponent], @protocol(RAREiTabPaneComponent));
  [((id<RAREiTabPaneComponent>) nil_chk(c)) setTransitionAnimatorWithRAREiTransitionAnimator:ca];
}

- (id<RAREiTransitionAnimator>)getTransitionAnimator {
  id<RAREiTabPaneComponent> c = (id<RAREiTabPaneComponent>) check_protocol_cast([self getDataComponent], @protocol(RAREiTabPaneComponent));
  return [((id<RAREiTabPaneComponent>) nil_chk(c)) getTransitionAnimator];
}

- (id<RAREiPlatformIcon>)getIcon {
  id<RAREiPlatformIcon> icon = nil;
  if (tabPane_ != nil) {
    id<RAREiTabDocument> doc = [self getSelectedTabDocument];
    if (doc != nil) {
      icon = [doc getIcon];
      if (icon == nil) {
        id<RAREiViewer> v = [((id<RAREiTarget>) nil_chk([doc getTarget])) getViewer];
        if (v != nil) {
          icon = [v getIcon];
        }
      }
    }
  }
  if (icon == nil) {
    icon = [super getIcon];
  }
  return icon;
}

- (int)getItemCount {
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTabCount];
}

- (int)getSelectedTab {
  return (tabPane_ == nil) ? -1 : [tabPane_ getSelectedIndex];
}

- (id<RAREiTabDocument>)getSelectedTabDocument {
  return (id<RAREiTabDocument>) check_protocol_cast([self getSelection], @protocol(RAREiTabDocument));
}

- (NSString *)getSelectedTabName {
  id<RAREiTabDocument> doc = [self getSelectedTabDocument];
  return (doc == nil) ? nil : [doc getTabName];
}

- (id<RAREiViewer>)getSelectedTabViewer {
  id<RAREiTabDocument> doc = [self getSelectedTabDocument];
  if (doc != nil) {
    return [((id<RAREiTarget>) nil_chk([doc getTarget])) getViewer];
  }
  return nil;
}

- (id<RAREiViewer>)getSelectedTabViewerWithRAREiFunctionCallback:(id<RAREiFunctionCallback>)cb {
  id<RAREiTabDocument> doc;
  int changeIndex = [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getChangeIndex];
  if ((changeIndex < 0) || (changeIndex >= [self getTabCount])) {
    doc = [self getSelectedTabDocument];
    return (doc == nil) ? nil : [doc getViewer];
  }
  doc = [self getTabDocumentWithInt:changeIndex];
  return [((id<RAREiTabDocument>) nil_chk(doc)) getViewerWithRAREiFunctionCallback:cb];
}

- (id)getSelection {
  return (tabPane_ == nil) ? nil : [tabPane_ getSelectedDocument];
}

- (NSString *)getSelectionAsString {
  id<RAREiTabDocument> doc = [self getSelectedTabDocument];
  return (doc == nil) ? nil : [doc getTitle];
}

- (id)getSelectionData {
  id<RAREiTabDocument> doc = [self getSelectedTabDocument];
  return (doc == nil) ? nil : [doc getLinkedData];
}

- (int)getTabCount {
  return (tabPane_ == nil) ? 0 : [tabPane_ getTabCount];
}

- (id<RAREiTabDocument>)getTabDocumentWithInt:(int)pos {
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getDocumentAtWithInt:pos];
}

- (id<RAREiPlatformIcon>)getTabIconWithInt:(int)pos {
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getIconAtWithInt:pos];
}

- (RARELocationEnum *)getTabPlacement {
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTabPlacement];
}

- (RAREUIRectangle *)getTabStripBounds {
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTabStripBounds];
}

- (NSString *)getTabTitleWithInt:(int)pos {
  return [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getTitleAtWithInt:pos];
}

- (id<RAREiViewer>)getTabViewerWithInt:(int)pos {
  id<RAREiTabDocument> doc = [self getTabDocumentWithInt:pos];
  return (doc == nil) ? nil : [((id<RAREiTarget>) nil_chk([doc getTarget])) getViewer];
}

- (id<RAREiViewer>)getTabViewerWithInt:(int)index
             withRAREiFunctionCallback:(id<RAREiFunctionCallback>)cb {
  id<RAREiTabDocument> doc = [self getTabDocumentWithInt:index];
  return [((id<RAREiTabDocument>) nil_chk(doc)) getViewerWithRAREiFunctionCallback:cb];
}

- (id<RAREiTabPaneComponent>)getTabPaneComponent {
  return tabPane_;
}

- (id)getValue {
  return [self getSelectedTabViewer];
}

- (int)getWidgetCount {
  return [RAREUtils getWidgetCountWithRAREiTabPaneViewer:self];
}

- (id<JavaUtilList>)getWidgetListEx {
  int len = [self getTabCount];
  [((RAREUTIdentityArrayList *) nil_chk(widgetList_)) clear];
  id<RAREiViewer> v;
  for (int i = 0; i < len; i++) {
    v = [((id<RAREiTarget>) nil_chk([((id<RAREiTabDocument>) nil_chk([self getTabDocumentWithInt:i])) getTarget])) getViewer];
    if (v != nil) {
      [widgetList_ addWithId:v];
    }
  }
  return widgetList_;
}

- (BOOL)hasPopupMenu {
  return [super hasPopupMenu];
}

- (BOOL)hasSelection {
  return (tabPane_ != nil) && ([tabPane_ getSelectedIndex] != -1);
}

- (BOOL)isTabChangeCancelable {
  return tabChangeCancelable_;
}

- (RAREUIDimension *)adjustPreferredSizeWithRAREUIDimension:(RAREUIDimension *)d {
  if ((((RAREUIDimension *) nil_chk(d))->width_ < minimumWidth_) || (d->height_ < minimumHeight_)) {
    if (!useMinimumVarsOnlyWhenEmpty_ || ([self getWidgetCount] == 0)) {
      if (d->width_ < minimumWidth_) {
        d->width_ = minimumWidth_;
      }
      if (d->height_ < minimumHeight_) {
        d->height_ = minimumHeight_;
      }
    }
  }
  return d;
}

- (void)clearConfigurationWithBoolean:(BOOL)dispose {
  if (tabPane_ != nil) {
    [self closeAll];
  }
  [super clearConfigurationWithBoolean:dispose];
  if (dispose) {
    if (tabOptions_ != nil) {
      [tabOptions_ clear];
    }
    tabPane_ = nil;
    initiallySelectedIndex_ = -1;
    selectedDocument_ = nil;
    unique_ = nil;
    tabOptions_ = nil;
  }
}

- (void)configureExWithRARESPOTTabPane:(RARESPOTTabPane *)cfg {
  tabOptions_ = [[RAREaTabPaneViewer_TabOptions alloc] init];
  tabPane_ = [self createTabPaneComponentWithRARESPOTTabPane:cfg];
  dataComponent_ = [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) getComponent];
  formComponent_ = dataComponent_;
  [self configureExWithRARESPOTViewer:cfg withBoolean:YES withBoolean:NO withBoolean:YES];
  actAsFormViewer_ = [((SPOTBoolean *) nil_chk(((RARESPOTTabPane *) nil_chk(cfg))->actAsFormViewer_)) booleanValue];
  displayIcon_ = [self getIconWithSPOTPrintableString:cfg->defaultTabIcon_];
  if ([((SPOTPrintableString *) nil_chk(cfg->tabHeight_)) getValue] != nil) {
    if (![RAREUTSNumber booleanValueWithNSString:[cfg->tabHeight_ spot_getAttributeWithNSString:@"touchOnly"]] || [RAREPlatform isTouchDevice]) {
      [tabPane_ setTabMinHeightWithInt:[RAREScreenUtils toPlatformPixelHeightWithNSString:[cfg->tabHeight_ getValue] withRAREiPlatformComponent:dataComponent_ withFloat:1000]];
    }
  }
  [RAREaTabPaneViewer configureTabOptionsWithRARESPOTTabPane:cfg withRAREaTabPaneViewer_TabOptions:tabOptions_ withRAREiViewer:self withRAREiPlatformComponent:formComponent_];
  if (tabOptions_->tabStyle_ == RARESPOTTabPane_CTabStyle_auto) {
    tabOptions_->tabStyle_ = [self getDefaultTabStyle];
  }
  id<RAREiPlatformIcon> icon = nil;
  int type = [((RARESPOTTabPane_CMoreIconType *) nil_chk(cfg->moreIconType_)) intValue];
  if (![cfg->moreIconType_ spot_valueWasSet]) {
    NSString *s = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getStringWithNSString:@"Rare.TabePane.moreIconType"];
    if (s != nil) {
      if ([s equalsIgnoreCase:@"dots"]) {
        type = RARESPOTTabPane_CMoreIconType_dots;
      }
      else if ([s equalsIgnoreCase:@"menu"]) {
        type = RARESPOTTabPane_CMoreIconType_menu;
      }
    }
  }
  switch (type) {
    case RARESPOTTabPane_CMoreIconType_custom:
    icon = [self getIconWithNSString:[cfg->moreIconType_ spot_getAttributeWithNSString:@"icon"]];
    break;
    case RARESPOTTabPane_CMoreIconType_dots:
    icon = [RAREPlatform getResourceAsIconWithNSString:@"Rare.icon.more"];
    break;
    default:
    icon = [RAREPlatform getResourceAsIconWithNSString:@"Rare.icon.menu"];
    break;
  }
  [tabPane_ setMoreTabsIconWithRAREiPlatformIcon:icon];
  [tabOptions_ customizePaneWithRAREiTabPaneViewer:self withRAREiTabPaneComponent:tabPane_];
  if (![self isDesignMode] && ([((SPOTPrintableString *) nil_chk(cfg->transitionAnimator_)) getValue] != nil)) {
    id<RAREiTransitionAnimator> ta = [RAREaAnimator createTransitionAnimatorWithRAREiWidget:self withNSString:[cfg->transitionAnimator_ getValue] withJavaUtilMap:[cfg->transitionAnimator_ spot_getAttributesEx]];
    if (ta != nil) {
      if ([(id) [ta getInAnimator] isKindOfClass:[RAREaSizeAnimation class]]) {
        NSString *s = [cfg->transitionAnimator_ spot_getAttributeWithNSString:@"diagonalAnchor"];
        if (s == nil) {
          [((RAREaSizeAnimation *) check_class_cast([ta getInAnimator], [RAREaSizeAnimation class])) setDiagonalAnchorWithId:[RARERenderTypeEnum LOWER_MIDDLE]];
        }
      }
      [tabPane_ setTransitionAnimatorWithRAREiTransitionAnimator:ta];
    }
  }
  [tabPane_ beginTabsUpdate];
  [self configureTabsWithRARESPOTViewer:cfg withSPOTSet:cfg->tabs_];
  [tabPane_ endTabsUpdate];
  RARESPOTWidget *wc = (RARESPOTWidget *) check_class_cast([((SPOTAny *) nil_chk(cfg->leadingHeaderWidget_)) getValue], [RARESPOTWidget class]);
  if (wc != nil) {
    id<RAREiWidget> w = [self createWidgetWithRARESPOTWidget:wc];
    [self registerWidgetWithRAREiWidget:w];
    [tabPane_ setTabLeadingComponentWithRAREiPlatformComponent:[((id<RAREiWidget>) nil_chk(w)) getContainerComponent]];
  }
  wc = (RARESPOTWidget *) check_class_cast([((SPOTAny *) nil_chk(cfg->trailingHeaderWidget_)) getValue], [RARESPOTWidget class]);
  if (wc != nil) {
    id<RAREiWidget> w = [self createWidgetWithRARESPOTWidget:wc];
    [self registerWidgetWithRAREiWidget:w];
    [tabPane_ setTabTrailingComponentWithRAREiPlatformComponent:[((id<RAREiWidget>) nil_chk(w)) getContainerComponent]];
  }
  [tabPane_ checkOrientationWithId:nil];
  RAREaWidgetListener *l = [self getWidgetListener];
  if (l != nil) {
    [self addTabPaneListenerWithRAREiTabPaneListener:l];
    if ([l isEnabledWithNSString:[RAREiConstants EVENT_CHANGE]] && tabOptions_->editingAllowed_) {
    }
  }
}

- (void)configureTabsWithRARESPOTViewer:(RARESPOTViewer *)cfg
                            withSPOTSet:(SPOTSet *)tabs {
  RARESPOTTab *tab;
  id<RAREiTabDocument> doc;
  int n = [((SPOTSet *) nil_chk(tabs)) getCount];
  for (int i = 0; i < n; i++) {
    tab = (RARESPOTTab *) check_class_cast([tabs getWithInt:i], [RARESPOTTab class]);
    doc = [self createDocumentWithRAREiTabPaneViewer:self withRARESPOTTab:tab withRAREUTMutableInteger:unique_];
    [((id<RAREiTabDocument>) nil_chk(doc)) setTabPaneViewerWithRAREiTabPaneViewer:self];
    int pos = [((id<RAREiTabPaneComponent>) nil_chk(tabPane_)) addTabWithRAREiTabDocument:doc];
    if (![((SPOTBoolean *) nil_chk(((RARESPOTTab *) nil_chk(tab))->enabled_)) booleanValue]) {
      [tabPane_ setEnabledAtWithInt:pos withBoolean:NO];
    }
    [doc setReloadOnActivationWithBoolean:[((SPOTBoolean *) nil_chk(tab->reloadOnActivation_)) booleanValue]];
    if (![((SPOTBoolean *) nil_chk(tab->loadOnActivation_)) booleanValue]) {
      [doc reloadWithRAREiFunctionCallback:nil];
    }
  }
}

- (id<RAREiTabDocument>)createDocumentWithRAREiTabPaneViewer:(id<RAREiTabPaneViewer>)tpv
                                             withRARESPOTTab:(RARESPOTTab *)tab
                                    withRAREUTMutableInteger:(RAREUTMutableInteger *)count {
  id<RAREiTabDocument> doc;
  id<RAREiPlatformIcon> icon;
  NSString *name;
  NSString *s;
  id<RAREiViewer> v = [((id<RAREiTabPaneViewer>) nil_chk(tpv)) getViewer];
  name = [((SPOTPrintableString *) nil_chk(((RARESPOTTab *) nil_chk(tab))->name_)) getValue];
  if (name == nil) {
    name = [((id<RAREiViewer>) nil_chk(v)) getName];
    if (name == nil) {
      name = [NSString stringWithFormat:@"TabPane_%@", [JavaLangInteger toHexStringWithInt:[tpv hash]]];
    }
    name = [NSString stringWithFormat:@"%@.tab.%@", name, [JavaLangInteger toStringWithInt:[((RAREUTMutableInteger *) nil_chk(count)) getAndIncrement]]];
  }
  doc = [self createNewDocumentWithNSString:name withNSString:nil withRAREiPlatformIcon:nil];
  [((id<RAREiTabDocument>) nil_chk(doc)) setTabPaneViewerWithRAREiTabPaneViewer:tpv];
  s = [((SPOTPrintableString *) nil_chk(tab->title_)) getValue];
  if (s == nil) {
    s = @"";
  }
  else {
    s = [((id<RAREiViewer>) nil_chk(v)) expandStringWithNSString:s withBoolean:NO];
  }
  [doc setTitleWithNSString:s];
  icon = [((id<RAREiViewer>) nil_chk(v)) getIconWithSPOTPrintableString:tab->icon_];
  if (icon == nil) {
    icon = [v getIcon];
  }
  [doc setIconWithRAREiPlatformIcon:icon];
  icon = [v getIconWithSPOTPrintableString:tab->disabledIcon_];
  if (icon != nil) {
    [doc setDisabledIconWithRAREiPlatformIcon:icon];
  }
  icon = [v getIconWithSPOTPrintableString:tab->alternateIcon_];
  if (icon != nil) {
    [doc setAlternateIconWithRAREiPlatformIcon:icon];
  }
  [RAREaTabPaneViewer configureTabVisualsWithRAREiViewer:self withRAREiTabDocument:doc withRARESPOTTab:tab withRAREaTabPaneViewer_TabOptions:tabOptions_];
  [doc setLinkedDataWithId:[((SPOTPrintableString *) nil_chk(tab->linkedData_)) getValue]];
  [doc setActionLinkWithRAREActionLink:[RAREaRegionViewer createLinkWithRAREiWidget:v withNSString:name withRARESPOTRegion:tab]];
  return doc;
}

- (id<RAREiTabDocument>)createNewDocumentWithNSString:(NSString *)name
                                         withNSString:(NSString *)title
                                withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  RARETabDocument *doc = [[RARETabDocument alloc] initWithRAREiPlatformAppContext:[self getAppContext] withNSString:name withRAREiTabDocument_iDocumentListener:(id<RAREiTabDocument_iDocumentListener>) check_protocol_cast(tabPane_, @protocol(RAREiTabDocument_iDocumentListener))];
  [doc setTitleWithNSString:title];
  [doc setIconWithRAREiPlatformIcon:icon];
  return doc;
}

- (id<RAREiTabPaneComponent>)createTabPaneComponentWithRARESPOTTabPane:(RARESPOTTabPane *)cfg {
  return [[RARETabPaneComponent alloc] initWithRAREiWidget:self];
}

- (void)handleInitialSelectionWithInt:(int)index {
  initiallySelectedIndex_ = index;
  if (index == -1) {
    index = 0;
  }
  if (tabPane_ != nil) {
    [tabPane_ setSelectedIndexWithInt:index];
  }
}

+ (RAREPaintBucket *)newColorHolderWithRAREaTabPaneViewer_TabOptions:(RAREaTabPaneViewer_TabOptions *)tabOptions {
  if ((tabOptions != nil) && (tabOptions->tabColorHolder_ != nil)) {
    return (RAREPaintBucket *) check_class_cast([tabOptions->tabColorHolder_ clone], [RAREPaintBucket class]);
  }
  else {
    return [[RAREPaintBucket alloc] init];
  }
}

- (int)getDefaultTabStyle {
  return RARESPOTTabPane_CTabStyle_office2003;
}

+ (RAREiTabPaneViewer_ShapeEnum *)getTabShapeFromStyleWithInt:(int)style {
  switch (style) {
    case RARESPOTTabPane_CTabStyle_box:
    return [RAREiTabPaneViewer_ShapeEnum BOX];
    case RARESPOTTabPane_CTabStyle_stacked:
    return [RAREiTabPaneViewer_ShapeEnum BOX_STACKED];
    case RARESPOTTabPane_CTabStyle_chrome:
    return [RAREiTabPaneViewer_ShapeEnum CHROME];
    case RARESPOTTabPane_CTabStyle_flat:
    return [RAREiTabPaneViewer_ShapeEnum FLAT];
    case RARESPOTTabPane_CTabStyle_office2003:
    return [RAREiTabPaneViewer_ShapeEnum OFFICE2003];
    case RARESPOTTabPane_CTabStyle_rounded_flat:
    return [RAREiTabPaneViewer_ShapeEnum ROUNDED_FLAT];
    case RARESPOTTabPane_CTabStyle_windows:
    return [RAREiTabPaneViewer_ShapeEnum WINDOWS];
    default:
    return [RAREiTabPaneViewer_ShapeEnum DEFAULT];
  }
}

- (void)copyAllFieldsTo:(RAREaTabPaneViewer *)other {
  [super copyAllFieldsTo:other];
  other->initiallySelectedIndex_ = initiallySelectedIndex_;
  other->minimumHeight_ = minimumHeight_;
  other->minimumWidth_ = minimumWidth_;
  other->selectedDocument_ = selectedDocument_;
  other->tabChangeCancelable_ = tabChangeCancelable_;
  other->tabOptions_ = tabOptions_;
  other->tabPane_ = tabPane_;
  other->targetsRegistered_ = targetsRegistered_;
  other->unique_ = unique_;
  other->useMinimumVarsOnlyWhenEmpty_ = useMinimumVarsOnlyWhenEmpty_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getTransitionAnimator", NULL, "LRAREiTransitionAnimator", 0x1, NULL },
    { "getIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getSelectedTabDocument", NULL, "LRAREiTabDocument", 0x1, NULL },
    { "getSelectedTabName", NULL, "LNSString", 0x1, NULL },
    { "getSelectedTabViewer", NULL, "LRAREiViewer", 0x1, NULL },
    { "getSelectedTabViewerWithRAREiFunctionCallback:", NULL, "LRAREiViewer", 0x1, NULL },
    { "getSelection", NULL, "LNSObject", 0x1, NULL },
    { "getSelectionAsString", NULL, "LNSString", 0x1, NULL },
    { "getSelectionData", NULL, "LNSObject", 0x1, NULL },
    { "getTabDocumentWithInt:", NULL, "LRAREiTabDocument", 0x1, NULL },
    { "getTabIconWithInt:", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getTabPlacement", NULL, "LRARELocationEnum", 0x1, NULL },
    { "getTabStripBounds", NULL, "LRAREUIRectangle", 0x1, NULL },
    { "getTabTitleWithInt:", NULL, "LNSString", 0x1, NULL },
    { "getTabViewerWithInt:", NULL, "LRAREiViewer", 0x1, NULL },
    { "getTabViewerWithInt:withRAREiFunctionCallback:", NULL, "LRAREiViewer", 0x1, NULL },
    { "getTabPaneComponent", NULL, "LRAREiTabPaneComponent", 0x1, NULL },
    { "getValue", NULL, "LNSObject", 0x1, NULL },
    { "getWidgetListEx", NULL, "LJavaUtilList", 0x4, NULL },
    { "hasPopupMenu", NULL, "Z", 0x1, NULL },
    { "hasSelection", NULL, "Z", 0x1, NULL },
    { "isTabChangeCancelable", NULL, "Z", 0x1, NULL },
    { "adjustPreferredSizeWithRAREUIDimension:", NULL, "LRAREUIDimension", 0x4, NULL },
    { "clearConfigurationWithBoolean:", NULL, "V", 0x4, NULL },
    { "configureExWithRARESPOTTabPane:", NULL, "V", 0x4, NULL },
    { "configureTabsWithRARESPOTViewer:withSPOTSet:", NULL, "V", 0x4, NULL },
    { "createDocumentWithRAREiTabPaneViewer:withRARESPOTTab:withRAREUTMutableInteger:", NULL, "LRAREiTabDocument", 0x4, NULL },
    { "createNewDocumentWithNSString:withNSString:withRAREiPlatformIcon:", NULL, "LRAREiTabDocument", 0x4, NULL },
    { "createTabPaneComponentWithRARESPOTTabPane:", NULL, "LRAREiTabPaneComponent", 0x4, NULL },
    { "handleInitialSelectionWithInt:", NULL, "V", 0x4, NULL },
    { "newColorHolderWithRAREaTabPaneViewer_TabOptions:", NULL, "LRAREPaintBucket", 0xc, NULL },
    { "getDefaultTabStyle", NULL, "I", 0x4, NULL },
    { "getTabShapeFromStyleWithInt:", NULL, "LRAREiTabPaneViewer_ShapeEnum", 0xc, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "initiallySelectedIndex_", NULL, 0x4, "I" },
    { "selectedDocument_", NULL, 0x4, "LRAREiTabDocument" },
    { "tabOptions_", NULL, 0x4, "LRAREaTabPaneViewer_TabOptions" },
    { "tabPane_", NULL, 0x4, "LRAREiTabPaneComponent" },
  };
  static J2ObjcClassInfo _RAREaTabPaneViewer = { "aTabPaneViewer", "com.appnativa.rare.viewer", NULL, 0x401, 33, methods, 4, fields, 0, NULL};
  return &_RAREaTabPaneViewer;
}

@end
@implementation RAREaTabPaneViewer_TabOptions

- (void)clear {
  tabAreaPainter_ = nil;
  tabColorHolder_ = nil;
  tabAreaMargin_ = nil;
  selectedTabColorHolder_ = nil;
}

- (void)customizePaneWithRAREiTabPaneViewer:(id<RAREiTabPaneViewer>)tv
                  withRAREiTabPaneComponent:(id<RAREiTabPaneComponent>)tabPane {
  if (tv != nil) {
    [RAREPlatform registerWithWidgetWithRAREiPlatformComponent:[((id<RAREiTabPaneComponent>) nil_chk(tabPane)) getComponent] withRAREiWidget:[tv getViewer]];
  }
  [RAREaTabPaneViewer_TabOptions setTabStyleWithRAREiTabPaneComponent:tabPane withInt:tabStyle_];
  if (tabPosition_ != -1) {
    [RAREaTabPaneViewer_TabOptions setTabPositionWithRAREiTabPaneViewer:tv withRAREiTabPaneComponent:tabPane withInt:tabPosition_];
  }
  [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setBoldSelectedTabWithBoolean:boldSelectedTab_];
  if (tabAreaPainter_ != nil) {
    [tabPane setTabAreaPainterWithRAREPaintBucket:tabAreaPainter_];
  }
  if (tabColorHolder_ != nil) {
    [tabPane setTabPainterWithRAREPaintBucket:tabColorHolder_];
  }
  if (selectedTabColorHolder_ != nil) {
    [tabPane setSelectedPainterWithRAREPaintBucket:selectedTabColorHolder_];
  }
  if (tabAreaMargin_ != nil) {
    [tabPane setTabAreaMarginWithRAREUIInsets:tabAreaMargin_];
  }
  [tabPane setBoldSelectedTabWithBoolean:boldSelectedTab_];
  [tabPane setShowIconsOnTabWithBoolean:showIconsOnTab_];
  [RAREaTabPaneViewer_TabOptions setCloseButtonWithRAREiTabPaneComponent:tabPane withInt:tabClosePosition_];
  [RAREaTabPaneViewer_TabOptions setTabPositionWithRAREiTabPaneViewer:tv withRAREiTabPaneComponent:tabPane withInt:tabPosition_];
  if (tabFont_ != nil) {
    [tabPane setFontWithRAREUIFont:tabFont_];
  }
}

+ (void)setCloseButtonWithRAREiTabPaneComponent:(id<RAREiTabPaneComponent>)tabPane
                                        withInt:(int)location {
  switch (location) {
    case RARESPOTTabPane_CCloseButton_on_tab:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setShowCloseButtonOnTabWithBoolean:YES];
    [tabPane setShowCloseButtonWithBoolean:YES];
    break;
    case RARESPOTTabPane_CCloseButton_corner:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setShowCloseButtonWithBoolean:YES];
    break;
    default:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setShowCloseButtonWithBoolean:NO];
  }
}

+ (void)setTabPositionWithRAREiTabPaneViewer:(id<RAREiTabPaneViewer>)v
                   withRAREiTabPaneComponent:(id<RAREiTabPaneComponent>)tabPane
                                     withInt:(int)position {
  switch (position) {
    case RARESPOTTabPane_CTabPosition_top:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabPlacementWithRARELocationEnum:[RARELocationEnum TOP]];
    break;
    case RARESPOTTabPane_CTabPosition_bottom:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabPlacementWithRARELocationEnum:[RARELocationEnum BOTTOM]];
    break;
    case RARESPOTTabPane_CTabPosition_left:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabPlacementWithRARELocationEnum:[RARELocationEnum LEFT]];
    break;
    case RARESPOTTabPane_CTabPosition_right:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabPlacementWithRARELocationEnum:[RARELocationEnum RIGHT]];
    break;
    default:
    ;
  }
}

+ (void)setTabStyleWithRAREiTabPaneComponent:(id<RAREiTabPaneComponent>)tabPane
                                     withInt:(int)style {
  switch (style) {
    case RARESPOTTabPane_CTabStyle_box:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabShapeWithRAREiTabPaneViewer_ShapeEnum:[RAREiTabPaneViewer_ShapeEnum BOX]];
    break;
    case RARESPOTTabPane_CTabStyle_stacked:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabShapeWithRAREiTabPaneViewer_ShapeEnum:[RAREiTabPaneViewer_ShapeEnum BOX_STACKED]];
    break;
    case RARESPOTTabPane_CTabStyle_chrome:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabShapeWithRAREiTabPaneViewer_ShapeEnum:[RAREiTabPaneViewer_ShapeEnum CHROME]];
    break;
    case RARESPOTTabPane_CTabStyle_flat:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabShapeWithRAREiTabPaneViewer_ShapeEnum:[RAREiTabPaneViewer_ShapeEnum FLAT]];
    break;
    case RARESPOTTabPane_CTabStyle_office2003:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabShapeWithRAREiTabPaneViewer_ShapeEnum:[RAREiTabPaneViewer_ShapeEnum OFFICE2003]];
    break;
    case RARESPOTTabPane_CTabStyle_rounded_flat:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabShapeWithRAREiTabPaneViewer_ShapeEnum:[RAREiTabPaneViewer_ShapeEnum ROUNDED_FLAT]];
    break;
    case RARESPOTTabPane_CTabStyle_windows:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabShapeWithRAREiTabPaneViewer_ShapeEnum:[RAREiTabPaneViewer_ShapeEnum WINDOWS]];
    break;
    default:
    [((id<RAREiTabPaneComponent>) nil_chk(tabPane)) setTabShapeWithRAREiTabPaneViewer_ShapeEnum:[RAREiTabPaneViewer_ShapeEnum DEFAULT]];
    break;
  }
}

- (id)init {
  if (self = [super init]) {
    tabPosition_ = -1;
  }
  return self;
}

- (void)copyAllFieldsTo:(RAREaTabPaneViewer_TabOptions *)other {
  [super copyAllFieldsTo:other];
  other->boldSelectedTab_ = boldSelectedTab_;
  other->canCloseTabs_ = canCloseTabs_;
  other->editingAllowed_ = editingAllowed_;
  other->selectedTabColorHolder_ = selectedTabColorHolder_;
  other->showIconsOnTab_ = showIconsOnTab_;
  other->tabAreaMargin_ = tabAreaMargin_;
  other->tabAreaPainter_ = tabAreaPainter_;
  other->tabClosePosition_ = tabClosePosition_;
  other->tabColorHolder_ = tabColorHolder_;
  other->tabFont_ = tabFont_;
  other->tabPosition_ = tabPosition_;
  other->tabStyle_ = tabStyle_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "tabPosition_", NULL, 0x1, "I" },
    { "boldSelectedTab_", NULL, 0x1, "Z" },
    { "canCloseTabs_", NULL, 0x1, "Z" },
    { "editingAllowed_", NULL, 0x1, "Z" },
    { "selectedTabColorHolder_", NULL, 0x1, "LRAREPaintBucket" },
    { "showIconsOnTab_", NULL, 0x1, "Z" },
    { "tabAreaMargin_", NULL, 0x1, "LRAREUIInsets" },
    { "tabAreaPainter_", NULL, 0x1, "LRAREPaintBucket" },
    { "tabClosePosition_", NULL, 0x1, "I" },
    { "tabColorHolder_", NULL, 0x1, "LRAREPaintBucket" },
    { "tabFont_", NULL, 0x1, "LRAREUIFont" },
    { "tabStyle_", NULL, 0x1, "I" },
  };
  static J2ObjcClassInfo _RAREaTabPaneViewer_TabOptions = { "TabOptions", "com.appnativa.rare.viewer", "aTabPaneViewer", 0x9, 0, NULL, 12, fields, 0, NULL};
  return &_RAREaTabPaneViewer_TabOptions;
}

@end
