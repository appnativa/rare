//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-tabpane/com/appnativa/rare/ui/tabpane/aTabPainter.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/Location.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIAction.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontHelper.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/border/UILineBorder.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iParentComponent.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iTabDocument.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformPainter.h"
#include "com/appnativa/rare/ui/tabpane/aTabPainter.h"
#include "com/appnativa/rare/ui/tabpane/iTabLabel.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/Collection.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@implementation RAREaTabPainter

- (id)init {
  if (self = [super init]) {
    cornerSize_ = 0;
    endTab_ = 0;
    minTabHeight_ = 0;
    overlapOffset_ = 0;
    padding_ = 0;
    selectedTab_ = 0;
    startOffset_ = 0;
    startTab_ = 0;
    minTabWidth_ = 0;
    textInsets_ = [[RAREUIInsets alloc] init];
    sizesDirty_ = YES;
    showIconsOnTab_ = YES;
    position_ = [RARELocationEnum TOP];
    moreRect_ = [[RAREUIRectangle alloc] init];
    location_ = [RARELocationEnum TOP];
    iconPosition_ = [RARERenderableDataItem_IconPositionEnum LEADING];
    rendererMap_ = [[JavaUtilIdentityHashMap alloc] init];
    selectedTabBorderColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.TabPane.selectedTabBorderColor"];
    tabBorderColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.TabPane.tabBorderColor"];
    tabForeground_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.TabPane.tabForegroundColor"];
    if (tabBorderColor_ == nil) {
      tabBorderColor_ = [RAREaUILineBorder getDefaultLineColor];
    }
    if (selectedTabBorderColor_ == nil) {
      selectedTabBorderColor_ = tabBorderColor_;
    }
    JavaLangInteger *n = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getPixelsWithNSString:@"Rare.TabPane.minimumTabHeight"];
    if ((n != nil) && ([n intValue] > 0)) {
      minTabHeight_ = [n intValue];
    }
    n = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getPixelsWithNSString:@"Rare.TabPane.minimumTabWidth"];
    if ((n != nil) && ([n intValue] > 0)) {
      minTabWidth_ = [n intValue];
    }
  }
  return self;
}

- (void)checkForAndHandleMoreActionWithFloat:(float)hitX
                                   withFloat:(float)hitY
                                   withFloat:(float)x
                                   withFloat:(float)y
                                   withFloat:(float)width
                                   withFloat:(float)height {
  if (moreButton_ != nil) {
    if ([((RAREUIRectangle *) nil_chk([moreButton_ getBounds])) containsWithFloat:hitX withFloat:hitY]) {
      [moreButton_ fireActionEvent];
      [moreButton_ repaint];
    }
  }
}

- (void)dispose {
  moreButton_ = nil;
  header_ = nil;
  normalComponentPainter_ = nil;
  if (rendererMap_ != nil) {
    [self disposeOfRenderers];
    rendererMap_ = nil;
  }
  selectedComponentPainter_ = nil;
  selectedPainter_ = nil;
  tabPainter_ = nil;
  if (tabs_ != nil) {
    [tabs_ clear];
    tabs_ = nil;
  }
}

- (void)disposeOfRenderers {
  if (rendererMap_ != nil) {
    id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([rendererMap_ values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<RAREiTabLabel> l = [it next];
      if (l != nil) {
        [l dispose];
      }
    }
    [rendererMap_ clear];
  }
}

- (int)findTabWithFloat:(float)hitX
              withFloat:(float)hitY
              withFloat:(float)x
              withFloat:(float)y
              withFloat:(float)width
              withFloat:(float)height {
  BOOL vertical = [self isVerticalWhenFindingTabs];
  int len = [((id<JavaUtilList>) nil_chk(tabs_)) size];
  if (len == 0) {
    return -1;
  }
  return [self findTabWithFloat:hitX withFloat:hitY withFloat:x withFloat:y withFloat:width withFloat:height withInt:startTab_ withInt:endTab_ withBoolean:vertical];
}

- (void)labelRemovedWithRAREiTabLabel:(id<RAREiTabLabel>)label {
  [((id<RAREiParentComponent>) nil_chk(header_)) removeWithRAREiPlatformComponent:label];
  [((id<RAREiTabLabel>) nil_chk(label)) setActionWithRAREUIAction:nil];
}

- (void)layoutWithFloat:(float)x
              withFloat:(float)y
              withFloat:(float)width
              withFloat:(float)height {
  BOOL vertical = ((location_ == [RARELocationEnum LEFT]) || (location_ == [RARELocationEnum RIGHT])) && [self isHandlesRightLeftRotation];
  int len = [((id<JavaUtilList>) nil_chk(tabs_)) size];
  if (len == 0) {
    return;
  }
  if ((oldHeight_ != height) || (oldWidth_ != width)) {
    oldHeight_ = height;
    oldWidth_ = width;
    startTab_ = 0;
    endTab_ = len;
  }
  BOOL all;
  if (vertical) {
    [self updateTabLayoutSizeForWidthWithFloat:height];
    height -= (startOffset_ + endOffset_ + overlapOffset_);
    all = preferredSize_ < height;
  }
  else {
    width -= (startOffset_ + endOffset_ + overlapOffset_);
    [self updateTabLayoutSizeForWidthWithFloat:width];
    all = preferredSize_ < width;
  }
  if (all) {
    startTab_ = 0;
    endTab_ = len;
    [self layoutTabsWithFloat:x withFloat:y withFloat:width withFloat:height withInt:0 withInt:len withBoolean:vertical];
    return;
  }
  if ((selectedTab_ < startTab_) || (selectedTab_ >= endTab_) || ![self isRangeVisibleWithInt:startTab_ withInt:endTab_ withFloat:vertical ? height : width]) {
    startTab_ = [JavaLangMath maxWithInt:selectedTab_ withInt:0];
    endTab_ = -1;
    int w = 0;
    int i;
    for (i = startTab_; i < len; i++) {
      w += IOSIntArray_Get(nil_chk(tabLayoutSizes_), i);
      if (vertical) {
        if (w > height) {
          endTab_ = i;
          break;
        }
      }
      else {
        if (w > width) {
          endTab_ = i;
          break;
        }
      }
    }
    if (endTab_ == startTab_) {
      endTab_++;
    }
    else if (endTab_ == -1) {
      endTab_ = len;
      for (i = startTab_ - 1; i >= 0; i--) {
        w += IOSIntArray_Get(nil_chk(tabLayoutSizes_), i);
        if (vertical) {
          if (w > height) {
            break;
          }
        }
        else {
          if (w > width) {
            break;
          }
        }
        startTab_--;
      }
    }
  }
  RAREUIDimension *size = [self getMoreSizeWithBoolean:vertical withInt:startTab_ withInt:endTab_];
  int w = [self getRangeWidthWithInt:startTab_ withInt:endTab_];
  if (vertical) {
    if ((w + ((RAREUIDimension *) nil_chk(size))->height_ > height) && (endTab_ > 1)) {
      endTab_--;
    }
  }
  else {
    if ((w + ((RAREUIDimension *) nil_chk(size))->width_ + overlapOffset_ > width) && (endTab_ > 1)) {
      endTab_--;
      if (selectedTab_ == endTab_) {
        endTab_++;
        startTab_++;
        if (startTab_ == endTab_) {
          startTab_--;
        }
      }
    }
  }
  len = endTab_ - startTab_;
  if ((len > 0) && supportsUniformTabs_) {
    w = (int) [JavaLangMath floorWithDouble:(vertical ? height : width) - [self getRangeWidthWithInt:startTab_ withInt:endTab_] - (vertical ? ((RAREUIDimension *) nil_chk(size))->height_ : ((RAREUIDimension *) nil_chk(size))->width_)];
    int pad = [JavaLangMath maxWithInt:0 withInt:w / len];
    for (int i = startTab_; i < endTab_; i++) {
      (*IOSIntArray_GetRef(nil_chk(tabLayoutSizes_), i)) = IOSIntArray_Get(nil_chk(tabSizes_), i) + pad;
    }
  }
  [self layoutTabsWithFloat:x withFloat:y withFloat:width withFloat:height withInt:startTab_ withInt:endTab_ withBoolean:vertical];
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height {
  BOOL vertical = [self isVeticalPaint];
  int len = [((id<JavaUtilList>) nil_chk(tabs_)) size];
  if (len == 0) {
    return;
  }
  [self paintTabsWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:width withFloat:height withInt:startTab_ withInt:endTab_ withBoolean:vertical];
}

- (void)reset {
  [self resetTabs];
}

- (void)resetSizes {
  sizesDirty_ = YES;
}

- (void)tabAddedWithRAREUIAction:(RAREUIAction *)a {
  if ((tabPainter_ == nil) || (selectedPainter_ == nil)) {
    [self setupPainters];
  }
  id<RAREiTabLabel> r = [self configureRendererVisualsWithRAREUIAction:a withBoolean:NO];
  [((id<RAREiTabLabel>) nil_chk(r)) setWordWrapWithBoolean:YES];
  [self labelAddedWithRAREiTabLabel:r];
  sizesDirty_ = YES;
}

- (int)tabIndexAtWithInt:(int)x
                 withInt:(int)y {
  int width = [self getTabsWidth];
  int height = [self getTabsHeight];
  BOOL vertical = (location_ == [RARELocationEnum LEFT]) || (location_ == [RARELocationEnum RIGHT]);
  int len = [((id<JavaUtilList>) nil_chk(tabs_)) size];
  int tabSize;
  int stripSize;
  if (vertical) {
    height -= (startOffset_ + endOffset_);
    stripSize = width;
    tabSize = height / len;
  }
  else {
    width -= (startOffset_ + endOffset_);
    stripSize = height;
    tabSize = width / len;
  }
  int n;
  switch ([location_ ordinal]) {
    case RARELocation_RIGHT:
    n = y;
    y = x;
    x = n;
    break;
    case RARELocation_LEFT:
    n = y;
    y = x;
    x = height - n;
    break;
    default:
    ;
  }
  n = [self indexForTabsWithFloat:x withFloat:y withInt:tabSize withInt:stripSize withInt:startTab_ withInt:endTab_ withBoolean:vertical];
  if ((n == -1) && (moreRect_ != nil) && [moreRect_ containsWithFloat:x withFloat:y]) {
    return [tabs_ size];
  }
  return n;
}

- (void)tabRemovedWithRAREUIAction:(RAREUIAction *)a {
  id<RAREiTabLabel> r = [self getRendererWithRAREUIAction:a];
  if (r != nil) {
    [self labelRemovedWithRAREiTabLabel:r];
    sizesDirty_ = YES;
  }
}

- (void)updateTabSizes {
  if ((tabPainter_ == nil) || (selectedPainter_ == nil)) {
    [self setupPainters];
  }
  BOOL horizontal = [self isHorizontal] || ![self isHandlesRightLeftRotation];
  int len = [((id<JavaUtilList>) nil_chk(tabs_)) size];
  if ((tabSizes_ == nil) || ((int) [tabSizes_ count] != len)) {
    tabSizes_ = [IOSIntArray arrayWithLength:len];
  }
  if ((tabLayoutSizes_ == nil) || ((int) [tabLayoutSizes_ count] != len)) {
    tabLayoutSizes_ = [IOSIntArray arrayWithLength:len];
  }
  preferredSize_ = 0;
  minimumSize_ = 0;
  oldLayoutWidth_ = 0;
  RAREUIDimension *size = [[RAREUIDimension alloc] init];
  float height = 0;
  int n;
  RAREUIFont *f = selectedTabFont_;
  if (tabFont_ == nil) {
    tabFont_ = [RAREFontUtils getDefaultFont];
  }
  if (f == nil) {
    if (boldSelectedTab_) {
      f = [((RAREUIFont *) nil_chk(tabFont_)) deriveBold];
      selectedTabFont_ = f;
    }
    else {
      f = tabFont_;
    }
  }
  for (int i = 0; i < len; i++) {
    RAREUIAction *a = [tabs_ getWithInt:i];
    id<RAREiTabLabel> l = [self getRendererWithRAREUIAction:a];
    RAREUIFont *of = [((id<RAREiTabLabel>) nil_chk(l)) getFont];
    [l setFontWithRAREUIFont:f];
    (void) [l getPreferredSizeWithRAREUIDimension:size];
    n = (int) [JavaLangMath ceilWithDouble:horizontal ? [JavaLangMath maxWithFloat:size->width_ withFloat:minTabWidth_] : [JavaLangMath maxWithFloat:size->height_ withFloat:minTabHeight_]];
    preferredSize_ += n;
    (*IOSIntArray_GetRef(nil_chk(tabSizes_), i)) = n;
    (*IOSIntArray_GetRef(nil_chk(tabLayoutSizes_), i)) = n;
    minimumSize_ = [JavaLangMath maxWithInt:minimumSize_ withInt:n];
    height = [JavaLangMath maxWithFloat:height withFloat:horizontal ? size->height_ : size->width_];
    if (of != nil) {
      [l setFontWithRAREUIFont:of];
    }
  }
  if (moreButton_ != nil) {
    RAREUIFont *of = [moreButton_ getFont];
    [moreButton_ setFontWithRAREUIFont:f];
    (void) [moreButton_ getPreferredSizeWithRAREUIDimension:size];
    height = [JavaLangMath maxWithFloat:height withFloat:horizontal ? size->height_ : size->width_];
    if (of != nil) {
      [moreButton_ setFontWithRAREUIFont:of];
    }
  }
  if ((selectedComponentPainter_ != nil) && ([selectedComponentPainter_ getBorder] != nil)) {
    RAREUIInsets *in = [((id<RAREiPlatformBorder>) nil_chk([selectedComponentPainter_ getBorder])) getBorderInsetsWithRAREUIInsets:(RAREUIInsets *) check_class_cast(nil, [RAREUIInsets class])];
    if (horizontal) {
      height += ((RAREUIInsets *) nil_chk(in))->top_ + in->bottom_;
      preferredSize_ += in->left_ + in->right_;
      minimumSize_ += in->left_ + in->right_;
    }
    else {
      height += ((RAREUIInsets *) nil_chk(in))->left_ + in->right_;
      preferredSize_ += in->top_ + in->bottom_;
      minimumSize_ += in->top_ + in->bottom_;
      ;
    }
  }
  tabsHeight_ = (int) [JavaLangMath ceilWithDouble:height + padding_ + [self getHeightExtra]];
  if (tabsHeight_ % 2 == 1) {
    tabsHeight_++;
  }
  preferredSize_ += startOffset_ + endOffset_;
  minimumSize_ *= 2;
  minimumSize_ += startOffset_ + endOffset_;
  tabsHeight_ = [JavaLangMath maxWithInt:tabsHeight_ withInt:minTabHeight_];
  sizesDirty_ = NO;
}

- (void)setAlwaysShowMoreTextWithBoolean:(BOOL)alwaysShowMoreText {
  self->alwaysShowMoreText_ = alwaysShowMoreText;
}

- (void)setBoldSelectedTabWithBoolean:(BOOL)bold {
  boldSelectedTab_ = bold;
}

- (void)setEndOffsetWithInt:(int)offset {
  endOffset_ = offset;
}

- (void)setHeaderWithRAREiParentComponent:(id<RAREiParentComponent>)header {
  self->header_ = header;
}

- (void)setMinTabHeightWithInt:(int)height {
  minTabHeight_ = height;
  [self resetTabs];
}

- (void)setMinTabWidthWithInt:(int)minTabWidth {
  self->minTabWidth_ = minTabWidth;
}

- (void)setMoreButtonWithRAREiActionComponent:(id<RAREiActionComponent>)more {
  if ((moreButton_ != nil) && (header_ != nil)) {
    [header_ removeWithRAREiPlatformComponent:self->moreButton_];
  }
  moreButton_ = more;
  if (more != nil) {
    [more setIconPositionWithRARERenderableDataItem_IconPositionEnum:iconPosition_];
    [self setTextMarginWithRAREiActionComponent:more];
  }
  if ((more != nil) && (header_ != nil)) {
    [header_ addWithRAREiPlatformComponent:more];
  }
}

- (void)setNormalPaintWithRAREPaintBucket:(RAREPaintBucket *)pb {
  tabPainter_ = pb;
  normalComponentPainter_ = [((RAREPaintBucket *) nil_chk(pb)) getComponentPainterWithBoolean:YES];
  RAREUIFont *f = [pb getFont];
  if ((f == nil) && (tabFont_ == nil)) {
    f = [RAREUIFontHelper getDefaultFont];
  }
  else {
    f = tabFont_;
  }
  tabFont_ = f;
  RAREUIColor *c = [pb getForegroundColor];
  if (c == nil) {
    c = [RAREUIColorHelper getForeground];
  }
  tabForeground_ = c;
  if ((selectedPainter_ == nil) || ([selectedPainter_ getForegroundColor] == nil)) {
    selectedTabForeground_ = c;
  }
  [self resetTabs];
}

- (void)setPositionWithRARELocationEnum:(RARELocationEnum *)position {
  if (position != self->position_) {
    self->position_ = position;
    [self setLocationWithRARELocationEnum:position];
  }
}

- (void)setSelectedPaintWithRAREPaintBucket:(RAREPaintBucket *)pb {
  if (pb != selectedPainter_) {
    selectedPainter_ = pb;
    selectedComponentPainter_ = [((RAREPaintBucket *) nil_chk(pb)) getComponentPainterWithBoolean:YES];
    selectedTabFont_ = [pb getFont];
    selectedTabForeground_ = [pb getForegroundColor];
  }
}

- (void)setSelectedTabWithInt:(int)tab {
  if (tabPainter_ == nil) {
    [self setupPainters];
  }
  id<RAREiTabLabel> l;
  RAREUIAction *a;
  if ((selectedTab_ > -1) && (selectedTab_ < [((id<JavaUtilList>) nil_chk(tabs_)) size])) {
    a = [tabs_ getWithInt:selectedTab_];
    l = [((JavaUtilIdentityHashMap *) nil_chk(rendererMap_)) getWithId:a];
    if (l != nil) {
      (void) [self configureRendererVisualsWithRAREUIAction:a withBoolean:NO];
      [l setIsSelectedTabWithBoolean:NO];
      [self tabSelectionChangedWithInt:selectedTab_ withRAREiTabLabel:l withBoolean:NO];
    }
  }
  RAREUIColor *c = selectedTabForeground_;
  if (c == nil) {
    c = tabForeground_;
  }
  selectedTab_ = tab;
  if ((selectedTab_ > -1) && (selectedTab_ < [((id<JavaUtilList>) nil_chk(tabs_)) size])) {
    a = [tabs_ getWithInt:selectedTab_];
    (void) [self configureRendererVisualsWithRAREUIAction:a withBoolean:YES];
    l = [((JavaUtilIdentityHashMap *) nil_chk(rendererMap_)) getWithId:a];
    [((id<RAREiTabLabel>) nil_chk(l)) setIsSelectedTabWithBoolean:YES];
    [self tabSelectionChangedWithInt:tab withRAREiTabLabel:l withBoolean:YES];
  }
}

- (void)setSelectedTabBorderColorWithRAREUIColor:(RAREUIColor *)selectedTabBorderColor {
  self->selectedTabBorderColor_ = selectedTabBorderColor;
}

- (void)setShowIconsOnTabWithBoolean:(BOOL)show {
  showIconsOnTab_ = show;
}

- (void)setSmallestTabSizeWithInt:(int)smallestTabSize {
  self->smallestTabSize_ = smallestTabSize;
}

- (void)setStartOffsetWithInt:(int)offset {
  startOffset_ = offset;
}

- (void)setStartTabWithInt:(int)tab {
  startTab_ = tab;
}

- (void)setTabBorderColorWithRAREUIColor:(RAREUIColor *)tabBorderColor {
  self->tabBorderColor_ = tabBorderColor;
}

- (void)setTabFontWithRAREUIFont:(RAREUIFont *)tabFont {
  self->tabFont_ = tabFont;
}

- (void)setTabsWithJavaUtilList:(id<JavaUtilList>)tabs {
  self->tabs_ = tabs;
  IOSObjectArray *a = [((id<JavaUtilCollection>) nil_chk([((JavaUtilIdentityHashMap *) nil_chk(rendererMap_)) values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[rendererMap_ size] type:[IOSClass classWithProtocol:@protocol(RAREiTabLabel)]]];
  [self disposeOfRenderers];
  int len = [((id<JavaUtilList>) nil_chk(tabs)) size];
  id<RAREiTabLabel> r;
  [self clearLabels];
  for (int i = 0; i < len; i++) {
    if (i < (int) [((IOSObjectArray *) nil_chk(a)) count]) {
      r = IOSObjectArray_Get(a, i);
      [((id<RAREiTabLabel>) nil_chk(r)) setActionWithRAREUIAction:[tabs getWithInt:i]];
    }
    else {
      r = [self createRendererWithRAREUIAction:[tabs getWithInt:i]];
    }
    [self labelAddedWithRAREiTabLabel:r];
  }
  sizesDirty_ = YES;
  tabSizes_ = [IOSIntArray arrayWithLength:len];
  tabLayoutSizes_ = [IOSIntArray arrayWithLength:len];
}

- (void)setTextHorizontalAlignmentWithRARERenderableDataItem_HorizontalAlignEnum:(RARERenderableDataItem_HorizontalAlignEnum *)horizontalAlignment {
  self->horizontalAlignment_ = horizontalAlignment;
  [self updateTabVisuals];
}

- (RAREUIColor *)getBackgroundColor {
  return [((RAREPaintBucket *) nil_chk(tabPainter_)) getBackgroundColor];
}

- (id<RAREiPlatformPainter>)getBackgroundPainter {
  return nil;
}

- (int)getEndTab {
  return endTab_;
}

- (RAREUIColor *)getForegroundColor {
  return [((RAREPaintBucket *) nil_chk(tabPainter_)) getForegroundColor];
}

- (int)getHeightExtra {
  return [self isHorizontal] ? 1 : 0;
}

- (RARERenderableDataItem_IconPositionEnum *)getIconPosition {
  return iconPosition_;
}

- (int)getMinTabHeight {
  return minTabHeight_;
}

- (int)getMinTabWidth {
  return minTabWidth_;
}

- (void)getMinimumSizeWithRAREUIDimension:(RAREUIDimension *)size {
  int w = [self getMinimumWidth];
  int h = [self getTabsHeight];
  if ([self isHorizontal]) {
    ((RAREUIDimension *) nil_chk(size))->width_ = w;
    size->height_ = h;
  }
  else {
    ((RAREUIDimension *) nil_chk(size))->width_ = h;
    size->height_ = w;
  }
}

- (int)getMinimumWidth {
  if (sizesDirty_) {
    [self updateTabSizes];
  }
  return minimumSize_;
}

- (RAREPaintBucket *)getNormalPaint {
  return tabPainter_;
}

- (RARELocationEnum *)getPosition {
  return position_;
}

- (void)getPreferredSizeWithRAREUIDimension:(RAREUIDimension *)size {
  int w = [self getTabsWidth] + [self getSmallestTabSize];
  int h = [self getTabsHeight];
  if ([self isHorizontal]) {
    ((RAREUIDimension *) nil_chk(size))->width_ = w;
    size->height_ = h;
  }
  else {
    ((RAREUIDimension *) nil_chk(size))->width_ = h;
    size->height_ = w;
  }
}

- (RAREPaintBucket *)getSelectedPaint {
  return selectedPainter_;
}

- (int)getSelectedTab {
  return selectedTab_;
}

- (RAREUIColor *)getSelectedTabBorderColor {
  return selectedTabBorderColor_;
}

- (int)getSmallestTabSize {
  if (smallestTabSize_ > 0) {
    return smallestTabSize_;
  }
  int len = (int) [((IOSIntArray *) nil_chk(tabSizes_)) count];
  int w = JavaLangInteger_MAX_VALUE;
  ;
  for (int i = 0; i < len; i++) {
    w = [JavaLangMath minWithInt:IOSIntArray_Get(tabSizes_, i) withInt:w];
  }
  return w;
}

- (int)getStartOffset {
  return startOffset_;
}

- (int)getStartTab {
  return startTab_;
}

- (RAREUIAction *)getTabWithInt:(int)index {
  return [((id<JavaUtilList>) nil_chk(tabs_)) getWithInt:index];
}

- (RAREUIColor *)getTabBorderColor {
  return tabBorderColor_;
}

- (int)getTabCount {
  return [((id<JavaUtilList>) nil_chk(tabs_)) size];
}

- (RAREUIFont *)getTabFont {
  return tabFont_;
}

- (int)getTabsHeight {
  if (sizesDirty_) {
    [self updateTabSizes];
  }
  return tabsHeight_;
}

- (int)getTabsPadding {
  return padding_;
}

- (int)getTabsWidth {
  if (sizesDirty_) {
    [self updateTabSizes];
  }
  return preferredSize_;
}

- (int)getWidthExtra {
  return [self isHorizontal] ? 0 : 1;
}

- (BOOL)isBoldSelectedTab {
  return boldSelectedTab_;
}

- (BOOL)isHandlesBottomRotation {
  return NO;
}

- (BOOL)isHandlesRightLeftRotation {
  return NO;
}

- (BOOL)isHorizontal {
  return (location_ == [RARELocationEnum TOP]) || (location_ == [RARELocationEnum BOTTOM]);
}

- (BOOL)isShowIconsOnTab {
  return showIconsOnTab_;
}

- (BOOL)isShowMoreIconText {
  return alwaysShowMoreText_;
}

- (void)clearLabels {
  if (header_ != nil) {
    [header_ removeAll];
    if (moreButton_ != nil) {
      [header_ addWithRAREiPlatformComponent:moreButton_];
    }
  }
}

- (id<RAREiTabLabel>)configureRendererVisualsWithRAREUIAction:(RAREUIAction *)a
                                                  withBoolean:(BOOL)selected {
  if (tabFont_ == nil) {
    tabFont_ = [((RAREPaintBucket *) nil_chk(tabPainter_)) getFont];
    if (tabFont_ == nil) {
      tabFont_ = [RAREFontUtils getDefaultFont];
    }
  }
  RAREPaintBucket *pb = selected ? selectedPainter_ : tabPainter_;
  RAREUIFont *f = [pb getFont];
  if (f == nil) {
    f = selected ? selectedTabFont_ : tabFont_;
  }
  id<RAREiTabLabel> renderer = [((JavaUtilIdentityHashMap *) nil_chk(rendererMap_)) getWithId:a];
  if (renderer == nil) {
    renderer = [self createRendererWithRAREUIAction:a];
  }
  RAREUIColor *fg = [pb getForegroundColor];
  if (fg == nil) {
    fg = [RAREColorUtils getForeground];
  }
  pb = [((id<RAREiTabDocument>) check_protocol_cast([((RAREUIAction *) nil_chk(a)) getLinkedData], @protocol(RAREiTabDocument))) getTabColors];
  if (pb != nil) {
    RAREUIColor *c = [pb getForegroundColor];
    if (c != nil) {
      fg = c;
    }
    RAREUIFont *ff = [pb getFont];
    if (ff != nil) {
      f = ff;
    }
  }
  [((id<RAREiTabLabel>) nil_chk(renderer)) setForegroundWithRAREUIColor:fg];
  [renderer setMinHeightWithInt:minTabHeight_];
  [self setTextMarginWithRAREiActionComponent:renderer];
  [renderer setFontWithRAREUIFont:f];
  [renderer setIconPositionWithRARERenderableDataItem_IconPositionEnum:iconPosition_];
  if (horizontalAlignment_ != nil) {
    [renderer setAlignmentWithRARERenderableDataItem_HorizontalAlignEnum:horizontalAlignment_ withRARERenderableDataItem_VerticalAlignEnum:[RARERenderableDataItem_VerticalAlignEnum AUTO]];
  }
  return renderer;
}

- (id<RAREiPlatformComponentPainter>)getUnselectedPainterWithInt:(int)tab {
  RAREPaintBucket *pb = [((id<RAREiTabDocument>) check_protocol_cast([((RAREUIAction *) nil_chk([((id<JavaUtilList>) nil_chk(tabs_)) getWithInt:tab])) getLinkedData], @protocol(RAREiTabDocument))) getTabColors];
  id<RAREiPlatformComponentPainter> cp = (pb == nil) ? nil : [pb getCachedComponentPainter];
  return (cp == nil) ? normalComponentPainter_ : cp;
}

- (id<RAREiTabLabel>)createNewRendererWithRAREUIAction:(RAREUIAction *)a {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setTextMarginWithRAREiActionComponent:(id<RAREiActionComponent>)ac {
  [((id<RAREiActionComponent>) nil_chk(ac)) setMarginWithRAREUIInsets:textInsets_];
}

- (id<RAREiTabLabel>)createRendererWithRAREUIAction:(RAREUIAction *)a {
  id<RAREiTabLabel> tv = [self createNewRendererWithRAREUIAction:a];
  [((id<RAREiTabLabel>) nil_chk(tv)) setMinHeightWithInt:minTabHeight_];
  [self setTextMarginWithRAREiActionComponent:tv];
  [tv setIconPositionWithRARERenderableDataItem_IconPositionEnum:iconPosition_];
  if (horizontalAlignment_ != nil) {
    [tv setAlignmentWithRARERenderableDataItem_HorizontalAlignEnum:horizontalAlignment_ withRARERenderableDataItem_VerticalAlignEnum:[RARERenderableDataItem_VerticalAlignEnum AUTO]];
  }
  (void) [((JavaUtilIdentityHashMap *) nil_chk(rendererMap_)) putWithId:a withId:tv];
  return tv;
}

- (int)findTabWithFloat:(float)hitX
              withFloat:(float)hitY
              withFloat:(float)x
              withFloat:(float)y
              withFloat:(float)width
              withFloat:(float)height
                withInt:(int)start
                withInt:(int)end
            withBoolean:(BOOL)vertical {
  float w = width;
  float h = height;
  int len = [((id<JavaUtilList>) nil_chk(tabs_)) size];
  x += startOffset_;
  for (int i = 0; i < len; i++) {
    if ((i < start) || (i >= end)) {
      continue;
    }
    w = IOSIntArray_Get(nil_chk(tabLayoutSizes_), i);
    if (vertical) {
      h = w;
      w = width;
      if ((hitY + overlapOffset_ >= y) && (hitY <= (y + h))) {
        if ([self isInsideShapeWithFloat:hitX withFloat:hitY withFloat:x withFloat:y withFloat:width withFloat:height withInt:i]) {
          return i;
        }
      }
    }
    else {
      if ((hitX + overlapOffset_ >= x) && (hitX <= (x + w + overlapOffset_))) {
        if ([self isInsideShapeWithFloat:hitX withFloat:hitY withFloat:x withFloat:y withFloat:width withFloat:height withInt:i]) {
          return i;
        }
      }
    }
    if (vertical) {
      y += h;
    }
    else {
      x += w;
    }
  }
  return -1;
}

- (int)indexForTabsWithFloat:(float)x
                   withFloat:(float)y
                     withInt:(int)tabSize
                     withInt:(int)stripSize
                     withInt:(int)start
                     withInt:(int)end
                 withBoolean:(BOOL)vertical {
  RAREUIRectangle *r;
  if (vertical) {
    r = [[RAREUIRectangle alloc] initWithFloat:0 withFloat:startOffset_ withFloat:stripSize withFloat:tabSize];
  }
  else {
    r = [[RAREUIRectangle alloc] initWithFloat:startOffset_ withFloat:0 withFloat:tabSize withFloat:stripSize];
  }
  int w;
  for (int i = startTab_; i < endTab_; i++) {
    w = IOSIntArray_Get(nil_chk(tabLayoutSizes_), i);
    w -= overlapOffset_;
    if (vertical) {
      ((RAREUIRectangle *) nil_chk(r))->height_ = w;
    }
    else {
      ((RAREUIRectangle *) nil_chk(r))->width_ = w;
    }
    if ([((RAREUIRectangle *) nil_chk(r)) containsWithFloat:x withFloat:y]) {
      return i;
    }
    if (vertical) {
      r->y_ += w;
    }
    else {
      r->x_ += w;
    }
  }
  return -1;
}

- (void)labelAddedWithRAREiTabLabel:(id<RAREiTabLabel>)label {
  [((id<RAREiParentComponent>) nil_chk(header_)) removeWithRAREiPlatformComponent:label];
  [header_ addWithRAREiPlatformComponent:label];
}

- (void)layoutMoreButtonWithRAREiActionComponent:(id<RAREiActionComponent>)button
                                       withFloat:(float)x
                                       withFloat:(float)y
                                       withFloat:(float)width
                                       withFloat:(float)height
                                     withBoolean:(BOOL)vertical {
  [((id<RAREiActionComponent>) nil_chk(button)) setBoundsWithFloat:x withFloat:y withFloat:width - [RAREScreenUtils PLATFORM_PIXELS_2] withFloat:height];
}

- (void)layoutTabWithRAREiTabLabel:(id<RAREiTabLabel>)tab
                         withFloat:(float)x
                         withFloat:(float)y
                         withFloat:(float)width
                         withFloat:(float)height
                           withInt:(int)index {
  [((id<RAREiTabLabel>) nil_chk(tab)) setBoundsWithFloat:x withFloat:y withFloat:width withFloat:height];
}

- (void)layoutTabsWithFloat:(float)x
                  withFloat:(float)y
                  withFloat:(float)width
                  withFloat:(float)height
                    withInt:(int)start
                    withInt:(int)end
                withBoolean:(BOOL)vertical {
  float w = width;
  float h = height;
  float right = x + width;
  float bottom = y + height;
  int len = (int) [((IOSIntArray *) nil_chk(tabLayoutSizes_)) count];
  BOOL needsMore = NO;
  for (int i = 0; i < len; i++) {
    id<RAREiTabLabel> node = [self getRendererWithRAREUIAction:[((id<JavaUtilList>) nil_chk(tabs_)) getWithInt:i]];
    if ((i < start) || (i >= end)) {
      [((id<RAREiTabLabel>) nil_chk(node)) setVisibleWithBoolean:NO];
      needsMore = YES;
      continue;
    }
    [((id<RAREiTabLabel>) nil_chk(node)) setVisibleWithBoolean:YES];
    w = IOSIntArray_Get(tabLayoutSizes_, i);
    if (vertical) {
      h = w;
      w = width;
    }
    [self layoutTabWithRAREiTabLabel:node withFloat:x withFloat:y withFloat:w withFloat:h withInt:i];
    if (vertical) {
      y += h;
    }
    else {
      x += w;
    }
  }
  if (needsMore && (moreButton_ != nil)) {
    [moreButton_ setVisibleWithBoolean:YES];
    if (![self isShowMoreIconText]) {
      id<JavaLangCharSequence> s = [moreButton_ getText];
      if ((s != nil) && ([s sequenceLength] > 0)) {
        [moreButton_ setTextWithJavaLangCharSequence:@""];
      }
    }
    [self layoutMoreButtonWithRAREiActionComponent:moreButton_ withFloat:x withFloat:y withFloat:right - x withFloat:bottom - y withBoolean:vertical];
  }
  else {
    if (moreButton_ != nil) {
      [moreButton_ setVisibleWithBoolean:NO];
    }
  }
}

- (void)locationChanged {
  if (moreButton_ != nil) {
    [moreButton_ repaint];
  }
}

- (void)paintTabWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                        withRAREiTabLabel:(id<RAREiTabLabel>)tab
                                withFloat:(float)x
                                withFloat:(float)y
                                withFloat:(float)width
                                withFloat:(float)height
                                  withInt:(int)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)paintTabsWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                                 withFloat:(float)x
                                 withFloat:(float)y
                                 withFloat:(float)width
                                 withFloat:(float)height
                                   withInt:(int)start
                                   withInt:(int)end
                               withBoolean:(BOOL)vertical {
  float w = width;
  float h = height;
  int len = [((id<JavaUtilList>) nil_chk(tabs_)) size];
  for (int i = 0; i < len; i++) {
    if ((i < start) || (i >= end)) {
      continue;
    }
    w = IOSIntArray_Get(nil_chk(tabLayoutSizes_), i);
    if (vertical) {
      h = w;
      w = width;
    }
    if (vertical) {
      y += h;
    }
    else {
      x += w;
    }
  }
  for (int i = len - 1; i > -1; i--) {
    id<RAREiTabLabel> node = [self getRendererWithRAREUIAction:[tabs_ getWithInt:i]];
    if ((i < start) || (i >= end)) {
      continue;
    }
    w = IOSIntArray_Get(nil_chk(tabLayoutSizes_), i);
    if (vertical) {
      h = w;
      w = width;
    }
    if (vertical) {
      y -= h;
    }
    else {
      x -= w;
    }
    [self paintTabWithRAREiPlatformGraphics:g withRAREiTabLabel:node withFloat:x withFloat:y withFloat:w withFloat:h withInt:i];
  }
}

- (void)resetTabs {
  if ((tabs_ != nil) && (tabPainter_ != nil)) {
    if (normalComponentPainter_ != nil) {
      [normalComponentPainter_ setBorderWithRAREiPlatformBorder:nil];
    }
    for (RAREUIAction * __strong a in tabs_) {
      (void) [self configureRendererVisualsWithRAREUIAction:a withBoolean:NO];
    }
    [self updateTabSizes];
  }
}

- (void)setupPainters {
  if (tabPainter_ == nil) {
    [self setNormalPaintWithRAREPaintBucket:[[RAREPaintBucket alloc] initWithRAREUIColor:[RAREColorUtils getForeground] withRAREUIColor:[((RAREUIColor *) nil_chk([RAREColorUtils getBackground])) brighter]]];
    tabBorderColor_ = [RAREaUILineBorder getDefaultLineColor];
  }
  if (selectedPainter_ == nil) {
    [self setSelectedPaintWithRAREPaintBucket:[[RAREPaintBucket alloc] initWithRAREUIColor:[RAREColorUtils getForeground] withRAREUIColor:[RAREColorUtils getBackground]]];
  }
}

- (void)tabSelectionChangedWithInt:(int)tab
                 withRAREiTabLabel:(id<RAREiTabLabel>)l
                       withBoolean:(BOOL)selected {
}

- (void)updateTabVisuals {
  int len = [((id<JavaUtilList>) nil_chk(tabs_)) size];
  for (int i = len - 1; i >= 0; i++) {
    (void) [self configureRendererVisualsWithRAREUIAction:[tabs_ getWithInt:i] withBoolean:i == selectedTab_];
  }
}

- (void)setLocationWithRARELocationEnum:(RARELocationEnum *)location {
  if (location != self->location_) {
    self->location_ = location;
    sizesDirty_ = YES;
    startTab_ = 0;
    endTab_ = 0;
    [self locationChanged];
  }
}

- (RARELocationEnum *)getLocation {
  return location_;
}

- (RAREUIDimension *)getMoreSizeWithBoolean:(BOOL)vertical
                                    withInt:(int)start
                                    withInt:(int)end {
  if (((start == 0) && (end == [((id<JavaUtilList>) nil_chk(tabs_)) size])) || (moreButton_ == nil)) {
    return [[RAREUIDimension alloc] initWithFloat:0 withFloat:0];
  }
  RAREUIDimension *d = [[RAREUIDimension alloc] init];
  (void) [((id<RAREiActionComponent>) nil_chk(moreButton_)) getPreferredSizeWithRAREUIDimension:d];
  if (vertical) {
    d->height_ = (int) [JavaLangMath maxWithFloat:d->height_ withFloat:[self getSmallestTabSize]];
  }
  else {
    d->width_ = (int) [JavaLangMath maxWithFloat:d->height_ withFloat:[self getSmallestTabSize]];
  }
  return d;
}

- (RAREUIFont *)getNormalFont {
  RAREUIFont *f = tabFont_;
  if (f == nil) {
    f = [RAREFontUtils getDefaultFont];
  }
  return f;
}

- (int)getRangeWidthWithInt:(int)start
                    withInt:(int)end {
  int w = 0;
  IOSIntArray *tw = tabSizes_;
  for (int i = start; i < end; i++) {
    w += IOSIntArray_Get(nil_chk(tw), i);
  }
  return w + startOffset_ + overlapOffset_;
}

- (id<RAREiTabLabel>)getRendererWithRAREUIAction:(RAREUIAction *)a {
  id<RAREiTabLabel> tv = [((JavaUtilIdentityHashMap *) nil_chk(rendererMap_)) getWithId:a];
  if (tv == nil) {
    tv = [self createNewRendererWithRAREUIAction:a];
    (void) [rendererMap_ putWithId:a withId:tv];
  }
  return tv;
}

- (BOOL)isInsideShapeWithFloat:(float)hitX
                     withFloat:(float)hitY
                     withFloat:(float)x
                     withFloat:(float)y
                     withFloat:(float)width
                     withFloat:(float)height
                       withInt:(int)index {
  return YES;
}

- (BOOL)isRangeVisibleWithInt:(int)start
                      withInt:(int)end
                    withFloat:(float)width {
  return [self getRangeWidthWithInt:start withInt:end] <= width;
}

- (BOOL)isVerticalWhenFindingTabs {
  return ((location_ == [RARELocationEnum LEFT]) || (location_ == [RARELocationEnum RIGHT])) && [self isHandlesRightLeftRotation];
}

- (BOOL)isVeticalPaint {
  return ((location_ == [RARELocationEnum LEFT]) || (location_ == [RARELocationEnum RIGHT])) && [self isHandlesRightLeftRotation];
}

- (void)updateTabLayoutSizeForWidthWithFloat:(float)width {
  if (oldLayoutWidth_ != width) {
    oldLayoutWidth_ = width;
    float w = 0;
    IOSIntArray *tw = tabSizes_;
    IOSIntArray *tlw = tabLayoutSizes_;
    int len = (int) [((IOSIntArray *) nil_chk(tw)) count];
    do {
      if (len == 1) {
        (*IOSIntArray_GetRef(nil_chk(tabLayoutSizes_), 0)) = (int) width;
        break;
      }
      if ((width < preferredSize_) || !supportsUniformTabs_) {
        for (int i = 0; i < len; i++) {
          (*IOSIntArray_GetRef(nil_chk(tlw), i)) = IOSIntArray_Get(tw, i);
        }
        break;
      }
      for (int i = 0; i < len; i++) {
        w = [JavaLangMath maxWithFloat:w withFloat:IOSIntArray_Get(tw, i)];
      }
      float ww = w * len;
      if (ww < width) {
        w = width / len;
        for (int i = 0; i < len; i++) {
          (*IOSIntArray_GetRef(nil_chk(tlw), i)) = (int) w;
        }
      }
      else {
        ww = (width - preferredSize_) / (len - 1);
        for (int i = 0; i < len; i++) {
          if (IOSIntArray_Get(tw, i) != w) {
            (*IOSIntArray_GetRef(nil_chk(tlw), i)) = IOSIntArray_Get(tw, i) + (int) ww;
          }
          else {
            (*IOSIntArray_GetRef(nil_chk(tlw), i)) = IOSIntArray_Get(tw, i);
          }
        }
      }
    }
    while (NO);
  }
}

- (void)copyAllFieldsTo:(RAREaTabPainter *)other {
  [super copyAllFieldsTo:other];
  other->alwaysShowMoreText_ = alwaysShowMoreText_;
  other->boldSelectedTab_ = boldSelectedTab_;
  other->cornerSize_ = cornerSize_;
  other->endOffset_ = endOffset_;
  other->endTab_ = endTab_;
  other->header_ = header_;
  other->horizontalAlignment_ = horizontalAlignment_;
  other->iconPosition_ = iconPosition_;
  other->location_ = location_;
  other->minTabHeight_ = minTabHeight_;
  other->minTabWidth_ = minTabWidth_;
  other->minimumSize_ = minimumSize_;
  other->moreButton_ = moreButton_;
  other->moreRect_ = moreRect_;
  other->normalComponentPainter_ = normalComponentPainter_;
  other->oldHeight_ = oldHeight_;
  other->oldLayoutWidth_ = oldLayoutWidth_;
  other->oldWidth_ = oldWidth_;
  other->overlapOffset_ = overlapOffset_;
  other->padding_ = padding_;
  other->position_ = position_;
  other->preferredSize_ = preferredSize_;
  other->rendererMap_ = rendererMap_;
  other->selectedComponentPainter_ = selectedComponentPainter_;
  other->selectedPainter_ = selectedPainter_;
  other->selectedTab_ = selectedTab_;
  other->selectedTabBorderColor_ = selectedTabBorderColor_;
  other->selectedTabFont_ = selectedTabFont_;
  other->selectedTabForeground_ = selectedTabForeground_;
  other->showIconsOnTab_ = showIconsOnTab_;
  other->sizesDirty_ = sizesDirty_;
  other->smallestTabSize_ = smallestTabSize_;
  other->startOffset_ = startOffset_;
  other->startTab_ = startTab_;
  other->supportsUniformTabs_ = supportsUniformTabs_;
  other->tabBorderColor_ = tabBorderColor_;
  other->tabFont_ = tabFont_;
  other->tabForeground_ = tabForeground_;
  other->tabLayoutSizes_ = tabLayoutSizes_;
  other->tabPainter_ = tabPainter_;
  other->tabSizes_ = tabSizes_;
  other->tabs_ = tabs_;
  other->tabsHeight_ = tabsHeight_;
  other->textInsets_ = textInsets_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "disposeOfRenderers", NULL, "V", 0x4, NULL },
    { "getBackgroundColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getBackgroundPainter", NULL, "LRAREiPlatformPainter", 0x1, NULL },
    { "getForegroundColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getIconPosition", NULL, "LRARERenderableDataItem_IconPositionEnum", 0x1, NULL },
    { "getNormalPaint", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getPosition", NULL, "LRARELocationEnum", 0x1, NULL },
    { "getSelectedPaint", NULL, "LRAREPaintBucket", 0x1, NULL },
    { "getSelectedTabBorderColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getTabWithInt:", NULL, "LRAREUIAction", 0x1, NULL },
    { "getTabBorderColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getTabFont", NULL, "LRAREUIFont", 0x1, NULL },
    { "isBoldSelectedTab", NULL, "Z", 0x1, NULL },
    { "isHandlesBottomRotation", NULL, "Z", 0x1, NULL },
    { "isHandlesRightLeftRotation", NULL, "Z", 0x1, NULL },
    { "isHorizontal", NULL, "Z", 0x1, NULL },
    { "isShowIconsOnTab", NULL, "Z", 0x1, NULL },
    { "isShowMoreIconText", NULL, "Z", 0x1, NULL },
    { "clearLabels", NULL, "V", 0x4, NULL },
    { "configureRendererVisualsWithRAREUIAction:withBoolean:", NULL, "LRAREiTabLabel", 0x4, NULL },
    { "getUnselectedPainterWithInt:", NULL, "LRAREiPlatformComponentPainter", 0x4, NULL },
    { "createNewRendererWithRAREUIAction:", NULL, "LRAREiTabLabel", 0x404, NULL },
    { "setTextMarginWithRAREiActionComponent:", NULL, "V", 0x4, NULL },
    { "createRendererWithRAREUIAction:", NULL, "LRAREiTabLabel", 0x4, NULL },
    { "findTabWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withInt:withInt:withBoolean:", NULL, "I", 0x4, NULL },
    { "indexForTabsWithFloat:withFloat:withInt:withInt:withInt:withInt:withBoolean:", NULL, "I", 0x4, NULL },
    { "labelAddedWithRAREiTabLabel:", NULL, "V", 0x4, NULL },
    { "layoutMoreButtonWithRAREiActionComponent:withFloat:withFloat:withFloat:withFloat:withBoolean:", NULL, "V", 0x4, NULL },
    { "layoutTabWithRAREiTabLabel:withFloat:withFloat:withFloat:withFloat:withInt:", NULL, "V", 0x4, NULL },
    { "layoutTabsWithFloat:withFloat:withFloat:withFloat:withInt:withInt:withBoolean:", NULL, "V", 0x4, NULL },
    { "locationChanged", NULL, "V", 0x4, NULL },
    { "paintTabWithRAREiPlatformGraphics:withRAREiTabLabel:withFloat:withFloat:withFloat:withFloat:withInt:", NULL, "V", 0x404, NULL },
    { "paintTabsWithRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:withInt:withInt:withBoolean:", NULL, "V", 0x4, NULL },
    { "resetTabs", NULL, "V", 0x4, NULL },
    { "setupPainters", NULL, "V", 0x4, NULL },
    { "tabSelectionChangedWithInt:withRAREiTabLabel:withBoolean:", NULL, "V", 0x4, NULL },
    { "updateTabVisuals", NULL, "V", 0x4, NULL },
    { "setLocationWithRARELocationEnum:", NULL, "V", 0x4, NULL },
    { "getLocation", NULL, "LRARELocationEnum", 0x4, NULL },
    { "getMoreSizeWithBoolean:withInt:withInt:", NULL, "LRAREUIDimension", 0x4, NULL },
    { "getNormalFont", NULL, "LRAREUIFont", 0x4, NULL },
    { "getRangeWidthWithInt:withInt:", NULL, "I", 0x4, NULL },
    { "getRendererWithRAREUIAction:", NULL, "LRAREiTabLabel", 0x4, NULL },
    { "isInsideShapeWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withInt:", NULL, "Z", 0x4, NULL },
    { "isRangeVisibleWithInt:withInt:withFloat:", NULL, "Z", 0x4, NULL },
    { "isVerticalWhenFindingTabs", NULL, "Z", 0x4, NULL },
    { "isVeticalPaint", NULL, "Z", 0x4, NULL },
    { "updateTabLayoutSizeForWidthWithFloat:", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "cornerSize_", NULL, 0x4, "I" },
    { "endTab_", NULL, 0x4, "I" },
    { "minTabHeight_", NULL, 0x4, "I" },
    { "overlapOffset_", NULL, 0x4, "I" },
    { "padding_", NULL, 0x4, "I" },
    { "selectedTab_", NULL, 0x4, "I" },
    { "startOffset_", NULL, 0x4, "I" },
    { "startTab_", NULL, 0x4, "I" },
    { "alwaysShowMoreText_", NULL, 0x4, "Z" },
    { "boldSelectedTab_", NULL, 0x4, "Z" },
    { "endOffset_", NULL, 0x4, "I" },
    { "header_", NULL, 0x4, "LRAREiParentComponent" },
    { "minimumSize_", NULL, 0x4, "I" },
    { "moreButton_", NULL, 0x4, "LRAREiActionComponent" },
    { "normalComponentPainter_", NULL, 0x4, "LRAREiPlatformComponentPainter" },
    { "oldHeight_", NULL, 0x4, "F" },
    { "oldWidth_", NULL, 0x4, "F" },
    { "preferredSize_", NULL, 0x4, "I" },
    { "rendererMap_", NULL, 0x4, "LJavaUtilIdentityHashMap" },
    { "selectedComponentPainter_", NULL, 0x4, "LRAREiPlatformComponentPainter" },
    { "selectedPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "selectedTabBorderColor_", NULL, 0x4, "LRAREUIColor" },
    { "selectedTabFont_", NULL, 0x4, "LRAREUIFont" },
    { "selectedTabForeground_", NULL, 0x4, "LRAREUIColor" },
    { "supportsUniformTabs_", NULL, 0x4, "Z" },
    { "tabBorderColor_", NULL, 0x4, "LRAREUIColor" },
    { "tabFont_", NULL, 0x4, "LRAREUIFont" },
    { "tabForeground_", NULL, 0x4, "LRAREUIColor" },
    { "tabLayoutSizes_", NULL, 0x4, "LIOSIntArray" },
    { "tabPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "tabSizes_", NULL, 0x4, "LIOSIntArray" },
    { "tabs_", NULL, 0x4, "LJavaUtilList" },
    { "tabsHeight_", NULL, 0x4, "I" },
    { "textInsets_", NULL, 0x4, "LRAREUIInsets" },
    { "sizesDirty_", NULL, 0x4, "Z" },
    { "showIconsOnTab_", NULL, 0x4, "Z" },
    { "position_", NULL, 0x4, "LRARELocationEnum" },
    { "moreRect_", NULL, 0x4, "LRAREUIRectangle" },
    { "location_", NULL, 0x4, "LRARELocationEnum" },
    { "iconPosition_", NULL, 0x4, "LRARERenderableDataItem_IconPositionEnum" },
  };
  static J2ObjcClassInfo _RAREaTabPainter = { "aTabPainter", "com.appnativa.rare.ui.tabpane", NULL, 0x401, 48, methods, 40, fields, 0, NULL};
  return &_RAREaTabPainter;
}

@end
