//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/jgoodies/forms/layout/LayoutMap.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/jgoodies/forms/factories/FormFactory.h"
#include "com/jgoodies/forms/layout/ColumnSpec.h"
#include "com/jgoodies/forms/layout/ConstantSize.h"
#include "com/jgoodies/forms/layout/FormSpecParser.h"
#include "com/jgoodies/forms/layout/LayoutMap.h"
#include "com/jgoodies/forms/layout/RowSpec.h"
#include "com/jgoodies/forms/layout/Size.h"
#include "com/jgoodies/forms/util/LayoutStyle.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation RAREJGLayoutMap

static id<JavaUtilMap> RAREJGLayoutMap_COLUMN_ALIASES_;
static id<JavaUtilMap> RAREJGLayoutMap_ROW_ALIASES_;
static RAREJGLayoutMap * RAREJGLayoutMap_root_ = nil;

+ (id<JavaUtilMap>)COLUMN_ALIASES {
  return RAREJGLayoutMap_COLUMN_ALIASES_;
}

+ (id<JavaUtilMap>)ROW_ALIASES {
  return RAREJGLayoutMap_ROW_ALIASES_;
}

+ (RAREJGLayoutMap *)root {
  return RAREJGLayoutMap_root_;
}

+ (void)setRoot:(RAREJGLayoutMap *)root {
  RAREJGLayoutMap_root_ = root;
}

- (id)init {
  return [self initRAREJGLayoutMapWithRAREJGLayoutMap:[RAREJGLayoutMap getRoot]];
}

- (id)initRAREJGLayoutMapWithRAREJGLayoutMap:(RAREJGLayoutMap *)parent {
  if (self = [super init]) {
    self->parent_ = parent;
    columnMap_ = [[JavaUtilHashMap alloc] init];
    rowMap_ = [[JavaUtilHashMap alloc] init];
    columnMapCache_ = [[JavaUtilHashMap alloc] init];
    rowMapCache_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (id)initWithRAREJGLayoutMap:(RAREJGLayoutMap *)parent {
  return [self initRAREJGLayoutMapWithRAREJGLayoutMap:parent];
}

+ (RAREJGLayoutMap *)getRoot {
  if (RAREJGLayoutMap_root_ == nil) {
    RAREJGLayoutMap_root_ = [RAREJGLayoutMap createRoot];
  }
  return RAREJGLayoutMap_root_;
}

- (BOOL)columnContainsKeyWithNSString:(NSString *)key {
  NSString *resolvedKey = [self resolveColumnKeyWithNSString:key];
  return ([((id<JavaUtilMap>) nil_chk(columnMap_)) containsKeyWithId:resolvedKey]) || ((parent_ != nil) && ([parent_ columnContainsKeyWithNSString:resolvedKey]));
}

- (NSString *)columnGetWithNSString:(NSString *)key {
  NSString *resolvedKey = [self resolveColumnKeyWithNSString:key];
  NSString *cachedValue = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(columnMapCache_)) getWithId:resolvedKey], [NSString class]);
  if (cachedValue != nil) {
    return cachedValue;
  }
  NSString *value = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(columnMap_)) getWithId:resolvedKey], [NSString class]);
  if ((value == nil) && (parent_ != nil)) {
    value = [parent_ columnGetWithNSString:resolvedKey];
  }
  if (value == nil) {
    return nil;
  }
  NSString *expandedString = [self expandWithNSString:value withBoolean:YES];
  (void) [columnMapCache_ putWithId:resolvedKey withId:expandedString];
  return expandedString;
}

- (NSString *)columnPutWithNSString:(NSString *)key
                       withNSString:(NSString *)value {
  NSString *resolvedKey = [self resolveColumnKeyWithNSString:key];
  if (value == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The column expression value must not be null."];
  }
  [((id<JavaUtilMap>) nil_chk(columnMapCache_)) clear];
  return (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(columnMap_)) putWithId:resolvedKey withId:[((NSString *) nil_chk(value)) lowercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]]], [NSString class]);
}

- (NSString *)columnPutWithNSString:(NSString *)key
               withRAREJGColumnSpec:(RAREJGColumnSpec *)value {
  return [self columnPutWithNSString:key withNSString:[((RAREJGColumnSpec *) nil_chk(value)) encode]];
}

- (NSString *)columnPutWithNSString:(NSString *)key
                     withRAREJGSize:(id<RAREJGSize>)value {
  return [self columnPutWithNSString:key withNSString:[((id<RAREJGSize>) nil_chk(value)) encode]];
}

- (NSString *)columnRemoveWithNSString:(NSString *)key {
  NSString *resolvedKey = [self resolveColumnKeyWithNSString:key];
  [((id<JavaUtilMap>) nil_chk(columnMapCache_)) clear];
  return (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(columnMap_)) removeWithId:resolvedKey], [NSString class]);
}

- (BOOL)rowContainsKeyWithNSString:(NSString *)key {
  NSString *resolvedKey = [self resolveRowKeyWithNSString:key];
  return ([((id<JavaUtilMap>) nil_chk(rowMap_)) containsKeyWithId:resolvedKey]) || ((parent_ != nil) && ([parent_ rowContainsKeyWithNSString:resolvedKey]));
}

- (NSString *)rowGetWithNSString:(NSString *)key {
  NSString *resolvedKey = [self resolveRowKeyWithNSString:key];
  NSString *cachedValue = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(rowMapCache_)) getWithId:resolvedKey], [NSString class]);
  if (cachedValue != nil) {
    return cachedValue;
  }
  NSString *value = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(rowMap_)) getWithId:resolvedKey], [NSString class]);
  if ((value == nil) && (parent_ != nil)) {
    value = [parent_ rowGetWithNSString:resolvedKey];
  }
  if (value == nil) {
    return nil;
  }
  NSString *expandedString = [self expandWithNSString:value withBoolean:NO];
  (void) [rowMapCache_ putWithId:resolvedKey withId:expandedString];
  return expandedString;
}

- (NSString *)rowPutWithNSString:(NSString *)key
                    withNSString:(NSString *)value {
  NSString *resolvedKey = [self resolveRowKeyWithNSString:key];
  if (value == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The row expression value must not be null."];
  }
  [((id<JavaUtilMap>) nil_chk(rowMapCache_)) clear];
  return (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(rowMap_)) putWithId:resolvedKey withId:[((NSString *) nil_chk(value)) lowercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]]], [NSString class]);
}

- (NSString *)rowPutWithNSString:(NSString *)key
               withRAREJGRowSpec:(RAREJGRowSpec *)value {
  return [self rowPutWithNSString:key withNSString:[((RAREJGRowSpec *) nil_chk(value)) encode]];
}

- (NSString *)rowPutWithNSString:(NSString *)key
                  withRAREJGSize:(id<RAREJGSize>)value {
  return [self rowPutWithNSString:key withNSString:[((id<RAREJGSize>) nil_chk(value)) encode]];
}

- (NSString *)rowRemoveWithNSString:(NSString *)key {
  NSString *resolvedKey = [self resolveRowKeyWithNSString:key];
  [((id<JavaUtilMap>) nil_chk(rowMapCache_)) clear];
  return (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(rowMap_)) removeWithId:resolvedKey], [NSString class]);
}

- (NSString *)description {
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] initWithNSString:[super description]];
  (void) [buffer appendWithNSString:@"\n  Column associations:"];
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(columnMap_)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    id<JavaUtilMap_Entry> name = (id<JavaUtilMap_Entry>) check_protocol_cast([iterator next], @protocol(JavaUtilMap_Entry));
    (void) [buffer appendWithNSString:@"\n    "];
    (void) [buffer appendWithId:[((id<JavaUtilMap_Entry>) nil_chk(name)) getKey]];
    (void) [buffer appendWithNSString:@"->"];
    (void) [buffer appendWithId:[name getValue]];
  }
  (void) [buffer appendWithNSString:@"\n  Row associations:"];
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(rowMap_)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    id<JavaUtilMap_Entry> name = (id<JavaUtilMap_Entry>) check_protocol_cast([iterator next], @protocol(JavaUtilMap_Entry));
    (void) [buffer appendWithNSString:@"\n    "];
    (void) [buffer appendWithId:[((id<JavaUtilMap_Entry>) nil_chk(name)) getKey]];
    (void) [buffer appendWithNSString:@"->"];
    (void) [buffer appendWithId:[name getValue]];
  }
  return [buffer description];
}

- (NSString *)expandWithNSString:(NSString *)expression
                     withBoolean:(BOOL)horizontal {
  int cursor = 0;
  int start = [((NSString *) nil_chk(expression)) indexOf:RAREJGLayoutMap_VARIABLE_PREFIX_CHAR fromIndex:cursor];
  if (start == -1) {
    return expression;
  }
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] init];
  do {
    (void) [buffer appendWithNSString:[expression substring:cursor endIndex:start]];
    NSString *variableName = [self nextVariableNameWithNSString:expression withInt:start];
    (void) [buffer appendWithNSString:[self expansionWithNSString:variableName withBoolean:horizontal]];
    cursor = start + [((NSString *) nil_chk(variableName)) sequenceLength] + 1;
    start = [expression indexOf:RAREJGLayoutMap_VARIABLE_PREFIX_CHAR fromIndex:cursor];
  }
  while (start != -1);
  (void) [buffer appendWithNSString:[expression substring:cursor]];
  return [buffer description];
}

- (NSString *)nextVariableNameWithNSString:(NSString *)expression
                                   withInt:(int)start {
  int length = [((NSString *) nil_chk(expression)) sequenceLength];
  if (length <= start) {
    [RAREJGFormSpecParser failWithNSString:expression withInt:start withNSString:@"Missing variable name after variable char '$'."];
  }
  if ([expression charAtWithInt:start + 1] == '{') {
    int end = [expression indexOf:'}' fromIndex:start + 1];
    if (end == -1) {
      [RAREJGFormSpecParser failWithNSString:expression withInt:start withNSString:@"Missing closing brace '}' for variable."];
    }
    return [expression substring:start + 1 endIndex:end + 1];
  }
  int end = start + 1;
  while ((end < length) && [JavaLangCharacter isUnicodeIdentifierPartWithChar:[expression charAtWithInt:end]]) {
    end++;
  }
  return [expression substring:start + 1 endIndex:end];
}

- (NSString *)expansionWithNSString:(NSString *)variableName
                        withBoolean:(BOOL)horizontal {
  NSString *key = [RAREJGLayoutMap stripBracesWithNSString:variableName];
  NSString *expansion = horizontal ? [self columnGetWithNSString:key] : [self rowGetWithNSString:key];
  if (expansion == nil) {
    NSString *orientation = horizontal ? @"column" : @"row";
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown %@ layout variable \"%@\"", orientation, key]];
  }
  return expansion;
}

+ (NSString *)stripBracesWithNSString:(NSString *)variableName {
  return [((NSString *) nil_chk(variableName)) charAtWithInt:0] == '{' ? [variableName substring:1 endIndex:[variableName sequenceLength] - 1] : variableName;
}

- (NSString *)resolveColumnKeyWithNSString:(NSString *)key {
  if (key == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The key must not be null."];
  }
  NSString *lowercaseKey = [((NSString *) nil_chk(key)) lowercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]];
  NSString *defaultKey = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(RAREJGLayoutMap_COLUMN_ALIASES_)) getWithId:lowercaseKey], [NSString class]);
  return defaultKey == nil ? lowercaseKey : defaultKey;
}

- (NSString *)resolveRowKeyWithNSString:(NSString *)key {
  if (key == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The key must not be null."];
  }
  NSString *lowercaseKey = [((NSString *) nil_chk(key)) lowercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]];
  NSString *defaultKey = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(RAREJGLayoutMap_ROW_ALIASES_)) getWithId:lowercaseKey], [NSString class]);
  return defaultKey == nil ? lowercaseKey : defaultKey;
}

+ (RAREJGLayoutMap *)createRoot {
  RAREJGLayoutMap *map = [[RAREJGLayoutMap alloc] initWithRAREJGLayoutMap:nil];
  [map columnPutWithNSString:@"label-component-gap" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"lcg", @"lcgap" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGColumnSpec:[RAREJGFormFactory LABEL_COMPONENT_GAP_COLSPEC]];
  [map columnPutWithNSString:@"related-gap" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"rg", @"rgap" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGColumnSpec:[RAREJGFormFactory RELATED_GAP_COLSPEC]];
  [map columnPutWithNSString:@"unrelated-gap" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"ug", @"ugap" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGColumnSpec:[RAREJGFormFactory UNRELATED_GAP_COLSPEC]];
  [map columnPutWithNSString:@"button" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"b" } count:1 type:[IOSClass classWithClass:[NSString class]]] withRAREJGColumnSpec:[RAREJGFormFactory BUTTON_COLSPEC]];
  [map columnPutWithNSString:@"growing-button" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"gb" } count:1 type:[IOSClass classWithClass:[NSString class]]] withRAREJGColumnSpec:[RAREJGFormFactory GROWING_BUTTON_COLSPEC]];
  [map columnPutWithNSString:@"dialog-margin" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"dm", @"dmargin" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGColumnSpec:[RAREJGColumnSpec createGapWithRAREJGConstantSize:[((RAREJGLayoutStyle *) nil_chk([RAREJGLayoutStyle getCurrent])) getDialogMarginX]]];
  [map columnPutWithNSString:@"tabbed-dialog-margin" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"tdm", @"tdmargin" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGColumnSpec:[RAREJGColumnSpec createGapWithRAREJGConstantSize:[((RAREJGLayoutStyle *) nil_chk([RAREJGLayoutStyle getCurrent])) getTabbedDialogMarginX]]];
  (void) [map columnPutWithNSString:@"glue" withNSString:[((RAREJGColumnSpec *) nil_chk([RAREJGFormFactory GLUE_COLSPEC])) toShortString]];
  [map rowPutWithNSString:@"related-gap" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"rg", @"rgap" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGRowSpec:[RAREJGFormFactory RELATED_GAP_ROWSPEC]];
  [map rowPutWithNSString:@"unrelated-gap" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"ug", @"ugap" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGRowSpec:[RAREJGFormFactory UNRELATED_GAP_ROWSPEC]];
  [map rowPutWithNSString:@"narrow-line-gap" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"nlg", @"nlgap" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGRowSpec:[RAREJGFormFactory NARROW_LINE_GAP_ROWSPEC]];
  [map rowPutWithNSString:@"line-gap" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"lg", @"lgap" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGRowSpec:[RAREJGFormFactory LINE_GAP_ROWSPEC]];
  [map rowPutWithNSString:@"paragraph-gap" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"pg", @"pgap" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGRowSpec:[RAREJGFormFactory PARAGRAPH_GAP_ROWSPEC]];
  [map rowPutWithNSString:@"dialog-margin" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"dm", @"dmargin" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGRowSpec:[RAREJGRowSpec createGapWithRAREJGConstantSize:[((RAREJGLayoutStyle *) nil_chk([RAREJGLayoutStyle getCurrent])) getDialogMarginY]]];
  [map rowPutWithNSString:@"tabbed-dialog-margin" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"tdm", @"tdmargin" } count:2 type:[IOSClass classWithClass:[NSString class]]] withRAREJGRowSpec:[RAREJGRowSpec createGapWithRAREJGConstantSize:[((RAREJGLayoutStyle *) nil_chk([RAREJGLayoutStyle getCurrent])) getTabbedDialogMarginY]]];
  [map rowPutWithNSString:@"button" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"b" } count:1 type:[IOSClass classWithClass:[NSString class]]] withRAREJGRowSpec:[RAREJGFormFactory BUTTON_ROWSPEC]];
  (void) [map rowPutWithNSString:@"glue" withRAREJGRowSpec:[RAREJGFormFactory GLUE_ROWSPEC]];
  return map;
}

- (void)columnPutWithNSString:(NSString *)key
            withNSStringArray:(IOSObjectArray *)aliases
         withRAREJGColumnSpec:(RAREJGColumnSpec *)value {
  [self ensureLowerCaseWithNSString:key];
  (void) [self columnPutWithNSString:key withRAREJGColumnSpec:value];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(aliases)) count]; i++) {
    [self ensureLowerCaseWithNSString:IOSObjectArray_Get(aliases, i)];
    (void) [((id<JavaUtilMap>) nil_chk(RAREJGLayoutMap_COLUMN_ALIASES_)) putWithId:IOSObjectArray_Get(aliases, i) withId:key];
  }
}

- (void)rowPutWithNSString:(NSString *)key
         withNSStringArray:(IOSObjectArray *)aliases
         withRAREJGRowSpec:(RAREJGRowSpec *)value {
  [self ensureLowerCaseWithNSString:key];
  (void) [self rowPutWithNSString:key withRAREJGRowSpec:value];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(aliases)) count]; i++) {
    [self ensureLowerCaseWithNSString:IOSObjectArray_Get(aliases, i)];
    (void) [((id<JavaUtilMap>) nil_chk(RAREJGLayoutMap_ROW_ALIASES_)) putWithId:IOSObjectArray_Get(aliases, i) withId:key];
  }
}

- (void)ensureLowerCaseWithNSString:(NSString *)str {
  NSString *lowerCase = [((NSString *) nil_chk(str)) lowercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]];
  if (![((NSString *) nil_chk(lowerCase)) isEqual:str]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"The string \"%@\" should be lower case.", str]];
  }
}

+ (void)initialize {
  if (self == [RAREJGLayoutMap class]) {
    RAREJGLayoutMap_COLUMN_ALIASES_ = [[JavaUtilHashMap alloc] init];
    RAREJGLayoutMap_ROW_ALIASES_ = [[JavaUtilHashMap alloc] init];
  }
}

- (void)copyAllFieldsTo:(RAREJGLayoutMap *)other {
  [super copyAllFieldsTo:other];
  other->columnMap_ = columnMap_;
  other->columnMapCache_ = columnMapCache_;
  other->parent_ = parent_;
  other->rowMap_ = rowMap_;
  other->rowMapCache_ = rowMapCache_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getRoot", NULL, "LRAREJGLayoutMap", 0x9, NULL },
    { "columnContainsKeyWithNSString:", NULL, "Z", 0x1, NULL },
    { "columnGetWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "columnPutWithNSString:withNSString:", NULL, "LNSString", 0x1, NULL },
    { "columnPutWithNSString:withRAREJGColumnSpec:", NULL, "LNSString", 0x1, NULL },
    { "columnPutWithNSString:withRAREJGSize:", NULL, "LNSString", 0x1, NULL },
    { "columnRemoveWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "rowContainsKeyWithNSString:", NULL, "Z", 0x1, NULL },
    { "rowGetWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "rowPutWithNSString:withNSString:", NULL, "LNSString", 0x1, NULL },
    { "rowPutWithNSString:withRAREJGRowSpec:", NULL, "LNSString", 0x1, NULL },
    { "rowPutWithNSString:withRAREJGSize:", NULL, "LNSString", 0x1, NULL },
    { "rowRemoveWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "expandWithNSString:withBoolean:", NULL, "LNSString", 0x0, NULL },
    { "nextVariableNameWithNSString:withInt:", NULL, "LNSString", 0x2, NULL },
    { "expansionWithNSString:withBoolean:", NULL, "LNSString", 0x2, NULL },
    { "stripBracesWithNSString:", NULL, "LNSString", 0xa, NULL },
    { "resolveColumnKeyWithNSString:", NULL, "LNSString", 0x2, NULL },
    { "resolveRowKeyWithNSString:", NULL, "LNSString", 0x2, NULL },
    { "createRoot", NULL, "LRAREJGLayoutMap", 0xa, NULL },
    { "columnPutWithNSString:withNSStringArray:withRAREJGColumnSpec:", NULL, "V", 0x2, NULL },
    { "rowPutWithNSString:withNSStringArray:withRAREJGRowSpec:", NULL, "V", 0x2, NULL },
    { "ensureLowerCaseWithNSString:", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "VARIABLE_PREFIX_CHAR_", NULL, 0x1a, "C" },
    { "COLUMN_ALIASES_", NULL, 0x1a, "LJavaUtilMap" },
    { "ROW_ALIASES_", NULL, 0x1a, "LJavaUtilMap" },
    { "root_", NULL, 0xa, "LRAREJGLayoutMap" },
    { "parent_", NULL, 0x12, "LRAREJGLayoutMap" },
    { "columnMap_", NULL, 0x12, "LJavaUtilMap" },
    { "columnMapCache_", NULL, 0x12, "LJavaUtilMap" },
    { "rowMap_", NULL, 0x12, "LJavaUtilMap" },
    { "rowMapCache_", NULL, 0x12, "LJavaUtilMap" },
  };
  static J2ObjcClassInfo _RAREJGLayoutMap = { "LayoutMap", "com.jgoodies.forms.layout", NULL, 0x11, 23, methods, 9, fields, 0, NULL};
  return &_RAREJGLayoutMap;
}

@end
