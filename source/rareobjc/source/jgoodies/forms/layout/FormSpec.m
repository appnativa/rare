//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/jgoodies/forms/layout/FormSpec.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/jgoodies/forms/layout/BoundedSize.h"
#include "com/appnativa/jgoodies/forms/layout/ColumnSpec.h"
#include "com/appnativa/jgoodies/forms/layout/ConstantSize.h"
#include "com/appnativa/jgoodies/forms/layout/FormLayout.h"
#include "com/appnativa/jgoodies/forms/layout/FormSpec.h"
#include "com/appnativa/jgoodies/forms/layout/PrototypeSize.h"
#include "com/appnativa/jgoodies/forms/layout/RowSpec.h"
#include "com/appnativa/jgoodies/forms/layout/Size.h"
#include "com/appnativa/jgoodies/forms/layout/Sizes.h"
#include "com/appnativa/jgoodies/forms/util/FormUtils.h"
#include "com/appnativa/rare/ui/iParentComponent.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/regex/Pattern.h"

@implementation RAREFormSpec

static RAREFormSpec_DefaultAlignment * RAREFormSpec_LEFT_ALIGN_;
static RAREFormSpec_DefaultAlignment * RAREFormSpec_RIGHT_ALIGN_;
static RAREFormSpec_DefaultAlignment * RAREFormSpec_TOP_ALIGN_;
static RAREFormSpec_DefaultAlignment * RAREFormSpec_BOTTOM_ALIGN_;
static RAREFormSpec_DefaultAlignment * RAREFormSpec_CENTER_ALIGN_;
static RAREFormSpec_DefaultAlignment * RAREFormSpec_FILL_ALIGN_;
static IOSObjectArray * RAREFormSpec_VALUES_;
static JavaUtilRegexPattern * RAREFormSpec_TOKEN_SEPARATOR_PATTERN_;
static JavaUtilRegexPattern * RAREFormSpec_BOUNDS_SEPARATOR_PATTERN_;

+ (RAREFormSpec_DefaultAlignment *)LEFT_ALIGN {
  return RAREFormSpec_LEFT_ALIGN_;
}

+ (RAREFormSpec_DefaultAlignment *)RIGHT_ALIGN {
  return RAREFormSpec_RIGHT_ALIGN_;
}

+ (RAREFormSpec_DefaultAlignment *)TOP_ALIGN {
  return RAREFormSpec_TOP_ALIGN_;
}

+ (RAREFormSpec_DefaultAlignment *)BOTTOM_ALIGN {
  return RAREFormSpec_BOTTOM_ALIGN_;
}

+ (RAREFormSpec_DefaultAlignment *)CENTER_ALIGN {
  return RAREFormSpec_CENTER_ALIGN_;
}

+ (RAREFormSpec_DefaultAlignment *)FILL_ALIGN {
  return RAREFormSpec_FILL_ALIGN_;
}

+ (IOSObjectArray *)VALUES {
  return RAREFormSpec_VALUES_;
}

+ (double)NO_GROW {
  return RAREFormSpec_NO_GROW;
}

+ (double)DEFAULT_GROW {
  return RAREFormSpec_DEFAULT_GROW;
}

+ (JavaUtilRegexPattern *)TOKEN_SEPARATOR_PATTERN {
  return RAREFormSpec_TOKEN_SEPARATOR_PATTERN_;
}

+ (JavaUtilRegexPattern *)BOUNDS_SEPARATOR_PATTERN {
  return RAREFormSpec_BOUNDS_SEPARATOR_PATTERN_;
}

- (id)initRAREFormSpecWithRAREFormSpec_DefaultAlignment:(RAREFormSpec_DefaultAlignment *)defaultAlignment
                                           withRARESize:(id<RARESize>)size
                                             withDouble:(double)resizeWeight {
  if (self = [super init]) {
    if (size == nil) @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The size must not be null."];
    self->defaultAlignment_ = defaultAlignment;
    self->size_ = size;
    self->resizeWeight_ = resizeWeight;
    if (resizeWeight < 0) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The resize weight must be non-negative."];
  }
  return self;
}

- (id)initWithRAREFormSpec_DefaultAlignment:(RAREFormSpec_DefaultAlignment *)defaultAlignment
                               withRARESize:(id<RARESize>)size
                                 withDouble:(double)resizeWeight {
  return [self initRAREFormSpecWithRAREFormSpec_DefaultAlignment:defaultAlignment withRARESize:size withDouble:resizeWeight];
}

- (id)initWithRAREFormSpec_DefaultAlignment:(RAREFormSpec_DefaultAlignment *)defaultAlignment
                               withNSString:(NSString *)encodedDescription {
  if (self = [self initRAREFormSpecWithRAREFormSpec_DefaultAlignment:defaultAlignment withRARESize:[RARESizes DEFAULT] withDouble:RAREFormSpec_NO_GROW]) {
    [self parseAndInitValuesWithNSString:[((NSString *) nil_chk(encodedDescription)) lowercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]]];
  }
  return self;
}

- (RAREFormSpec_DefaultAlignment *)getDefaultAlignment {
  return defaultAlignment_;
}

- (id<RARESize>)getSize {
  return size_;
}

- (double)getResizeWeight {
  return resizeWeight_;
}

- (BOOL)canGrow {
  return [self getResizeWeight] != RAREFormSpec_NO_GROW;
}

- (BOOL)isHorizontal {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setDefaultAlignmentWithRAREFormSpec_DefaultAlignment:(RAREFormSpec_DefaultAlignment *)defaultAlignment {
  self->defaultAlignment_ = defaultAlignment;
}

- (void)setSizeWithRARESize:(id<RARESize>)size {
  self->size_ = size;
}

- (void)setResizeWeightWithDouble:(double)resizeWeight {
  self->resizeWeight_ = resizeWeight;
}

- (void)parseAndInitValuesWithNSString:(NSString *)encodedDescription {
  [RAREFormUtils assertNotBlankWithNSString:encodedDescription withNSString:@"encoded form specification"];
  IOSObjectArray *token = [((JavaUtilRegexPattern *) nil_chk(RAREFormSpec_TOKEN_SEPARATOR_PATTERN_)) splitWithJavaLangCharSequence:encodedDescription];
  if ((int) [((IOSObjectArray *) nil_chk(token)) count] == 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The form spec must not be empty."];
  }
  int nextIndex = 0;
  NSString *next = IOSObjectArray_Get(token, nextIndex++);
  RAREFormSpec_DefaultAlignment *alignment = [RAREFormSpec_DefaultAlignment valueOfWithNSString:next withBoolean:[self isHorizontal]];
  if (alignment != nil) {
    [self setDefaultAlignmentWithRAREFormSpec_DefaultAlignment:alignment];
    if ((int) [token count] == 1) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The form spec must provide a size."];
    }
    next = IOSObjectArray_Get(token, nextIndex++);
  }
  [self setSizeWithRARESize:[self parseSizeWithNSString:next]];
  if (nextIndex < (int) [token count]) {
    [self setResizeWeightWithDouble:[RAREFormSpec parseResizeWeightWithNSString:IOSObjectArray_Get(token, nextIndex)]];
  }
}

- (id<RARESize>)parseSizeWithNSString:(NSString *)token {
  if ([((NSString *) nil_chk(token)) hasPrefix:@"["] && [token hasSuffix:@"]"]) {
    return [self parseBoundedSizeWithNSString:token];
  }
  if ([token hasPrefix:@"max("] && [token hasSuffix:@")"]) {
    return [self parseOldBoundedSizeWithNSString:token withBoolean:NO];
  }
  if ([token hasPrefix:@"min("] && [token hasSuffix:@")"]) {
    return [self parseOldBoundedSizeWithNSString:token withBoolean:YES];
  }
  return [self parseAtomicSizeWithNSString:token];
}

- (id<RARESize>)parseBoundedSizeWithNSString:(NSString *)token {
  NSString *content = [token substring:1 endIndex:[((NSString *) nil_chk(token)) sequenceLength] - 1];
  IOSObjectArray *subtoken = [((JavaUtilRegexPattern *) nil_chk(RAREFormSpec_BOUNDS_SEPARATOR_PATTERN_)) splitWithJavaLangCharSequence:content];
  id<RARESize> basis = nil;
  id<RARESize> lower = nil;
  id<RARESize> upper = nil;
  if ((int) [((IOSObjectArray *) nil_chk(subtoken)) count] == 2) {
    id<RARESize> size1 = [self parseAtomicSizeWithNSString:IOSObjectArray_Get(subtoken, 0)];
    id<RARESize> size2 = [self parseAtomicSizeWithNSString:IOSObjectArray_Get(subtoken, 1)];
    if ([RAREFormSpec isConstantWithRARESize:size1]) {
      if ([RAREFormSpec isConstantWithRARESize:size2]) {
        lower = size1;
        basis = size2;
        upper = size2;
      }
      else {
        lower = size1;
        basis = size2;
      }
    }
    else {
      basis = size1;
      upper = size2;
    }
  }
  else if ((int) [subtoken count] == 3) {
    lower = [self parseAtomicSizeWithNSString:IOSObjectArray_Get(subtoken, 0)];
    basis = [self parseAtomicSizeWithNSString:IOSObjectArray_Get(subtoken, 1)];
    upper = [self parseAtomicSizeWithNSString:IOSObjectArray_Get(subtoken, 2)];
  }
  if (((lower == nil) || ([RAREFormSpec isConstantWithRARESize:lower])) && ((upper == nil) || ([RAREFormSpec isConstantWithRARESize:upper]))) {
    return [[RAREBoundedSize alloc] initWithRARESize:basis withRARESize:lower withRARESize:upper];
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal bounded size '%@'. Must be one of:\n[<constant size>,<logical size>]                 // lower bound\n[<logical size>,<constant size>]                 // upper bound\n[<constant size>,<logical size>,<constant size>] // lower and upper bound.\nExamples:\n[50dlu,pref]                                     // lower bound\n[pref,200dlu]                                    // upper bound\n[50dlu,pref,200dlu]                              // lower and upper bound.", token]];
}

- (id<RARESize>)parseOldBoundedSizeWithNSString:(NSString *)token
                                    withBoolean:(BOOL)setMax {
  int semicolonIndex = [((NSString *) nil_chk(token)) indexOf:';'];
  NSString *sizeToken1 = [token substring:4 endIndex:semicolonIndex];
  NSString *sizeToken2 = [token substring:semicolonIndex + 1 endIndex:[token sequenceLength] - 1];
  id<RARESize> size1 = [self parseAtomicSizeWithNSString:sizeToken1];
  id<RARESize> size2 = [self parseAtomicSizeWithNSString:sizeToken2];
  if ([RAREFormSpec isConstantWithRARESize:size1]) {
    if ([(id) size2 isKindOfClass:[RARESizes_ComponentSize class]]) {
      return [[RAREBoundedSize alloc] initWithRARESize:size2 withRARESize:setMax ? nil : size1 withRARESize:setMax ? size1 : nil];
    }
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Bounded sizes must not be both constants."];
  }
  if ([RAREFormSpec isConstantWithRARESize:size2]) {
    return [[RAREBoundedSize alloc] initWithRARESize:size1 withRARESize:setMax ? nil : size2 withRARESize:setMax ? size2 : nil];
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Bounded sizes must not be both logical."];
}

- (id<RARESize>)parseAtomicSizeWithNSString:(NSString *)token {
  NSString *trimmedToken = [((NSString *) nil_chk(token)) trim];
  if ([((NSString *) nil_chk(trimmedToken)) hasPrefix:@"'"] && [trimmedToken hasSuffix:@"'"]) {
    int length = [trimmedToken sequenceLength];
    if (length < 2) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Missing closing \"'\" for prototype."];
    }
    return [[RAREPrototypeSize alloc] initWithNSString:[trimmedToken substring:1 endIndex:length - 1]];
  }
  RARESizes_ComponentSize *componentSize = [RARESizes_ComponentSize valueOfWithNSString:trimmedToken];
  if (componentSize != nil) return componentSize;
  return [RAREConstantSize valueOfWithNSString:trimmedToken withBoolean:[self isHorizontal]];
}

+ (double)parseResizeWeightWithNSString:(NSString *)token {
  if ([((NSString *) nil_chk(token)) isEqual:@"g"] || [token isEqual:@"grow"]) {
    return RAREFormSpec_DEFAULT_GROW;
  }
  if ([token isEqual:@"n"] || [token isEqual:@"nogrow"] || [token isEqual:@"none"]) {
    return RAREFormSpec_NO_GROW;
  }
  if (([token hasPrefix:@"grow("] || [token hasPrefix:@"g("]) && [token hasSuffix:@")"]) {
    int leftParen = [token indexOf:'('];
    int rightParen = [token indexOf:')'];
    NSString *substring = [token substring:leftParen + 1 endIndex:rightParen];
    return [JavaLangDouble parseDoubleWithNSString:substring];
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"The resize argument '%@' is invalid.  Must be one of: grow, g, none, n, grow(<double>), g(<double>)", token]];
}

+ (BOOL)isConstantWithRARESize:(id<RARESize>)aSize {
  return ([(id) aSize isKindOfClass:[RAREConstantSize class]]) || ([(id) aSize isKindOfClass:[RAREPrototypeSize class]]);
}

- (NSString *)description {
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] init];
  (void) [buffer appendWithId:defaultAlignment_];
  (void) [buffer appendWithNSString:@":"];
  (void) [buffer appendWithNSString:[((id<RARESize>) nil_chk(size_)) description]];
  (void) [buffer appendWithChar:':'];
  if (resizeWeight_ == RAREFormSpec_NO_GROW) {
    (void) [buffer appendWithNSString:@"noGrow"];
  }
  else if (resizeWeight_ == RAREFormSpec_DEFAULT_GROW) {
    (void) [buffer appendWithNSString:@"grow"];
  }
  else {
    (void) [buffer appendWithNSString:@"grow("];
    (void) [buffer appendWithDouble:resizeWeight_];
    (void) [buffer appendWithChar:')'];
  }
  return [buffer description];
}

- (NSString *)toShortString {
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] init];
  (void) [buffer appendWithChar:[((RAREFormSpec_DefaultAlignment *) nil_chk(defaultAlignment_)) abbreviation]];
  (void) [buffer appendWithNSString:@":"];
  (void) [buffer appendWithNSString:[((id<RARESize>) nil_chk(size_)) description]];
  (void) [buffer appendWithChar:':'];
  if (resizeWeight_ == RAREFormSpec_NO_GROW) {
    (void) [buffer appendWithNSString:@"n"];
  }
  else if (resizeWeight_ == RAREFormSpec_DEFAULT_GROW) {
    (void) [buffer appendWithNSString:@"g"];
  }
  else {
    (void) [buffer appendWithNSString:@"g("];
    (void) [buffer appendWithDouble:resizeWeight_];
    (void) [buffer appendWithChar:')'];
  }
  return [buffer description];
}

- (NSString *)encode {
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] init];
  RAREFormSpec_DefaultAlignment *alignmentDefault = [self isHorizontal] ? [RAREColumnSpec DEFAULT] : [RARERowSpec DEFAULT];
  if (![alignmentDefault isEqual:defaultAlignment_]) {
    (void) [buffer appendWithChar:[((RAREFormSpec_DefaultAlignment *) nil_chk(defaultAlignment_)) abbreviation]];
    (void) [buffer appendWithNSString:@":"];
  }
  (void) [buffer appendWithNSString:[((id<RARESize>) nil_chk(size_)) encode]];
  if (resizeWeight_ == RAREFormSpec_NO_GROW) {
  }
  else if (resizeWeight_ == RAREFormSpec_DEFAULT_GROW) {
    (void) [buffer appendWithChar:':'];
    (void) [buffer appendWithNSString:@"g"];
  }
  else {
    (void) [buffer appendWithChar:':'];
    (void) [buffer appendWithNSString:@"g("];
    (void) [buffer appendWithDouble:resizeWeight_];
    (void) [buffer appendWithChar:')'];
  }
  return [buffer description];
}

- (NSString *)encodeEx {
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] init];
  RAREFormSpec_DefaultAlignment *alignmentDefault = [self isHorizontal] ? [RAREColumnSpec DEFAULT] : [RARERowSpec DEFAULT];
  if (![alignmentDefault isEqual:defaultAlignment_]) {
    (void) [buffer appendWithChar:[((RAREFormSpec_DefaultAlignment *) nil_chk(defaultAlignment_)) abbreviation]];
    (void) [buffer appendWithNSString:@":"];
  }
  (void) [buffer appendWithNSString:[((id<RARESize>) nil_chk(size_)) encodeEx]];
  if (resizeWeight_ == RAREFormSpec_NO_GROW) {
  }
  else if (resizeWeight_ == RAREFormSpec_DEFAULT_GROW) {
    (void) [buffer appendWithChar:':'];
    (void) [buffer appendWithNSString:@"g"];
  }
  else {
    (void) [buffer appendWithChar:':'];
    (void) [buffer appendWithNSString:@"g("];
    (void) [buffer appendWithDouble:resizeWeight_];
    (void) [buffer appendWithChar:')'];
  }
  return [buffer description];
}

- (int)maximumSizeWithRAREiParentComponent:(id<RAREiParentComponent>)container
                          withJavaUtilList:(id<JavaUtilList>)components
                withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)minMeasure
                withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)prefMeasure
                withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)defaultMeasure {
  return [((id<RARESize>) nil_chk(size_)) maximumSizeWithRAREiParentComponent:container withJavaUtilList:components withRAREFormLayout_Measure:minMeasure withRAREFormLayout_Measure:prefMeasure withRAREFormLayout_Measure:defaultMeasure];
}

+ (void)initialize {
  if (self == [RAREFormSpec class]) {
    RAREFormSpec_LEFT_ALIGN_ = [[RAREFormSpec_DefaultAlignment alloc] initWithNSString:@"left"];
    RAREFormSpec_RIGHT_ALIGN_ = [[RAREFormSpec_DefaultAlignment alloc] initWithNSString:@"right"];
    RAREFormSpec_TOP_ALIGN_ = [[RAREFormSpec_DefaultAlignment alloc] initWithNSString:@"top"];
    RAREFormSpec_BOTTOM_ALIGN_ = [[RAREFormSpec_DefaultAlignment alloc] initWithNSString:@"bottom"];
    RAREFormSpec_CENTER_ALIGN_ = [[RAREFormSpec_DefaultAlignment alloc] initWithNSString:@"center"];
    RAREFormSpec_FILL_ALIGN_ = [[RAREFormSpec_DefaultAlignment alloc] initWithNSString:@"fill"];
    RAREFormSpec_VALUES_ = [IOSObjectArray arrayWithObjects:(id[]){ RAREFormSpec_LEFT_ALIGN_, RAREFormSpec_RIGHT_ALIGN_, RAREFormSpec_TOP_ALIGN_, RAREFormSpec_BOTTOM_ALIGN_, RAREFormSpec_CENTER_ALIGN_, RAREFormSpec_FILL_ALIGN_ } count:6 type:[IOSClass classWithClass:[RAREFormSpec_DefaultAlignment class]]];
    RAREFormSpec_TOKEN_SEPARATOR_PATTERN_ = [JavaUtilRegexPattern compileWithNSString:@":"];
    RAREFormSpec_BOUNDS_SEPARATOR_PATTERN_ = [JavaUtilRegexPattern compileWithNSString:@"\\s*,\\s*"];
  }
}

- (void)copyAllFieldsTo:(RAREFormSpec *)other {
  [super copyAllFieldsTo:other];
  other->defaultAlignment_ = defaultAlignment_;
  other->resizeWeight_ = resizeWeight_;
  other->size_ = size_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithRAREFormSpec_DefaultAlignment:withRARESize:withDouble:", NULL, NULL, 0x4, NULL },
    { "initWithRAREFormSpec_DefaultAlignment:withNSString:", NULL, NULL, 0x4, NULL },
    { "getDefaultAlignment", NULL, "LRAREFormSpec_DefaultAlignment", 0x11, NULL },
    { "getSize", NULL, "LRARESize", 0x11, NULL },
    { "getResizeWeight", NULL, "D", 0x11, NULL },
    { "canGrow", NULL, "Z", 0x10, NULL },
    { "isHorizontal", NULL, "Z", 0x400, NULL },
    { "setDefaultAlignmentWithRAREFormSpec_DefaultAlignment:", NULL, "V", 0x0, NULL },
    { "setSizeWithRARESize:", NULL, "V", 0x0, NULL },
    { "setResizeWeightWithDouble:", NULL, "V", 0x0, NULL },
    { "parseAndInitValuesWithNSString:", NULL, "V", 0x2, NULL },
    { "parseSizeWithNSString:", NULL, "LRARESize", 0x2, NULL },
    { "parseBoundedSizeWithNSString:", NULL, "LRARESize", 0x2, NULL },
    { "parseOldBoundedSizeWithNSString:withBoolean:", NULL, "LRARESize", 0x2, NULL },
    { "parseAtomicSizeWithNSString:", NULL, "LRARESize", 0x2, NULL },
    { "parseResizeWeightWithNSString:", NULL, "D", 0xa, NULL },
    { "isConstantWithRARESize:", NULL, "Z", 0xa, NULL },
    { "toShortString", NULL, "LNSString", 0x11, NULL },
    { "encode", NULL, "LNSString", 0x11, NULL },
    { "encodeEx", NULL, "LNSString", 0x11, NULL },
    { "maximumSizeWithRAREiParentComponent:withJavaUtilList:withRAREFormLayout_Measure:withRAREFormLayout_Measure:withRAREFormLayout_Measure:", NULL, "I", 0x10, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LEFT_ALIGN_", NULL, 0x18, "LRAREFormSpec_DefaultAlignment" },
    { "RIGHT_ALIGN_", NULL, 0x18, "LRAREFormSpec_DefaultAlignment" },
    { "TOP_ALIGN_", NULL, 0x18, "LRAREFormSpec_DefaultAlignment" },
    { "BOTTOM_ALIGN_", NULL, 0x18, "LRAREFormSpec_DefaultAlignment" },
    { "CENTER_ALIGN_", NULL, 0x18, "LRAREFormSpec_DefaultAlignment" },
    { "FILL_ALIGN_", NULL, 0x18, "LRAREFormSpec_DefaultAlignment" },
    { "VALUES_", NULL, 0x1a, "LIOSObjectArray" },
    { "NO_GROW_", NULL, 0x19, "D" },
    { "DEFAULT_GROW_", NULL, 0x19, "D" },
    { "TOKEN_SEPARATOR_PATTERN_", NULL, 0x1a, "LJavaUtilRegexPattern" },
    { "BOUNDS_SEPARATOR_PATTERN_", NULL, 0x1a, "LJavaUtilRegexPattern" },
  };
  static J2ObjcClassInfo _RAREFormSpec = { "FormSpec", "com.appnativa.jgoodies.forms.layout", NULL, 0x401, 21, methods, 11, fields, 0, NULL};
  return &_RAREFormSpec;
}

@end
@implementation RAREFormSpec_DefaultAlignment

static int RAREFormSpec_DefaultAlignment_nextOrdinal_ = 0;

+ (int)nextOrdinal {
  return RAREFormSpec_DefaultAlignment_nextOrdinal_;
}

+ (int *)nextOrdinalRef {
  return &RAREFormSpec_DefaultAlignment_nextOrdinal_;
}

- (id)initWithNSString:(NSString *)name {
  if (self = [super init]) {
    ordinal_ = RAREFormSpec_DefaultAlignment_nextOrdinal_++;
    self->name_ = name;
  }
  return self;
}

+ (RAREFormSpec_DefaultAlignment *)valueOfWithNSString:(NSString *)str
                                           withBoolean:(BOOL)isHorizontal {
  if ([((NSString *) nil_chk(str)) isEqual:@"f"] || [str isEqual:@"fill"]) return [RAREFormSpec FILL_ALIGN];
  else if ([str isEqual:@"c"] || [str isEqual:@"center"]) return [RAREFormSpec CENTER_ALIGN];
  else if (isHorizontal) {
    if ([str isEqual:@"r"] || [str isEqual:@"right"]) return [RAREFormSpec RIGHT_ALIGN];
    else if ([str isEqual:@"l"] || [str isEqual:@"left"]) return [RAREFormSpec LEFT_ALIGN];
    else return nil;
  }
  else {
    if ([str isEqual:@"t"] || [str isEqual:@"top"]) return [RAREFormSpec TOP_ALIGN];
    else if ([str isEqual:@"b"] || [str isEqual:@"bottom"]) return [RAREFormSpec BOTTOM_ALIGN];
    else return nil;
  }
}

- (NSString *)description {
  return name_;
}

- (unichar)abbreviation {
  return [((NSString *) nil_chk(name_)) charAtWithInt:0];
}

- (void)copyAllFieldsTo:(RAREFormSpec_DefaultAlignment *)other {
  [super copyAllFieldsTo:other];
  other->name_ = name_;
  other->ordinal_ = ordinal_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", NULL, NULL, 0x2, NULL },
    { "valueOfWithNSString:withBoolean:", NULL, "LRAREFormSpec_DefaultAlignment", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x92, "LNSString" },
    { "nextOrdinal_", NULL, 0xa, "I" },
    { "ordinal_", NULL, 0x12, "I" },
  };
  static J2ObjcClassInfo _RAREFormSpec_DefaultAlignment = { "DefaultAlignment", "com.appnativa.jgoodies.forms.layout", "FormSpec", 0x19, 2, methods, 3, fields, 0, NULL};
  return &_RAREFormSpec_DefaultAlignment;
}

@end
