//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core/com/appnativa/jgoodies/forms/layout/CellConstraints.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/jgoodies/forms/layout/CellConstraints.h"
#include "com/appnativa/jgoodies/forms/layout/ColumnSpec.h"
#include "com/appnativa/jgoodies/forms/layout/FormLayout.h"
#include "com/appnativa/jgoodies/forms/layout/FormSpec.h"
#include "com/appnativa/jgoodies/forms/layout/RowSpec.h"
#include "com/appnativa/jgoodies/forms/layout/Size.h"
#include "com/appnativa/jgoodies/forms/layout/Sizes.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "java/lang/Boolean.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/InternalError.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Locale.h"
#include "java/util/StringTokenizer.h"

@implementation RARECellConstraints

static RARECellConstraints_Alignment * RARECellConstraints_DEFAULT_;
static RARECellConstraints_Alignment * RARECellConstraints_FILL_;
static RARECellConstraints_Alignment * RARECellConstraints_LEFT_;
static RARECellConstraints_Alignment * RARECellConstraints_RIGHT_;
static RARECellConstraints_Alignment * RARECellConstraints_CENTER_;
static RARECellConstraints_Alignment * RARECellConstraints_TOP_;
static RARECellConstraints_Alignment * RARECellConstraints_BOTTOM_;
static IOSObjectArray * RARECellConstraints_VALUES_;
static RAREUIInsets * RARECellConstraints_EMPTY_INSETS_;

+ (RARECellConstraints_Alignment *)DEFAULT {
  return RARECellConstraints_DEFAULT_;
}

+ (RARECellConstraints_Alignment *)FILL {
  return RARECellConstraints_FILL_;
}

+ (RARECellConstraints_Alignment *)LEFT {
  return RARECellConstraints_LEFT_;
}

+ (RARECellConstraints_Alignment *)RIGHT {
  return RARECellConstraints_RIGHT_;
}

+ (RARECellConstraints_Alignment *)CENTER {
  return RARECellConstraints_CENTER_;
}

+ (RARECellConstraints_Alignment *)TOP {
  return RARECellConstraints_TOP_;
}

+ (RARECellConstraints_Alignment *)BOTTOM {
  return RARECellConstraints_BOTTOM_;
}

+ (IOSObjectArray *)VALUES {
  return RARECellConstraints_VALUES_;
}

+ (RAREUIInsets *)EMPTY_INSETS {
  return RARECellConstraints_EMPTY_INSETS_;
}

- (id)initRARECellConstraints {
  return [self initRARECellConstraintsWithInt:1 withInt:1];
}

- (id)init {
  return [self initRARECellConstraints];
}

- (id)initWithNSString:(NSString *)encodedConstraints {
  if (self = [self initRARECellConstraints]) {
    [self initFromConstraintsWithNSString:encodedConstraints];
  }
  return self;
}

- (id)initRARECellConstraintsWithInt:(int)gridX
                             withInt:(int)gridY {
  return [self initRARECellConstraintsWithInt:gridX withInt:gridY withInt:1 withInt:1];
}

- (id)initWithInt:(int)gridX
          withInt:(int)gridY {
  return [self initRARECellConstraintsWithInt:gridX withInt:gridY];
}

- (id)initWithInt:(int)gridX
          withInt:(int)gridY
withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)hAlign
withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)vAlign {
  return [self initRARECellConstraintsWithInt:gridX withInt:gridY withInt:1 withInt:1 withRARECellConstraints_Alignment:hAlign withRARECellConstraints_Alignment:vAlign withRAREUIInsets:RARECellConstraints_EMPTY_INSETS_];
}

- (id)initRARECellConstraintsWithInt:(int)gridX
                             withInt:(int)gridY
                             withInt:(int)gridWidth
                             withInt:(int)gridHeight {
  return [self initRARECellConstraintsWithInt:gridX withInt:gridY withInt:gridWidth withInt:gridHeight withRARECellConstraints_Alignment:RARECellConstraints_DEFAULT_ withRARECellConstraints_Alignment:RARECellConstraints_DEFAULT_];
}

- (id)initWithInt:(int)gridX
          withInt:(int)gridY
          withInt:(int)gridWidth
          withInt:(int)gridHeight {
  return [self initRARECellConstraintsWithInt:gridX withInt:gridY withInt:gridWidth withInt:gridHeight];
}

- (id)initRARECellConstraintsWithInt:(int)gridX
                             withInt:(int)gridY
                             withInt:(int)gridWidth
                             withInt:(int)gridHeight
   withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)hAlign
   withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)vAlign {
  return [self initRARECellConstraintsWithInt:gridX withInt:gridY withInt:gridWidth withInt:gridHeight withRARECellConstraints_Alignment:hAlign withRARECellConstraints_Alignment:vAlign withRAREUIInsets:RARECellConstraints_EMPTY_INSETS_];
}

- (id)initWithInt:(int)gridX
          withInt:(int)gridY
          withInt:(int)gridWidth
          withInt:(int)gridHeight
withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)hAlign
withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)vAlign {
  return [self initRARECellConstraintsWithInt:gridX withInt:gridY withInt:gridWidth withInt:gridHeight withRARECellConstraints_Alignment:hAlign withRARECellConstraints_Alignment:vAlign];
}

- (id)initRARECellConstraintsWithInt:(int)gridX
                             withInt:(int)gridY
                             withInt:(int)gridWidth
                             withInt:(int)gridHeight
   withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)hAlign
   withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)vAlign
                    withRAREUIInsets:(RAREUIInsets *)insets {
  if (self = [super init]) {
    self->gridX_ = gridX;
    self->gridY_ = gridY;
    self->gridWidth_ = gridWidth;
    self->gridHeight_ = gridHeight;
    self->hAlign_ = hAlign;
    self->vAlign_ = vAlign;
    self->insets_ = insets;
    if (gridX <= 0) {
      @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:@"The grid x must be a positive number."];
    }
    if (gridY <= 0) {
      @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:@"The grid y must be a positive number."];
    }
    if (gridWidth <= 0) {
      @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:@"The grid width must be a positive number."];
    }
    if (gridHeight <= 0) {
      @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:@"The grid height must be a positive number."];
    }
    if (hAlign == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The horizontal alignment must not be null."];
    }
    if (vAlign == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:@"The vertical alignment must not be null."];
    }
    [self ensureValidOrientationsWithRARECellConstraints_Alignment:hAlign withRARECellConstraints_Alignment:vAlign];
  }
  return self;
}

- (id)initWithInt:(int)gridX
          withInt:(int)gridY
          withInt:(int)gridWidth
          withInt:(int)gridHeight
withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)hAlign
withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)vAlign
 withRAREUIInsets:(RAREUIInsets *)insets {
  return [self initRARECellConstraintsWithInt:gridX withInt:gridY withInt:gridWidth withInt:gridHeight withRARECellConstraints_Alignment:hAlign withRARECellConstraints_Alignment:vAlign withRAREUIInsets:insets];
}

- (id)clone {
  @try {
    RARECellConstraints *c = (RARECellConstraints *) check_class_cast([super clone], [RARECellConstraints class]);
    ((RARECellConstraints *) nil_chk(c))->insets_ = (RAREUIInsets *) check_class_cast([((RAREUIInsets *) nil_chk(insets_)) clone], [RAREUIInsets class]);
    return c;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[JavaLangInternalError alloc] init];
  }
}

- (void)ensureValidGridBoundsWithInt:(int)colCount
                             withInt:(int)rowCount {
  if (gridX_ <= 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"The column index %d must be positive.", gridX_]];
  }
  if (gridX_ > colCount) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"The column index %d must be less than or equal to %d.", gridX_, colCount]];
  }
  if (gridX_ + gridWidth_ - 1 > colCount) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"The grid width %d must be less than or equal to %d.", gridWidth_, (colCount - gridX_ + 1)]];
  }
  if (gridY_ <= 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"The row index %d must be positive.", gridY_]];
  }
  if (gridY_ > rowCount) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"The row index %d must be less than or equal to %d.", gridY_, rowCount]];
  }
  if (gridY_ + gridHeight_ - 1 > rowCount) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"The grid height %d must be less than or equal to %d.", gridHeight_, (rowCount - gridY_ + 1)]];
  }
}

- (RARECellConstraints *)rcWithInt:(int)row
                           withInt:(int)col {
  return [self rchwWithInt:row withInt:col withInt:1 withInt:1];
}

- (RARECellConstraints *)rcWithInt:(int)row
                           withInt:(int)col
                      withNSString:(NSString *)encodedAlignments {
  return [self rchwWithInt:row withInt:col withInt:1 withInt:1 withNSString:encodedAlignments];
}

- (RARECellConstraints *)rcWithInt:(int)row
                           withInt:(int)col
 withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)rowAlign
 withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)colAlign {
  return [self rchwWithInt:row withInt:col withInt:1 withInt:1 withRARECellConstraints_Alignment:rowAlign withRARECellConstraints_Alignment:colAlign];
}

- (RARECellConstraints *)rchwWithInt:(int)row
                             withInt:(int)col
                             withInt:(int)rowSpan
                             withInt:(int)colSpan {
  return [self rchwWithInt:row withInt:col withInt:rowSpan withInt:colSpan withRARECellConstraints_Alignment:RARECellConstraints_DEFAULT_ withRARECellConstraints_Alignment:RARECellConstraints_DEFAULT_];
}

- (RARECellConstraints *)rchwWithInt:(int)row
                             withInt:(int)col
                             withInt:(int)rowSpan
                             withInt:(int)colSpan
                        withNSString:(NSString *)encodedAlignments {
  RARECellConstraints *result = [self rchwWithInt:row withInt:col withInt:rowSpan withInt:colSpan];
  [((RARECellConstraints *) nil_chk(result)) setAlignmentsWithNSString:encodedAlignments withBoolean:NO];
  return result;
}

- (RARECellConstraints *)rchwWithInt:(int)row
                             withInt:(int)col
                             withInt:(int)rowSpan
                             withInt:(int)colSpan
   withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)rowAlign
   withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)colAlign {
  return [self xywhWithInt:col withInt:row withInt:colSpan withInt:rowSpan withRARECellConstraints_Alignment:colAlign withRARECellConstraints_Alignment:rowAlign];
}

- (RARECellConstraints *)rcwWithInt:(int)row
                            withInt:(int)col
                            withInt:(int)colSpan {
  return [self rchwWithInt:row withInt:col withInt:1 withInt:colSpan withRARECellConstraints_Alignment:RARECellConstraints_DEFAULT_ withRARECellConstraints_Alignment:RARECellConstraints_DEFAULT_];
}

- (RARECellConstraints *)rcwWithInt:(int)row
                            withInt:(int)col
                            withInt:(int)colSpan
                       withNSString:(NSString *)encodedAlignments {
  return [self rchwWithInt:row withInt:col withInt:1 withInt:colSpan withNSString:encodedAlignments];
}

- (RARECellConstraints *)rcwWithInt:(int)row
                            withInt:(int)col
                            withInt:(int)colSpan
  withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)rowAlign
  withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)colAlign {
  return [self rchwWithInt:row withInt:col withInt:1 withInt:colSpan withRARECellConstraints_Alignment:rowAlign withRARECellConstraints_Alignment:colAlign];
}

- (NSString *)toShortString {
  return [self toShortStringWithRAREFormLayout:nil];
}

- (NSString *)toShortStringWithRAREFormLayout:(RAREFormLayout *)layout {
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] initWithNSString:@"("];
  (void) [buffer appendWithNSString:[self formatIntWithInt:gridX_]];
  (void) [buffer appendWithNSString:@", "];
  (void) [buffer appendWithNSString:[self formatIntWithInt:gridY_]];
  (void) [buffer appendWithNSString:@", "];
  (void) [buffer appendWithNSString:[self formatIntWithInt:gridWidth_]];
  (void) [buffer appendWithNSString:@", "];
  (void) [buffer appendWithNSString:[self formatIntWithInt:gridHeight_]];
  (void) [buffer appendWithNSString:@", \""];
  (void) [buffer appendWithChar:[((RARECellConstraints_Alignment *) nil_chk(hAlign_)) abbreviation]];
  if ((hAlign_ == RARECellConstraints_DEFAULT_) && (layout != nil)) {
    (void) [buffer appendWithChar:'='];
    RAREColumnSpec *colSpec = (gridWidth_ == 1) ? [layout getColumnSpecWithInt:gridX_] : nil;
    (void) [buffer appendWithChar:[((RARECellConstraints_Alignment *) nil_chk([self concreteAlignmentWithRARECellConstraints_Alignment:hAlign_ withRAREFormSpec:colSpec])) abbreviation]];
  }
  (void) [buffer appendWithNSString:@", "];
  (void) [buffer appendWithChar:[((RARECellConstraints_Alignment *) nil_chk(vAlign_)) abbreviation]];
  if ((vAlign_ == RARECellConstraints_DEFAULT_) && (layout != nil)) {
    (void) [buffer appendWithChar:'='];
    RARERowSpec *rowSpec = (gridHeight_ == 1) ? [layout getRowSpecWithInt:gridY_] : nil;
    (void) [buffer appendWithChar:[((RARECellConstraints_Alignment *) nil_chk([self concreteAlignmentWithRARECellConstraints_Alignment:vAlign_ withRAREFormSpec:rowSpec])) abbreviation]];
  }
  (void) [buffer appendWithNSString:@"\""];
  if (!([((RAREUIInsets *) nil_chk(RARECellConstraints_EMPTY_INSETS_)) isEqual:insets_])) {
    (void) [buffer appendWithNSString:@", "];
    (void) [buffer appendWithId:insets_];
  }
  if (honorsVisibility_ != nil) {
    (void) [buffer appendWithNSString:[honorsVisibility_ booleanValue] ? @"honors visibility" : @"ignores visibility"];
  }
  (void) [buffer appendWithChar:')'];
  return [buffer description];
}

- (NSString *)description {
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] initWithNSString:@"CellConstraints"];
  (void) [buffer appendWithNSString:@"[x="];
  (void) [buffer appendWithInt:gridX_];
  (void) [buffer appendWithNSString:@"; y="];
  (void) [buffer appendWithInt:gridY_];
  (void) [buffer appendWithNSString:@"; w="];
  (void) [buffer appendWithInt:gridWidth_];
  (void) [buffer appendWithNSString:@"; h="];
  (void) [buffer appendWithInt:gridHeight_];
  (void) [buffer appendWithNSString:@"; hAlign="];
  (void) [buffer appendWithId:hAlign_];
  (void) [buffer appendWithNSString:@"; vAlign="];
  (void) [buffer appendWithId:vAlign_];
  if (!([((RAREUIInsets *) nil_chk(RARECellConstraints_EMPTY_INSETS_)) isEqual:insets_])) {
    (void) [buffer appendWithNSString:@"; insets="];
    (void) [buffer appendWithId:insets_];
  }
  (void) [buffer appendWithNSString:@"; honorsVisibility="];
  (void) [buffer appendWithId:honorsVisibility_];
  (void) [buffer appendWithChar:']'];
  return [buffer description];
}

- (RARECellConstraints *)xyWithInt:(int)col
                           withInt:(int)row {
  return [self xywhWithInt:col withInt:row withInt:1 withInt:1];
}

- (RARECellConstraints *)xyWithInt:(int)col
                           withInt:(int)row
                      withNSString:(NSString *)encodedAlignments {
  return [self xywhWithInt:col withInt:row withInt:1 withInt:1 withNSString:encodedAlignments];
}

- (RARECellConstraints *)xyWithInt:(int)col
                           withInt:(int)row
 withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)colAlign
 withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)rowAlign {
  return [self xywhWithInt:col withInt:row withInt:1 withInt:1 withRARECellConstraints_Alignment:colAlign withRARECellConstraints_Alignment:rowAlign];
}

- (RARECellConstraints *)xywWithInt:(int)col
                            withInt:(int)row
                            withInt:(int)colSpan {
  return [self xywhWithInt:col withInt:row withInt:colSpan withInt:1 withRARECellConstraints_Alignment:RARECellConstraints_DEFAULT_ withRARECellConstraints_Alignment:RARECellConstraints_DEFAULT_];
}

- (RARECellConstraints *)xywWithInt:(int)col
                            withInt:(int)row
                            withInt:(int)colSpan
                       withNSString:(NSString *)encodedAlignments {
  return [self xywhWithInt:col withInt:row withInt:colSpan withInt:1 withNSString:encodedAlignments];
}

- (RARECellConstraints *)xywWithInt:(int)col
                            withInt:(int)row
                            withInt:(int)colSpan
  withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)colAlign
  withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)rowAlign {
  return [self xywhWithInt:col withInt:row withInt:colSpan withInt:1 withRARECellConstraints_Alignment:colAlign withRARECellConstraints_Alignment:rowAlign];
}

- (RARECellConstraints *)xywhWithInt:(int)col
                             withInt:(int)row
                             withInt:(int)colSpan
                             withInt:(int)rowSpan {
  return [self xywhWithInt:col withInt:row withInt:colSpan withInt:rowSpan withRARECellConstraints_Alignment:RARECellConstraints_DEFAULT_ withRARECellConstraints_Alignment:RARECellConstraints_DEFAULT_];
}

- (RARECellConstraints *)xywhWithInt:(int)col
                             withInt:(int)row
                             withInt:(int)colSpan
                             withInt:(int)rowSpan
                        withNSString:(NSString *)encodedAlignments {
  RARECellConstraints *result = [self xywhWithInt:col withInt:row withInt:colSpan withInt:rowSpan];
  [((RARECellConstraints *) nil_chk(result)) setAlignmentsWithNSString:encodedAlignments withBoolean:YES];
  return result;
}

- (RARECellConstraints *)xywhWithInt:(int)col
                             withInt:(int)row
                             withInt:(int)colSpan
                             withInt:(int)rowSpan
   withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)colAlign
   withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)rowAlign {
  self->gridX_ = col;
  self->gridY_ = row;
  self->gridWidth_ = colSpan;
  self->gridHeight_ = rowSpan;
  self->hAlign_ = colAlign;
  self->vAlign_ = rowAlign;
  [self ensureValidOrientationsWithRARECellConstraints_Alignment:hAlign_ withRARECellConstraints_Alignment:vAlign_];
  return self;
}

- (void)setBoundsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c
                         withRAREFormLayout:(RAREFormLayout *)layout
                        withRAREUIRectangle:(RAREUIRectangle *)cellBounds
                 withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)minWidthMeasure
                 withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)minHeightMeasure
                 withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)prefWidthMeasure
                 withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)prefHeightMeasure {
  RAREColumnSpec *colSpec = (gridWidth_ == 1) ? [((RAREFormLayout *) nil_chk(layout)) getColumnSpecWithInt:gridX_] : nil;
  RARERowSpec *rowSpec = (gridHeight_ == 1) ? [((RAREFormLayout *) nil_chk(layout)) getRowSpecWithInt:gridY_] : nil;
  RARECellConstraints_Alignment *concreteHAlign = [self concreteAlignmentWithRARECellConstraints_Alignment:self->hAlign_ withRAREFormSpec:colSpec];
  RARECellConstraints_Alignment *concreteVAlign = [self concreteAlignmentWithRARECellConstraints_Alignment:self->vAlign_ withRAREFormSpec:rowSpec];
  RAREUIInsets *concreteInsets = (self->insets_ != nil) ? self->insets_ : RARECellConstraints_EMPTY_INSETS_;
  int cellX = [JavaLangMath roundWithFloat:((RAREUIRectangle *) nil_chk(cellBounds))->x_ + concreteInsets->left_];
  int cellY = [JavaLangMath roundWithFloat:cellBounds->y_ + concreteInsets->top_];
  int cellW = (int) [JavaLangMath ceilWithDouble:cellBounds->width_ - concreteInsets->left_ - concreteInsets->right_];
  int cellH = (int) [JavaLangMath ceilWithDouble:cellBounds->height_ - concreteInsets->top_ - concreteInsets->bottom_];
  int compW = [self componentSizeWithRAREiPlatformComponent:c withRAREFormSpec:colSpec withInt:cellW withRAREFormLayout_Measure:minWidthMeasure withRAREFormLayout_Measure:prefWidthMeasure];
  int compH = [self componentSizeWithRAREiPlatformComponent:c withRAREFormSpec:rowSpec withInt:cellH withRAREFormLayout_Measure:minHeightMeasure withRAREFormLayout_Measure:prefHeightMeasure];
  int x = [self originWithRARECellConstraints_Alignment:concreteHAlign withInt:cellX withInt:cellW withInt:compW];
  int y = [self originWithRARECellConstraints_Alignment:concreteVAlign withInt:cellY withInt:cellH withInt:compH];
  int w = [self extentWithRARECellConstraints_Alignment:concreteHAlign withInt:cellW withInt:compW];
  int h = [self extentWithRARECellConstraints_Alignment:concreteVAlign withInt:cellH withInt:compH];
  viewX_ = x;
  viewY_ = y;
  [((id<RAREiPlatformComponent>) nil_chk(c)) setBoundsWithFloat:x withFloat:y withFloat:w withFloat:h];
}

- (int)getMeasuredWidthWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c
                               withRAREFormLayout:(RAREFormLayout *)layout
                              withRAREUIRectangle:(RAREUIRectangle *)cellBounds
                       withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)minWidthMeasure
                       withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)minHeightMeasure
                       withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)prefWidthMeasure
                       withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)prefHeightMeasure {
  RAREColumnSpec *colSpec = (gridWidth_ == 1) ? [((RAREFormLayout *) nil_chk(layout)) getColumnSpecWithInt:gridX_] : nil;
  RARECellConstraints_Alignment *concreteHAlign = [self concreteAlignmentWithRARECellConstraints_Alignment:self->hAlign_ withRAREFormSpec:colSpec];
  RAREUIInsets *concreteInsets = (self->insets_ != nil) ? self->insets_ : RARECellConstraints_EMPTY_INSETS_;
  int cellW = (int) [JavaLangMath ceilWithDouble:((RAREUIRectangle *) nil_chk(cellBounds))->width_ - concreteInsets->left_ - concreteInsets->right_];
  int compW = [self componentSizeWithRAREiPlatformComponent:c withRAREFormSpec:colSpec withInt:cellW withRAREFormLayout_Measure:minWidthMeasure withRAREFormLayout_Measure:prefWidthMeasure];
  int w = [self extentWithRARECellConstraints_Alignment:concreteHAlign withInt:cellW withInt:compW];
  return w;
}

- (int)componentSizeWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)component
                              withRAREFormSpec:(RAREFormSpec *)formSpec
                                       withInt:(int)cellSize
                    withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)minMeasure
                    withRAREFormLayout_Measure:(id<RAREFormLayout_Measure>)prefMeasure {
  if (formSpec == nil) {
    return [((id<RAREFormLayout_Measure>) nil_chk(prefMeasure)) sizeOfWithRAREiPlatformComponent:component];
  }
  else if ([formSpec getSize] == [RARESizes MINIMUM]) {
    return [((id<RAREFormLayout_Measure>) nil_chk(minMeasure)) sizeOfWithRAREiPlatformComponent:component];
  }
  else if ([formSpec getSize] == [RARESizes PREFERRED]) {
    return [((id<RAREFormLayout_Measure>) nil_chk(prefMeasure)) sizeOfWithRAREiPlatformComponent:component];
  }
  else {
    return [JavaLangMath minWithInt:cellSize withInt:[((id<RAREFormLayout_Measure>) nil_chk(prefMeasure)) sizeOfWithRAREiPlatformComponent:component]];
  }
}

- (RARECellConstraints_Alignment *)concreteAlignmentWithRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)cellAlignment
                                                                     withRAREFormSpec:(RAREFormSpec *)formSpec {
  return (formSpec == nil) ? ((cellAlignment == RARECellConstraints_DEFAULT_) ? RARECellConstraints_FILL_ : cellAlignment) : [self usedAlignmentWithRARECellConstraints_Alignment:cellAlignment withRAREFormSpec:formSpec];
}

- (RARECellConstraints_Alignment *)decodeAlignmentWithNSString:(NSString *)encodedAlignment {
  return [RARECellConstraints_Alignment valueOfWithNSString:encodedAlignment];
}

- (JavaLangInteger *)decodeIntWithNSString:(NSString *)token {
  @try {
    return [JavaLangInteger decodeWithNSString:token];
  }
  @catch (JavaLangNumberFormatException *e) {
    return nil;
  }
}

- (void)ensureValidOrientationsWithRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)horizontalAlignment
                               withRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)verticalAlignment {
  if (![((RARECellConstraints_Alignment *) nil_chk(horizontalAlignment)) isHorizontal]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The horizontal alignment must be one of: left, center, right, fill, default."];
  }
  if (![((RARECellConstraints_Alignment *) nil_chk(verticalAlignment)) isVertical]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The vertical alignment must be one of: top, center, botto, fill, default."];
  }
}

- (int)extentWithRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)alignment
                                       withInt:(int)cellSize
                                       withInt:(int)componentSize {
  return (alignment == RARECellConstraints_FILL_) ? cellSize : componentSize;
}

- (NSString *)formatIntWithInt:(int)number {
  NSString *str = [JavaLangInteger toStringWithInt:number];
  return (number < 10) ? [NSString stringWithFormat:@" %@", str] : str;
}

- (void)initFromConstraintsWithNSString:(NSString *)encodedConstraints {
  JavaUtilStringTokenizer *tokenizer = [[JavaUtilStringTokenizer alloc] initWithNSString:encodedConstraints withNSString:@" ,"];
  int argCount = [tokenizer countTokens];
  if (!((argCount == 2) || (argCount == 4) || (argCount == 6))) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"You must provide 2, 4 or 6 arguments."];
  }
  JavaLangInteger *nextInt = [self decodeIntWithNSString:[tokenizer nextToken]];
  if (nextInt == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"First cell constraint element must be a number."];
  }
  gridX_ = [((JavaLangInteger *) nil_chk(nextInt)) intValue];
  if (gridX_ <= 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:@"The grid x must be a positive number."];
  }
  nextInt = [self decodeIntWithNSString:[tokenizer nextToken]];
  if (nextInt == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Second cell constraint element must be a number."];
  }
  gridY_ = [((JavaLangInteger *) nil_chk(nextInt)) intValue];
  if (gridY_ <= 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:@"The grid y must be a positive number."];
  }
  if (![tokenizer hasMoreTokens]) {
    return;
  }
  NSString *token = [tokenizer nextToken];
  nextInt = [self decodeIntWithNSString:token];
  if (nextInt != nil) {
    gridWidth_ = [nextInt intValue];
    if (gridWidth_ <= 0) {
      @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:@"The grid width must be a positive number."];
    }
    nextInt = [self decodeIntWithNSString:[tokenizer nextToken]];
    if (nextInt == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Fourth cell constraint element must be like third."];
    }
    gridHeight_ = [((JavaLangInteger *) nil_chk(nextInt)) intValue];
    if (gridHeight_ <= 0) {
      @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:@"The grid height must be a positive number."];
    }
    if (![tokenizer hasMoreTokens]) {
      return;
    }
    token = [tokenizer nextToken];
  }
  hAlign_ = [self decodeAlignmentWithNSString:token];
  vAlign_ = [self decodeAlignmentWithNSString:[tokenizer nextToken]];
  [self ensureValidOrientationsWithRARECellConstraints_Alignment:hAlign_ withRARECellConstraints_Alignment:vAlign_];
}

- (int)originWithRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)alignment
                                       withInt:(int)cellOrigin
                                       withInt:(int)cellSize
                                       withInt:(int)componentSize {
  if ((alignment == RARECellConstraints_RIGHT_) || (alignment == RARECellConstraints_BOTTOM_)) {
    return cellOrigin + cellSize - componentSize;
  }
  else if (alignment == RARECellConstraints_CENTER_) {
    return cellOrigin + (cellSize - componentSize) / 2;
  }
  else {
    return cellOrigin;
  }
}

- (RARECellConstraints_Alignment *)usedAlignmentWithRARECellConstraints_Alignment:(RARECellConstraints_Alignment *)cellAlignment
                                                                 withRAREFormSpec:(RAREFormSpec *)formSpec {
  if (cellAlignment != RARECellConstraints_DEFAULT_) {
    return cellAlignment;
  }
  RAREFormSpec_DefaultAlignment *defaultAlignment = [((RAREFormSpec *) nil_chk(formSpec)) getDefaultAlignment];
  if (defaultAlignment == [RAREFormSpec FILL_ALIGN]) {
    return RARECellConstraints_FILL_;
  }
  if (defaultAlignment == [RAREColumnSpec LEFT]) {
    return RARECellConstraints_LEFT_;
  }
  else if (defaultAlignment == [RAREFormSpec CENTER_ALIGN]) {
    return RARECellConstraints_CENTER_;
  }
  else if (defaultAlignment == [RAREColumnSpec RIGHT]) {
    return RARECellConstraints_RIGHT_;
  }
  else if (defaultAlignment == [RARERowSpec TOP]) {
    return RARECellConstraints_TOP_;
  }
  else {
    return RARECellConstraints_BOTTOM_;
  }
}

- (void)setAlignmentsWithNSString:(NSString *)encodedAlignments
                      withBoolean:(BOOL)horizontalThenVertical {
  JavaUtilStringTokenizer *tokenizer = [[JavaUtilStringTokenizer alloc] initWithNSString:encodedAlignments withNSString:@" ,"];
  RARECellConstraints_Alignment *first = [self decodeAlignmentWithNSString:[tokenizer nextToken]];
  RARECellConstraints_Alignment *second = [self decodeAlignmentWithNSString:[tokenizer nextToken]];
  hAlign_ = horizontalThenVertical ? first : second;
  vAlign_ = horizontalThenVertical ? second : first;
  [self ensureValidOrientationsWithRARECellConstraints_Alignment:hAlign_ withRARECellConstraints_Alignment:vAlign_];
}

+ (void)initialize {
  if (self == [RARECellConstraints class]) {
    RARECellConstraints_DEFAULT_ = [[RARECellConstraints_Alignment alloc] initWithNSString:@"default" withInt:RARECellConstraints_Alignment_BOTH];
    RARECellConstraints_FILL_ = [[RARECellConstraints_Alignment alloc] initWithNSString:@"fill" withInt:RARECellConstraints_Alignment_BOTH];
    RARECellConstraints_LEFT_ = [[RARECellConstraints_Alignment alloc] initWithNSString:@"left" withInt:RARECellConstraints_Alignment_HORIZONTAL];
    RARECellConstraints_RIGHT_ = [[RARECellConstraints_Alignment alloc] initWithNSString:@"right" withInt:RARECellConstraints_Alignment_HORIZONTAL];
    RARECellConstraints_CENTER_ = [[RARECellConstraints_Alignment alloc] initWithNSString:@"center" withInt:RARECellConstraints_Alignment_BOTH];
    RARECellConstraints_TOP_ = [[RARECellConstraints_Alignment alloc] initWithNSString:@"top" withInt:RARECellConstraints_Alignment_VERTICAL];
    RARECellConstraints_BOTTOM_ = [[RARECellConstraints_Alignment alloc] initWithNSString:@"bottom" withInt:RARECellConstraints_Alignment_VERTICAL];
    RARECellConstraints_VALUES_ = [IOSObjectArray arrayWithObjects:(id[]){ RARECellConstraints_DEFAULT_, RARECellConstraints_FILL_, RARECellConstraints_LEFT_, RARECellConstraints_RIGHT_, RARECellConstraints_CENTER_, RARECellConstraints_TOP_, RARECellConstraints_BOTTOM_ } count:7 type:[IOSClass classWithClass:[RARECellConstraints_Alignment class]]];
    RARECellConstraints_EMPTY_INSETS_ = [[RAREUIInsets alloc] initWithInt:0 withInt:0 withInt:0 withInt:0];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(RARECellConstraints *)other {
  [super copyAllFieldsTo:other];
  other->gridHeight_ = gridHeight_;
  other->gridWidth_ = gridWidth_;
  other->gridX_ = gridX_;
  other->gridY_ = gridY_;
  other->hAlign_ = hAlign_;
  other->honorsVisibility_ = honorsVisibility_;
  other->insets_ = insets_;
  other->vAlign_ = vAlign_;
  other->viewX_ = viewX_;
  other->viewY_ = viewY_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "rcWithInt:withInt:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "rcWithInt:withInt:withNSString:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "rcWithInt:withInt:withRARECellConstraints_Alignment:withRARECellConstraints_Alignment:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "rchwWithInt:withInt:withInt:withInt:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "rchwWithInt:withInt:withInt:withInt:withNSString:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "rchwWithInt:withInt:withInt:withInt:withRARECellConstraints_Alignment:withRARECellConstraints_Alignment:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "rcwWithInt:withInt:withInt:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "rcwWithInt:withInt:withInt:withNSString:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "rcwWithInt:withInt:withInt:withRARECellConstraints_Alignment:withRARECellConstraints_Alignment:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "toShortString", NULL, "LNSString", 0x1, NULL },
    { "toShortStringWithRAREFormLayout:", NULL, "LNSString", 0x1, NULL },
    { "xyWithInt:withInt:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "xyWithInt:withInt:withNSString:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "xyWithInt:withInt:withRARECellConstraints_Alignment:withRARECellConstraints_Alignment:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "xywWithInt:withInt:withInt:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "xywWithInt:withInt:withInt:withNSString:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "xywWithInt:withInt:withInt:withRARECellConstraints_Alignment:withRARECellConstraints_Alignment:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "xywhWithInt:withInt:withInt:withInt:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "xywhWithInt:withInt:withInt:withInt:withNSString:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "xywhWithInt:withInt:withInt:withInt:withRARECellConstraints_Alignment:withRARECellConstraints_Alignment:", NULL, "LRARECellConstraints", 0x1, NULL },
    { "setBoundsWithRAREiPlatformComponent:withRAREFormLayout:withRAREUIRectangle:withRAREFormLayout_Measure:withRAREFormLayout_Measure:withRAREFormLayout_Measure:withRAREFormLayout_Measure:", NULL, "V", 0x0, NULL },
    { "getMeasuredWidthWithRAREiPlatformComponent:withRAREFormLayout:withRAREUIRectangle:withRAREFormLayout_Measure:withRAREFormLayout_Measure:withRAREFormLayout_Measure:withRAREFormLayout_Measure:", NULL, "I", 0x0, NULL },
    { "componentSizeWithRAREiPlatformComponent:withRAREFormSpec:withInt:withRAREFormLayout_Measure:withRAREFormLayout_Measure:", NULL, "I", 0x2, NULL },
    { "concreteAlignmentWithRARECellConstraints_Alignment:withRAREFormSpec:", NULL, "LRARECellConstraints_Alignment", 0x2, NULL },
    { "decodeAlignmentWithNSString:", NULL, "LRARECellConstraints_Alignment", 0x2, NULL },
    { "decodeIntWithNSString:", NULL, "LJavaLangInteger", 0x2, NULL },
    { "ensureValidOrientationsWithRARECellConstraints_Alignment:withRARECellConstraints_Alignment:", NULL, "V", 0x2, NULL },
    { "extentWithRARECellConstraints_Alignment:withInt:withInt:", NULL, "I", 0x2, NULL },
    { "formatIntWithInt:", NULL, "LNSString", 0x2, NULL },
    { "initFromConstraintsWithNSString:", NULL, "V", 0x2, NULL },
    { "originWithRARECellConstraints_Alignment:withInt:withInt:withInt:", NULL, "I", 0x2, NULL },
    { "usedAlignmentWithRARECellConstraints_Alignment:withRAREFormSpec:", NULL, "LRARECellConstraints_Alignment", 0x2, NULL },
    { "setAlignmentsWithNSString:withBoolean:", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "DEFAULT_", NULL, 0x19, "LRARECellConstraints_Alignment" },
    { "FILL_", NULL, 0x19, "LRARECellConstraints_Alignment" },
    { "LEFT_", NULL, 0x19, "LRARECellConstraints_Alignment" },
    { "RIGHT_", NULL, 0x19, "LRARECellConstraints_Alignment" },
    { "CENTER_", NULL, 0x19, "LRARECellConstraints_Alignment" },
    { "TOP_", NULL, 0x19, "LRARECellConstraints_Alignment" },
    { "BOTTOM_", NULL, 0x19, "LRARECellConstraints_Alignment" },
    { "VALUES_", NULL, 0x1a, "LIOSObjectArray" },
    { "EMPTY_INSETS_", NULL, 0x1a, "LRAREUIInsets" },
    { "gridHeight_", NULL, 0x1, "I" },
    { "gridWidth_", NULL, 0x1, "I" },
    { "gridX_", NULL, 0x1, "I" },
    { "gridY_", NULL, 0x1, "I" },
    { "hAlign_", NULL, 0x1, "LRARECellConstraints_Alignment" },
    { "honorsVisibility_", NULL, 0x1, "LJavaLangBoolean" },
    { "insets_", NULL, 0x1, "LRAREUIInsets" },
    { "vAlign_", NULL, 0x1, "LRARECellConstraints_Alignment" },
    { "viewX_", NULL, 0x1, "I" },
    { "viewY_", NULL, 0x1, "I" },
  };
  static J2ObjcClassInfo _RARECellConstraints = { "CellConstraints", "com.appnativa.jgoodies.forms.layout", NULL, 0x11, 34, methods, 19, fields, 0, NULL};
  return &_RARECellConstraints;
}

@end
@implementation RARECellConstraints_Alignment

static int RARECellConstraints_Alignment_nextOrdinal_ = 0;

+ (int)nextOrdinal {
  return RARECellConstraints_Alignment_nextOrdinal_;
}

+ (int *)nextOrdinalRef {
  return &RARECellConstraints_Alignment_nextOrdinal_;
}

- (id)initWithNSString:(NSString *)name
               withInt:(int)orientation {
  if (self = [super init]) {
    ordinal_ = RARECellConstraints_Alignment_nextOrdinal_++;
    self->name_ = name;
    self->orientation_ = orientation;
  }
  return self;
}

- (unichar)abbreviation {
  return [((NSString *) nil_chk(name_)) charAtWithInt:0];
}

- (NSString *)description {
  return name_;
}

+ (RARECellConstraints_Alignment *)valueOfWithNSString:(NSString *)nameOrAbbreviation {
  NSString *str = [((NSString *) nil_chk(nameOrAbbreviation)) lowercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]];
  if ([((NSString *) nil_chk(str)) isEqual:@"d"] || [str isEqual:@"default"]) {
    return [RARECellConstraints DEFAULT];
  }
  else if ([str isEqual:@"f"] || [str isEqual:@"fill"]) {
    return [RARECellConstraints FILL];
  }
  else if ([str isEqual:@"c"] || [str isEqual:@"center"]) {
    return [RARECellConstraints CENTER];
  }
  else if ([str isEqual:@"l"] || [str isEqual:@"left"]) {
    return [RARECellConstraints LEFT];
  }
  else if ([str isEqual:@"r"] || [str isEqual:@"right"]) {
    return [RARECellConstraints RIGHT];
  }
  else if ([str isEqual:@"t"] || [str isEqual:@"top"]) {
    return [RARECellConstraints TOP];
  }
  else if ([str isEqual:@"b"] || [str isEqual:@"bottom"]) {
    return [RARECellConstraints BOTTOM];
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid alignment %@. Must be one of: left, center, right, top, bottom, fill, default, l, c, r, t, b, f, d.", nameOrAbbreviation]];
  }
}

- (BOOL)isHorizontal {
  return orientation_ != RARECellConstraints_Alignment_VERTICAL;
}

- (BOOL)isVertical {
  return orientation_ != RARECellConstraints_Alignment_HORIZONTAL;
}

- (void)copyAllFieldsTo:(RARECellConstraints_Alignment *)other {
  [super copyAllFieldsTo:other];
  other->name_ = name_;
  other->ordinal_ = ordinal_;
  other->orientation_ = orientation_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", NULL, NULL, 0x2, NULL },
    { "valueOfWithNSString:", NULL, "LRARECellConstraints_Alignment", 0x9, NULL },
    { "isHorizontal", NULL, "Z", 0x2, NULL },
    { "isVertical", NULL, "Z", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "BOTH_", NULL, 0x1a, "I" },
    { "HORIZONTAL_", NULL, 0x1a, "I" },
    { "VERTICAL_", NULL, 0x1a, "I" },
    { "nextOrdinal_", NULL, 0xa, "I" },
    { "ordinal_", NULL, 0x12, "I" },
    { "name_", NULL, 0x92, "LNSString" },
    { "orientation_", NULL, 0x92, "I" },
  };
  static J2ObjcClassInfo _RARECellConstraints_Alignment = { "Alignment", "com.appnativa.jgoodies.forms.layout", "CellConstraints", 0x19, 4, methods, 7, fields, 0, NULL};
  return &_RARECellConstraints_Alignment;
}

@end
