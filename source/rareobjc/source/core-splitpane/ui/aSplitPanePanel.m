//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-splitpane/com/appnativa/rare/ui/aSplitPanePanel.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/Container.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UICursor.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/XPContainer.h"
#include "com/appnativa/rare/ui/aComponent.h"
#include "com/appnativa/rare/ui/aSplitPanePanel.h"
#include "com/appnativa/rare/ui/border/UIMatteBorder.h"
#include "com/appnativa/rare/ui/effects/iTransitionAnimator.h"
#include "com/appnativa/rare/ui/event/ChangeEvent.h"
#include "com/appnativa/rare/ui/event/iChangeListener.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/appnativa/util/SNumber.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

@implementation RAREaSplitPanePanel

- (id)init {
  if (self = [super init]) {
    autoOrient_ = YES;
    showGripper_ = YES;
    userResizeable_ = YES;
    leftToRight_ = YES;
    autoAdjustProportions_ = YES;
    minimumSizePosition_ = -1;
    [self initializeView];
  }
  return self;
}

- (id)initWithId:(id)view {
  if (self = [super initWithId:view]) {
    autoOrient_ = YES;
    showGripper_ = YES;
    userResizeable_ = YES;
    leftToRight_ = YES;
    autoAdjustProportions_ = YES;
    minimumSizePosition_ = -1;
    [self initializeView];
  }
  return self;
}

- (int)getMinimumSizePanePosition {
  return minimumSizePosition_;
}

- (void)setUseMinimumSizeOfPaneAtWithInt:(int)panePosition {
  minimumSizePosition_ = panePosition;
  if (panePosition > -1) {
    if (minimumSizePositionSize_ == nil) {
      minimumSizePositionSize_ = [[RAREUIDimension alloc] init];
    }
    [self calculateMinimumSizePositionSize];
  }
}

- (void)revalidate {
  [super revalidate];
  if (minimumSizePositionSize_ != nil) {
    minimumSizePositionSize_->width_ = 0;
  }
}

- (void)addWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c
                               withId:(id)constraints
                              withInt:(int)position {
  if ((position == -1) && ([self getPaneCount] > 0)) {
    [super addWithRAREiPlatformComponent:[self createDivider] withId:nil withInt:-1];
    dividerSizes_ += dividerSize_;
  }
  if (([constraints isKindOfClass:[JavaLangBoolean class]]) && [((JavaLangBoolean *) nil_chk([JavaLangBoolean getFALSE])) isEqual:constraints]) {
    if (noGrowList_ == nil) {
      noGrowList_ = [[RAREUTIdentityArrayList alloc] initWithInt:2];
    }
    [((RAREUTIdentityArrayList *) nil_chk(noGrowList_)) addWithId:c];
  }
  [super addWithRAREiPlatformComponent:c withId:nil withInt:-1];
  checkVisibility_ = YES;
}

- (void)addChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)checkOrientationWithId:(id)newConfig {
}

- (RAREaSplitPanePanel_Divider *)createDivider {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dispose {
  if (![self isDisposed]) {
    int len = [self getComponentCount];
    for (int i = 0; i < len; i++) {
      id<RAREiPlatformComponent> node = [self getComponentAtWithInt:i];
      if ([(id) node isKindOfClass:[RAREaSplitPanePanel_Divider class]]) {
        [((RAREaSplitPanePanel_Divider *) check_class_cast(node, [RAREaSplitPanePanel_Divider class])) dispose];
      }
    }
    [super dispose];
    if (noGrowList_ != nil) {
      [noGrowList_ clear];
    }
    if (dividerDragPainter_ != nil) {
      [dividerDragPainter_ dispose];
    }
    if (dividerPainter_ != nil) {
      [dividerPainter_ dispose];
    }
    if ((transitionAnimator_ != nil) && [transitionAnimator_ isAutoDispose]) {
      [transitionAnimator_ dispose];
    }
    transitionAnimator_ = nil;
    afterView_ = nil;
    beforeView_ = nil;
    dividerBorder_ = nil;
    dividerDragPainter_ = nil;
    dividerPainter_ = nil;
    dragDivider_ = nil;
    gripperIcon_ = nil;
    noGrowList_ = nil;
  }
}

- (void)paneVisibilityChanged {
  id<RAREiPlatformComponent> v;
  float removed = 0;
  int n = 0;
  float visible = 0;
  BOOL visibility = YES;
  int len = [self getComponentCount];
  for (int i = 0; i < len; i++) {
    v = [self getComponentAtWithInt:i];
    if ([(id) v isKindOfClass:[RAREaSplitPanePanel_Divider class]]) {
      if ((i == 1) && (visibility == NO)) {
        [((id<RAREiPlatformComponent>) nil_chk(v)) setVisibleWithBoolean:NO];
      }
      continue;
    }
    visibility = [((id<RAREiPlatformComponent>) nil_chk(v)) isVisible];
    if (visibility == NO) {
      removed += IOSFloatArray_Get(nil_chk(splitPorpotions_), n);
    }
    else {
      (*IOSFloatArray_GetRef(nil_chk(tempPorpotions_), n)) = 0;
      visible++;
    }
    if (i > 0) {
      v = [self getComponentAtWithInt:i - 1];
      if ([(id) v isKindOfClass:[RAREaSplitPanePanel_Divider class]]) {
        if ((i != 2) || ([((id<RAREiPlatformComponent>) nil_chk([self getComponentAtWithInt:0])) isVisible])) {
          [((id<RAREiPlatformComponent>) nil_chk(v)) setVisibleWithBoolean:visibility];
        }
      }
    }
    n++;
  }
  if ((removed > 0) && (visible > 0)) {
    removed /= visible;
  }
  else {
    removed = 0;
  }
  len = (int) [((IOSFloatArray *) nil_chk(tempPorpotions_)) count];
  for (int i = 0; i < len; i++) {
    (*IOSFloatArray_GetRef(tempPorpotions_, i)) = IOSFloatArray_Get(nil_chk(splitPorpotions_), i) + removed;
  }
  checkVisibility_ = NO;
  dividerSizes_ = 0;
  for (int i = 0; i < len; i++) {
    id<RAREiPlatformComponent> node = [self getComponentAtWithInt:i];
    if (([(id) node isKindOfClass:[RAREaSplitPanePanel_Divider class]]) && [((id<RAREiPlatformComponent>) nil_chk(node)) isVisible]) {
      dividerSizes_ += dividerSize_;
    }
  }
}

- (void)removeWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  int n = [self indexOfWithRAREiPlatformComponent:c];
  if (n != -1) {
    id<RAREiPlatformComponent> d = nil;
    if ([self getComponentCount] > 2) {
      if (n == 0) {
        d = [self getComponentAtWithInt:1];
      }
      else {
        d = [self getComponentAtWithInt:n - 1];
      }
    }
    [super removeWithRAREiPlatformComponent:c];
    if ([(id) d isKindOfClass:[RAREaSplitPanePanel_Divider class]]) {
      [super removeWithRAREiPlatformComponent:d];
    }
    if (noGrowList_ != nil) {
      [noGrowList_ removeWithId:c];
    }
  }
}

- (void)removeAll {
  [super removeAll];
  dividerSizes_ = 0;
  if (noGrowList_ != nil) {
    [noGrowList_ clear];
  }
}

- (void)removeChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)reverseRegions {
  int len = [self getComponentCount];
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] initWithInt:len];
  for (int i = 0; i < len; i++) {
    id<RAREiPlatformComponent> pc = [self getComponentAtWithInt:i];
    if (!([(id) pc isKindOfClass:[RAREaSplitPanePanel_Divider class]])) {
      [list addWithId:pc];
    }
  }
  [self removeAll];
  [self reverseWithFloatArray:splitPorpotions_];
  [self reverseWithFloatArray:tempPorpotions_];
  len = [list size];
  for (int i = len - 1; i >= 0; i--) {
    [self addWithRAREiPlatformComponent:[list getWithInt:i]];
  }
}

- (void)toggleOrientationWithBoolean:(BOOL)splitEvenly {
  if (splitEvenly) {
    initiallyEven_ = YES;
  }
  [self setLeftToRightSplitExWithBoolean:!leftToRight_];
}

- (void)setAutoAdjustProportionsWithBoolean:(BOOL)autoAdjustProportions {
  self->autoAdjustProportions_ = autoAdjustProportions;
}

- (void)setContinuousLayoutWithBoolean:(BOOL)continuous {
  continuousLayout_ = continuous;
}

- (void)setDividerDragPainterWithRAREiPlatformComponentPainter:(id<RAREiPlatformComponentPainter>)painter {
  self->dividerDragPainter_ = painter;
}

- (void)setDividerIconWithRAREiPlatformComponentPainter:(id<RAREiPlatformComponentPainter>)painter {
  self->dividerPainter_ = painter;
}

- (void)setDividerSizeWithFloat:(float)size {
  if (size != dividerSize_) {
    float os = dividerSize_;
    dividerSize_ = size;
    if (os == 0) {
      [self addDividers];
    }
  }
  [self revalidate];
  [self repaint];
}

- (void)setGripperIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)gripperIcon {
  self->gripperIcon_ = gripperIcon;
}

- (void)setInitiallyEvenWithBoolean:(BOOL)even {
  initiallyEven_ = even;
}

- (void)setLeftToRightSplitWithBoolean:(BOOL)leftToRight {
  autoOrient_ = NO;
  [self setLeftToRightSplitExWithBoolean:leftToRight];
}

- (void)setOneTouchExpandableWithBoolean:(BOOL)oneTouch {
}

- (void)setProportionsWithFloatArray:(IOSFloatArray *)props {
  [self setProportionsExWithFloatArray:[self createProporionsWithFloatArray:props withInt:(int) [((IOSFloatArray *) nil_chk(props)) count] + 1]];
}

- (void)setShowGripperWithBoolean:(BOOL)show {
  showGripper_ = show;
}

- (void)setTopToBottomWithBoolean:(BOOL)topToBottom {
  [self setLeftToRightSplitWithBoolean:!topToBottom];
}

- (void)setTransitionAnimatorWithRAREiTransitionAnimator:(id<RAREiTransitionAnimator>)animator {
  transitionAnimator_ = animator;
}

- (void)setUserResizeableWithBoolean:(BOOL)userResizeable {
  self->userResizeable_ = userResizeable;
}

- (float)getDividerSize {
  return dividerSize_;
}

- (id<RAREiPlatformIcon>)getGripperIcon {
  return gripperIcon_;
}

- (void)getMinimumSizeExWithRAREUIDimension:(RAREUIDimension *)size {
  float width = 0;
  float height = 0;
  int len = [self getComponentCount];
  int cpos = 0;
  for (int i = 0; i < len; i++) {
    id<RAREiPlatformComponent> c = [self getComponentAtWithInt:i];
    (void) [((id<RAREiPlatformComponent>) nil_chk(c)) getMinimumSizeWithRAREUIDimension:size];
    if ((minimumSizePosition_ > -1) && !([(id) c isKindOfClass:[RAREaSplitPanePanel_Divider class]])) {
      if (minimumSizePosition_ == cpos) {
        [((RAREUIDimension *) nil_chk(minimumSizePositionSize_)) setSizeWithRAREUIDimension:size];
      }
      cpos++;
    }
    if (leftToRight_) {
      width += ((RAREUIDimension *) nil_chk(size))->width_;
      height = [JavaLangMath maxWithFloat:height withFloat:size->height_];
    }
    else {
      height += ((RAREUIDimension *) nil_chk(size))->height_;
      width = [JavaLangMath maxWithFloat:width withFloat:size->width_];
    }
    ((RAREUIDimension *) nil_chk(size))->width_ = width;
    size->height_ = height;
  }
}

- (int)getPaneCount {
  int len = [self getComponentCount];
  int count = 0;
  for (int i = 0; i < len; i++) {
    id<RAREiPlatformComponent> node = [self getComponentAtWithInt:i];
    if (!([(id) node isKindOfClass:[RAREaSplitPanePanel_Divider class]])) {
      count++;
    }
  }
  return count;
}

- (IOSFloatArray *)getProportions {
  return splitPorpotions_;
}

- (id<RAREiTransitionAnimator>)getTransitionAnimator {
  return transitionAnimator_;
}

- (BOOL)isAutoAdjustProportions {
  return autoAdjustProportions_;
}

- (BOOL)isTopToBottom {
  return !leftToRight_;
}

- (BOOL)isUserResizeable {
  return userResizeable_;
}

- (void)reverseWithFloatArray:(IOSFloatArray *)array {
  for (int i = 0; i < (int) [((IOSFloatArray *) nil_chk(array)) count] / 2; i++) {
    float f = IOSFloatArray_Get(array, i);
    (*IOSFloatArray_GetRef(array, i)) = IOSFloatArray_Get(array, (int) [array count] - i - 1);
    (*IOSFloatArray_GetRef(array, (int) [array count] - i - 1)) = f;
  }
}

- (IOSFloatArray *)createProporionsWithFloatArray:(IOSFloatArray *)props
                                          withInt:(int)len {
  int i = 0;
  if ((props == nil) || ((int) [props count] == 0)) {
    props = [IOSFloatArray arrayWithLength:len];
    float p = 1.0f / len;
    for (i = 0; i < (int) [props count]; i++) {
      (*IOSFloatArray_GetRef(props, i)) = p;
    }
  }
  else {
    if ((int) [props count] <= len) {
      float p = 0;
      for (i = 0; i < (int) [props count]; i++) {
        p += IOSFloatArray_Get(props, i);
      }
      p = (1.0f - p) / (len - (int) [props count]);
      if (p < 0) {
        p = 0;
      }
      IOSFloatArray *d = [IOSFloatArray arrayWithLength:len];
      for (i = 0; i < len; i++) {
        if (i >= (int) [props count]) {
          (*IOSFloatArray_GetRef(d, i)) = p;
        }
        else {
          (*IOSFloatArray_GetRef(d, i)) = IOSFloatArray_Get(props, i);
        }
      }
      props = d;
    }
  }
  return props;
}

- (void)fireChangeEvent {
  if (listenerList_ == nil) {
    return;
  }
  if (changeEvent_ == nil) {
    changeEvent_ = [[RAREChangeEvent alloc] initWithId:self];
  }
  [RAREUtils fireChangeEventWithRAREEventListenerList:listenerList_ withRAREChangeEvent:changeEvent_];
}

- (void)initializeView {
  paintDividerDragAllways_ = [RAREPlatform isTouchableDevice];
  leftToRight_ = [RAREScreenUtils isWider];
  RAREUIProperties *defs = [RAREPlatform getUIDefaults];
  JavaLangInteger *n = [((RAREUIProperties *) nil_chk(defs)) getIntegerWithNSString:@"Rare.SplitPane.dividerSize"];
  if (n != nil) {
    dividerSize_ = [RAREScreenUtils platformPixelsWithFloat:[n intValue]];
  }
  else {
    dividerSize_ = [RAREScreenUtils platformPixelsWithFloat:8];
    if (paintDividerDragAllways_) {
      dividerSize_ = [JavaLangMath maxWithFloat:dividerSize_ withFloat:[RAREScreenUtils platformPixelsWithFloat:16]];
    }
  }
  gripperIcon_ = [defs getIconWithNSString:@"Rare.SplitPane.gripperIcon"];
  RAREPaintBucket *pb = [defs getPaintBucketWithNSString:@"Rare.SplitPane.dividerPainter"];
  if (pb == nil) {
    RAREUIColor *c = [defs getColorWithNSString:@"Rare.SplitPane.dividerBorderColor"];
    dividerPainter_ = [[RAREUIComponentPainter alloc] init];
    if (c != nil) {
      [dividerPainter_ setBorderWithRAREiPlatformBorder:dividerBorder_ = [[RAREUIMatteBorder alloc] initWithFloat:0 withFloat:1 withFloat:0 withFloat:1 withRAREUIColor:c]];
    }
  }
  else {
    dividerPainter_ = [pb getComponentPainterWithBoolean:YES];
  }
  RAREPaintBucket *dpb = [defs getPaintBucketWithNSString:@"Rare.SplitPane.dividerDragPainter"];
  if (dpb == nil) {
    dpb = (pb == nil) ? nil : (RAREPaintBucket *) check_class_cast([pb clone], [RAREPaintBucket class]);
  }
  if (dpb != nil) {
    [dpb setBackgroundColorWithRAREUIColor:[self getDragColorWithBoolean:YES]];
    dividerDragPainter_ = [dpb getComponentPainterWithBoolean:YES];
  }
  else {
    dividerDragPainter_ = (id<RAREiPlatformComponentPainter>) check_protocol_cast([((RAREUIComponentPainter *) check_class_cast(dividerPainter_, [RAREUIComponentPainter class])) clone], @protocol(RAREiPlatformComponentPainter));
    [((id<RAREiPlatformComponentPainter>) nil_chk(dividerDragPainter_)) setBackgroundColorWithRAREUIColor:[self getDragColorWithBoolean:YES]];
  }
}

- (void)layoutContainerWithRAREUIDimension:(RAREUIDimension *)size
                          withRAREUIInsets:(RAREUIInsets *)inArg {
  if (checkVisibility_) {
    [self paneVisibilityChanged];
  }
  int left = [((RAREUIInsets *) nil_chk(inArg)) intLeft];
  int top = [inArg intTop];
  int width = (int) [JavaLangMath ceilWithDouble:((RAREUIDimension *) nil_chk(size))->width_ - left - inArg->right_];
  int height = (int) [JavaLangMath ceilWithDouble:size->height_ - top - inArg->bottom_];
  int w = width;
  int h = height;
  if (autoOrient_) {
    BOOL t2b = (width > height) ? NO : YES;
    if (t2b != [self isTopToBottom]) {
      IOSFloatArray *props = originalSplitPorpotions_;
      if (props != nil) {
        [self setProportionsExWithFloatArray:originalSplitPorpotions_];
      }
      [self toggleOrientationWithBoolean:NO];
    }
  }
  if ((tempPorpotions_ == nil) || initiallyEven_) {
    initiallyEven_ = NO;
    [self setProportionsExWithFloatArray:[self createProporionsWithFloatArray:nil withInt:[self getPaneCount]]];
  }
  if ((minimumSizePosition_ > -1) && !dragging_) {
    [self adjustForMinimumSizeComponentWithFloat:width withFloat:height];
  }
  else if (autoAdjustProportions_ && !dragging_) {
    [self adjustProprotionsWithFloat:width withFloat:height];
  }
  if (leftToRight_) {
    w -= dividerSizes_;
  }
  else {
    h -= dividerSizes_;
  }
  int len = [self getComponentCount];
  IOSFloatArray *props = tempPorpotions_;
  int n = 0;
  int j = 0;
  int pos = leftToRight_ ? left : top;
  int end = (int) [((IOSFloatArray *) nil_chk(props)) count] - 1;
  for (int i = 0; i < len; i++) {
    id<RAREiPlatformComponent> v = [self getComponentAtWithInt:i];
    if ([(id) v isKindOfClass:[RAREaSplitPanePanel_Divider class]]) {
      if ([((id<RAREiPlatformComponent>) nil_chk(v)) isVisible]) {
        if (leftToRight_) {
          [v setBoundsWithFloat:pos withFloat:top withFloat:dividerSize_ withFloat:height];
          pos += dividerSize_;
        }
        else {
          [v setBoundsWithFloat:left withFloat:pos withFloat:width withFloat:dividerSize_];
          pos += dividerSize_;
        }
      }
      continue;
    }
    if (![((id<RAREiPlatformComponent>) nil_chk(v)) isVisible]) {
      j++;
      continue;
    }
    if (leftToRight_) {
      if (j == end) {
        [v setBoundsWithFloat:pos withFloat:top withFloat:width - pos withFloat:height];
        break;
      }
      else {
        id<RAREiPlatformComponent> vv = nil;
        if (dragging_ && (v == afterView_) && (vv = [self getNextDividerWithInt:i + 1 withInt:len]) != nil) {
          n = [((id<RAREiPlatformComponent>) nil_chk(vv)) getX] - pos;
          j++;
        }
        else {
          n = (int) [JavaLangMath ceilWithDouble:IOSFloatArray_Get(props, j++) * w];
        }
        [v setBoundsWithFloat:pos withFloat:top withFloat:n withFloat:height];
        pos += n;
      }
    }
    else {
      if (j == end) {
        [v setBoundsWithFloat:left withFloat:pos withFloat:width withFloat:height - pos];
        break;
      }
      else {
        id<RAREiPlatformComponent> vv = nil;
        if (dragging_ && (v == afterView_) && (vv = [self getNextDividerWithInt:i + 1 withInt:len]) != nil) {
          n = [((id<RAREiPlatformComponent>) nil_chk(vv)) getY] - pos;
          j++;
        }
        else {
          n = (int) [JavaLangMath ceilWithDouble:IOSFloatArray_Get(props, j++) * h];
        }
        [v setBoundsWithFloat:left withFloat:pos withFloat:width withFloat:n];
        pos += n;
      }
    }
  }
}

- (BOOL)resizeViaDividerWithRAREaSplitPanePanel_Divider:(RAREaSplitPanePanel_Divider *)d
                                              withFloat:(float)delta {
  if (delta == 0) {
    return NO;
  }
  RAREUIInsets *in = [self getInsetsWithRAREUIInsets:computeInsets_];
  int before = beforeViewIndex_;
  int after = afterViewIndex_;
  id<RAREiPlatformComponent> beforev = beforeView_;
  id<RAREiPlatformComponent> afterv = afterView_;
  if ((beforev == nil) || (afterv == nil)) {
    return NO;
  }
  float size, mw;
  RAREUIDimension *bsize = [((id<RAREiPlatformComponent>) nil_chk(beforev)) getMinimumSize];
  RAREUIDimension *asize = [((id<RAREiPlatformComponent>) nil_chk(afterv)) getMinimumSize];
  if (leftToRight_) {
    mw = (delta < 0) ? ((RAREUIDimension *) nil_chk(bsize))->width_ : ((RAREUIDimension *) nil_chk(asize))->width_;
    size = [self getWidth] - ((RAREUIInsets *) nil_chk(in))->left_ - in->right_ - dividerSizes_;
  }
  else {
    mw = (delta < 0) ? ((RAREUIDimension *) nil_chk(bsize))->height_ : ((RAREUIDimension *) nil_chk(asize))->height_;
    size = [self getHeight] - ((RAREUIInsets *) nil_chk(in))->top_ - in->bottom_ - dividerSizes_;
  }
  float w;
  IOSFloatArray *props = tempPorpotions_;
  if (delta < 0) {
    w = beforeViewSize_ + delta;
    if (w < mw) {
      w = mw;
    }
    if ([RAREUTSNumber isEqualWithFloat:w withFloat:beforeViewSize_]) {
      return NO;
    }
    (*IOSFloatArray_GetRef(nil_chk(props), before)) = w / size;
    delta = w - beforeViewSize_;
    w = afterViewSize_ - delta;
    (*IOSFloatArray_GetRef(props, after)) = w / size;
  }
  else {
    w = afterViewSize_ - delta;
    if (w < mw) {
      w = mw;
    }
    if ([RAREUTSNumber isEqualWithFloat:w withFloat:afterViewSize_]) {
      return NO;
    }
    delta = afterViewSize_ - w;
    (*IOSFloatArray_GetRef(nil_chk(props), after)) = w / size;
    w = beforeViewSize_ + delta;
    (*IOSFloatArray_GetRef(props, before)) = w / size;
  }
  if ([self allPanesVisible]) {
    [JavaLangSystem arraycopyWithId:props withInt:0 withId:splitPorpotions_ withInt:0 withInt:(int) [((IOSFloatArray *) nil_chk(props)) count]];
  }
  minimumSizePosition_ = -1;
  return YES;
}

- (void)setupDragWithRAREaSplitPanePanel_Divider:(RAREaSplitPanePanel_Divider *)d {
  beforeView_ = nil;
  afterView_ = nil;
  id<RAREiPlatformComponent> lv = nil;
  int j = -1;
  id<RAREiPlatformComponent> beforev = nil;
  id<RAREiPlatformComponent> afterv = nil;
  int before = 0;
  int after = 0;
  int len = [self getComponentCount];
  for (int i = 0; i < len; i++) {
    id<RAREiPlatformComponent> v = [self getComponentAtWithInt:i];
    if (v == d) {
      beforev = lv;
      before = j;
      continue;
    }
    if ([(id) v isKindOfClass:[RAREaSplitPanePanel_Divider class]]) {
      continue;
    }
    lv = v;
    j++;
    if (beforev != nil) {
      afterv = lv;
      after = j;
      break;
    }
  }
  [((RAREaSplitPanePanel_Divider *) nil_chk(d)) draggingStarted];
  if ((beforev == nil) || (afterv == nil)) {
    return;
  }
  beforeViewIndex_ = before;
  beforeView_ = beforev;
  afterViewIndex_ = after;
  afterView_ = afterv;
  beforeViewSize_ = leftToRight_ ? [((id<RAREiPlatformComponent>) nil_chk(beforev)) getWidth] : [((id<RAREiPlatformComponent>) nil_chk(beforev)) getHeight];
  afterViewSize_ = leftToRight_ ? [((id<RAREiPlatformComponent>) nil_chk(afterv)) getWidth] : [((id<RAREiPlatformComponent>) nil_chk(afterv)) getHeight];
}

- (void)setLeftToRightSplitExWithBoolean:(BOOL)leftToRight {
  if (self->leftToRight_ != leftToRight) {
    self->leftToRight_ = leftToRight;
    if (dividerBorder_ != nil) {
      if (leftToRight) {
        [dividerBorder_ setInsetsWithInt:0 withInt:1 withInt:0 withInt:1];
      }
      else {
        [dividerBorder_ setInsetsWithInt:1 withInt:0 withInt:1 withInt:0];
      }
    }
    int len = [self getComponentCount];
    for (int i = 0; i < len; i++) {
      id<RAREiPlatformComponent> node = [self getComponentAtWithInt:i];
      if ([(id) node isKindOfClass:[RAREaSplitPanePanel_Divider class]]) {
        [((RAREaSplitPanePanel_Divider *) check_class_cast(node, [RAREaSplitPanePanel_Divider class])) setTypeWithBoolean:leftToRight];
      }
    }
    [self revalidate];
  }
}

- (void)setProportionsExWithFloatArray:(IOSFloatArray *)props {
  tempPorpotions_ = [IOSFloatArray arrayWithLength:(int) [((IOSFloatArray *) nil_chk(props)) count]];
  splitPorpotions_ = [IOSFloatArray arrayWithLength:(int) [props count]];
  originalSplitPorpotions_ = [IOSFloatArray arrayWithLength:(int) [props count]];
  [JavaLangSystem arraycopyWithId:props withInt:0 withId:originalSplitPorpotions_ withInt:0 withInt:(int) [props count]];
  [JavaLangSystem arraycopyWithId:props withInt:0 withId:tempPorpotions_ withInt:0 withInt:(int) [props count]];
  [JavaLangSystem arraycopyWithId:props withInt:0 withId:splitPorpotions_ withInt:0 withInt:(int) [props count]];
}

- (RAREUIColor *)getDragColorWithBoolean:(BOOL)always {
  RAREUIColor *c = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.SplitPane.dragColor"];
  if ((c == nil) && always) {
    c = [RAREColorUtils getBackground];
    if ([((RAREUIColor *) nil_chk(c)) isDarkColor]) {
      c = [c lightWithInt:50];
    }
    else {
      c = [c lightWithInt:-50];
    }
    c = [((RAREUIColor *) nil_chk(c)) alphaWithInt:128];
  }
  return c;
}

- (void)getPreferredSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                    withFloat:(float)maxWidth {
  if (maxWidth > 0) {
    [self getSizeForWidthWithRAREUIDimension:size withFloat:maxWidth];
  }
  else {
    float width = 0;
    float height = 0;
    int len = [self getComponentCount];
    for (int i = 0; i < len; i++) {
      (void) [((id<RAREiPlatformComponent>) nil_chk([self getComponentAtWithInt:i])) getPreferredSizeWithRAREUIDimension:size];
      if (leftToRight_) {
        width += ((RAREUIDimension *) nil_chk(size))->width_ + dividerSize_;
        height = [JavaLangMath maxWithFloat:height withFloat:size->height_];
      }
      else {
        height += ((RAREUIDimension *) nil_chk(size))->height_ + dividerSize_;
        width = [JavaLangMath maxWithFloat:width withFloat:size->width_];
      }
      ((RAREUIDimension *) nil_chk(size))->width_ = width;
      size->height_ = height;
    }
  }
}

- (void)getSizeForWidthWithRAREUIDimension:(RAREUIDimension *)size
                                 withFloat:(float)maxWidth {
  RAREUIInsets *insets = [self getInsetsWithRAREUIInsets:computeInsets_];
  float width = maxWidth - ((RAREUIInsets *) nil_chk(insets))->left_ - insets->right_;
  float maxHeight = insets->top_ + insets->bottom_;
  if (leftToRight_) {
    width -= dividerSizes_;
  }
  if ((tempPorpotions_ == nil) || initiallyEven_) {
    initiallyEven_ = NO;
    [self setProportionsExWithFloatArray:[self createProporionsWithFloatArray:nil withInt:[self getPaneCount]]];
  }
  int len = [self getComponentCount];
  IOSFloatArray *props = tempPorpotions_;
  float n = 0;
  int j = 0;
  for (int i = 0; i < len; i++) {
    id<RAREiPlatformComponent> v = [self getComponentAtWithInt:i];
    if ([(id) v isKindOfClass:[RAREaSplitPanePanel_Divider class]]) {
      if (!leftToRight_ && [((id<RAREiPlatformComponent>) nil_chk(v)) isVisible]) {
        maxHeight += dividerSize_;
      }
      continue;
    }
    if (![((id<RAREiPlatformComponent>) nil_chk(v)) isVisible]) {
      j++;
      continue;
    }
    if (leftToRight_) {
      n = (IOSFloatArray_Get(nil_chk(props), j++) * width);
      (void) [v getPreferredSizeWithRAREUIDimension:size withFloat:(int) n];
      maxHeight = [JavaLangMath maxWithFloat:maxHeight withFloat:((RAREUIDimension *) nil_chk(size))->height_];
    }
    else {
      (void) [v getPreferredSizeWithRAREUIDimension:size withFloat:width];
      maxHeight += ((RAREUIDimension *) nil_chk(size))->height_;
    }
  }
}

- (void)addDividers {
  if (dividerSize_ < 1) {
    return;
  }
  int len = [self getComponentCount] - 1;
  dividerSizes_ = 0;
  while (len-- > 1) {
    dividerSizes_ += dividerSize_;
    [super addWithRAREiPlatformComponent:[self createDivider] withId:nil withInt:-1];
  }
}

- (void)adjustForMinimumSizeComponentWithFloat:(float)width
                                     withFloat:(float)height {
  float availableSize;
  float size;
  if (((RAREUIDimension *) nil_chk(minimumSizePositionSize_))->width_ == 0) {
    [self calculateMinimumSizePositionSize];
  }
  if (leftToRight_) {
    availableSize = width - dividerSizes_;
    size = minimumSizePositionSize_->width_;
  }
  else {
    availableSize = height - dividerSizes_;
    size = minimumSizePositionSize_->height_;
  }
  int pos = minimumSizePosition_;
  IOSFloatArray *props = tempPorpotions_;
  int plen = (int) [((IOSFloatArray *) nil_chk(props)) count];
  if (size > availableSize) {
    size = availableSize;
  }
  (*IOSFloatArray_GetRef(props, pos)) = size / availableSize;
  availableSize -= size;
  float fraction = (1 - IOSFloatArray_Get(props, pos)) / (plen - 1);
  for (int i = 0; i < plen; i++) {
    if (i != pos) {
      (*IOSFloatArray_GetRef(props, i)) = fraction;
    }
  }
}

- (void)calculateMinimumSizePositionSize {
  int len = [self getComponentCount];
  int cpos = 0;
  for (int i = 0; i < len; i++) {
    id<RAREiPlatformComponent> c = [self getComponentAtWithInt:i];
    if (!([(id) c isKindOfClass:[RAREaSplitPanePanel_Divider class]])) {
      if (minimumSizePosition_ == cpos) {
        (void) [((id<RAREiPlatformComponent>) nil_chk(c)) getMinimumSizeWithRAREUIDimension:minimumSizePositionSize_];
        break;
      }
      cpos++;
    }
  }
}

- (void)adjustProprotionsWithFloat:(float)width
                         withFloat:(float)height {
  float availableSize;
  if (leftToRight_) {
    availableSize = width - dividerSizes_;
  }
  else {
    availableSize = height - dividerSizes_;
  }
  int len = [self getComponentCount];
  IOSFloatArray *props = tempPorpotions_;
  int plen = (int) [((IOSFloatArray *) nil_chk(tempPorpotions_)) count];
  IOSFloatArray *sizes = [IOSFloatArray arrayWithLength:plen];
  IOSFloatArray *nsizes = [IOSFloatArray arrayWithLength:plen];
  RAREUIDimension *size = [[RAREUIDimension alloc] init];
  int totalSize = 0;
  int j = 0;
  for (int i = 0; i < len; i++) {
    id<RAREiPlatformComponent> v = [self getComponentAtWithInt:i];
    if (!([(id) v isKindOfClass:[RAREaSplitPanePanel_Divider class]]) && [((id<RAREiPlatformComponent>) nil_chk(v)) isVisible]) {
      (void) [v getMinimumSizeWithRAREUIDimension:size];
      (*IOSFloatArray_GetRef(sizes, j)) = leftToRight_ ? size->width_ : size->height_;
      totalSize += IOSFloatArray_Get(sizes, j);
      j++;
    }
  }
  if (totalSize > availableSize) {
    return;
  }
  float leftOver = availableSize - totalSize;
  float dx;
  int next = plen;
  BOOL foundOne = NO;
  for (int i = 0; i < plen; i++) {
    (*IOSFloatArray_GetRef(nsizes, i)) = IOSFloatArray_Get(nil_chk(props), i) * availableSize;
    if (IOSFloatArray_Get(nsizes, i) < IOSFloatArray_Get(sizes, i)) {
      foundOne = YES;
      dx = IOSFloatArray_Get(sizes, i) - IOSFloatArray_Get(nsizes, i);
      (*IOSFloatArray_GetRef(nsizes, i)) = IOSFloatArray_Get(sizes, i);
      leftOver -= dx;
      if (leftOver < 0) {
        next = i + 1;
        break;
      }
    }
  }
  if (!foundOne) {
    return;
  }
  if (next < plen) {
    j = plen - next;
    dx = leftOver / j;
    for (int i = next; i < plen; i++) {
      (*IOSFloatArray_GetRef(nsizes, i)) += dx;
    }
  }
  for (int i = 0; i < plen; i++) {
    (*IOSFloatArray_GetRef(nil_chk(props), i)) = IOSFloatArray_Get(nsizes, i) / availableSize;
  }
}

- (BOOL)allPanesVisible {
  int len = [self getComponentCount];
  for (int i = 0; i < len; i++) {
    id<RAREiPlatformComponent> v = [self getComponentAtWithInt:i];
    if (!([(id) v isKindOfClass:[RAREaSplitPanePanel_Divider class]]) && ![((id<RAREiPlatformComponent>) nil_chk(v)) isVisible]) {
      return NO;
    }
  }
  return YES;
}

- (id<RAREiPlatformComponent>)getNextDividerWithInt:(int)pos
                                            withInt:(int)len {
  for (int i = pos; i < len; i++) {
    id<RAREiPlatformComponent> n = [self getComponentAtWithInt:i];
    if (([(id) n isKindOfClass:[RAREaSplitPanePanel_Divider class]]) && [((id<RAREiPlatformComponent>) nil_chk(n)) isVisible]) {
      return n;
    }
  }
  return nil;
}

- (BOOL)isAutoOrient {
  return autoOrient_;
}

- (void)setAutoOrientWithBoolean:(BOOL)autoOrient {
  self->autoOrient_ = autoOrient;
}

- (void)copyAllFieldsTo:(RAREaSplitPanePanel *)other {
  [super copyAllFieldsTo:other];
  other->afterView_ = afterView_;
  other->afterViewIndex_ = afterViewIndex_;
  other->afterViewSize_ = afterViewSize_;
  other->autoAdjustProportions_ = autoAdjustProportions_;
  other->autoOrient_ = autoOrient_;
  other->beforeView_ = beforeView_;
  other->beforeViewIndex_ = beforeViewIndex_;
  other->beforeViewSize_ = beforeViewSize_;
  other->checkVisibility_ = checkVisibility_;
  other->continuousLayout_ = continuousLayout_;
  other->dividerBorder_ = dividerBorder_;
  other->dividerDragPainter_ = dividerDragPainter_;
  other->dividerPainter_ = dividerPainter_;
  other->dividerSize_ = dividerSize_;
  other->dividerSizes_ = dividerSizes_;
  other->dragDivider_ = dragDivider_;
  other->dragMarkX_ = dragMarkX_;
  other->dragMarkY_ = dragMarkY_;
  other->dragging_ = dragging_;
  other->draggingInited_ = draggingInited_;
  other->gripperIcon_ = gripperIcon_;
  other->initiallyEven_ = initiallyEven_;
  other->leftToRight_ = leftToRight_;
  other->minimumSizePosition_ = minimumSizePosition_;
  other->minimumSizePositionSize_ = minimumSizePositionSize_;
  other->noGrowList_ = noGrowList_;
  other->originalSplitPorpotions_ = originalSplitPorpotions_;
  other->paintDividerDragAllways_ = paintDividerDragAllways_;
  other->showGripper_ = showGripper_;
  other->splitPorpotions_ = splitPorpotions_;
  other->tempPorpotions_ = tempPorpotions_;
  other->transitionAnimator_ = transitionAnimator_;
  other->userResizeable_ = userResizeable_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addChangeListenerWithRAREiChangeListener:", NULL, "V", 0x401, NULL },
    { "createDivider", NULL, "LRAREaSplitPanePanel_Divider", 0x401, NULL },
    { "removeChangeListenerWithRAREiChangeListener:", NULL, "V", 0x401, NULL },
    { "setProportionsWithFloatArray:", NULL, "V", 0x81, NULL },
    { "getGripperIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getProportions", NULL, "LIOSFloatArray", 0x1, NULL },
    { "getTransitionAnimator", NULL, "LRAREiTransitionAnimator", 0x1, NULL },
    { "isAutoAdjustProportions", NULL, "Z", 0x1, NULL },
    { "isTopToBottom", NULL, "Z", 0x1, NULL },
    { "isUserResizeable", NULL, "Z", 0x1, NULL },
    { "reverseWithFloatArray:", NULL, "V", 0x0, NULL },
    { "createProporionsWithFloatArray:withInt:", NULL, "LIOSFloatArray", 0x4, NULL },
    { "fireChangeEvent", NULL, "V", 0x4, NULL },
    { "initializeView", NULL, "V", 0x4, NULL },
    { "layoutContainerWithRAREUIDimension:withRAREUIInsets:", NULL, "V", 0x4, NULL },
    { "resizeViaDividerWithRAREaSplitPanePanel_Divider:withFloat:", NULL, "Z", 0x4, NULL },
    { "setupDragWithRAREaSplitPanePanel_Divider:", NULL, "V", 0x4, NULL },
    { "setLeftToRightSplitExWithBoolean:", NULL, "V", 0x4, NULL },
    { "setProportionsExWithFloatArray:", NULL, "V", 0x4, NULL },
    { "getDragColorWithBoolean:", NULL, "LRAREUIColor", 0x4, NULL },
    { "getPreferredSizeExWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
    { "getSizeForWidthWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
    { "addDividers", NULL, "V", 0x2, NULL },
    { "adjustForMinimumSizeComponentWithFloat:withFloat:", NULL, "V", 0x2, NULL },
    { "calculateMinimumSizePositionSize", NULL, "V", 0x4, NULL },
    { "adjustProprotionsWithFloat:withFloat:", NULL, "V", 0x2, NULL },
    { "allPanesVisible", NULL, "Z", 0x2, NULL },
    { "getNextDividerWithInt:withInt:", NULL, "LRAREiPlatformComponent", 0x2, NULL },
    { "isAutoOrient", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "autoOrient_", NULL, 0x4, "Z" },
    { "showGripper_", NULL, 0x4, "Z" },
    { "userResizeable_", NULL, 0x4, "Z" },
    { "leftToRight_", NULL, 0x4, "Z" },
    { "autoAdjustProportions_", NULL, 0x4, "Z" },
    { "afterView_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "afterViewIndex_", NULL, 0x4, "I" },
    { "afterViewSize_", NULL, 0x4, "F" },
    { "beforeView_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "beforeViewIndex_", NULL, 0x4, "I" },
    { "beforeViewSize_", NULL, 0x4, "F" },
    { "continuousLayout_", NULL, 0x4, "Z" },
    { "dividerBorder_", NULL, 0x4, "LRAREUIMatteBorder" },
    { "dividerDragPainter_", NULL, 0x4, "LRAREiPlatformComponentPainter" },
    { "dividerPainter_", NULL, 0x4, "LRAREiPlatformComponentPainter" },
    { "dividerSize_", NULL, 0x4, "F" },
    { "dividerSizes_", NULL, 0x4, "F" },
    { "dragDivider_", NULL, 0x4, "LRAREaSplitPanePanel_Divider" },
    { "dragMarkX_", NULL, 0x4, "I" },
    { "dragMarkY_", NULL, 0x4, "I" },
    { "dragging_", NULL, 0x4, "Z" },
    { "draggingInited_", NULL, 0x4, "Z" },
    { "gripperIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "initiallyEven_", NULL, 0x4, "Z" },
    { "noGrowList_", NULL, 0x4, "LRAREUTIdentityArrayList" },
    { "originalSplitPorpotions_", NULL, 0x4, "LIOSFloatArray" },
    { "splitPorpotions_", NULL, 0x4, "LIOSFloatArray" },
    { "paintDividerDragAllways_", NULL, 0x4, "Z" },
    { "tempPorpotions_", NULL, 0x4, "LIOSFloatArray" },
    { "transitionAnimator_", NULL, 0x4, "LRAREiTransitionAnimator" },
    { "minimumSizePosition_", NULL, 0x4, "I" },
    { "minimumSizePositionSize_", NULL, 0x0, "LRAREUIDimension" },
    { "checkVisibility_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _RAREaSplitPanePanel = { "aSplitPanePanel", "com.appnativa.rare.ui", NULL, 0x401, 29, methods, 33, fields, 0, NULL};
  return &_RAREaSplitPanePanel;
}

@end
@implementation RAREaSplitPanePanel_Divider

- (id)initWithRAREaSplitPanePanel:(RAREaSplitPanePanel *)outer$
                           withId:(id)view {
  this$0_ = outer$;
  if (self = [super initWithId:view]) {
    [self setTypeWithBoolean:outer$->leftToRight_];
    [self setComponentPainterWithRAREiPlatformComponentPainter:outer$->dividerPainter_];
  }
  return self;
}

- (void)draggingStarted {
  if (this$0_->paintDividerDragAllways_ || !this$0_->continuousLayout_) {
    [self setComponentPainterWithRAREiPlatformComponentPainter:this$0_->dividerDragPainter_];
    [self repaint];
  }
}

- (void)draggingStopped {
  if (this$0_->paintDividerDragAllways_ || !this$0_->continuousLayout_) {
    [self setComponentPainterWithRAREiPlatformComponentPainter:this$0_->dividerPainter_];
    [self repaint];
  }
}

- (void)setTypeWithBoolean:(BOOL)horizontal {
  if (horizontal) {
    [self setCursorWithRAREUICursor:[RAREUICursor getCursorWithNSString:@"COL-RESIZE"]];
  }
  else {
    [self setCursorWithRAREUICursor:[RAREUICursor getCursorWithNSString:@"ROW-RESIZE"]];
  }
}

- (BOOL)isManaged {
  return YES;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "isManaged", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaSplitPanePanel" },
  };
  static J2ObjcClassInfo _RAREaSplitPanePanel_Divider = { "Divider", "com.appnativa.rare.ui", "aSplitPanePanel", 0x4, 1, methods, 1, fields, 0, NULL};
  return &_RAREaSplitPanePanel_Divider;
}

@end
@implementation RAREaSplitPanePanel_SplitPaneGripperIcon

- (id)initWithRAREaSplitPanePanel:(RAREaSplitPanePanel *)outer$ {
  this$0_ = outer$;
  return [super initWithBoolean:outer$->leftToRight_];
}

- (void)paintWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                             withFloat:(float)x
                             withFloat:(float)y
                             withFloat:(float)width
                             withFloat:(float)height {
  vertical_ = this$0_->leftToRight_;
  [super paintWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:width withFloat:height];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaSplitPanePanel" },
  };
  static J2ObjcClassInfo _RAREaSplitPanePanel_SplitPaneGripperIcon = { "SplitPaneGripperIcon", "com.appnativa.rare.ui", "aSplitPanePanel", 0x4, 0, NULL, 1, fields, 0, NULL};
  return &_RAREaSplitPanePanel_SplitPaneGripperIcon;
}

@end
