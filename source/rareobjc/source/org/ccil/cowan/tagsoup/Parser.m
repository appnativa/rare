//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple-android-htmllabel/org/ccil/cowan/tagsoup/Parser.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "org/ccil/cowan/tagsoup/AttributesImpl.h"
#include "org/ccil/cowan/tagsoup/AutoDetector.h"
#include "org/ccil/cowan/tagsoup/Element.h"
#include "org/ccil/cowan/tagsoup/ElementType.h"
#include "org/ccil/cowan/tagsoup/HTMLScanner.h"
#include "org/ccil/cowan/tagsoup/HTMLSchema.h"
#include "org/ccil/cowan/tagsoup/Parser.h"
#include "org/ccil/cowan/tagsoup/Scanner.h"
#include "org/ccil/cowan/tagsoup/Schema.h"
#include "org/xml/sax/Attributes.h"
#include "org/xml/sax/ContentHandler.h"
#include "org/xml/sax/DTDHandler.h"
#include "org/xml/sax/EntityResolver.h"
#include "org/xml/sax/ErrorHandler.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/Locator.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/SAXNotRecognizedException.h"
#include "org/xml/sax/SAXNotSupportedException.h"
#include "org/xml/sax/ext/LexicalHandler.h"

@implementation RAREParser

static BOOL RAREParser_DEFAULT_NAMESPACES_ = YES;
static BOOL RAREParser_DEFAULT_IGNORE_BOGONS_ = NO;
static BOOL RAREParser_DEFAULT_BOGONS_EMPTY_ = NO;
static BOOL RAREParser_DEFAULT_ROOT_BOGONS_ = YES;
static BOOL RAREParser_DEFAULT_DEFAULT_ATTRIBUTES_ = YES;
static BOOL RAREParser_DEFAULT_TRANSLATE_COLONS_ = NO;
static BOOL RAREParser_DEFAULT_RESTART_ELEMENTS_ = YES;
static BOOL RAREParser_DEFAULT_IGNORABLE_WHITESPACE_ = NO;
static BOOL RAREParser_DEFAULT_CDATA_ELEMENTS_ = YES;
static NSString * RAREParser_namespacesFeature_ = @"http://xml.org/sax/features/namespaces";
static NSString * RAREParser_namespacePrefixesFeature_ = @"http://xml.org/sax/features/namespace-prefixes";
static NSString * RAREParser_externalGeneralEntitiesFeature_ = @"http://xml.org/sax/features/external-general-entities";
static NSString * RAREParser_externalParameterEntitiesFeature_ = @"http://xml.org/sax/features/external-parameter-entities";
static NSString * RAREParser_isStandaloneFeature_ = @"http://xml.org/sax/features/is-standalone";
static NSString * RAREParser_lexicalHandlerParameterEntitiesFeature_ = @"http://xml.org/sax/features/lexical-handler/parameter-entities";
static NSString * RAREParser_resolveDTDURIsFeature_ = @"http://xml.org/sax/features/resolve-dtd-uris";
static NSString * RAREParser_stringInterningFeature_ = @"http://xml.org/sax/features/string-interning";
static NSString * RAREParser_useAttributes2Feature_ = @"http://xml.org/sax/features/use-attributes2";
static NSString * RAREParser_useLocator2Feature_ = @"http://xml.org/sax/features/use-locator2";
static NSString * RAREParser_useEntityResolver2Feature_ = @"http://xml.org/sax/features/use-entity-resolver2";
static NSString * RAREParser_validationFeature_ = @"http://xml.org/sax/features/validation";
static NSString * RAREParser_unicodeNormalizationCheckingFeature_ = @"http://xml.org/sax/features/unicode-normalization-checking";
static NSString * RAREParser_xmlnsURIsFeature_ = @"http://xml.org/sax/features/xmlns-uris";
static NSString * RAREParser_XML11Feature_ = @"http://xml.org/sax/features/xml-1.1";
static NSString * RAREParser_ignoreBogonsFeature_ = @"http://www.ccil.org/~cowan/tagsoup/features/ignore-bogons";
static NSString * RAREParser_bogonsEmptyFeature_ = @"http://www.ccil.org/~cowan/tagsoup/features/bogons-empty";
static NSString * RAREParser_rootBogonsFeature_ = @"http://www.ccil.org/~cowan/tagsoup/features/root-bogons";
static NSString * RAREParser_defaultAttributesFeature_ = @"http://www.ccil.org/~cowan/tagsoup/features/default-attributes";
static NSString * RAREParser_translateColonsFeature_ = @"http://www.ccil.org/~cowan/tagsoup/features/translate-colons";
static NSString * RAREParser_restartElementsFeature_ = @"http://www.ccil.org/~cowan/tagsoup/features/restart-elements";
static NSString * RAREParser_ignorableWhitespaceFeature_ = @"http://www.ccil.org/~cowan/tagsoup/features/ignorable-whitespace";
static NSString * RAREParser_CDATAElementsFeature_ = @"http://www.ccil.org/~cowan/tagsoup/features/cdata-elements";
static NSString * RAREParser_lexicalHandlerProperty_ = @"http://xml.org/sax/properties/lexical-handler";
static NSString * RAREParser_scannerProperty_ = @"http://www.ccil.org/~cowan/tagsoup/properties/scanner";
static NSString * RAREParser_schemaProperty_ = @"http://www.ccil.org/~cowan/tagsoup/properties/schema";
static NSString * RAREParser_autoDetectorProperty_ = @"http://www.ccil.org/~cowan/tagsoup/properties/auto-detector";
static IOSCharArray * RAREParser_etagchars_;
static NSString * RAREParser_legal_ = @"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-'()+,./:=?;!*#@$_%";

+ (BOOL)DEFAULT_NAMESPACES {
  return RAREParser_DEFAULT_NAMESPACES_;
}

+ (BOOL *)DEFAULT_NAMESPACESRef {
  return &RAREParser_DEFAULT_NAMESPACES_;
}

+ (BOOL)DEFAULT_IGNORE_BOGONS {
  return RAREParser_DEFAULT_IGNORE_BOGONS_;
}

+ (BOOL *)DEFAULT_IGNORE_BOGONSRef {
  return &RAREParser_DEFAULT_IGNORE_BOGONS_;
}

+ (BOOL)DEFAULT_BOGONS_EMPTY {
  return RAREParser_DEFAULT_BOGONS_EMPTY_;
}

+ (BOOL *)DEFAULT_BOGONS_EMPTYRef {
  return &RAREParser_DEFAULT_BOGONS_EMPTY_;
}

+ (BOOL)DEFAULT_ROOT_BOGONS {
  return RAREParser_DEFAULT_ROOT_BOGONS_;
}

+ (BOOL *)DEFAULT_ROOT_BOGONSRef {
  return &RAREParser_DEFAULT_ROOT_BOGONS_;
}

+ (BOOL)DEFAULT_DEFAULT_ATTRIBUTES {
  return RAREParser_DEFAULT_DEFAULT_ATTRIBUTES_;
}

+ (BOOL *)DEFAULT_DEFAULT_ATTRIBUTESRef {
  return &RAREParser_DEFAULT_DEFAULT_ATTRIBUTES_;
}

+ (BOOL)DEFAULT_TRANSLATE_COLONS {
  return RAREParser_DEFAULT_TRANSLATE_COLONS_;
}

+ (BOOL *)DEFAULT_TRANSLATE_COLONSRef {
  return &RAREParser_DEFAULT_TRANSLATE_COLONS_;
}

+ (BOOL)DEFAULT_RESTART_ELEMENTS {
  return RAREParser_DEFAULT_RESTART_ELEMENTS_;
}

+ (BOOL *)DEFAULT_RESTART_ELEMENTSRef {
  return &RAREParser_DEFAULT_RESTART_ELEMENTS_;
}

+ (BOOL)DEFAULT_IGNORABLE_WHITESPACE {
  return RAREParser_DEFAULT_IGNORABLE_WHITESPACE_;
}

+ (BOOL *)DEFAULT_IGNORABLE_WHITESPACERef {
  return &RAREParser_DEFAULT_IGNORABLE_WHITESPACE_;
}

+ (BOOL)DEFAULT_CDATA_ELEMENTS {
  return RAREParser_DEFAULT_CDATA_ELEMENTS_;
}

+ (BOOL *)DEFAULT_CDATA_ELEMENTSRef {
  return &RAREParser_DEFAULT_CDATA_ELEMENTS_;
}

+ (NSString *)namespacesFeature {
  return RAREParser_namespacesFeature_;
}

+ (NSString *)namespacePrefixesFeature {
  return RAREParser_namespacePrefixesFeature_;
}

+ (NSString *)externalGeneralEntitiesFeature {
  return RAREParser_externalGeneralEntitiesFeature_;
}

+ (NSString *)externalParameterEntitiesFeature {
  return RAREParser_externalParameterEntitiesFeature_;
}

+ (NSString *)isStandaloneFeature {
  return RAREParser_isStandaloneFeature_;
}

+ (NSString *)lexicalHandlerParameterEntitiesFeature {
  return RAREParser_lexicalHandlerParameterEntitiesFeature_;
}

+ (NSString *)resolveDTDURIsFeature {
  return RAREParser_resolveDTDURIsFeature_;
}

+ (NSString *)stringInterningFeature {
  return RAREParser_stringInterningFeature_;
}

+ (NSString *)useAttributes2Feature {
  return RAREParser_useAttributes2Feature_;
}

+ (NSString *)useLocator2Feature {
  return RAREParser_useLocator2Feature_;
}

+ (NSString *)useEntityResolver2Feature {
  return RAREParser_useEntityResolver2Feature_;
}

+ (NSString *)validationFeature {
  return RAREParser_validationFeature_;
}

+ (NSString *)unicodeNormalizationCheckingFeature {
  return RAREParser_unicodeNormalizationCheckingFeature_;
}

+ (NSString *)xmlnsURIsFeature {
  return RAREParser_xmlnsURIsFeature_;
}

+ (NSString *)XML11Feature {
  return RAREParser_XML11Feature_;
}

+ (NSString *)ignoreBogonsFeature {
  return RAREParser_ignoreBogonsFeature_;
}

+ (NSString *)bogonsEmptyFeature {
  return RAREParser_bogonsEmptyFeature_;
}

+ (NSString *)rootBogonsFeature {
  return RAREParser_rootBogonsFeature_;
}

+ (NSString *)defaultAttributesFeature {
  return RAREParser_defaultAttributesFeature_;
}

+ (NSString *)translateColonsFeature {
  return RAREParser_translateColonsFeature_;
}

+ (NSString *)restartElementsFeature {
  return RAREParser_restartElementsFeature_;
}

+ (NSString *)ignorableWhitespaceFeature {
  return RAREParser_ignorableWhitespaceFeature_;
}

+ (NSString *)CDATAElementsFeature {
  return RAREParser_CDATAElementsFeature_;
}

+ (NSString *)lexicalHandlerProperty {
  return RAREParser_lexicalHandlerProperty_;
}

+ (NSString *)scannerProperty {
  return RAREParser_scannerProperty_;
}

+ (NSString *)schemaProperty {
  return RAREParser_schemaProperty_;
}

+ (NSString *)autoDetectorProperty {
  return RAREParser_autoDetectorProperty_;
}

+ (IOSCharArray *)etagchars {
  return RAREParser_etagchars_;
}

+ (void)setEtagchars:(IOSCharArray *)etagchars {
  RAREParser_etagchars_ = etagchars;
}

+ (NSString *)legal {
  return RAREParser_legal_;
}

+ (void)setLegal:(NSString *)legal {
  RAREParser_legal_ = legal;
}

+ (JavaLangBoolean *)truthValueWithBoolean:(BOOL)b {
  return b ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE];
}

- (BOOL)getFeatureWithNSString:(NSString *)name {
  JavaLangBoolean *b = (JavaLangBoolean *) check_class_cast([((JavaUtilHashMap *) nil_chk(theFeatures_)) getWithId:name], [JavaLangBoolean class]);
  if (b == nil) {
    @throw [[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown feature %@", name]];
  }
  return [((JavaLangBoolean *) nil_chk(b)) booleanValue];
}

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(BOOL)value {
  JavaLangBoolean *b = (JavaLangBoolean *) check_class_cast([((JavaUtilHashMap *) nil_chk(theFeatures_)) getWithId:name], [JavaLangBoolean class]);
  if (b == nil) {
    @throw [[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown feature %@", name]];
  }
  if (value) (void) [theFeatures_ putWithId:name withId:[JavaLangBoolean getTRUE]];
  else (void) [theFeatures_ putWithId:name withId:[JavaLangBoolean getFALSE]];
  if ([((NSString *) nil_chk(name)) isEqual:RAREParser_namespacesFeature_]) namespaces_ = value;
  else if ([name isEqual:RAREParser_ignoreBogonsFeature_]) ignoreBogons_ = value;
  else if ([name isEqual:RAREParser_bogonsEmptyFeature_]) bogonsEmpty_ = value;
  else if ([name isEqual:RAREParser_rootBogonsFeature_]) rootBogons_ = value;
  else if ([name isEqual:RAREParser_defaultAttributesFeature_]) defaultAttributes_ = value;
  else if ([name isEqual:RAREParser_translateColonsFeature_]) translateColons_ = value;
  else if ([name isEqual:RAREParser_restartElementsFeature_]) restartElements_ = value;
  else if ([name isEqual:RAREParser_ignorableWhitespaceFeature_]) ignorableWhitespace_ = value;
  else if ([name isEqual:RAREParser_CDATAElementsFeature_]) CDATAElements_ = value;
}

- (id)getPropertyWithNSString:(NSString *)name {
  if ([((NSString *) nil_chk(name)) isEqual:RAREParser_lexicalHandlerProperty_]) {
    return theLexicalHandler_ == self ? nil : theLexicalHandler_;
  }
  else if ([name isEqual:RAREParser_scannerProperty_]) {
    return theScanner_;
  }
  else if ([name isEqual:RAREParser_schemaProperty_]) {
    return theSchema_;
  }
  else if ([name isEqual:RAREParser_autoDetectorProperty_]) {
    return theAutoDetector_;
  }
  else {
    @throw [[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown property %@", name]];
  }
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:RAREParser_lexicalHandlerProperty_]) {
    if (value == nil) {
      theLexicalHandler_ = self;
    }
    else if ([value conformsToProtocol: @protocol(OrgXmlSaxExtLexicalHandler)]) {
      theLexicalHandler_ = (id<OrgXmlSaxExtLexicalHandler>) check_protocol_cast(value, @protocol(OrgXmlSaxExtLexicalHandler));
    }
    else {
      @throw [[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:@"Your lexical handler is not a LexicalHandler"];
    }
  }
  else if ([name isEqual:RAREParser_scannerProperty_]) {
    if ([value conformsToProtocol: @protocol(RAREScanner)]) {
      theScanner_ = (id<RAREScanner>) check_protocol_cast(value, @protocol(RAREScanner));
    }
    else {
      @throw [[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:@"Your scanner is not a Scanner"];
    }
  }
  else if ([name isEqual:RAREParser_schemaProperty_]) {
    if ([value isKindOfClass:[RARESchema class]]) {
      theSchema_ = (RARESchema *) check_class_cast(value, [RARESchema class]);
    }
    else {
      @throw [[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:@"Your schema is not a Schema"];
    }
  }
  else if ([name isEqual:RAREParser_autoDetectorProperty_]) {
    if ([value conformsToProtocol: @protocol(RAREAutoDetector)]) {
      theAutoDetector_ = (id<RAREAutoDetector>) check_protocol_cast(value, @protocol(RAREAutoDetector));
    }
    else {
      @throw [[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:@"Your auto-detector is not an AutoDetector"];
    }
  }
  else {
    @throw [[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown property %@", name]];
  }
}

- (void)setEntityResolverWithOrgXmlSaxEntityResolver:(id<OrgXmlSaxEntityResolver>)resolver {
  theEntityResolver_ = (resolver == nil) ? self : ((id) resolver);
}

- (id<OrgXmlSaxEntityResolver>)getEntityResolver {
  return (theEntityResolver_ == self) ? nil : theEntityResolver_;
}

- (void)setDTDHandlerWithOrgXmlSaxDTDHandler:(id<OrgXmlSaxDTDHandler>)handler {
  theDTDHandler_ = (handler == nil) ? self : ((id) handler);
}

- (id<OrgXmlSaxDTDHandler>)getDTDHandler {
  return (theDTDHandler_ == self) ? nil : theDTDHandler_;
}

- (void)setContentHandlerWithOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)handler {
  theContentHandler_ = (handler == nil) ? self : ((id) handler);
}

- (id<OrgXmlSaxContentHandler>)getContentHandler {
  return (theContentHandler_ == self) ? nil : theContentHandler_;
}

- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)handler {
  theErrorHandler_ = (handler == nil) ? self : ((id) handler);
}

- (id<OrgXmlSaxErrorHandler>)getErrorHandler {
  return (theErrorHandler_ == self) ? nil : theErrorHandler_;
}

- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)input {
  [self setup];
  JavaIoReader *r = [self getReaderWithOrgXmlSaxInputSource:input];
  [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) startDocument];
  [((id<RAREScanner>) nil_chk(theScanner_)) resetDocumentLocatorWithNSString:[((OrgXmlSaxInputSource *) nil_chk(input)) getPublicId] withNSString:[input getSystemId]];
  if ([(id) theScanner_ conformsToProtocol: @protocol(OrgXmlSaxLocator)]) {
    [theContentHandler_ setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>) check_protocol_cast(theScanner_, @protocol(OrgXmlSaxLocator))];
  }
  if (!([((NSString *) nil_chk([((RARESchema *) nil_chk(theSchema_)) getURI])) isEqual:@""])) [theContentHandler_ startPrefixMappingWithNSString:[theSchema_ getPrefix] withNSString:[theSchema_ getURI]];
  [theScanner_ scanWithJavaIoReader:r withRAREScanHandler:self];
}

- (void)parseWithNSString:(NSString *)systemid {
  [self parseWithOrgXmlSaxInputSource:[[OrgXmlSaxInputSource alloc] initWithNSString:systemid]];
}

- (void)setup {
  if (theSchema_ == nil) theSchema_ = [[RAREHTMLSchema alloc] init];
  if (theScanner_ == nil) theScanner_ = [[RAREHTMLScanner alloc] init];
  if (theAutoDetector_ == nil) {
    theAutoDetector_ = [[RAREParser_$1 alloc] init];
  }
  theStack_ = [[RAREElement alloc] initWithRAREElementType:[((RARESchema *) nil_chk(theSchema_)) getElementTypeWithNSString:@"<root>"] withBoolean:defaultAttributes_];
  thePCDATA_ = [[RAREElement alloc] initWithRAREElementType:[theSchema_ getElementTypeWithNSString:@"<pcdata>"] withBoolean:defaultAttributes_];
  theNewElement_ = nil;
  theAttributeName_ = nil;
  thePITarget_ = nil;
  theSaved_ = nil;
  theEntity_ = 0;
  virginStack_ = YES;
  theDoctypeName_ = theDoctypePublicId_ = theDoctypeSystemId_ = nil;
}

- (JavaIoReader *)getReaderWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)s {
  JavaIoReader *r = [((OrgXmlSaxInputSource *) nil_chk(s)) getCharacterStream];
  JavaIoInputStream *i = [s getByteStream];
  NSString *encoding = [s getEncoding];
  NSString *publicid = [s getPublicId];
  NSString *systemid = [s getSystemId];
  if (r == nil) {
    if (i == nil) i = [self getInputStreamWithNSString:publicid withNSString:systemid];
    if (encoding == nil) {
      r = [((id<RAREAutoDetector>) nil_chk(theAutoDetector_)) autoDetectingReaderWithJavaIoInputStream:i];
    }
    else {
      @try {
        r = [[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:i withNSString:encoding];
      }
      @catch (JavaIoUnsupportedEncodingException *e) {
        r = [[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:i];
      }
    }
  }
  return r;
}

- (JavaIoInputStream *)getInputStreamWithNSString:(NSString *)publicid
                                     withNSString:(NSString *)systemid {
  JavaNetURL *basis = [[JavaNetURL alloc] initWithNSString:@"file" withNSString:@"" withNSString:[NSString stringWithFormat:@"%@/.", [JavaLangSystem getPropertyWithNSString:@"user.dir"]]];
  JavaNetURL *url = [[JavaNetURL alloc] initWithJavaNetURL:basis withNSString:systemid];
  JavaNetURLConnection *c = [url openConnection];
  return [((JavaNetURLConnection *) nil_chk(c)) getInputStream];
}

- (void)adupWithCharArray:(IOSCharArray *)buff
                  withInt:(int)offset
                  withInt:(int)length {
  if (theNewElement_ == nil || theAttributeName_ == nil) return;
  [((RAREElement *) nil_chk(theNewElement_)) setAttributeWithNSString:theAttributeName_ withNSString:nil withNSString:theAttributeName_];
  theAttributeName_ = nil;
}

- (void)anameWithCharArray:(IOSCharArray *)buff
                   withInt:(int)offset
                   withInt:(int)length {
  if (theNewElement_ == nil) return;
  theAttributeName_ = [((NSString *) nil_chk([self makeNameWithCharArray:buff withInt:offset withInt:length])) lowercaseString];
}

- (void)avalWithCharArray:(IOSCharArray *)buff
                  withInt:(int)offset
                  withInt:(int)length {
  if (theNewElement_ == nil || theAttributeName_ == nil) return;
  NSString *value = [NSString stringWithCharacters:buff offset:offset length:length];
  value = [self expandEntitiesWithNSString:value];
  [((RAREElement *) nil_chk(theNewElement_)) setAttributeWithNSString:theAttributeName_ withNSString:nil withNSString:value];
  theAttributeName_ = nil;
}

- (NSString *)expandEntitiesWithNSString:(NSString *)src {
  int refStart = -1;
  int len = [((NSString *) nil_chk(src)) sequenceLength];
  IOSCharArray *dst = [IOSCharArray arrayWithLength:len];
  int dstlen = 0;
  for (int i = 0; i < len; i++) {
    unichar ch = [src charAtWithInt:i];
    (*IOSCharArray_GetRef(dst, dstlen++)) = ch;
    if (ch == '&' && refStart == -1) {
      refStart = dstlen;
    }
    else if (refStart == -1) {
    }
    else if ([JavaLangCharacter isLetterWithChar:ch] || [JavaLangCharacter isDigitWithChar:ch] || ch == '#') {
    }
    else if (ch == ';') {
      int ent = [self lookupEntityWithCharArray:dst withInt:refStart withInt:dstlen - refStart - 1];
      if (ent > (int) 0xFFFF) {
        ent -= (int) 0x10000;
        (*IOSCharArray_GetRef(dst, refStart - 1)) = (unichar) ((ent >> 10) + (int) 0xD800);
        (*IOSCharArray_GetRef(dst, refStart)) = (unichar) ((ent & (int) 0x3FF) + (int) 0xDC00);
        dstlen = refStart + 1;
      }
      else if (ent != 0) {
        (*IOSCharArray_GetRef(dst, refStart - 1)) = (unichar) ent;
        dstlen = refStart;
      }
      refStart = -1;
    }
    else {
      refStart = -1;
    }
  }
  return [NSString stringWithCharacters:dst offset:0 length:dstlen];
}

- (void)entityWithCharArray:(IOSCharArray *)buff
                    withInt:(int)offset
                    withInt:(int)length {
  theEntity_ = [self lookupEntityWithCharArray:buff withInt:offset withInt:length];
}

- (int)lookupEntityWithCharArray:(IOSCharArray *)buff
                         withInt:(int)offset
                         withInt:(int)length {
  int result = 0;
  if (length < 1) return result;
  if (IOSCharArray_Get(nil_chk(buff), offset) == '#') {
    if (length > 1 && (IOSCharArray_Get(buff, offset + 1) == 'x' || IOSCharArray_Get(buff, offset + 1) == 'X')) {
      @try {
        return [JavaLangInteger parseIntWithNSString:[NSString stringWithCharacters:buff offset:offset + 2 length:length - 2] withInt:16];
      }
      @catch (JavaLangNumberFormatException *e) {
        return 0;
      }
    }
    @try {
      return [JavaLangInteger parseIntWithNSString:[NSString stringWithCharacters:buff offset:offset + 1 length:length - 1] withInt:10];
    }
    @catch (JavaLangNumberFormatException *e) {
      return 0;
    }
  }
  return [((RARESchema *) nil_chk(theSchema_)) getEntityWithNSString:[NSString stringWithCharacters:buff offset:offset length:length]];
}

- (void)eofWithCharArray:(IOSCharArray *)buff
                 withInt:(int)offset
                 withInt:(int)length {
  if (virginStack_) [self rectifyWithRAREElement:thePCDATA_];
  while ([((RAREElement *) nil_chk(theStack_)) next] != nil) {
    [self pop];
  }
  if (!([((NSString *) nil_chk([((RARESchema *) nil_chk(theSchema_)) getURI])) isEqual:@""])) [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) endPrefixMappingWithNSString:[theSchema_ getPrefix]];
  [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) endDocument];
}

- (void)etagWithCharArray:(IOSCharArray *)buff
                  withInt:(int)offset
                  withInt:(int)length {
  if ([self etag_cdataWithCharArray:buff withInt:offset withInt:length]) return;
  [self etag_basicWithCharArray:buff withInt:offset withInt:length];
}

- (BOOL)etag_cdataWithCharArray:(IOSCharArray *)buff
                        withInt:(int)offset
                        withInt:(int)length {
  NSString *currentName = [((RAREElement *) nil_chk(theStack_)) name];
  if (CDATAElements_ && ([theStack_ flags] & RARESchema_F_CDATA) != 0) {
    BOOL realTag = (length == [((NSString *) nil_chk(currentName)) sequenceLength]);
    if (realTag) {
      for (int i = 0; i < length; i++) {
        if ([JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(nil_chk(buff), offset + i)] != [JavaLangCharacter toLowerCaseWithChar:[currentName charAtWithInt:i]]) {
          realTag = NO;
          break;
        }
      }
    }
    if (!realTag) {
      [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) charactersWithCharArray:RAREParser_etagchars_ withInt:0 withInt:2];
      [theContentHandler_ charactersWithCharArray:buff withInt:offset withInt:length];
      [theContentHandler_ charactersWithCharArray:RAREParser_etagchars_ withInt:2 withInt:1];
      [((id<RAREScanner>) nil_chk(theScanner_)) startCDATA];
      return YES;
    }
  }
  return NO;
}

- (void)etag_basicWithCharArray:(IOSCharArray *)buff
                        withInt:(int)offset
                        withInt:(int)length {
  theNewElement_ = nil;
  NSString *name;
  if (length != 0) {
    name = [self makeNameWithCharArray:buff withInt:offset withInt:length];
    RAREElementType *type = [((RARESchema *) nil_chk(theSchema_)) getElementTypeWithNSString:name];
    if (type == nil) return;
    name = [((RAREElementType *) nil_chk(type)) name];
  }
  else {
    name = [((RAREElement *) nil_chk(theStack_)) name];
  }
  RAREElement *sp;
  BOOL inNoforce = NO;
  for (sp = theStack_; sp != nil; sp = [sp next]) {
    if ([((NSString *) nil_chk([((RAREElement *) nil_chk(sp)) name])) isEqual:name]) break;
    if (([sp flags] & RARESchema_F_NOFORCE) != 0) inNoforce = YES;
  }
  if (sp == nil) return;
  if ([((RAREElement *) nil_chk(sp)) next] == nil || [((RAREElement *) nil_chk([sp next])) next] == nil) return;
  if (inNoforce) {
    [sp preclose];
  }
  else {
    while (theStack_ != sp) {
      [self restartablyPop];
    }
    [self pop];
  }
  while ([((RAREElement *) nil_chk(theStack_)) isPreclosed]) {
    [self pop];
  }
  [self restartWithRAREElement:nil];
}

- (void)restartWithRAREElement:(RAREElement *)e {
  while (theSaved_ != nil && [((RAREElement *) nil_chk(theStack_)) canContainWithRAREElement:theSaved_] && (e == nil || [theSaved_ canContainWithRAREElement:e])) {
    RAREElement *next = [((RAREElement *) nil_chk(theSaved_)) next];
    [self pushWithRAREElement:theSaved_];
    theSaved_ = next;
  }
}

- (void)pop {
  if (theStack_ == nil) return;
  NSString *name = [((RAREElement *) nil_chk(theStack_)) name];
  NSString *localName = [theStack_ localName];
  NSString *namespace_ = [theStack_ namespace__];
  NSString *prefix = [self prefixOfWithNSString:name];
  if (!namespaces_) namespace_ = localName = @"";
  [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) endElementWithNSString:namespace_ withNSString:localName withNSString:name];
  if ([self foreignWithNSString:prefix withNSString:namespace_]) {
    [theContentHandler_ endPrefixMappingWithNSString:prefix];
  }
  id<OrgXmlSaxAttributes> atts = [theStack_ atts];
  for (int i = [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength] - 1; i >= 0; i--) {
    NSString *attNamespace = [atts getURIWithInt:i];
    NSString *attPrefix = [self prefixOfWithNSString:[atts getQNameWithInt:i]];
    if ([self foreignWithNSString:attPrefix withNSString:attNamespace]) {
      [theContentHandler_ endPrefixMappingWithNSString:attPrefix];
    }
  }
  theStack_ = [theStack_ next];
}

- (void)restartablyPop {
  RAREElement *popped = theStack_;
  [self pop];
  if (restartElements_ && ([((RAREElement *) nil_chk(popped)) flags] & RARESchema_F_RESTART) != 0) {
    [popped anonymize];
    [popped setNextWithRAREElement:theSaved_];
    theSaved_ = popped;
  }
}

- (void)pushWithRAREElement:(RAREElement *)e {
  NSString *name = [((RAREElement *) nil_chk(e)) name];
  NSString *localName = [e localName];
  NSString *namespace_ = [e namespace__];
  NSString *prefix = [self prefixOfWithNSString:name];
  [e clean];
  if (!namespaces_) namespace_ = localName = @"";
  if (virginStack_ && [((NSString *) nil_chk(localName)) equalsIgnoreCase:theDoctypeName_]) {
    @try {
      (void) [((id<OrgXmlSaxEntityResolver>) nil_chk(theEntityResolver_)) resolveEntityWithNSString:theDoctypePublicId_ withNSString:theDoctypeSystemId_];
    }
    @catch (JavaIoIOException *ew) {
    }
  }
  if ([self foreignWithNSString:prefix withNSString:namespace_]) {
    [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) startPrefixMappingWithNSString:prefix withNSString:namespace_];
  }
  id<OrgXmlSaxAttributes> atts = [e atts];
  int len = [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength];
  for (int i = 0; i < len; i++) {
    NSString *attNamespace = [atts getURIWithInt:i];
    NSString *attPrefix = [self prefixOfWithNSString:[atts getQNameWithInt:i]];
    if ([self foreignWithNSString:attPrefix withNSString:attNamespace]) {
      [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) startPrefixMappingWithNSString:attPrefix withNSString:attNamespace];
    }
  }
  [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) startElementWithNSString:namespace_ withNSString:localName withNSString:name withOrgXmlSaxAttributes:[e atts]];
  [e setNextWithRAREElement:theStack_];
  theStack_ = e;
  virginStack_ = NO;
  if (CDATAElements_ && ([theStack_ flags] & RARESchema_F_CDATA) != 0) {
    [((id<RAREScanner>) nil_chk(theScanner_)) startCDATA];
  }
}

- (NSString *)prefixOfWithNSString:(NSString *)name {
  int i = [((NSString *) nil_chk(name)) indexOf:':'];
  NSString *prefix = @"";
  if (i != -1) prefix = [name substring:0 endIndex:i];
  return prefix;
}

- (BOOL)foreignWithNSString:(NSString *)prefix
               withNSString:(NSString *)namespace_ {
  BOOL foreign = !([((NSString *) nil_chk(prefix)) isEqual:@""] || [((NSString *) nil_chk(namespace_)) isEqual:@""] || [namespace_ isEqual:[((RARESchema *) nil_chk(theSchema_)) getURI]]);
  return foreign;
}

- (void)declWithCharArray:(IOSCharArray *)buff
                  withInt:(int)offset
                  withInt:(int)length {
  NSString *s = [NSString stringWithCharacters:buff offset:offset length:length];
  NSString *name = nil;
  NSString *systemid = nil;
  NSString *publicid = nil;
  IOSObjectArray *v = [RAREParser splitWithNSString:s];
  if ((int) [((IOSObjectArray *) nil_chk(v)) count] > 0 && [@"DOCTYPE" equalsIgnoreCase:IOSObjectArray_Get(v, 0)]) {
    if (theDoctypeIsPresent_) return;
    theDoctypeIsPresent_ = YES;
    if ((int) [v count] > 1) {
      name = IOSObjectArray_Get(v, 1);
      if ((int) [v count] > 3 && [@"SYSTEM" isEqual:IOSObjectArray_Get(v, 2)]) {
        systemid = IOSObjectArray_Get(v, 3);
      }
      else if ((int) [v count] > 3 && [@"PUBLIC" isEqual:IOSObjectArray_Get(v, 2)]) {
        publicid = IOSObjectArray_Get(v, 3);
        if ((int) [v count] > 4) {
          systemid = IOSObjectArray_Get(v, 4);
        }
        else {
          systemid = @"";
        }
      }
    }
  }
  publicid = [RAREParser trimquotesWithNSString:publicid];
  systemid = [RAREParser trimquotesWithNSString:systemid];
  if (name != nil) {
    publicid = [self cleanPublicidWithNSString:publicid];
    [((id<OrgXmlSaxExtLexicalHandler>) nil_chk(theLexicalHandler_)) startDTDWithNSString:name withNSString:publicid withNSString:systemid];
    [theLexicalHandler_ endDTD];
    theDoctypeName_ = name;
    theDoctypePublicId_ = publicid;
    if ([(id) theScanner_ conformsToProtocol: @protocol(OrgXmlSaxLocator)]) {
      theDoctypeSystemId_ = [((id<OrgXmlSaxLocator>) check_protocol_cast(theScanner_, @protocol(OrgXmlSaxLocator))) getSystemId];
      @try {
        theDoctypeSystemId_ = [((JavaNetURL *) [[JavaNetURL alloc] initWithJavaNetURL:[[JavaNetURL alloc] initWithNSString:theDoctypeSystemId_] withNSString:systemid]) description];
      }
      @catch (JavaLangException *e) {
      }
    }
  }
}

+ (NSString *)trimquotesWithNSString:(NSString *)inArg {
  if (inArg == nil) return inArg;
  int length = [((NSString *) nil_chk(inArg)) sequenceLength];
  if (length == 0) return inArg;
  unichar s = [inArg charAtWithInt:0];
  unichar e = [inArg charAtWithInt:length - 1];
  if (s == e && (s == '\'' || s == '"')) {
    inArg = [inArg substring:1 endIndex:[inArg sequenceLength] - 1];
  }
  return inArg;
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)val {
  val = [((NSString *) nil_chk(val)) trim];
  if ([((NSString *) nil_chk(val)) sequenceLength] == 0) {
    return [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]];
  }
  else {
    JavaUtilArrayList *l = [[JavaUtilArrayList alloc] init];
    int s = 0;
    int e = 0;
    BOOL sq = NO;
    BOOL dq = NO;
    unichar lastc = 0;
    int len = [val sequenceLength];
    for (e = 0; e < len; e++) {
      unichar c = [val charAtWithInt:e];
      if (!dq && c == '\'' && lastc != '\\') {
        sq = !sq;
        if (s < 0) s = e;
      }
      else if (!sq && c == '"' && lastc != '\\') {
        dq = !dq;
        if (s < 0) s = e;
      }
      else if (!sq && !dq) {
        if ([JavaLangCharacter isWhitespaceWithChar:c]) {
          if (s >= 0) [l addWithId:[val substring:s endIndex:e]];
          s = -1;
        }
        else if (s < 0 && c != ' ') {
          s = e;
        }
      }
      lastc = c;
    }
    [l addWithId:[val substring:s endIndex:e]];
    return (IOSObjectArray *) check_class_cast([l toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]], [IOSObjectArray class]);
  }
}

- (NSString *)cleanPublicidWithNSString:(NSString *)src {
  if (src == nil) return nil;
  int len = [((NSString *) nil_chk(src)) sequenceLength];
  JavaLangStringBuffer *dst = [[JavaLangStringBuffer alloc] initWithInt:len];
  BOOL suppressSpace = YES;
  for (int i = 0; i < len; i++) {
    unichar ch = [src charAtWithInt:i];
    if ([((NSString *) nil_chk(RAREParser_legal_)) indexOf:ch] != -1) {
      (void) [dst appendWithChar:ch];
      suppressSpace = NO;
    }
    else if (suppressSpace) {
      ;
    }
    else {
      (void) [dst appendWithChar:' '];
      suppressSpace = YES;
    }
  }
  return [((NSString *) nil_chk([dst description])) trim];
}

- (void)giWithCharArray:(IOSCharArray *)buff
                withInt:(int)offset
                withInt:(int)length {
  if (theNewElement_ != nil) return;
  NSString *name = [self makeNameWithCharArray:buff withInt:offset withInt:length];
  if (name == nil) return;
  RAREElementType *type = [((RARESchema *) nil_chk(theSchema_)) getElementTypeWithNSString:name];
  if (type == nil) {
    if (ignoreBogons_) return;
    int bogonModel = bogonsEmpty_ ? RARESchema_M_EMPTY : RARESchema_M_ANY;
    int bogonMemberOf = rootBogons_ ? RARESchema_M_ANY : (RARESchema_M_ANY & ~RARESchema_M_ROOT);
    [theSchema_ elementTypeWithNSString:name withInt:bogonModel withInt:bogonMemberOf withInt:0];
    if (!rootBogons_) [theSchema_ parentWithNSString:name withNSString:[((RAREElementType *) nil_chk([theSchema_ rootElementType])) name]];
    type = [theSchema_ getElementTypeWithNSString:name];
  }
  theNewElement_ = [[RAREElement alloc] initWithRAREElementType:type withBoolean:defaultAttributes_];
}

- (void)cdsectWithCharArray:(IOSCharArray *)buff
                    withInt:(int)offset
                    withInt:(int)length {
  [((id<OrgXmlSaxExtLexicalHandler>) nil_chk(theLexicalHandler_)) startCDATA];
  [self pcdataWithCharArray:buff withInt:offset withInt:length];
  [theLexicalHandler_ endCDATA];
}

- (void)pcdataWithCharArray:(IOSCharArray *)buff
                    withInt:(int)offset
                    withInt:(int)length {
  if (length == 0) return;
  BOOL allWhite = YES;
  for (int i = 0; i < length; i++) {
    if (![JavaLangCharacter isWhitespaceWithChar:IOSCharArray_Get(nil_chk(buff), offset + i)]) {
      allWhite = NO;
    }
  }
  if (allWhite && ![((RAREElement *) nil_chk(theStack_)) canContainWithRAREElement:thePCDATA_]) {
    if (ignorableWhitespace_) {
      [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) ignorableWhitespaceWithCharArray:buff withInt:offset withInt:length];
    }
  }
  else {
    [self rectifyWithRAREElement:thePCDATA_];
    [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) charactersWithCharArray:buff withInt:offset withInt:length];
  }
}

- (void)pitargetWithCharArray:(IOSCharArray *)buff
                      withInt:(int)offset
                      withInt:(int)length {
  if (theNewElement_ != nil) return;
  thePITarget_ = [((NSString *) nil_chk([self makeNameWithCharArray:buff withInt:offset withInt:length])) replace:':' withChar:'_'];
}

- (void)piWithCharArray:(IOSCharArray *)buff
                withInt:(int)offset
                withInt:(int)length {
  if (theNewElement_ != nil || thePITarget_ == nil) return;
  if ([@"xml" equalsIgnoreCase:thePITarget_]) return;
  if (length > 0 && IOSCharArray_Get(nil_chk(buff), length - 1) == '?') length--;
  [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) processingInstructionWithNSString:thePITarget_ withNSString:[NSString stringWithCharacters:buff offset:offset length:length]];
  thePITarget_ = nil;
}

- (void)stagcWithCharArray:(IOSCharArray *)buff
                   withInt:(int)offset
                   withInt:(int)length {
  if (theNewElement_ == nil) return;
  [self rectifyWithRAREElement:theNewElement_];
  if ([((RAREElement *) nil_chk(theStack_)) model] == RARESchema_M_EMPTY) {
    [self etag_basicWithCharArray:buff withInt:offset withInt:length];
  }
}

- (void)stageWithCharArray:(IOSCharArray *)buff
                   withInt:(int)offset
                   withInt:(int)length {
  if (theNewElement_ == nil) return;
  [self rectifyWithRAREElement:theNewElement_];
  [self etag_basicWithCharArray:buff withInt:offset withInt:length];
}

- (void)cmntWithCharArray:(IOSCharArray *)buff
                  withInt:(int)offset
                  withInt:(int)length {
  [((id<OrgXmlSaxExtLexicalHandler>) nil_chk(theLexicalHandler_)) commentWithCharArray:buff withInt:offset withInt:length];
}

- (void)rectifyWithRAREElement:(RAREElement *)e {
  RAREElement *sp;
  while (YES) {
    for (sp = theStack_; sp != nil; sp = [sp next]) {
      if ([((RAREElement *) nil_chk(sp)) canContainWithRAREElement:e]) break;
    }
    if (sp != nil) break;
    RAREElementType *parentType = [((RAREElement *) nil_chk(e)) parent];
    if (parentType == nil) break;
    RAREElement *parent = [[RAREElement alloc] initWithRAREElementType:parentType withBoolean:defaultAttributes_];
    [parent setNextWithRAREElement:e];
    e = parent;
  }
  if (sp == nil) return;
  while (theStack_ != sp) {
    if (theStack_ == nil || [theStack_ next] == nil || [((RAREElement *) nil_chk([theStack_ next])) next] == nil) break;
    [self restartablyPop];
  }
  while (e != nil) {
    RAREElement *nexte = [((RAREElement *) nil_chk(e)) next];
    if (![((NSString *) nil_chk([e name])) isEqual:@"<pcdata>"]) [self pushWithRAREElement:e];
    e = nexte;
    [self restartWithRAREElement:e];
  }
  theNewElement_ = nil;
}

- (int)getEntity {
  return theEntity_;
}

- (NSString *)makeNameWithCharArray:(IOSCharArray *)buff
                            withInt:(int)offset
                            withInt:(int)length {
  JavaLangStringBuffer *dst = [[JavaLangStringBuffer alloc] initWithInt:length + 2];
  BOOL seenColon = NO;
  BOOL start = YES;
  for (; length-- > 0; offset++) {
    unichar ch = IOSCharArray_Get(nil_chk(buff), offset);
    if ([JavaLangCharacter isLetterWithChar:ch] || ch == '_') {
      start = NO;
      (void) [dst appendWithChar:ch];
    }
    else if ([JavaLangCharacter isDigitWithChar:ch] || ch == '-' || ch == '.') {
      if (start) (void) [dst appendWithChar:'_'];
      start = NO;
      (void) [dst appendWithChar:ch];
    }
    else if (ch == ':' && !seenColon) {
      seenColon = YES;
      if (start) (void) [dst appendWithChar:'_'];
      start = YES;
      (void) [dst appendWithChar:translateColons_ ? '_' : ch];
    }
  }
  int dstLength = [dst sequenceLength];
  if (dstLength == 0 || [dst charAtWithInt:dstLength - 1] == ':') (void) [dst appendWithChar:'_'];
  return [((NSString *) nil_chk([dst description])) intern];
}

- (void)commentWithCharArray:(IOSCharArray *)ch
                     withInt:(int)start
                     withInt:(int)length {
}

- (void)endCDATA {
}

- (void)endDTD {
}

- (void)endEntityWithNSString:(NSString *)name {
}

- (void)startCDATA {
}

- (void)startDTDWithNSString:(NSString *)name
                withNSString:(NSString *)publicid
                withNSString:(NSString *)systemid {
}

- (void)startEntityWithNSString:(NSString *)name {
}

- (id)init {
  if (self = [super init]) {
    theContentHandler_ = self;
    theLexicalHandler_ = self;
    theDTDHandler_ = self;
    theErrorHandler_ = self;
    theEntityResolver_ = self;
    namespaces_ = RAREParser_DEFAULT_NAMESPACES_;
    ignoreBogons_ = RAREParser_DEFAULT_IGNORE_BOGONS_;
    bogonsEmpty_ = RAREParser_DEFAULT_BOGONS_EMPTY_;
    rootBogons_ = RAREParser_DEFAULT_ROOT_BOGONS_;
    defaultAttributes_ = RAREParser_DEFAULT_DEFAULT_ATTRIBUTES_;
    translateColons_ = RAREParser_DEFAULT_TRANSLATE_COLONS_;
    restartElements_ = RAREParser_DEFAULT_RESTART_ELEMENTS_;
    ignorableWhitespace_ = RAREParser_DEFAULT_IGNORABLE_WHITESPACE_;
    CDATAElements_ = RAREParser_DEFAULT_CDATA_ELEMENTS_;
    theFeatures_ = [[JavaUtilHashMap alloc] init];
    {
      (void) [theFeatures_ putWithId:RAREParser_namespacesFeature_ withId:[RAREParser truthValueWithBoolean:RAREParser_DEFAULT_NAMESPACES_]];
      (void) [theFeatures_ putWithId:RAREParser_namespacePrefixesFeature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_externalGeneralEntitiesFeature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_externalParameterEntitiesFeature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_isStandaloneFeature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_lexicalHandlerParameterEntitiesFeature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_resolveDTDURIsFeature_ withId:[JavaLangBoolean getTRUE]];
      (void) [theFeatures_ putWithId:RAREParser_stringInterningFeature_ withId:[JavaLangBoolean getTRUE]];
      (void) [theFeatures_ putWithId:RAREParser_useAttributes2Feature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_useLocator2Feature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_useEntityResolver2Feature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_validationFeature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_xmlnsURIsFeature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_xmlnsURIsFeature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_XML11Feature_ withId:[JavaLangBoolean getFALSE]];
      (void) [theFeatures_ putWithId:RAREParser_ignoreBogonsFeature_ withId:[RAREParser truthValueWithBoolean:RAREParser_DEFAULT_IGNORE_BOGONS_]];
      (void) [theFeatures_ putWithId:RAREParser_bogonsEmptyFeature_ withId:[RAREParser truthValueWithBoolean:RAREParser_DEFAULT_BOGONS_EMPTY_]];
      (void) [theFeatures_ putWithId:RAREParser_rootBogonsFeature_ withId:[RAREParser truthValueWithBoolean:RAREParser_DEFAULT_ROOT_BOGONS_]];
      (void) [theFeatures_ putWithId:RAREParser_defaultAttributesFeature_ withId:[RAREParser truthValueWithBoolean:RAREParser_DEFAULT_DEFAULT_ATTRIBUTES_]];
      (void) [theFeatures_ putWithId:RAREParser_translateColonsFeature_ withId:[RAREParser truthValueWithBoolean:RAREParser_DEFAULT_TRANSLATE_COLONS_]];
      (void) [theFeatures_ putWithId:RAREParser_restartElementsFeature_ withId:[RAREParser truthValueWithBoolean:RAREParser_DEFAULT_RESTART_ELEMENTS_]];
      (void) [theFeatures_ putWithId:RAREParser_ignorableWhitespaceFeature_ withId:[RAREParser truthValueWithBoolean:RAREParser_DEFAULT_IGNORABLE_WHITESPACE_]];
      (void) [theFeatures_ putWithId:RAREParser_CDATAElementsFeature_ withId:[RAREParser truthValueWithBoolean:RAREParser_DEFAULT_CDATA_ELEMENTS_]];
    }
    theNewElement_ = nil;
    theAttributeName_ = nil;
    theDoctypeIsPresent_ = NO;
    theDoctypePublicId_ = nil;
    theDoctypeSystemId_ = nil;
    theDoctypeName_ = nil;
    thePITarget_ = nil;
    theStack_ = nil;
    theSaved_ = nil;
    thePCDATA_ = nil;
    theEntity_ = 0;
    virginStack_ = YES;
  }
  return self;
}

+ (void)initialize {
  if (self == [RAREParser class]) {
    RAREParser_etagchars_ = [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '/', '>' } count:3];
  }
}

- (void)copyAllFieldsTo:(RAREParser *)other {
  [super copyAllFieldsTo:other];
  other->CDATAElements_ = CDATAElements_;
  other->bogonsEmpty_ = bogonsEmpty_;
  other->defaultAttributes_ = defaultAttributes_;
  other->ignorableWhitespace_ = ignorableWhitespace_;
  other->ignoreBogons_ = ignoreBogons_;
  other->namespaces_ = namespaces_;
  other->restartElements_ = restartElements_;
  other->rootBogons_ = rootBogons_;
  other->theAttributeName_ = theAttributeName_;
  other->theAutoDetector_ = theAutoDetector_;
  other->theContentHandler_ = theContentHandler_;
  other->theDTDHandler_ = theDTDHandler_;
  other->theDoctypeIsPresent_ = theDoctypeIsPresent_;
  other->theDoctypeName_ = theDoctypeName_;
  other->theDoctypePublicId_ = theDoctypePublicId_;
  other->theDoctypeSystemId_ = theDoctypeSystemId_;
  other->theEntity_ = theEntity_;
  other->theEntityResolver_ = theEntityResolver_;
  other->theErrorHandler_ = theErrorHandler_;
  other->theFeatures_ = theFeatures_;
  other->theLexicalHandler_ = theLexicalHandler_;
  other->theNewElement_ = theNewElement_;
  other->thePCDATA_ = thePCDATA_;
  other->thePITarget_ = thePITarget_;
  other->theSaved_ = theSaved_;
  other->theScanner_ = theScanner_;
  other->theSchema_ = theSchema_;
  other->theStack_ = theStack_;
  other->translateColons_ = translateColons_;
  other->virginStack_ = virginStack_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "truthValueWithBoolean:", NULL, "LJavaLangBoolean", 0xa, NULL },
    { "getFeatureWithNSString:", NULL, "Z", 0x1, "OrgXmlSaxSAXNotRecognizedException;OrgXmlSaxSAXNotSupportedException" },
    { "setFeatureWithNSString:withBoolean:", NULL, "V", 0x1, "OrgXmlSaxSAXNotRecognizedException;OrgXmlSaxSAXNotSupportedException" },
    { "getPropertyWithNSString:", NULL, "LNSObject", 0x1, "OrgXmlSaxSAXNotRecognizedException;OrgXmlSaxSAXNotSupportedException" },
    { "setPropertyWithNSString:withId:", NULL, "V", 0x1, "OrgXmlSaxSAXNotRecognizedException;OrgXmlSaxSAXNotSupportedException" },
    { "getEntityResolver", NULL, "LOrgXmlSaxEntityResolver", 0x1, NULL },
    { "getDTDHandler", NULL, "LOrgXmlSaxDTDHandler", 0x1, NULL },
    { "getContentHandler", NULL, "LOrgXmlSaxContentHandler", 0x1, NULL },
    { "getErrorHandler", NULL, "LOrgXmlSaxErrorHandler", 0x1, NULL },
    { "parseWithOrgXmlSaxInputSource:", NULL, "V", 0x1, "JavaIoIOException;OrgXmlSaxSAXException" },
    { "parseWithNSString:", NULL, "V", 0x1, "JavaIoIOException;OrgXmlSaxSAXException" },
    { "setup", NULL, "V", 0x2, NULL },
    { "getReaderWithOrgXmlSaxInputSource:", NULL, "LJavaIoReader", 0x2, "OrgXmlSaxSAXException;JavaIoIOException" },
    { "getInputStreamWithNSString:withNSString:", NULL, "LJavaIoInputStream", 0x2, "JavaIoIOException;OrgXmlSaxSAXException" },
    { "adupWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "anameWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "avalWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "expandEntitiesWithNSString:", NULL, "LNSString", 0x2, NULL },
    { "entityWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "lookupEntityWithCharArray:withInt:withInt:", NULL, "I", 0x2, NULL },
    { "eofWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "etagWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "etag_cdataWithCharArray:withInt:withInt:", NULL, "Z", 0x1, "OrgXmlSaxSAXException" },
    { "etag_basicWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "restartWithRAREElement:", NULL, "V", 0x2, "OrgXmlSaxSAXException" },
    { "pop", NULL, "V", 0x2, "OrgXmlSaxSAXException" },
    { "restartablyPop", NULL, "V", 0x2, "OrgXmlSaxSAXException" },
    { "pushWithRAREElement:", NULL, "V", 0x2, "OrgXmlSaxSAXException" },
    { "prefixOfWithNSString:", NULL, "LNSString", 0x2, NULL },
    { "foreignWithNSString:withNSString:", NULL, "Z", 0x2, NULL },
    { "declWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "trimquotesWithNSString:", NULL, "LNSString", 0xa, NULL },
    { "splitWithNSString:", NULL, "LIOSObjectArray", 0xa, "JavaLangIllegalArgumentException" },
    { "cleanPublicidWithNSString:", NULL, "LNSString", 0x2, NULL },
    { "giWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "cdsectWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "pcdataWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "pitargetWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "piWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "stagcWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "stageWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "cmntWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "rectifyWithRAREElement:", NULL, "V", 0x2, "OrgXmlSaxSAXException" },
    { "makeNameWithCharArray:withInt:withInt:", NULL, "LNSString", 0x2, NULL },
    { "commentWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "endCDATA", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "endDTD", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "endEntityWithNSString:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "startCDATA", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "startDTDWithNSString:withNSString:withNSString:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "startEntityWithNSString:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "DEFAULT_NAMESPACES_", NULL, 0xa, "Z" },
    { "DEFAULT_IGNORE_BOGONS_", NULL, 0xa, "Z" },
    { "DEFAULT_BOGONS_EMPTY_", NULL, 0xa, "Z" },
    { "DEFAULT_ROOT_BOGONS_", NULL, 0xa, "Z" },
    { "DEFAULT_DEFAULT_ATTRIBUTES_", NULL, 0xa, "Z" },
    { "DEFAULT_TRANSLATE_COLONS_", NULL, 0xa, "Z" },
    { "DEFAULT_RESTART_ELEMENTS_", NULL, 0xa, "Z" },
    { "DEFAULT_IGNORABLE_WHITESPACE_", NULL, 0xa, "Z" },
    { "DEFAULT_CDATA_ELEMENTS_", NULL, 0xa, "Z" },
    { "namespacesFeature_", NULL, 0x19, "LNSString" },
    { "namespacePrefixesFeature_", NULL, 0x19, "LNSString" },
    { "externalGeneralEntitiesFeature_", NULL, 0x19, "LNSString" },
    { "externalParameterEntitiesFeature_", NULL, 0x19, "LNSString" },
    { "isStandaloneFeature_", NULL, 0x19, "LNSString" },
    { "lexicalHandlerParameterEntitiesFeature_", NULL, 0x19, "LNSString" },
    { "resolveDTDURIsFeature_", NULL, 0x19, "LNSString" },
    { "stringInterningFeature_", NULL, 0x19, "LNSString" },
    { "useAttributes2Feature_", NULL, 0x19, "LNSString" },
    { "useLocator2Feature_", NULL, 0x19, "LNSString" },
    { "useEntityResolver2Feature_", NULL, 0x19, "LNSString" },
    { "validationFeature_", NULL, 0x19, "LNSString" },
    { "unicodeNormalizationCheckingFeature_", NULL, 0x19, "LNSString" },
    { "xmlnsURIsFeature_", NULL, 0x19, "LNSString" },
    { "XML11Feature_", NULL, 0x19, "LNSString" },
    { "ignoreBogonsFeature_", NULL, 0x19, "LNSString" },
    { "bogonsEmptyFeature_", NULL, 0x19, "LNSString" },
    { "rootBogonsFeature_", NULL, 0x19, "LNSString" },
    { "defaultAttributesFeature_", NULL, 0x19, "LNSString" },
    { "translateColonsFeature_", NULL, 0x19, "LNSString" },
    { "restartElementsFeature_", NULL, 0x19, "LNSString" },
    { "ignorableWhitespaceFeature_", NULL, 0x19, "LNSString" },
    { "CDATAElementsFeature_", NULL, 0x19, "LNSString" },
    { "lexicalHandlerProperty_", NULL, 0x19, "LNSString" },
    { "scannerProperty_", NULL, 0x19, "LNSString" },
    { "schemaProperty_", NULL, 0x19, "LNSString" },
    { "autoDetectorProperty_", NULL, 0x19, "LNSString" },
    { "etagchars_", NULL, 0xa, "LIOSCharArray" },
    { "legal_", NULL, 0xa, "LNSString" },
  };
  static J2ObjcClassInfo _RAREParser = { "Parser", "org.ccil.cowan.tagsoup", NULL, 0x1, 51, methods, 38, fields, 0, NULL};
  return &_RAREParser;
}

@end
@implementation RAREParser_$1

- (JavaIoReader *)autoDetectingReaderWithJavaIoInputStream:(JavaIoInputStream *)i {
  return [[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:i];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "autoDetectingReaderWithJavaIoInputStream:", NULL, "LJavaIoReader", 0x1, NULL },
  };
  static J2ObjcClassInfo _RAREParser_$1 = { "$1", "org.ccil.cowan.tagsoup", "Parser", 0x8000, 1, methods, 0, NULL, 0, NULL};
  return &_RAREParser_$1;
}

@end
