//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-spinner/com/appnativa/rare/widget/aSpinnerWidget.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/DateContext.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/spot/DateSpinner.h"
#include "com/appnativa/rare/spot/DateTimeSpinner.h"
#include "com/appnativa/rare/spot/NumberSpinner.h"
#include "com/appnativa/rare/spot/Spinner.h"
#include "com/appnativa/rare/spot/TimeSpinner.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/ui/PainterUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/aSpinnerComponent.h"
#include "com/appnativa/rare/ui/aWidgetListener.h"
#include "com/appnativa/rare/ui/event/ChangeEvent.h"
#include "com/appnativa/rare/ui/event/iChangeListener.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/painter/PainterHolder.h"
#include "com/appnativa/rare/ui/spinner/SpinnerDateModel.h"
#include "com/appnativa/rare/ui/spinner/SpinnerListModel.h"
#include "com/appnativa/rare/ui/spinner/SpinnerNumberModel.h"
#include "com/appnativa/rare/ui/spinner/iSpinner.h"
#include "com/appnativa/rare/ui/spinner/iSpinnerEditor.h"
#include "com/appnativa/rare/ui/spinner/iSpinnerModel.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/widget/aSpinnerWidget.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTDate.h"
#include "com/appnativa/spot/SPOTDateTime.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTReal.h"
#include "com/appnativa/spot/SPOTTime.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/SimpleDateFormatEx.h"
#include "com/appnativa/util/iFilterableList.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/DateFormat.h"
#include "java/text/DecimalFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/List.h"

@implementation RAREaSpinnerWidget

- (id)initWithRAREiContainer:(id<RAREiContainer>)parent {
  if (self = [super initWithRAREiContainer:parent]) {
    widgetType_ = [RAREiWidget_WidgetTypeEnum Spinner];
    selectAllAllowed_ = YES;
  }
  return self;
}

- (void)addChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
  [((id<RAREiSpinner>) nil_chk(spinner_)) addChangeListenerWithRAREiChangeListener:l];
}

- (void)clearContents {
  [super clearContents];
  @try {
    [self setValueWithId:initialValue_];
  }
  @catch (JavaLangException *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
  }
}

- (void)commitEdit {
  [((id<RAREiSpinner>) nil_chk(spinner_)) commitEdit];
}

- (void)configureWithRARESPOTSpinner:(RARESPOTSpinner *)cfg {
  selectAllAllowed_ = YES;
  deletingAllowed_ = YES;
  pastingAllowed_ = YES;
  copyingAllowed_ = YES;
  JavaUtilDate *min = nil;
  JavaUtilDate *max = nil;
  JavaUtilDate *value = nil;
  NSString *format = nil;
  spinner_ = [self createSpinnerAndComponentsWithRARESPOTSpinner:cfg];
  [self configureWithRARESPOTWidget:cfg withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES];
  if ([((SPOTBoolean *) nil_chk(((RARESPOTSpinner *) nil_chk(cfg))->useDesktopStyle_)) booleanValue]) {
    [((id<RAREiSpinner>) nil_chk(spinner_)) setUseDesktopStyleEditorWithBoolean:YES];
  }
  if ([cfg isKindOfClass:[RARESPOTNumberSpinner class]]) {
    [self setupNumericSpinnerWithRAREiSpinner:spinner_ withRARESPOTNumberSpinner:(RARESPOTNumberSpinner *) check_class_cast(cfg, [RARESPOTNumberSpinner class])];
  }
  else if ([cfg isKindOfClass:[RARESPOTDateSpinner class]]) {
    RARESPOTDateSpinner *scfg = (RARESPOTDateSpinner *) check_class_cast(cfg, [RARESPOTDateSpinner class]);
    if ([((SPOTDate *) nil_chk(scfg->maxValue_)) spot_hasValue]) {
      max = [((JavaUtilCalendar *) nil_chk([scfg->maxValue_ getCalendar])) getTime];
    }
    if ([((SPOTDate *) nil_chk(scfg->minValue_)) spot_hasValue]) {
      min = [((JavaUtilCalendar *) nil_chk([scfg->minValue_ getCalendar])) getTime];
    }
    if ([((SPOTDate *) nil_chk(scfg->value_)) spot_hasValue]) {
      value = [((JavaUtilCalendar *) nil_chk([scfg->value_ getCalendar])) getTime];
    }
    format = [((SPOTPrintableString *) nil_chk(scfg->format_)) getValue];
    [self setupDateSpinnerWithRAREiSpinner:spinner_ withJavaUtilDate:min withJavaUtilDate:max withJavaUtilDate:value withNSString:format withJavaTextDateFormat:[((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultDateContext])) getDisplayFormat] withRARESPOTSpinner:cfg];
  }
  else if ([cfg isKindOfClass:[RARESPOTDateTimeSpinner class]]) {
    RARESPOTDateTimeSpinner *scfg = (RARESPOTDateTimeSpinner *) check_class_cast(cfg, [RARESPOTDateTimeSpinner class]);
    if ([((SPOTDateTime *) nil_chk(scfg->maxValue_)) spot_hasValue]) {
      max = [((JavaUtilCalendar *) nil_chk([scfg->maxValue_ getCalendar])) getTime];
    }
    if ([((SPOTDateTime *) nil_chk(scfg->minValue_)) spot_hasValue]) {
      min = [((JavaUtilCalendar *) nil_chk([scfg->minValue_ getCalendar])) getTime];
    }
    if ([((SPOTDateTime *) nil_chk(scfg->value_)) spot_hasValue]) {
      value = [((JavaUtilCalendar *) nil_chk([scfg->value_ getCalendar])) getTime];
    }
    format = [((SPOTPrintableString *) nil_chk(scfg->format_)) getValue];
    [self setupDateSpinnerWithRAREiSpinner:spinner_ withJavaUtilDate:min withJavaUtilDate:max withJavaUtilDate:value withNSString:format withJavaTextDateFormat:[((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultDateTimeContext])) getDisplayFormat] withRARESPOTSpinner:cfg];
  }
  else if ([cfg isKindOfClass:[RARESPOTTimeSpinner class]]) {
    RARESPOTTimeSpinner *scfg = (RARESPOTTimeSpinner *) check_class_cast(cfg, [RARESPOTTimeSpinner class]);
    if ([((SPOTTime *) nil_chk(scfg->maxValue_)) spot_hasValue]) {
      max = [((JavaUtilCalendar *) nil_chk([scfg->maxValue_ getCalendar])) getTime];
    }
    if ([((SPOTTime *) nil_chk(scfg->minValue_)) spot_hasValue]) {
      min = [((JavaUtilCalendar *) nil_chk([scfg->minValue_ getCalendar])) getTime];
    }
    if ([((SPOTTime *) nil_chk(scfg->value_)) spot_hasValue]) {
      value = [((JavaUtilCalendar *) nil_chk([scfg->value_ getCalendar])) getTime];
    }
    format = [((SPOTPrintableString *) nil_chk(scfg->format_)) getValue];
    [self setupDateSpinnerWithRAREiSpinner:spinner_ withJavaUtilDate:min withJavaUtilDate:max withJavaUtilDate:value withNSString:format withJavaTextDateFormat:[((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultTimeContext])) getDisplayFormat] withRARESPOTSpinner:cfg];
  }
  else {
    [self handleDataURLWithRARESPOTWidget:cfg withBoolean:NO];
    if ([self size] == 0) {
      [self addWithId:[[RARERenderableDataItem alloc] initWithId:@""]];
    }
    RARESpinnerListModel *slm = [[RARESpinnerListModel alloc] initWithJavaUtilList:[self subItemsListWithInt:1] withBoolean:[((SPOTBoolean *) nil_chk(cfg->isCircular_)) booleanValue]];
    [((id<RAREiSpinner>) nil_chk(spinner_)) setModelWithRAREiSpinnerModel:slm];
  }
  [self registerEditorWithWidgetWithRAREiSpinnerEditor:[((id<RAREiSpinner>) nil_chk(spinner_)) getEditor]];
  if (initialValue_ != nil) {
    RAREaWidgetListener *l = [self getWidgetListener];
    if ((l != nil) && [l isChangeEventEnabled]) {
      [l stateChangedWithJavaUtilEventObject:[[RAREChangeEvent alloc] initWithId:[spinner_ getView]]];
    }
  }
  [self fireConfigureEventWithRARESPOTWidget:cfg withNSString:[RAREiConstants EVENT_CONFIGURE]];
}

- (void)configureWithRARESPOTWidget:(RARESPOTWidget *)cfg {
  [self configureWithRARESPOTSpinner:(RARESPOTSpinner *) check_class_cast(cfg, [RARESPOTSpinner class])];
}

- (id<RAREiSpinnerModel>)getModel {
  return [((id<RAREiSpinner>) nil_chk(spinner_)) getModel];
}

- (id)getNextValue {
  return [((id<RAREiSpinner>) nil_chk(spinner_)) getNextValue];
}

- (id)getPreviousValue {
  return [((id<RAREiSpinner>) nil_chk(spinner_)) getPreviousValue];
}

- (int)getSelectedIndex {
  @try {
    RARESpinnerListModel *m = (RARESpinnerListModel *) check_class_cast([self getModel], [RARESpinnerListModel class]);
    id o = [((RARESpinnerListModel *) nil_chk(m)) getValue];
    return (o == nil) ? -1 : [((id<JavaUtilList>) nil_chk([m getList])) indexOfWithId:o];
  }
  @catch (JavaLangClassCastException *e) {
    return -1;
  }
}

- (id)getSelection {
  return [((id<RAREiSpinner>) nil_chk(spinner_)) getValue];
}

- (int)getValueAsInt {
  id<RAREiSpinnerModel> m = [((id<RAREiSpinner>) nil_chk(spinner_)) getModel];
  if ([(id) m isKindOfClass:[RARESpinnerNumberModel class]]) {
    return [((RAREUTSNumber *) nil_chk([((RARESpinnerNumberModel *) check_class_cast(m, [RARESpinnerNumberModel class])) getNumber])) intValue];
  }
  return [super getValueAsInt];
}

- (BOOL)isButtonsSideBySide {
  return [((id<RAREiSpinner>) nil_chk(spinner_)) isButtonsSideBySide];
}

- (BOOL)isButtonsVisible {
  return [((id<RAREiSpinner>) nil_chk(spinner_)) isButtonsVisible];
}

- (BOOL)isChangeEventsEnabled {
  return changeEventsEnabled_;
}

- (BOOL)isEditorVisible {
  return [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiSpinnerEditor>) nil_chk([((id<RAREiSpinner>) nil_chk(spinner_)) getEditor])) getComponent])) isVisible];
}

- (void)makeButtonsToolbarStyle {
  if ([(id) spinner_ isKindOfClass:[RAREaSpinnerComponent class]]) {
    [((RAREaSpinnerComponent *) check_class_cast(spinner_, [RAREaSpinnerComponent class])) setButtonPainterHolderWithRAREPainterHolder:[RAREPainterUtils createToolBarButtonPaintHolder]];
  }
}

- (BOOL)nextValue {
  id v = [((id<RAREiSpinnerModel>) nil_chk([self getModel])) getNextValue];
  if (v != nil) {
    [((id<RAREiSpinnerModel>) nil_chk([self getModel])) setValueWithId:v];
  }
  return v != nil;
}

- (BOOL)previousValue {
  id v = [((id<RAREiSpinnerModel>) nil_chk([self getModel])) getPreviousValue];
  if (v != nil) {
    [((id<RAREiSpinnerModel>) nil_chk([self getModel])) setValueWithId:v];
  }
  return v != nil;
}

- (void)removeChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
  [((id<RAREiSpinner>) nil_chk(spinner_)) removeChangeListenerWithRAREiChangeListener:l];
}

- (id)removeSelectedDataWithBoolean:(BOOL)returnData {
  return [((id<RAREiSpinner>) nil_chk(spinner_)) removeSelectedDataWithBoolean:returnData];
}

- (void)reset {
  if (initialValue_ == nil) {
    [self clearContents];
  }
  else {
    [self setValueWithId:initialValue_];
  }
}

- (void)setButtonsSideBySideWithBoolean:(BOOL)sideBySide {
  [((id<RAREiSpinner>) nil_chk(spinner_)) setButtonsSideBySideWithBoolean:sideBySide];
}

- (void)setButtonsVisibleWithBoolean:(BOOL)visible {
  [((id<RAREiSpinner>) nil_chk(spinner_)) setButtonsVisibleWithBoolean:visible];
}

- (void)setChangeEventsEnabledWithBoolean:(BOOL)enabled {
  self->changeEventsEnabled_ = enabled;
  RAREaWidgetListener *l = [self getWidgetListener];
  if (l != nil) {
    [((id<RAREiSpinner>) nil_chk(spinner_)) removeChangeListenerWithRAREiChangeListener:l];
    if (enabled) {
      [spinner_ addChangeListenerWithRAREiChangeListener:l];
    }
  }
}

- (void)setContinuousActionWithBoolean:(BOOL)continuous {
  [((id<RAREiSpinner>) nil_chk(spinner_)) setContinuousActionWithBoolean:continuous];
}

- (void)setEditorWithRAREiSpinnerEditor:(id<RAREiSpinnerEditor>)editor {
  [self unregisterEditorWithWidgetWithRAREiSpinnerEditor:[((id<RAREiSpinner>) nil_chk(spinner_)) getEditor]];
  [spinner_ setEditorWithRAREiSpinnerEditor:editor];
  [self registerEditorWithWidgetWithRAREiSpinnerEditor:editor];
}

- (void)setEditorVisibleWithBoolean:(BOOL)visible {
  [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiSpinnerEditor>) nil_chk([((id<RAREiSpinner>) nil_chk(spinner_)) getEditor])) getComponent])) setVisibleWithBoolean:visible];
}

- (void)setIncrementWithNSNumber:(NSNumber *)increment {
  id<RAREiSpinnerModel> sm = [((id<RAREiSpinner>) nil_chk(spinner_)) getModel];
  if ([(id) sm isKindOfClass:[RARESpinnerNumberModel class]]) {
    [((RARESpinnerNumberModel *) check_class_cast(sm, [RARESpinnerNumberModel class])) setStepSizeWithNSNumber:increment];
  }
}

- (void)selectAll {
  [((id<RAREiSpinnerEditor>) nil_chk([((id<RAREiSpinner>) nil_chk(spinner_)) getEditor])) selectAll];
}

- (void)setMaximumWithJavaUtilDate:(JavaUtilDate *)maximum {
  id<RAREiSpinnerModel> m = [self getModel];
  if ([(id) m isKindOfClass:[RARESpinnerDateModel class]]) {
    [((RARESpinnerDateModel *) check_class_cast(m, [RARESpinnerDateModel class])) setMaximumWithJavaUtilDate:maximum];
  }
}

- (void)setMaximumWithDouble:(double)maximum {
  id<RAREiSpinnerModel> m = [self getModel];
  if ([(id) m isKindOfClass:[RARESpinnerNumberModel class]]) {
    [((RARESpinnerNumberModel *) check_class_cast(m, [RARESpinnerNumberModel class])) setMaximumWithDouble:maximum];
  }
}

- (void)setMinimumWithJavaUtilDate:(JavaUtilDate *)minimum {
  id<RAREiSpinnerModel> m = [self getModel];
  if ([(id) m isKindOfClass:[RARESpinnerDateModel class]]) {
    [((RARESpinnerDateModel *) check_class_cast(m, [RARESpinnerDateModel class])) setMinimumWithJavaUtilDate:minimum];
  }
}

- (void)setMinimumWithDouble:(double)minimum {
  id<RAREiSpinnerModel> m = [self getModel];
  if ([(id) m isKindOfClass:[RARESpinnerNumberModel class]]) {
    [((RARESpinnerNumberModel *) check_class_cast(m, [RARESpinnerNumberModel class])) setMinimumWithDouble:minimum];
  }
}

- (void)setModelWithRAREiSpinnerModel:(id<RAREiSpinnerModel>)model {
  id<RAREiSpinnerEditor> e = [((id<RAREiSpinner>) nil_chk(spinner_)) getEditor];
  [spinner_ setModelWithRAREiSpinnerModel:model];
  id<RAREiSpinnerEditor> ne = [spinner_ getEditor];
  if (e != ne) {
    [self unregisterEditorWithWidgetWithRAREiSpinnerEditor:e];
  }
  [self registerEditorWithWidgetWithRAREiSpinnerEditor:ne];
}

- (void)setSelectedIndexWithInt:(int)index {
  @try {
    RARESpinnerListModel *m = (RARESpinnerListModel *) check_class_cast([self getModel], [RARESpinnerListModel class]);
    [m setValueWithId:[((id<JavaUtilList>) nil_chk([((RARESpinnerListModel *) nil_chk(m)) getList])) getWithInt:index]];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [[JavaLangUnsupportedOperationException alloc] init];
  }
}

- (void)setValueWithId:(id)value {
  if ([self size] > 0) {
    if ([value isKindOfClass:[RARERenderableDataItem class]]) {
      [((id<RAREiSpinner>) nil_chk(spinner_)) setValueWithId:value];
    }
    else {
      int i = [self indexOfValueEqualsWithId:value];
      if (i == -1) {
        [((id<RAREiSpinner>) nil_chk(spinner_)) setValueWithId:[[RARERenderableDataItem alloc] initWithId:value]];
      }
      else {
        [((id<RAREiSpinner>) nil_chk(spinner_)) setValueWithId:[self getWithInt:i]];
      }
    }
  }
  else {
    [((id<RAREiSpinner>) nil_chk(spinner_)) setValueWithId:value];
  }
}

- (void)setVisibleCharactersWithInt:(int)count {
  [((id<RAREiSpinner>) nil_chk(spinner_)) setVisibleCharactersWithInt:count];
}

- (void)swapButtonIcons {
  [((id<RAREiSpinner>) nil_chk(spinner_)) swapButtonIcons];
}

- (id<RAREiSpinner>)createSpinnerAndComponentsWithRARESPOTSpinner:(RARESPOTSpinner *)cfg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)initializeListenersWithRAREaWidgetListener:(RAREaWidgetListener *)listener {
  [super initializeListenersWithRAREaWidgetListener:listener];
  if ((listener != nil) && [listener isChangeEventEnabled]) {
    [((id<RAREiSpinner>) nil_chk(spinner_)) addChangeListenerWithRAREiChangeListener:listener];
  }
}

- (void)registerEditorWithWidgetWithRAREiSpinnerEditor:(id<RAREiSpinnerEditor>)editor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setupDateSpinnerWithRAREiSpinner:(id<RAREiSpinner>)spinner
                        withJavaUtilDate:(JavaUtilDate *)min
                        withJavaUtilDate:(JavaUtilDate *)max
                        withJavaUtilDate:(JavaUtilDate *)value
                            withNSString:(NSString *)format
                  withJavaTextDateFormat:(JavaTextDateFormat *)defaultdf
                     withRARESPOTSpinner:(RARESPOTSpinner *)cfg {
  JavaTextDateFormat *df = nil;
  if (format != nil) {
    @try {
      df = [[RAREUTSimpleDateFormatEx alloc] initWithNSString:format];
    }
    @catch (JavaLangException *e) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    }
  }
  if (df == nil) {
    df = defaultdf;
  }
  RARESpinnerDateModel *m = [[RARESpinnerDateModel alloc] initWithJavaTextDateFormat:df withBoolean:[((SPOTBoolean *) nil_chk(((RARESPOTSpinner *) nil_chk(cfg))->isCircular_)) booleanValue]];
  [m setEditableWithBoolean:[((SPOTBoolean *) nil_chk(cfg->editable_)) booleanValue]];
  if (min != nil) {
    [m setMinimumWithJavaUtilDate:min];
  }
  if (max != nil) {
    [m setMaximumWithJavaUtilDate:max];
  }
  if (value != nil) {
    [m setValueWithId:value];
    initialValue_ = [((id<RAREiSpinner>) nil_chk(spinner)) getValue];
  }
  else {
    if (min != nil) {
      [m setValueWithId:min];
    }
  }
  if ([cfg isKindOfClass:[RARESPOTTimeSpinner class]]) {
    [m setShowTimeWithBoolean:YES];
    [m setShowTimeOnlyWithBoolean:YES];
  }
  else if ([cfg isKindOfClass:[RARESPOTDateTimeSpinner class]]) {
    [m setShowTimeWithBoolean:YES];
  }
  [((id<RAREiSpinner>) nil_chk(spinner)) setModelWithRAREiSpinnerModel:m];
}

- (void)setupNumericSpinnerWithRAREiSpinner:(id<RAREiSpinner>)spinner
                  withRARESPOTNumberSpinner:(RARESPOTNumberSpinner *)cfg {
  RARESpinnerNumberModel *m = [[RARESpinnerNumberModel alloc] initWithBoolean:[((SPOTBoolean *) nil_chk(((RARESPOTNumberSpinner *) nil_chk(cfg))->isCircular_)) booleanValue]];
  [m setSupportDecimalValuesWithBoolean:[((SPOTBoolean *) nil_chk(cfg->supportDecimalValues_)) booleanValue]];
  [m setEditableWithBoolean:[((SPOTBoolean *) nil_chk(cfg->editable_)) getValue]];
  NSString *format = [((SPOTPrintableString *) nil_chk(cfg->format_)) getValue];
  if (format != nil) {
    [m setFormatWithJavaTextDecimalFormat:[[JavaTextDecimalFormat alloc] initWithNSString:format]];
  }
  if ([((SPOTReal *) nil_chk(cfg->maxValue_)) spot_hasValue]) {
    [m setMaximumWithRAREUTSNumber:[((RAREUTSNumber *) nil_chk([cfg->maxValue_ numberValue])) makeImmutable]];
  }
  if ([((SPOTReal *) nil_chk(cfg->minValue_)) spot_hasValue]) {
    [m setMinimumWithRAREUTSNumber:[((RAREUTSNumber *) nil_chk([cfg->minValue_ numberValue])) makeImmutable]];
  }
  if ([((SPOTReal *) nil_chk(cfg->incrementValue_)) spot_hasValue]) {
    [m setStepSizeWithNSNumber:[((RAREUTSNumber *) nil_chk([cfg->incrementValue_ numberValue])) makeImmutable]];
  }
  if ([((SPOTReal *) nil_chk(cfg->value_)) spot_hasValue]) {
    [m setValueWithId:[cfg->value_ numberValue]];
    initialValue_ = [m getValue];
  }
  else {
    if ([cfg->minValue_ spot_hasValue]) {
      [m setValueWithId:[m getMinimum]];
    }
  }
  [((id<RAREiSpinner>) nil_chk(spinner)) setModelWithRAREiSpinnerModel:m];
}

- (void)uninitializeListenersWithRAREaWidgetListener:(RAREaWidgetListener *)listener {
  [super uninitializeListenersWithRAREaWidgetListener:listener];
  if (listener != nil) {
    [((id<RAREiSpinner>) nil_chk(spinner_)) removeChangeListenerWithRAREiChangeListener:listener];
  }
}

- (void)unregisterEditorWithWidgetWithRAREiSpinnerEditor:(id<RAREiSpinnerEditor>)editor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllFieldsTo:(RAREaSpinnerWidget *)other {
  [super copyAllFieldsTo:other];
  other->changeEventsEnabled_ = changeEventsEnabled_;
  other->initialValue_ = initialValue_;
  other->spinner_ = spinner_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getModel", NULL, "LRAREiSpinnerModel", 0x1, NULL },
    { "getNextValue", NULL, "LNSObject", 0x1, NULL },
    { "getPreviousValue", NULL, "LNSObject", 0x1, NULL },
    { "getSelection", NULL, "LNSObject", 0x1, NULL },
    { "isButtonsSideBySide", NULL, "Z", 0x1, NULL },
    { "isButtonsVisible", NULL, "Z", 0x1, NULL },
    { "isChangeEventsEnabled", NULL, "Z", 0x1, NULL },
    { "isEditorVisible", NULL, "Z", 0x1, NULL },
    { "nextValue", NULL, "Z", 0x1, NULL },
    { "previousValue", NULL, "Z", 0x1, NULL },
    { "removeSelectedDataWithBoolean:", NULL, "LNSObject", 0x1, NULL },
    { "createSpinnerAndComponentsWithRARESPOTSpinner:", NULL, "LRAREiSpinner", 0x404, NULL },
    { "initializeListenersWithRAREaWidgetListener:", NULL, "V", 0x4, NULL },
    { "registerEditorWithWidgetWithRAREiSpinnerEditor:", NULL, "V", 0x404, NULL },
    { "setupDateSpinnerWithRAREiSpinner:withJavaUtilDate:withJavaUtilDate:withJavaUtilDate:withNSString:withJavaTextDateFormat:withRARESPOTSpinner:", NULL, "V", 0x4, NULL },
    { "setupNumericSpinnerWithRAREiSpinner:withRARESPOTNumberSpinner:", NULL, "V", 0x4, NULL },
    { "uninitializeListenersWithRAREaWidgetListener:", NULL, "V", 0x4, NULL },
    { "unregisterEditorWithWidgetWithRAREiSpinnerEditor:", NULL, "V", 0x404, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "changeEventsEnabled_", NULL, 0x4, "Z" },
    { "initialValue_", NULL, 0x4, "LNSObject" },
    { "spinner_", NULL, 0x4, "LRAREiSpinner" },
  };
  static J2ObjcClassInfo _RAREaSpinnerWidget = { "aSpinnerWidget", "com.appnativa.rare.widget", NULL, 0x401, 18, methods, 3, fields, 0, NULL};
  return &_RAREaSpinnerWidget;
}

@end
