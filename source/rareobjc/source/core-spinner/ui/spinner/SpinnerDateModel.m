//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-spinner/com/appnativa/rare/ui/spinner/SpinnerDateModel.java
//
//  Created by decoteaud on 3/11/16.
//

#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/DateContext.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/ui/spinner/SpinnerDateModel.h"
#include "com/appnativa/rare/ui/spinner/aSpinnerModel.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"

@implementation RARESpinnerDateModel

- (id)init {
  return [self initRARESpinnerDateModelWithJavaTextDateFormat:[((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDefaultDateContext])) getDisplayFormat] withInt:JavaUtilCalendar_DAY_OF_MONTH withInt:1 withBoolean:NO];
}

- (id)initWithJavaTextDateFormat:(JavaTextDateFormat *)format
                     withBoolean:(BOOL)circular {
  return [self initRARESpinnerDateModelWithJavaTextDateFormat:format withInt:JavaUtilCalendar_DAY_OF_MONTH withInt:1 withBoolean:circular];
}

- (id)initWithJavaTextDateFormat:(JavaTextDateFormat *)format
                         withInt:(int)incrementField {
  return [self initRARESpinnerDateModelWithJavaTextDateFormat:[((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDefaultDateContext])) getDisplayFormat] withInt:incrementField withInt:1 withBoolean:NO];
}

- (id)initRARESpinnerDateModelWithJavaTextDateFormat:(JavaTextDateFormat *)format
                                             withInt:(int)incrementField
                                             withInt:(int)stepSize
                                         withBoolean:(BOOL)circular {
  if (self = [super init]) {
    self->format_ = format;
    self->incrementField_ = incrementField;
    self->stepSize_ = stepSize;
    self->isCircular__ = circular;
    self->calendar_ = [JavaUtilCalendar getInstance];
    self->date_ = [((JavaUtilCalendar *) nil_chk(calendar_)) getTime];
  }
  return self;
}

- (id)initWithJavaTextDateFormat:(JavaTextDateFormat *)format
                         withInt:(int)incrementField
                         withInt:(int)stepSize
                     withBoolean:(BOOL)circular {
  return [self initRARESpinnerDateModelWithJavaTextDateFormat:format withInt:incrementField withInt:stepSize withBoolean:circular];
}

- (id)fromStringWithNSString:(NSString *)value {
  @try {
    return [((JavaTextDateFormat *) nil_chk(format_)) parseWithNSString:value];
  }
  @catch (JavaTextParseException *ex) {
    return nil;
  }
}

- (NSString *)toStringWithId:(id)value {
  return [((JavaTextDateFormat *) nil_chk(format_)) formatWithJavaUtilDate:(JavaUtilDate *) check_class_cast(value, [JavaUtilDate class])];
}

- (void)setFormatWithJavaTextDateFormat:(JavaTextDateFormat *)format {
  self->format_ = format;
}

- (void)setIncrementFiedlCallbackWithRARESpinnerDateModel_iIncrementFiedlCallback:(id<RARESpinnerDateModel_iIncrementFiedlCallback>)cb {
  incrementFiedlCallback_ = cb;
}

- (void)setIncrementFieldWithInt:(int)incrementField {
  self->incrementField_ = incrementField;
}

- (void)setMaximumWithJavaUtilDate:(JavaUtilDate *)maximum {
  long long int time1 = (maximum == nil) ? 0 : [maximum getTime];
  long long int time2 = (self->maximum_ == nil) ? 0 : [self->maximum_ getTime];
  if (time1 != time2) {
    self->maximum_ = maximum;
    if ((maximum != nil) && [((JavaUtilDate *) nil_chk(date_)) afterWithJavaUtilDate:maximum]) {
      date_ = maximum;
    }
    [self fireStateChanged];
  }
}

- (void)setMinimumWithJavaUtilDate:(JavaUtilDate *)minimum {
  long long int time1 = (minimum == nil) ? 0 : [minimum getTime];
  long long int time2 = (self->minimum_ == nil) ? 0 : [self->minimum_ getTime];
  if (time1 != time2) {
    self->minimum_ = minimum;
    if ((minimum != nil) && [((JavaUtilDate *) nil_chk(date_)) beforeWithJavaUtilDate:minimum]) {
      date_ = minimum;
    }
    [self fireStateChanged];
  }
}

- (void)setStepSizeWithInt:(int)stepSize {
  if (stepSize != self->stepSize_) {
    self->stepSize_ = stepSize;
    [self fireStateChanged];
  }
}

- (void)setValueWithId:(id)value {
  if ([value isKindOfClass:[JavaUtilCalendar class]]) {
    value = [((JavaUtilCalendar *) check_class_cast(value, [JavaUtilCalendar class])) getTime];
  }
  if ([value isKindOfClass:[JavaUtilDate class]]) {
    JavaUtilDate *d = (JavaUtilDate *) check_class_cast(value, [JavaUtilDate class]);
    if (![((JavaUtilDate *) nil_chk(d)) isEqual:date_]) {
      if ((minimum_ != nil) && ([minimum_ compareToWithId:d] > 0)) {
        return;
      }
      if ((minimum_ != nil) && ([((JavaUtilDate *) nil_chk(maximum_)) compareToWithId:d] < 0)) {
        return;
      }
      date_ = d;
      [((JavaUtilCalendar *) nil_chk(calendar_)) setTimeWithJavaUtilDate:d];
      [self fireStateChanged];
    }
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"illegal value"];
  }
}

- (JavaTextDateFormat *)getFormat {
  return format_;
}

- (int)getIncrementField {
  return incrementField_;
}

- (JavaUtilDate *)getMaximum {
  return maximum_;
}

- (JavaUtilDate *)getMinimum {
  return minimum_;
}

- (id)getNextValue {
  [((JavaUtilCalendar *) nil_chk(calendar_)) setTimeWithJavaUtilDate:date_];
  [calendar_ addWithInt:[self getIncrementFieldEx] withInt:stepSize_];
  JavaUtilDate *d = [calendar_ getTime];
  if ((maximum_ != nil) && [((JavaUtilDate *) nil_chk(d)) afterWithJavaUtilDate:maximum_]) {
    d = nil;
  }
  if ((d == nil) && isCircular__ && (minimum_ != nil)) {
    d = minimum_;
  }
  return d;
}

- (id)getPreviousValue {
  [((JavaUtilCalendar *) nil_chk(calendar_)) setTimeWithJavaUtilDate:date_];
  [calendar_ addWithInt:[self getIncrementFieldEx] withInt:-stepSize_];
  JavaUtilDate *d = [calendar_ getTime];
  if ((minimum_ != nil) && [((JavaUtilDate *) nil_chk(d)) beforeWithJavaUtilDate:minimum_]) {
    d = nil;
  }
  if ((d == nil) && isCircular__ && (maximum_ != nil)) {
    d = maximum_;
  }
  return d;
}

- (id)getValue {
  return date_;
}

- (int)getIncrementFieldEx {
  if (incrementFiedlCallback_ != nil) {
    incrementField_ = [incrementFiedlCallback_ getIncrementFieldWithRARESpinnerDateModel:self];
  }
  return incrementField_;
}

- (BOOL)isShowTimeOnly {
  return showTimeOnly_;
}

- (void)setShowTimeOnlyWithBoolean:(BOOL)showTimeOnly {
  self->showTimeOnly_ = showTimeOnly;
}

- (BOOL)isShowTime {
  return showTime_;
}

- (void)setShowTimeWithBoolean:(BOOL)showTime {
  self->showTime_ = showTime;
}

- (BOOL)isCircular {
  return isCircular__;
}

- (void)copyAllFieldsTo:(RARESpinnerDateModel *)other {
  [super copyAllFieldsTo:other];
  other->calendar_ = calendar_;
  other->date_ = date_;
  other->format_ = format_;
  other->incrementFiedlCallback_ = incrementFiedlCallback_;
  other->incrementField_ = incrementField_;
  other->isCircular__ = isCircular__;
  other->maximum_ = maximum_;
  other->minimum_ = minimum_;
  other->showTime_ = showTime_;
  other->showTimeOnly_ = showTimeOnly_;
  other->stepSize_ = stepSize_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "fromStringWithNSString:", NULL, "LNSObject", 0x1, NULL },
    { "toStringWithId:", NULL, "LNSString", 0x1, NULL },
    { "getFormat", NULL, "LJavaTextDateFormat", 0x1, NULL },
    { "getMaximum", NULL, "LJavaUtilDate", 0x1, NULL },
    { "getMinimum", NULL, "LJavaUtilDate", 0x1, NULL },
    { "getNextValue", NULL, "LNSObject", 0x1, NULL },
    { "getPreviousValue", NULL, "LNSObject", 0x1, NULL },
    { "getValue", NULL, "LNSObject", 0x1, NULL },
    { "getIncrementFieldEx", NULL, "I", 0x4, NULL },
    { "isShowTimeOnly", NULL, "Z", 0x1, NULL },
    { "isShowTime", NULL, "Z", 0x1, NULL },
    { "isCircular", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "calendar_", NULL, 0x4, "LJavaUtilCalendar" },
    { "date_", NULL, 0x4, "LJavaUtilDate" },
    { "format_", NULL, 0x4, "LJavaTextDateFormat" },
    { "incrementField_", NULL, 0x4, "I" },
    { "isCircular__", "isCircular", 0x4, "Z" },
    { "maximum_", NULL, 0x4, "LJavaUtilDate" },
    { "minimum_", NULL, 0x4, "LJavaUtilDate" },
    { "stepSize_", NULL, 0x4, "I" },
  };
  static J2ObjcClassInfo _RARESpinnerDateModel = { "SpinnerDateModel", "com.appnativa.rare.ui.spinner", NULL, 0x1, 12, methods, 8, fields, 0, NULL};
  return &_RARESpinnerDateModel;
}

@end

@interface RARESpinnerDateModel_iIncrementFiedlCallback : NSObject
@end

@implementation RARESpinnerDateModel_iIncrementFiedlCallback

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getIncrementFieldWithRARESpinnerDateModel:", NULL, "I", 0x401, NULL },
  };
  static J2ObjcClassInfo _RARESpinnerDateModel_iIncrementFiedlCallback = { "iIncrementFiedlCallback", "com.appnativa.rare.ui.spinner", "SpinnerDateModel", 0x201, 1, methods, 0, NULL, 0, NULL};
  return &_RARESpinnerDateModel_iIncrementFiedlCallback;
}

@end
