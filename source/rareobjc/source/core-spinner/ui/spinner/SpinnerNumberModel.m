//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-spinner/com/appnativa/rare/ui/spinner/SpinnerNumberModel.java
//
//  Created by decoteaud on 3/11/16.
//

#include "com/appnativa/rare/ui/spinner/SpinnerNumberModel.h"
#include "com/appnativa/util/SNumber.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/text/DecimalFormat.h"

@implementation RARESpinnerNumberModel

- (id)initWithBoolean:(BOOL)circular {
  if (self = [super init]) {
    mainValue_ = [[RAREUTSNumber alloc] init];
    workValue_ = [[RAREUTSNumber alloc] init];
    stepSize_ = [RAREUTSNumber ONE];
    returnValue_ = [[RAREUTSNumber alloc] init];
    maximum_ = [[RAREUTSNumber alloc] initWithInt:JavaLangInteger_MAX_VALUE];
    minimum_ = [RAREUTSNumber ZERO];
    self->circular_ = circular;
  }
  return self;
}

- (id)fromStringWithNSString:(NSString *)value {
  return [self numberValueWithId:value];
}

- (NSString *)toStringWithId:(id)value {
  if (value == nil) {
    return nil;
  }
  if (format_ != nil) {
    return [format_ formatWithId:value];
  }
  return [nil_chk(value) description];
}

- (void)setFormatWithJavaTextDecimalFormat:(JavaTextDecimalFormat *)format {
  self->format_ = format;
}

- (void)setMaximumWithDouble:(double)maximum {
  [self setMaximumWithRAREUTSNumber:[[RAREUTSNumber alloc] initWithDouble:maximum]];
}

- (void)setMaximumWithRAREUTSNumber:(RAREUTSNumber *)maximum {
  if ((maximum == nil) ? (self->maximum_ != nil) : ![maximum equalsWithRAREUTSNumber:self->maximum_]) {
    self->maximum_ = maximum;
    [self fireStateChanged];
  }
}

- (void)setMinimumWithDouble:(double)minimum {
  [self setMinimumWithRAREUTSNumber:[[RAREUTSNumber alloc] initWithDouble:minimum]];
}

- (void)setMinimumWithRAREUTSNumber:(RAREUTSNumber *)minimum {
  if ((minimum == nil) ? (self->minimum_ != nil) : ![minimum equalsWithRAREUTSNumber:self->minimum_]) {
    self->minimum_ = minimum;
    [self fireStateChanged];
  }
}

- (RAREUTSNumber *)getStepSize {
  return stepSize_;
}

- (void)setStepSizeWithNSNumber:(NSNumber *)stepSize {
  if (stepSize == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"null stepSize"];
  }
  if (![((NSNumber *) nil_chk(stepSize)) isEqual:self->stepSize_]) {
    self->stepSize_ = [self numberValueWithId:stepSize];
    [self fireStateChanged];
  }
}

- (void)setSupportDecimalValuesWithBoolean:(BOOL)supportDecimalValues {
  self->supportDecimalValues_ = supportDecimalValues;
}

- (void)setValueWithId:(id)value {
  RAREUTSNumber *val = [self numberValueWithId:value];
  if (![((RAREUTSNumber *) nil_chk(val)) equalsWithRAREUTSNumber:mainValue_]) {
    (void) [((RAREUTSNumber *) nil_chk(workValue_)) setValueWithRAREUTSNumber:val];
    if (!supportDecimalValues_) {
      (void) [workValue_ setScaleWithInt:0];
    }
    if ((minimum_ != nil) && ([workValue_ compareToWithRAREUTSNumber:minimum_] < 0)) {
      if (circular_ && (maximum_ != nil)) {
        (void) [workValue_ setValueWithRAREUTSNumber:maximum_];
      }
      else {
        return;
      }
    }
    if ((maximum_ != nil) && ([workValue_ compareToWithRAREUTSNumber:maximum_] > 0)) {
      if (circular_ && (minimum_ != nil)) {
        (void) [workValue_ setValueWithRAREUTSNumber:minimum_];
      }
      else {
        return;
      }
    }
    (void) [((RAREUTSNumber *) nil_chk(mainValue_)) setValueWithRAREUTSNumber:workValue_];
    [self fireStateChanged];
  }
}

- (JavaTextDecimalFormat *)getFormat {
  return format_;
}

- (RAREUTSNumber *)getMaximum {
  return maximum_;
}

- (RAREUTSNumber *)getMinimum {
  return minimum_;
}

- (id)getNextValue {
  (void) [((RAREUTSNumber *) nil_chk(workValue_)) setValueWithRAREUTSNumber:mainValue_];
  (void) [workValue_ addWithRAREUTSNumber:stepSize_];
  if ((maximum_ != nil) && ([workValue_ compareToWithRAREUTSNumber:maximum_] > 0)) {
    if (circular_ && (minimum_ != nil)) {
      (void) [workValue_ setValueWithRAREUTSNumber:minimum_];
      return workValue_;
    }
    return nil;
  }
  return workValue_;
}

- (RAREUTSNumber *)getNumber {
  (void) [((RAREUTSNumber *) nil_chk(returnValue_)) setValueWithRAREUTSNumber:mainValue_];
  return returnValue_;
}

- (id)getPreviousValue {
  (void) [((RAREUTSNumber *) nil_chk(workValue_)) setValueWithRAREUTSNumber:mainValue_];
  (void) [workValue_ subtractWithRAREUTSNumber:stepSize_];
  if ((minimum_ != nil) && ([workValue_ compareToWithRAREUTSNumber:minimum_] < 0)) {
    if (circular_ && (maximum_ != nil)) {
      (void) [workValue_ setValueWithRAREUTSNumber:maximum_];
      return workValue_;
    }
    return nil;
  }
  return workValue_;
}

- (id)getValue {
  (void) [((RAREUTSNumber *) nil_chk(returnValue_)) setValueWithRAREUTSNumber:mainValue_];
  return returnValue_;
}

- (BOOL)isSupportDecimalValues {
  return supportDecimalValues_;
}

- (BOOL)isCircular {
  return circular_;
}

- (RAREUTSNumber *)numberValueWithId:(id)value {
  if (value == nil) {
    return [RAREUTSNumber ZERO];
  }
  if ([value isKindOfClass:[RAREUTSNumber class]]) {
    return (RAREUTSNumber *) check_class_cast(value, [RAREUTSNumber class]);
  }
  if ([value isKindOfClass:[JavaLangDouble class]]) {
    return [[RAREUTSNumber alloc] initWithDouble:[(JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]) doubleValue]];
  }
  if ([value isKindOfClass:[JavaLangFloat class]]) {
    return [[RAREUTSNumber alloc] initWithDouble:[(JavaLangFloat *) check_class_cast(value, [JavaLangFloat class]) floatValue]];
  }
  if ([value isKindOfClass:[NSNumber class]]) {
    return [[RAREUTSNumber alloc] initWithLong:[((NSNumber *) check_class_cast(value, [NSNumber class])) longLongValue]];
  }
  return [[RAREUTSNumber alloc] initWithNSString:[nil_chk(value) description]];
}

- (int)getMaximumDecimalPlaces {
  return maximumDecimalPlaces_;
}

- (void)setMaximumDecimalPlacesWithInt:(int)maximumPlaces {
  self->maximumDecimalPlaces_ = maximumPlaces;
}

- (void)fireStateChanged {
  if (supportDecimalValues_ && (maximumDecimalPlaces_ > 0) && ([((RAREUTSNumber *) nil_chk(workValue_)) decimalPlaces] > maximumDecimalPlaces_)) {
    (void) [workValue_ setScaleWithInt:maximumDecimalPlaces_];
    (void) [((RAREUTSNumber *) nil_chk(returnValue_)) setScaleWithInt:maximumDecimalPlaces_];
  }
  [super fireStateChanged];
}

- (void)copyAllFieldsTo:(RARESpinnerNumberModel *)other {
  [super copyAllFieldsTo:other];
  other->circular_ = circular_;
  other->format_ = format_;
  other->mainValue_ = mainValue_;
  other->maximum_ = maximum_;
  other->maximumDecimalPlaces_ = maximumDecimalPlaces_;
  other->minimum_ = minimum_;
  other->returnValue_ = returnValue_;
  other->stepSize_ = stepSize_;
  other->supportDecimalValues_ = supportDecimalValues_;
  other->workValue_ = workValue_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "fromStringWithNSString:", NULL, "LNSObject", 0x1, NULL },
    { "toStringWithId:", NULL, "LNSString", 0x1, NULL },
    { "getStepSize", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "getFormat", NULL, "LJavaTextDecimalFormat", 0x1, NULL },
    { "getMaximum", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "getMinimum", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "getNextValue", NULL, "LNSObject", 0x1, NULL },
    { "getNumber", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "getPreviousValue", NULL, "LNSObject", 0x1, NULL },
    { "getValue", NULL, "LNSObject", 0x1, NULL },
    { "isSupportDecimalValues", NULL, "Z", 0x1, NULL },
    { "isCircular", NULL, "Z", 0x1, NULL },
    { "numberValueWithId:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "fireStateChanged", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "mainValue_", NULL, 0x4, "LRAREUTSNumber" },
    { "workValue_", NULL, 0x4, "LRAREUTSNumber" },
    { "stepSize_", NULL, 0x4, "LRAREUTSNumber" },
    { "returnValue_", NULL, 0x4, "LRAREUTSNumber" },
    { "format_", NULL, 0x4, "LJavaTextDecimalFormat" },
    { "circular_", NULL, 0x4, "Z" },
    { "maximum_", NULL, 0x4, "LRAREUTSNumber" },
    { "minimum_", NULL, 0x4, "LRAREUTSNumber" },
    { "supportDecimalValues_", NULL, 0x4, "Z" },
    { "maximumDecimalPlaces_", NULL, 0x4, "I" },
  };
  static J2ObjcClassInfo _RARESpinnerNumberModel = { "SpinnerNumberModel", "com.appnativa.rare.ui.spinner", NULL, 0x1, 14, methods, 10, fields, 0, NULL};
  return &_RARESpinnerNumberModel;
}

@end
