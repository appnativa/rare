//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-spinner/com/appnativa/rare/ui/spinner/SpinnerListModel.java
//
//  Created by decoteaud on 12/8/15.
//

#include "com/appnativa/rare/ui/spinner/SpinnerListModel.h"
#include "com/appnativa/rare/ui/spinner/aSpinnerModel.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/List.h"

@implementation RARESpinnerListModel

- (id)initWithBoolean:(BOOL)circular {
  if (self = [super init]) {
    isCircular__ = NO;
    isCircular__ = circular;
  }
  return self;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)values
               withBoolean:(BOOL)circular {
  if (self = [super init]) {
    isCircular__ = NO;
    self->list_ = values;
    isCircular__ = circular;
  }
  return self;
}

- (id)fromStringWithNSString:(NSString *)value {
  return ([((id<JavaUtilList>) nil_chk(list_)) indexOfWithId:value] == -1) ? nil : value;
}

- (void)setListWithJavaUtilList:(id<JavaUtilList>)list {
  if ((list == nil) || ([list isEmpty])) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"invalid list"];
  }
  self->list_ = list;
  index_ = 0;
  [self fireStateChanged];
}

- (void)setValueWithId:(id)value {
  int n = [((id<JavaUtilList>) nil_chk(list_)) indexOfWithId:value];
  if (n == -1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"invalid value"];
  }
  else if (n != self->index_) {
    self->index_ = n;
    [self fireStateChanged];
  }
}

- (void)dispose {
  [super dispose];
  if (list_ != nil) {
    [list_ clear];
    list_ = nil;
  }
}

- (id<JavaUtilList>)getList {
  return list_;
}

- (id)getNextValue {
  id o = (index_ + 1 < [((id<JavaUtilList>) nil_chk(list_)) size]) ? [list_ getWithInt:index_ + 1] : nil;
  if ((o == nil) && isCircular__ && ([((id<JavaUtilList>) nil_chk([self getList])) size] > 0)) {
    o = [((id<JavaUtilList>) nil_chk([self getList])) getWithInt:0];
  }
  return o;
}

- (id)getPreviousValue {
  id o = (index_ > 0) ? [((id<JavaUtilList>) nil_chk(list_)) getWithInt:index_ - 1] : nil;
  if ((o == nil) && isCircular__ && ([((id<JavaUtilList>) nil_chk([self getList])) size] > 0)) {
    o = [((id<JavaUtilList>) nil_chk([self getList])) getWithInt:[((id<JavaUtilList>) nil_chk([self getList])) size] - 1];
  }
  return o;
}

- (id)getValue {
  return (list_ == nil) ? nil : [list_ getWithInt:index_];
}

- (BOOL)isCircular {
  return isCircular__;
}

- (void)copyAllFieldsTo:(RARESpinnerListModel *)other {
  [super copyAllFieldsTo:other];
  other->index_ = index_;
  other->isCircular__ = isCircular__;
  other->list_ = list_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "fromStringWithNSString:", NULL, "LNSObject", 0x1, NULL },
    { "getList", NULL, "LJavaUtilList", 0x1, NULL },
    { "getNextValue", NULL, "LNSObject", 0x1, NULL },
    { "getPreviousValue", NULL, "LNSObject", 0x1, NULL },
    { "getValue", NULL, "LNSObject", 0x1, NULL },
    { "isCircular", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "isCircular__", "isCircular", 0x0, "Z" },
    { "list_", NULL, 0x0, "LJavaUtilList" },
  };
  static J2ObjcClassInfo _RARESpinnerListModel = { "SpinnerListModel", "com.appnativa.rare.ui.spinner", NULL, 0x1, 6, methods, 2, fields, 0, NULL};
  return &_RARESpinnerListModel;
}

@end
