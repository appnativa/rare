//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-spinner/com/appnativa/rare/ui/aSpinnerComponent.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/ui/BorderUtils.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/Container.h"
#include "com/appnativa/rare/ui/PainterUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/XPContainer.h"
#include "com/appnativa/rare/ui/aComponent.h"
#include "com/appnativa/rare/ui/aSpinnerComponent.h"
#include "com/appnativa/rare/ui/border/UIEmptyBorder.h"
#include "com/appnativa/rare/ui/border/aUILineBorder.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/ChangeEvent.h"
#include "com/appnativa/rare/ui/event/EventListenerList.h"
#include "com/appnativa/rare/ui/event/iChangeListener.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iPaintedButton.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformPath.h"
#include "com/appnativa/rare/ui/iPlatformRenderingComponent.h"
#include "com/appnativa/rare/ui/painter/PainterHolder.h"
#include "com/appnativa/rare/ui/painter/iPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/renderer/aListItemRenderer.h"
#include "com/appnativa/rare/ui/spinner/aSpinnerModel.h"
#include "com/appnativa/rare/ui/spinner/iSpinnerEditor.h"
#include "com/appnativa/rare/ui/spinner/iSpinnerModel.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/EventObject.h"

@implementation RAREaSpinnerComponent

static RARERenderableDataItem * RAREaSpinnerComponent_defaultItem_;

+ (RARERenderableDataItem *)defaultItem {
  return RAREaSpinnerComponent_defaultItem_;
}

+ (void)setDefaultItem:(RARERenderableDataItem *)defaultItem {
  RAREaSpinnerComponent_defaultItem_ = defaultItem;
}

- (id)initWithId:(id)view {
  if (self = [super initWithId:view]) {
    editPreferredWidth_ = [RAREScreenUtils platformPixelsWithFloat:32];
    minValue_ = JavaLangInteger_MIN_VALUE;
    maxValue_ = JavaLangInteger_MAX_VALUE;
    buttonsVisible_ = YES;
    if ([RAREPlatform isTouchDevice]) {
      iconSize_ = [RAREUIScreen platformPixelsWithInt:32];
    }
    else {
      iconSize_ = [RAREUIScreen platformPixelsWithInt:4];
      stackedButtons_ = YES;
    }
  }
  return self;
}

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  id<RAREiPlatformComponent> view = [((RAREActionEvent *) nil_chk(e)) getComponent];
  if ([((id<RAREiSpinnerEditor>) nil_chk(editor_)) isEditorDirty]) {
    [editor_ commitEdit];
  }
  if (![RAREPlatform isTouchDevice] && ![((id<RAREiPlatformComponent>) nil_chk(editorView_)) isFocusOwner]) {
    [editorView_ requestFocus];
  }
  if ((view != upButton_) && (view != downButton_)) {
    return;
  }
  id value;
  if (view == upButton_) {
    value = [((id<RAREiSpinnerModel>) nil_chk(spinnerModel_)) getNextValue];
  }
  else {
    value = [((id<RAREiSpinnerModel>) nil_chk(spinnerModel_)) getPreviousValue];
  }
  if (value == nil) {
    [RAREPlatformHelper performHapticFeedbackWithId:view];
  }
  else {
    [editor_ setValueWithId:value];
    [((id<RAREiSpinnerModel>) nil_chk(spinnerModel_)) setValueWithId:value];
    [editor_ selectField];
  }
  [self repaint];
}

- (void)addChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
  [((RAREEventListenerList *) nil_chk([self getEventListenerList])) addWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)] withId:l];
}

- (void)commitEdit {
  [((id<RAREiSpinnerEditor>) nil_chk([self getEditor])) commitEdit];
}

- (void)selectAll {
  [((id<RAREiSpinnerEditor>) nil_chk([self getEditor])) selectAll];
}

- (void)dispose {
  [super dispose];
  if ([(id) spinnerModel_ isKindOfClass:[RAREaSpinnerModel class]]) {
    [((RAREaSpinnerModel *) check_class_cast(spinnerModel_, [RAREaSpinnerModel class])) dispose];
  }
  if (editor_ != nil) {
    [editor_ dispose];
  }
  upButton_ = nil;
  spinnerModel_ = nil;
  editorView_ = nil;
  editor_ = nil;
  downButton_ = nil;
  changeEvent_ = nil;
  buttonPainterHolder_ = nil;
}

- (void)layoutWithFloat:(float)width
              withFloat:(float)height {
  id<RAREiPlatformBorder> b = [self getBorder];
  float x = 0;
  float y = 0;
  if (b != nil) {
    RAREUIInsets *in = [b getBorderInsetsExWithRAREUIInsets:(RAREUIInsets *) check_class_cast(nil, [RAREUIInsets class])];
    x = ((RAREUIInsets *) nil_chk(in))->left_;
    y = in->top_;
    width -= (in->left_ + in->right_);
    height -= (in->top_ + in->bottom_);
  }
  if (![self isButtonsVisible]) {
    [((id<RAREiPlatformComponent>) nil_chk(editorView_)) setBoundsWithFloat:x withFloat:y withFloat:width withFloat:height];
    return;
  }
  if (!stackedButtons_) {
    float buttonSize = height;
    BOOL evisible = [((id<RAREiPlatformComponent>) nil_chk(editorView_)) isVisible];
    if (!evisible) {
      buttonSize = width / 2;
    }
    else if (buttonSize + buttonSize + editPreferredWidth_ > width) {
      buttonSize = (width - editPreferredWidth_) / 2;
    }
    [((id<RAREiActionComponent>) nil_chk(downButton_)) setBoundsWithFloat:x withFloat:y withFloat:buttonSize withFloat:height];
    if (evisible) {
      [editorView_ setBoundsWithFloat:x + buttonSize withFloat:y + ((height - editPreferredHeight_) / 2) withFloat:width - buttonSize - buttonSize withFloat:editPreferredHeight_];
    }
    [((id<RAREiActionComponent>) nil_chk(upButton_)) setBoundsWithFloat:x + width - buttonSize withFloat:y withFloat:buttonSize withFloat:height];
  }
  else {
    float h2 = height / 2;
    float buttonSize = height;
    BOOL evisible = [((id<RAREiPlatformComponent>) nil_chk(editorView_)) isVisible];
    if (!evisible) {
      buttonSize = width;
    }
    else if (buttonSize + editPreferredWidth_ > width) {
      buttonSize = width - editPreferredWidth_;
    }
    if ([editorView_ isVisible]) {
      [editorView_ setBoundsWithFloat:x withFloat:y withFloat:width - buttonSize withFloat:height];
    }
    [((id<RAREiActionComponent>) nil_chk(upButton_)) setBoundsWithFloat:x + width - buttonSize withFloat:y withFloat:buttonSize withFloat:h2];
    [((id<RAREiActionComponent>) nil_chk(downButton_)) setBoundsWithFloat:x + width - buttonSize withFloat:y + h2 withFloat:buttonSize withFloat:h2];
  }
}

- (void)paintButtonsWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                          withRAREUIRectangle:(RAREUIRectangle *)rect {
  if ([self isButtonsVisible]) {
    id<RAREiActionComponent> up = [self getUpButton];
    id<RAREiActionComponent> down = [self getDownButton];
    RAREUIRectangle *r;
    r = [((id<RAREiActionComponent>) nil_chk(up)) getBounds];
    RAREiPaintedButton_ButtonStateEnum *ustate = [up getButtonState];
    RAREiPaintedButton_ButtonStateEnum *dstate = [((id<RAREiActionComponent>) nil_chk(down)) getButtonState];
    RAREUIColor *defg = [RAREColorUtils getForeground];
    RAREUIColor *difg = [((RAREUIColor *) nil_chk(defg)) getDisabledColor];
    RAREUIColor *fg = nil;
    RAREPainterHolder *ph = buttonPainterHolder_;
    float hheight = ((RAREUIRectangle *) nil_chk(rect))->height_ / 2;
    if (stackedButtons_) {
      ((RAREUIRectangle *) nil_chk(r))->width_ = rect->width_ - r->x_;
      r->height_ = hheight;
    }
    else {
      ((RAREUIRectangle *) nil_chk(r))->width_ = rect->width_ - r->x_;
      r->height_ = rect->height_;
      r->y_ = 0;
    }
    int doff = [((RAREiPaintedButton_ButtonStateEnum *) nil_chk(dstate)) isPressed] ? 1 : 0;
    int uoff = [((RAREiPaintedButton_ButtonStateEnum *) nil_chk(ustate)) isPressed] ? 1 : 0;
    if ((ph != nil) && stackedButtons_) {
      [ph paintWithRAREiPlatformGraphics:g withFloat:((RAREUIRectangle *) nil_chk(r))->x_ withFloat:r->y_ withFloat:r->width_ withFloat:rect->height_ withRAREiPaintedButton_ButtonStateEnum:[RAREiPaintedButton_ButtonStateEnum DEFAULT] withInt:RAREiPainter_HORIZONTAL withBoolean:NO];
      if (ustate == dstate) {
        fg = [up isEnabled] ? defg : difg;
        ph = nil;
      }
    }
    if ((ph != nil) && [self paintIndividualButtonWithRAREiPaintedButton_ButtonStateEnum:ustate]) {
      [ph paintWithRAREiPlatformGraphics:g withFloat:((RAREUIRectangle *) nil_chk(r))->x_ withFloat:r->y_ withFloat:r->width_ withFloat:r->height_ withRAREiPaintedButton_ButtonStateEnum:ustate withInt:RAREiPainter_HORIZONTAL withBoolean:NO];
      fg = [((RAREPainterHolder *) nil_chk(buttonPainterHolder_)) getForegroundWithRAREiPaintedButton_ButtonStateEnum:ustate];
    }
    if (fg == nil) {
      fg = [up isEnabled] ? defg : difg;
    }
    if (upIcon_ != nil) {
      [RAREUtils paintCenteredIconWithRAREiPlatformGraphics:g withRAREiPlatformIcon:upIcon_ withFloat:((RAREUIRectangle *) nil_chk(r))->x_ withFloat:r->y_ + uoff withFloat:r->width_ withFloat:r->height_];
    }
    else {
      id<RAREiPlatformPath> p = [self getArrowWithBoolean:NO withFloat:((RAREUIRectangle *) nil_chk(r))->width_ withFloat:r->height_];
      [((id<RAREiPlatformGraphics>) nil_chk(g)) setColorWithRAREUIColor:fg];
      [g fillShapeWithRAREiPlatformShape:p withFloat:r->x_ withFloat:r->y_ + uoff];
    }
    r = [down getBounds];
    if (stackedButtons_) {
      ((RAREUIRectangle *) nil_chk(r))->width_ = rect->width_ - r->x_;
      r->height_ = rect->height_ - r->y_;
    }
    else {
      ((RAREUIRectangle *) nil_chk(r))->width_ += r->x_;
      r->height_ = rect->height_;
      r->x_ = 0;
      r->y_ = 0;
    }
    if ((ph != nil) && [self paintIndividualButtonWithRAREiPaintedButton_ButtonStateEnum:dstate]) {
      [ph paintWithRAREiPlatformGraphics:g withFloat:((RAREUIRectangle *) nil_chk(r))->x_ withFloat:r->y_ withFloat:r->width_ withFloat:r->height_ withRAREiPaintedButton_ButtonStateEnum:dstate withInt:RAREiPainter_HORIZONTAL withBoolean:NO];
      fg = [ph getForegroundWithRAREiPaintedButton_ButtonStateEnum:dstate];
    }
    if (fg == nil) {
      fg = [down isEnabled] ? defg : difg;
    }
    if (downIcon_ != nil) {
      [RAREUtils paintCenteredIconWithRAREiPlatformGraphics:g withRAREiPlatformIcon:downIcon_ withFloat:((RAREUIRectangle *) nil_chk(r))->x_ withFloat:r->y_ + doff withFloat:r->width_ withFloat:r->height_];
    }
    else {
      id<RAREiPlatformPath> p = [self getArrowWithBoolean:YES withFloat:((RAREUIRectangle *) nil_chk(r))->width_ withFloat:r->height_];
      [((id<RAREiPlatformGraphics>) nil_chk(g)) setColorWithRAREUIColor:fg];
      if (stackedButtons_) {
        [g fillShapeWithRAREiPlatformShape:p withFloat:r->x_ withFloat:r->y_ + doff];
      }
      else {
        [g fillShapeWithRAREiPlatformShape:p withFloat:r->x_ + 1 withFloat:r->y_ + 1 + doff];
      }
    }
    if (stackedButtons_) {
      id<RAREiPlatformBorder> b = [self getBorder];
      if ([(id) b isKindOfClass:[RAREaUILineBorder class]]) {
        RAREUIColor *c = [((RAREaUILineBorder *) check_class_cast(b, [RAREaUILineBorder class])) getLineColor];
        [((id<RAREiPlatformGraphics>) nil_chk(g)) setColorWithRAREUIColor:c];
        [g drawLineWithFloat:((RAREUIRectangle *) nil_chk(r))->x_ withFloat:hheight withFloat:r->x_ + r->width_ withFloat:hheight];
      }
    }
  }
}

- (id)removeSelectedDataWithBoolean:(BOOL)returnData {
  if (editor_ != nil) {
    return [editor_ removeSelectedDataWithBoolean:returnData];
  }
  return nil;
}

- (void)removeChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
  if (listenerList_ != nil) {
    [listenerList_ removeWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)] withId:l];
  }
}

- (void)renderItemAtWithId:(id)o
withRAREiPlatformRenderingComponent:(id<RAREiPlatformRenderingComponent>)rc {
  if (itemRenderer_ == nil) {
    itemRenderer_ = [self createListItemRenderer];
  }
  id<JavaLangCharSequence> text = nil;
  RARERenderableDataItem *item;
  if ([o isKindOfClass:[RARERenderableDataItem class]]) {
    item = (RARERenderableDataItem *) check_class_cast(o, [RARERenderableDataItem class]);
    text = [((RAREaListItemRenderer *) nil_chk(itemRenderer_)) configureRenderingComponentWithRAREiPlatformComponent:self withRAREiPlatformRenderingComponent:rc withRARERenderableDataItem:item withInt:0 withBoolean:NO withBoolean:NO withRAREColumn:nil withRARERenderableDataItem:nil];
  }
  else {
    item = RAREaSpinnerComponent_defaultItem_;
    (void) [((RAREaListItemRenderer *) nil_chk(itemRenderer_)) configureRenderingComponentWithRAREiPlatformComponent:self withRAREiPlatformRenderingComponent:rc withRARERenderableDataItem:item withInt:0 withBoolean:NO withBoolean:NO withRAREColumn:nil withRARERenderableDataItem:nil];
    text = [nil_chk(o) description];
  }
  (void) [((id<RAREiPlatformRenderingComponent>) nil_chk(rc)) getComponentWithJavaLangCharSequence:text withRARERenderableDataItem:item];
}

- (void)stateChangedWithJavaUtilEventObject:(JavaUtilEventObject *)e {
  if ([self isButtonsVisible]) {
    [self adjustButtonsDisabledState];
  }
  [self fireChangeEvent];
}

- (void)swapButtonIcons {
  self->reversed_ = !self->reversed_;
  id<RAREiPlatformIcon> bi = downIcon_;
  downIcon_ = upIcon_;
  upIcon_ = bi;
}

- (void)valueChangedWithId:(id)value {
  [((id<RAREiSpinnerModel>) nil_chk(spinnerModel_)) setValueWithId:value];
  [self fireChangeEvent];
}

- (void)setButtonPainterHolderWithRAREPainterHolder:(RAREPainterHolder *)ph {
  buttonPainterHolder_ = ph;
}

- (void)setButtonsSideBySideWithBoolean:(BOOL)buttonsSideBySide {
  self->stackedButtons_ = !buttonsSideBySide;
}

- (void)setButtonsVisibleWithBoolean:(BOOL)visible {
  buttonsVisible_ = visible;
  if (upButton_ != nil) {
    [upButton_ setVisibleWithBoolean:visible];
  }
  if (downButton_ != nil) {
    [downButton_ setVisibleWithBoolean:visible];
  }
}

- (void)setContinuousActionWithBoolean:(BOOL)continuous {
  if (downButton_ != nil) {
    [RAREaPlatformHelper setAutoRepeatsWithRAREiActionComponent:downButton_ withInt:continuous ? 300 : 0];
  }
  if (upButton_ != nil) {
    [RAREaPlatformHelper setAutoRepeatsWithRAREiActionComponent:upButton_ withInt:continuous ? 300 : 0];
  }
}

- (void)setEditableWithBoolean:(BOOL)editable {
  [((id<RAREiSpinnerEditor>) nil_chk(editor_)) setEditableWithBoolean:editable];
}

- (void)setEditorWithRAREiSpinnerEditor:(id<RAREiSpinnerEditor>)editor {
  if (editorView_ != nil) {
    [self removeWithRAREiPlatformComponent:editorView_];
  }
  editorView_ = [((id<RAREiSpinnerEditor>) nil_chk(editor)) getComponent];
  [self addWithRAREiPlatformComponent:editorView_];
}

- (void)setEnabledWithBoolean:(BOOL)enabled {
  [super setEnabledWithBoolean:enabled];
  [((id<RAREiPlatformComponent>) nil_chk(editorView_)) setEnabledWithBoolean:enabled];
  if ([self isButtonsVisible]) {
    if (enabled) {
      [self adjustButtonsDisabledState];
    }
    else {
      [((id<RAREiActionComponent>) nil_chk(upButton_)) setEnabledWithBoolean:NO];
      [((id<RAREiActionComponent>) nil_chk(downButton_)) setEnabledWithBoolean:NO];
    }
  }
}

- (void)setFontWithRAREUIFont:(RAREUIFont *)font {
  [super setFontWithRAREUIFont:font];
  if (editor_ != nil) {
    [editor_ setFontWithRAREUIFont:font];
  }
}

- (void)setForegroundWithRAREUIColor:(RAREUIColor *)color {
  if (editor_ != nil) {
    [editor_ setForegroundWithRAREUIColor:color];
  }
}

- (void)setIconsWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)down
                withRAREiPlatformIcon:(id<RAREiPlatformIcon>)up {
  upIcon_ = up;
  downIcon_ = down;
  if ((up == nil) && (down == nil)) {
    if ([RAREPlatform isTouchDevice]) {
      iconSize_ = [RAREUIScreen platformPixelsWithInt:32];
    }
    else {
      iconSize_ = [RAREUIScreen platformPixelsWithInt:8];
    }
  }
  else {
    iconSize_ = 0;
    if (up != nil) {
      iconSize_ = [up getIconHeight];
    }
    if (down != nil) {
      iconSize_ = [JavaLangMath maxWithInt:[down getIconHeight] withInt:iconSize_];
    }
  }
}

- (void)setModelWithRAREiSpinnerModel:(id<RAREiSpinnerModel>)model {
  if (self->spinnerModel_ != nil) {
    [spinnerModel_ removeChangeListenerWithRAREiChangeListener:self];
  }
  self->spinnerModel_ = model;
  [((id<RAREiSpinnerModel>) nil_chk(spinnerModel_)) addChangeListenerWithRAREiChangeListener:self];
  if (editor_ == nil) {
    [self createAndSetupEditorWithRAREiSpinnerModel:model];
  }
  if (editor_ != nil) {
    [editor_ modelChanged];
    id v = [spinnerModel_ getValue];
    if (v != nil) {
      [editor_ setValueWithId:v];
    }
  }
  [self adjustButtonsDisabledState];
  [self revalidate];
}

- (void)setUseDesktopStyleEditorWithBoolean:(BOOL)useDesktopStyleEditor {
  if (self->useDesktopStyleEditor_ != useDesktopStyleEditor) {
    self->useDesktopStyleEditor_ = useDesktopStyleEditor;
    if ((editor_ != nil) && (editorView_ != nil) && (spinnerModel_ != nil)) {
      [editorView_ removeFocusListenerWithRAREiFocusListener:self];
      [self removeWithRAREiPlatformComponent:editorView_];
      downButton_ = nil;
      upButton_ = nil;
      [self createAndSetupEditorWithRAREiSpinnerModel:spinnerModel_];
      [self adjustButtonsDisabledState];
      [self revalidate];
    }
  }
}

- (void)setValueWithId:(id)value {
  [((id<RAREiSpinnerModel>) nil_chk(spinnerModel_)) setValueWithId:value];
  id v = [spinnerModel_ getValue];
  if (v != nil) {
    [((id<RAREiSpinnerEditor>) nil_chk(editor_)) setValueWithId:v];
  }
  [self fireChangeEvent];
}

- (void)setVisibleCharactersWithInt:(int)count {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<RAREiActionComponent>)getDownButton {
  return downButton_;
}

- (id<RAREiSpinnerEditor>)getEditor {
  return editor_;
}

- (id<RAREiSpinnerModel>)getModel {
  return spinnerModel_;
}

- (id)getNextValue {
  return [((id<RAREiSpinnerModel>) nil_chk(spinnerModel_)) getNextValue];
}

- (void)getPreferredSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                    withFloat:(float)maxWidth {
  (void) [((id<RAREiPlatformComponent>) nil_chk(editorView_)) getPreferredSizeWithRAREUIDimension:size];
  if (![editorView_ isVisible]) {
    ((RAREUIDimension *) nil_chk(size))->width_ = 0;
  }
  editPreferredWidth_ = ((RAREUIDimension *) nil_chk(size))->width_;
  editPreferredHeight_ = size->height_;
  if (buttonsVisible_) {
    float width = size->width_;
    float height = size->height_;
    float buttonSize = iconSize_ + 2;
    if (editPreferredWidth_ == 0) {
      buttonSize = [JavaLangMath maxWithFloat:buttonSize withFloat:[RAREScreenUtils platformPixelsWithFloat:32]];
    }
    if (!stackedButtons_) {
      height = [JavaLangMath maxWithFloat:height withFloat:buttonSize];
      buttonSize = height;
      width += buttonSize + buttonSize;
    }
    else {
      width += [JavaLangMath maxWithFloat:height withFloat:buttonSize];
      width = [JavaLangMath maxWithFloat:width withFloat:(buttonSize) * 2];
      height = [JavaLangMath maxWithFloat:height withFloat:buttonSize * 2];
    }
    size->width_ = width;
    size->height_ = height;
  }
}

- (id)getPreviousValue {
  return [((id<RAREiSpinnerModel>) nil_chk(spinnerModel_)) getPreviousValue];
}

- (id<RAREiActionComponent>)getUpButton {
  return upButton_;
}

- (id)getValue {
  return [((id<RAREiSpinnerModel>) nil_chk(spinnerModel_)) getValue];
}

- (BOOL)isButtonsSideBySide {
  return !stackedButtons_;
}

- (BOOL)isButtonsVisible {
  return buttonsVisible_ && useDesktopStyleEditor_;
}

- (BOOL)isEditable {
  return [((id<RAREiSpinnerEditor>) nil_chk(editor_)) isEditable];
}

- (BOOL)isFocusOwner {
  return [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiSpinnerEditor>) nil_chk(editor_)) getComponent])) isFocusOwner];
}

- (BOOL)isUseDesktopStyleEditor {
  return useDesktopStyleEditor_;
}

- (void)adjustButtonsDisabledState {
  if ([self isButtonsVisible]) {
    BOOL enabled = [((id<RAREiSpinnerModel>) nil_chk(spinnerModel_)) getNextValue] != nil;
    if ([((id<RAREiActionComponent>) nil_chk(upButton_)) isEnabled] != enabled) {
      [upButton_ setEnabledWithBoolean:enabled];
    }
    enabled = [spinnerModel_ getPreviousValue] != nil;
    if ([((id<RAREiActionComponent>) nil_chk(downButton_)) isEnabled] != enabled) {
      [downButton_ setEnabledWithBoolean:enabled];
    }
  }
}

- (void)createAndSetupEditorWithRAREiSpinnerModel:(id<RAREiSpinnerModel>)model {
  editor_ = [self createEditorWithRAREiSpinnerModel:model];
  editorView_ = [((id<RAREiSpinnerEditor>) nil_chk(editor_)) getComponent];
  [((id<RAREiPlatformComponent>) nil_chk(editorView_)) setBorderWithRAREiPlatformBorder:[RAREBorderUtils TWO_POINT_EMPTY_BORDER]];
  [self addWithRAREiPlatformComponent:editorView_];
  [editorView_ addFocusListenerWithRAREiFocusListener:self];
  RAREUIFont *f = [self getFontEx];
  if (f != nil) {
    [editor_ setFontWithRAREUIFont:f];
  }
  if ([editor_ isTextField] && opaque_ && ([self getBackgroundEx] == nil)) {
    [self setBackgroundWithRAREUIColor:[RAREUIColor WHITE]];
  }
}

- (id<RAREiActionComponent>)createButtonWithInt:(int)autoRepeatDelay {
  return [RAREPlatformHelper createNakedButtonWithRAREiPlatformComponent:self withBoolean:YES withInt:autoRepeatDelay];
}

- (id<RAREiSpinnerEditor>)createEditorWithRAREiSpinnerModel:(id<RAREiSpinnerModel>)model {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (RAREaListItemRenderer *)createListItemRenderer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)fireChangeEvent {
  if (listenerList_ != nil) {
    if (changeEvent_ == nil) {
      changeEvent_ = [[RAREChangeEvent alloc] initWithId:self];
    }
    [RAREUtils fireChangeEventWithRAREEventListenerList:listenerList_ withRAREChangeEvent:changeEvent_];
  }
}

- (void)setupSpinnerForDesktopStyle {
  useDesktopStyleEditor_ = YES;
  if (buttonsVisible_) {
    int delay = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getIntWithNSString:@"Rare.Spinner.autoRepeatDelay" withInt:300];
    downButton_ = [self createButtonWithInt:delay];
    [((id<RAREiActionComponent>) nil_chk(downButton_)) addActionListenerWithRAREiActionListener:self];
    [downButton_ setFocusableWithBoolean:NO];
    [self addWithRAREiPlatformComponent:downButton_];
    upButton_ = [self createButtonWithInt:delay];
    [((id<RAREiActionComponent>) nil_chk(upButton_)) addActionListenerWithRAREiActionListener:self];
    [upButton_ setFocusableWithBoolean:NO];
    [self addWithRAREiPlatformComponent:upButton_];
  }
  RAREUIProperties *defs = [RAREPlatform getUIDefaults];
  if (opaque_ && ![self isBackgroundSet] && (([self getComponentPainter] == nil) || ![((id<RAREiPlatformComponentPainter>) nil_chk([self getComponentPainter])) isBackgroundPaintEnabled])) {
    RAREUIColor *c = [((RAREUIProperties *) nil_chk(defs)) getColorWithNSString:@"Rare.Spinner.background"];
    if (c == nil) {
      c = [RAREUIColor WHITE];
    }
    [self setBackgroundWithRAREUIColor:c];
  }
  if ([self getBorder] == nil) {
    id<RAREiPlatformBorder> b = [((RAREUIProperties *) nil_chk(defs)) getBorderWithNSString:@"Rare.Spinner.border"];
    if (b == nil) {
      b = [RAREBorderUtils getDefaultWidgetBorder];
    }
    [self setBorderWithRAREiPlatformBorder:b];
  }
  if (buttonPainterHolder_ == nil) {
    [self setButtonPainterHolderWithRAREPainterHolder:[RAREPainterUtils createSpinnerButtonPaintHolder]];
  }
}

- (id<RAREiPlatformPath>)getArrowWithBoolean:(BOOL)down
                                   withFloat:(float)width
                                   withFloat:(float)height {
  if (reversed_) {
    down = !down;
  }
  id<RAREiPlatformPath> p = down ? downArrow_ : upArrow_;
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
    if (down) {
      downArrow_ = p;
    }
    else {
      upArrow_ = p;
    }
    downSize_ = [[RAREUIDimension alloc] init];
    upSize_ = [[RAREUIDimension alloc] init];
  }
  RAREUIDimension *d = down ? downSize_ : upSize_;
  if ((d->height_ != height) || (d->width_ != width)) {
    p = [RAREPainterUtils drawArrowWithRAREiPlatformPath:p withFloat:width withFloat:height withBoolean:down];
  }
  d->width_ = width;
  d->height_ = height;
  return p;
}

- (void)getMinimumSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                  withFloat:(float)maxWidth {
  if ([((id<RAREiPlatformComponent>) nil_chk(editorView_)) isVisible]) {
    (void) [editorView_ getMinimumSizeWithRAREUIDimension:size];
  }
  else {
    [((RAREUIDimension *) nil_chk(size)) setSizeWithInt:0 withInt:0];
  }
  if (buttonsVisible_) {
    float width = ((RAREUIDimension *) nil_chk(size))->width_;
    float height = size->height_;
    float buttonSize = iconSize_ + 2;
    if (!stackedButtons_) {
      height = [JavaLangMath maxWithFloat:height withFloat:buttonSize];
      width += buttonSize + buttonSize;
    }
    else {
      width += [JavaLangMath maxWithFloat:height withFloat:buttonSize];
      width = [JavaLangMath maxWithFloat:width withFloat:(buttonSize) * 2];
      height = [JavaLangMath maxWithFloat:height withFloat:buttonSize * 2];
    }
    size->width_ = width;
    size->height_ = height;
  }
}

- (BOOL)paintIndividualButtonWithRAREiPaintedButton_ButtonStateEnum:(RAREiPaintedButton_ButtonStateEnum *)state {
  switch ([state ordinal]) {
    case RAREiPaintedButton_ButtonState_SELECTED:
    case RAREiPaintedButton_ButtonState_PRESSED:
    return YES;
    default:
    return !stackedButtons_;
  }
}

- (RAREPainterHolder *)getButtonPainterHolder {
  return buttonPainterHolder_;
}

+ (void)initialize {
  if (self == [RAREaSpinnerComponent class]) {
    RAREaSpinnerComponent_defaultItem_ = [[RARERenderableDataItem alloc] initWithId:@""];
  }
}

- (void)copyAllFieldsTo:(RAREaSpinnerComponent *)other {
  [super copyAllFieldsTo:other];
  other->buttonPainterHolder_ = buttonPainterHolder_;
  other->buttonsVisible_ = buttonsVisible_;
  other->downArrow_ = downArrow_;
  other->downButton_ = downButton_;
  other->downIcon_ = downIcon_;
  other->downSize_ = downSize_;
  other->editPreferredHeight_ = editPreferredHeight_;
  other->editPreferredWidth_ = editPreferredWidth_;
  other->editor_ = editor_;
  other->editorView_ = editorView_;
  other->iconSize_ = iconSize_;
  other->itemRenderer_ = itemRenderer_;
  other->maxValue_ = maxValue_;
  other->minValue_ = minValue_;
  other->reversed_ = reversed_;
  other->spinnerModel_ = spinnerModel_;
  other->stackedButtons_ = stackedButtons_;
  other->upArrow_ = upArrow_;
  other->upButton_ = upButton_;
  other->upIcon_ = upIcon_;
  other->upSize_ = upSize_;
  other->useDesktopStyleEditor_ = useDesktopStyleEditor_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "removeSelectedDataWithBoolean:", NULL, "LNSObject", 0x1, NULL },
    { "setVisibleCharactersWithInt:", NULL, "V", 0x401, NULL },
    { "getDownButton", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "getEditor", NULL, "LRAREiSpinnerEditor", 0x1, NULL },
    { "getModel", NULL, "LRAREiSpinnerModel", 0x1, NULL },
    { "getNextValue", NULL, "LNSObject", 0x1, NULL },
    { "getPreviousValue", NULL, "LNSObject", 0x1, NULL },
    { "getUpButton", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "getValue", NULL, "LNSObject", 0x1, NULL },
    { "isButtonsSideBySide", NULL, "Z", 0x1, NULL },
    { "isButtonsVisible", NULL, "Z", 0x1, NULL },
    { "isEditable", NULL, "Z", 0x1, NULL },
    { "isFocusOwner", NULL, "Z", 0x1, NULL },
    { "isUseDesktopStyleEditor", NULL, "Z", 0x1, NULL },
    { "adjustButtonsDisabledState", NULL, "V", 0x4, NULL },
    { "createAndSetupEditorWithRAREiSpinnerModel:", NULL, "V", 0x4, NULL },
    { "createButtonWithInt:", NULL, "LRAREiActionComponent", 0x4, NULL },
    { "createEditorWithRAREiSpinnerModel:", NULL, "LRAREiSpinnerEditor", 0x404, NULL },
    { "createListItemRenderer", NULL, "LRAREaListItemRenderer", 0x404, NULL },
    { "fireChangeEvent", NULL, "V", 0x4, NULL },
    { "setupSpinnerForDesktopStyle", NULL, "V", 0x4, NULL },
    { "getArrowWithBoolean:withFloat:withFloat:", NULL, "LRAREiPlatformPath", 0x4, NULL },
    { "getMinimumSizeExWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
    { "paintIndividualButtonWithRAREiPaintedButton_ButtonStateEnum:", NULL, "Z", 0x2, NULL },
    { "getButtonPainterHolder", NULL, "LRAREPainterHolder", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "defaultItem_", NULL, 0xc, "LRARERenderableDataItem" },
    { "editPreferredWidth_", NULL, 0x4, "F" },
    { "minValue_", NULL, 0x4, "I" },
    { "maxValue_", NULL, 0x4, "I" },
    { "buttonsVisible_", NULL, 0x4, "Z" },
    { "buttonPainterHolder_", NULL, 0x4, "LRAREPainterHolder" },
    { "downArrow_", NULL, 0x4, "LRAREiPlatformPath" },
    { "downButton_", NULL, 0x4, "LRAREiActionComponent" },
    { "downIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "downSize_", NULL, 0x4, "LRAREUIDimension" },
    { "editPreferredHeight_", NULL, 0x4, "F" },
    { "editor_", NULL, 0x4, "LRAREiSpinnerEditor" },
    { "editorView_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "iconSize_", NULL, 0x4, "I" },
    { "reversed_", NULL, 0x4, "Z" },
    { "spinnerModel_", NULL, 0x4, "LRAREiSpinnerModel" },
    { "stackedButtons_", NULL, 0x4, "Z" },
    { "upArrow_", NULL, 0x4, "LRAREiPlatformPath" },
    { "upButton_", NULL, 0x4, "LRAREiActionComponent" },
    { "upIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "upSize_", NULL, 0x4, "LRAREUIDimension" },
    { "useDesktopStyleEditor_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _RAREaSpinnerComponent = { "aSpinnerComponent", "com.appnativa.rare.ui", NULL, 0x401, 25, methods, 22, fields, 0, NULL};
  return &_RAREaSpinnerComponent;
}

@end
