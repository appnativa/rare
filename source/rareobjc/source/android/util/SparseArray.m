//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple/android/util/SparseArray.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "android/util/ArrayUtils.h"
#include "android/util/SparseArray.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/System.h"

@implementation AndroidUtilSparseArray

static id AndroidUtilSparseArray_DELETED_;

+ (id)DELETED {
  return AndroidUtilSparseArray_DELETED_;
}

- (id)init {
  return [self initAndroidUtilSparseArrayWithInt:10];
}

- (id)initAndroidUtilSparseArrayWithInt:(int)initialCapacity {
  if (self = [super init]) {
    mGarbage_ = NO;
    initialCapacity = [AndroidUtilArrayUtils idealIntArraySizeWithInt:initialCapacity];
    mKeys_ = [IOSIntArray arrayWithLength:initialCapacity];
    mValues_ = [IOSObjectArray arrayWithLength:initialCapacity type:[IOSClass classWithClass:[NSObject class]]];
    mSize_ = 0;
  }
  return self;
}

- (id)initWithInt:(int)initialCapacity {
  return [self initAndroidUtilSparseArrayWithInt:initialCapacity];
}

- (AndroidUtilSparseArray *)clone {
  AndroidUtilSparseArray *clone = nil;
  @try {
    clone = (AndroidUtilSparseArray *) check_class_cast([super clone], [AndroidUtilSparseArray class]);
    ((AndroidUtilSparseArray *) nil_chk(clone))->mKeys_ = [((IOSIntArray *) nil_chk(mKeys_)) clone];
    clone->mValues_ = [((IOSObjectArray *) nil_chk(mValues_)) clone];
  }
  @catch (JavaLangCloneNotSupportedException *cnse) {
  }
  return clone;
}

- (id)getWithInt:(int)key {
  return [self getWithInt:key withId:nil];
}

- (id)getWithInt:(int)key
          withId:(id)valueIfKeyNotFound {
  int i = [AndroidUtilSparseArray binarySearchWithIntArray:mKeys_ withInt:0 withInt:mSize_ withInt:key];
  if (i < 0 || IOSObjectArray_Get(nil_chk(mValues_), i) == AndroidUtilSparseArray_DELETED_) {
    return valueIfKeyNotFound;
  }
  else {
    return (id) IOSObjectArray_Get(mValues_, i);
  }
}

- (void)delete__WithInt:(int)key {
  int i = [AndroidUtilSparseArray binarySearchWithIntArray:mKeys_ withInt:0 withInt:mSize_ withInt:key];
  if (i >= 0) {
    if (IOSObjectArray_Get(nil_chk(mValues_), i) != AndroidUtilSparseArray_DELETED_) {
      (void) IOSObjectArray_Set(mValues_, i, AndroidUtilSparseArray_DELETED_);
      mGarbage_ = YES;
    }
  }
}

- (void)removeWithInt:(int)key {
  [self delete__WithInt:key];
}

- (void)removeAtWithInt:(int)index {
  if (IOSObjectArray_Get(nil_chk(mValues_), index) != AndroidUtilSparseArray_DELETED_) {
    (void) IOSObjectArray_Set(mValues_, index, AndroidUtilSparseArray_DELETED_);
    mGarbage_ = YES;
  }
}

- (void)gc {
  int n = mSize_;
  int o = 0;
  IOSIntArray *keys = mKeys_;
  IOSObjectArray *values = mValues_;
  for (int i = 0; i < n; i++) {
    id val = IOSObjectArray_Get(nil_chk(values), i);
    if (val != AndroidUtilSparseArray_DELETED_) {
      if (i != o) {
        (*IOSIntArray_GetRef(nil_chk(keys), o)) = IOSIntArray_Get(keys, i);
        (void) IOSObjectArray_Set(values, o, val);
        (void) IOSObjectArray_Set(values, i, nil);
      }
      o++;
    }
  }
  mGarbage_ = NO;
  mSize_ = o;
}

- (void)putWithInt:(int)key
            withId:(id)value {
  int i = [AndroidUtilSparseArray binarySearchWithIntArray:mKeys_ withInt:0 withInt:mSize_ withInt:key];
  if (i >= 0) {
    (void) IOSObjectArray_Set(nil_chk(mValues_), i, value);
  }
  else {
    i = ~i;
    if (i < mSize_ && IOSObjectArray_Get(nil_chk(mValues_), i) == AndroidUtilSparseArray_DELETED_) {
      (*IOSIntArray_GetRef(nil_chk(mKeys_), i)) = key;
      (void) IOSObjectArray_Set(mValues_, i, value);
      return;
    }
    if (mGarbage_ && mSize_ >= (int) [((IOSIntArray *) nil_chk(mKeys_)) count]) {
      [self gc];
      i = ~[AndroidUtilSparseArray binarySearchWithIntArray:mKeys_ withInt:0 withInt:mSize_ withInt:key];
    }
    if (mSize_ >= (int) [((IOSIntArray *) nil_chk(mKeys_)) count]) {
      int n = [AndroidUtilArrayUtils idealIntArraySizeWithInt:mSize_ + 1];
      IOSIntArray *nkeys = [IOSIntArray arrayWithLength:n];
      IOSObjectArray *nvalues = [IOSObjectArray arrayWithLength:n type:[IOSClass classWithClass:[NSObject class]]];
      [JavaLangSystem arraycopyWithId:mKeys_ withInt:0 withId:nkeys withInt:0 withInt:(int) [mKeys_ count]];
      [JavaLangSystem arraycopyWithId:mValues_ withInt:0 withId:nvalues withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(mValues_)) count]];
      mKeys_ = nkeys;
      mValues_ = nvalues;
    }
    if (mSize_ - i != 0) {
      [JavaLangSystem arraycopyWithId:mKeys_ withInt:i withId:mKeys_ withInt:i + 1 withInt:mSize_ - i];
      [JavaLangSystem arraycopyWithId:mValues_ withInt:i withId:mValues_ withInt:i + 1 withInt:mSize_ - i];
    }
    (*IOSIntArray_GetRef(mKeys_, i)) = key;
    (void) IOSObjectArray_Set(nil_chk(mValues_), i, value);
    mSize_++;
  }
}

- (int)size {
  if (mGarbage_) {
    [self gc];
  }
  return mSize_;
}

- (int)keyAtWithInt:(int)index {
  if (mGarbage_) {
    [self gc];
  }
  return IOSIntArray_Get(nil_chk(mKeys_), index);
}

- (id)valueAtWithInt:(int)index {
  if (mGarbage_) {
    [self gc];
  }
  return (id) IOSObjectArray_Get(nil_chk(mValues_), index);
}

- (void)setValueAtWithInt:(int)index
                   withId:(id)value {
  if (mGarbage_) {
    [self gc];
  }
  (void) IOSObjectArray_Set(nil_chk(mValues_), index, value);
}

- (int)indexOfKeyWithInt:(int)key {
  if (mGarbage_) {
    [self gc];
  }
  return [AndroidUtilSparseArray binarySearchWithIntArray:mKeys_ withInt:0 withInt:mSize_ withInt:key];
}

- (int)indexOfValueWithId:(id)value {
  if (mGarbage_) {
    [self gc];
  }
  for (int i = 0; i < mSize_; i++) if (IOSObjectArray_Get(nil_chk(mValues_), i) == value) return i;
  return -1;
}

- (void)clear {
  int n = mSize_;
  IOSObjectArray *values = mValues_;
  for (int i = 0; i < n; i++) {
    (void) IOSObjectArray_Set(nil_chk(values), i, nil);
  }
  mSize_ = 0;
  mGarbage_ = NO;
}

- (void)appendWithInt:(int)key
               withId:(id)value {
  if (mSize_ != 0 && key <= IOSIntArray_Get(nil_chk(mKeys_), mSize_ - 1)) {
    [self putWithInt:key withId:value];
    return;
  }
  if (mGarbage_ && mSize_ >= (int) [((IOSIntArray *) nil_chk(mKeys_)) count]) {
    [self gc];
  }
  int pos = mSize_;
  if (pos >= (int) [((IOSIntArray *) nil_chk(mKeys_)) count]) {
    int n = [AndroidUtilArrayUtils idealIntArraySizeWithInt:pos + 1];
    IOSIntArray *nkeys = [IOSIntArray arrayWithLength:n];
    IOSObjectArray *nvalues = [IOSObjectArray arrayWithLength:n type:[IOSClass classWithClass:[NSObject class]]];
    [JavaLangSystem arraycopyWithId:mKeys_ withInt:0 withId:nkeys withInt:0 withInt:(int) [mKeys_ count]];
    [JavaLangSystem arraycopyWithId:mValues_ withInt:0 withId:nvalues withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(mValues_)) count]];
    mKeys_ = nkeys;
    mValues_ = nvalues;
  }
  (*IOSIntArray_GetRef(mKeys_, pos)) = key;
  (void) IOSObjectArray_Set(nil_chk(mValues_), pos, value);
  mSize_ = pos + 1;
}

+ (int)binarySearchWithIntArray:(IOSIntArray *)a
                        withInt:(int)start
                        withInt:(int)len
                        withInt:(int)key {
  int high = start + len, low = start - 1, guess;
  while (high - low > 1) {
    guess = (high + low) / 2;
    if (IOSIntArray_Get(nil_chk(a), guess) < key) low = guess;
    else high = guess;
  }
  if (high == start + len) return ~(start + len);
  else if (IOSIntArray_Get(nil_chk(a), high) == key) return high;
  else return ~high;
}

+ (void)initialize {
  if (self == [AndroidUtilSparseArray class]) {
    AndroidUtilSparseArray_DELETED_ = [[NSObject alloc] init];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(AndroidUtilSparseArray *)other {
  [super copyAllFieldsTo:other];
  other->mGarbage_ = mGarbage_;
  other->mKeys_ = mKeys_;
  other->mSize_ = mSize_;
  other->mValues_ = mValues_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "clone", NULL, "LAndroidUtilSparseArray", 0x1, NULL },
    { "getWithInt:", NULL, "TE", 0x1, NULL },
    { "getWithInt:withId:", NULL, "TE", 0x1, NULL },
    { "gc", NULL, "V", 0x2, NULL },
    { "valueAtWithInt:", NULL, "TE", 0x1, NULL },
    { "binarySearchWithIntArray:withInt:withInt:withInt:", NULL, "I", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "DELETED_", NULL, 0x1a, "LNSObject" },
  };
  static J2ObjcClassInfo _AndroidUtilSparseArray = { "SparseArray", "android.util", NULL, 0x1, 6, methods, 1, fields, 0, NULL};
  return &_AndroidUtilSparseArray;
}

@end
