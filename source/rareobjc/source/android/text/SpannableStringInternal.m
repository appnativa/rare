//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple-android-htmllabel/android/text/SpannableStringInternal.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "android/text/SpannableStringInternal.h"
#include "android/text/Spanned.h"
#include "android/util/ArrayUtils.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Array.h"

@implementation AndroidTextSpannableStringInternal

static IOSObjectArray * AndroidTextSpannableStringInternal_EMPTY_;

+ (IOSObjectArray *)EMPTY {
  return AndroidTextSpannableStringInternal_EMPTY_;
}

- (id)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)source
                           withInt:(int)start
                           withInt:(int)end {
  if (self = [super init]) {
    if (start == 0 && end == [((id<JavaLangCharSequence>) nil_chk(source)) sequenceLength]) {
      mText_ = [source sequenceDescription];
    }
    else {
      mText_ = [((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(source)) sequenceDescription])) substring:start endIndex:end];
    }
    int initial = [AndroidUtilArrayUtils idealIntArraySizeWithInt:0];
    mSpans_ = [IOSObjectArray arrayWithLength:initial type:[IOSClass classWithClass:[NSObject class]]];
    mSpanData_ = [IOSIntArray arrayWithLength:initial * 3];
    if ([(id) source conformsToProtocol: @protocol(AndroidTextSpanned)]) {
      id<AndroidTextSpanned> sp = (id<AndroidTextSpanned>) check_protocol_cast(source, @protocol(AndroidTextSpanned));
      IOSObjectArray *spans = [((id<AndroidTextSpanned>) nil_chk(sp)) getSpansWithInt:start withInt:end withIOSClass:[IOSClass classWithClass:[NSObject class]]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(spans)) count]; i++) {
        int st = [sp getSpanStartWithId:IOSObjectArray_Get(spans, i)];
        int en = [sp getSpanEndWithId:IOSObjectArray_Get(spans, i)];
        int fl = [sp getSpanFlagsWithId:IOSObjectArray_Get(spans, i)];
        if (st < start) {
          st = start;
        }
        if (en > end) {
          en = end;
        }
        [self setSpanWithId:IOSObjectArray_Get(spans, i) withInt:st - start withInt:en - start withInt:fl];
      }
    }
  }
  return self;
}

- (void)dispose {
  if (mSpans_ != nil) {
    for (int i = 0; i < (int) [mSpans_ count]; i++) {
      (void) IOSObjectArray_Set(mSpans_, i, nil);
    }
    mSpans_ = nil;
  }
}

- (int)sequenceLength {
  return [((NSString *) nil_chk(mText_)) sequenceLength];
}

- (unichar)charAtWithInt:(int)i {
  return [((NSString *) nil_chk(mText_)) charAtWithInt:i];
}

- (NSString *)sequenceDescription {
  return mText_;
}

- (void)getCharsWithInt:(int)start
                withInt:(int)end
          withCharArray:(IOSCharArray *)dest
                withInt:(int)off {
  [((NSString *) nil_chk(mText_)) getChars:start sourceEnd:end destination:dest destinationBegin:off];
}

- (void)setSpanWithId:(id)what
              withInt:(int)start
              withInt:(int)end
              withInt:(int)flags {
  [self checkRangeWithNSString:@"setSpan" withInt:start withInt:end];
  if ((flags & AndroidTextSpanned_SPAN_PARAGRAPH) == AndroidTextSpanned_SPAN_PARAGRAPH) {
    if (start != 0 && start != [self sequenceLength]) {
      unichar c = [self charAtWithInt:start - 1];
      if (c != 0x000a) {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"%@%d follows %C)", @"PARAGRAPH span must start at paragraph boundary (", start, c]];
      }
    }
    if (end != 0 && end != [self sequenceLength]) {
      unichar c = [self charAtWithInt:end - 1];
      if (c != 0x000a) {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"%@%d follows %C)", @"PARAGRAPH span must end at paragraph boundary (", end, c]];
      }
    }
  }
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  IOSIntArray *data = mSpanData_;
  for (int i = 0; i < count; i++) {
    if (IOSObjectArray_Get(nil_chk(spans), i) == what) {
      (*IOSIntArray_GetRef(nil_chk(data), i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_START)) = start;
      (*IOSIntArray_GetRef(data, i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_END)) = end;
      (*IOSIntArray_GetRef(data, i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_FLAGS)) = flags;
      return;
    }
  }
  if (mSpanCount_ + 1 >= (int) [((IOSObjectArray *) nil_chk(mSpans_)) count]) {
    int newsize = [AndroidUtilArrayUtils idealIntArraySizeWithInt:mSpanCount_ + 1];
    IOSObjectArray *newtags = [IOSObjectArray arrayWithLength:newsize type:[IOSClass classWithClass:[NSObject class]]];
    IOSIntArray *newdata = [IOSIntArray arrayWithLength:newsize * 3];
    [JavaLangSystem arraycopyWithId:mSpans_ withInt:0 withId:newtags withInt:0 withInt:mSpanCount_];
    [JavaLangSystem arraycopyWithId:mSpanData_ withInt:0 withId:newdata withInt:0 withInt:mSpanCount_ * 3];
    mSpans_ = newtags;
    mSpanData_ = newdata;
  }
  (void) IOSObjectArray_Set(mSpans_, mSpanCount_, what);
  (*IOSIntArray_GetRef(nil_chk(mSpanData_), mSpanCount_ * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_START)) = start;
  (*IOSIntArray_GetRef(mSpanData_, mSpanCount_ * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_END)) = end;
  (*IOSIntArray_GetRef(mSpanData_, mSpanCount_ * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_FLAGS)) = flags;
  mSpanCount_++;
}

- (void)removeSpanWithId:(id)what {
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  IOSIntArray *data = mSpanData_;
  for (int i = count - 1; i >= 0; i--) {
    if (IOSObjectArray_Get(nil_chk(spans), i) == what) {
      int c = count - (i + 1);
      [JavaLangSystem arraycopyWithId:spans withInt:i + 1 withId:spans withInt:i withInt:c];
      [JavaLangSystem arraycopyWithId:data withInt:(i + 1) * AndroidTextSpannableStringInternal_COLUMNS withId:data withInt:i * AndroidTextSpannableStringInternal_COLUMNS withInt:c * AndroidTextSpannableStringInternal_COLUMNS];
      mSpanCount_--;
      return;
    }
  }
}

- (int)getSpanStartWithId:(id)what {
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  IOSIntArray *data = mSpanData_;
  for (int i = count - 1; i >= 0; i--) {
    if (IOSObjectArray_Get(nil_chk(spans), i) == what) {
      return IOSIntArray_Get(nil_chk(data), i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_START);
    }
  }
  return -1;
}

- (int)getSpanEndWithId:(id)what {
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  IOSIntArray *data = mSpanData_;
  for (int i = count - 1; i >= 0; i--) {
    if (IOSObjectArray_Get(nil_chk(spans), i) == what) {
      return IOSIntArray_Get(nil_chk(data), i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_END);
    }
  }
  return -1;
}

- (int)getSpanFlagsWithId:(id)what {
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  IOSIntArray *data = mSpanData_;
  for (int i = count - 1; i >= 0; i--) {
    if (IOSObjectArray_Get(nil_chk(spans), i) == what) {
      return IOSIntArray_Get(nil_chk(data), i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_FLAGS);
    }
  }
  return 0;
}

- (IOSObjectArray *)getSpansWithInt:(int)queryStart
                            withInt:(int)queryEnd
                       withIOSClass:(IOSClass *)kind {
  int count = 0;
  int spanCount = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  IOSIntArray *data = mSpanData_;
  IOSObjectArray *ret = nil;
  id ret1 = nil;
  for (int i = 0; i < spanCount; i++) {
    int spanStart = IOSIntArray_Get(nil_chk(data), i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_START);
    int spanEnd = IOSIntArray_Get(data, i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_END);
    if (spanStart > queryEnd) {
      continue;
    }
    if (spanEnd < queryStart) {
      continue;
    }
    if (spanStart != spanEnd && queryStart != queryEnd) {
      if (spanStart == queryEnd) {
        continue;
      }
      if (spanEnd == queryStart) {
        continue;
      }
    }
    if (kind != nil && ![kind isInstance:IOSObjectArray_Get(nil_chk(spans), i)]) {
      continue;
    }
    if (count == 0) {
      ret1 = IOSObjectArray_Get(nil_chk(spans), i);
      count++;
    }
    else {
      if (count == 1) {
        ret = (IOSObjectArray *) check_class_cast([JavaLangReflectArray newInstanceWithIOSClass:kind withInt:spanCount - i + 1], [IOSObjectArray class]);
        (void) IOSObjectArray_Set(nil_chk(ret), 0, ret1);
      }
      int prio = IOSIntArray_Get(data, i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_FLAGS) & AndroidTextSpanned_SPAN_PRIORITY;
      if (prio != 0) {
        int j;
        for (j = 0; j < count; j++) {
          int p = [self getSpanFlagsWithId:IOSObjectArray_Get(nil_chk(ret), j)] & AndroidTextSpanned_SPAN_PRIORITY;
          if (prio > p) {
            break;
          }
        }
        [JavaLangSystem arraycopyWithId:ret withInt:j withId:ret withInt:j + 1 withInt:count - j];
        (void) IOSObjectArray_Set(nil_chk(ret), j, IOSObjectArray_Get(nil_chk(spans), i));
        count++;
      }
      else {
        (void) IOSObjectArray_Set(nil_chk(ret), count++, IOSObjectArray_Get(nil_chk(spans), i));
      }
    }
  }
  if (count == 0) {
    return [AndroidUtilArrayUtils emptyArrayWithIOSClass:kind];
  }
  if (count == 1) {
    ret = (IOSObjectArray *) check_class_cast([JavaLangReflectArray newInstanceWithIOSClass:kind withInt:1], [IOSObjectArray class]);
    (void) IOSObjectArray_Set(nil_chk(ret), 0, ret1);
    return (IOSObjectArray *) check_class_cast(ret, [IOSObjectArray class]);
  }
  if (count == (int) [((IOSObjectArray *) nil_chk(ret)) count]) {
    return (IOSObjectArray *) check_class_cast(ret, [IOSObjectArray class]);
  }
  IOSObjectArray *nret = (IOSObjectArray *) check_class_cast([JavaLangReflectArray newInstanceWithIOSClass:kind withInt:count], [IOSObjectArray class]);
  [JavaLangSystem arraycopyWithId:ret withInt:0 withId:nret withInt:0 withInt:count];
  return (IOSObjectArray *) check_class_cast(nret, [IOSObjectArray class]);
}

- (int)nextSpanTransitionWithInt:(int)start
                         withInt:(int)limit
                    withIOSClass:(IOSClass *)kind {
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  IOSIntArray *data = mSpanData_;
  if (kind == nil) {
    kind = [IOSClass classWithClass:[NSObject class]];
  }
  for (int i = 0; i < count; i++) {
    int st = IOSIntArray_Get(nil_chk(data), i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_START);
    int en = IOSIntArray_Get(data, i * AndroidTextSpannableStringInternal_COLUMNS + AndroidTextSpannableStringInternal_END);
    if (st > start && st < limit && [((IOSClass *) nil_chk(kind)) isInstance:IOSObjectArray_Get(nil_chk(spans), i)]) {
      limit = st;
    }
    if (en > start && en < limit && [((IOSClass *) nil_chk(kind)) isInstance:IOSObjectArray_Get(nil_chk(spans), i)]) {
      limit = en;
    }
  }
  return limit;
}

+ (NSString *)regionWithInt:(int)start
                    withInt:(int)end {
  return [NSString stringWithFormat:@"(%d ... %d)", start, end];
}

- (void)checkRangeWithNSString:(NSString *)operation
                       withInt:(int)start
                       withInt:(int)end {
  if (end < start) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@ %@ has end before start", operation, [AndroidTextSpannableStringInternal regionWithInt:start withInt:end]]];
  }
  int len = [self sequenceLength];
  if (start > len || end > len) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@ %@ ends beyond length %d", operation, [AndroidTextSpannableStringInternal regionWithInt:start withInt:end], len]];
  }
  if (start < 0 || end < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@ %@ starts before 0", operation, [AndroidTextSpannableStringInternal regionWithInt:start withInt:end]]];
  }
}

- (id<JavaLangCharSequence>)subSequenceFrom:(int)param0 to:(int)param1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (void)initialize {
  if (self == [AndroidTextSpannableStringInternal class]) {
    AndroidTextSpannableStringInternal_EMPTY_ = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]];
  }
}

- (void)copyAllFieldsTo:(AndroidTextSpannableStringInternal *)other {
  [super copyAllFieldsTo:other];
  other->mSpanCount_ = mSpanCount_;
  other->mSpanData_ = mSpanData_;
  other->mSpans_ = mSpans_;
  other->mText_ = mText_;
}

- (NSString *)description {
  return [self sequenceDescription];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangCharSequence:withInt:withInt:", NULL, NULL, 0x0, NULL },
    { "charAtWithInt:", NULL, "C", 0x11, NULL },
    { "getCharsWithInt:withInt:withCharArray:withInt:", NULL, "V", 0x11, NULL },
    { "setSpanWithId:withInt:withInt:withInt:", NULL, "V", 0x0, NULL },
    { "removeSpanWithId:", NULL, "V", 0x0, NULL },
    { "getSpansWithInt:withInt:withIOSClass:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "regionWithInt:withInt:", NULL, "LNSString", 0xa, NULL },
    { "checkRangeWithNSString:withInt:withInt:", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "EMPTY_", NULL, 0x18, "LIOSObjectArray" },
    { "START_", NULL, 0x1a, "I" },
    { "END_", NULL, 0x1a, "I" },
    { "FLAGS_", NULL, 0x1a, "I" },
    { "COLUMNS_", NULL, 0x1a, "I" },
  };
  static J2ObjcClassInfo _AndroidTextSpannableStringInternal = { "SpannableStringInternal", "android.text", NULL, 0x400, 8, methods, 5, fields, 0, NULL};
  return &_AndroidTextSpannableStringInternal;
}

@end
