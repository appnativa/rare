//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple-android-htmllabel/android/text/SpannableStringBuilder.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "android/text/NoCopySpan.h"
#include "android/text/SpannableStringBuilder.h"
#include "android/text/Spanned.h"
#include "android/text/TextUtils.h"
#include "android/util/ArrayUtils.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Exception.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Array.h"

@implementation AndroidTextSpannableStringBuilder

- (id)init {
  return [self initAndroidTextSpannableStringBuilderWithJavaLangCharSequence:@""];
}

- (id)initAndroidTextSpannableStringBuilderWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  return [self initAndroidTextSpannableStringBuilderWithJavaLangCharSequence:text withInt:0 withInt:[((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength]];
}

- (id)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  return [self initAndroidTextSpannableStringBuilderWithJavaLangCharSequence:text];
}

- (id)initAndroidTextSpannableStringBuilderWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                            withInt:(int)start
                                                            withInt:(int)end {
  if (self = [super init]) {
    int srclen = end - start;
    int len = [AndroidUtilArrayUtils idealCharArraySizeWithInt:srclen + 1];
    mText_ = [IOSCharArray arrayWithLength:len];
    mGapStart_ = srclen;
    mGapLength_ = len - srclen;
    [AndroidTextTextUtils getCharsWithJavaLangCharSequence:text withInt:start withInt:end withCharArray:mText_ withInt:0];
    mSpanCount_ = 0;
    int alloc_ = [AndroidUtilArrayUtils idealIntArraySizeWithInt:0];
    mSpans_ = [IOSObjectArray arrayWithLength:alloc_ type:[IOSClass classWithClass:[NSObject class]]];
    mSpanStarts_ = [IOSIntArray arrayWithLength:alloc_];
    mSpanEnds_ = [IOSIntArray arrayWithLength:alloc_];
    mSpanFlags_ = [IOSIntArray arrayWithLength:alloc_];
    if ([(id) text conformsToProtocol: @protocol(AndroidTextSpanned)]) {
      id<AndroidTextSpanned> sp = (id<AndroidTextSpanned>) check_protocol_cast(text, @protocol(AndroidTextSpanned));
      IOSObjectArray *spans = [((id<AndroidTextSpanned>) nil_chk(sp)) getSpansWithInt:start withInt:end withIOSClass:[IOSClass classWithClass:[NSObject class]]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(spans)) count]; i++) {
        if ([IOSObjectArray_Get(spans, i) conformsToProtocol: @protocol(AndroidTextNoCopySpan)]) {
          continue;
        }
        int st = [sp getSpanStartWithId:IOSObjectArray_Get(spans, i)] - start;
        int en = [sp getSpanEndWithId:IOSObjectArray_Get(spans, i)] - start;
        int fl = [sp getSpanFlagsWithId:IOSObjectArray_Get(spans, i)];
        if (st < 0) {
          st = 0;
        }
        if (st > end - start) {
          st = end - start;
        }
        if (en < 0) {
          en = 0;
        }
        if (en > end - start) {
          en = end - start;
        }
        [self setSpanWithId:IOSObjectArray_Get(spans, i) withInt:st withInt:en withInt:fl];
      }
    }
  }
  return self;
}

- (id)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                           withInt:(int)start
                           withInt:(int)end {
  return [self initAndroidTextSpannableStringBuilderWithJavaLangCharSequence:text withInt:start withInt:end];
}

+ (AndroidTextSpannableStringBuilder *)valueOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)source {
  if ([(id) source isKindOfClass:[AndroidTextSpannableStringBuilder class]]) {
    return (AndroidTextSpannableStringBuilder *) check_class_cast(source, [AndroidTextSpannableStringBuilder class]);
  }
  else {
    return [[AndroidTextSpannableStringBuilder alloc] initWithJavaLangCharSequence:source];
  }
}

- (unichar)charAtWithInt:(int)where {
  int len = [self sequenceLength];
  if (where < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"charAt: %d < 0", where]];
  }
  else if (where >= len) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"charAt: %d >= length %d", where, len]];
  }
  if (where >= mGapStart_) {
    return IOSCharArray_Get(nil_chk(mText_), where + mGapLength_);
  }
  else {
    return IOSCharArray_Get(nil_chk(mText_), where);
  }
}

- (int)sequenceLength {
  return (int) [((IOSCharArray *) nil_chk(mText_)) count] - mGapLength_;
}

- (void)resizeForWithInt:(int)size {
  int newlen = [AndroidUtilArrayUtils idealCharArraySizeWithInt:size + 1];
  IOSCharArray *newtext = [IOSCharArray arrayWithLength:newlen];
  int after = (int) [((IOSCharArray *) nil_chk(mText_)) count] - (mGapStart_ + mGapLength_);
  [JavaLangSystem arraycopyWithId:mText_ withInt:0 withId:newtext withInt:0 withInt:mGapStart_];
  [JavaLangSystem arraycopyWithId:mText_ withInt:(int) [mText_ count] - after withId:newtext withInt:newlen - after withInt:after];
  for (int i = 0; i < mSpanCount_; i++) {
    if (IOSIntArray_Get(nil_chk(mSpanStarts_), i) > mGapStart_) {
      (*IOSIntArray_GetRef(mSpanStarts_, i)) += newlen - (int) [mText_ count];
    }
    if (IOSIntArray_Get(nil_chk(mSpanEnds_), i) > mGapStart_) {
      (*IOSIntArray_GetRef(mSpanEnds_, i)) += newlen - (int) [mText_ count];
    }
  }
  int oldlen = (int) [mText_ count];
  mText_ = newtext;
  mGapLength_ += (int) [mText_ count] - oldlen;
  if (mGapLength_ < 1) {
    [((JavaLangException *) [[JavaLangException alloc] initWithNSString:@"mGapLength < 1"]) printStackTrace];
  }
}

- (void)moveGapToWithInt:(int)where {
  if (where == mGapStart_) {
    return;
  }
  BOOL atend = (where == [self sequenceLength]);
  if (where < mGapStart_) {
    int overlap = mGapStart_ - where;
    [JavaLangSystem arraycopyWithId:mText_ withInt:where withId:mText_ withInt:mGapStart_ + mGapLength_ - overlap withInt:overlap];
  }
  else {
    int overlap = where - mGapStart_;
    [JavaLangSystem arraycopyWithId:mText_ withInt:where + mGapLength_ - overlap withId:mText_ withInt:mGapStart_ withInt:overlap];
  }
  for (int i = 0; i < mSpanCount_; i++) {
    int start = IOSIntArray_Get(nil_chk(mSpanStarts_), i);
    int end = IOSIntArray_Get(nil_chk(mSpanEnds_), i);
    if (start > mGapStart_) {
      start -= mGapLength_;
    }
    if (start > where) {
      start += mGapLength_;
    }
    else if (start == where) {
      int flag = (IOSIntArray_Get(nil_chk(mSpanFlags_), i) & AndroidTextSpannableStringBuilder_START_MASK) >> AndroidTextSpannableStringBuilder_START_SHIFT;
      if (flag == AndroidTextSpannableStringBuilder_POINT || (atend && flag == AndroidTextSpannableStringBuilder_PARAGRAPH)) {
        start += mGapLength_;
      }
    }
    if (end > mGapStart_) {
      end -= mGapLength_;
    }
    if (end > where) {
      end += mGapLength_;
    }
    else if (end == where) {
      int flag = (IOSIntArray_Get(nil_chk(mSpanFlags_), i) & AndroidTextSpannableStringBuilder_END_MASK);
      if (flag == AndroidTextSpannableStringBuilder_POINT || (atend && flag == AndroidTextSpannableStringBuilder_PARAGRAPH)) {
        end += mGapLength_;
      }
    }
    (*IOSIntArray_GetRef(mSpanStarts_, i)) = start;
    (*IOSIntArray_GetRef(mSpanEnds_, i)) = end;
  }
  mGapStart_ = where;
}

- (void)clearSpans {
  for (int i = mSpanCount_ - 1; i >= 0; i--) {
    int ostart = IOSIntArray_Get(nil_chk(mSpanStarts_), i);
    int oend = IOSIntArray_Get(nil_chk(mSpanEnds_), i);
    if (ostart > mGapStart_) {
      ostart -= mGapLength_;
    }
    if (oend > mGapStart_) {
      oend -= mGapLength_;
    }
    mSpanCount_ = i;
    (void) IOSObjectArray_Set(nil_chk(mSpans_), i, nil);
  }
}

- (void)setSpanWithId:(id)what
              withInt:(int)start
              withInt:(int)end
              withInt:(int)flags {
  [self setSpanWithBoolean:YES withId:what withInt:start withInt:end withInt:flags];
}

- (void)setSpanWithBoolean:(BOOL)send
                    withId:(id)what
                   withInt:(int)start
                   withInt:(int)end
                   withInt:(int)flags {
  [self checkRangeWithNSString:@"setSpan" withInt:start withInt:end];
  if ((flags & AndroidTextSpannableStringBuilder_START_MASK) == (AndroidTextSpannableStringBuilder_PARAGRAPH << AndroidTextSpannableStringBuilder_START_SHIFT)) {
    if (start != 0 && start != [self sequenceLength]) {
      unichar c = [self charAtWithInt:start - 1];
      if (c != 0x000a) {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:@"PARAGRAPH span must start at paragraph boundary"];
      }
    }
  }
  if ((flags & AndroidTextSpannableStringBuilder_END_MASK) == AndroidTextSpannableStringBuilder_PARAGRAPH) {
    if (end != 0 && end != [self sequenceLength]) {
      unichar c = [self charAtWithInt:end - 1];
      if (c != 0x000a) {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:@"PARAGRAPH span must end at paragraph boundary"];
      }
    }
  }
  if (start > mGapStart_) {
    start += mGapLength_;
  }
  else if (start == mGapStart_) {
    int flag = (flags & AndroidTextSpannableStringBuilder_START_MASK) >> AndroidTextSpannableStringBuilder_START_SHIFT;
    if (flag == AndroidTextSpannableStringBuilder_POINT || (flag == AndroidTextSpannableStringBuilder_PARAGRAPH && start == [self sequenceLength])) {
      start += mGapLength_;
    }
  }
  if (end > mGapStart_) {
    end += mGapLength_;
  }
  else if (end == mGapStart_) {
    int flag = (flags & AndroidTextSpannableStringBuilder_END_MASK);
    if (flag == AndroidTextSpannableStringBuilder_POINT || (flag == AndroidTextSpannableStringBuilder_PARAGRAPH && end == [self sequenceLength])) {
      end += mGapLength_;
    }
  }
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  for (int i = 0; i < count; i++) {
    if (IOSObjectArray_Get(nil_chk(spans), i) == what) {
      int ostart = IOSIntArray_Get(nil_chk(mSpanStarts_), i);
      int oend = IOSIntArray_Get(nil_chk(mSpanEnds_), i);
      if (ostart > mGapStart_) {
        ostart -= mGapLength_;
      }
      if (oend > mGapStart_) {
        oend -= mGapLength_;
      }
      (*IOSIntArray_GetRef(mSpanStarts_, i)) = start;
      (*IOSIntArray_GetRef(mSpanEnds_, i)) = end;
      (*IOSIntArray_GetRef(nil_chk(mSpanFlags_), i)) = flags;
      return;
    }
  }
  if (mSpanCount_ + 1 >= (int) [((IOSObjectArray *) nil_chk(mSpans_)) count]) {
    int newsize = [AndroidUtilArrayUtils idealIntArraySizeWithInt:mSpanCount_ + 1];
    IOSObjectArray *newspans = [IOSObjectArray arrayWithLength:newsize type:[IOSClass classWithClass:[NSObject class]]];
    IOSIntArray *newspanstarts = [IOSIntArray arrayWithLength:newsize];
    IOSIntArray *newspanends = [IOSIntArray arrayWithLength:newsize];
    IOSIntArray *newspanflags = [IOSIntArray arrayWithLength:newsize];
    [JavaLangSystem arraycopyWithId:mSpans_ withInt:0 withId:newspans withInt:0 withInt:mSpanCount_];
    [JavaLangSystem arraycopyWithId:mSpanStarts_ withInt:0 withId:newspanstarts withInt:0 withInt:mSpanCount_];
    [JavaLangSystem arraycopyWithId:mSpanEnds_ withInt:0 withId:newspanends withInt:0 withInt:mSpanCount_];
    [JavaLangSystem arraycopyWithId:mSpanFlags_ withInt:0 withId:newspanflags withInt:0 withInt:mSpanCount_];
    mSpans_ = newspans;
    mSpanStarts_ = newspanstarts;
    mSpanEnds_ = newspanends;
    mSpanFlags_ = newspanflags;
  }
  (void) IOSObjectArray_Set(mSpans_, mSpanCount_, what);
  (*IOSIntArray_GetRef(nil_chk(mSpanStarts_), mSpanCount_)) = start;
  (*IOSIntArray_GetRef(nil_chk(mSpanEnds_), mSpanCount_)) = end;
  (*IOSIntArray_GetRef(nil_chk(mSpanFlags_), mSpanCount_)) = flags;
  mSpanCount_++;
}

- (void)removeSpanWithId:(id)what {
  for (int i = mSpanCount_ - 1; i >= 0; i--) {
    if (IOSObjectArray_Get(nil_chk(mSpans_), i) == what) {
      int ostart = IOSIntArray_Get(nil_chk(mSpanStarts_), i);
      int oend = IOSIntArray_Get(nil_chk(mSpanEnds_), i);
      if (ostart > mGapStart_) {
        ostart -= mGapLength_;
      }
      if (oend > mGapStart_) {
        oend -= mGapLength_;
      }
      int count = mSpanCount_ - (i + 1);
      [JavaLangSystem arraycopyWithId:mSpans_ withInt:i + 1 withId:mSpans_ withInt:i withInt:count];
      [JavaLangSystem arraycopyWithId:mSpanStarts_ withInt:i + 1 withId:mSpanStarts_ withInt:i withInt:count];
      [JavaLangSystem arraycopyWithId:mSpanEnds_ withInt:i + 1 withId:mSpanEnds_ withInt:i withInt:count];
      [JavaLangSystem arraycopyWithId:mSpanFlags_ withInt:i + 1 withId:mSpanFlags_ withInt:i withInt:count];
      mSpanCount_--;
      (void) IOSObjectArray_Set(mSpans_, mSpanCount_, nil);
      return;
    }
  }
}

- (int)getSpanStartWithId:(id)what {
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  for (int i = count - 1; i >= 0; i--) {
    if (IOSObjectArray_Get(nil_chk(spans), i) == what) {
      int where = IOSIntArray_Get(nil_chk(mSpanStarts_), i);
      if (where > mGapStart_) {
        where -= mGapLength_;
      }
      return where;
    }
  }
  return -1;
}

- (int)getSpanEndWithId:(id)what {
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  for (int i = count - 1; i >= 0; i--) {
    if (IOSObjectArray_Get(nil_chk(spans), i) == what) {
      int where = IOSIntArray_Get(nil_chk(mSpanEnds_), i);
      if (where > mGapStart_) {
        where -= mGapLength_;
      }
      return where;
    }
  }
  return -1;
}

- (int)getSpanFlagsWithId:(id)what {
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  for (int i = count - 1; i >= 0; i--) {
    if (IOSObjectArray_Get(nil_chk(spans), i) == what) {
      return IOSIntArray_Get(nil_chk(mSpanFlags_), i);
    }
  }
  return 0;
}

- (IOSObjectArray *)getSpansWithInt:(int)queryStart
                            withInt:(int)queryEnd
                       withIOSClass:(IOSClass *)kind {
  int spanCount = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  IOSIntArray *starts = mSpanStarts_;
  IOSIntArray *ends = mSpanEnds_;
  IOSIntArray *flags = mSpanFlags_;
  int gapstart = mGapStart_;
  int gaplen = mGapLength_;
  int count = 0;
  IOSObjectArray *ret = nil;
  id ret1 = nil;
  for (int i = 0; i < spanCount; i++) {
    int spanStart = IOSIntArray_Get(nil_chk(starts), i);
    int spanEnd = IOSIntArray_Get(nil_chk(ends), i);
    if (spanStart > gapstart) {
      spanStart -= gaplen;
    }
    if (spanEnd > gapstart) {
      spanEnd -= gaplen;
    }
    if (spanStart > queryEnd) {
      continue;
    }
    if (spanEnd < queryStart) {
      continue;
    }
    if (spanStart != spanEnd && queryStart != queryEnd) {
      if (spanStart == queryEnd) {
        continue;
      }
      if (spanEnd == queryStart) {
        continue;
      }
    }
    if (kind != nil && ![kind isInstance:IOSObjectArray_Get(nil_chk(spans), i)]) {
      continue;
    }
    if (count == 0) {
      ret1 = IOSObjectArray_Get(nil_chk(spans), i);
      count++;
    }
    else {
      if (count == 1) {
        ret = (IOSObjectArray *) check_class_cast([JavaLangReflectArray newInstanceWithIOSClass:kind withInt:spanCount - i + 1], [IOSObjectArray class]);
        (void) IOSObjectArray_Set(nil_chk(ret), 0, ret1);
      }
      int prio = IOSIntArray_Get(nil_chk(flags), i) & AndroidTextSpanned_SPAN_PRIORITY;
      if (prio != 0) {
        int j;
        for (j = 0; j < count; j++) {
          int p = [self getSpanFlagsWithId:IOSObjectArray_Get(nil_chk(ret), j)] & AndroidTextSpanned_SPAN_PRIORITY;
          if (prio > p) {
            break;
          }
        }
        [JavaLangSystem arraycopyWithId:ret withInt:j withId:ret withInt:j + 1 withInt:count - j];
        (void) IOSObjectArray_Set(nil_chk(ret), j, IOSObjectArray_Get(nil_chk(spans), i));
        count++;
      }
      else {
        (void) IOSObjectArray_Set(nil_chk(ret), count++, IOSObjectArray_Get(nil_chk(spans), i));
      }
    }
  }
  if (count == 0) {
    return [AndroidUtilArrayUtils emptyArrayWithIOSClass:kind];
  }
  if (count == 1) {
    ret = (IOSObjectArray *) check_class_cast([JavaLangReflectArray newInstanceWithIOSClass:kind withInt:1], [IOSObjectArray class]);
    (void) IOSObjectArray_Set(nil_chk(ret), 0, ret1);
    return (IOSObjectArray *) check_class_cast(ret, [IOSObjectArray class]);
  }
  if (count == (int) [((IOSObjectArray *) nil_chk(ret)) count]) {
    return (IOSObjectArray *) check_class_cast(ret, [IOSObjectArray class]);
  }
  IOSObjectArray *nret = (IOSObjectArray *) check_class_cast([JavaLangReflectArray newInstanceWithIOSClass:kind withInt:count], [IOSObjectArray class]);
  [JavaLangSystem arraycopyWithId:ret withInt:0 withId:nret withInt:0 withInt:count];
  return (IOSObjectArray *) check_class_cast(nret, [IOSObjectArray class]);
}

- (int)nextSpanTransitionWithInt:(int)start
                         withInt:(int)limit
                    withIOSClass:(IOSClass *)kind {
  int count = mSpanCount_;
  IOSObjectArray *spans = mSpans_;
  IOSIntArray *starts = mSpanStarts_;
  IOSIntArray *ends = mSpanEnds_;
  int gapstart = mGapStart_;
  int gaplen = mGapLength_;
  if (kind == nil) {
    kind = [IOSClass classWithClass:[NSObject class]];
  }
  for (int i = 0; i < count; i++) {
    int st = IOSIntArray_Get(nil_chk(starts), i);
    int en = IOSIntArray_Get(nil_chk(ends), i);
    if (st > gapstart) {
      st -= gaplen;
    }
    if (en > gapstart) {
      en -= gaplen;
    }
    if (st > start && st < limit && [((IOSClass *) nil_chk(kind)) isInstance:IOSObjectArray_Get(nil_chk(spans), i)]) {
      limit = st;
    }
    if (en > start && en < limit && [((IOSClass *) nil_chk(kind)) isInstance:IOSObjectArray_Get(nil_chk(spans), i)]) {
      limit = en;
    }
  }
  return limit;
}

- (id<JavaLangCharSequence>)subSequenceFrom:(int)start to:(int)end {
  return [[AndroidTextSpannableStringBuilder alloc] initWithJavaLangCharSequence:self withInt:start withInt:end];
}

- (void)getCharsWithInt:(int)start
                withInt:(int)end
          withCharArray:(IOSCharArray *)dest
                withInt:(int)destoff {
  [self checkRangeWithNSString:@"getChars" withInt:start withInt:end];
  if (end <= mGapStart_) {
    [JavaLangSystem arraycopyWithId:mText_ withInt:start withId:dest withInt:destoff withInt:end - start];
  }
  else if (start >= mGapStart_) {
    [JavaLangSystem arraycopyWithId:mText_ withInt:start + mGapLength_ withId:dest withInt:destoff withInt:end - start];
  }
  else {
    [JavaLangSystem arraycopyWithId:mText_ withInt:start withId:dest withInt:destoff withInt:mGapStart_ - start];
    [JavaLangSystem arraycopyWithId:mText_ withInt:mGapStart_ + mGapLength_ withId:dest withInt:destoff + (mGapStart_ - start) withInt:end - mGapStart_];
  }
}

- (NSString *)sequenceDescription {
  int len = [self sequenceLength];
  IOSCharArray *buf = [IOSCharArray arrayWithLength:len];
  [self getCharsWithInt:0 withInt:len withCharArray:buf withInt:0];
  return [NSString stringWithCharacters:buf];
}

+ (NSString *)regionWithInt:(int)start
                    withInt:(int)end {
  return [NSString stringWithFormat:@"(%d ... %d)", start, end];
}

- (void)checkRangeWithNSString:(NSString *)operation
                       withInt:(int)start
                       withInt:(int)end {
  if (end < start) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@ %@ has end before start", operation, [AndroidTextSpannableStringBuilder regionWithInt:start withInt:end]]];
  }
  int len = [self sequenceLength];
  if (start > len || end > len) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@ %@ ends beyond length %d", operation, [AndroidTextSpannableStringBuilder regionWithInt:start withInt:end], len]];
  }
  if (start < 0 || end < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@ %@ starts before 0", operation, [AndroidTextSpannableStringBuilder regionWithInt:start withInt:end]]];
  }
}

- (void)dispose {
  if (mSpans_ != nil) {
    for (int i = 0; i < (int) [mSpans_ count]; i++) {
      if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:IOSObjectArray_Get(mSpans_, i)]) {
        [self cleanArrayWithNSObjectArray:(IOSObjectArray *) check_class_cast(IOSObjectArray_Get(mSpans_, i), [IOSObjectArray class])];
      }
      (void) IOSObjectArray_Set(mSpans_, i, nil);
    }
    mSpans_ = nil;
  }
}

- (void)cleanArrayWithNSObjectArray:(IOSObjectArray *)a {
  int len = (int) [((IOSObjectArray *) nil_chk(a)) count];
  for (int i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(a, i, nil);
  }
}

- (AndroidTextSpannableStringBuilder *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  int length = [self sequenceLength];
  return [self replaceWithInt:length withInt:length withJavaLangCharSequence:text withInt:0 withInt:[((id<JavaLangCharSequence>) nil_chk(text)) sequenceLength]];
}

- (AndroidTextSpannableStringBuilder *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                                              withInt:(int)start
                                                              withInt:(int)end {
  int length = [self sequenceLength];
  return [self replaceWithInt:length withInt:length withJavaLangCharSequence:text withInt:start withInt:end];
}

- (AndroidTextSpannableStringBuilder *)appendWithChar:(unichar)text {
  return [self appendWithJavaLangCharSequence:[NSString valueOfChar:text]];
}

- (int)changeWithInt:(int)start
             withInt:(int)end
withJavaLangCharSequence:(id<JavaLangCharSequence>)tb
             withInt:(int)tbstart
             withInt:(int)tbend {
  return [self changeWithBoolean:YES withInt:start withInt:end withJavaLangCharSequence:tb withInt:tbstart withInt:tbend];
}

- (int)changeWithBoolean:(BOOL)notify
                 withInt:(int)start
                 withInt:(int)end
withJavaLangCharSequence:(id<JavaLangCharSequence>)tb
                 withInt:(int)tbstart
                 withInt:(int)tbend {
  [self checkRangeWithNSString:@"replace" withInt:start withInt:end];
  int ret = tbend - tbstart;
  for (int i = mSpanCount_ - 1; i >= 0; i--) {
    if ((IOSIntArray_Get(nil_chk(mSpanFlags_), i) & AndroidTextSpanned_SPAN_PARAGRAPH) == AndroidTextSpanned_SPAN_PARAGRAPH) {
      int st = IOSIntArray_Get(nil_chk(mSpanStarts_), i);
      if (st > mGapStart_) {
        st -= mGapLength_;
      }
      int en = IOSIntArray_Get(nil_chk(mSpanEnds_), i);
      if (en > mGapStart_) {
        en -= mGapLength_;
      }
      int ost = st;
      int oen = en;
      int clen = [self sequenceLength];
      if (st > start && st <= end) {
        for (st = end; st < clen; st++) {
          if (st > end && [self charAtWithInt:st - 1] == 0x000a) {
            break;
          }
        }
      }
      if (en > start && en <= end) {
        for (en = end; en < clen; en++) {
          if (en > end && [self charAtWithInt:en - 1] == 0x000a) {
            break;
          }
        }
      }
      if (st != ost || en != oen) {
        [self setSpanWithId:IOSObjectArray_Get(nil_chk(mSpans_), i) withInt:st withInt:en withInt:IOSIntArray_Get(mSpanFlags_, i)];
      }
    }
  }
  [self moveGapToWithInt:end];
  if (tbend - tbstart >= mGapLength_ + (end - start)) {
    [self resizeForWithInt:(int) [((IOSCharArray *) nil_chk(mText_)) count] - mGapLength_ + tbend - tbstart - (end - start)];
  }
  mGapStart_ += tbend - tbstart - (end - start);
  mGapLength_ -= tbend - tbstart - (end - start);
  if (mGapLength_ < 1) {
    [((JavaLangException *) [[JavaLangException alloc] initWithNSString:@"mGapLength < 1"]) printStackTrace];
  }
  [AndroidTextTextUtils getCharsWithJavaLangCharSequence:tb withInt:tbstart withInt:tbend withCharArray:mText_ withInt:start];
  if ([(id) tb conformsToProtocol: @protocol(AndroidTextSpanned)]) {
    id<AndroidTextSpanned> sp = (id<AndroidTextSpanned>) check_protocol_cast(tb, @protocol(AndroidTextSpanned));
    IOSObjectArray *spans = [((id<AndroidTextSpanned>) nil_chk(sp)) getSpansWithInt:tbstart withInt:tbend withIOSClass:[IOSClass classWithClass:[NSObject class]]];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(spans)) count]; i++) {
      int st = [sp getSpanStartWithId:IOSObjectArray_Get(spans, i)];
      int en = [sp getSpanEndWithId:IOSObjectArray_Get(spans, i)];
      if (st < tbstart) {
        st = tbstart;
      }
      if (en > tbend) {
        en = tbend;
      }
      if ([self getSpanStartWithId:IOSObjectArray_Get(spans, i)] < 0) {
        [self setSpanWithBoolean:NO withId:IOSObjectArray_Get(spans, i) withInt:st - tbstart + start withInt:en - tbstart + start withInt:[sp getSpanFlagsWithId:IOSObjectArray_Get(spans, i)]];
      }
    }
  }
  if (tbend > tbstart && end - start == 0) {
    return ret;
  }
  BOOL atend = (mGapStart_ + mGapLength_ == (int) [((IOSCharArray *) nil_chk(mText_)) count]);
  for (int i = mSpanCount_ - 1; i >= 0; i--) {
    if (IOSIntArray_Get(nil_chk(mSpanStarts_), i) >= start && IOSIntArray_Get(mSpanStarts_, i) < mGapStart_ + mGapLength_) {
      int flag = (IOSIntArray_Get(nil_chk(mSpanFlags_), i) & AndroidTextSpannableStringBuilder_START_MASK) >> AndroidTextSpannableStringBuilder_START_SHIFT;
      if (flag == AndroidTextSpannableStringBuilder_POINT || (flag == AndroidTextSpannableStringBuilder_PARAGRAPH && atend)) {
        (*IOSIntArray_GetRef(mSpanStarts_, i)) = mGapStart_ + mGapLength_;
      }
      else {
        (*IOSIntArray_GetRef(mSpanStarts_, i)) = start;
      }
    }
    if (IOSIntArray_Get(nil_chk(mSpanEnds_), i) >= start && IOSIntArray_Get(mSpanEnds_, i) < mGapStart_ + mGapLength_) {
      int flag = (IOSIntArray_Get(nil_chk(mSpanFlags_), i) & AndroidTextSpannableStringBuilder_END_MASK);
      if (flag == AndroidTextSpannableStringBuilder_POINT || (flag == AndroidTextSpannableStringBuilder_PARAGRAPH && atend)) {
        (*IOSIntArray_GetRef(mSpanEnds_, i)) = mGapStart_ + mGapLength_;
      }
      else {
        (*IOSIntArray_GetRef(mSpanEnds_, i)) = start;
      }
    }
    if (IOSIntArray_Get(mSpanEnds_, i) < IOSIntArray_Get(mSpanStarts_, i)) {
      [JavaLangSystem arraycopyWithId:mSpans_ withInt:i + 1 withId:mSpans_ withInt:i withInt:mSpanCount_ - (i + 1)];
      [JavaLangSystem arraycopyWithId:mSpanStarts_ withInt:i + 1 withId:mSpanStarts_ withInt:i withInt:mSpanCount_ - (i + 1)];
      [JavaLangSystem arraycopyWithId:mSpanEnds_ withInt:i + 1 withId:mSpanEnds_ withInt:i withInt:mSpanCount_ - (i + 1)];
      [JavaLangSystem arraycopyWithId:mSpanFlags_ withInt:i + 1 withId:mSpanFlags_ withInt:i withInt:mSpanCount_ - (i + 1)];
      mSpanCount_--;
    }
  }
  return ret;
}

- (AndroidTextSpannableStringBuilder *)replaceWithInt:(int)start
                                              withInt:(int)end
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)tb {
  return [self replaceWithInt:start withInt:end withJavaLangCharSequence:tb withInt:0 withInt:[((id<JavaLangCharSequence>) nil_chk(tb)) sequenceLength]];
}

- (AndroidTextSpannableStringBuilder *)replaceWithInt:(int)start
                                              withInt:(int)end
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)tb
                                              withInt:(int)tbstart
                                              withInt:(int)tbend {
  if (end == start && tbstart == tbend) {
    return self;
  }
  [self changeWithInt:start withInt:end withJavaLangCharSequence:tb withInt:tbstart withInt:tbend];
  return self;
}

- (void)copyAllFieldsTo:(AndroidTextSpannableStringBuilder *)other {
  [super copyAllFieldsTo:other];
  other->mGapLength_ = mGapLength_;
  other->mGapStart_ = mGapStart_;
  other->mSpanCount_ = mSpanCount_;
  other->mSpanEnds_ = mSpanEnds_;
  other->mSpanFlags_ = mSpanFlags_;
  other->mSpanStarts_ = mSpanStarts_;
  other->mSpans_ = mSpans_;
  other->mText_ = mText_;
}

- (NSString *)description {
  return [self sequenceDescription];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "valueOfWithJavaLangCharSequence:", NULL, "LAndroidTextSpannableStringBuilder", 0x9, NULL },
    { "resizeForWithInt:", NULL, "V", 0x2, NULL },
    { "moveGapToWithInt:", NULL, "V", 0x2, NULL },
    { "setSpanWithBoolean:withId:withInt:withInt:withInt:", NULL, "V", 0x2, NULL },
    { "getSpansWithInt:withInt:withIOSClass:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "regionWithInt:withInt:", NULL, "LNSString", 0xa, NULL },
    { "checkRangeWithNSString:withInt:withInt:", NULL, "V", 0x2, NULL },
    { "cleanArrayWithNSObjectArray:", NULL, "V", 0x2, NULL },
    { "appendWithJavaLangCharSequence:", NULL, "LAndroidTextSpannableStringBuilder", 0x1, NULL },
    { "appendWithJavaLangCharSequence:withInt:withInt:", NULL, "LAndroidTextSpannableStringBuilder", 0x1, NULL },
    { "appendWithChar:", NULL, "LAndroidTextSpannableStringBuilder", 0x1, NULL },
    { "changeWithInt:withInt:withJavaLangCharSequence:withInt:withInt:", NULL, "I", 0x2, NULL },
    { "changeWithBoolean:withInt:withInt:withJavaLangCharSequence:withInt:withInt:", NULL, "I", 0x2, NULL },
    { "replaceWithInt:withInt:withJavaLangCharSequence:", NULL, "LAndroidTextSpannableStringBuilder", 0x1, NULL },
    { "replaceWithInt:withInt:withJavaLangCharSequence:withInt:withInt:", NULL, "LAndroidTextSpannableStringBuilder", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "POINT_", NULL, 0x1a, "I" },
    { "PARAGRAPH_", NULL, 0x1a, "I" },
    { "START_MASK_", NULL, 0x1a, "I" },
    { "END_MASK_", NULL, 0x1a, "I" },
    { "START_SHIFT_", NULL, 0x1a, "I" },
  };
  static J2ObjcClassInfo _AndroidTextSpannableStringBuilder = { "SpannableStringBuilder", "android.text", NULL, 0x1, 15, methods, 5, fields, 0, NULL};
  return &_AndroidTextSpannableStringBuilder;
}

@end
