//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple-android-htmllabel/android/text/TextUtils.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "android/text/GetChars.h"
#include "android/text/Spannable.h"
#include "android/text/SpannableString.h"
#include "android/text/Spanned.h"
#include "android/text/SpannedString.h"
#include "android/text/TextUtils.h"
#include "android/util/ArrayUtils.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/regex/Pattern.h"

@implementation AndroidTextTextUtils

static IOSObjectArray * AndroidTextTextUtils_EMPTY_STRING_ARRAY_;
static id AndroidTextTextUtils_sLock_;
static IOSCharArray * AndroidTextTextUtils_sTemp_ = nil;

+ (IOSObjectArray *)EMPTY_STRING_ARRAY {
  return AndroidTextTextUtils_EMPTY_STRING_ARRAY_;
}

+ (void)setEMPTY_STRING_ARRAY:(IOSObjectArray *)EMPTY_STRING_ARRAY {
  AndroidTextTextUtils_EMPTY_STRING_ARRAY_ = EMPTY_STRING_ARRAY;
}

+ (int)ALIGNMENT_SPAN {
  return AndroidTextTextUtils_ALIGNMENT_SPAN;
}

+ (int)FOREGROUND_COLOR_SPAN {
  return AndroidTextTextUtils_FOREGROUND_COLOR_SPAN;
}

+ (int)RELATIVE_SIZE_SPAN {
  return AndroidTextTextUtils_RELATIVE_SIZE_SPAN;
}

+ (int)SCALE_X_SPAN {
  return AndroidTextTextUtils_SCALE_X_SPAN;
}

+ (int)STRIKETHROUGH_SPAN {
  return AndroidTextTextUtils_STRIKETHROUGH_SPAN;
}

+ (int)UNDERLINE_SPAN {
  return AndroidTextTextUtils_UNDERLINE_SPAN;
}

+ (int)STYLE_SPAN {
  return AndroidTextTextUtils_STYLE_SPAN;
}

+ (int)BULLET_SPAN {
  return AndroidTextTextUtils_BULLET_SPAN;
}

+ (int)QUOTE_SPAN {
  return AndroidTextTextUtils_QUOTE_SPAN;
}

+ (int)LEADING_MARGIN_SPAN {
  return AndroidTextTextUtils_LEADING_MARGIN_SPAN;
}

+ (int)URL_SPAN {
  return AndroidTextTextUtils_URL_SPAN;
}

+ (int)BACKGROUND_COLOR_SPAN {
  return AndroidTextTextUtils_BACKGROUND_COLOR_SPAN;
}

+ (int)TYPEFACE_SPAN {
  return AndroidTextTextUtils_TYPEFACE_SPAN;
}

+ (int)SUPERSCRIPT_SPAN {
  return AndroidTextTextUtils_SUPERSCRIPT_SPAN;
}

+ (int)SUBSCRIPT_SPAN {
  return AndroidTextTextUtils_SUBSCRIPT_SPAN;
}

+ (int)ABSOLUTE_SIZE_SPAN {
  return AndroidTextTextUtils_ABSOLUTE_SIZE_SPAN;
}

+ (int)TEXT_APPEARANCE_SPAN {
  return AndroidTextTextUtils_TEXT_APPEARANCE_SPAN;
}

+ (int)ANNOTATION {
  return AndroidTextTextUtils_ANNOTATION;
}

+ (int)CSS_STYLE_SPAN {
  return AndroidTextTextUtils_CSS_STYLE_SPAN;
}

+ (int)CENTER_SPAN {
  return AndroidTextTextUtils_CENTER_SPAN;
}

+ (id)sLock {
  return AndroidTextTextUtils_sLock_;
}

+ (void)setSLock:(id)sLock {
  AndroidTextTextUtils_sLock_ = sLock;
}

+ (IOSCharArray *)sTemp {
  return AndroidTextTextUtils_sTemp_;
}

+ (void)setSTemp:(IOSCharArray *)sTemp {
  AndroidTextTextUtils_sTemp_ = sTemp;
}

- (id)init {
  return [super init];
}

+ (void)getCharsWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                 withInt:(int)start
                                 withInt:(int)end
                           withCharArray:(IOSCharArray *)dest
                                 withInt:(int)destoff {
  if ([(id) s isKindOfClass:[NSString class]]) [((NSString *) check_class_cast(s, [NSString class])) getChars:start sourceEnd:end destination:dest destinationBegin:destoff];
  else if ([(id) s isKindOfClass:[JavaLangStringBuffer class]]) [((JavaLangStringBuffer *) check_class_cast(s, [JavaLangStringBuffer class])) getCharsWithInt:start withInt:end withCharArray:dest withInt:destoff];
  else if ([(id) s isKindOfClass:[JavaLangStringBuilder class]]) [((JavaLangStringBuilder *) check_class_cast(s, [JavaLangStringBuilder class])) getCharsWithInt:start withInt:end withCharArray:dest withInt:destoff];
  else if ([(id) s conformsToProtocol: @protocol(AndroidTextGetChars)]) [((id<AndroidTextGetChars>) check_protocol_cast(s, @protocol(AndroidTextGetChars))) getCharsWithInt:start withInt:end withCharArray:dest withInt:destoff];
  else {
    for (int i = start; i < end; i++) (*IOSCharArray_GetRef(nil_chk(dest), destoff++)) = [((id<JavaLangCharSequence>) nil_chk(s)) charAtWithInt:i];
  }
}

+ (int)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                              withChar:(unichar)ch {
  return [AndroidTextTextUtils indexOfWithJavaLangCharSequence:s withChar:ch withInt:0];
}

+ (int)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                              withChar:(unichar)ch
                               withInt:(int)start {
  if ([(id) s isKindOfClass:[NSString class]]) return [((NSString *) check_class_cast(s, [NSString class])) indexOf:ch fromIndex:start];
  return [AndroidTextTextUtils indexOfWithJavaLangCharSequence:s withChar:ch withInt:start withInt:[((id<JavaLangCharSequence>) nil_chk(s)) sequenceLength]];
}

+ (int)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                              withChar:(unichar)ch
                               withInt:(int)start
                               withInt:(int)end {
  if ([(id) s conformsToProtocol: @protocol(AndroidTextGetChars)] || [(id) s isKindOfClass:[JavaLangStringBuffer class]] || [(id) s isKindOfClass:[JavaLangStringBuilder class]] || [(id) s isKindOfClass:[NSString class]]) {
    int INDEX_INCREMENT = 500;
    IOSCharArray *temp = [AndroidTextTextUtils obtainWithInt:INDEX_INCREMENT];
    while (start < end) {
      int segend = start + INDEX_INCREMENT;
      if (segend > end) segend = end;
      [AndroidTextTextUtils getCharsWithJavaLangCharSequence:s withInt:start withInt:segend withCharArray:temp withInt:0];
      int count = segend - start;
      for (int i = 0; i < count; i++) {
        if (IOSCharArray_Get(nil_chk(temp), i) == ch) {
          [AndroidTextTextUtils recycleWithCharArray:temp];
          return i + start;
        }
      }
      start = segend;
    }
    [AndroidTextTextUtils recycleWithCharArray:temp];
    return -1;
  }
  for (int i = start; i < end; i++) if ([((id<JavaLangCharSequence>) nil_chk(s)) charAtWithInt:i] == ch) return i;
  return -1;
}

+ (int)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                  withChar:(unichar)ch {
  return [AndroidTextTextUtils lastIndexOfWithJavaLangCharSequence:s withChar:ch withInt:[((id<JavaLangCharSequence>) nil_chk(s)) sequenceLength] - 1];
}

+ (int)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                  withChar:(unichar)ch
                                   withInt:(int)last {
  if ([(id) s isKindOfClass:[NSString class]]) return [((NSString *) check_class_cast(s, [NSString class])) lastIndexOf:ch fromIndex:last];
  return [AndroidTextTextUtils lastIndexOfWithJavaLangCharSequence:s withChar:ch withInt:0 withInt:last];
}

+ (int)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                  withChar:(unichar)ch
                                   withInt:(int)start
                                   withInt:(int)last {
  if (last < 0) return -1;
  if (last >= [((id<JavaLangCharSequence>) nil_chk(s)) sequenceLength]) last = [s sequenceLength] - 1;
  int end = last + 1;
  if ([(id) s conformsToProtocol: @protocol(AndroidTextGetChars)] || [(id) s isKindOfClass:[JavaLangStringBuffer class]] || [(id) s isKindOfClass:[JavaLangStringBuilder class]] || [(id) s isKindOfClass:[NSString class]]) {
    int INDEX_INCREMENT = 500;
    IOSCharArray *temp = [AndroidTextTextUtils obtainWithInt:INDEX_INCREMENT];
    while (start < end) {
      int segstart = end - INDEX_INCREMENT;
      if (segstart < start) segstart = start;
      [AndroidTextTextUtils getCharsWithJavaLangCharSequence:s withInt:segstart withInt:end withCharArray:temp withInt:0];
      int count = end - segstart;
      for (int i = count - 1; i >= 0; i--) {
        if (IOSCharArray_Get(nil_chk(temp), i) == ch) {
          [AndroidTextTextUtils recycleWithCharArray:temp];
          return i + segstart;
        }
      }
      end = segstart;
    }
    [AndroidTextTextUtils recycleWithCharArray:temp];
    return -1;
  }
  for (int i = end - 1; i >= start; i--) if ([s charAtWithInt:i] == ch) return i;
  return -1;
}

+ (int)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
              withJavaLangCharSequence:(id<JavaLangCharSequence>)needle {
  return [AndroidTextTextUtils indexOfWithJavaLangCharSequence:s withJavaLangCharSequence:needle withInt:0 withInt:[((id<JavaLangCharSequence>) nil_chk(s)) sequenceLength]];
}

+ (int)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
              withJavaLangCharSequence:(id<JavaLangCharSequence>)needle
                               withInt:(int)start {
  return [AndroidTextTextUtils indexOfWithJavaLangCharSequence:s withJavaLangCharSequence:needle withInt:start withInt:[((id<JavaLangCharSequence>) nil_chk(s)) sequenceLength]];
}

+ (int)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
              withJavaLangCharSequence:(id<JavaLangCharSequence>)needle
                               withInt:(int)start
                               withInt:(int)end {
  int nlen = [((id<JavaLangCharSequence>) nil_chk(needle)) sequenceLength];
  if (nlen == 0) return start;
  unichar c = [needle charAtWithInt:0];
  for (; ; ) {
    start = [AndroidTextTextUtils indexOfWithJavaLangCharSequence:s withChar:c withInt:start];
    if (start > end - nlen) {
      break;
    }
    if (start < 0) {
      return -1;
    }
    if ([AndroidTextTextUtils regionMatchesWithJavaLangCharSequence:s withInt:start withJavaLangCharSequence:needle withInt:0 withInt:nlen]) {
      return start;
    }
    start++;
  }
  return -1;
}

+ (BOOL)regionMatchesWithJavaLangCharSequence:(id<JavaLangCharSequence>)one
                                      withInt:(int)toffset
                     withJavaLangCharSequence:(id<JavaLangCharSequence>)two
                                      withInt:(int)ooffset
                                      withInt:(int)len {
  IOSCharArray *temp = [AndroidTextTextUtils obtainWithInt:2 * len];
  [AndroidTextTextUtils getCharsWithJavaLangCharSequence:one withInt:toffset withInt:toffset + len withCharArray:temp withInt:0];
  [AndroidTextTextUtils getCharsWithJavaLangCharSequence:two withInt:ooffset withInt:ooffset + len withCharArray:temp withInt:len];
  BOOL match = YES;
  for (int i = 0; i < len; i++) {
    if (IOSCharArray_Get(nil_chk(temp), i) != IOSCharArray_Get(temp, i + len)) {
      match = NO;
      break;
    }
  }
  [AndroidTextTextUtils recycleWithCharArray:temp];
  return match;
}

+ (NSString *)substringWithJavaLangCharSequence:(id<JavaLangCharSequence>)source
                                        withInt:(int)start
                                        withInt:(int)end {
  if ([(id) source isKindOfClass:[NSString class]]) return [((NSString *) check_class_cast(source, [NSString class])) substring:start endIndex:end];
  if ([(id) source isKindOfClass:[JavaLangStringBuilder class]]) return [((JavaLangStringBuilder *) check_class_cast(source, [JavaLangStringBuilder class])) substringWithInt:start withInt:end];
  if ([(id) source isKindOfClass:[JavaLangStringBuffer class]]) return [((JavaLangStringBuffer *) check_class_cast(source, [JavaLangStringBuffer class])) substringWithInt:start withInt:end];
  IOSCharArray *temp = [AndroidTextTextUtils obtainWithInt:end - start];
  [AndroidTextTextUtils getCharsWithJavaLangCharSequence:source withInt:start withInt:end withCharArray:temp withInt:0];
  NSString *ret = [NSString stringWithCharacters:temp offset:0 length:end - start];
  [AndroidTextTextUtils recycleWithCharArray:temp];
  return ret;
}

+ (NSString *)joinWithJavaLangCharSequence:(id<JavaLangCharSequence>)delimiter
                         withNSObjectArray:(IOSObjectArray *)tokens {
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  BOOL firstTime = YES;
  {
    IOSObjectArray *a__ = tokens;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id token = (*b__++);
      if (firstTime) {
        firstTime = NO;
      }
      else {
        (void) [sb appendWithJavaLangCharSequence:delimiter];
      }
      (void) [sb appendWithId:token];
    }
  }
  return [sb description];
}

+ (NSString *)joinWithJavaLangCharSequence:(id<JavaLangCharSequence>)delimiter
                      withJavaLangIterable:(id<JavaLangIterable>)tokens {
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  BOOL firstTime = YES;
  for (id __strong token in nil_chk(tokens)) {
    if (firstTime) {
      firstTime = NO;
    }
    else {
      (void) [sb appendWithJavaLangCharSequence:delimiter];
    }
    (void) [sb appendWithId:token];
  }
  return [sb description];
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)text
                         withNSString:(NSString *)expression {
  if ([((NSString *) nil_chk(text)) sequenceLength] == 0) {
    return AndroidTextTextUtils_EMPTY_STRING_ARRAY_;
  }
  else {
    return [text split:expression limit:-1];
  }
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)text
             withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  if ([((NSString *) nil_chk(text)) sequenceLength] == 0) {
    return AndroidTextTextUtils_EMPTY_STRING_ARRAY_;
  }
  else {
    return [((JavaUtilRegexPattern *) nil_chk(pattern)) splitWithJavaLangCharSequence:text withInt:-1];
  }
}

+ (id<JavaLangCharSequence>)stringOrSpannedStringWithJavaLangCharSequence:(id<JavaLangCharSequence>)source {
  if (source == nil) return nil;
  if ([(id) source isKindOfClass:[AndroidTextSpannedString class]]) return source;
  if ([(id) source conformsToProtocol: @protocol(AndroidTextSpanned)]) return [[AndroidTextSpannedString alloc] initWithJavaLangCharSequence:source];
  return [((id<JavaLangCharSequence>) nil_chk(source)) sequenceDescription];
}

+ (BOOL)isEmptyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str {
  if (str == nil || [str sequenceLength] == 0) return YES;
  else return NO;
}

+ (int)getTrimmedLengthWithJavaLangCharSequence:(id<JavaLangCharSequence>)s {
  int len = [((id<JavaLangCharSequence>) nil_chk(s)) sequenceLength];
  int start = 0;
  while (start < len && [s charAtWithInt:start] <= ' ') {
    start++;
  }
  int end = len;
  while (end > start && [s charAtWithInt:end - 1] <= ' ') {
    end--;
  }
  return end - start;
}

+ (BOOL)equalsWithJavaLangCharSequence:(id<JavaLangCharSequence>)a
              withJavaLangCharSequence:(id<JavaLangCharSequence>)b {
  if (a == b) return YES;
  int length;
  if (a != nil && b != nil && (length = [a sequenceLength]) == [b sequenceLength]) {
    if ([(id) a isKindOfClass:[NSString class]] && [(id) b isKindOfClass:[NSString class]]) {
      return [a isEqual:b];
    }
    else {
      for (int i = 0; i < length; i++) {
        if ([a charAtWithInt:i] != [b charAtWithInt:i]) return NO;
      }
      return YES;
    }
  }
  return NO;
}

+ (void)copySpansFromWithAndroidTextSpanned:(id<AndroidTextSpanned>)source
                                    withInt:(int)start
                                    withInt:(int)end
                               withIOSClass:(IOSClass *)kind
                   withAndroidTextSpannable:(id<AndroidTextSpannable>)dest
                                    withInt:(int)destoff {
  if (kind == nil) {
    kind = [IOSClass classWithClass:[NSObject class]];
  }
  IOSObjectArray *spans = [((id<AndroidTextSpanned>) nil_chk(source)) getSpansWithInt:start withInt:end withIOSClass:kind];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(spans)) count]; i++) {
    int st = [source getSpanStartWithId:IOSObjectArray_Get(spans, i)];
    int en = [source getSpanEndWithId:IOSObjectArray_Get(spans, i)];
    int fl = [source getSpanFlagsWithId:IOSObjectArray_Get(spans, i)];
    if (st < start) st = start;
    if (en > end) en = end;
    [((id<AndroidTextSpannable>) nil_chk(dest)) setSpanWithId:IOSObjectArray_Get(spans, i) withInt:st - start + destoff withInt:en - start + destoff withInt:fl];
  }
}

+ (IOSCharArray *)obtainWithInt:(int)len {
  IOSCharArray *buf;
  @synchronized (AndroidTextTextUtils_sLock_) {
    buf = AndroidTextTextUtils_sTemp_;
    AndroidTextTextUtils_sTemp_ = nil;
  }
  if (buf == nil || (int) [buf count] < len) buf = [IOSCharArray arrayWithLength:[AndroidUtilArrayUtils idealCharArraySizeWithInt:len]];
  return buf;
}

+ (void)recycleWithCharArray:(IOSCharArray *)temp {
  if ((int) [((IOSCharArray *) nil_chk(temp)) count] > 1000) return;
  @synchronized (AndroidTextTextUtils_sLock_) {
    AndroidTextTextUtils_sTemp_ = temp;
  }
}

+ (NSString *)htmlEncodeWithNSString:(NSString *)s {
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  unichar c;
  for (int i = 0; i < [((NSString *) nil_chk(s)) sequenceLength]; i++) {
    c = [s charAtWithInt:i];
    switch (c) {
      case '<':
      (void) [sb appendWithNSString:@"&lt;"];
      break;
      case '>':
      (void) [sb appendWithNSString:@"&gt;"];
      break;
      case '&':
      (void) [sb appendWithNSString:@"&amp;"];
      break;
      case '\'':
      (void) [sb appendWithNSString:@"&apos;"];
      break;
      case '"':
      (void) [sb appendWithNSString:@"&quot;"];
      break;
      default:
      (void) [sb appendWithChar:c];
    }
  }
  return [sb description];
}

+ (id<JavaLangCharSequence>)concatWithJavaLangCharSequenceArray:(IOSObjectArray *)text {
  if ((int) [((IOSObjectArray *) nil_chk(text)) count] == 0) {
    return @"";
  }
  if ((int) [text count] == 1) {
    return IOSObjectArray_Get(text, 0);
  }
  BOOL spanned = NO;
  for (int i = 0; i < (int) [text count]; i++) {
    if ([(id) IOSObjectArray_Get(text, i) conformsToProtocol: @protocol(AndroidTextSpanned)]) {
      spanned = YES;
      break;
    }
  }
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  for (int i = 0; i < (int) [text count]; i++) {
    (void) [sb appendWithJavaLangCharSequence:IOSObjectArray_Get(text, i)];
  }
  if (!spanned) {
    return [sb description];
  }
  AndroidTextSpannableString *ss = [[AndroidTextSpannableString alloc] initWithJavaLangCharSequence:sb];
  int off = 0;
  for (int i = 0; i < (int) [text count]; i++) {
    int len = [((id<JavaLangCharSequence>) IOSObjectArray_Get(text, i)) sequenceLength];
    if ([(id) IOSObjectArray_Get(text, i) conformsToProtocol: @protocol(AndroidTextSpanned)]) {
      [AndroidTextTextUtils copySpansFromWithAndroidTextSpanned:(id<AndroidTextSpanned>) check_protocol_cast(IOSObjectArray_Get(text, i), @protocol(AndroidTextSpanned)) withInt:0 withInt:len withIOSClass:[IOSClass classWithClass:[NSObject class]] withAndroidTextSpannable:ss withInt:off];
    }
    off += len;
  }
  return [[AndroidTextSpannedString alloc] initWithJavaLangCharSequence:ss];
}

+ (BOOL)isGraphicWithJavaLangCharSequence:(id<JavaLangCharSequence>)str {
  int len = [((id<JavaLangCharSequence>) nil_chk(str)) sequenceLength];
  for (int i = 0; i < len; i++) {
    int gc = [JavaLangCharacter getTypeWithChar:[str charAtWithInt:i]];
    if (gc != JavaLangCharacter_CONTROL && gc != JavaLangCharacter_FORMAT && gc != JavaLangCharacter_SURROGATE && gc != JavaLangCharacter_UNASSIGNED && gc != JavaLangCharacter_LINE_SEPARATOR && gc != JavaLangCharacter_PARAGRAPH_SEPARATOR && gc != JavaLangCharacter_SPACE_SEPARATOR) {
      return YES;
    }
  }
  return NO;
}

+ (BOOL)isGraphicWithChar:(unichar)c {
  int gc = [JavaLangCharacter getTypeWithChar:c];
  return gc != JavaLangCharacter_CONTROL && gc != JavaLangCharacter_FORMAT && gc != JavaLangCharacter_SURROGATE && gc != JavaLangCharacter_UNASSIGNED && gc != JavaLangCharacter_LINE_SEPARATOR && gc != JavaLangCharacter_PARAGRAPH_SEPARATOR && gc != JavaLangCharacter_SPACE_SEPARATOR;
}

+ (BOOL)isDigitsOnlyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str {
  int len = [((id<JavaLangCharSequence>) nil_chk(str)) sequenceLength];
  for (int i = 0; i < len; i++) {
    if (![JavaLangCharacter isDigitWithChar:[str charAtWithInt:i]]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)isPrintableAsciiWithChar:(unichar)c {
  int asciiFirst = (int) 0x20;
  int asciiLast = (int) 0x7E;
  return (asciiFirst <= c && c <= asciiLast) || c == 0x000d || c == 0x000a;
}

+ (BOOL)isPrintableAsciiOnlyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str {
  int len = [((id<JavaLangCharSequence>) nil_chk(str)) sequenceLength];
  for (int i = 0; i < len; i++) {
    if (![AndroidTextTextUtils isPrintableAsciiWithChar:[str charAtWithInt:i]]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)delimitedStringContainsWithNSString:(NSString *)delimitedString
                                   withChar:(unichar)delimiter
                               withNSString:(NSString *)item {
  if ([AndroidTextTextUtils isEmptyWithJavaLangCharSequence:delimitedString] || [AndroidTextTextUtils isEmptyWithJavaLangCharSequence:item]) {
    return NO;
  }
  int pos = -1;
  int length = [((NSString *) nil_chk(delimitedString)) sequenceLength];
  while ((pos = [delimitedString indexOfString:item fromIndex:pos + 1]) != -1) {
    if (pos > 0 && [delimitedString charAtWithInt:pos - 1] != delimiter) {
      continue;
    }
    int expectedDelimiterPos = pos + [((NSString *) nil_chk(item)) sequenceLength];
    if (expectedDelimiterPos == length) {
      return YES;
    }
    if ([delimitedString charAtWithInt:expectedDelimiterPos] == delimiter) {
      return YES;
    }
  }
  return NO;
}

+ (void)initialize {
  if (self == [AndroidTextTextUtils class]) {
    AndroidTextTextUtils_EMPTY_STRING_ARRAY_ = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:[IOSClass classWithClass:[NSString class]]];
    AndroidTextTextUtils_sLock_ = [[NSObject alloc] init];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL },
    { "regionMatchesWithJavaLangCharSequence:withInt:withJavaLangCharSequence:withInt:withInt:", NULL, "Z", 0x9, NULL },
    { "substringWithJavaLangCharSequence:withInt:withInt:", NULL, "LNSString", 0x9, NULL },
    { "joinWithJavaLangCharSequence:withNSObjectArray:", NULL, "LNSString", 0x9, NULL },
    { "joinWithJavaLangCharSequence:withJavaLangIterable:", NULL, "LNSString", 0x9, NULL },
    { "splitWithNSString:withNSString:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "splitWithNSString:withJavaUtilRegexPattern:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "stringOrSpannedStringWithJavaLangCharSequence:", NULL, "LJavaLangCharSequence", 0x9, NULL },
    { "isEmptyWithJavaLangCharSequence:", NULL, "Z", 0x9, NULL },
    { "equalsWithJavaLangCharSequence:withJavaLangCharSequence:", NULL, "Z", 0x9, NULL },
    { "obtainWithInt:", NULL, "LIOSCharArray", 0x8, NULL },
    { "recycleWithCharArray:", NULL, "V", 0x8, NULL },
    { "htmlEncodeWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "concatWithJavaLangCharSequenceArray:", NULL, "LJavaLangCharSequence", 0x89, NULL },
    { "isGraphicWithJavaLangCharSequence:", NULL, "Z", 0x9, NULL },
    { "isGraphicWithChar:", NULL, "Z", 0x9, NULL },
    { "isDigitsOnlyWithJavaLangCharSequence:", NULL, "Z", 0x9, NULL },
    { "isPrintableAsciiWithChar:", NULL, "Z", 0x9, NULL },
    { "isPrintableAsciiOnlyWithJavaLangCharSequence:", NULL, "Z", 0x9, NULL },
    { "delimitedStringContainsWithNSString:withChar:withNSString:", NULL, "Z", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "EMPTY_STRING_ARRAY_", NULL, 0xa, "LIOSObjectArray" },
    { "ALIGNMENT_SPAN_", NULL, 0x19, "I" },
    { "FOREGROUND_COLOR_SPAN_", NULL, 0x19, "I" },
    { "RELATIVE_SIZE_SPAN_", NULL, 0x19, "I" },
    { "SCALE_X_SPAN_", NULL, 0x19, "I" },
    { "STRIKETHROUGH_SPAN_", NULL, 0x19, "I" },
    { "UNDERLINE_SPAN_", NULL, 0x19, "I" },
    { "STYLE_SPAN_", NULL, 0x19, "I" },
    { "BULLET_SPAN_", NULL, 0x19, "I" },
    { "QUOTE_SPAN_", NULL, 0x19, "I" },
    { "LEADING_MARGIN_SPAN_", NULL, 0x19, "I" },
    { "URL_SPAN_", NULL, 0x19, "I" },
    { "BACKGROUND_COLOR_SPAN_", NULL, 0x19, "I" },
    { "TYPEFACE_SPAN_", NULL, 0x19, "I" },
    { "SUPERSCRIPT_SPAN_", NULL, 0x19, "I" },
    { "SUBSCRIPT_SPAN_", NULL, 0x19, "I" },
    { "ABSOLUTE_SIZE_SPAN_", NULL, 0x19, "I" },
    { "TEXT_APPEARANCE_SPAN_", NULL, 0x19, "I" },
    { "ANNOTATION_", NULL, 0x19, "I" },
    { "CSS_STYLE_SPAN_", NULL, 0x19, "I" },
    { "CENTER_SPAN_", NULL, 0x19, "I" },
    { "sLock_", NULL, 0xa, "LNSObject" },
    { "sTemp_", NULL, 0xa, "LIOSCharArray" },
  };
  static J2ObjcClassInfo _AndroidTextTextUtils = { "TextUtils", "android.text", NULL, 0x1, 20, methods, 23, fields, 0, NULL};
  return &_AndroidTextTextUtils;
}

@end

@interface AndroidTextTextUtils_StringSplitter : NSObject
@end

@implementation AndroidTextTextUtils_StringSplitter

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "setStringWithNSString:", NULL, "V", 0x401, NULL },
  };
  static J2ObjcClassInfo _AndroidTextTextUtils_StringSplitter = { "StringSplitter", "android.text", "TextUtils", 0x201, 1, methods, 0, NULL, 0, NULL};
  return &_AndroidTextTextUtils_StringSplitter;
}

@end
@implementation AndroidTextTextUtils_SimpleStringSplitter

- (id)initWithChar:(unichar)delimiter {
  if (self = [super init]) {
    mDelimiter_ = delimiter;
  }
  return self;
}

- (void)setStringWithNSString:(NSString *)string {
  mString_ = string;
  mPosition_ = 0;
  mLength_ = [((NSString *) nil_chk(mString_)) sequenceLength];
}

- (id<JavaUtilIterator>)iterator {
  return self;
}

- (BOOL)hasNext {
  return mPosition_ < mLength_;
}

- (NSString *)next {
  int end = [((NSString *) nil_chk(mString_)) indexOf:mDelimiter_ fromIndex:mPosition_];
  if (end == -1) {
    end = mLength_;
  }
  NSString *nextString = [mString_ substring:mPosition_ endIndex:end];
  mPosition_ = end + 1;
  return nextString;
}

- (void)remove {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)copyAllFieldsTo:(AndroidTextTextUtils_SimpleStringSplitter *)other {
  [super copyAllFieldsTo:other];
  other->mDelimiter_ = mDelimiter_;
  other->mLength_ = mLength_;
  other->mPosition_ = mPosition_;
  other->mString_ = mString_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "LJavaUtilIterator", 0x1, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL },
    { "next", NULL, "LNSString", 0x1, NULL },
  };
  static J2ObjcClassInfo _AndroidTextTextUtils_SimpleStringSplitter = { "SimpleStringSplitter", "android.text", "TextUtils", 0x9, 3, methods, 0, NULL, 0, NULL};
  return &_AndroidTextTextUtils_SimpleStringSplitter;
}

@end

static AndroidTextTextUtils_TruncateAtEnum *AndroidTextTextUtils_TruncateAtEnum_START;
static AndroidTextTextUtils_TruncateAtEnum *AndroidTextTextUtils_TruncateAtEnum_MIDDLE;
static AndroidTextTextUtils_TruncateAtEnum *AndroidTextTextUtils_TruncateAtEnum_END;
static AndroidTextTextUtils_TruncateAtEnum *AndroidTextTextUtils_TruncateAtEnum_MARQUEE;
IOSObjectArray *AndroidTextTextUtils_TruncateAtEnum_values;

@implementation AndroidTextTextUtils_TruncateAtEnum

+ (AndroidTextTextUtils_TruncateAtEnum *)START {
  return AndroidTextTextUtils_TruncateAtEnum_START;
}
+ (AndroidTextTextUtils_TruncateAtEnum *)MIDDLE {
  return AndroidTextTextUtils_TruncateAtEnum_MIDDLE;
}
+ (AndroidTextTextUtils_TruncateAtEnum *)END {
  return AndroidTextTextUtils_TruncateAtEnum_END;
}
+ (AndroidTextTextUtils_TruncateAtEnum *)MARQUEE {
  return AndroidTextTextUtils_TruncateAtEnum_MARQUEE;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [AndroidTextTextUtils_TruncateAtEnum class]) {
    AndroidTextTextUtils_TruncateAtEnum_START = [[AndroidTextTextUtils_TruncateAtEnum alloc] initWithNSString:@"START" withInt:0];
    AndroidTextTextUtils_TruncateAtEnum_MIDDLE = [[AndroidTextTextUtils_TruncateAtEnum alloc] initWithNSString:@"MIDDLE" withInt:1];
    AndroidTextTextUtils_TruncateAtEnum_END = [[AndroidTextTextUtils_TruncateAtEnum alloc] initWithNSString:@"END" withInt:2];
    AndroidTextTextUtils_TruncateAtEnum_MARQUEE = [[AndroidTextTextUtils_TruncateAtEnum alloc] initWithNSString:@"MARQUEE" withInt:3];
    AndroidTextTextUtils_TruncateAtEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ AndroidTextTextUtils_TruncateAtEnum_START, AndroidTextTextUtils_TruncateAtEnum_MIDDLE, AndroidTextTextUtils_TruncateAtEnum_END, AndroidTextTextUtils_TruncateAtEnum_MARQUEE, nil } count:4 type:[IOSClass classWithClass:[AndroidTextTextUtils_TruncateAtEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:AndroidTextTextUtils_TruncateAtEnum_values];
}

+ (AndroidTextTextUtils_TruncateAtEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [AndroidTextTextUtils_TruncateAtEnum_values count]; i++) {
    AndroidTextTextUtils_TruncateAtEnum *e = AndroidTextTextUtils_TruncateAtEnum_values->buffer_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

+ (J2ObjcClassInfo *)__metadata {
  static const char *superclass_type_args[] = {"LAndroidTextTextUtils_TruncateAtEnum"};
  static J2ObjcClassInfo _AndroidTextTextUtils_TruncateAtEnum = { "TruncateAt", "android.text", "TextUtils", 0x4019, 0, NULL, 0, NULL, 1, superclass_type_args};
  return &_AndroidTextTextUtils_TruncateAtEnum;
}

@end
