//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple-android-htmllabel/android/text/Html.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "IOSObjectArray.h"
#include "android/text/Html.h"
#include "android/text/SpannableStringBuilder.h"
#include "android/text/Spanned.h"
#include "android/text/TextUtils.h"
#include "android/text/iNodeBuilder.h"
#include "android/text/style/AbsoluteSizeSpan.h"
#include "android/text/style/AlignmentSpan.h"
#include "android/text/style/CSSStyleSpan.h"
#include "android/text/style/CenterSpan.h"
#include "android/text/style/CharacterStyle.h"
#include "android/text/style/ForegroundColorSpan.h"
#include "android/text/style/ImageSpan.h"
#include "android/text/style/ParagraphStyle.h"
#include "android/text/style/QuoteSpan.h"
#include "android/text/style/RelativeSizeSpan.h"
#include "android/text/style/StrikethroughSpan.h"
#include "android/text/style/StyleSpan.h"
#include "android/text/style/SubscriptSpan.h"
#include "android/text/style/SuperscriptSpan.h"
#include "android/text/style/TypefaceSpan.h"
#include "android/text/style/URLSpan.h"
#include "android/text/style/UnderlineSpan.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/ccil/cowan/tagsoup/HTMLSchema.h"
#include "org/ccil/cowan/tagsoup/Parser.h"
#include "org/xml/sax/Attributes.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/Locator.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/SAXNotRecognizedException.h"
#include "org/xml/sax/SAXNotSupportedException.h"
#include "org/xml/sax/XMLReader.h"

@implementation AndroidTextHtml

- (id)init {
  return [super init];
}

+ (id<AndroidTextSpanned>)fromHtmlWithNSString:(NSString *)source {
  return [AndroidTextHtml fromHtmlWithNSString:source withAndroidTextHtml_ImageGetter:nil withAndroidTextHtml_TagHandler:nil];
}

+ (id<AndroidTextSpanned>)fromHtmlWithNSString:(NSString *)source
               withAndroidTextHtml_ImageGetter:(id<AndroidTextHtml_ImageGetter>)imageGetter
                withAndroidTextHtml_TagHandler:(id<AndroidTextHtml_TagHandler>)tagHandler {
  RAREParser *parser = [[RAREParser alloc] init];
  @try {
    [parser setPropertyWithNSString:[RAREParser schemaProperty] withId:[AndroidTextHtml_HtmlParser schema]];
  }
  @catch (OrgXmlSaxSAXNotRecognizedException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  @catch (OrgXmlSaxSAXNotSupportedException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  AndroidTextHtmlToSpannedConverter *converter = [[AndroidTextHtmlToSpannedConverter alloc] initWithNSString:source withAndroidTextHtml_ImageGetter:imageGetter withAndroidTextHtml_TagHandler:tagHandler withRAREParser:parser];
  id<AndroidTextSpanned> s = [converter convert];
  [converter dispose];
  return s;
}

+ (NSString *)toHtmlWithAndroidTextSpanned:(id<AndroidTextSpanned>)text {
  JavaLangStringBuilder *out = [[JavaLangStringBuilder alloc] init];
  [AndroidTextHtml withinHtmlWithJavaLangStringBuilder:out withAndroidTextSpanned:text];
  return [out description];
}

+ (AndroidTextHtml_Node *)toNodeWithAndroidTextSpanned:(id<AndroidTextSpanned>)text {
  return [AndroidTextHtml toNodeWithAndroidTextSpanned:text withAndroidTextiNodeBuilder:nil];
}

+ (AndroidTextHtml_Node *)toNodeWithAndroidTextSpanned:(id<AndroidTextSpanned>)text
                           withAndroidTextiNodeBuilder:(id<AndroidTextiNodeBuilder>)nodeBuilder {
  AndroidTextHtml_Node *root = [[AndroidTextHtml_Node alloc] init];
  if (nodeBuilder == nil) {
    [AndroidTextHtml withinHtmlWithAndroidTextHtml_Node:root withAndroidTextSpanned:text];
  }
  else {
    [nodeBuilder withinHtmlWithAndroidTextHtml_Node:root withAndroidTextSpanned:text];
  }
  return root;
}

+ (void)withinBlockquoteWithAndroidTextHtml_Node:(AndroidTextHtml_Node *)outArg
                          withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                         withInt:(int)start
                                         withInt:(int)end {
  int next;
  for (int i = start; i < end; i = next) {
    next = [AndroidTextTextUtils indexOfWithJavaLangCharSequence:text withChar:0x000a withInt:i withInt:end];
    if (next < 0) {
      next = end;
    }
    int nl = 0;
    while ((next < end) && ([((id<AndroidTextSpanned>) nil_chk(text)) charAtWithInt:next] == 0x000a)) {
      nl++;
      next++;
    }
    [AndroidTextHtml withinParagraphWithAndroidTextHtml_Node:outArg withAndroidTextSpanned:text withInt:i withInt:next - nl withInt:nl withBoolean:next == end];
  }
}

+ (void)withinBlockquoteWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                           withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                          withInt:(int)start
                                          withInt:(int)end {
  (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<p>"];
  int next;
  for (int i = start; i < end; i = next) {
    next = [AndroidTextTextUtils indexOfWithJavaLangCharSequence:text withChar:0x000a withInt:i withInt:end];
    if (next < 0) {
      next = end;
    }
    int nl = 0;
    while ((next < end) && ([((id<AndroidTextSpanned>) nil_chk(text)) charAtWithInt:next] == 0x000a)) {
      nl++;
      next++;
    }
    [AndroidTextHtml withinParagraphWithJavaLangStringBuilder:outArg withAndroidTextSpanned:text withInt:i withInt:next - nl withInt:nl withBoolean:next == end];
  }
  (void) [outArg appendWithNSString:@"</p>\n"];
}

+ (void)withinDivWithAndroidTextHtml_Node:(AndroidTextHtml_Node *)outArg
                   withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                  withInt:(int)start
                                  withInt:(int)end {
  int next;
  AndroidTextHtml_Node *bq;
  for (int i = start; i < end; i = next) {
    next = [((id<AndroidTextSpanned>) nil_chk(text)) nextSpanTransitionWithInt:i withInt:end withIOSClass:[IOSClass classWithClass:[RAREQuoteSpan class]]];
    IOSObjectArray *quotes = [text getSpansWithInt:i withInt:next withIOSClass:[IOSClass classWithClass:[RAREQuoteSpan class]]];
    bq = [((AndroidTextHtml_Node *) nil_chk(outArg)) blockQuoteWithInt:(int) [((IOSObjectArray *) nil_chk(quotes)) count]];
    [AndroidTextHtml withinBlockquoteWithAndroidTextHtml_Node:bq withAndroidTextSpanned:text withInt:i withInt:next];
  }
}

+ (void)withinDivWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                    withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                   withInt:(int)start
                                   withInt:(int)end {
  int next;
  for (int i = start; i < end; i = next) {
    next = [((id<AndroidTextSpanned>) nil_chk(text)) nextSpanTransitionWithInt:i withInt:end withIOSClass:[IOSClass classWithClass:[RAREQuoteSpan class]]];
    IOSObjectArray *quotes = [text getSpansWithInt:i withInt:next withIOSClass:[IOSClass classWithClass:[RAREQuoteSpan class]]];
    int len = (int) [((IOSObjectArray *) nil_chk(quotes)) count];
    for (int n = 0; n < len; n++) {
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<blockquote>"];
    }
    [AndroidTextHtml withinBlockquoteWithJavaLangStringBuilder:outArg withAndroidTextSpanned:text withInt:i withInt:next];
    for (int n = 0; n < len; n++) {
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</blockquote>\n"];
    }
  }
}

+ (void)withinHtmlWithAndroidTextHtml_Node:(AndroidTextHtml_Node *)outArg
                    withAndroidTextSpanned:(id<AndroidTextSpanned>)text {
  int len = [((id<AndroidTextSpanned>) nil_chk(text)) sequenceLength];
  int next;
  AndroidTextHtml_Node *p = outArg;
  for (int i = 0; i < [text sequenceLength]; i = next) {
    next = [text nextSpanTransitionWithInt:i withInt:len withIOSClass:[IOSClass classWithProtocol:@protocol(RAREParagraphStyle)]];
    IOSObjectArray *style = [text getSpansWithInt:i withInt:next withIOSClass:[IOSClass classWithProtocol:@protocol(RAREParagraphStyle)]];
    NSString *elements = @" ";
    BOOL needDiv = NO;
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(style)) count]; j++) {
      if ([(id) IOSObjectArray_Get(style, j) conformsToProtocol: @protocol(RAREAlignmentSpan)]) {
        RAREAlignmentSpan_AlignmentEnum *align = [((id<RAREAlignmentSpan>) check_protocol_cast(IOSObjectArray_Get(style, j), @protocol(RAREAlignmentSpan))) getAlignment];
        needDiv = YES;
        if (align == [RAREAlignmentSpan_AlignmentEnum CENTER]) {
          elements = [NSString stringWithFormat:@"align=\"center\" %@", elements];
        }
        else if (align == [RAREAlignmentSpan_AlignmentEnum RIGHT]) {
          elements = [NSString stringWithFormat:@"align=\"right\" %@", elements];
        }
        else {
          elements = [NSString stringWithFormat:@"align=\"left\" %@", elements];
        }
      }
    }
    if (needDiv) {
      p = [((AndroidTextHtml_Node *) nil_chk(outArg)) paragraph];
    }
    [AndroidTextHtml withinDivWithAndroidTextHtml_Node:p withAndroidTextSpanned:text withInt:i withInt:next];
  }
}

+ (void)withinHtmlWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                     withAndroidTextSpanned:(id<AndroidTextSpanned>)text {
  int len = [((id<AndroidTextSpanned>) nil_chk(text)) sequenceLength];
  int next;
  for (int i = 0; i < [text sequenceLength]; i = next) {
    next = [text nextSpanTransitionWithInt:i withInt:len withIOSClass:[IOSClass classWithProtocol:@protocol(RAREParagraphStyle)]];
    IOSObjectArray *style = [text getSpansWithInt:i withInt:next withIOSClass:[IOSClass classWithProtocol:@protocol(RAREParagraphStyle)]];
    NSString *elements = @" ";
    BOOL needDiv = NO;
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(style)) count]; j++) {
      if ([(id) IOSObjectArray_Get(style, j) conformsToProtocol: @protocol(RAREAlignmentSpan)]) {
        RAREAlignmentSpan_AlignmentEnum *align = [((id<RAREAlignmentSpan>) check_protocol_cast(IOSObjectArray_Get(style, j), @protocol(RAREAlignmentSpan))) getAlignment];
        needDiv = YES;
        if (align == [RAREAlignmentSpan_AlignmentEnum CENTER]) {
          elements = [NSString stringWithFormat:@"align=\"center\" %@", elements];
        }
        else if (align == [RAREAlignmentSpan_AlignmentEnum RIGHT]) {
          elements = [NSString stringWithFormat:@"align=\"right\" %@", elements];
        }
        else {
          elements = [NSString stringWithFormat:@"align=\"left\" %@", elements];
        }
      }
    }
    if (needDiv) {
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:[NSString stringWithFormat:@"<div %@>", elements]];
    }
    [AndroidTextHtml withinDivWithJavaLangStringBuilder:outArg withAndroidTextSpanned:text withInt:i withInt:next];
    if (needDiv) {
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</div>"];
    }
  }
}

+ (void)withinParagraphWithAndroidTextHtml_Node:(AndroidTextHtml_Node *)parent
                         withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                        withInt:(int)start
                                        withInt:(int)end
                                        withInt:(int)nl
                                    withBoolean:(BOOL)last {
  int next;
  AndroidTextHtml_Node *out = nil;
  for (int i = start; i < end; i = next) {
    next = [((id<AndroidTextSpanned>) nil_chk(text)) nextSpanTransitionWithInt:i withInt:end withIOSClass:[IOSClass classWithClass:[RARECharacterStyle class]]];
    IOSObjectArray *style = [text getSpansWithInt:i withInt:next withIOSClass:[IOSClass classWithClass:[RARECharacterStyle class]]];
    out = [((AndroidTextHtml_Node *) nil_chk(parent)) newChild];
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(style)) count]; j++) {
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREStyleSpan class]]) {
        int s = [((RAREStyleSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREStyleSpan class])) getStyle];
        if ((s & AndroidTextHtml_Typeface_BOLD) != 0) {
          (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:@"font-weight:bold"];
        }
        if ((s & AndroidTextHtml_Typeface_ITALIC) != 0) {
          (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:@"font-style:italic"];
        }
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARETypefaceSpan class]]) {
        NSString *s = [((RARETypefaceSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RARETypefaceSpan class])) getFamily];
        if ([((NSString *) nil_chk(s)) isEqual:@"monospace"]) {
          (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:@"font-family: monospace"];
        }
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARECSSStyleSpan class]]) {
        (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:[((RARECSSStyleSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RARECSSStyleSpan class])) getStyle]];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARESuperscriptSpan class]]) {
        (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:@"vertical-align:sup"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARESubscriptSpan class]]) {
        (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:@"vertical-align:sub"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREUnderlineSpan class]]) {
        (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:@"text-decoration: underline"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARECenterSpan class]]) {
        (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:@"text-align: center"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREStrikethroughSpan class]]) {
        (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:@"text-decoration: line-through"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREURLSpan class]]) {
        (void) [((AndroidTextHtml_Node *) nil_chk(out)) hrefWithNSString:[((RAREURLSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREURLSpan class])) getURL]];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREImageSpan class]]) {
        (void) [((AndroidTextHtml_Node *) nil_chk(out)) imageWithNSString:[((RAREImageSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREImageSpan class])) getSource]];
        i = next;
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREAbsoluteSizeSpan class]]) {
        (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:[NSString stringWithFormat:@"font-size:%@", [((RAREAbsoluteSizeSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREAbsoluteSizeSpan class])) getCSSSize]]];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREForegroundColorSpan class]]) {
        (void) [((AndroidTextHtml_Node *) nil_chk(out)) appendWithNSString:[NSString stringWithFormat:@"color:%@", [((RAREForegroundColorSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREForegroundColorSpan class])) getForegroundColor]]];
      }
    }
    [AndroidTextHtml withinStyleWithAndroidTextHtml_Node:(out == nil) ? parent : out withAndroidTextSpanned:text withInt:i withInt:next];
  }
  ((AndroidTextHtml_Node *) nil_chk([((AndroidTextHtml_Node *) nil_chk(parent)) newChild]))->linefeed_ = nl;
}

+ (void)withinParagraphWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                          withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                         withInt:(int)start
                                         withInt:(int)end
                                         withInt:(int)nl
                                     withBoolean:(BOOL)last {
  int next;
  for (int i = start; i < end; i = next) {
    next = [((id<AndroidTextSpanned>) nil_chk(text)) nextSpanTransitionWithInt:i withInt:end withIOSClass:[IOSClass classWithClass:[RARECharacterStyle class]]];
    IOSObjectArray *style = [text getSpansWithInt:i withInt:next withIOSClass:[IOSClass classWithClass:[RARECharacterStyle class]]];
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(style)) count]; j++) {
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREStyleSpan class]]) {
        int s = [((RAREStyleSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREStyleSpan class])) getStyle];
        if ((s & AndroidTextHtml_Typeface_BOLD) != 0) {
          (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<b>"];
        }
        if ((s & AndroidTextHtml_Typeface_ITALIC) != 0) {
          (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<i>"];
        }
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARETypefaceSpan class]]) {
        NSString *s = [((RARETypefaceSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RARETypefaceSpan class])) getFamily];
        if ([((NSString *) nil_chk(s)) isEqual:@"monospace"]) {
          (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<tt>"];
        }
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARESuperscriptSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<sup>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARESubscriptSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<sub>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREUnderlineSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<u>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARECenterSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<center>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREStrikethroughSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<strike>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREURLSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<a href=\""];
        (void) [outArg appendWithNSString:[((RAREURLSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREURLSpan class])) getURL]];
        (void) [outArg appendWithNSString:@"\">"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARECSSStyleSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<span  style=\""];
        (void) [outArg appendWithNSString:[((RARECSSStyleSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RARECSSStyleSpan class])) getStyle]];
        (void) [outArg appendWithNSString:@"\">"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREImageSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<img src=\""];
        (void) [outArg appendWithNSString:[((RAREImageSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREImageSpan class])) getSource]];
        (void) [outArg appendWithNSString:@"\">"];
        i = next;
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREAbsoluteSizeSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<font size =\""];
        (void) [outArg appendWithInt:[((RAREAbsoluteSizeSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREAbsoluteSizeSpan class])) getSize] / 6];
        (void) [outArg appendWithNSString:@"\">"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREForegroundColorSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<font color =\""];
        (void) [outArg appendWithNSString:[((RAREForegroundColorSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREForegroundColorSpan class])) getForegroundColor]];
        (void) [outArg appendWithNSString:@"\">"];
      }
    }
    [AndroidTextHtml withinStyleWithJavaLangStringBuilder:outArg withAndroidTextSpanned:text withInt:i withInt:next];
    for (int j = (int) [style count] - 1; j >= 0; j--) {
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREForegroundColorSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</font>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREAbsoluteSizeSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</font>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREURLSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</a>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARECSSStyleSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</span>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREStrikethroughSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</strike>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREUnderlineSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</u>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARESubscriptSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</sub>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARESuperscriptSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</sup>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARECenterSpan class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</center>"];
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RARETypefaceSpan class]]) {
        NSString *s = [((RARETypefaceSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RARETypefaceSpan class])) getFamily];
        if ([((NSString *) nil_chk(s)) isEqual:@"monospace"]) {
          (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</tt>"];
        }
      }
      if ([IOSObjectArray_Get(style, j) isKindOfClass:[RAREStyleSpan class]]) {
        int s = [((RAREStyleSpan *) check_class_cast(IOSObjectArray_Get(style, j), [RAREStyleSpan class])) getStyle];
        if ((s & AndroidTextHtml_Typeface_BOLD) != 0) {
          (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</b>"];
        }
        if ((s & AndroidTextHtml_Typeface_ITALIC) != 0) {
          (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"</i>"];
        }
      }
    }
  }
  NSString *p = last ? @"" : @"</p>\n<p>";
  if (nl == 1) {
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<br>\n"];
  }
  else if (nl == 2) {
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:p];
  }
  else {
    for (int i = 2; i < nl; i++) {
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"<br>"];
    }
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:p];
  }
}

+ (void)withinStyleWithAndroidTextHtml_Node:(AndroidTextHtml_Node *)outArg
                     withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                    withInt:(int)start
                                    withInt:(int)end {
  if (((AndroidTextHtml_Node *) nil_chk(outArg))->text_ != nil) {
    outArg->text_ = [NSString stringWithFormat:@"%@%@", outArg->text_, [((id<AndroidTextSpanned>) nil_chk(text)) subSequenceFrom:start to:end]];
  }
  else {
    outArg->text_ = [((id<JavaLangCharSequence>) nil_chk([((id<AndroidTextSpanned>) nil_chk(text)) subSequenceFrom:start to:end])) sequenceDescription];
  }
}

+ (void)withinStyleWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                      withAndroidTextSpanned:(id<AndroidTextSpanned>)text
                                     withInt:(int)start
                                     withInt:(int)end {
  for (int i = start; i < end; i++) {
    unichar c = [((id<AndroidTextSpanned>) nil_chk(text)) charAtWithInt:i];
    if (c == '<') {
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"&lt;"];
    }
    else if (c == '>') {
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"&gt;"];
    }
    else if (c == '&') {
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"&amp;"];
    }
    else if ((c > (int) 0x7E) || (c < ' ')) {
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:[NSString stringWithFormat:@"&#%d;", ((int) c)]];
    }
    else if (c == ' ') {
      while ((i + 1 < end) && ([text charAtWithInt:i + 1] == ' ')) {
        (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithNSString:@"&nbsp;"];
        i++;
      }
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithChar:' '];
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithChar:c];
    }
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL },
    { "fromHtmlWithNSString:", NULL, "LAndroidTextSpanned", 0x9, NULL },
    { "fromHtmlWithNSString:withAndroidTextHtml_ImageGetter:withAndroidTextHtml_TagHandler:", NULL, "LAndroidTextSpanned", 0x9, NULL },
    { "toHtmlWithAndroidTextSpanned:", NULL, "LNSString", 0x9, NULL },
    { "toNodeWithAndroidTextSpanned:", NULL, "LAndroidTextHtml_Node", 0x9, NULL },
    { "toNodeWithAndroidTextSpanned:withAndroidTextiNodeBuilder:", NULL, "LAndroidTextHtml_Node", 0x9, NULL },
    { "withinBlockquoteWithAndroidTextHtml_Node:withAndroidTextSpanned:withInt:withInt:", NULL, "V", 0xa, NULL },
    { "withinBlockquoteWithJavaLangStringBuilder:withAndroidTextSpanned:withInt:withInt:", NULL, "V", 0xa, NULL },
    { "withinDivWithAndroidTextHtml_Node:withAndroidTextSpanned:withInt:withInt:", NULL, "V", 0xa, NULL },
    { "withinDivWithJavaLangStringBuilder:withAndroidTextSpanned:withInt:withInt:", NULL, "V", 0xa, NULL },
    { "withinHtmlWithAndroidTextHtml_Node:withAndroidTextSpanned:", NULL, "V", 0xa, NULL },
    { "withinHtmlWithJavaLangStringBuilder:withAndroidTextSpanned:", NULL, "V", 0xa, NULL },
    { "withinParagraphWithAndroidTextHtml_Node:withAndroidTextSpanned:withInt:withInt:withInt:withBoolean:", NULL, "V", 0xa, NULL },
    { "withinParagraphWithJavaLangStringBuilder:withAndroidTextSpanned:withInt:withInt:withInt:withBoolean:", NULL, "V", 0xa, NULL },
    { "withinStyleWithAndroidTextHtml_Node:withAndroidTextSpanned:withInt:withInt:", NULL, "V", 0xa, NULL },
    { "withinStyleWithJavaLangStringBuilder:withAndroidTextSpanned:withInt:withInt:", NULL, "V", 0xa, NULL },
  };
  static J2ObjcClassInfo _AndroidTextHtml = { "Html", "android.text", NULL, 0x1, 16, methods, 0, NULL, 0, NULL};
  return &_AndroidTextHtml;
}

@end
@implementation AndroidTextHtmlToSpannedConverter

static IOSFloatArray * AndroidTextHtmlToSpannedConverter_HEADER_SIZES_;
static AndroidTextHtmlToSpannedConverter_Center * AndroidTextHtmlToSpannedConverter_center_;
static AndroidTextHtmlToSpannedConverter_Sub * AndroidTextHtmlToSpannedConverter_sub_;
static AndroidTextHtmlToSpannedConverter_Super * AndroidTextHtmlToSpannedConverter_ssuper_;
static AndroidTextHtmlToSpannedConverter_Bold * AndroidTextHtmlToSpannedConverter_bold_;
static AndroidTextHtmlToSpannedConverter_Italic * AndroidTextHtmlToSpannedConverter_italic_;
static AndroidTextHtmlToSpannedConverter_Small * AndroidTextHtmlToSpannedConverter_small_;
static AndroidTextHtmlToSpannedConverter_Big * AndroidTextHtmlToSpannedConverter_big_;
static AndroidTextHtmlToSpannedConverter_Blockquote * AndroidTextHtmlToSpannedConverter_blockquote_;
static AndroidTextHtmlToSpannedConverter_Monospace * AndroidTextHtmlToSpannedConverter_monospace_;
static AndroidTextHtmlToSpannedConverter_Underline * AndroidTextHtmlToSpannedConverter_underline_;
static AndroidTextHtmlToSpannedConverter_Strikethrough * AndroidTextHtmlToSpannedConverter_strikethrough_;

+ (IOSFloatArray *)HEADER_SIZES {
  return AndroidTextHtmlToSpannedConverter_HEADER_SIZES_;
}

+ (AndroidTextHtmlToSpannedConverter_Center *)center {
  return AndroidTextHtmlToSpannedConverter_center_;
}

+ (void)setCenter:(AndroidTextHtmlToSpannedConverter_Center *)center {
  AndroidTextHtmlToSpannedConverter_center_ = center;
}

+ (AndroidTextHtmlToSpannedConverter_Sub *)sub {
  return AndroidTextHtmlToSpannedConverter_sub_;
}

+ (void)setSub:(AndroidTextHtmlToSpannedConverter_Sub *)sub {
  AndroidTextHtmlToSpannedConverter_sub_ = sub;
}

+ (AndroidTextHtmlToSpannedConverter_Super *)ssuper {
  return AndroidTextHtmlToSpannedConverter_ssuper_;
}

+ (void)setSsuper:(AndroidTextHtmlToSpannedConverter_Super *)ssuper {
  AndroidTextHtmlToSpannedConverter_ssuper_ = ssuper;
}

+ (AndroidTextHtmlToSpannedConverter_Bold *)bold {
  return AndroidTextHtmlToSpannedConverter_bold_;
}

+ (void)setBold:(AndroidTextHtmlToSpannedConverter_Bold *)bold {
  AndroidTextHtmlToSpannedConverter_bold_ = bold;
}

+ (AndroidTextHtmlToSpannedConverter_Italic *)italic {
  return AndroidTextHtmlToSpannedConverter_italic_;
}

+ (void)setItalic:(AndroidTextHtmlToSpannedConverter_Italic *)italic {
  AndroidTextHtmlToSpannedConverter_italic_ = italic;
}

+ (AndroidTextHtmlToSpannedConverter_Small *)small {
  return AndroidTextHtmlToSpannedConverter_small_;
}

+ (void)setSmall:(AndroidTextHtmlToSpannedConverter_Small *)small {
  AndroidTextHtmlToSpannedConverter_small_ = small;
}

+ (AndroidTextHtmlToSpannedConverter_Big *)big {
  return AndroidTextHtmlToSpannedConverter_big_;
}

+ (void)setBig:(AndroidTextHtmlToSpannedConverter_Big *)big {
  AndroidTextHtmlToSpannedConverter_big_ = big;
}

+ (AndroidTextHtmlToSpannedConverter_Blockquote *)blockquote {
  return AndroidTextHtmlToSpannedConverter_blockquote_;
}

+ (void)setBlockquote:(AndroidTextHtmlToSpannedConverter_Blockquote *)blockquote {
  AndroidTextHtmlToSpannedConverter_blockquote_ = blockquote;
}

+ (AndroidTextHtmlToSpannedConverter_Monospace *)monospace {
  return AndroidTextHtmlToSpannedConverter_monospace_;
}

+ (void)setMonospace:(AndroidTextHtmlToSpannedConverter_Monospace *)monospace {
  AndroidTextHtmlToSpannedConverter_monospace_ = monospace;
}

+ (AndroidTextHtmlToSpannedConverter_Underline *)underline {
  return AndroidTextHtmlToSpannedConverter_underline_;
}

+ (void)setUnderline:(AndroidTextHtmlToSpannedConverter_Underline *)underline {
  AndroidTextHtmlToSpannedConverter_underline_ = underline;
}

+ (AndroidTextHtmlToSpannedConverter_Strikethrough *)strikethrough {
  return AndroidTextHtmlToSpannedConverter_strikethrough_;
}

+ (void)setStrikethrough:(AndroidTextHtmlToSpannedConverter_Strikethrough *)strikethrough {
  AndroidTextHtmlToSpannedConverter_strikethrough_ = strikethrough;
}

- (id)initWithNSString:(NSString *)source
withAndroidTextHtml_ImageGetter:(id<AndroidTextHtml_ImageGetter>)imageGetter
withAndroidTextHtml_TagHandler:(id<AndroidTextHtml_TagHandler>)tagHandler
        withRAREParser:(RAREParser *)parser {
  if (self = [super init]) {
    mSource_ = source;
    mSpannableStringBuilder_ = [[AndroidTextSpannableStringBuilder alloc] init];
    mImageGetter_ = imageGetter;
    mTagHandler_ = tagHandler;
    mReader_ = parser;
  }
  return self;
}

- (void)dispose {
  mSource_ = nil;
  mTagHandler_ = nil;
  mSpannableStringBuilder_ = nil;
  mReader_ = nil;
  mImageGetter_ = nil;
}

- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(int)start
                        withInt:(int)length {
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  for (int i = 0; i < length; i++) {
    unichar c = IOSCharArray_Get(nil_chk(ch), i + start);
    if ((c == ' ') || (c == 0x000a)) {
      unichar pred;
      int len = [sb sequenceLength];
      if (len == 0) {
        len = [((AndroidTextSpannableStringBuilder *) nil_chk(mSpannableStringBuilder_)) sequenceLength];
        if (len == 0) {
          pred = 0x000a;
        }
        else {
          pred = [mSpannableStringBuilder_ charAtWithInt:len - 1];
        }
      }
      else {
        pred = [sb charAtWithInt:len - 1];
      }
      if ((pred != ' ') && (pred != 0x000a)) {
        (void) [sb appendWithChar:' '];
      }
    }
    else {
      (void) [sb appendWithChar:c];
    }
  }
  (void) [((AndroidTextSpannableStringBuilder *) nil_chk(mSpannableStringBuilder_)) appendWithJavaLangCharSequence:sb];
}

- (id<AndroidTextSpanned>)convert {
  [((id<OrgXmlSaxXMLReader>) nil_chk(mReader_)) setContentHandlerWithOrgXmlSaxContentHandler:self];
  @try {
    [mReader_ parseWithOrgXmlSaxInputSource:[[OrgXmlSaxInputSource alloc] initWithJavaIoReader:[[JavaIoStringReader alloc] initWithNSString:mSource_]]];
  }
  @catch (JavaIoIOException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  @catch (OrgXmlSaxSAXException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  IOSObjectArray *obj = [mSpannableStringBuilder_ getSpansWithInt:0 withInt:[((AndroidTextSpannableStringBuilder *) nil_chk(mSpannableStringBuilder_)) sequenceLength] withIOSClass:[IOSClass classWithProtocol:@protocol(RAREParagraphStyle)]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(obj)) count]; i++) {
    int start = [mSpannableStringBuilder_ getSpanStartWithId:IOSObjectArray_Get(obj, i)];
    int end = [mSpannableStringBuilder_ getSpanEndWithId:IOSObjectArray_Get(obj, i)];
    if (end - 2 >= 0) {
      if (([mSpannableStringBuilder_ charAtWithInt:end - 1] == 0x000a) && ([mSpannableStringBuilder_ charAtWithInt:end - 2] == 0x000a)) {
        end--;
      }
    }
    if (end == start) {
      [mSpannableStringBuilder_ removeSpanWithId:IOSObjectArray_Get(obj, i)];
    }
    else {
      [mSpannableStringBuilder_ setSpanWithId:IOSObjectArray_Get(obj, i) withInt:start withInt:end withInt:AndroidTextSpanned_SPAN_PARAGRAPH];
    }
  }
  return mSpannableStringBuilder_;
}

- (void)endDocument {
}

- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName {
  [self handleEndTagWithNSString:localName];
}

- (void)endPrefixMappingWithNSString:(NSString *)prefix {
}

- (void)ignorableWhitespaceWithCharArray:(IOSCharArray *)ch
                                 withInt:(int)start
                                 withInt:(int)length {
}

- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data {
}

- (void)skippedEntityWithNSString:(NSString *)name {
}

- (void)startDocument {
}

- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes {
  [self handleStartTagWithNSString:localName withOrgXmlSaxAttributes:attributes];
}

- (void)startPrefixMappingWithNSString:(NSString *)prefix
                          withNSString:(NSString *)uri {
}

- (void)setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>)locator {
}

+ (void)endWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text
                                    withIOSClass:(IOSClass *)kind
                                          withId:(id)repl {
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  id obj = [AndroidTextHtmlToSpannedConverter getLastWithAndroidTextSpanned:text withIOSClass:kind];
  int where = [text getSpanStartWithId:obj];
  [text removeSpanWithId:obj];
  if (where != len) {
    [text setSpanWithId:repl withInt:where withInt:len withInt:AndroidTextSpanned_SPAN_EXCLUSIVE_EXCLUSIVE];
  }
  return;
}

+ (void)endAWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text {
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  id obj = [AndroidTextHtmlToSpannedConverter getLastWithAndroidTextSpanned:text withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Href class]]];
  int where = [text getSpanStartWithId:obj];
  [text removeSpanWithId:obj];
  if (where != len) {
    AndroidTextHtmlToSpannedConverter_Href *h = (AndroidTextHtmlToSpannedConverter_Href *) check_class_cast(obj, [AndroidTextHtmlToSpannedConverter_Href class]);
    if (((AndroidTextHtmlToSpannedConverter_Href *) nil_chk(h))->mHref_ != nil) {
      [text setSpanWithId:[[RAREURLSpan alloc] initWithNSString:h->mHref_] withInt:where withInt:len withInt:AndroidTextSpanned_SPAN_EXCLUSIVE_EXCLUSIVE];
    }
  }
}

+ (void)endFontWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text {
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  id obj = [AndroidTextHtmlToSpannedConverter getLastWithAndroidTextSpanned:text withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Font class]]];
  int where = [text getSpanStartWithId:obj];
  [text removeSpanWithId:obj];
  if (where != len) {
    AndroidTextHtmlToSpannedConverter_Font *f = (AndroidTextHtmlToSpannedConverter_Font *) check_class_cast(obj, [AndroidTextHtmlToSpannedConverter_Font class]);
    if (![AndroidTextTextUtils isEmptyWithJavaLangCharSequence:((AndroidTextHtmlToSpannedConverter_Font *) nil_chk(f))->mColor_]) {
      [text setSpanWithId:[[RAREForegroundColorSpan alloc] initWithNSString:f->mColor_] withInt:where withInt:len withInt:AndroidTextSpanned_SPAN_EXCLUSIVE_EXCLUSIVE];
    }
    if (f->mFace_ != nil) {
      [text setSpanWithId:[[RARETypefaceSpan alloc] initWithNSString:f->mFace_] withInt:where withInt:len withInt:AndroidTextSpanned_SPAN_EXCLUSIVE_EXCLUSIVE];
    }
  }
}

+ (void)endHeaderWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text {
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  id obj = [AndroidTextHtmlToSpannedConverter getLastWithAndroidTextSpanned:text withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Header class]]];
  int where = [text getSpanStartWithId:obj];
  [text removeSpanWithId:obj];
  while ((len > where) && ([text charAtWithInt:len - 1] == 0x000a)) {
    len--;
  }
  if (where != len) {
    AndroidTextHtmlToSpannedConverter_Header *h = (AndroidTextHtmlToSpannedConverter_Header *) check_class_cast(obj, [AndroidTextHtmlToSpannedConverter_Header class]);
    [text setSpanWithId:[[RARERelativeSizeSpan alloc] initWithFloat:IOSFloatArray_Get(nil_chk(AndroidTextHtmlToSpannedConverter_HEADER_SIZES_), ((AndroidTextHtmlToSpannedConverter_Header *) nil_chk(h))->mLevel_)] withInt:where withInt:len withInt:AndroidTextSpanned_SPAN_EXCLUSIVE_EXCLUSIVE];
    [text setSpanWithId:[[RAREStyleSpan alloc] initWithInt:[AndroidTextHtmlToSpannedConverter_Font BOLD]] withInt:where withInt:len withInt:AndroidTextSpanned_SPAN_EXCLUSIVE_EXCLUSIVE];
  }
}

+ (void)endSpanWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text {
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  id obj = [AndroidTextHtmlToSpannedConverter getLastWithAndroidTextSpanned:text withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Style class]]];
  int where = [text getSpanStartWithId:obj];
  [text removeSpanWithId:obj];
  if (where != len) {
    AndroidTextHtmlToSpannedConverter_Style *s = (AndroidTextHtmlToSpannedConverter_Style *) check_class_cast(obj, [AndroidTextHtmlToSpannedConverter_Style class]);
    if (((AndroidTextHtmlToSpannedConverter_Style *) nil_chk(s))->mStyle_ != nil) {
      [text setSpanWithId:[[RARECSSStyleSpan alloc] initWithNSString:s->mStyle_] withInt:where withInt:len withInt:AndroidTextSpanned_SPAN_EXCLUSIVE_EXCLUSIVE];
    }
  }
}

+ (void)handleBrWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text {
  (void) [((AndroidTextSpannableStringBuilder *) nil_chk(text)) appendWithChar:0x000a];
}

- (void)handleEndTagWithNSString:(NSString *)tag {
  if ([((NSString *) nil_chk(tag)) equalsIgnoreCase:@"br"]) {
    [AndroidTextHtmlToSpannedConverter handleBrWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
  }
  else if ([tag equalsIgnoreCase:@"p"]) {
    [AndroidTextHtmlToSpannedConverter handlePWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
  }
  else if ([tag equalsIgnoreCase:@"div"]) {
    [AndroidTextHtmlToSpannedConverter handlePWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
  }
  else if ([tag equalsIgnoreCase:@"em"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Bold class]] withId:[[RAREStyleSpan alloc] initWithInt:[AndroidTextHtmlToSpannedConverter_Font BOLD]]];
  }
  else if ([tag equalsIgnoreCase:@"b"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Bold class]] withId:[[RAREStyleSpan alloc] initWithInt:[AndroidTextHtmlToSpannedConverter_Font BOLD]]];
  }
  else if ([tag equalsIgnoreCase:@"strong"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Italic class]] withId:[[RAREStyleSpan alloc] initWithInt:[AndroidTextHtmlToSpannedConverter_Font ITALIC]]];
  }
  else if ([tag equalsIgnoreCase:@"cite"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Italic class]] withId:[[RAREStyleSpan alloc] initWithInt:[AndroidTextHtmlToSpannedConverter_Font ITALIC]]];
  }
  else if ([tag equalsIgnoreCase:@"dfn"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Italic class]] withId:[[RAREStyleSpan alloc] initWithInt:[AndroidTextHtmlToSpannedConverter_Font ITALIC]]];
  }
  else if ([tag equalsIgnoreCase:@"i"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Italic class]] withId:[[RAREStyleSpan alloc] initWithInt:[AndroidTextHtmlToSpannedConverter_Font ITALIC]]];
  }
  else if ([tag equalsIgnoreCase:@"big"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Big class]] withId:[[RARERelativeSizeSpan alloc] initWithFloat:1.25f]];
  }
  else if ([tag equalsIgnoreCase:@"small"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Small class]] withId:[[RARERelativeSizeSpan alloc] initWithFloat:0.8f]];
  }
  else if ([tag equalsIgnoreCase:@"font"]) {
    [AndroidTextHtmlToSpannedConverter endFontWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
  }
  else if ([tag equalsIgnoreCase:@"blockquote"]) {
    [AndroidTextHtmlToSpannedConverter handlePWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Blockquote class]] withId:[[RAREQuoteSpan alloc] init]];
  }
  else if ([tag equalsIgnoreCase:@"tt"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Monospace class]] withId:[[RARETypefaceSpan alloc] initWithNSString:@"monospace"]];
  }
  else if ([tag equalsIgnoreCase:@"a"]) {
    [AndroidTextHtmlToSpannedConverter endAWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
  }
  else if ([tag equalsIgnoreCase:@"span"]) {
    [AndroidTextHtmlToSpannedConverter endSpanWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
  }
  else if ([tag equalsIgnoreCase:@"u"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Underline class]] withId:[[RAREUnderlineSpan alloc] init]];
  }
  else if ([tag equalsIgnoreCase:@"s"] || [tag equalsIgnoreCase:@"strike"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Strikethrough class]] withId:[[RAREStrikethroughSpan alloc] init]];
  }
  else if ([tag equalsIgnoreCase:@"center"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Center class]] withId:[[RARECenterSpan alloc] init]];
  }
  else if ([tag equalsIgnoreCase:@"sup"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Super class]] withId:[[RARESuperscriptSpan alloc] init]];
  }
  else if ([tag equalsIgnoreCase:@"sub"]) {
    [AndroidTextHtmlToSpannedConverter endWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withIOSClass:[IOSClass classWithClass:[AndroidTextHtmlToSpannedConverter_Sub class]] withId:[[RARESubscriptSpan alloc] init]];
  }
  else if (([tag sequenceLength] == 2) && ([JavaLangCharacter toLowerCaseWithChar:[tag charAtWithInt:0]] == 'h') && ([tag charAtWithInt:1] >= '1') && ([tag charAtWithInt:1] <= '6')) {
    [AndroidTextHtmlToSpannedConverter handlePWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
    [AndroidTextHtmlToSpannedConverter endHeaderWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
  }
  else if (mTagHandler_ != nil) {
    [mTagHandler_ handleTagWithBoolean:NO withNSString:tag withAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withOrgXmlSaxAttributes:nil];
  }
}

+ (void)handlePWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text {
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  if ((len >= 1) && ([text charAtWithInt:len - 1] == 0x000a)) {
    if ((len >= 2) && ([text charAtWithInt:len - 2] == 0x000a)) {
      return;
    }
    (void) [text appendWithChar:0x000a];
    return;
  }
  if (len != 0) {
    (void) [text appendWithChar:0x000a];
    (void) [text appendWithChar:0x000a];
  }
}

- (void)handleStartTagWithNSString:(NSString *)tag
           withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes {
  if ([((NSString *) nil_chk(tag)) equalsIgnoreCase:@"br"]) {
  }
  else if ([tag equalsIgnoreCase:@"p"]) {
    [AndroidTextHtmlToSpannedConverter handlePWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
  }
  else if ([tag equalsIgnoreCase:@"div"]) {
    [AndroidTextHtmlToSpannedConverter handlePWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
  }
  else if ([tag equalsIgnoreCase:@"em"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newBold]];
  }
  else if ([tag equalsIgnoreCase:@"b"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newBold]];
  }
  else if ([tag equalsIgnoreCase:@"strong"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newItalic]];
  }
  else if ([tag equalsIgnoreCase:@"cite"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newItalic]];
  }
  else if ([tag equalsIgnoreCase:@"dfn"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newItalic]];
  }
  else if ([tag equalsIgnoreCase:@"i"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newItalic]];
  }
  else if ([tag equalsIgnoreCase:@"big"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newBig]];
  }
  else if ([tag equalsIgnoreCase:@"small"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newSmall]];
  }
  else if ([tag equalsIgnoreCase:@"font"]) {
    [AndroidTextHtmlToSpannedConverter startFontWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withOrgXmlSaxAttributes:attributes];
  }
  else if ([tag equalsIgnoreCase:@"blockquote"]) {
    [AndroidTextHtmlToSpannedConverter handlePWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newBlockquote]];
  }
  else if ([tag equalsIgnoreCase:@"tt"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newMonospace]];
  }
  else if ([tag equalsIgnoreCase:@"a"]) {
    [AndroidTextHtmlToSpannedConverter startAWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withOrgXmlSaxAttributes:attributes];
  }
  else if ([tag equalsIgnoreCase:@"span"]) {
    [AndroidTextHtmlToSpannedConverter startSpanWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withOrgXmlSaxAttributes:attributes];
  }
  else if ([tag equalsIgnoreCase:@"u"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newUnderline]];
  }
  else if ([tag equalsIgnoreCase:@"s"] || [tag equalsIgnoreCase:@"strike"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newStrikethrough]];
  }
  else if ([tag equalsIgnoreCase:@"center"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newCenter]];
  }
  else if ([tag equalsIgnoreCase:@"sup"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newSuper]];
  }
  else if ([tag equalsIgnoreCase:@"sub"]) {
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[AndroidTextHtmlToSpannedConverter newSub]];
  }
  else if (([tag sequenceLength] == 2) && ([JavaLangCharacter toLowerCaseWithChar:[tag charAtWithInt:0]] == 'h') && ([tag charAtWithInt:1] >= '1') && ([tag charAtWithInt:1] <= '6')) {
    [AndroidTextHtmlToSpannedConverter handlePWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_];
    [AndroidTextHtmlToSpannedConverter startWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withId:[[AndroidTextHtmlToSpannedConverter_Header alloc] initWithInt:[tag charAtWithInt:1] - '1']];
  }
  else if ([tag equalsIgnoreCase:@"img"]) {
    [AndroidTextHtmlToSpannedConverter startImgWithAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withOrgXmlSaxAttributes:attributes withAndroidTextHtml_ImageGetter:mImageGetter_];
  }
  else if (mTagHandler_ != nil) {
    [mTagHandler_ handleTagWithBoolean:YES withNSString:tag withAndroidTextSpannableStringBuilder:mSpannableStringBuilder_ withOrgXmlSaxAttributes:attributes];
  }
}

+ (void)startWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text
                                            withId:(id)mark {
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  [text setSpanWithId:mark withInt:len withInt:len withInt:AndroidTextSpanned_SPAN_MARK_MARK];
}

+ (void)startAWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text
                            withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes {
  NSString *href = [((id<OrgXmlSaxAttributes>) nil_chk(attributes)) getValueWithNSString:@"" withNSString:@"href"];
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  [text setSpanWithId:[[AndroidTextHtmlToSpannedConverter_Href alloc] initWithNSString:href] withInt:len withInt:len withInt:AndroidTextSpanned_SPAN_MARK_MARK];
}

+ (void)startFontWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text
                               withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes {
  NSString *color = [((id<OrgXmlSaxAttributes>) nil_chk(attributes)) getValueWithNSString:@"" withNSString:@"color"];
  NSString *face = [attributes getValueWithNSString:@"" withNSString:@"face"];
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  [text setSpanWithId:[[AndroidTextHtmlToSpannedConverter_Font alloc] initWithNSString:color withNSString:face] withInt:len withInt:len withInt:AndroidTextSpanned_SPAN_MARK_MARK];
}

+ (void)startImgWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text
                              withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes
                      withAndroidTextHtml_ImageGetter:(id<AndroidTextHtml_ImageGetter>)img {
  NSString *src = [((id<OrgXmlSaxAttributes>) nil_chk(attributes)) getValueWithNSString:@"" withNSString:@"src"];
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  (void) [text appendWithJavaLangCharSequence:@"\ufffc"];
  [text setSpanWithId:[[RAREImageSpan alloc] initWithNSString:src] withInt:len withInt:[text sequenceLength] withInt:AndroidTextSpanned_SPAN_EXCLUSIVE_EXCLUSIVE];
}

+ (void)startSpanWithAndroidTextSpannableStringBuilder:(AndroidTextSpannableStringBuilder *)text
                               withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes {
  NSString *style = [((id<OrgXmlSaxAttributes>) nil_chk(attributes)) getValueWithNSString:@"" withNSString:@"style"];
  int len = [((AndroidTextSpannableStringBuilder *) nil_chk(text)) sequenceLength];
  [text setSpanWithId:[[AndroidTextHtmlToSpannedConverter_Style alloc] initWithNSString:style] withInt:len withInt:len withInt:AndroidTextSpanned_SPAN_MARK_MARK];
}

+ (id)getLastWithAndroidTextSpanned:(id<AndroidTextSpanned>)text
                       withIOSClass:(IOSClass *)kind {
  IOSObjectArray *objs = [text getSpansWithInt:0 withInt:[((id<AndroidTextSpanned>) nil_chk(text)) sequenceLength] withIOSClass:kind];
  if ((int) [((IOSObjectArray *) nil_chk(objs)) count] == 0) {
    return nil;
  }
  else {
    return IOSObjectArray_Get(objs, (int) [objs count] - 1);
  }
}

+ (AndroidTextHtmlToSpannedConverter_Center *)newCenter {
  if (AndroidTextHtmlToSpannedConverter_center_ == nil) {
    AndroidTextHtmlToSpannedConverter_center_ = [[AndroidTextHtmlToSpannedConverter_Center alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_center_;
}

+ (AndroidTextHtmlToSpannedConverter_Sub *)newSub {
  if (AndroidTextHtmlToSpannedConverter_sub_ == nil) {
    AndroidTextHtmlToSpannedConverter_sub_ = [[AndroidTextHtmlToSpannedConverter_Sub alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_sub_;
}

+ (AndroidTextHtmlToSpannedConverter_Super *)newSuper {
  if (AndroidTextHtmlToSpannedConverter_ssuper_ == nil) {
    AndroidTextHtmlToSpannedConverter_ssuper_ = [[AndroidTextHtmlToSpannedConverter_Super alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_ssuper_;
}

+ (AndroidTextHtmlToSpannedConverter_Bold *)newBold {
  if (AndroidTextHtmlToSpannedConverter_bold_ == nil) {
    AndroidTextHtmlToSpannedConverter_bold_ = [[AndroidTextHtmlToSpannedConverter_Bold alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_bold_;
}

+ (AndroidTextHtmlToSpannedConverter_Italic *)newItalic {
  if (AndroidTextHtmlToSpannedConverter_italic_ == nil) {
    AndroidTextHtmlToSpannedConverter_italic_ = [[AndroidTextHtmlToSpannedConverter_Italic alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_italic_;
}

+ (AndroidTextHtmlToSpannedConverter_Small *)newSmall {
  if (AndroidTextHtmlToSpannedConverter_small_ == nil) {
    AndroidTextHtmlToSpannedConverter_small_ = [[AndroidTextHtmlToSpannedConverter_Small alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_small_;
}

+ (AndroidTextHtmlToSpannedConverter_Big *)newBig {
  if (AndroidTextHtmlToSpannedConverter_big_ == nil) {
    AndroidTextHtmlToSpannedConverter_big_ = [[AndroidTextHtmlToSpannedConverter_Big alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_big_;
}

+ (AndroidTextHtmlToSpannedConverter_Blockquote *)newBlockquote {
  if (AndroidTextHtmlToSpannedConverter_blockquote_ == nil) {
    AndroidTextHtmlToSpannedConverter_blockquote_ = [[AndroidTextHtmlToSpannedConverter_Blockquote alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_blockquote_;
}

+ (AndroidTextHtmlToSpannedConverter_Monospace *)newMonospace {
  if (AndroidTextHtmlToSpannedConverter_monospace_ == nil) {
    AndroidTextHtmlToSpannedConverter_monospace_ = [[AndroidTextHtmlToSpannedConverter_Monospace alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_monospace_;
}

+ (AndroidTextHtmlToSpannedConverter_Underline *)newUnderline {
  if (AndroidTextHtmlToSpannedConverter_underline_ == nil) {
    AndroidTextHtmlToSpannedConverter_underline_ = [[AndroidTextHtmlToSpannedConverter_Underline alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_underline_;
}

+ (AndroidTextHtmlToSpannedConverter_Strikethrough *)newStrikethrough {
  if (AndroidTextHtmlToSpannedConverter_strikethrough_ == nil) {
    AndroidTextHtmlToSpannedConverter_strikethrough_ = [[AndroidTextHtmlToSpannedConverter_Strikethrough alloc] init];
  }
  return AndroidTextHtmlToSpannedConverter_strikethrough_;
}

+ (void)initialize {
  if (self == [AndroidTextHtmlToSpannedConverter class]) {
    AndroidTextHtmlToSpannedConverter_HEADER_SIZES_ = [IOSFloatArray arrayWithFloats:(float[]){ 1.5f, 1.4f, 1.3f, 1.2f, 1.1f, 1.0f } count:6];
  }
}

- (void)copyAllFieldsTo:(AndroidTextHtmlToSpannedConverter *)other {
  [super copyAllFieldsTo:other];
  other->mImageGetter_ = mImageGetter_;
  other->mReader_ = mReader_;
  other->mSource_ = mSource_;
  other->mSpannableStringBuilder_ = mSpannableStringBuilder_;
  other->mTagHandler_ = mTagHandler_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "charactersWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "convert", NULL, "LAndroidTextSpanned", 0x1, NULL },
    { "endDocument", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "endElementWithNSString:withNSString:withNSString:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "endPrefixMappingWithNSString:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "ignorableWhitespaceWithCharArray:withInt:withInt:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "processingInstructionWithNSString:withNSString:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "skippedEntityWithNSString:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "startDocument", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "startElementWithNSString:withNSString:withNSString:withOrgXmlSaxAttributes:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "startPrefixMappingWithNSString:withNSString:", NULL, "V", 0x1, "OrgXmlSaxSAXException" },
    { "endWithAndroidTextSpannableStringBuilder:withIOSClass:withId:", NULL, "V", 0xa, NULL },
    { "endAWithAndroidTextSpannableStringBuilder:", NULL, "V", 0xa, NULL },
    { "endFontWithAndroidTextSpannableStringBuilder:", NULL, "V", 0xa, NULL },
    { "endHeaderWithAndroidTextSpannableStringBuilder:", NULL, "V", 0xa, NULL },
    { "endSpanWithAndroidTextSpannableStringBuilder:", NULL, "V", 0xa, NULL },
    { "handleBrWithAndroidTextSpannableStringBuilder:", NULL, "V", 0xa, NULL },
    { "handleEndTagWithNSString:", NULL, "V", 0x2, NULL },
    { "handlePWithAndroidTextSpannableStringBuilder:", NULL, "V", 0xa, NULL },
    { "handleStartTagWithNSString:withOrgXmlSaxAttributes:", NULL, "V", 0x2, NULL },
    { "startWithAndroidTextSpannableStringBuilder:withId:", NULL, "V", 0xa, NULL },
    { "startAWithAndroidTextSpannableStringBuilder:withOrgXmlSaxAttributes:", NULL, "V", 0xa, NULL },
    { "startFontWithAndroidTextSpannableStringBuilder:withOrgXmlSaxAttributes:", NULL, "V", 0xa, NULL },
    { "startImgWithAndroidTextSpannableStringBuilder:withOrgXmlSaxAttributes:withAndroidTextHtml_ImageGetter:", NULL, "V", 0xa, NULL },
    { "startSpanWithAndroidTextSpannableStringBuilder:withOrgXmlSaxAttributes:", NULL, "V", 0xa, NULL },
    { "getLastWithAndroidTextSpanned:withIOSClass:", NULL, "LNSObject", 0xa, NULL },
    { "newCenter", NULL, "LAndroidTextHtmlToSpannedConverter_Center", 0xa, NULL },
    { "newSub", NULL, "LAndroidTextHtmlToSpannedConverter_Sub", 0xa, NULL },
    { "newSuper", NULL, "LAndroidTextHtmlToSpannedConverter_Super", 0xa, NULL },
    { "newBold", NULL, "LAndroidTextHtmlToSpannedConverter_Bold", 0xa, NULL },
    { "newItalic", NULL, "LAndroidTextHtmlToSpannedConverter_Italic", 0xa, NULL },
    { "newSmall", NULL, "LAndroidTextHtmlToSpannedConverter_Small", 0xa, NULL },
    { "newBig", NULL, "LAndroidTextHtmlToSpannedConverter_Big", 0xa, NULL },
    { "newBlockquote", NULL, "LAndroidTextHtmlToSpannedConverter_Blockquote", 0xa, NULL },
    { "newMonospace", NULL, "LAndroidTextHtmlToSpannedConverter_Monospace", 0xa, NULL },
    { "newUnderline", NULL, "LAndroidTextHtmlToSpannedConverter_Underline", 0xa, NULL },
    { "newStrikethrough", NULL, "LAndroidTextHtmlToSpannedConverter_Strikethrough", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "HEADER_SIZES_", NULL, 0x1a, "LIOSFloatArray" },
    { "center_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Center" },
    { "sub_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Sub" },
    { "ssuper_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Super" },
    { "bold_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Bold" },
    { "italic_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Italic" },
    { "small_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Small" },
    { "big_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Big" },
    { "blockquote_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Blockquote" },
    { "monospace_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Monospace" },
    { "underline_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Underline" },
    { "strikethrough_", NULL, 0xa, "LAndroidTextHtmlToSpannedConverter_Strikethrough" },
  };
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter = { "HtmlToSpannedConverter", "android.text", NULL, 0x0, 37, methods, 12, fields, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter;
}

@end

@interface AndroidTextHtml_ImageGetter : NSObject
@end

@implementation AndroidTextHtml_ImageGetter

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDrawableWithNSString:", NULL, "LNSObject", 0x401, NULL },
  };
  static J2ObjcClassInfo _AndroidTextHtml_ImageGetter = { "ImageGetter", "android.text", "Html", 0x209, 1, methods, 0, NULL, 0, NULL};
  return &_AndroidTextHtml_ImageGetter;
}

@end

@interface AndroidTextHtml_TagHandler : NSObject
@end

@implementation AndroidTextHtml_TagHandler

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "handleTagWithBoolean:withNSString:withAndroidTextSpannableStringBuilder:withOrgXmlSaxAttributes:", NULL, "V", 0x401, NULL },
  };
  static J2ObjcClassInfo _AndroidTextHtml_TagHandler = { "TagHandler", "android.text", "Html", 0x209, 1, methods, 0, NULL, 0, NULL};
  return &_AndroidTextHtml_TagHandler;
}

@end
@implementation AndroidTextHtml_Node

- (AndroidTextHtml_Node *)appendWithNSString:(NSString *)s {
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return self;
  }
  if (style_ == nil) {
    style_ = [[JavaLangStringBuilder alloc] init];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(style_)) appendWithNSString:s])) appendWithChar:';'];
  return self;
}

- (AndroidTextHtml_Node *)blockQuoteWithInt:(int)indent {
  AndroidTextHtml_Node *node = [self newChild];
  container_ = YES;
  ((AndroidTextHtml_Node *) nil_chk(node))->indent_ = indent;
  return node;
}

- (AndroidTextHtml_Node *)closeWithNSString:(NSString *)s {
  if (style_ == nil) {
    return self;
  }
  int n = [((JavaLangStringBuilder *) nil_chk(style_)) lastIndexOfWithNSString:s];
  if (n == -1) {
    return self;
  }
  AndroidTextHtml_Node *node = [[AndroidTextHtml_Node alloc] init];
  node->style_ = [[JavaLangStringBuilder alloc] init];
  (void) [node->style_ appendWithJavaLangCharSequence:style_ withInt:0 withInt:n];
  n += [((NSString *) nil_chk(s)) sequenceLength] + 1;
  if (n < [style_ sequenceLength]) {
    (void) [node->style_ appendWithJavaLangCharSequence:style_ withInt:n withInt:[style_ sequenceLength] - n];
  }
  return node;
}

- (AndroidTextHtml_Node *)hrefWithNSString:(NSString *)href {
  self->href__ = href;
  return self;
}

- (AndroidTextHtml_Node *)imageWithNSString:(NSString *)href {
  image__ = href;
  return self;
}

- (AndroidTextHtml_Node *)newChild {
  AndroidTextHtml_Node *node = [[AndroidTextHtml_Node alloc] init];
  if (style_ != nil) {
    node->style_ = [[JavaLangStringBuilder alloc] initWithJavaLangCharSequence:style_];
  }
  if (children_ == nil) {
    children_ = [[JavaUtilArrayList alloc] init];
  }
  [((JavaUtilArrayList *) nil_chk(children_)) addWithId:node];
  return node;
}

- (AndroidTextHtml_Node *)paragraph {
  container_ = YES;
  AndroidTextHtml_Node *node = [self newChild];
  return node;
}

- (NSString *)description {
  return [((JavaLangStringBuilder *) nil_chk([self toStringWithJavaLangStringBuilder:[[JavaLangStringBuilder alloc] init]])) description];
}

- (JavaLangStringBuilder *)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ((text_ == nil) && (image__ == nil)) {
    return sb;
  }
  if (href__ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<a href=\""];
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:href__])) appendWithChar:'"'];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<span"];
  }
  if (style_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" style=\""])) appendWithJavaLangCharSequence:style_];
    [sb setCharAtWithInt:[sb sequenceLength] - 1 withChar:'"'];
  }
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'>'];
  if (text_ != nil) {
    (void) [sb appendWithNSString:text_];
  }
  if (href__ != nil) {
    (void) [sb appendWithNSString:@"</a>"];
  }
  else {
    (void) [sb appendWithNSString:@"</span>"];
  }
  return sb;
}

- (id)init {
  return [super init];
}

- (void)copyAllFieldsTo:(AndroidTextHtml_Node *)other {
  [super copyAllFieldsTo:other];
  other->children_ = children_;
  other->container_ = container_;
  other->href__ = href__;
  other->image__ = image__;
  other->indent_ = indent_;
  other->linefeed_ = linefeed_;
  other->style_ = style_;
  other->text_ = text_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "appendWithNSString:", NULL, "LAndroidTextHtml_Node", 0x1, NULL },
    { "blockQuoteWithInt:", NULL, "LAndroidTextHtml_Node", 0x1, NULL },
    { "closeWithNSString:", NULL, "LAndroidTextHtml_Node", 0x1, NULL },
    { "hrefWithNSString:", NULL, "LAndroidTextHtml_Node", 0x1, NULL },
    { "imageWithNSString:", NULL, "LAndroidTextHtml_Node", 0x1, NULL },
    { "newChild", NULL, "LAndroidTextHtml_Node", 0x1, NULL },
    { "paragraph", NULL, "LAndroidTextHtml_Node", 0x1, NULL },
    { "toStringWithJavaLangStringBuilder:", NULL, "LJavaLangStringBuilder", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "children_", NULL, 0x1, "LJavaUtilArrayList" },
    { "container_", NULL, 0x1, "Z" },
    { "href__", "href", 0x1, "LNSString" },
    { "image__", "image", 0x1, "LNSString" },
    { "indent_", NULL, 0x1, "I" },
    { "linefeed_", NULL, 0x1, "I" },
    { "style_", NULL, 0x1, "LJavaLangStringBuilder" },
    { "text_", NULL, 0x1, "LNSString" },
  };
  static J2ObjcClassInfo _AndroidTextHtml_Node = { "Node", "android.text", "Html", 0x9, 8, methods, 8, fields, 0, NULL};
  return &_AndroidTextHtml_Node;
}

@end
@implementation AndroidTextHtml_Typeface

+ (int)BOLD {
  return AndroidTextHtml_Typeface_BOLD;
}

+ (int)ITALIC {
  return AndroidTextHtml_Typeface_ITALIC;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "BOLD_", NULL, 0x19, "I" },
    { "ITALIC_", NULL, 0x19, "I" },
  };
  static J2ObjcClassInfo _AndroidTextHtml_Typeface = { "Typeface", "android.text", "Html", 0x9, 0, NULL, 2, fields, 0, NULL};
  return &_AndroidTextHtml_Typeface;
}

@end
@implementation AndroidTextHtml_HtmlParser

static RAREHTMLSchema * AndroidTextHtml_HtmlParser_schema_;

+ (RAREHTMLSchema *)schema {
  return AndroidTextHtml_HtmlParser_schema_;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [AndroidTextHtml_HtmlParser class]) {
    AndroidTextHtml_HtmlParser_schema_ = [[RAREHTMLSchema alloc] init];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "schema_", NULL, 0x1a, "LRAREHTMLSchema" },
  };
  static J2ObjcClassInfo _AndroidTextHtml_HtmlParser = { "HtmlParser", "android.text", "Html", 0xa, 0, NULL, 1, fields, 0, NULL};
  return &_AndroidTextHtml_HtmlParser;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Big

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Big = { "Big", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Big;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Blockquote

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Blockquote = { "Blockquote", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Blockquote;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Bold

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Bold = { "Bold", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Bold;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Font

static int AndroidTextHtmlToSpannedConverter_Font_BOLD_ = 1;
static int AndroidTextHtmlToSpannedConverter_Font_ITALIC_ = 2;

+ (int)BOLD {
  return AndroidTextHtmlToSpannedConverter_Font_BOLD_;
}

+ (int *)BOLDRef {
  return &AndroidTextHtmlToSpannedConverter_Font_BOLD_;
}

+ (int)ITALIC {
  return AndroidTextHtmlToSpannedConverter_Font_ITALIC_;
}

+ (int *)ITALICRef {
  return &AndroidTextHtmlToSpannedConverter_Font_ITALIC_;
}

- (id)initWithNSString:(NSString *)color
          withNSString:(NSString *)face {
  if (self = [super init]) {
    mColor_ = color;
    mFace_ = face;
  }
  return self;
}

- (void)copyAllFieldsTo:(AndroidTextHtmlToSpannedConverter_Font *)other {
  [super copyAllFieldsTo:other];
  other->mColor_ = mColor_;
  other->mFace_ = mFace_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "BOLD_", NULL, 0x9, "I" },
    { "ITALIC_", NULL, 0x9, "I" },
    { "mColor_", NULL, 0x1, "LNSString" },
    { "mFace_", NULL, 0x1, "LNSString" },
  };
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Font = { "Font", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 4, fields, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Font;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Header

- (id)initWithInt:(int)level {
  if (self = [super init]) {
    mLevel_ = level;
  }
  return self;
}

- (void)copyAllFieldsTo:(AndroidTextHtmlToSpannedConverter_Header *)other {
  [super copyAllFieldsTo:other];
  other->mLevel_ = mLevel_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Header = { "Header", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Header;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Href

- (id)initWithNSString:(NSString *)href {
  if (self = [super init]) {
    mHref_ = href;
  }
  return self;
}

- (void)copyAllFieldsTo:(AndroidTextHtmlToSpannedConverter_Href *)other {
  [super copyAllFieldsTo:other];
  other->mHref_ = mHref_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "mHref_", NULL, 0x1, "LNSString" },
  };
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Href = { "Href", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 1, fields, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Href;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Italic

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Italic = { "Italic", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Italic;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Monospace

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Monospace = { "Monospace", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Monospace;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Small

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Small = { "Small", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Small;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Style

- (id)initWithNSString:(NSString *)style {
  if (self = [super init]) {
    mStyle_ = style;
  }
  return self;
}

- (void)copyAllFieldsTo:(AndroidTextHtmlToSpannedConverter_Style *)other {
  [super copyAllFieldsTo:other];
  other->mStyle_ = mStyle_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "mStyle_", NULL, 0x1, "LNSString" },
  };
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Style = { "Style", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 1, fields, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Style;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Sub

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Sub = { "Sub", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Sub;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Super

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Super = { "Super", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Super;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Underline

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Underline = { "Underline", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Underline;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Strikethrough

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Strikethrough = { "Strikethrough", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Strikethrough;
}

@end
@implementation AndroidTextHtmlToSpannedConverter_Center

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _AndroidTextHtmlToSpannedConverter_Center = { "Center", "android.text", "HtmlToSpannedConverter", 0xa, 0, NULL, 0, NULL, 0, NULL};
  return &_AndroidTextHtmlToSpannedConverter_Center;
}

@end
