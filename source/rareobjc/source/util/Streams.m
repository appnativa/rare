//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/Streams.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "com/appnativa/util/ASCII85InputStream.h"
#include "com/appnativa/util/Base64.h"
#include "com/appnativa/util/ByteArray.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/Streams.h"
#include "com/appnativa/util/URLEncoder.h"
#include "com/appnativa/util/aStreamer.h"
#include "com/appnativa/util/io/BufferedReaderEx.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/Writer.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/nio/CharBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation RAREUTStreams

+ (RAREUTStreams_CharArrayWriter *)charArrayWriterWithRAREUTCharArray:(RAREUTCharArray *)ca {
  return [[RAREUTStreams_CharArrayWriter alloc] initWithRAREUTCharArray:ca];
}

+ (JavaIoReader *)getDecodingReaderWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                            withNSString:(NSString *)enc
                                            withNSString:(NSString *)cs
                                                 withInt:(int)bufferSize {
  if (enc != nil) {
    if ([enc equalsIgnoreCase:@"base64"]) {
      inArg = [RAREUTBase64 decodingStreamWithJavaIoInputStream:inArg];
    }
    else if ([enc equalsIgnoreCase:@"base85"] || [enc equalsIgnoreCase:@"ascii85"]) {
      inArg = [[RAREUTASCII85InputStream alloc] initWithJavaIoInputStream:inArg];
    }
    else if ([enc isEqual:@"application/x-www-form-urlencoded"]) {
      return [[RAREUTBufferedReaderEx alloc] initWithJavaIoReader:[[RAREUTStreams_URLDecodingReader alloc] initWithJavaIoInputStream:inArg withNSString:cs] withInt:256];
    }
  }
  if (bufferSize < 1) {
    bufferSize = 1024;
  }
  return [[RAREUTBufferedReaderEx alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:inArg withNSString:cs] withInt:bufferSize];
}

+ (NSString *)readerToStringWithJavaIoReader:(JavaIoReader *)reader {
  if (reader == nil) {
    return nil;
  }
  int n = 0;
  int pos = 0;
  int len = 1024;
  RAREUTCharArray *out = [[RAREUTCharArray alloc] initWithInt:len];
  while ((n = [((JavaIoReader *) nil_chk(reader)) readWithCharArray:out->A_ withInt:pos withInt:len]) != -1) {
    pos += n;
    [out ensureCapacityWithInt:pos + 1024];
  }
  out->_length_ = pos;
  return [out description];
}

+ (int)readerToWriterWithJavaIoReader:(JavaIoReader *)reader
                     withJavaIoWriter:(JavaIoWriter *)writer
                        withCharArray:(IOSCharArray *)block {
  int len = 0, count = 0;
  if (block == nil) {
    block = [IOSCharArray arrayWithLength:1024];
  }
  while ((len = [((JavaIoReader *) nil_chk(reader)) readWithCharArray:block]) != -1) {
    if (len > 0) {
      [((JavaIoWriter *) nil_chk(writer)) writeWithCharArray:block withInt:0 withInt:len];
      count += len;
    }
  }
  [((JavaIoWriter *) nil_chk(writer)) flush];
  return count;
}

+ (RAREUTByteArray *)streamToBytesWithJavaIoInputStream:(JavaIoInputStream *)stream
                                    withRAREUTByteArray:(RAREUTByteArray *)ba {
  if (stream == nil) {
    return nil;
  }
  if (ba == nil) {
    ba = [[RAREUTByteArray alloc] init];
  }
  int n = 0;
  int pos = 0;
  int len = 1024;
  [ba ensureCapacityWithInt:((RAREUTByteArray *) nil_chk(ba))->_length_ + len];
  while ((n = [((JavaIoInputStream *) nil_chk(stream)) readWithByteArray:ba->A_ withInt:pos withInt:len]) != -1) {
    pos += n;
    [ba ensureCapacityWithInt:pos + 1024];
  }
  ba->_length_ += pos;
  return ba;
}

+ (long long int)drainWithJavaIoInputStream:(JavaIoInputStream *)stream
                                withBoolean:(BOOL)silent {
  if (stream == nil) {
    return 0;
  }
  IOSByteArray *b = [IOSByteArray arrayWithLength:256];
  int n;
  long long int len = 0;
  @try {
    while ((n = [((JavaIoInputStream *) nil_chk(stream)) readWithByteArray:b withInt:0 withInt:256]) != -1) {
      len += n;
    }
  }
  @catch (JavaIoIOException *e) {
    if (!silent) {
      @throw e;
    }
  }
  return len;
}

+ (int)streamToStreamWithJavaIoInputStream:(JavaIoInputStream *)istream
                    withJavaIoOutputStream:(JavaIoOutputStream *)ostream
                             withByteArray:(IOSByteArray *)block {
  if ((istream == nil) || (ostream == nil)) {
    return 0;
  }
  int len = 0, count = 0;
  if (block == nil) {
    block = [IOSByteArray arrayWithLength:1024];
  }
  while ((len = [((JavaIoInputStream *) nil_chk(istream)) readWithByteArray:block]) != -1) {
    if (len > 0) {
      [((JavaIoOutputStream *) nil_chk(ostream)) writeWithByteArray:block withInt:0 withInt:len];
      count += len;
    }
  }
  [((JavaIoOutputStream *) nil_chk(ostream)) flush];
  return count;
}

+ (id<JavaUtilList>)streamToStringsWithJavaIoInputStream:(JavaIoInputStream *)stream {
  id<JavaUtilList> list = [[JavaUtilArrayList alloc] init];
  [RAREUTStreams streamToStringsWithJavaIoInputStream:stream withJavaUtilList:list];
  return list;
}

+ (NSString *)streamToStringWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return [RAREUTStreams readerToStringWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:stream]];
}

+ (void)streamToStringsWithJavaIoInputStream:(JavaIoInputStream *)stream
                            withJavaUtilList:(id<JavaUtilList>)list {
  JavaIoBufferedReader *reader = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:stream]];
  NSString *s;
  while ((s = [reader readLine]) != nil) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:s];
  }
}

+ (int)streamToWriterWithJavaIoInputStream:(JavaIoInputStream *)stream
                          withJavaIoWriter:(JavaIoWriter *)writer
                             withCharArray:(IOSCharArray *)block {
  int len = 0, count = 0;
  JavaIoInputStreamReader *ir = [[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:stream withNSString:@"iso-8859-1"];
  if (block == nil) {
    block = [IOSCharArray arrayWithLength:1024];
  }
  while ((len = [ir readWithCharArray:block]) != -1) {
    if (len > 0) {
      [((JavaIoWriter *) nil_chk(writer)) writeWithCharArray:block withInt:0 withInt:len];
      count += len;
    }
  }
  [((JavaIoWriter *) nil_chk(writer)) flush];
  return count;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "charArrayWriterWithRAREUTCharArray:", NULL, "LRAREUTStreams_CharArrayWriter", 0x9, NULL },
    { "getDecodingReaderWithJavaIoInputStream:withNSString:withNSString:withInt:", NULL, "LJavaIoReader", 0x9, "JavaIoIOException" },
    { "readerToStringWithJavaIoReader:", NULL, "LNSString", 0x9, "JavaIoIOException" },
    { "readerToWriterWithJavaIoReader:withJavaIoWriter:withCharArray:", NULL, "I", 0x9, "JavaIoIOException" },
    { "streamToBytesWithJavaIoInputStream:withRAREUTByteArray:", NULL, "LRAREUTByteArray", 0x9, "JavaIoIOException" },
    { "drainWithJavaIoInputStream:withBoolean:", NULL, "J", 0x9, "JavaIoIOException" },
    { "streamToStreamWithJavaIoInputStream:withJavaIoOutputStream:withByteArray:", NULL, "I", 0x9, "JavaIoIOException" },
    { "streamToStringsWithJavaIoInputStream:", NULL, "LJavaUtilList", 0x9, "JavaIoIOException" },
    { "streamToStringWithJavaIoInputStream:", NULL, "LNSString", 0x9, "JavaIoIOException" },
    { "streamToStringsWithJavaIoInputStream:withJavaUtilList:", NULL, "V", 0x9, "JavaIoIOException" },
    { "streamToWriterWithJavaIoInputStream:withJavaIoWriter:withCharArray:", NULL, "I", 0x9, "JavaIoIOException" },
  };
  static J2ObjcClassInfo _RAREUTStreams = { "Streams", "com.appnativa.util", NULL, 0x1, 11, methods, 0, NULL, 0, NULL};
  return &_RAREUTStreams;
}

@end
@implementation RAREUTStreams_CharArrayWriter

- (id)initWithRAREUTCharArray:(RAREUTCharArray *)ca {
  if (self = [super init]) {
    array_ = ca;
  }
  return self;
}

- (void)close {
}

- (void)flush {
}

- (RAREUTCharArray *)getArray {
  return array_;
}

- (void)writeWithInt:(int)c {
  (void) [((RAREUTCharArray *) nil_chk(array_)) appendWithChar:(unichar) c];
}

- (void)writeWithNSString:(NSString *)str {
  (void) [((RAREUTCharArray *) nil_chk(array_)) appendWithNSString:str];
}

- (void)writeWithCharArray:(IOSCharArray *)chars
                   withInt:(int)pos
                   withInt:(int)len {
  (void) [((RAREUTCharArray *) nil_chk(array_)) appendWithCharArray:chars withInt:pos withInt:len];
}

- (void)writeWithNSString:(NSString *)str
                  withInt:(int)off
                  withInt:(int)len {
  (void) [((RAREUTCharArray *) nil_chk(array_)) appendWithNSString:[((NSString *) nil_chk(str)) substring:off endIndex:off + len]];
}

- (void)copyAllFieldsTo:(RAREUTStreams_CharArrayWriter *)other {
  [super copyAllFieldsTo:other];
  other->array_ = array_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
    { "flush", NULL, "V", 0x1, "JavaIoIOException" },
    { "getArray", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "writeWithCharArray:withInt:withInt:", NULL, "V", 0x1, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "array_", NULL, 0x0, "LRAREUTCharArray" },
  };
  static J2ObjcClassInfo _RAREUTStreams_CharArrayWriter = { "CharArrayWriter", "com.appnativa.util", "Streams", 0x9, 4, methods, 1, fields, 0, NULL};
  return &_RAREUTStreams_CharArrayWriter;
}

@end
@implementation RAREUTStreams_FixedLengthInputStream

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)stream
                        withInt:(int)fixedlen {
  if (self = [super init]) {
    fixedLen_ = fixedlen;
    self->stream_ = stream;
  }
  return self;
}

- (int)available {
  int n = [((JavaIoInputStream *) nil_chk(stream_)) available];
  int p = fixedLen_ - readLen_;
  return (n < p) ? n : p;
}

- (int)read {
  if (readLen_ == fixedLen_) {
    return -1;
  }
  int c = [((JavaIoInputStream *) nil_chk(stream_)) read];
  if (c == -1) {
    readLen_ = fixedLen_;
  }
  return c;
}

- (int)readWithByteArray:(IOSByteArray *)b {
  return [self readWithByteArray:b withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(b)) count]];
}

- (int)readWithByteArray:(IOSByteArray *)b
                 withInt:(int)pos
                 withInt:(int)len {
  if (readLen_ == fixedLen_) {
    return -1;
  }
  int n = fixedLen_ - readLen_;
  if (n < len) {
    len = n;
  }
  int clen = [((JavaIoInputStream *) nil_chk(stream_)) readWithByteArray:b withInt:pos withInt:len];
  if (clen == -1) {
    readLen_ = fixedLen_;
  }
  else {
    readLen_ += clen;
  }
  return clen;
}

- (void)copyAllFieldsTo:(RAREUTStreams_FixedLengthInputStream *)other {
  [super copyAllFieldsTo:other];
  other->fixedLen_ = fixedLen_;
  other->readLen_ = readLen_;
  other->stream_ = stream_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "available", NULL, "I", 0x1, "JavaIoIOException" },
    { "read", NULL, "I", 0x1, "JavaIoIOException" },
    { "readWithByteArray:", NULL, "I", 0x1, "JavaIoIOException" },
    { "readWithByteArray:withInt:withInt:", NULL, "I", 0x1, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "fixedLen_", NULL, 0x0, "I" },
    { "readLen_", NULL, 0x0, "I" },
    { "stream_", NULL, 0x0, "LJavaIoInputStream" },
  };
  static J2ObjcClassInfo _RAREUTStreams_FixedLengthInputStream = { "FixedLengthInputStream", "com.appnativa.util", "Streams", 0x9, 4, methods, 3, fields, 0, NULL};
  return &_RAREUTStreams_FixedLengthInputStream;
}

@end
@implementation RAREUTStreams_ISO88591Reader

+ (int)buffSize {
  return RAREUTStreams_ISO88591Reader_buffSize;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)stream {
  if (self = [super init]) {
    blen_ = 0;
    bpos_ = 0;
    bytes_ = [IOSByteArray arrayWithLength:RAREUTStreams_ISO88591Reader_buffSize];
    self->stream_ = stream;
  }
  return self;
}

- (void)close {
  [((JavaIoInputStream *) nil_chk(stream_)) close];
}

- (int)readWithCharArray:(IOSCharArray *)cbuf
                 withInt:(int)off
                 withInt:(int)len {
  if (blen_ < 1) {
    bpos_ = 0;
    blen_ = [((JavaIoInputStream *) nil_chk(stream_)) readWithByteArray:bytes_ withInt:0 withInt:RAREUTStreams_ISO88591Reader_buffSize];
  }
  len = (len > blen_) ? blen_ : len;
  if (len > 0) {
    int i = bpos_;
    int n = 0;
    while (n < len) {
      (*IOSCharArray_GetRef(nil_chk(cbuf), off++)) = (unichar) (IOSByteArray_Get(nil_chk(bytes_), i++) & (int) 0xff);
      n++;
    }
    blen_ -= len;
    bpos_ = i;
  }
  return len;
}

- (BOOL)ready {
  @try {
    return (blen_ > 0) ? YES : [((JavaIoInputStream *) nil_chk(stream_)) available] > 0;
  }
  @catch (JavaIoIOException *ex) {
    return NO;
  }
}

- (void)copyAllFieldsTo:(RAREUTStreams_ISO88591Reader *)other {
  [super copyAllFieldsTo:other];
  other->blen_ = blen_;
  other->bpos_ = bpos_;
  other->bytes_ = bytes_;
  other->stream_ = stream_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
    { "readWithCharArray:withInt:withInt:", NULL, "I", 0x1, "JavaIoIOException" },
    { "ready", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "buffSize_", NULL, 0x18, "I" },
    { "blen_", NULL, 0x0, "I" },
    { "bpos_", NULL, 0x0, "I" },
    { "bytes_", NULL, 0x0, "LIOSByteArray" },
    { "stream_", NULL, 0x0, "LJavaIoInputStream" },
  };
  static J2ObjcClassInfo _RAREUTStreams_ISO88591Reader = { "ISO88591Reader", "com.appnativa.util", "Streams", 0x9, 3, methods, 5, fields, 0, NULL};
  return &_RAREUTStreams_ISO88591Reader;
}

@end
@implementation RAREUTStreams_ISO88591Writer

+ (int)buffSize {
  return RAREUTStreams_ISO88591Writer_buffSize;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)stream {
  if (self = [super init]) {
    bytes_ = [IOSByteArray arrayWithLength:RAREUTStreams_ISO88591Writer_buffSize];
    self->stream_ = stream;
  }
  return self;
}

- (void)close {
  [((JavaIoOutputStream *) nil_chk(stream_)) close];
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk(stream_)) flush];
}

- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(int)off
                   withInt:(int)len {
  int n = (len > RAREUTStreams_ISO88591Writer_buffSize) ? RAREUTStreams_ISO88591Writer_buffSize : len;
  int i;
  while (len > 0) {
    i = 0;
    while (i < n) {
      (*IOSByteArray_GetRef(nil_chk(bytes_), i++)) = (char) IOSCharArray_Get(nil_chk(cbuf), off++);
    }
    [((JavaIoOutputStream *) nil_chk(stream_)) writeWithByteArray:bytes_ withInt:0 withInt:n];
    len -= n;
    n = (len > RAREUTStreams_ISO88591Writer_buffSize) ? RAREUTStreams_ISO88591Writer_buffSize : len;
  }
}

- (void)copyAllFieldsTo:(RAREUTStreams_ISO88591Writer *)other {
  [super copyAllFieldsTo:other];
  other->bytes_ = bytes_;
  other->stream_ = stream_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
    { "flush", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeWithCharArray:withInt:withInt:", NULL, "V", 0x1, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "buffSize_", NULL, 0x18, "I" },
    { "bytes_", NULL, 0x0, "LIOSByteArray" },
    { "stream_", NULL, 0x0, "LJavaIoOutputStream" },
  };
  static J2ObjcClassInfo _RAREUTStreams_ISO88591Writer = { "ISO88591Writer", "com.appnativa.util", "Streams", 0x9, 3, methods, 3, fields, 0, NULL};
  return &_RAREUTStreams_ISO88591Writer;
}

@end
@implementation RAREUTStreams_InfiniteWaitStream

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)stream {
  if (self = [super init]) {
    sleep_ = 100;
    self->stream_ = stream;
  }
  return self;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)stream
                        withInt:(int)poll {
  if (self = [super init]) {
    sleep_ = 100;
    self->stream_ = stream;
    self->sleep_ = poll;
  }
  return self;
}

- (int)available {
  return [((JavaIoInputStream *) nil_chk(stream_)) available];
}

- (void)close {
  [((JavaIoInputStream *) nil_chk(stream_)) close];
}

- (void)markWithInt:(int)readlimit {
  [((JavaIoInputStream *) nil_chk(stream_)) markWithInt:readlimit];
}

- (BOOL)markSupported {
  return [((JavaIoInputStream *) nil_chk(stream_)) markSupported];
}

- (int)read {
  int n = -1;
  while ((n = [((JavaIoInputStream *) nil_chk(stream_)) read]) == -1) {
    @try {
      [JavaLangThread sleepWithLong:sleep_];
    }
    @catch (JavaLangInterruptedException *ex) {
    }
  }
  return n;
}

- (int)readWithByteArray:(IOSByteArray *)b
                 withInt:(int)off
                 withInt:(int)len {
  int n = -1;
  while ((n = [((JavaIoInputStream *) nil_chk(stream_)) readWithByteArray:b withInt:off withInt:len]) == -1) {
    @try {
      [JavaLangThread sleepWithLong:sleep_];
    }
    @catch (JavaLangInterruptedException *ex) {
    }
  }
  return n;
}

- (void)reset {
  [((JavaIoInputStream *) nil_chk(stream_)) reset];
}

- (long long int)skipWithLong:(long long int)skip {
  return [((JavaIoInputStream *) nil_chk(stream_)) skipWithLong:skip];
}

- (void)copyAllFieldsTo:(RAREUTStreams_InfiniteWaitStream *)other {
  [super copyAllFieldsTo:other];
  other->sleep_ = sleep_;
  other->stream_ = stream_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "available", NULL, "I", 0x1, "JavaIoIOException" },
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
    { "markSupported", NULL, "Z", 0x1, NULL },
    { "read", NULL, "I", 0x1, "JavaIoIOException" },
    { "readWithByteArray:withInt:withInt:", NULL, "I", 0x1, "JavaIoIOException" },
    { "reset", NULL, "V", 0x1, "JavaIoIOException" },
    { "skipWithLong:", NULL, "J", 0x1, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "sleep_", NULL, 0x0, "I" },
    { "stream_", NULL, 0x0, "LJavaIoInputStream" },
  };
  static J2ObjcClassInfo _RAREUTStreams_InfiniteWaitStream = { "InfiniteWaitStream", "com.appnativa.util", "Streams", 0x9, 7, methods, 2, fields, 0, NULL};
  return &_RAREUTStreams_InfiniteWaitStream;
}

@end
@implementation RAREUTStreams_SegmentedInputStream

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return [self initRAREUTStreams_SegmentedInputStreamWithJavaIoInputStream:stream withByteArray:nil];
}

- (id)initRAREUTStreams_SegmentedInputStreamWithJavaIoInputStream:(JavaIoInputStream *)stream
                                                    withByteArray:(IOSByteArray *)block {
  if (self = [super init]) {
    self->stream_ = stream;
    self->block_ = (block == nil) ? [IOSByteArray arrayWithLength:1024] : block;
    blocklen_ = (int) [self->block_ count];
  }
  return self;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)stream
                  withByteArray:(IOSByteArray *)block {
  return [self initRAREUTStreams_SegmentedInputStreamWithJavaIoInputStream:stream withByteArray:block];
}

- (int)available {
  int n = length_ - thePos_;
  if (n < 1) {
    n = 0;
  }
  return n;
}

- (int)read {
  if (done_) {
    return -1;
  }
  if (thePos_ >= length_) {
    [self fillBuffer];
    return [self read];
  }
  return (IOSByteArray_Get(nil_chk(block_), thePos_++) & (int) 0xff);
}

- (int)readWithByteArray:(IOSByteArray *)b
                 withInt:(int)off
                 withInt:(int)len {
  if (done_) {
    return -1;
  }
  if (thePos_ >= length_) {
    [self fillBuffer];
    return [self readWithByteArray:b withInt:off withInt:len];
  }
  if (b == nil) {
    @throw [[JavaLangNullPointerException alloc] init];
  }
  else if ((off < 0) || (off > (int) [b count]) || (len < 0) || ((off + len) > (int) [b count]) || ((off + len) < 0)) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] init];
  }
  if ((thePos_ + len) > length_) {
    len = length_ - thePos_;
  }
  if (len <= 0) {
    return 0;
  }
  [JavaLangSystem arraycopyWithId:block_ withInt:thePos_ withId:b withInt:off withInt:len];
  thePos_ += len;
  return len;
}

- (void)fillBuffer {
  if (reclen_ > 0) {
    int len = (reclen_ > blocklen_) ? blocklen_ : reclen_;
    len = [((JavaIoInputStream *) nil_chk(stream_)) readWithByteArray:block_ withInt:0 withInt:len];
    if (len == -1) {
      done_ = YES;
    }
    else {
      reclen_ -= len;
      thePos_ = 0;
      length_ = len;
    }
    return;
  }
  reclen_ = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:stream_];
  if (reclen_ == -1) {
    done_ = YES;
  }
  else {
    [self fillBuffer];
  }
}

- (void)copyAllFieldsTo:(RAREUTStreams_SegmentedInputStream *)other {
  [super copyAllFieldsTo:other];
  other->block_ = block_;
  other->blocklen_ = blocklen_;
  other->done_ = done_;
  other->length_ = length_;
  other->reclen_ = reclen_;
  other->stream_ = stream_;
  other->thePos_ = thePos_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "available", NULL, "I", 0x1, "JavaIoIOException" },
    { "read", NULL, "I", 0x1, "JavaIoIOException" },
    { "readWithByteArray:withInt:withInt:", NULL, "I", 0x1, "JavaIoIOException" },
    { "fillBuffer", NULL, "V", 0x0, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "block_", NULL, 0x0, "LIOSByteArray" },
    { "blocklen_", NULL, 0x0, "I" },
    { "done_", NULL, 0x0, "Z" },
    { "length_", NULL, 0x0, "I" },
    { "reclen_", NULL, 0x0, "I" },
    { "stream_", NULL, 0x0, "LJavaIoInputStream" },
    { "thePos_", NULL, 0x0, "I" },
  };
  static J2ObjcClassInfo _RAREUTStreams_SegmentedInputStream = { "SegmentedInputStream", "com.appnativa.util", "Streams", 0x9, 4, methods, 7, fields, 0, NULL};
  return &_RAREUTStreams_SegmentedInputStream;
}

@end
@implementation RAREUTStreams_SegmentedOutputStream

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)stream {
  if (self = [super init]) {
    self->stream_ = stream;
  }
  return self;
}

- (void)close {
  if (stream_ != nil) {
    [RAREUTaStreamer writeVarLengthWithInt:-1 withJavaIoOutputStream:stream_];
    [stream_ flush];
    stream_ = nil;
  }
}

- (void)flush {
  if (stream_ != nil) {
    [stream_ flush];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"Stream closed"];
  }
}

- (void)writeWithByteArray:(IOSByteArray *)b {
  if (stream_ != nil) {
    [RAREUTaStreamer writeBytesWithJavaIoOutputStream:stream_ withByteArray:b withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(b)) count]];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"stream closed"];
  }
}

- (void)writeWithInt:(int)b {
  [RAREUTaStreamer writeVarLengthWithInt:1 withJavaIoOutputStream:stream_];
  [((JavaIoOutputStream *) nil_chk(stream_)) writeWithInt:b];
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(int)pos
                   withInt:(int)len {
  if (stream_ != nil) {
    [RAREUTaStreamer writeBytesWithJavaIoOutputStream:stream_ withByteArray:b withInt:pos withInt:len];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"stream closed"];
  }
}

- (void)copyAllFieldsTo:(RAREUTStreams_SegmentedOutputStream *)other {
  [super copyAllFieldsTo:other];
  other->stream_ = stream_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
    { "flush", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeWithByteArray:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeWithInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeWithByteArray:withInt:withInt:", NULL, "V", 0x1, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "stream_", NULL, 0x0, "LJavaIoOutputStream" },
  };
  static J2ObjcClassInfo _RAREUTStreams_SegmentedOutputStream = { "SegmentedOutputStream", "com.appnativa.util", "Streams", 0x9, 5, methods, 1, fields, 0, NULL};
  return &_RAREUTStreams_SegmentedOutputStream;
}

@end
@implementation RAREUTStreams_SimpleSubOutStream

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)stream {
  if (self = [super init]) {
    self->stream_ = stream;
  }
  return self;
}

- (void)close {
  stream_ = nil;
}

- (void)flush {
  if (stream_ != nil) {
    [stream_ flush];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"Stream closed"];
  }
}

- (void)writeWithByteArray:(IOSByteArray *)b {
  if (stream_ != nil) {
    [stream_ writeWithByteArray:b withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(b)) count]];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"Stream closed"];
  }
}

- (void)writeWithInt:(int)b {
  if (stream_ != nil) {
    [stream_ writeWithInt:b];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"Stream closed"];
  }
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(int)pos
                   withInt:(int)len {
  if (stream_ != nil) {
    [stream_ writeWithByteArray:b withInt:pos withInt:len];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"Stream closed"];
  }
}

- (void)copyAllFieldsTo:(RAREUTStreams_SimpleSubOutStream *)other {
  [super copyAllFieldsTo:other];
  other->stream_ = stream_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
    { "flush", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeWithByteArray:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeWithInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeWithByteArray:withInt:withInt:", NULL, "V", 0x1, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "stream_", NULL, 0x0, "LJavaIoOutputStream" },
  };
  static J2ObjcClassInfo _RAREUTStreams_SimpleSubOutStream = { "SimpleSubOutStream", "com.appnativa.util", "Streams", 0x9, 5, methods, 1, fields, 0, NULL};
  return &_RAREUTStreams_SimpleSubOutStream;
}

@end
@implementation RAREUTStreams_URLDecodingReader

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)stream
                   withNSString:(NSString *)charset {
  if (self = [super init]) {
    self->stream_ = stream;
    if (charset == nil) {
      charset = @"utf-8";
    }
    self->charset_ = charset;
  }
  return self;
}

- (int)readWithJavaNioCharBuffer:(JavaNioCharBuffer *)target {
  return [((JavaIoReader *) nil_chk([self getReader])) readWithJavaNioCharBuffer:target];
}

- (int)read {
  return [((JavaIoReader *) nil_chk([self getReader])) read];
}

- (int)readWithCharArray:(IOSCharArray *)cbuf {
  return [((JavaIoReader *) nil_chk([self getReader])) readWithCharArray:cbuf];
}

- (int)readWithCharArray:(IOSCharArray *)cbuf
                 withInt:(int)off
                 withInt:(int)len {
  return [((JavaIoReader *) nil_chk([self getReader])) readWithCharArray:cbuf withInt:off withInt:len];
}

- (long long int)skipWithLong:(long long int)n {
  return [((JavaIoReader *) nil_chk([self getReader])) skipWithLong:n];
}

- (BOOL)ready {
  return [((JavaIoReader *) nil_chk([self getReader])) ready];
}

- (BOOL)markSupported {
  return YES;
}

- (void)markWithInt:(int)readAheadLimit {
  [((JavaIoReader *) nil_chk([self getReader])) markWithInt:readAheadLimit];
}

- (void)reset {
  [((JavaIoReader *) nil_chk([self getReader])) reset];
}

- (void)close {
  [((JavaIoInputStream *) nil_chk(stream_)) close];
}

- (JavaIoReader *)getReader {
  if (reader_ == nil) {
    NSString *s = [RAREUTStreams streamToStringWithJavaIoInputStream:stream_];
    s = [RAREUTURLEncoder decodeWithNSString:s withNSString:charset_];
    reader_ = [[JavaIoStringReader alloc] initWithNSString:s];
  }
  return reader_;
}

- (void)copyAllFieldsTo:(RAREUTStreams_URLDecodingReader *)other {
  [super copyAllFieldsTo:other];
  other->charset_ = charset_;
  other->reader_ = reader_;
  other->stream_ = stream_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "readWithJavaNioCharBuffer:", NULL, "I", 0x1, "JavaIoIOException" },
    { "read", NULL, "I", 0x1, "JavaIoIOException" },
    { "readWithCharArray:", NULL, "I", 0x1, "JavaIoIOException" },
    { "readWithCharArray:withInt:withInt:", NULL, "I", 0x1, "JavaIoIOException" },
    { "skipWithLong:", NULL, "J", 0x1, "JavaIoIOException" },
    { "ready", NULL, "Z", 0x1, "JavaIoIOException" },
    { "markSupported", NULL, "Z", 0x1, NULL },
    { "markWithInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "reset", NULL, "V", 0x1, "JavaIoIOException" },
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
    { "getReader", NULL, "LJavaIoReader", 0x12, "JavaIoIOException" },
  };
  static J2ObjcClassInfo _RAREUTStreams_URLDecodingReader = { "URLDecodingReader", "com.appnativa.util", "Streams", 0x8, 11, methods, 0, NULL, 0, NULL};
  return &_RAREUTStreams_URLDecodingReader;
}

@end
