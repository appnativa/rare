//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/CharScanner.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/FormatException.h"
#include "com/appnativa/util/SNumber.h"
#include "java/io/IOException.h"
#include "java/lang/Character.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation RAREUTCharScanner

static NSString * RAREUTCharScanner_emptyString_ = @"";
static JavaLangThreadLocal * RAREUTCharScanner_perThreadCharArray_;
static JavaLangThreadLocal * RAREUTCharScanner_perThreadCharArray2_;
static JavaLangThreadLocal * RAREUTCharScanner_perThreadScanner_;
static IOSCharArray * RAREUTCharScanner_lfChars_;

+ (NSString *)emptyString {
  return RAREUTCharScanner_emptyString_;
}

+ (JavaLangThreadLocal *)perThreadCharArray {
  return RAREUTCharScanner_perThreadCharArray_;
}

+ (void)setPerThreadCharArray:(JavaLangThreadLocal *)perThreadCharArray {
  RAREUTCharScanner_perThreadCharArray_ = perThreadCharArray;
}

+ (JavaLangThreadLocal *)perThreadCharArray2 {
  return RAREUTCharScanner_perThreadCharArray2_;
}

+ (void)setPerThreadCharArray2:(JavaLangThreadLocal *)perThreadCharArray2 {
  RAREUTCharScanner_perThreadCharArray2_ = perThreadCharArray2;
}

+ (JavaLangThreadLocal *)perThreadScanner {
  return RAREUTCharScanner_perThreadScanner_;
}

+ (void)setPerThreadScanner:(JavaLangThreadLocal *)perThreadScanner {
  RAREUTCharScanner_perThreadScanner_ = perThreadScanner;
}

+ (IOSCharArray *)lfChars {
  return RAREUTCharScanner_lfChars_;
}

- (id)init {
  if (self = [super init]) {
    foundDelimiter_ = 0;
    currentLen_ = 0;
    currentPos_ = 0;
    oContent_ = nil;
    originalPos_ = 0;
    paramEndChar_ = ')';
    paramStartChar_ = '(';
    theContent_ = nil;
    theDelims_ = nil;
    trimChars_ = nil;
    rightTrim_ = YES;
    leftTrim_ = YES;
    markPos_ = 0;
    QT_ = RAREUTCharScanner_DQT;
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)chars {
  if (self = [super init]) {
    foundDelimiter_ = 0;
    currentLen_ = 0;
    currentPos_ = 0;
    oContent_ = nil;
    originalPos_ = 0;
    paramEndChar_ = ')';
    paramStartChar_ = '(';
    theContent_ = nil;
    theDelims_ = nil;
    trimChars_ = nil;
    rightTrim_ = YES;
    leftTrim_ = YES;
    markPos_ = 0;
    QT_ = RAREUTCharScanner_DQT;
    [self resetWithCharArray:chars withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(chars)) count] withBoolean:NO];
  }
  return self;
}

- (id)initWithNSString:(NSString *)str {
  if (self = [super init]) {
    foundDelimiter_ = 0;
    currentLen_ = 0;
    currentPos_ = 0;
    oContent_ = nil;
    originalPos_ = 0;
    paramEndChar_ = ')';
    paramStartChar_ = '(';
    theContent_ = nil;
    theDelims_ = nil;
    trimChars_ = nil;
    rightTrim_ = YES;
    leftTrim_ = YES;
    markPos_ = 0;
    QT_ = RAREUTCharScanner_DQT;
    [self resetWithNSString:str];
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)chars
            withBoolean:(BOOL)copy_ {
  if (self = [super init]) {
    foundDelimiter_ = 0;
    currentLen_ = 0;
    currentPos_ = 0;
    oContent_ = nil;
    originalPos_ = 0;
    paramEndChar_ = ')';
    paramStartChar_ = '(';
    theContent_ = nil;
    theDelims_ = nil;
    trimChars_ = nil;
    rightTrim_ = YES;
    leftTrim_ = YES;
    markPos_ = 0;
    QT_ = RAREUTCharScanner_DQT;
    [self resetWithCharArray:chars withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(chars)) count] withBoolean:copy_];
  }
  return self;
}

- (id)initWithRAREUTCharArray:(RAREUTCharArray *)str
                  withBoolean:(BOOL)copy_ {
  if (self = [super init]) {
    foundDelimiter_ = 0;
    currentLen_ = 0;
    currentPos_ = 0;
    oContent_ = nil;
    originalPos_ = 0;
    paramEndChar_ = ')';
    paramStartChar_ = '(';
    theContent_ = nil;
    theDelims_ = nil;
    trimChars_ = nil;
    rightTrim_ = YES;
    leftTrim_ = YES;
    markPos_ = 0;
    QT_ = RAREUTCharScanner_DQT;
    [self resetWithRAREUTCharArray:str withBoolean:copy_];
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)chars
                withInt:(int)pos
                withInt:(int)len {
  if (self = [super init]) {
    foundDelimiter_ = 0;
    currentLen_ = 0;
    currentPos_ = 0;
    oContent_ = nil;
    originalPos_ = 0;
    paramEndChar_ = ')';
    paramStartChar_ = '(';
    theContent_ = nil;
    theDelims_ = nil;
    trimChars_ = nil;
    rightTrim_ = YES;
    leftTrim_ = YES;
    markPos_ = 0;
    QT_ = RAREUTCharScanner_DQT;
    [self resetWithCharArray:chars withInt:pos withInt:len withBoolean:NO];
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)chars
                withInt:(int)pos
                withInt:(int)len
            withBoolean:(BOOL)copy_ {
  if (self = [super init]) {
    foundDelimiter_ = 0;
    currentLen_ = 0;
    currentPos_ = 0;
    oContent_ = nil;
    originalPos_ = 0;
    paramEndChar_ = ')';
    paramStartChar_ = '(';
    theContent_ = nil;
    theDelims_ = nil;
    trimChars_ = nil;
    rightTrim_ = YES;
    leftTrim_ = YES;
    markPos_ = 0;
    QT_ = RAREUTCharScanner_DQT;
    [self resetWithCharArray:chars withInt:pos withInt:len withBoolean:copy_];
  }
  return self;
}

- (BOOL)backup {
  if (currentPos_ <= originalPos_) {
    return NO;
  }
  currentPos_--;
  currentLen_++;
  return YES;
}

+ (void)charToHTMLStringWithChar:(unichar)c
             withRAREUTCharArray:(RAREUTCharArray *)outArg {
  (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:'&'];
  (void) [outArg appendWithChar:'#'];
  (void) [outArg appendWithInt:(int) c];
  (void) [outArg appendWithChar:';'];
}

+ (RAREUTCharArray *)charToHexStringWithChar:(unichar)c
                         withRAREUTCharArray:(RAREUTCharArray *)ca {
  int radix = 16;
  int pos = ((RAREUTCharArray *) nil_chk(ca))->_length_;
  int i = c;
  i = -i;
  (void) [ca setLengthWithInt:pos + 4];
  IOSCharArray *buf = ca->A_;
  int charPos = pos + 4;
  (*IOSCharArray_GetRef(nil_chk(buf), pos)) = '0';
  (*IOSCharArray_GetRef(buf, pos + 1)) = '0';
  (*IOSCharArray_GetRef(buf, pos + 2)) = '0';
  while (i <= -radix) {
    (*IOSCharArray_GetRef(buf, charPos--)) = IOSCharArray_Get(nil_chk([RAREUTSNumber digits]), (int) (-(i % radix)));
    i = i / radix;
  }
  (*IOSCharArray_GetRef(buf, charPos)) = IOSCharArray_Get(nil_chk([RAREUTSNumber digits]), (int) (-i));
  return ca;
}

+ (RAREUTCharArray *)charToUnicodeStringWithChar:(unichar)c
                             withRAREUTCharArray:(RAREUTCharArray *)ca
                                     withBoolean:(BOOL)add_u {
  int radix = 16;
  int pos = ((RAREUTCharArray *) nil_chk(ca))->_length_;
  int i = c;
  i = -i;
  (void) [ca setLengthWithInt:pos + (add_u ? 6 : 4)];
  IOSCharArray *buf = ca->A_;
  if (add_u) {
    (*IOSCharArray_GetRef(nil_chk(buf), pos++)) = '\\';
    (*IOSCharArray_GetRef(buf, pos++)) = 'u';
  }
  int charPos = pos + 3;
  (*IOSCharArray_GetRef(nil_chk(buf), pos)) = '0';
  (*IOSCharArray_GetRef(buf, pos + 1)) = '0';
  (*IOSCharArray_GetRef(buf, pos + 2)) = '0';
  while (i <= -radix) {
    (*IOSCharArray_GetRef(buf, charPos--)) = IOSCharArray_Get(nil_chk([RAREUTSNumber digits]), (int) (-(i % radix)));
    i = i / radix;
  }
  (*IOSCharArray_GetRef(buf, charPos)) = IOSCharArray_Get(nil_chk([RAREUTSNumber digits]), (int) (-i));
  return ca;
}

- (void)chopWithInt:(int)num {
  currentLen_ -= num;
  if (currentLen_ < 0) {
    currentLen_ = 0;
  }
}

+ (NSString *)cleanQuotedWithNSString:(NSString *)str {
  if (str == nil) {
    return str;
  }
  RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharScanner_perThreadCharArray_)) get], [RAREUTCharArray class]);
  RAREUTCharArray *ret = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharScanner_perThreadCharArray2_)) get], [RAREUTCharArray class]);
  (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:str];
  IOSCharArray *chars = ca->A_;
  int len = ca->_length_;
  ((RAREUTCharArray *) nil_chk(ret))->_length_ = 0;
  (void) [RAREUTCharScanner cleanQuotedWithCharArray:chars withInt:0 withInt:len withRAREUTCharArray:ret];
  return [ret description];
}

+ (RAREUTCharArray *)cleanQuotedWithNSString:(NSString *)str
                         withRAREUTCharArray:(RAREUTCharArray *)ret {
  if (str != nil) {
    RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharScanner_perThreadCharArray_)) get], [RAREUTCharArray class]);
    (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:str];
    IOSCharArray *chars = ca->A_;
    int len = ca->_length_;
    ret = [RAREUTCharScanner cleanQuotedWithCharArray:chars withInt:0 withInt:len withRAREUTCharArray:ret];
  }
  return ret;
}

+ (NSString *)cleanQuotedWithCharArray:(IOSCharArray *)chars
                               withInt:(int)pos
                               withInt:(int)len {
  RAREUTCharArray *ret = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharScanner_perThreadCharArray_)) get], [RAREUTCharArray class]);
  ((RAREUTCharArray *) nil_chk(ret))->_length_ = 0;
  (void) [RAREUTCharScanner cleanQuotedWithCharArray:chars withInt:pos withInt:len withRAREUTCharArray:ret];
  return [ret description];
}

+ (RAREUTCharArray *)cleanQuotedWithCharArray:(IOSCharArray *)chars
                                      withInt:(int)pos
                                      withInt:(int)len
                          withRAREUTCharArray:(RAREUTCharArray *)ret {
  [((RAREUTCharArray *) nil_chk(ret)) ensureCapacityWithInt:len];
  int n = 0;
  if (len > 0) {
    unichar lc = 0;
    unichar c = 0;
    c = IOSCharArray_Get(nil_chk(chars), pos);
    if ((c == RAREUTCharScanner_DQT) || (c == RAREUTCharScanner_SQT)) {
      if (IOSCharArray_Get(chars, (pos + len) - 1) != c) {
        @throw [[JavaTextParseException alloc] initWithNSString:@"unterminated string" withInt:pos + len];
      }
      pos++;
      len -= 2;
    }
    IOSCharArray *A = ret->A_;
    for (int i = 0; i < len; i++) {
      lc = c;
      c = IOSCharArray_Get(chars, pos + i);
      if (lc == '\\') {
        n--;
        switch (c) {
          case '\\':
          (*IOSCharArray_GetRef(nil_chk(A), n)) = '\\';
          break;
          case 'r':
          (*IOSCharArray_GetRef(nil_chk(A), n - 1)) = 0x000d;
          break;
          case 'n':
          (*IOSCharArray_GetRef(nil_chk(A), n++)) = 0x000a;
          break;
          case 't':
          (*IOSCharArray_GetRef(nil_chk(A), n++)) = 0x0009;
          break;
          case 'u':
          if (i + 4 < len) {
            if (IOSCharArray_Get(chars, pos + i + 1) == 'u') {
              c = '\\';
              break;
            }
            (*IOSCharArray_GetRef(nil_chk(A), n++)) = [RAREUTCharScanner unicodeStringToCharWithCharArray:chars withInt:pos + i + 1];
            i += 4;
          }
          else {
            (*IOSCharArray_GetRef(nil_chk(A), n++)) = 'u';
          }
          break;
          default:
          (*IOSCharArray_GetRef(nil_chk(A), n++)) = c;
          break;
        }
      }
      else {
        (*IOSCharArray_GetRef(nil_chk(A), n++)) = c;
      }
    }
  }
  ret->_length_ += n;
  return ret;
}

+ (int)cleanQuotedExWithCharArray:(IOSCharArray *)chars
                          withInt:(int)pos
                          withInt:(int)len {
  int n = pos;
  int opos = pos;
  if (len > 0) {
    unichar lc = 0;
    unichar c = 0;
    c = IOSCharArray_Get(nil_chk(chars), pos);
    if ((c == RAREUTCharScanner_DQT) || (c == RAREUTCharScanner_SQT)) {
      if (IOSCharArray_Get(chars, (pos + len) - 1) != c) {
        @throw [[RAREUTFormatException alloc] initWithNSString:[NSString stringWithFormat:@"unterminated string (%d)", (pos + len)]];
      }
      pos++;
      len -= 2;
    }
    for (int i = 0; i < len; i++) {
      lc = c;
      c = IOSCharArray_Get(chars, pos + i);
      if (lc == '\\') {
        n--;
        switch (c) {
          case '\\':
          (*IOSCharArray_GetRef(chars, n)) = '\\';
          break;
          case 'r':
          (*IOSCharArray_GetRef(chars, n++)) = 0x000d;
          break;
          case 'n':
          (*IOSCharArray_GetRef(chars, n++)) = 0x000a;
          break;
          case 't':
          (*IOSCharArray_GetRef(chars, n++)) = 0x0009;
          break;
          case 'u':
          if (i + 4 < len) {
            if (IOSCharArray_Get(chars, pos + i + 1) == 'u') {
              c = '\\';
              break;
            }
            (*IOSCharArray_GetRef(chars, n++)) = [RAREUTCharScanner unicodeStringToCharWithCharArray:chars withInt:pos + i + 1];
            i += 4;
          }
          else {
            (*IOSCharArray_GetRef(chars, n++)) = 'u';
          }
          break;
          case '"':
          (*IOSCharArray_GetRef(chars, n++)) = '"';
          break;
          default:
          (*IOSCharArray_GetRef(chars, n++)) = c;
          break;
        }
      }
      else {
        (*IOSCharArray_GetRef(chars, n++)) = c;
      }
    }
    len = n - opos;
  }
  return (len < 0) ? 0 : len;
}

+ (int)cleanQuotedExWithCharArray:(IOSCharArray *)chars
                          withInt:(int)pos
                          withInt:(int)len
                      withBoolean:(BOOL)flatten {
  int n = pos;
  int opos = pos;
  if (len > 0) {
    unichar lc = 0;
    unichar c = 0;
    c = IOSCharArray_Get(nil_chk(chars), pos);
    if ((c == RAREUTCharScanner_DQT) || (c == RAREUTCharScanner_SQT)) {
      if (IOSCharArray_Get(chars, (pos + len) - 1) != c) {
        @throw [[JavaTextParseException alloc] initWithNSString:[NSString stringWithFormat:@"unterminated string:%@", [NSString stringWithCharacters:chars offset:opos length:len]] withInt:pos + len];
      }
      pos++;
      len -= 2;
    }
    for (int i = 0; i < len; i++) {
      lc = c;
      c = IOSCharArray_Get(chars, pos + i);
      if (lc == '\\') {
        n--;
        switch (c) {
          case '\\':
          (*IOSCharArray_GetRef(chars, n)) = '\\';
          break;
          case 'r':
          (*IOSCharArray_GetRef(chars, n++)) = 0x000d;
          break;
          case 'n':
          (*IOSCharArray_GetRef(chars, n++)) = 0x000a;
          break;
          case 't':
          (*IOSCharArray_GetRef(chars, n++)) = 0x0009;
          break;
          case 'u':
          if (i + 4 < len) {
            if (IOSCharArray_Get(chars, pos + i + 1) == 'u') {
              c = '\\';
              break;
            }
            (*IOSCharArray_GetRef(chars, n++)) = [RAREUTCharScanner unicodeStringToCharWithCharArray:chars withInt:pos + i + 1];
            i += 4;
          }
          else {
            (*IOSCharArray_GetRef(chars, n++)) = 'u';
          }
          break;
          case '"':
          (*IOSCharArray_GetRef(chars, n++)) = '"';
          break;
          default:
          (*IOSCharArray_GetRef(chars, n++)) = c;
          break;
        }
      }
      else if ([JavaLangCharacter isWhitespaceWithChar:c] && ([JavaLangCharacter isWhitespaceWithChar:lc])) {
        if (!flatten) {
          (*IOSCharArray_GetRef(chars, n++)) = c;
        }
      }
      else if ([JavaLangCharacter isWhitespaceWithChar:c] && flatten) {
        (*IOSCharArray_GetRef(chars, n++)) = ' ';
      }
      else {
        (*IOSCharArray_GetRef(chars, n++)) = c;
      }
    }
    len = n - opos;
  }
  return (len < 0) ? 0 : len;
}

- (void)clear {
  oContent_ = nil;
  theContent_ = nil;
  theDelims_ = nil;
  currentLen_ = 0;
  currentPos_ = 0;
}

- (void)close {
}

- (int)consumeWithInt:(int)len {
  if (currentLen_ < 1) {
    return 0;
  }
  if (len > currentLen_) {
    len = currentLen_;
  }
  currentLen_ -= len;
  currentPos_ += len;
  return len;
}

+ (int)countTokensWithNSString:(NSString *)s
                      withChar:(unichar)c {
  int p = 0;
  int n = [((NSString *) nil_chk(s)) indexOf:c];
  if (n == -1) {
    return 1;
  }
  int cnt = 0;
  do {
    cnt++;
    p = n + 1;
  }
  while ((n = [s indexOf:c fromIndex:p]) != -1);
  return cnt + 1;
}

+ (NSString *)encodeWithNSString:(NSString *)str {
  return [((RAREUTCharArray *) nil_chk([RAREUTCharScanner encodeWithNSString:str withRAREUTCharArray:nil])) description];
}

+ (RAREUTCharArray *)encodeWithNSString:(NSString *)str
                    withRAREUTCharArray:(RAREUTCharArray *)outArg {
  int len = (str == nil) ? 0 : [str sequenceLength];
  if (outArg == nil) {
    outArg = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharScanner_perThreadCharArray_)) get], [RAREUTCharArray class]);
    ((RAREUTCharArray *) nil_chk(outArg))->_length_ = 0;
  }
  if (len > 0) {
    [RAREUTCharScanner encodeWithCharArray:[((NSString *) nil_chk(str)) toCharArray] withInt:0 withInt:len withRAREUTCharArray:outArg];
  }
  return outArg;
}

+ (void)encodeWithCharArray:(IOSCharArray *)chars
                    withInt:(int)pos
                    withInt:(int)len
        withRAREUTCharArray:(RAREUTCharArray *)outArg {
  unichar c;
  for (int i = 0; i < len; i++) {
    c = IOSCharArray_Get(nil_chk(chars), pos + i);
    if (c > 126) {
      (void) [RAREUTCharScanner charToUnicodeStringWithChar:c withRAREUTCharArray:outArg withBoolean:YES];
    }
    else {
      (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:c];
    }
  }
}

+ (NSString *)escapeWithNSString:(NSString *)s {
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return s;
  }
  RAREUTCharArray *out = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharScanner_perThreadCharArray_)) get], [RAREUTCharArray class]);
  ((RAREUTCharArray *) nil_chk(out))->_length_ = 0;
  return [((RAREUTCharArray *) nil_chk([RAREUTCharScanner escapeWithNSString:s withBoolean:NO withRAREUTCharArray:out])) description];
}

+ (RAREUTCharArray *)escapeWithNSString:(NSString *)s
                            withBoolean:(BOOL)do_quote
                    withRAREUTCharArray:(RAREUTCharArray *)outArg {
  if ((s != nil) && ([s sequenceLength] > 0)) {
    IOSCharArray *a = [s toCharArray];
    (void) [RAREUTCharScanner escapeWithCharArray:a withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(a)) count] withBoolean:do_quote withRAREUTCharArray:outArg];
  }
  return outArg;
}

+ (RAREUTCharArray *)escapeWithCharArray:(IOSCharArray *)chars
                                 withInt:(int)pos
                                 withInt:(int)len
                             withBoolean:(BOOL)do_quote
                     withRAREUTCharArray:(RAREUTCharArray *)outArg {
  unichar c;
  for (int i = 0; i < len; i++) {
    c = IOSCharArray_Get(nil_chk(chars), pos + i);
    switch (c) {
      case '\\':
      (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:'\\'];
      break;
      case 0x000d:
      (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:'\\'];
      c = 'r';
      break;
      case 0x000a:
      (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:'\\'];
      c = 'n';
      break;
      case 0x0009:
      (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:'\\'];
      c = 't';
      break;
      case 0x0008:
      (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:'\\'];
      c = 'b';
      break;
      case 0x000c:
      (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:'\\'];
      c = 'f';
      break;
      case '"':
      if (do_quote) {
        (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:'\\'];
      }
      c = '"';
      break;
      default:
      if ((c < 32) || (c > 126)) {
        (void) [RAREUTCharScanner charToUnicodeStringWithChar:c withRAREUTCharArray:outArg withBoolean:YES];
        continue;
      }
      break;
    }
    (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:c];
  }
  return outArg;
}

- (IOSIntArray *)findTokenWithChar:(unichar)c {
  IOSIntArray *tok = [RAREUTCharScanner findTokenWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withChar:c];
  if (tok != nil) {
    currentPos_ += IOSIntArray_Get(tok, 1);
    currentLen_ -= IOSIntArray_Get(tok, 1);
    foundDelimiter_ = (unichar) IOSIntArray_Get(tok, 2);
    if (foundDelimiter_ != 0) {
      currentPos_++;
      currentLen_--;
    }
  }
  return tok;
}

- (IOSIntArray *)findTokenWithBoolean:(BOOL)checkQuote
                          withBoolean:(BOOL)checkParam {
  IOSIntArray *tok = [self findTokenWithInt:currentPos_ withInt:currentLen_ withBoolean:checkQuote withBoolean:checkParam];
  if (tok != nil) {
    currentPos_ += IOSIntArray_Get(tok, 1);
    currentLen_ -= IOSIntArray_Get(tok, 1);
    if (foundDelimiter_ != 0) {
      currentPos_++;
      currentLen_--;
    }
  }
  return tok;
}

- (IOSIntArray *)findTokenWithChar:(unichar)c
                       withBoolean:(BOOL)checkQuote
                       withBoolean:(BOOL)checkParam {
  IOSIntArray *tok = [RAREUTCharScanner findTokenWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withChar:c withBoolean:checkQuote withBoolean:checkParam];
  if (tok != nil) {
    currentPos_ += IOSIntArray_Get(tok, 1);
    currentLen_ -= IOSIntArray_Get(tok, 1);
    foundDelimiter_ = (unichar) IOSIntArray_Get(tok, 2);
    if (foundDelimiter_ != 0) {
      currentPos_++;
      currentLen_--;
    }
  }
  return tok;
}

- (IOSIntArray *)findTokenWithInt:(int)pos
                          withInt:(int)len
                         withChar:(unichar)c {
  IOSIntArray *tok = [RAREUTCharScanner findTokenWithCharArray:theContent_ withInt:pos withInt:len withChar:c];
  if (tok != nil) {
    foundDelimiter_ = (unichar) IOSIntArray_Get(tok, 2);
  }
  return tok;
}

+ (IOSIntArray *)findTokenWithCharArray:(IOSCharArray *)chars
                               withChar:(unichar)c
                            withBoolean:(BOOL)checkQuote
                            withBoolean:(BOOL)checkParam {
  return [RAREUTCharScanner findTokenWithCharArray:chars withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(chars)) count] withChar:c withBoolean:checkQuote withBoolean:checkParam];
}

+ (IOSIntArray *)findTokenWithCharArray:(IOSCharArray *)chars
                                withInt:(int)pos
                                withInt:(int)len
                               withChar:(unichar)c {
  int d;
  int i = pos;
  IOSIntArray *tok = nil;
  int n = pos + len;
  unichar ft = 0;
  if (pos >= n) {
    return nil;
  }
  while (i < n) {
    d = IOSCharArray_Get(nil_chk(chars), i);
    if (d == c) {
      ft = c;
      break;
    }
    i++;
  }
  tok = [IOSIntArray arrayWithLength:3];
  (*IOSIntArray_GetRef(tok, 0)) = pos;
  (*IOSIntArray_GetRef(tok, 1)) = i - pos;
  (*IOSIntArray_GetRef(tok, 2)) = ft;
  return tok;
}

- (IOSIntArray *)findTokenWithInt:(int)pos
                          withInt:(int)len
                      withBoolean:(BOOL)checkQuote
                      withBoolean:(BOOL)checkParam {
  unichar d;
  BOOL bInQuote = NO;
  int nInFuncIndex = 0;
  IOSIntArray *tok = nil;
  int i = pos;
  int n = pos + len;
  IOSCharArray *delims = theDelims_;
  IOSCharArray *chars = theContent_;
  int dlen = (int) [((IOSCharArray *) nil_chk(theDelims_)) count];
  unichar lparen = paramStartChar_;
  unichar rparen = paramEndChar_;
  unichar qt = QT_;
  unichar delim1 = (dlen > 0) ? IOSCharArray_Get(nil_chk(delims), 0) : 0;
  unichar delim2 = (dlen > 1) ? IOSCharArray_Get(nil_chk(delims), 1) : 0;
  foundDelimiter_ = 0;
  if (pos >= n) {
    return nil;
  }
  while (i < n) {
    d = IOSCharArray_Get(nil_chk(chars), i);
    if (dlen < 3) {
      if (!bInQuote && (nInFuncIndex == 0) && ((d == delim1) || (d == delim2))) {
        foundDelimiter_ = d;
        break;
      }
    }
    else if (!bInQuote && (nInFuncIndex == 0) && [RAREUTCharScanner isTokenCharWithInt:0 withChar:d withCharArray:delims withInt:dlen]) {
      foundDelimiter_ = d;
      break;
    }
    if (checkQuote && ((d == RAREUTCharScanner_DQT) || (d == RAREUTCharScanner_SQT))) {
      if ((i == pos) || (IOSCharArray_Get(chars, i - 1) != '\\')) {
        if (bInQuote) {
          bInQuote = qt != d;
        }
        else {
          bInQuote = YES;
          qt = d;
        }
      }
    }
    else if (checkParam && (d == lparen) && !bInQuote) {
      nInFuncIndex++;
    }
    else if (checkParam && (d == rparen) && !bInQuote && (nInFuncIndex > 0)) {
      nInFuncIndex--;
    }
    i++;
  }
  tok = [IOSIntArray arrayWithLength:2];
  (*IOSIntArray_GetRef(tok, 0)) = pos;
  (*IOSIntArray_GetRef(tok, 1)) = i - pos;
  return tok;
}

+ (IOSIntArray *)findTokenWithCharArray:(IOSCharArray *)chars
                                withInt:(int)pos
                                withInt:(int)len
                               withChar:(unichar)c
                            withBoolean:(BOOL)checkQuote
                            withBoolean:(BOOL)checkParam {
  unichar d;
  BOOL bInQuote = NO;
  int nInFuncIndex = 0;
  IOSIntArray *tok = nil;
  unichar ft = 0;
  int i = pos;
  int n = pos + len;
  unichar qt = 0;
  if (pos >= n) {
    return tok;
  }
  while (i < n) {
    d = IOSCharArray_Get(nil_chk(chars), i);
    if ((d == c) && !bInQuote && (nInFuncIndex == 0)) {
      ft = d;
      break;
    }
    if (checkQuote && ((d == RAREUTCharScanner_DQT) || (d == RAREUTCharScanner_SQT))) {
      if ((i == pos) || (IOSCharArray_Get(chars, i - 1) != '\\')) {
        if (bInQuote) {
          bInQuote = qt != d;
        }
        else {
          bInQuote = YES;
          qt = d;
        }
      }
    }
    else if (checkParam && (d == '(') && !bInQuote) {
      nInFuncIndex++;
    }
    else if (checkParam && (d == ')') && !bInQuote && (nInFuncIndex > 0)) {
      nInFuncIndex--;
    }
    i++;
  }
  tok = [IOSIntArray arrayWithLength:3];
  (*IOSIntArray_GetRef(tok, 0)) = pos;
  (*IOSIntArray_GetRef(tok, 1)) = i - pos;
  (*IOSIntArray_GetRef(tok, 2)) = ft;
  return tok;
}

+ (IOSIntArray *)findTokenWithCharArray:(IOSCharArray *)chars
                                withInt:(int)pos
                                withInt:(int)len
                          withCharArray:(IOSCharArray *)delims
                            withBoolean:(BOOL)checkQuote
                            withBoolean:(BOOL)checkParam {
  unichar d;
  BOOL bInQuote = NO;
  int nInFuncIndex = 0;
  IOSIntArray *tok = nil;
  unichar ft = 0;
  int i = pos;
  int n = pos + len;
  int dlen = (int) [((IOSCharArray *) nil_chk(delims)) count];
  unichar qt = 0;
  if (pos >= n) {
    return tok;
  }
  while (i < n) {
    d = IOSCharArray_Get(nil_chk(chars), i);
    if ([RAREUTCharScanner isTokenCharWithInt:0 withChar:d withCharArray:delims withInt:dlen] && !bInQuote && (nInFuncIndex == 0)) {
      ft = d;
      break;
    }
    if (checkQuote && ((d == RAREUTCharScanner_DQT) || (d == RAREUTCharScanner_SQT))) {
      if ((i == pos) || (IOSCharArray_Get(chars, i - 1) != '\\')) {
        if (bInQuote) {
          bInQuote = qt != d;
        }
        else {
          bInQuote = YES;
          qt = d;
        }
      }
    }
    else if (checkParam && (d == '(') && !bInQuote) {
      nInFuncIndex++;
    }
    else if (checkParam && (d == ')') && !bInQuote && (nInFuncIndex > 0)) {
      nInFuncIndex--;
    }
    i++;
  }
  tok = [IOSIntArray arrayWithLength:3];
  (*IOSIntArray_GetRef(tok, 0)) = pos;
  (*IOSIntArray_GetRef(tok, 1)) = i - pos;
  (*IOSIntArray_GetRef(tok, 2)) = ft;
  return tok;
}

- (IOSIntArray *)findTokenAndTrimWithChar:(unichar)c {
  IOSIntArray *tok = [self findTokenWithChar:c];
  if (tok != nil) {
    (void) [self trimWithIntArray:tok];
  }
  return tok;
}

- (int)indexOfWithChar:(unichar)c {
  return [RAREUTCharScanner indexOfWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withChar:c];
}

- (int)indexOfWithChar:(unichar)c
           withBoolean:(BOOL)checkQuote
           withBoolean:(BOOL)checkParam {
  return [RAREUTCharScanner indexOfWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withChar:c withBoolean:checkQuote withBoolean:checkParam withChar:paramStartChar_ withChar:paramEndChar_];
}

- (int)indexOfWithCharArray:(IOSCharArray *)chars
                withBoolean:(BOOL)checkQuote
                withBoolean:(BOOL)checkParam
                withBoolean:(BOOL)ignorecase {
  return [RAREUTCharScanner indexOfWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withCharArray:chars withBoolean:checkQuote withBoolean:checkParam withChar:paramStartChar_ withChar:paramEndChar_ withBoolean:ignorecase];
}

+ (int)indexOfWithCharArray:(IOSCharArray *)chars
                    withInt:(int)pos
                    withInt:(int)len
                   withChar:(unichar)c {
  int ret = -1;
  len += pos;
  while (pos < len) {
    if (IOSCharArray_Get(nil_chk(chars), pos) == c) {
      ret = pos;
      break;
    }
    pos++;
  }
  return ret;
}

+ (int)indexOfWithCharArray:(IOSCharArray *)chars
                    withInt:(int)pos
                    withInt:(int)len
                   withChar:(unichar)c
                withBoolean:(BOOL)checkQuote
                withBoolean:(BOOL)checkParam {
  return [RAREUTCharScanner indexOfWithCharArray:chars withInt:pos withInt:len withChar:c withBoolean:checkQuote withBoolean:checkParam withChar:'(' withChar:')'];
}

+ (int)indexOfWithCharArray:(IOSCharArray *)chars
                    withInt:(int)pos
                    withInt:(int)len
              withCharArray:(IOSCharArray *)a
                withBoolean:(BOOL)checkQuote
                withBoolean:(BOOL)ignorecase {
  return [RAREUTCharScanner indexOfWithCharArray:chars withInt:pos withInt:len withCharArray:a withBoolean:checkQuote withBoolean:NO withChar:0x0000 withChar:0x0000 withBoolean:ignorecase];
}

+ (int)indexOfWithCharArray:(IOSCharArray *)chars
                    withInt:(int)pos
                    withInt:(int)len
                   withChar:(unichar)c
                withBoolean:(BOOL)checkQuote
                withBoolean:(BOOL)checkParam
                   withChar:(unichar)ps
                   withChar:(unichar)pe {
  unichar d = 0;
  BOOL bInQuote = NO;
  int nInFuncIndex = 0;
  int i = pos;
  int n = pos + len;
  unichar qt = 0;
  if (pos >= n) {
    return -1;
  }
  while (i < n) {
    d = IOSCharArray_Get(nil_chk(chars), i);
    if ((d == c) && !bInQuote && (nInFuncIndex == 0)) {
      return i;
    }
    if (checkQuote && ((d == RAREUTCharScanner_DQT) || (d == RAREUTCharScanner_SQT))) {
      if ((i == pos) || (IOSCharArray_Get(chars, i - 1) != '\\')) {
        if (bInQuote) {
          bInQuote = qt != d;
        }
        else {
          bInQuote = YES;
          qt = d;
        }
      }
    }
    else if (checkParam && (d == ps) && !bInQuote) {
      nInFuncIndex++;
    }
    else if (checkParam && (d == pe) && !bInQuote && (nInFuncIndex > 0)) {
      nInFuncIndex--;
    }
    i++;
  }
  return -1;
}

+ (int)indexOfWithCharArray:(IOSCharArray *)chars
                    withInt:(int)pos
                    withInt:(int)len
              withCharArray:(IOSCharArray *)a
                withBoolean:(BOOL)checkQuote
                withBoolean:(BOOL)checkParam
                   withChar:(unichar)ps
                   withChar:(unichar)pe
                withBoolean:(BOOL)ignorecase {
  unichar d = 0;
  BOOL bInQuote = NO;
  int nInFuncIndex = 0;
  int i = pos;
  int n = pos + len;
  unichar qt = 0;
  if (pos >= n) {
    return -1;
  }
  unichar c = IOSCharArray_Get(nil_chk(a), 0);
  unichar dd, cc;
  if (ignorecase) {
    c = [JavaLangCharacter toLowerCaseWithChar:c];
  }
  int clen = (int) [a count];
  int p;
  BOOL found = NO;
  while (i < n) {
    d = IOSCharArray_Get(nil_chk(chars), i);
    if (ignorecase) {
      d = [JavaLangCharacter toLowerCaseWithChar:d];
    }
    if ((d == c) && !bInQuote && (nInFuncIndex == 0)) {
      if (i + clen <= n) {
        p = 1;
        found = YES;
        while (p < clen) {
          dd = IOSCharArray_Get(chars, i + p);
          cc = IOSCharArray_Get(a, p++);
          if (ignorecase) {
            cc = [JavaLangCharacter toLowerCaseWithChar:cc];
            dd = [JavaLangCharacter toLowerCaseWithChar:dd];
          }
          if (cc != dd) {
            found = NO;
            break;
          }
        }
        if (found) {
          return i;
        }
      }
    }
    if (checkQuote && ((d == RAREUTCharScanner_DQT) || (d == RAREUTCharScanner_SQT))) {
      if ((i == pos) || (IOSCharArray_Get(chars, i - 1) != '\\')) {
        if (bInQuote) {
          bInQuote = qt != d;
        }
        else {
          bInQuote = YES;
          qt = d;
        }
      }
    }
    else if (checkParam && (d == ps) && !bInQuote) {
      nInFuncIndex++;
    }
    else if (checkParam && (d == pe) && !bInQuote && (nInFuncIndex > 0)) {
      nInFuncIndex--;
    }
    i++;
  }
  return -1;
}

- (int)indexOfNonWhiteSpaceWithInt:(int)start {
  int len = currentLen_ + currentPos_;
  IOSCharArray *chars = theContent_;
  while (start < len) {
    if (![JavaLangCharacter isWhitespaceWithChar:IOSCharArray_Get(nil_chk(chars), start++)]) {
      return start - 1;
    }
  }
  return -1;
}

- (int)lastIndexOfWithChar:(unichar)c
               withBoolean:(BOOL)checkQuote
               withBoolean:(BOOL)checkParam {
  return [RAREUTCharScanner lastIndexOfWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withChar:c withBoolean:checkQuote withBoolean:checkParam withChar:paramStartChar_ withChar:paramEndChar_];
}

+ (int)lastIndexOfWithCharArray:(IOSCharArray *)chars
                        withInt:(int)pos
                        withInt:(int)len
                       withChar:(unichar)c {
  len = pos + len - 1;
  if (len < pos) {
    return -1;
  }
  pos--;
  while (len > pos) {
    if (c == IOSCharArray_Get(nil_chk(chars), len)) {
      return len;
    }
    len--;
  }
  return -1;
}

+ (int)lastIndexOfWithCharArray:(IOSCharArray *)chars
                        withInt:(int)pos
                        withInt:(int)len
                       withChar:(unichar)c
                    withBoolean:(BOOL)checkQuote
                    withBoolean:(BOOL)checkParam {
  return [RAREUTCharScanner lastIndexOfWithCharArray:chars withInt:pos withInt:len withChar:c withBoolean:checkQuote withBoolean:checkParam withChar:'(' withChar:')'];
}

+ (int)lastIndexOfWithCharArray:(IOSCharArray *)chars
                        withInt:(int)pos
                        withInt:(int)len
                       withChar:(unichar)c
                    withBoolean:(BOOL)checkQuote
                    withBoolean:(BOOL)checkParam
                       withChar:(unichar)ps
                       withChar:(unichar)pe {
  unichar d = 0;
  BOOL bInQuote = NO;
  int nInFuncIndex = 0;
  int i = pos + len - 1;
  unichar qt = 0;
  if (i < pos) {
    return -1;
  }
  pos--;
  while (i > pos) {
    d = IOSCharArray_Get(nil_chk(chars), i);
    if ((d == c) && !bInQuote && (nInFuncIndex == 0)) {
      return i;
    }
    if (checkQuote && ((d == RAREUTCharScanner_DQT) || (d == RAREUTCharScanner_SQT))) {
      if ((i == pos) || (IOSCharArray_Get(chars, i - 1) != '\\')) {
        if (bInQuote) {
          bInQuote = qt != d;
        }
        else {
          bInQuote = YES;
          qt = d;
        }
      }
    }
    else if (checkParam && (d == ps) && !bInQuote) {
      nInFuncIndex++;
    }
    else if (checkParam && (d == pe) && !bInQuote && (nInFuncIndex > 0)) {
      nInFuncIndex--;
    }
    i--;
  }
  return -1;
}

- (void)markWithInt:(int)readAheadLimit {
  markPos_ = currentPos_;
  markLen_ = currentLen_;
}

- (BOOL)markSupported {
  return YES;
}

- (NSString *)nextToken {
  IOSIntArray *tok = [self findTokenWithBoolean:NO withBoolean:NO];
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  if (IOSIntArray_Get(nil_chk(tok), 1) == 0) {
    return RAREUTCharScanner_emptyString_;
  }
  return [NSString stringWithCharacters:theContent_ offset:IOSIntArray_Get(tok, 0) length:IOSIntArray_Get(tok, 1)];
}

- (NSString *)nextTokenWithChar:(unichar)c {
  IOSIntArray *tok = [self findTokenWithChar:c];
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  if (IOSIntArray_Get(nil_chk(tok), 1) == 0) {
    return RAREUTCharScanner_emptyString_;
  }
  return [NSString stringWithCharacters:theContent_ offset:IOSIntArray_Get(tok, 0) length:IOSIntArray_Get(tok, 1)];
}

- (NSString *)nextTokenWithBoolean:(BOOL)checkQuote
                       withBoolean:(BOOL)checkParam {
  IOSIntArray *tok = [self findTokenWithBoolean:checkQuote withBoolean:checkParam];
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  if (IOSIntArray_Get(nil_chk(tok), 1) == 0) {
    return RAREUTCharScanner_emptyString_;
  }
  return [NSString stringWithCharacters:theContent_ offset:IOSIntArray_Get(tok, 0) length:IOSIntArray_Get(tok, 1)];
}

- (NSString *)nextTokenWithChar:(unichar)c
                    withBoolean:(BOOL)trim {
  IOSIntArray *tok = [self findTokenWithChar:c];
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  if (trim) {
    (void) [self trimWithIntArray:tok];
  }
  if (IOSIntArray_Get(nil_chk(tok), 1) == 0) {
    return RAREUTCharScanner_emptyString_;
  }
  return [NSString stringWithCharacters:theContent_ offset:IOSIntArray_Get(tok, 0) length:IOSIntArray_Get(tok, 1)];
}

- (NSString *)nextTokenWithChar:(unichar)c
                    withBoolean:(BOOL)checkQuote
                    withBoolean:(BOOL)checkParam {
  IOSIntArray *tok = [self findTokenWithChar:c withBoolean:checkQuote withBoolean:checkParam];
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  if (IOSIntArray_Get(nil_chk(tok), 1) == 0) {
    return RAREUTCharScanner_emptyString_;
  }
  return [NSString stringWithCharacters:theContent_ offset:IOSIntArray_Get(tok, 0) length:IOSIntArray_Get(tok, 1)];
}

- (NSString *)nextTokenWithChar:(unichar)c
                    withBoolean:(BOOL)checkQuote
                    withBoolean:(BOOL)checkParam
                    withBoolean:(BOOL)trim {
  IOSIntArray *tok = [self findTokenWithChar:c withBoolean:checkQuote withBoolean:checkParam];
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  if (trim) {
    (void) [self trimWithIntArray:tok];
  }
  if (IOSIntArray_Get(nil_chk(tok), 1) == 0) {
    return RAREUTCharScanner_emptyString_;
  }
  return [NSString stringWithCharacters:theContent_ offset:IOSIntArray_Get(tok, 0) length:IOSIntArray_Get(tok, 1)];
}

- (NSString *)nextTokenWithChar:(unichar)c
                    withBoolean:(BOOL)checkQuote
                    withBoolean:(BOOL)checkParam
                    withBoolean:(BOOL)trim
                    withBoolean:(BOOL)unquote {
  IOSIntArray *tok = [self findTokenWithChar:c withBoolean:checkQuote withBoolean:checkParam];
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  if (trim) {
    (void) [self trimWithIntArray:tok];
  }
  if (unquote && (IOSIntArray_Get(nil_chk(tok), 1) > 1)) {
    int pos = IOSIntArray_Get(tok, 0);
    c = 0;
    if ((IOSCharArray_Get(nil_chk(theContent_), pos) == RAREUTCharScanner_SQT) || (IOSCharArray_Get(theContent_, pos) == RAREUTCharScanner_DQT)) {
      c = IOSCharArray_Get(theContent_, pos);
      (*IOSIntArray_GetRef(tok, 0))++;
      (*IOSIntArray_GetRef(tok, 1))--;
    }
    pos = IOSIntArray_Get(tok, 0) + IOSIntArray_Get(tok, 1) - 1;
    if ((IOSCharArray_Get(theContent_, pos) == c)) {
      (*IOSIntArray_GetRef(tok, 1))--;
    }
  }
  if (IOSIntArray_Get(nil_chk(tok), 1) == 0) {
    return RAREUTCharScanner_emptyString_;
  }
  return [NSString stringWithCharacters:theContent_ offset:IOSIntArray_Get(tok, 0) length:IOSIntArray_Get(tok, 1)];
}

+ (id<JavaUtilMap>)parseOptionStringWithNSString:(NSString *)value
                                        withChar:(unichar)c {
  return [RAREUTCharScanner parseOptionStringWithNSString:value withJavaUtilMap:nil withChar:c withBoolean:YES];
}

+ (id<JavaUtilMap>)parseOptionStringWithNSString:(NSString *)value
                                 withJavaUtilMap:(id<JavaUtilMap>)outArg
                                        withChar:(unichar)c
                                     withBoolean:(BOOL)unquote {
  if ((value == nil) || ([value sequenceLength] == 0)) {
    return outArg;
  }
  RAREUTCharScanner *sc = (RAREUTCharScanner *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharScanner_perThreadScanner_)) get], [RAREUTCharScanner class]);
  [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:value];
  return [RAREUTCharScanner parseOptionStringExWithRAREUTCharScanner:sc withJavaUtilMap:outArg withChar:c withBoolean:unquote];
}

+ (id<JavaUtilMap>)parseOptionStringExWithNSString:(NSString *)value
                                          withChar:(unichar)c {
  return [RAREUTCharScanner parseOptionStringExWithNSString:value withChar:c withBoolean:YES];
}

+ (id<JavaUtilMap>)parseOptionStringExWithNSString:(NSString *)value
                                          withChar:(unichar)c
                                       withBoolean:(BOOL)unquote {
  if ((value == nil) || ([value sequenceLength] == 0)) {
    return nil;
  }
  JavaUtilLinkedHashMap *out = [[JavaUtilLinkedHashMap alloc] init];
  (void) [RAREUTCharScanner parseOptionStringWithNSString:value withJavaUtilMap:out withChar:c withBoolean:unquote];
  return out;
}

- (int)read {
  if (currentLen_ < 1) {
    return -1;
  }
  int n = IOSCharArray_Get(nil_chk(theContent_), currentPos_++);
  currentLen_--;
  return n;
}

- (int)readWithCharArray:(IOSCharArray *)chars
                 withInt:(int)pos
                 withInt:(int)len {
  if (currentLen_ < 1) {
    return -1;
  }
  if (len > currentLen_) {
    len = currentLen_;
  }
  [JavaLangSystem arraycopyWithId:theContent_ withInt:currentPos_ withId:chars withInt:pos withInt:len];
  currentLen_ -= len;
  currentPos_ += len;
  return len;
}

- (IOSCharArray *)readCharsWithInt:(int)len {
  if (currentLen_ < 1) {
    return nil;
  }
  if (len > currentLen_) {
    len = currentLen_;
  }
  IOSCharArray *chars = [IOSCharArray arrayWithLength:len];
  [JavaLangSystem arraycopyWithId:theContent_ withInt:currentPos_ withId:chars withInt:0 withInt:len];
  currentLen_ -= len;
  currentPos_ += len;
  return chars;
}

- (NSString *)readStringWithInt:(int)len {
  if (currentLen_ < 1) {
    return nil;
  }
  if (len > currentLen_) {
    len = currentLen_;
  }
  NSString *s = [NSString stringWithCharacters:theContent_ offset:currentPos_ length:len];
  currentLen_ -= len;
  currentPos_ += len;
  return s;
}

- (void)reset {
  [self setPosAndLengthWithInt:markPos_ withInt:markLen_];
}

- (void)resetWithCharArray:(IOSCharArray *)chars {
  [self resetWithCharArray:chars withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(chars)) count] withBoolean:NO];
}

- (void)resetWithNSString:(NSString *)str {
  [self resetWithNSString:str withInt:0 withInt:(str != nil) ? [str sequenceLength] : 0];
}

- (void)resetWithRAREUTCharArray:(RAREUTCharArray *)ca
                     withBoolean:(BOOL)copy_ {
  [self resetWithCharArray:((RAREUTCharArray *) nil_chk(ca))->A_ withInt:0 withInt:ca->_length_ withBoolean:copy_];
}

- (void)resetWithNSString:(NSString *)str
                  withInt:(int)pos
                  withInt:(int)len {
  if (oContent_ != nil) {
    theContent_ = oContent_;
    oContent_ = nil;
  }
  if ((theContent_ == nil) || (len > (int) [theContent_ count])) {
    theContent_ = [IOSCharArray arrayWithLength:len];
  }
  if (str != nil) {
    [str getChars:pos sourceEnd:pos + len destination:theContent_ destinationBegin:0];
  }
  currentPos_ = 0;
  currentLen_ = len;
  originalPos_ = 0;
  [self markWithInt:-1];
}

- (void)resetWithCharArray:(IOSCharArray *)chars
                   withInt:(int)pos
                   withInt:(int)len
               withBoolean:(BOOL)copy_ {
  if (copy_) {
    if (oContent_ != nil) {
      theContent_ = oContent_;
      oContent_ = nil;
    }
    if ((theContent_ == nil) || (len > (int) [theContent_ count])) {
      theContent_ = [IOSCharArray arrayWithLength:len];
    }
    [JavaLangSystem arraycopyWithId:chars withInt:pos withId:theContent_ withInt:0 withInt:len];
    currentPos_ = 0;
    currentLen_ = len;
    originalPos_ = 0;
  }
  else {
    if (oContent_ == nil) {
      oContent_ = theContent_;
    }
    theContent_ = chars;
    currentPos_ = pos;
    currentLen_ = len;
    originalPos_ = pos;
  }
  [self markWithInt:-1];
}

- (long long int)skipWithLong:(long long int)s {
  int n = (int) s;
  if (currentLen_ < n) {
    n = currentLen_;
  }
  currentPos_ += n;
  currentLen_ -= n;
  return n;
}

- (BOOL)skipTokenWithChar:(unichar)c {
  IOSIntArray *tok = [self findTokenWithChar:c];
  if ((tok == nil) || (theContent_ == nil)) {
    return NO;
  }
  return YES;
}

- (BOOL)startsWithWithCharArray:(IOSCharArray *)prefix {
  if ((currentLen_ < 1) || (prefix == nil)) {
    return NO;
  }
  return [RAREUTCharArray indexOfWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withCharArray:prefix withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(prefix)) count] withInt:0] == 0;
}

- (BOOL)startsWithWithNSString:(NSString *)prefix {
  return (prefix == nil) ? NO : [self startsWithWithCharArray:[prefix toCharArray]];
}

- (IOSIntArray *)stripWithIntArray:(IOSIntArray *)tok
                     withCharArray:(IOSCharArray *)bad {
  if ((tok == nil) || (bad == nil)) {
    return nil;
  }
  return [RAREUTCharScanner stripWithCharArray:theContent_ withInt:IOSIntArray_Get(nil_chk(tok), 0) withInt:IOSIntArray_Get(tok, 1) withCharArray:bad withBoolean:leftTrim_ withBoolean:rightTrim_];
}

- (IOSIntArray *)stripWithCharArray:(IOSCharArray *)chars
                       withIntArray:(IOSIntArray *)tok
                      withCharArray:(IOSCharArray *)bad {
  if ((tok == nil) || (bad == nil)) {
    return nil;
  }
  return [RAREUTCharScanner stripWithCharArray:chars withInt:IOSIntArray_Get(nil_chk(tok), 0) withInt:IOSIntArray_Get(tok, 1) withCharArray:bad withBoolean:leftTrim_ withBoolean:rightTrim_];
}

+ (IOSIntArray *)stripWithCharArray:(IOSCharArray *)chars
                            withInt:(int)pos
                            withInt:(int)len
                      withCharArray:(IOSCharArray *)bad
                        withBoolean:(BOOL)left
                        withBoolean:(BOOL)right {
  IOSIntArray *tok = [IOSIntArray arrayWithInts:(int[]){ 0, 0 } count:2];
  [RAREUTCharScanner stripWithIntArray:tok withCharArray:chars withInt:pos withInt:len withCharArray:bad withBoolean:left withBoolean:right];
  return (IOSIntArray_Get(tok, 1) == 0) ? nil : tok;
}

- (RAREUTCharScanner *)toLowerCase {
  int i = currentPos_;
  int len = currentLen_;
  IOSCharArray *a = theContent_;
  while (i < len) {
    (*IOSCharArray_GetRef(nil_chk(a), i)) = [JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(a, i)];
    i++;
  }
  return self;
}

- (RAREUTCharScanner *)toLowerCaseWithIntArray:(IOSIntArray *)tok {
  int i = IOSIntArray_Get(nil_chk(tok), 0);
  int len = IOSIntArray_Get(tok, 1);
  IOSCharArray *a = theContent_;
  while (i < len) {
    (*IOSCharArray_GetRef(nil_chk(a), i)) = [JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(a, i)];
    i++;
  }
  return self;
}

- (NSString *)description {
  return [self getLeftOver];
}

- (RAREUTCharScanner *)toUpperCase {
  int i = currentPos_;
  int len = currentLen_;
  IOSCharArray *a = theContent_;
  while (i < len) {
    (*IOSCharArray_GetRef(nil_chk(a), i)) = [JavaLangCharacter toUpperCaseWithChar:IOSCharArray_Get(a, i)];
    i++;
  }
  return self;
}

- (RAREUTCharScanner *)toUpperCaseWithIntArray:(IOSIntArray *)tok {
  int i = IOSIntArray_Get(nil_chk(tok), 0);
  int len = IOSIntArray_Get(tok, 1);
  IOSCharArray *a = theContent_;
  while (i < len) {
    (*IOSCharArray_GetRef(nil_chk(a), i)) = [JavaLangCharacter toUpperCaseWithChar:IOSCharArray_Get(a, i)];
    i++;
  }
  return self;
}

- (RAREUTCharScanner *)trim {
  if (theContent_ == nil) {
    return self;
  }
  IOSIntArray *tok;
  if (trimChars_ != nil) {
    tok = [RAREUTCharScanner stripWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withCharArray:trimChars_ withBoolean:leftTrim_ withBoolean:rightTrim_];
  }
  else {
    tok = [RAREUTCharScanner trimWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withBoolean:leftTrim_ withBoolean:rightTrim_];
  }
  if (tok != nil) {
    currentPos_ = IOSIntArray_Get(tok, 0);
    currentLen_ = IOSIntArray_Get(tok, 1);
  }
  return self;
}

- (IOSIntArray *)trimWithIntArray:(IOSIntArray *)tok {
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  if (trimChars_ != nil) {
    [RAREUTCharScanner stripWithIntArray:tok withCharArray:theContent_ withInt:IOSIntArray_Get(nil_chk(tok), 0) withInt:IOSIntArray_Get(tok, 1) withCharArray:trimChars_ withBoolean:leftTrim_ withBoolean:rightTrim_];
  }
  else {
    [RAREUTCharScanner trimWithIntArray:tok withCharArray:theContent_ withInt:IOSIntArray_Get(nil_chk(tok), 0) withInt:IOSIntArray_Get(tok, 1) withBoolean:leftTrim_ withBoolean:rightTrim_];
  }
  return (IOSIntArray_Get(nil_chk(tok), 1) == 0) ? nil : tok;
}

- (IOSIntArray *)trimWithCharArray:(IOSCharArray *)chars
                      withIntArray:(IOSIntArray *)tok {
  if ((tok == nil) || (chars == nil)) {
    return nil;
  }
  return [RAREUTCharScanner trimWithCharArray:chars withInt:IOSIntArray_Get(nil_chk(tok), 0) withInt:IOSIntArray_Get(tok, 1) withBoolean:leftTrim_ withBoolean:rightTrim_];
}

+ (IOSIntArray *)trimWithCharArray:(IOSCharArray *)chars
                           withInt:(int)pos
                           withInt:(int)len
                       withBoolean:(BOOL)left
                       withBoolean:(BOOL)right {
  IOSIntArray *tok = [IOSIntArray arrayWithInts:(int[]){ 0, 0 } count:2];
  [RAREUTCharScanner trimWithIntArray:tok withCharArray:chars withInt:pos withInt:len withBoolean:left withBoolean:right];
  return (IOSIntArray_Get(tok, 1) == 0) ? nil : tok;
}

- (IOSIntArray *)trimEx {
  if (theContent_ == nil) {
    return nil;
  }
  if (trimChars_ != nil) {
    return [RAREUTCharScanner stripWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withCharArray:trimChars_ withBoolean:leftTrim_ withBoolean:rightTrim_];
  }
  else {
    return [RAREUTCharScanner trimWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withBoolean:leftTrim_ withBoolean:rightTrim_];
  }
}

- (RAREUTCharScanner *)unesacpe {
  currentLen_ = [RAREUTCharScanner unescapeStringExWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_];
  return self;
}

+ (NSString *)unescapeWithNSString:(NSString *)s {
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return s;
  }
  RAREUTCharArray *out = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharScanner_perThreadCharArray_)) get], [RAREUTCharArray class]);
  (void) [((RAREUTCharArray *) nil_chk(out)) setWithNSString:s];
  return [RAREUTCharScanner unescapeExWithCharArray:out->A_ withInt:0 withInt:out->_length_];
}

+ (NSString *)unescapeExWithCharArray:(IOSCharArray *)chars
                              withInt:(int)pos
                              withInt:(int)len {
  len = [RAREUTCharScanner unescapeStringExWithCharArray:chars withInt:pos withInt:len];
  return [NSString stringWithCharacters:chars offset:pos length:len];
}

+ (int)unescapeStringExWithCharArray:(IOSCharArray *)chars
                             withInt:(int)pos
                             withInt:(int)len {
  int n = pos;
  int opos = pos;
  if (len > 0) {
    unichar lc = 0;
    unichar c = 0;
    for (int i = 0; i < len; i++) {
      lc = c;
      c = IOSCharArray_Get(nil_chk(chars), pos + i);
      if (lc == '\\') {
        n--;
        switch (c) {
          case '\\':
          (*IOSCharArray_GetRef(chars, n)) = '\\';
          break;
          case 'r':
          (*IOSCharArray_GetRef(chars, n++)) = 0x000d;
          break;
          case 'n':
          (*IOSCharArray_GetRef(chars, n++)) = 0x000a;
          break;
          case 't':
          (*IOSCharArray_GetRef(chars, n++)) = 0x0009;
          break;
          case 'u':
          if (i + 4 < len) {
            if (IOSCharArray_Get(chars, pos + i + 1) == 'u') {
              c = '\\';
              break;
            }
            (*IOSCharArray_GetRef(chars, n++)) = [RAREUTCharScanner unicodeStringToCharWithCharArray:chars withInt:pos + i + 1];
            i += 4;
          }
          else {
            (*IOSCharArray_GetRef(chars, n++)) = 'u';
          }
          break;
          default:
          (*IOSCharArray_GetRef(chars, n++)) = c;
          break;
        }
      }
      else if ((c == '&') && (i + 1 < len) && (IOSCharArray_Get(chars, pos + i + 1) == '#')) {
        if ((i + 7 < len) && (IOSCharArray_Get(chars, pos + i + 2) == 'x') && (IOSCharArray_Get(chars, pos + i + 7) == ';')) {
          (*IOSCharArray_GetRef(chars, n++)) = [RAREUTCharScanner unicodeStringToCharWithCharArray:chars withInt:pos + i + 3];
          i += 7;
          lc = 0;
        }
        else {
          c = [RAREUTCharScanner htmlStringToCharacterWithCharArray:chars withInt:pos + i + 1 withInt:len - (i + 1)];
          if (c > 0) {
            (*IOSCharArray_GetRef(chars, n++)) = c;
            while (IOSCharArray_Get(chars, pos + i) != ';') {
              i++;
            }
            lc = 0;
          }
          else {
            c = lc;
            (*IOSCharArray_GetRef(chars, n++)) = c;
          }
        }
      }
      else {
        (*IOSCharArray_GetRef(chars, n++)) = c;
      }
    }
    len = n - opos;
  }
  return (len < 0) ? 0 : len;
}

+ (unichar)unicodeStringToCharWithCharArray:(IOSCharArray *)chars
                                    withInt:(int)pos {
  unichar c = 0;
  int n;
  int len = pos + 4;
  while (pos < len) {
    n = IOSCharArray_Get(nil_chk(chars), pos++);
    if (n > 64) {
      n -= 55;
    }
    else if (n > 96) {
      n -= 87;
    }
    else if ((n > 47) && (n < 58)) {
      n -= 48;
    }
    else {
      n = 0;
    }
    c <<= 4;
    c |= (n & (int) 0xf);
  }
  return c;
}

- (RAREUTCharScanner *)unquoteWithBoolean:(BOOL)trim {
  if (theContent_ == nil) {
    return self;
  }
  IOSIntArray *tok = nil;
  if (trim) {
    if (trimChars_ != nil) {
      tok = [RAREUTCharScanner stripWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withCharArray:trimChars_ withBoolean:leftTrim_ withBoolean:rightTrim_];
    }
    else {
      tok = [RAREUTCharScanner trimWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_ withBoolean:leftTrim_ withBoolean:rightTrim_];
    }
  }
  if (tok != nil) {
    currentPos_ = IOSIntArray_Get(tok, 0);
    currentLen_ = IOSIntArray_Get(tok, 1);
  }
  if (currentLen_ > 1) {
    unichar c = IOSCharArray_Get(nil_chk(theContent_), currentPos_);
    if ((c == RAREUTCharScanner_SQT) || (c == RAREUTCharScanner_DQT)) {
      currentPos_++;
      currentLen_--;
      if ((currentLen_ > 1) && (IOSCharArray_Get(theContent_, currentPos_ + currentLen_ - 1) == c)) {
        currentLen_--;
      }
    }
  }
  return self;
}

- (IOSIntArray *)unquoteWithIntArray:(IOSIntArray *)tok
                         withBoolean:(BOOL)trim {
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  if (trim) {
    tok = [self trimWithIntArray:tok];
  }
  if ((IOSIntArray_Get(nil_chk(tok), 1) > 1)) {
    int pos = IOSIntArray_Get(tok, 0);
    unichar c = 0;
    if ((IOSCharArray_Get(nil_chk(theContent_), pos) == RAREUTCharScanner_SQT) || (IOSCharArray_Get(theContent_, pos) == RAREUTCharScanner_DQT)) {
      c = IOSCharArray_Get(theContent_, pos);
      (*IOSIntArray_GetRef(tok, 0))++;
      (*IOSIntArray_GetRef(tok, 1))--;
      pos = IOSIntArray_Get(tok, 0) + IOSIntArray_Get(tok, 1) - 1;
      if ((IOSCharArray_Get(theContent_, pos) == c)) {
        (*IOSIntArray_GetRef(tok, 1))--;
      }
    }
  }
  return tok;
}

- (NSString *)unquoteWithNSString:(NSString *)str
                      withBoolean:(BOOL)trim {
  int len = (str == nil) ? 0 : [str sequenceLength];
  if (len != 0) {
    unichar c = [((NSString *) nil_chk(str)) charAtWithInt:0];
    if ((c == RAREUTCharScanner_SQT) || (c == RAREUTCharScanner_DQT) || [JavaLangCharacter isWhitespaceWithChar:c] || [JavaLangCharacter isWhitespaceWithChar:[str charAtWithInt:len - 1]]) {
      RAREUTCharScanner *sc = (RAREUTCharScanner *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharScanner_perThreadScanner_)) get], [RAREUTCharScanner class]);
      [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:str withInt:0 withInt:len];
      str = [sc unquoteWithNSString:str withBoolean:trim];
    }
  }
  return str;
}

- (void)unreadWithIntArray:(IOSIntArray *)tok {
  currentLen_ += IOSIntArray_Get(nil_chk(tok), 1);
  currentPos_ -= IOSIntArray_Get(tok, 1);
  currentPos_--;
  currentLen_++;
  if (currentPos_ < 0) {
    currentPos_ = 0;
  }
  if ((currentPos_ + currentLen_) > (int) [((IOSCharArray *) nil_chk(theContent_)) count]) {
    currentLen_ = (int) [theContent_ count] - currentPos_;
  }
  if (currentLen_ < 0) {
    currentLen_ = 0;
  }
}

- (void)setLeftTrimWithBoolean:(BOOL)trim {
  leftTrim_ = trim;
}

- (void)setParameternCharactersWithChar:(unichar)left
                               withChar:(unichar)right {
  paramStartChar_ = left;
  paramEndChar_ = right;
}

- (void)setPosAndLengthWithInt:(int)pos
                       withInt:(int)len {
  currentPos_ = pos;
  currentLen_ = len;
}

- (void)setQuoteCharWithChar:(unichar)c {
  QT_ = c;
}

- (void)setRightTrimWithBoolean:(BOOL)trim {
  rightTrim_ = trim;
}

- (void)setTokenDelimitersWithCharArray:(IOSCharArray *)delims {
  theDelims_ = delims;
}

- (void)setTrimCharsWithCharArray:(IOSCharArray *)chars {
  trimChars_ = chars;
}

- (int)getCharWithInt:(int)pos {
  if ((pos < 0) || (pos >= (int) [((IOSCharArray *) nil_chk(theContent_)) count])) {
    return -1;
  }
  return IOSCharArray_Get(nil_chk(theContent_), pos);
}

- (NSString *)getConsumed {
  if ((theContent_ == nil) || (currentPos_ == 0)) {
    return nil;
  }
  return [NSString stringWithCharacters:theContent_ offset:0 length:currentPos_];
}

- (IOSCharArray *)getContent {
  return theContent_;
}

- (int)getCurrentChar {
  if (currentLen_ < 1) {
    return -1;
  }
  return IOSCharArray_Get(nil_chk(theContent_), currentPos_);
}

- (int)getLastChar {
  if (currentLen_ < 1) {
    return -1;
  }
  return IOSCharArray_Get(nil_chk(theContent_), (currentPos_ + currentLen_) - 1);
}

- (int)getLastCharWithIntArray:(IOSIntArray *)tok {
  int n = (IOSIntArray_Get(nil_chk(tok), 0) + IOSIntArray_Get(tok, 1)) - 1;
  if ((n < 0) || (n >= (int) [((IOSCharArray *) nil_chk(theContent_)) count])) {
    return -1;
  }
  return IOSCharArray_Get(nil_chk(theContent_), n);
}

- (NSString *)getLeftOver {
  if ((currentLen_ == 0) || (theContent_ == nil)) {
    return nil;
  }
  return [NSString stringWithCharacters:theContent_ offset:currentPos_ length:currentLen_];
}

- (RAREUTCharArray *)getLeftOverCB {
  if ((currentLen_ == 0) || (theContent_ == nil)) {
    return nil;
  }
  return [[RAREUTCharArray alloc] initWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_];
}

- (void)getLeftOverCBWithRAREUTCharArray:(RAREUTCharArray *)outArg {
  if ((currentLen_ == 0) || (theContent_ == nil)) {
    return;
  }
  (void) [((RAREUTCharArray *) nil_chk(outArg)) setWithCharArray:theContent_ withInt:currentPos_ withInt:currentLen_];
}

- (IOSCharArray *)getLeftOverChars {
  if ((currentLen_ == 0) || (theContent_ == nil)) {
    return nil;
  }
  IOSCharArray *c = [IOSCharArray arrayWithLength:currentLen_];
  [JavaLangSystem arraycopyWithId:theContent_ withInt:currentPos_ withId:c withInt:0 withInt:currentLen_];
  return c;
}

- (IOSIntArray *)getLeftOverToken {
  if ((currentLen_ == 0) || (theContent_ == nil)) {
    return nil;
  }
  IOSIntArray *tok = [IOSIntArray arrayWithLength:2];
  (*IOSIntArray_GetRef(tok, 0)) = currentPos_;
  (*IOSIntArray_GetRef(tok, 1)) = currentLen_;
  return tok;
}

- (int)getLength {
  return currentLen_;
}

+ (int)getLongestLineCharCountWithNSString:(NSString *)str {
  if (str == nil) {
    return 0;
  }
  int len = [((NSString *) nil_chk(str)) sequenceLength];
  int n = 0;
  int p = 0;
  int cnt = 0;
  n = [str indexOf:0x000a];
  while (n != -1) {
    if (n - p > cnt) {
      cnt = n - p;
    }
    p = n + 1;
    n = [str indexOf:0x000a fromIndex:p];
  }
  if ((p > 0) && (len - p) > cnt) {
    cnt = len - p;
  }
  return (cnt == 0) ? len : cnt;
}

- (id<JavaUtilMap>)getOptionsWithChar:(unichar)c
                          withBoolean:(BOOL)unquote {
  return [RAREUTCharScanner parseOptionStringExWithRAREUTCharScanner:self withJavaUtilMap:nil withChar:c withBoolean:unquote];
}

- (id<JavaUtilMap>)getOptionsWithJavaUtilMap:(id<JavaUtilMap>)outArg
                                    withChar:(unichar)c
                                 withBoolean:(BOOL)unquote {
  return [RAREUTCharScanner parseOptionStringExWithRAREUTCharScanner:self withJavaUtilMap:outArg withChar:c withBoolean:unquote];
}

+ (NSString *)getPieceWithNSString:(NSString *)s
                          withChar:(unichar)tok
                           withInt:(int)pos {
  return [RAREUTCharScanner getPieceWithNSString:s withChar:tok withInt:pos withInt:pos];
}

+ (NSString *)getPieceWithNSString:(NSString *)s
                      withNSString:(NSString *)tok
                           withInt:(int)pos {
  return [RAREUTCharScanner getPieceWithNSString:s withNSString:tok withInt:pos withInt:pos];
}

+ (NSString *)getPieceWithNSString:(NSString *)s
                          withChar:(unichar)tok
                           withInt:(int)start
                           withInt:(int)end {
  int i = 0;
  int n = 1;
  int oi = 0;
  int pos;
  int tl = 1;
  if ((end < 1) || (end < start) || (tl == 0)) {
    return nil;
  }
  while ((n < start) && ((i = [((NSString *) nil_chk(s)) indexOf:tok fromIndex:i]) != -1)) {
    i += tl;
    n++;
  }
  if ((n < start) || (i == -1)) {
    return nil;
  }
  oi = i;
  i = [((NSString *) nil_chk(s)) indexOf:tok fromIndex:i];
  if (i == -1) {
    return [s substring:oi];
  }
  if (start == end) {
    return [s substring:oi endIndex:i];
  }
  pos = oi;
  i += tl;
  while ((n < end) && ((i = [s indexOf:tok fromIndex:i]) != -1)) {
    n++;
    i += tl;
  }
  if (i == -1) {
    return [s substring:pos];
  }
  return [s substring:pos endIndex:i - tl];
}

+ (NSString *)getPieceWithNSString:(NSString *)s
                      withNSString:(NSString *)tok
                           withInt:(int)start
                           withInt:(int)end {
  int i = 0;
  int n = 1;
  int oi = 0;
  int pos;
  int tl = [((NSString *) nil_chk(tok)) sequenceLength];
  if ((end < 1) || (end < start) || (tl == 0)) {
    return nil;
  }
  while ((n < start) && ((i = [((NSString *) nil_chk(s)) indexOfString:tok fromIndex:i]) != -1)) {
    i += tl;
    n++;
  }
  if ((n < start) || (i == -1)) {
    return nil;
  }
  oi = i;
  i = [((NSString *) nil_chk(s)) indexOfString:tok fromIndex:i];
  if (i == -1) {
    return [s substring:oi];
  }
  if (start == end) {
    return [s substring:oi endIndex:i];
  }
  pos = oi;
  i += tl;
  while ((n < end) && ((i = [s indexOfString:tok fromIndex:i]) != -1)) {
    n++;
    i += tl;
  }
  if (i == -1) {
    return [s substring:pos];
  }
  return [s substring:pos endIndex:i - tl];
}

- (int)getPosition {
  return currentPos_;
}

- (int)getRelPosition {
  int pos = currentPos_ - originalPos_;
  return (pos < 0) ? 0 : pos;
}

- (NSString *)getRelStringWithInt:(int)pos
                          withInt:(int)len {
  if (len == 0) {
    return RAREUTCharScanner_emptyString_;
  }
  return [NSString stringWithCharacters:theContent_ offset:originalPos_ + pos length:len];
}

- (NSString *)getStringWithInt:(int)pos
                       withInt:(int)len {
  if (len == 0) {
    return RAREUTCharScanner_emptyString_;
  }
  return [NSString stringWithCharacters:theContent_ offset:pos length:len];
}

- (NSString *)getTokenWithIntArray:(IOSIntArray *)tok {
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  if (IOSIntArray_Get(nil_chk(tok), 1) == 0) {
    return RAREUTCharScanner_emptyString_;
  }
  return [NSString stringWithCharacters:theContent_ offset:IOSIntArray_Get(tok, 0) length:IOSIntArray_Get(tok, 1)];
}

- (BOOL)getTokenWithIntArray:(IOSIntArray *)tok
         withRAREUTCharArray:(RAREUTCharArray *)ca
                 withBoolean:(BOOL)trim {
  if ((tok == nil) || (theContent_ == nil)) {
    return NO;
  }
  if (trim) {
    (void) [self trimWithIntArray:tok];
  }
  (void) [((RAREUTCharArray *) nil_chk(ca)) setWithCharArray:theContent_ withInt:IOSIntArray_Get(nil_chk(tok), 0) withInt:IOSIntArray_Get(tok, 1)];
  return YES;
}

- (IOSCharArray *)getTokenCharsWithIntArray:(IOSIntArray *)tok {
  if ((tok == nil) || (theContent_ == nil)) {
    return nil;
  }
  IOSCharArray *c = [IOSCharArray arrayWithLength:IOSIntArray_Get(nil_chk(tok), 1)];
  [JavaLangSystem arraycopyWithId:theContent_ withInt:IOSIntArray_Get(tok, 0) withId:c withInt:0 withInt:IOSIntArray_Get(tok, 1)];
  return c;
}

- (id<JavaUtilList>)getTokensWithChar:(unichar)c {
  return [self getTokensWithChar:c withBoolean:NO withJavaUtilList:nil];
}

- (id<JavaUtilList>)getTokensWithChar:(unichar)c
                          withBoolean:(BOOL)trim {
  return [self getTokensWithChar:c withBoolean:trim withJavaUtilList:nil];
}

- (id<JavaUtilList>)getTokensWithChar:(unichar)c
                          withBoolean:(BOOL)trim
                     withJavaUtilList:(id<JavaUtilList>)list {
  IOSIntArray *tok;
  BOOL found = NO;
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] init];
  }
  while ((tok = [self findTokenWithChar:c]) != nil) {
    if (trimChars_ != nil) {
      tok = [self trimWithIntArray:tok];
      if ((tok == nil) || (IOSIntArray_Get(tok, 1) == 0)) {
        [((id<JavaUtilList>) nil_chk(list)) addWithId:RAREUTCharScanner_emptyString_];
        found = (foundDelimiter_ != 0);
        continue;
      }
    }
    [((id<JavaUtilList>) nil_chk(list)) addWithId:[self getTokenWithIntArray:tok]];
    found = (foundDelimiter_ != 0);
  }
  if (currentLen_ > 0) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:[self getLeftOver]];
  }
  else if (found) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:RAREUTCharScanner_emptyString_];
  }
  return list;
}

+ (id<JavaUtilList>)getTokensWithNSString:(NSString *)str
                                 withChar:(unichar)c
                              withBoolean:(BOOL)trim {
  return [RAREUTCharScanner getTokensWithNSString:str withChar:c withBoolean:trim withJavaUtilList:nil];
}

- (id<JavaUtilList>)getTokensWithChar:(unichar)c
                          withBoolean:(BOOL)checkQuote
                          withBoolean:(BOOL)checkParam
                          withBoolean:(BOOL)trim {
  return [self getTokensWithChar:c withBoolean:checkQuote withBoolean:checkParam withBoolean:trim withJavaUtilList:nil];
}

+ (id<JavaUtilList>)getTokensWithNSString:(NSString *)str
                                 withChar:(unichar)c
                              withBoolean:(BOOL)trim
                         withJavaUtilList:(id<JavaUtilList>)list {
  RAREUTCharScanner *sc = [[RAREUTCharScanner alloc] initWithNSString:str];
  [sc setTrimCharsWithCharArray:RAREUTCharScanner_lfChars_];
  return [sc getTokensWithChar:c withBoolean:trim withJavaUtilList:list];
}

- (id<JavaUtilList>)getTokensWithChar:(unichar)c
                          withBoolean:(BOOL)checkQuote
                          withBoolean:(BOOL)checkParam
                          withBoolean:(BOOL)trim
                     withJavaUtilList:(id<JavaUtilList>)list {
  IOSIntArray *tok;
  BOOL found = NO;
  id<JavaUtilList> olist = list;
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] init];
  }
  while ((tok = [self findTokenWithChar:c withBoolean:checkQuote withBoolean:checkParam]) != nil) {
    if ((trimChars_ != nil) || trim) {
      tok = [self trimWithIntArray:tok];
      if ((tok == nil) || (IOSIntArray_Get(tok, 1) == 0)) {
        [((id<JavaUtilList>) nil_chk(list)) addWithId:RAREUTCharScanner_emptyString_];
        found = (foundDelimiter_ != 0);
        continue;
      }
    }
    [((id<JavaUtilList>) nil_chk(list)) addWithId:[self getTokenWithIntArray:tok]];
    found = (foundDelimiter_ != 0);
  }
  if (currentLen_ > 0) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:[self getLeftOver]];
  }
  else if (found) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:RAREUTCharScanner_emptyString_];
  }
  return ([((id<JavaUtilList>) nil_chk(list)) size] == 0) ? olist : list;
}

- (int)getTokenCountWithChar:(unichar)c
                 withBoolean:(BOOL)checkQuote
                 withBoolean:(BOOL)checkParam {
  int count = 0;
  int pos = currentPos_;
  int len = currentLen_;
  while ([self findTokenWithChar:c withBoolean:checkQuote withBoolean:checkParam] != nil) {
    count++;
  }
  currentPos_ = pos;
  currentLen_ = len;
  return count;
}

+ (id<JavaUtilList>)getTokensWithNSString:(NSString *)str
                                 withChar:(unichar)c
                              withBoolean:(BOOL)checkQuote
                              withBoolean:(BOOL)checkParam
                              withBoolean:(BOOL)trim {
  return [RAREUTCharScanner getTokensWithNSString:str withChar:c withBoolean:checkQuote withBoolean:checkParam withBoolean:trim withJavaUtilList:nil];
}

+ (id<JavaUtilList>)getTokensWithNSString:(NSString *)str
                                 withChar:(unichar)c
                              withBoolean:(BOOL)checkQuote
                              withBoolean:(BOOL)checkParam
                              withBoolean:(BOOL)trim
                         withJavaUtilList:(id<JavaUtilList>)list {
  RAREUTCharScanner *sc = [[RAREUTCharScanner alloc] initWithNSString:str];
  return [sc getTokensWithChar:c withBoolean:checkQuote withBoolean:checkParam withBoolean:trim withJavaUtilList:list];
}

+ (BOOL)isTokenCharWithInt:(int)i
                  withChar:(unichar)c
             withCharArray:(IOSCharArray *)a
                   withInt:(int)len {
  while (i < len) {
    if (IOSCharArray_Get(nil_chk(a), i++) == c) {
      return YES;
    }
  }
  return NO;
}

+ (unichar)htmlStringToCharacterWithCharArray:(IOSCharArray *)chars
                                      withInt:(int)pos
                                      withInt:(int)len {
  int n = 0;
  unichar c;
  unichar rc = 0;
  len += pos;
  if (IOSCharArray_Get(nil_chk(chars), pos) == '#') {
    pos++;
    while (pos < len) {
      c = IOSCharArray_Get(chars, pos++);
      if ((c < 48) || (c > 57)) {
        if (c == ';') {
          rc = (unichar) n;
        }
        break;
      }
      n *= 10;
      n += (int) (c - 48);
    }
  }
  return rc;
}

+ (id<JavaUtilMap>)parseOptionStringExWithRAREUTCharScanner:(RAREUTCharScanner *)sc
                                            withJavaUtilMap:(id<JavaUtilMap>)outArg
                                                   withChar:(unichar)c
                                                withBoolean:(BOOL)unquote {
  if (outArg == nil) {
    outArg = [[JavaUtilLinkedHashMap alloc] init];
  }
  IOSCharArray *chars = [((RAREUTCharScanner *) nil_chk(sc)) getContent];
  IOSIntArray *tok;
  int n;
  int end;
  NSString *s, *val;
  while ((tok = [sc findTokenWithChar:c withBoolean:YES withBoolean:YES]) != nil) {
    (void) [sc trimWithIntArray:tok];
    n = [RAREUTCharArray indexOfWithCharArray:chars withInt:IOSIntArray_Get(nil_chk(tok), 0) withInt:IOSIntArray_Get(tok, 1) withChar:'=' withInt:0];
    if (n == -1) {
      (void) [((id<JavaUtilMap>) nil_chk(outArg)) putWithId:[sc getTokenWithIntArray:tok] withId:nil];
    }
    else {
      end = IOSIntArray_Get(tok, 0) + IOSIntArray_Get(tok, 1);
      (*IOSIntArray_GetRef(tok, 1)) = n - IOSIntArray_Get(tok, 0);
      (void) [sc trimWithIntArray:tok];
      s = [sc getTokenWithIntArray:tok];
      (*IOSIntArray_GetRef(tok, 0)) = n + 1;
      (*IOSIntArray_GetRef(tok, 1)) = end - IOSIntArray_Get(tok, 0);
      (void) [sc trimWithIntArray:tok];
      if (unquote) {
        (*IOSIntArray_GetRef(tok, 1)) = [RAREUTCharScanner cleanQuotedExWithCharArray:chars withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1)];
      }
      val = [sc getTokenWithIntArray:tok];
      (void) [((id<JavaUtilMap>) nil_chk(outArg)) putWithId:s withId:val];
    }
  }
  return outArg;
}

+ (void)stripWithIntArray:(IOSIntArray *)tok
            withCharArray:(IOSCharArray *)chars
                  withInt:(int)pos
                  withInt:(int)len
            withCharArray:(IOSCharArray *)bad
              withBoolean:(BOOL)left
              withBoolean:(BOOL)right {
  if ((len < 1) || (chars == nil)) {
    return;
  }
  int i = pos;
  int n;
  BOOL badFound;
  int max = pos + len;
  if (left) {
    for (i = pos; i < max; i++) {
      badFound = NO;
      for (n = 0; n < (int) [((IOSCharArray *) nil_chk(bad)) count]; n++) {
        if (IOSCharArray_Get(nil_chk(chars), i) == IOSCharArray_Get(bad, n)) {
          badFound = YES;
          break;
        }
      }
      if (!badFound && (IOSCharArray_Get(nil_chk(chars), i) > 32)) {
        break;
      }
    }
  }
  (*IOSIntArray_GetRef(nil_chk(tok), 0)) = i;
  i = max - 1;
  if (right) {
    for (i = max - 1; i > pos; i--) {
      badFound = NO;
      for (n = 0; n < (int) [((IOSCharArray *) nil_chk(bad)) count]; n++) {
        if (IOSCharArray_Get(nil_chk(chars), i) == IOSCharArray_Get(bad, n)) {
          badFound = YES;
          break;
        }
      }
      if (!badFound && (IOSCharArray_Get(nil_chk(chars), i) > 32)) {
        break;
      }
    }
  }
  (*IOSIntArray_GetRef(tok, 1)) = (i + 1) - IOSIntArray_Get(tok, 0);
}

+ (void)trimWithIntArray:(IOSIntArray *)tok
           withCharArray:(IOSCharArray *)chars
                 withInt:(int)pos
                 withInt:(int)len
             withBoolean:(BOOL)left
             withBoolean:(BOOL)right {
  int n = pos + len;
  (*IOSIntArray_GetRef(nil_chk(tok), 0)) = n - 1;
  if (left) {
    while ((pos < n) && ([JavaLangCharacter isWhitespaceWithChar:IOSCharArray_Get(nil_chk(chars), pos)])) {
      pos++;
      len--;
    }
  }
  if (right) {
    while ((n > pos) && ([JavaLangCharacter isWhitespaceWithChar:IOSCharArray_Get(nil_chk(chars), --n)])) {
      len--;
    }
  }
  (*IOSIntArray_GetRef(tok, 1)) = len;
  if (len != 0) {
    (*IOSIntArray_GetRef(tok, 0)) = pos;
  }
}

+ (void)initialize {
  if (self == [RAREUTCharScanner class]) {
    RAREUTCharScanner_perThreadCharArray_ = [[RAREUTCharScanner_$1 alloc] init];
    RAREUTCharScanner_perThreadCharArray2_ = [[RAREUTCharScanner_$2 alloc] init];
    RAREUTCharScanner_perThreadScanner_ = [[RAREUTCharScanner_$3 alloc] init];
    RAREUTCharScanner_lfChars_ = [@"\x0d\n" toCharArray];
  }
}

- (void)copyAllFieldsTo:(RAREUTCharScanner *)other {
  [super copyAllFieldsTo:other];
  other->QT_ = QT_;
  other->currentLen_ = currentLen_;
  other->currentPos_ = currentPos_;
  other->foundDelimiter_ = foundDelimiter_;
  other->leftTrim_ = leftTrim_;
  other->markLen_ = markLen_;
  other->markPos_ = markPos_;
  other->oContent_ = oContent_;
  other->originalPos_ = originalPos_;
  other->paramEndChar_ = paramEndChar_;
  other->paramStartChar_ = paramStartChar_;
  other->rightTrim_ = rightTrim_;
  other->theContent_ = theContent_;
  other->theDelims_ = theDelims_;
  other->trimChars_ = trimChars_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "backup", NULL, "Z", 0x1, NULL },
    { "charToHexStringWithChar:withRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x9, NULL },
    { "charToUnicodeStringWithChar:withRAREUTCharArray:withBoolean:", NULL, "LRAREUTCharArray", 0x9, NULL },
    { "cleanQuotedWithNSString:", NULL, "LNSString", 0x9, "JavaTextParseException" },
    { "cleanQuotedWithNSString:withRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x9, "JavaTextParseException" },
    { "cleanQuotedWithCharArray:withInt:withInt:", NULL, "LNSString", 0x19, "JavaTextParseException" },
    { "cleanQuotedWithCharArray:withInt:withInt:withRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x19, "JavaTextParseException" },
    { "cleanQuotedExWithCharArray:withInt:withInt:", NULL, "I", 0x19, NULL },
    { "cleanQuotedExWithCharArray:withInt:withInt:withBoolean:", NULL, "I", 0x19, "JavaTextParseException" },
    { "encodeWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "encodeWithNSString:withRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x9, NULL },
    { "escapeWithNSString:", NULL, "LNSString", 0x19, NULL },
    { "escapeWithNSString:withBoolean:withRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x9, NULL },
    { "escapeWithCharArray:withInt:withInt:withBoolean:withRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x9, NULL },
    { "findTokenWithChar:", NULL, "LIOSIntArray", 0x1, NULL },
    { "findTokenWithBoolean:withBoolean:", NULL, "LIOSIntArray", 0x11, NULL },
    { "findTokenWithChar:withBoolean:withBoolean:", NULL, "LIOSIntArray", 0x11, NULL },
    { "findTokenWithInt:withInt:withChar:", NULL, "LIOSIntArray", 0x1, NULL },
    { "findTokenWithCharArray:withChar:withBoolean:withBoolean:", NULL, "LIOSIntArray", 0x19, NULL },
    { "findTokenWithCharArray:withInt:withInt:withChar:", NULL, "LIOSIntArray", 0x19, NULL },
    { "findTokenWithInt:withInt:withBoolean:withBoolean:", NULL, "LIOSIntArray", 0x11, NULL },
    { "findTokenWithCharArray:withInt:withInt:withChar:withBoolean:withBoolean:", NULL, "LIOSIntArray", 0x19, NULL },
    { "findTokenWithCharArray:withInt:withInt:withCharArray:withBoolean:withBoolean:", NULL, "LIOSIntArray", 0x19, NULL },
    { "findTokenAndTrimWithChar:", NULL, "LIOSIntArray", 0x1, NULL },
    { "markSupported", NULL, "Z", 0x1, NULL },
    { "nextToken", NULL, "LNSString", 0x1, NULL },
    { "nextTokenWithChar:", NULL, "LNSString", 0x1, NULL },
    { "nextTokenWithBoolean:withBoolean:", NULL, "LNSString", 0x1, NULL },
    { "nextTokenWithChar:withBoolean:", NULL, "LNSString", 0x1, NULL },
    { "nextTokenWithChar:withBoolean:withBoolean:", NULL, "LNSString", 0x1, NULL },
    { "nextTokenWithChar:withBoolean:withBoolean:withBoolean:", NULL, "LNSString", 0x1, NULL },
    { "nextTokenWithChar:withBoolean:withBoolean:withBoolean:withBoolean:", NULL, "LNSString", 0x1, NULL },
    { "parseOptionStringWithNSString:withChar:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "parseOptionStringWithNSString:withJavaUtilMap:withChar:withBoolean:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "parseOptionStringExWithNSString:withChar:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "parseOptionStringExWithNSString:withChar:withBoolean:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "readCharsWithInt:", NULL, "LIOSCharArray", 0x1, NULL },
    { "readStringWithInt:", NULL, "LNSString", 0x1, NULL },
    { "reset", NULL, "V", 0x1, "JavaIoIOException" },
    { "skipTokenWithChar:", NULL, "Z", 0x1, NULL },
    { "startsWithWithCharArray:", NULL, "Z", 0x1, NULL },
    { "startsWithWithNSString:", NULL, "Z", 0x1, NULL },
    { "stripWithIntArray:withCharArray:", NULL, "LIOSIntArray", 0x1, NULL },
    { "stripWithCharArray:withIntArray:withCharArray:", NULL, "LIOSIntArray", 0x1, NULL },
    { "stripWithCharArray:withInt:withInt:withCharArray:withBoolean:withBoolean:", NULL, "LIOSIntArray", 0x9, NULL },
    { "toLowerCase", NULL, "LRAREUTCharScanner", 0x1, NULL },
    { "toLowerCaseWithIntArray:", NULL, "LRAREUTCharScanner", 0x1, NULL },
    { "toUpperCase", NULL, "LRAREUTCharScanner", 0x1, NULL },
    { "toUpperCaseWithIntArray:", NULL, "LRAREUTCharScanner", 0x1, NULL },
    { "trim", NULL, "LRAREUTCharScanner", 0x1, NULL },
    { "trimWithIntArray:", NULL, "LIOSIntArray", 0x1, NULL },
    { "trimWithCharArray:withIntArray:", NULL, "LIOSIntArray", 0x1, NULL },
    { "trimWithCharArray:withInt:withInt:withBoolean:withBoolean:", NULL, "LIOSIntArray", 0x9, NULL },
    { "trimEx", NULL, "LIOSIntArray", 0x1, NULL },
    { "unesacpe", NULL, "LRAREUTCharScanner", 0x1, NULL },
    { "unescapeWithNSString:", NULL, "LNSString", 0x19, NULL },
    { "unescapeExWithCharArray:withInt:withInt:", NULL, "LNSString", 0x19, NULL },
    { "unescapeStringExWithCharArray:withInt:withInt:", NULL, "I", 0x19, NULL },
    { "unquoteWithBoolean:", NULL, "LRAREUTCharScanner", 0x1, NULL },
    { "unquoteWithIntArray:withBoolean:", NULL, "LIOSIntArray", 0x1, NULL },
    { "unquoteWithNSString:withBoolean:", NULL, "LNSString", 0x1, NULL },
    { "getConsumed", NULL, "LNSString", 0x1, NULL },
    { "getContent", NULL, "LIOSCharArray", 0x1, NULL },
    { "getLeftOver", NULL, "LNSString", 0x1, NULL },
    { "getLeftOverCB", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "getLeftOverChars", NULL, "LIOSCharArray", 0x1, NULL },
    { "getLeftOverToken", NULL, "LIOSIntArray", 0x1, NULL },
    { "getOptionsWithChar:withBoolean:", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getOptionsWithJavaUtilMap:withChar:withBoolean:", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getPieceWithNSString:withChar:withInt:", NULL, "LNSString", 0x19, NULL },
    { "getPieceWithNSString:withNSString:withInt:", NULL, "LNSString", 0x19, NULL },
    { "getPieceWithNSString:withChar:withInt:withInt:", NULL, "LNSString", 0x19, NULL },
    { "getPieceWithNSString:withNSString:withInt:withInt:", NULL, "LNSString", 0x19, NULL },
    { "getRelStringWithInt:withInt:", NULL, "LNSString", 0x1, NULL },
    { "getStringWithInt:withInt:", NULL, "LNSString", 0x1, NULL },
    { "getTokenWithIntArray:", NULL, "LNSString", 0x1, NULL },
    { "getTokenWithIntArray:withRAREUTCharArray:withBoolean:", NULL, "Z", 0x1, NULL },
    { "getTokenCharsWithIntArray:", NULL, "LIOSCharArray", 0x1, NULL },
    { "getTokensWithChar:", NULL, "LJavaUtilList", 0x1, NULL },
    { "getTokensWithChar:withBoolean:", NULL, "LJavaUtilList", 0x1, NULL },
    { "getTokensWithChar:withBoolean:withJavaUtilList:", NULL, "LJavaUtilList", 0x1, NULL },
    { "getTokensWithNSString:withChar:withBoolean:", NULL, "LJavaUtilList", 0x9, NULL },
    { "getTokensWithChar:withBoolean:withBoolean:withBoolean:", NULL, "LJavaUtilList", 0x1, NULL },
    { "getTokensWithNSString:withChar:withBoolean:withJavaUtilList:", NULL, "LJavaUtilList", 0x9, NULL },
    { "getTokensWithChar:withBoolean:withBoolean:withBoolean:withJavaUtilList:", NULL, "LJavaUtilList", 0x1, NULL },
    { "getTokensWithNSString:withChar:withBoolean:withBoolean:withBoolean:", NULL, "LJavaUtilList", 0x9, NULL },
    { "getTokensWithNSString:withChar:withBoolean:withBoolean:withBoolean:withJavaUtilList:", NULL, "LJavaUtilList", 0x9, NULL },
    { "isTokenCharWithInt:withChar:withCharArray:withInt:", NULL, "Z", 0x18, NULL },
    { "htmlStringToCharacterWithCharArray:withInt:withInt:", NULL, "C", 0xa, NULL },
    { "parseOptionStringExWithRAREUTCharScanner:withJavaUtilMap:withChar:withBoolean:", NULL, "LJavaUtilMap", 0x9, NULL },
    { "stripWithIntArray:withCharArray:withInt:withInt:withCharArray:withBoolean:withBoolean:", NULL, "V", 0xa, NULL },
    { "trimWithIntArray:withCharArray:withInt:withInt:withBoolean:withBoolean:", NULL, "V", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "DQT_", NULL, 0x1a, "C" },
    { "SQT_", NULL, 0x1a, "C" },
    { "emptyString_", NULL, 0x1a, "LNSString" },
    { "perThreadCharArray_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "perThreadCharArray2_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "perThreadScanner_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "lfChars_", NULL, 0x18, "LIOSCharArray" },
    { "foundDelimiter_", NULL, 0x1, "C" },
    { "currentLen_", NULL, 0x0, "I" },
    { "currentPos_", NULL, 0x0, "I" },
    { "oContent_", NULL, 0x0, "LIOSCharArray" },
    { "originalPos_", NULL, 0x0, "I" },
    { "paramEndChar_", NULL, 0x0, "C" },
    { "paramStartChar_", NULL, 0x0, "C" },
    { "theContent_", NULL, 0x0, "LIOSCharArray" },
    { "theDelims_", NULL, 0x0, "LIOSCharArray" },
    { "trimChars_", NULL, 0x0, "LIOSCharArray" },
    { "rightTrim_", NULL, 0x0, "Z" },
    { "leftTrim_", NULL, 0x0, "Z" },
    { "markPos_", NULL, 0x4, "I" },
    { "markLen_", NULL, 0x4, "I" },
  };
  static J2ObjcClassInfo _RAREUTCharScanner = { "CharScanner", "com.appnativa.util", NULL, 0x1, 92, methods, 21, fields, 0, NULL};
  return &_RAREUTCharScanner;
}

@end
@implementation RAREUTCharScanner_$1

- (id)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharArray alloc] initWithInt:32];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LNSObject", 0x24, NULL },
  };
  static J2ObjcClassInfo _RAREUTCharScanner_$1 = { "$1", "com.appnativa.util", "CharScanner", 0x8000, 1, methods, 0, NULL, 0, NULL};
  return &_RAREUTCharScanner_$1;
}

@end
@implementation RAREUTCharScanner_$2

- (id)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharArray alloc] initWithInt:32];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LNSObject", 0x24, NULL },
  };
  static J2ObjcClassInfo _RAREUTCharScanner_$2 = { "$2", "com.appnativa.util", "CharScanner", 0x8000, 1, methods, 0, NULL, 0, NULL};
  return &_RAREUTCharScanner_$2;
}

@end
@implementation RAREUTCharScanner_$3

- (id)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharScanner alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LNSObject", 0x24, NULL },
  };
  static J2ObjcClassInfo _RAREUTCharScanner_$3 = { "$3", "com.appnativa.util", "CharScanner", 0x8000, 1, methods, 0, NULL, 0, NULL};
  return &_RAREUTCharScanner_$3;
}

@end
