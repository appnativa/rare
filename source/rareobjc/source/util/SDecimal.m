//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/SDecimal.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/ISO88591Helper.h"
#include "com/appnativa/util/SDecimal.h"
#include "com/appnativa/util/SNumber.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/ThreadLocal.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/math/MathContext.h"
#include "java/math/RoundingMode.h"

@implementation RAREUTSDecimal

static NSString * RAREUTSDecimal_divideByZero_ = @"divide by zero";
static NSString * RAREUTSDecimal_numberToLarge_ = @"number to large";
static JavaMathMathContext * RAREUTSDecimal_mathContext_;
static RAREUTSDecimal * RAREUTSDecimal_zeroDecimal_;
static RAREUTSDecimal * RAREUTSDecimal_thirtySixHundredDecimal_;
static RAREUTSDecimal * RAREUTSDecimal_tenDecimal_;
static RAREUTSDecimal * RAREUTSDecimal_bd8192_;
static RAREUTSDecimal * RAREUTSDecimal_bd65536_;
static RAREUTSDecimal * RAREUTSDecimal_bd60_;
static RAREUTSDecimal * RAREUTSDecimal_bd512_;
static RAREUTSDecimal * RAREUTSDecimal_bd4096_;
static RAREUTSDecimal * RAREUTSDecimal_bd4_;
static RAREUTSDecimal * RAREUTSDecimal_bd365_;
static RAREUTSDecimal * RAREUTSDecimal_bd3600_;
static RAREUTSDecimal * RAREUTSDecimal_bd32768_;
static RAREUTSDecimal * RAREUTSDecimal_bd256_;
static RAREUTSDecimal * RAREUTSDecimal_bd24_;
static RAREUTSDecimal * RAREUTSDecimal_bd2048_;
static RAREUTSDecimal * RAREUTSDecimal_bd2_;
static RAREUTSDecimal * RAREUTSDecimal_bd128_;
static RAREUTSDecimal * RAREUTSDecimal_bd1024_;
static RAREUTSDecimal * RAREUTSDecimal_ptZeroOneDecimal_;
static JavaLangThreadLocal * RAREUTSDecimal_perThreadNumber_;
static JavaLangThreadLocal * RAREUTSDecimal_perThreadCA_;
static JavaMathBigDecimal * RAREUTSDecimal_minLong_;
static JavaMathBigDecimal * RAREUTSDecimal_maxLong_;
static RAREUTSDecimal * RAREUTSDecimal_oneHundredDecimal_;
static RAREUTSDecimal * RAREUTSDecimal_oneDecimal_;

+ (NSString *)divideByZero {
  return RAREUTSDecimal_divideByZero_;
}

+ (NSString *)numberToLarge {
  return RAREUTSDecimal_numberToLarge_;
}

+ (JavaMathMathContext *)mathContext {
  return RAREUTSDecimal_mathContext_;
}

+ (RAREUTSDecimal *)zeroDecimal {
  return RAREUTSDecimal_zeroDecimal_;
}

+ (RAREUTSDecimal *)thirtySixHundredDecimal {
  return RAREUTSDecimal_thirtySixHundredDecimal_;
}

+ (RAREUTSDecimal *)tenDecimal {
  return RAREUTSDecimal_tenDecimal_;
}

+ (RAREUTSDecimal *)bd8192 {
  return RAREUTSDecimal_bd8192_;
}

+ (RAREUTSDecimal *)bd65536 {
  return RAREUTSDecimal_bd65536_;
}

+ (RAREUTSDecimal *)bd60 {
  return RAREUTSDecimal_bd60_;
}

+ (RAREUTSDecimal *)bd512 {
  return RAREUTSDecimal_bd512_;
}

+ (RAREUTSDecimal *)bd4096 {
  return RAREUTSDecimal_bd4096_;
}

+ (RAREUTSDecimal *)bd4 {
  return RAREUTSDecimal_bd4_;
}

+ (RAREUTSDecimal *)bd365 {
  return RAREUTSDecimal_bd365_;
}

+ (RAREUTSDecimal *)bd3600 {
  return RAREUTSDecimal_bd3600_;
}

+ (RAREUTSDecimal *)bd32768 {
  return RAREUTSDecimal_bd32768_;
}

+ (RAREUTSDecimal *)bd256 {
  return RAREUTSDecimal_bd256_;
}

+ (RAREUTSDecimal *)bd24 {
  return RAREUTSDecimal_bd24_;
}

+ (RAREUTSDecimal *)bd2048 {
  return RAREUTSDecimal_bd2048_;
}

+ (RAREUTSDecimal *)bd2 {
  return RAREUTSDecimal_bd2_;
}

+ (RAREUTSDecimal *)bd128 {
  return RAREUTSDecimal_bd128_;
}

+ (RAREUTSDecimal *)bd1024 {
  return RAREUTSDecimal_bd1024_;
}

+ (RAREUTSDecimal *)ptZeroOneDecimal {
  return RAREUTSDecimal_ptZeroOneDecimal_;
}

+ (JavaLangThreadLocal *)perThreadNumber {
  return RAREUTSDecimal_perThreadNumber_;
}

+ (void)setPerThreadNumber:(JavaLangThreadLocal *)perThreadNumber {
  RAREUTSDecimal_perThreadNumber_ = perThreadNumber;
}

+ (JavaLangThreadLocal *)perThreadCA {
  return RAREUTSDecimal_perThreadCA_;
}

+ (void)setPerThreadCA:(JavaLangThreadLocal *)perThreadCA {
  RAREUTSDecimal_perThreadCA_ = perThreadCA;
}

+ (JavaMathBigDecimal *)minLong {
  return RAREUTSDecimal_minLong_;
}

+ (JavaMathBigDecimal *)maxLong {
  return RAREUTSDecimal_maxLong_;
}

+ (RAREUTSDecimal *)oneHundredDecimal {
  return RAREUTSDecimal_oneHundredDecimal_;
}

+ (RAREUTSDecimal *)oneDecimal {
  return RAREUTSDecimal_oneDecimal_;
}

- (id)init {
  if (self = [super init]) {
    theNumber_ = [JavaMathBigDecimal ZERO];
  }
  return self;
}

- (id)initWithJavaMathBigDecimal:(JavaMathBigDecimal *)num {
  if (self = [super init]) {
    theNumber_ = num;
  }
  return self;
}

- (id)initWithJavaMathBigInteger:(JavaMathBigInteger *)num {
  if (self = [super init]) {
    theNumber_ = [[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:num];
  }
  return self;
}

- (id)initWithDouble:(double)num {
  if (self = [super init]) {
    theNumber_ = [JavaMathBigDecimal valueOfWithDouble:num];
  }
  return self;
}

- (id)initWithInt:(int)num {
  if (self = [super init]) {
    theNumber_ = [JavaMathBigDecimal valueOfWithLong:num];
  }
  return self;
}

- (id)initWithLong:(long long int)num {
  if (self = [super init]) {
    theNumber_ = [JavaMathBigDecimal valueOfWithLong:num];
  }
  return self;
}

- (id)initWithRAREUTSDecimal:(RAREUTSDecimal *)snum {
  if (self = [super init]) {
    theNumber_ = ((RAREUTSDecimal *) nil_chk(snum))->theNumber_;
  }
  return self;
}

- (id)initWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (self = [super init]) {
    theNumber_ = [[JavaMathBigDecimal alloc] initWithNSString:[((RAREUTSNumber *) nil_chk(snum)) description]];
  }
  return self;
}

- (id)initWithNSString:(NSString *)str {
  if (self = [super init]) {
    (void) [self setValueWithNSString:str withBoolean:NO];
  }
  return self;
}

- (id)initWithNSString:(NSString *)str
           withBoolean:(BOOL)javaparsecompat {
  if (self = [super init]) {
    (void) [self setValueWithNSString:str withBoolean:javaparsecompat];
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)chars
                withInt:(int)pos
                withInt:(int)len {
  if (self = [super init]) {
    [self setValueExWithCharArray:chars withInt:pos withInt:len withBoolean:NO];
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)chars
                withInt:(int)pos
                withInt:(int)len
            withBoolean:(BOOL)javaparsecompat {
  if (self = [super init]) {
    (void) [self setValueWithCharArray:chars withInt:pos withInt:len withBoolean:javaparsecompat];
  }
  return self;
}

- (RAREUTSDecimal *)addWithJavaMathBigDecimal:(JavaMathBigDecimal *)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) addWithJavaMathBigDecimal:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) addWithJavaMathBigDecimal:num withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)addWithDouble:(double)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) addWithDouble:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) addWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithDouble:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)addWithInt:(int)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) addWithInt:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) addWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithLong:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)addWithLong:(long long int)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) addWithLong:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) addWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithLong:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)addWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) addWithRAREUTSDecimal:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) addWithJavaMathBigDecimal:((RAREUTSDecimal *) nil_chk(num))->theNumber_ withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)addWithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) addWithNSString:str];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithNSString:str];
  return [self addWithRAREUTSDecimal:snum];
}

- (RAREUTSDecimal *)and__WithRAREUTSDecimal:(RAREUTSDecimal *)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) and__WithRAREUTSDecimal:num];
  }
  theNumber_ = [[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigDecimal *) nil_chk(theNumber_)) toBigInteger])) and__WithJavaMathBigInteger:[((RAREUTSDecimal *) nil_chk(num))->theNumber_ toBigInteger]]];
  return self;
}

- (RAREUTSDecimal *)and__WithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) and__WithNSString:str];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithNSString:str];
  return [self and__WithRAREUTSDecimal:snum];
}

- (id)clone {
  return [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self];
}

- (int)compareToWithId:(id)obj {
  RAREUTSDecimal *snum = nil;
  if ([obj isKindOfClass:[RAREUTSDecimal class]]) {
    snum = (RAREUTSDecimal *) check_class_cast(obj, [RAREUTSDecimal class]);
  }
  else {
    snum = [[RAREUTSDecimal alloc] initWithNSString:[nil_chk(obj) description]];
  }
  return [self compareToWithRAREUTSDecimal:snum];
}

- (int)compareToWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:((RAREUTSDecimal *) nil_chk(num))->theNumber_];
}

- (int)decimalPlaces {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) scale__];
}

- (RAREUTSDecimal *)divideWithDouble:(double)num {
  if (num == 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSDecimal_divideByZero_];
  }
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) divideWithDouble:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) divideWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithDouble:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)divideWithInt:(int)num {
  if (num == 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSDecimal_divideByZero_];
  }
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) divideWithInt:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) divideWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithLong:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)divideWithLong:(long long int)num {
  if (num == 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSDecimal_divideByZero_];
  }
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) divideWithLong:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) divideWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithLong:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)divideWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  if ([((RAREUTSDecimal *) nil_chk(num)) isZero]) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSDecimal_divideByZero_];
  }
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) divideWithRAREUTSDecimal:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) divideWithJavaMathBigDecimal:num->theNumber_ withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)divideWithRAREUTSNumber:(RAREUTSNumber *)num {
  if ([((RAREUTSNumber *) nil_chk(num)) isZero]) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSDecimal_divideByZero_];
  }
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) divideWithRAREUTSNumber:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) divideWithJavaMathBigDecimal:[RAREUTSDecimal toBigDecimalWithRAREUTSNumber:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)divideWithNSString:(NSString *)str {
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithNSString:str];
  return [self divideWithRAREUTSDecimal:snum];
}

+ (NSString *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)num1
                    withJavaMathBigDecimal:(JavaMathBigDecimal *)num2 {
  num1 = [((JavaMathBigDecimal *) nil_chk(num1)) divideWithJavaMathBigDecimal:num2 withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return [RAREUTSDecimal toStringWithJavaMathBigDecimal:num1];
}

- (RAREUTSDecimal *)divideIntegerWithRAREUTSDecimal:(RAREUTSDecimal *)val {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) divideIntegerWithRAREUTSDecimal:val];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) divideToIntegralValueWithJavaMathBigDecimal:((RAREUTSDecimal *) nil_chk(val))->theNumber_ withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)divideIntegerWithRAREUTSNumber:(RAREUTSNumber *)val {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) divideIntegerWithRAREUTSNumber:val];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) divideToIntegralValueWithJavaMathBigDecimal:[RAREUTSDecimal toBigDecimalWithRAREUTSNumber:val] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

+ (JavaMathBigDecimal *)divideIntegerWithJavaMathBigDecimal:(JavaMathBigDecimal *)num1
                                     withJavaMathBigDecimal:(JavaMathBigDecimal *)num2 {
  return [((JavaMathBigDecimal *) nil_chk(num1)) divideToIntegralValueWithJavaMathBigDecimal:num2 withJavaMathMathContext:RAREUTSDecimal_mathContext_];
}

- (double)doubleValue {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) doubleValue];
}

- (BOOL)equalsWithDouble:(double)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:[JavaMathBigDecimal valueOfWithDouble:num]] == 0;
}

- (BOOL)equalsWithInt:(int)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:[JavaMathBigDecimal valueOfWithLong:num]] == 0;
}

- (BOOL)equalsWithLong:(long long int)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:[JavaMathBigDecimal valueOfWithLong:num]] == 0;
}

- (BOOL)isEqual:(id)obj {
  return [self equalsWithRAREUTSDecimal:(RAREUTSDecimal *) check_class_cast(obj, [RAREUTSDecimal class])];
}

- (BOOL)equalsWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:((RAREUTSDecimal *) nil_chk(num))->theNumber_] == 0;
}

- (long long int)fractionValue {
  JavaMathBigDecimal *d = [((JavaMathBigDecimal *) nil_chk(theNumber_)) remainderWithJavaMathBigDecimal:[JavaMathBigDecimal ONE] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  d = [d movePointRightWithInt:[((JavaMathBigDecimal *) nil_chk(d)) scale__]];
  return [((JavaMathBigDecimal *) nil_chk(d)) longLongValue];
}

- (NSString *)fractionValueString {
  if ([((JavaMathBigDecimal *) nil_chk(theNumber_)) scale__] == 0) {
    return @"";
  }
  NSString *s = [theNumber_ toPlainString];
  int n = [((NSString *) nil_chk(s)) indexOf:'.'];
  return (n == -1) ? @"" : [s substring:n + 1];
}

- (JavaMathBigDecimal *)getBigDecimal {
  return theNumber_;
}

- (BOOL)getSNumberWithRAREUTSNumber:(RAREUTSNumber *)outArg {
  if ([((JavaMathBigDecimal *) nil_chk(theNumber_)) scale__] < 19) {
    if (([theNumber_ compareToWithId:RAREUTSDecimal_minLong_] > 0) && ([theNumber_ compareToWithId:RAREUTSDecimal_maxLong_] < 0)) {
      RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSDecimal_perThreadCA_)) get], [RAREUTCharArray class]);
      (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:[theNumber_ toPlainString]];
      IOSCharArray *chars = ca->A_;
      int len = ca->_length_;
      return [((RAREUTSNumber *) nil_chk(outArg)) setValueExWithCharArray:chars withInt:0 withInt:len withBoolean:NO withBoolean:NO];
    }
  }
  return NO;
}

- (BOOL)gtWithDouble:(double)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:[JavaMathBigDecimal valueOfWithDouble:num]] > 0;
}

- (BOOL)gtWithInt:(int)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:[JavaMathBigDecimal valueOfWithLong:num]] > 0;
}

- (BOOL)gtWithLong:(long long int)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:[JavaMathBigDecimal valueOfWithLong:num]] > 0;
}

- (BOOL)gtWithRAREUTSDecimal:(RAREUTSDecimal *)snum {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:((RAREUTSDecimal *) nil_chk(snum))->theNumber_] > 0;
}

- (NSUInteger)hash {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) hash];
}

- (NSString *)hexMantissaValueStringWithBoolean:(BOOL)sign {
  JavaMathBigInteger *bi;
  if (([((JavaMathBigDecimal *) nil_chk(theNumber_)) signum] < 0) && !sign) {
    bi = [((JavaMathBigDecimal *) nil_chk([theNumber_ negateWithJavaMathMathContext:RAREUTSDecimal_mathContext_])) toBigInteger];
  }
  else {
    bi = [theNumber_ toBigInteger];
  }
  return [((JavaMathBigInteger *) nil_chk(bi)) toStringWithInt:16];
}

- (int)intValue {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) intValue];
}

- (int)intValueMax {
  long long int n = [((JavaMathBigDecimal *) nil_chk(theNumber_)) longLongValue];
  return (n > JavaLangInteger_MAX_VALUE) ? JavaLangInteger_MAX_VALUE : (int) n;
}

- (BOOL)isInteger {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) scale__] == 0;
}

- (BOOL)isNegative {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) signum] < 0;
}

- (BOOL)isZero {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) signum] == 0;
}

- (long long int)longValue {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) longLongValue];
}

- (BOOL)ltWithDouble:(double)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:[JavaMathBigDecimal valueOfWithDouble:num]] < 0;
}

- (BOOL)ltWithInt:(int)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:[JavaMathBigDecimal valueOfWithLong:num]] < 0;
}

- (BOOL)ltWithLong:(long long int)num {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:[JavaMathBigDecimal valueOfWithLong:num]] < 0;
}

- (BOOL)ltWithRAREUTSDecimal:(RAREUTSDecimal *)snum {
  return [self ltWithDouble:[((RAREUTSDecimal *) nil_chk(snum)) doubleValue]];
}

- (RAREUTSDecimal *)makeImmutable {
  immutable_ = YES;
  return self;
}

- (RAREUTSDecimal *)modWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) modWithRAREUTSDecimal:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) remainderWithJavaMathBigDecimal:((RAREUTSDecimal *) nil_chk(num))->theNumber_ withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)modWithRAREUTSDecimal:(RAREUTSDecimal *)snum
                              withBoolean:(BOOL)special {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) modWithRAREUTSDecimal:snum withBoolean:special];
  }
  BOOL neg = [((JavaMathBigDecimal *) nil_chk(theNumber_)) signum] != [((RAREUTSDecimal *) nil_chk(snum))->theNumber_ signum];
  JavaMathBigDecimal *bd = [theNumber_ remainderWithJavaMathBigDecimal:snum->theNumber_];
  if (neg && special && ([((JavaMathBigDecimal *) nil_chk(bd)) signum] != 0)) {
    bd = [bd addWithJavaMathBigDecimal:snum->theNumber_];
  }
  theNumber_ = bd;
  return self;
}

+ (JavaMathBigDecimal *)modWithJavaMathBigDecimal:(JavaMathBigDecimal *)num1
                           withJavaMathBigDecimal:(JavaMathBigDecimal *)num2
                                      withBoolean:(BOOL)special {
  BOOL neg = [((JavaMathBigDecimal *) nil_chk(num1)) signum] != [((JavaMathBigDecimal *) nil_chk(num2)) signum];
  JavaMathBigDecimal *bd = [num1 remainderWithJavaMathBigDecimal:num2];
  if (neg && special && ([((JavaMathBigDecimal *) nil_chk(bd)) signum] != 0)) {
    bd = [bd addWithJavaMathBigDecimal:num2];
  }
  return bd;
}

- (RAREUTSDecimal *)moveDecimalPointWithInt:(int)places {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) moveDecimalPointWithInt:places];
  }
  if (places < 0) {
    theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) movePointLeftWithInt:-places];
  }
  else if (places > 0) {
    theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) movePointRightWithInt:places];
  }
  return self;
}

- (RAREUTSDecimal *)multiplyWithDouble:(double)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) multiplyWithDouble:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) multiplyWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithDouble:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)multiplyWithInt:(int)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) multiplyWithInt:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) multiplyWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithLong:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)multiplyWithLong:(long long int)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) multiplyWithLong:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) multiplyWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithLong:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)multiplyWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) multiplyWithRAREUTSDecimal:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) multiplyWithJavaMathBigDecimal:((RAREUTSDecimal *) nil_chk(num))->theNumber_ withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)multiplyWithRAREUTSNumber:(RAREUTSNumber *)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) multiplyWithRAREUTSNumber:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) multiplyWithJavaMathBigDecimal:[RAREUTSDecimal toBigDecimalWithRAREUTSNumber:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)multiplyWithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) multiplyWithNSString:str];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithNSString:str];
  return [self multiplyWithRAREUTSDecimal:snum];
}

+ (JavaMathBigDecimal *)multiplyWithJavaMathBigDecimal:(JavaMathBigDecimal *)num1
                                withJavaMathBigDecimal:(JavaMathBigDecimal *)num2 {
  return [((JavaMathBigDecimal *) nil_chk(num1)) multiplyWithJavaMathBigDecimal:num2 withJavaMathMathContext:RAREUTSDecimal_mathContext_];
}

- (RAREUTSDecimal *)negate {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) negate];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) negateWithJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)not__ {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) not__];
  }
  if ([((JavaMathBigDecimal *) nil_chk(theNumber_)) compareToWithId:[JavaMathBigDecimal ZERO]] != 0) {
    theNumber_ = [JavaMathBigDecimal valueOfWithLong:0];
  }
  else {
    theNumber_ = [JavaMathBigDecimal valueOfWithLong:1];
  }
  return self;
}

- (RAREUTSDecimal *)oneOver {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) oneOver];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk([JavaMathBigDecimal ONE])) divideWithJavaMathBigDecimal:theNumber_ withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)or__WithDouble:(double)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) or__WithDouble:num];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithDouble:num];
  return [self or__WithRAREUTSDecimal:snum];
}

- (RAREUTSDecimal *)or__WithInt:(int)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) or__WithInt:num];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithInt:num];
  return [self or__WithRAREUTSDecimal:snum];
}

- (RAREUTSDecimal *)or__WithLong:(long long int)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) or__WithLong:num];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithLong:num];
  return [self or__WithRAREUTSDecimal:snum];
}

- (RAREUTSDecimal *)or__WithRAREUTSDecimal:(RAREUTSDecimal *)snum {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) or__WithRAREUTSDecimal:snum];
  }
  theNumber_ = [[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigDecimal *) nil_chk(theNumber_)) toBigInteger])) or__WithJavaMathBigInteger:[((RAREUTSDecimal *) nil_chk(snum))->theNumber_ toBigInteger]]];
  return self;
}

- (RAREUTSDecimal *)or__WithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) or__WithNSString:str];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithNSString:str];
  return [self or__WithRAREUTSDecimal:snum];
}

- (RAREUTSDecimal *)powWithRAREUTSDecimal:(RAREUTSDecimal *)snum {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) powWithRAREUTSDecimal:snum];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) powWithInt:[((RAREUTSDecimal *) nil_chk(snum)) intValue] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)powWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) powWithRAREUTSNumber:snum];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) powWithInt:[((RAREUTSNumber *) nil_chk(snum)) intValue] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)roundWithInt:(int)places
                     withBoolean:(BOOL)up {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) roundWithInt:places withBoolean:up];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) setScaleWithInt:places withInt:up ? JavaMathBigDecimal_ROUND_HALF_UP : JavaMathBigDecimal_ROUND_DOWN];
  return self;
}

- (int)scale__ {
  return [((JavaMathBigDecimal *) nil_chk(theNumber_)) scale__];
}

- (RAREUTSDecimal *)setValueWithJavaMathBigDecimal:(JavaMathBigDecimal *)num {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithJavaMathBigDecimal:num];
  }
  theNumber_ = num;
  return self;
}

- (RAREUTSDecimal *)setValueWithJavaMathBigInteger:(JavaMathBigInteger *)num {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithJavaMathBigInteger:num];
  }
  theNumber_ = [[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:num];
  return self;
}

- (RAREUTSDecimal *)setValueWithDouble:(double)val {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithDouble:val];
  }
  theNumber_ = [JavaMathBigDecimal valueOfWithDouble:val];
  return self;
}

- (RAREUTSDecimal *)setValueWithLong:(long long int)val {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithLong:val];
  }
  theNumber_ = [JavaMathBigDecimal valueOfWithLong:val];
  return self;
}

- (RAREUTSDecimal *)setValueWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:num];
  }
  theNumber_ = ((RAREUTSDecimal *) nil_chk(num))->theNumber_;
  return self;
}

- (RAREUTSDecimal *)setValueWithRAREUTSNumber:(RAREUTSNumber *)num {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithRAREUTSNumber:num];
  }
  theNumber_ = [[JavaMathBigDecimal alloc] initWithNSString:[((RAREUTSNumber *) nil_chk(num)) description]];
  return self;
}

- (RAREUTSDecimal *)setValueWithNSString:(NSString *)str {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithNSString:str];
  }
  (void) [self setValueWithNSString:str withBoolean:NO];
  return self;
}

- (RAREUTSDecimal *)setValueWithNSString:(NSString *)str
                             withBoolean:(BOOL)javaparsecompat {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithNSString:str withBoolean:javaparsecompat];
  }
  if (![self setValueExWithNSString:str withBoolean:javaparsecompat]) {
    @throw [[JavaLangNumberFormatException alloc] init];
  }
  return self;
}

- (RAREUTSDecimal *)setValueWithCharArray:(IOSCharArray *)chars
                                  withInt:(int)pos
                                  withInt:(int)len {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithCharArray:chars withInt:pos withInt:len withBoolean:NO];
  }
  if (![self setValueExWithCharArray:chars withInt:pos withInt:len withBoolean:NO]) {
    @throw [[JavaLangNumberFormatException alloc] init];
  }
  return self;
}

- (RAREUTSDecimal *)setValueWithLong:(long long int)mantissa
                            withLong:(long long int)fraction
                             withInt:(int)decplaces {
  RAREUTSNumber *num = (RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSDecimal_perThreadNumber_)) get], [RAREUTSNumber class]);
  (void) [((RAREUTSNumber *) nil_chk(num)) setValueWithLong:mantissa withLong:fraction withInt:decplaces];
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithRAREUTSNumber:num];
  }
  return [self setValueWithRAREUTSNumber:num];
}

- (RAREUTSDecimal *)setValueWithCharArray:(IOSCharArray *)chars
                                  withInt:(int)pos
                                  withInt:(int)len
                              withBoolean:(BOOL)javaparsecompat {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithCharArray:chars withInt:pos withInt:len withBoolean:javaparsecompat];
  }
  if (![self setValueExWithCharArray:chars withInt:pos withInt:len withBoolean:javaparsecompat]) {
    @throw [[JavaLangNumberFormatException alloc] init];
  }
  return self;
}

- (BOOL)setValueExWithCharArray:(IOSCharArray *)chars
                        withInt:(int)pos
                        withInt:(int)len
                    withBoolean:(BOOL)javaparsecompat {
  if (immutable_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Immutable object"];
  }
  BOOL neg = NO;
  if ((chars == nil) || (len == 0)) {
    return NO;
  }
  int esign = 0;
  BOOL not_ = NO;
  int notval = 0;
  int state = 0;
  int i = 0;
  unichar firstchar = 0;
  unichar oschar = 0;
  BOOL ret = YES;
  if ((len == 1) && (IOSCharArray_Get(nil_chk(chars), pos) > 47) && (IOSCharArray_Get(chars, pos) < 58)) {
    theNumber_ = [JavaMathBigDecimal valueOfWithLong:(int) (IOSCharArray_Get(chars, pos) - 48)];
    theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) addWithJavaMathBigDecimal:[JavaMathBigDecimal ZERO] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
    return YES;
  }
  for (i = 0; i < len; i++) {
    if ((IOSCharArray_Get(nil_chk(chars), pos + i) == '-') || (IOSCharArray_Get(chars, pos + i) == '+') || (IOSCharArray_Get(chars, pos + i) == '\'')) {
      if (IOSCharArray_Get(chars, pos + i) == '-') {
        neg = !neg;
      }
      else if (IOSCharArray_Get(chars, pos + i) == '\'') {
        notval = 1 - notval;
        if (!not_) {
          not_ = YES;
        }
      }
    }
    else {
      break;
    }
  }
  pos += i;
  len -= i;
  if (len == 0) {
    if (!javaparsecompat) {
      theNumber_ = [((JavaMathBigDecimal *) nil_chk([JavaMathBigDecimal ZERO])) multiplyWithJavaMathBigDecimal:[JavaMathBigDecimal ZERO] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
    }
    return !javaparsecompat;
  }
  if (neg) {
    oschar = IOSCharArray_Get(nil_chk(chars), pos - 1);
    (*IOSCharArray_GetRef(chars, pos - 1)) = '-';
  }
  for (i = 0; i < len; i++) {
    switch (state) {
      case RAREUTSDecimal_dot:
      if ((IOSCharArray_Get(nil_chk(chars), i + pos) < 48) || (IOSCharArray_Get(chars, i + pos) > 57)) {
        if ((IOSCharArray_Get(chars, i + pos) == 'e') || (IOSCharArray_Get(chars, i + pos) == 'E')) {
          if ((IOSCharArray_Get(chars, (i + pos) - 1) != '.') && (firstchar != 0)) {
            if (IOSCharArray_Get(chars, (i + pos) - 1) != '.') {
              state = RAREUTSDecimal_exponent;
              break;
            }
          }
        }
        ret = NO;
        goto break_forloop;
      }
      break;
      case RAREUTSDecimal_exponent:
      if ((IOSCharArray_Get(nil_chk(chars), i + pos) < 48) || (IOSCharArray_Get(chars, i + pos) > 57)) {
        if ((esign == 0) && ((IOSCharArray_Get(chars, i + pos) == '+') || (IOSCharArray_Get(chars, i + pos) == '-'))) {
          esign = i;
          break;
        }
        ret = NO;
        goto break_forloop;
      }
      break;
      default:
      if ((IOSCharArray_Get(nil_chk(chars), i + pos) < 48) || (IOSCharArray_Get(chars, i + pos) > 57)) {
        if (IOSCharArray_Get(chars, i + pos) == '.') {
          if (firstchar == 0) {
            firstchar = '.';
          }
          state = RAREUTSDecimal_dot;
          break;
        }
        if ((IOSCharArray_Get(chars, i + pos) == 'e') || (IOSCharArray_Get(chars, i + pos) == 'E')) {
          if (firstchar != 0) {
            state = RAREUTSDecimal_exponent;
            break;
          }
        }
        ret = NO;
        goto break_forloop;
      }
      else if (firstchar == 0) {
        firstchar = IOSCharArray_Get(chars, i + pos);
      }
      break;
    }
  }
  break_forloop: ;
  if (ret || !javaparsecompat) {
    if (!ret && (esign > 0) && (i == (esign + 1))) {
      i = esign - 1;
    }
    if ((i > 0) && ((IOSCharArray_Get(nil_chk(chars), (pos + i) - 1) < 48) || (IOSCharArray_Get(chars, (pos + i) - 1) > 57))) {
      if (javaparsecompat) {
        ret = NO;
      }
      else {
        i--;
      }
    }
  }
  if (ret || !javaparsecompat) {
    len = i;
    if (oschar != 0) {
      pos--;
      len++;
    }
    if (len < 1) {
      theNumber_ = [JavaMathBigDecimal valueOfWithLong:0];
    }
    else if ((len == 1) && ((IOSCharArray_Get(nil_chk(chars), pos) < 48) || (IOSCharArray_Get(chars, pos) > 57))) {
      theNumber_ = [JavaMathBigDecimal valueOfWithLong:0];
    }
    else {
      theNumber_ = [[JavaMathBigDecimal alloc] initWithCharArray:chars withInt:pos withInt:len];
    }
    theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) addWithJavaMathBigDecimal:[JavaMathBigDecimal ZERO] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
    ret = YES;
  }
  if (oschar != 0) {
    (*IOSCharArray_GetRef(nil_chk(chars), pos)) = oschar;
  }
  if (not_ && (theNumber_ != nil)) {
    if ([theNumber_ compareToWithId:[JavaMathBigDecimal ZERO]] == 0) {
      theNumber_ = [JavaMathBigDecimal valueOfWithLong:notval];
    }
    else {
      theNumber_ = [JavaMathBigDecimal valueOfWithLong:1 - notval];
    }
  }
  return ret;
}

+ (JavaMathBigDecimal *)sqrtWithJavaMathBigDecimal:(JavaMathBigDecimal *)num {
  JavaMathBigDecimal *a = [[JavaMathBigDecimal alloc] initWithNSString:@".5"];
  JavaMathBigDecimal *prev = [((JavaMathBigDecimal *) nil_chk(num)) multiplyWithJavaMathBigDecimal:a];
  for (int i = 0; i < 25; i++) {
    prev = [a multiplyWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(prev)) addWithJavaMathBigDecimal:[num divideWithJavaMathBigDecimal:prev withInt:30 withInt:JavaMathBigDecimal_ROUND_HALF_EVEN]]];
  }
  return prev;
}

- (RAREUTSDecimal *)subtractWithJavaMathBigDecimal:(JavaMathBigDecimal *)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) subtractWithJavaMathBigDecimal:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) subtractWithJavaMathBigDecimal:num withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)subtractWithDouble:(double)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) subtractWithDouble:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) subtractWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithDouble:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)subtractWithInt:(int)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) subtractWithInt:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) subtractWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithLong:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)subtractWithLong:(long long int)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) subtractWithLong:num];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) subtractWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithLong:num] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)subtractWithRAREUTSDecimal:(RAREUTSDecimal *)snum {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) subtractWithRAREUTSDecimal:snum];
  }
  theNumber_ = [((JavaMathBigDecimal *) nil_chk(theNumber_)) subtractWithJavaMathBigDecimal:((RAREUTSDecimal *) nil_chk(snum))->theNumber_ withJavaMathMathContext:RAREUTSDecimal_mathContext_];
  return self;
}

- (RAREUTSDecimal *)subtractWithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) subtractWithNSString:str];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithNSString:str];
  return [self subtractWithRAREUTSDecimal:snum];
}

+ (JavaMathBigDecimal *)toBigDecimalWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ != nil) {
    return snum->bigNumber_->theNumber_;
  }
  JavaMathBigDecimal *num = [JavaMathBigDecimal valueOfWithLong:snum->mantissa_];
  if (snum->fraction_ != 0) {
    num = [((JavaMathBigDecimal *) nil_chk(num)) movePointRightWithInt:snum->decplaces_];
    num = [((JavaMathBigDecimal *) nil_chk(num)) addWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithLong:snum->fraction_]];
    num = [((JavaMathBigDecimal *) nil_chk(num)) movePointLeftWithInt:snum->decplaces_];
  }
  return num;
}

- (int)toBytesWithByteArray:(IOSByteArray *)outArg {
  return [((RAREUTISO88591Helper *) nil_chk([RAREUTISO88591Helper getInstance])) getBytesWithCharArray:[((NSString *) nil_chk([RAREUTSDecimal toStringWithJavaMathBigDecimal:theNumber_])) toCharArray] withByteArray:outArg withInt:0];
}

- (RAREUTCharArray *)toCharBufferWithRAREUTCharArray:(RAREUTCharArray *)outArg {
  return [((RAREUTCharArray *) nil_chk(outArg)) setWithNSString:[self description]];
}

- (NSString *)toFormattedStringWithNSString:(NSString *)format
                                    withInt:(int)places {
  BOOL neg = NO;
  BOOL comma = [((NSString *) nil_chk(format)) indexOf:','] != -1;
  BOOL paren = [format indexOf:'P'] != -1;
  BOOL trail = [format indexOf:'T'] != -1;
  BOOL docomma = NO;
  IOSCharArray *chars;
  IOSCharArray *nchars;
  int i;
  int n = 0;
  int len = 0;
  int pos = 0;
  int num = 0;
  JavaMathBigDecimal *tn = theNumber_;
  if (places > -1) {
    tn = [((JavaMathBigDecimal *) nil_chk(theNumber_)) setScaleWithInt:places withInt:JavaMathBigDecimal_ROUND_HALF_UP];
  }
  int sc = [((JavaMathBigDecimal *) nil_chk(tn)) scale__];
  RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSDecimal_perThreadCA_)) get], [RAREUTCharArray class]);
  (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:[tn toPlainString]];
  nchars = ca->A_;
  int nlen = ca->_length_;
  chars = [IOSCharArray arrayWithLength:nlen * 2];
  int endpos = (int) [chars count] - 3;
  if (sc == 0) {
    docomma = YES;
  }
  for (i = nlen - 1; i > -1; i--) {
    (*IOSCharArray_GetRef(chars, endpos - n)) = IOSCharArray_Get(nil_chk(nchars), i);
    if (IOSCharArray_Get(nchars, i) == '-') {
      neg = YES;
      break;
    }
    n++;
    num++;
    if (comma && docomma) {
      if (num == 3) {
        (*IOSCharArray_GetRef(chars, endpos - n)) = ',';
        n++;
        num = 0;
      }
    }
    else if (IOSCharArray_Get(nchars, i) == '.') {
      docomma = YES;
      num = 0;
    }
  }
  n--;
  pos = endpos - n;
  len = endpos - pos + 1;
  if (IOSCharArray_Get(chars, pos) == ',') {
    pos++;
    len--;
  }
  else if (IOSCharArray_Get(chars, pos) == '0') {
    pos++;
    len--;
  }
  if (paren) {
    if (neg) {
      (*IOSCharArray_GetRef(chars, pos + len)) = ')';
      (*IOSCharArray_GetRef(chars, --pos)) = '(';
      len += 2;
    }
    else {
      (*IOSCharArray_GetRef(chars, pos + len)) = ' ';
      (*IOSCharArray_GetRef(chars, --pos)) = ' ';
      len += 2;
    }
  }
  else if (trail) {
    if (neg) {
      (*IOSCharArray_GetRef(chars, pos + len)) = (([format indexOf:'-'] == -1) && neg) ? '-' : ' ';
      len++;
    }
    else {
      (*IOSCharArray_GetRef(chars, pos + len)) = (([format indexOf:'+'] != -1) && !neg) ? '+' : ' ';
      len++;
    }
  }
  else {
    if (neg) {
      if (([format indexOf:'-'] == -1) && neg) {
        (*IOSCharArray_GetRef(chars, --pos)) = '-';
        len++;
      }
    }
    else {
      if (([format indexOf:'+'] != -1) && !neg) {
        (*IOSCharArray_GetRef(chars, --pos)) = '+';
        len++;
      }
    }
  }
  return [NSString stringWithCharacters:chars offset:pos length:len];
}

- (NSString *)description {
  return [RAREUTSDecimal toStringWithJavaMathBigDecimal:theNumber_];
}

+ (NSString *)toStringWithJavaMathBigDecimal:(JavaMathBigDecimal *)num {
  NSString *s;
  if ([((JavaMathBigDecimal *) nil_chk(num)) scale__] > 0) {
    RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSDecimal_perThreadCA_)) get], [RAREUTCharArray class]);
    (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:[num toPlainString]];
    IOSCharArray *chars = ca->A_;
    int len = ca->_length_;
    BOOL neg = NO;
    int pos = 0;
    while ((len > 0) && (IOSCharArray_Get(nil_chk(chars), len - 1) != '.') && (IOSCharArray_Get(chars, len - 1) < 49)) {
      len--;
    }
    if ((len > 0) && (IOSCharArray_Get(nil_chk(chars), len - 1) == '.')) {
      len--;
    }
    if (IOSCharArray_Get(nil_chk(chars), 0) == '-') {
      neg = YES;
      pos = 1;
    }
    while ((pos < len) && (IOSCharArray_Get(chars, pos) != '.') && (IOSCharArray_Get(chars, pos) < 49)) {
      pos++;
      len--;
    }
    if (neg) {
      (*IOSCharArray_GetRef(chars, --pos)) = '-';
    }
    s = (len == 0) ? @"0" : [NSString stringWithCharacters:chars offset:pos length:len];
  }
  else {
    s = [num toPlainString];
  }
  return s;
}

- (RAREUTCharArray *)toStringWithRAREUTCharArray:(RAREUTCharArray *)outArg {
  return [self toStringWithRAREUTCharArray:outArg withBoolean:NO];
}

- (RAREUTCharArray *)toStringWithRAREUTCharArray:(RAREUTCharArray *)outArg
                                     withBoolean:(BOOL)append {
  if (!append) {
    ((RAREUTCharArray *) nil_chk(outArg))->_length_ = 0;
  }
  if ([((JavaMathBigDecimal *) nil_chk(theNumber_)) scale__] > 0) {
    RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSDecimal_perThreadCA_)) get], [RAREUTCharArray class]);
    (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:[theNumber_ toPlainString]];
    IOSCharArray *chars = ca->A_;
    int len = ca->_length_;
    BOOL neg = NO;
    int pos = 0;
    while ((len > 0) && (IOSCharArray_Get(nil_chk(chars), len - 1) != '.') && (IOSCharArray_Get(chars, len - 1) < 49)) {
      len--;
    }
    if ((len > 0) && (IOSCharArray_Get(nil_chk(chars), len - 1) == '.')) {
      len--;
    }
    if (IOSCharArray_Get(nil_chk(chars), 0) == '-') {
      neg = YES;
      pos = 1;
    }
    while ((pos < len) && (IOSCharArray_Get(chars, pos) != '.') && (IOSCharArray_Get(chars, pos) < 49)) {
      pos++;
      len--;
    }
    if (neg) {
      (*IOSCharArray_GetRef(chars, --pos)) = '-';
    }
    if (len == 0) {
      (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithChar:'0'];
    }
    else {
      (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithCharArray:chars withInt:pos withInt:len];
    }
  }
  else {
    (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithNSString:[theNumber_ toPlainString]];
  }
  return outArg;
}

- (NSString *)toStringExWithNSString:(NSString *)tab {
  return [NSString stringWithFormat:@"%@%@", tab, [self description]];
}

+ (RAREUTSDecimal *)valueOfWithDouble:(double)num {
  if (num == 0) {
    return RAREUTSDecimal_zeroDecimal_;
  }
  if (num == 1) {
    return RAREUTSDecimal_oneDecimal_;
  }
  if (num == 10) {
    return RAREUTSDecimal_tenDecimal_;
  }
  if (num == 100) {
    return RAREUTSDecimal_oneHundredDecimal_;
  }
  if (num == 3600) {
    return RAREUTSDecimal_thirtySixHundredDecimal_;
  }
  return [[RAREUTSDecimal alloc] initWithDouble:num];
}

+ (RAREUTSDecimal *)valueOfWithLong:(long long int)num {
  if (num == 0) {
    return RAREUTSDecimal_zeroDecimal_;
  }
  if (num == 1) {
    return RAREUTSDecimal_oneDecimal_;
  }
  if (num == 10) {
    return RAREUTSDecimal_tenDecimal_;
  }
  if (num == 100) {
    return RAREUTSDecimal_oneHundredDecimal_;
  }
  if (num == 3600) {
    return RAREUTSDecimal_thirtySixHundredDecimal_;
  }
  return [[RAREUTSDecimal alloc] initWithLong:num];
}

+ (RAREUTSDecimal *)valueOfWithRAREUTSNumber:(RAREUTSNumber *)val {
  if ([((RAREUTSNumber *) nil_chk(val)) isBigNumber]) {
    return [[RAREUTSDecimal alloc] initWithRAREUTSNumber:val];
  }
  int decplaces = [val decimalPlaces];
  long long int mantissa = [val longLongValue];
  long long int fraction = [val fractionalPart];
  if (decplaces == 0) {
    if (mantissa == 0) {
      return RAREUTSDecimal_zeroDecimal_;
    }
    if (mantissa == 1) {
      return RAREUTSDecimal_oneDecimal_;
    }
    if (mantissa == 10) {
      return RAREUTSDecimal_tenDecimal_;
    }
    if (mantissa == 100) {
      return RAREUTSDecimal_oneHundredDecimal_;
    }
    if (mantissa == 3600) {
      return RAREUTSDecimal_thirtySixHundredDecimal_;
    }
  }
  else if ((mantissa == 0) && (fraction == 1) && (decplaces == 2)) {
    return RAREUTSDecimal_ptZeroOneDecimal_;
  }
  return [[RAREUTSDecimal alloc] initWithRAREUTSNumber:val];
}

- (RAREUTSDecimal *)xor__WithInt:(int)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) xor__WithInt:num];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithInt:num];
  return [self xor__WithRAREUTSDecimal:snum];
}

- (RAREUTSDecimal *)xor__WithLong:(long long int)num {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) xor__WithLong:num];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithLong:num];
  return [self xor__WithRAREUTSDecimal:snum];
}

- (RAREUTSDecimal *)xor__WithRAREUTSDecimal:(RAREUTSDecimal *)snum {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) xor__WithRAREUTSDecimal:snum];
  }
  theNumber_ = [[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigDecimal *) nil_chk(theNumber_)) toBigInteger])) xor__WithJavaMathBigInteger:[((RAREUTSDecimal *) nil_chk(snum))->theNumber_ toBigInteger]]];
  return self;
}

- (RAREUTSDecimal *)xor__WithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:self]) xor__WithNSString:str];
  }
  RAREUTSDecimal *snum = [[RAREUTSDecimal alloc] initWithNSString:str];
  return [self xor__WithRAREUTSDecimal:snum];
}

- (RAREUTSDecimal *)zero {
  if (immutable_) {
    return [[RAREUTSDecimal alloc] initWithJavaMathBigDecimal:[JavaMathBigDecimal ZERO]];
  }
  theNumber_ = [JavaMathBigDecimal ZERO];
  return self;
}

- (BOOL)isPowerOfTenWithLong:(long long int)num {
  num *= ((num < 0) ? (-1) : 1);
  while ((num % 10) == 0) {
    num /= 10;
  }
  return (num == 1) ? YES : NO;
}

- (BOOL)setValueExWithNSString:(NSString *)str
                   withBoolean:(BOOL)javaparsecompat {
  if (immutable_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Immutable object"];
  }
  if (str == nil) {
    return NO;
  }
  int len = (int) [((NSString *) nil_chk(str)) sequenceLength];
  if (len == 0) {
    if (javaparsecompat) {
      return NO;
    }
    theNumber_ = [((JavaMathBigDecimal *) nil_chk([JavaMathBigDecimal ZERO])) multiplyWithJavaMathBigDecimal:[JavaMathBigDecimal ZERO] withJavaMathMathContext:RAREUTSDecimal_mathContext_];
    return YES;
  }
  if (charBuf_ == nil) {
    charBuf_ = [[RAREUTCharArray alloc] initWithInt:len];
  }
  else {
    [charBuf_ ensureCapacityWithInt:len];
  }
  [str getChars:0 sourceEnd:len destination:((RAREUTCharArray *) nil_chk(charBuf_))->A_ destinationBegin:0];
  return [self setValueExWithCharArray:charBuf_->A_ withInt:0 withInt:len withBoolean:javaparsecompat];
}

+ (void)initialize {
  if (self == [RAREUTSDecimal class]) {
    RAREUTSDecimal_mathContext_ = [[JavaMathMathContext alloc] initWithInt:30 withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum HALF_UP]];
    RAREUTSDecimal_zeroDecimal_ = [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:0]) makeImmutable];
    RAREUTSDecimal_thirtySixHundredDecimal_ = [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:3600]) makeImmutable];
    RAREUTSDecimal_tenDecimal_ = [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:10]) makeImmutable];
    RAREUTSDecimal_bd8192_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:8192]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd65536_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:65536]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd60_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:60]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd512_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:512]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd4096_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:4096]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd4_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:4]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd365_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:365]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd3600_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:3600]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd32768_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:32768]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd256_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:256]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd24_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:24]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd2048_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:2048]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd2_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:2]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd128_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:128]) oneOver])) makeImmutable];
    RAREUTSDecimal_bd1024_ = [((RAREUTSDecimal *) nil_chk([((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:1024]) oneOver])) makeImmutable];
    RAREUTSDecimal_ptZeroOneDecimal_ = [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithNSString:@".01"]) makeImmutable];
    RAREUTSDecimal_perThreadNumber_ = [[RAREUTSDecimal_$1 alloc] init];
    RAREUTSDecimal_perThreadCA_ = [[RAREUTSDecimal_$2 alloc] init];
    RAREUTSDecimal_minLong_ = [JavaMathBigDecimal valueOfWithLong:JavaLangLong_MIN_VALUE + 100];
    RAREUTSDecimal_maxLong_ = [JavaMathBigDecimal valueOfWithLong:JavaLangLong_MAX_VALUE - 100];
    RAREUTSDecimal_oneHundredDecimal_ = [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:100]) makeImmutable];
    RAREUTSDecimal_oneDecimal_ = [((RAREUTSDecimal *) [[RAREUTSDecimal alloc] initWithInt:1]) makeImmutable];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(RAREUTSDecimal *)other {
  [super copyAllFieldsTo:other];
  other->charBuf_ = charBuf_;
  other->immutable_ = immutable_;
  other->theNumber_ = theNumber_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addWithJavaMathBigDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "addWithDouble:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "addWithInt:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "addWithLong:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "addWithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "addWithNSString:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "and__WithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "and__WithNSString:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "divideWithDouble:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "divideWithInt:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "divideWithLong:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "divideWithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "divideWithRAREUTSNumber:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "divideWithNSString:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "divideWithJavaMathBigDecimal:withJavaMathBigDecimal:", NULL, "LNSString", 0x9, NULL },
    { "divideIntegerWithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "divideIntegerWithRAREUTSNumber:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "divideIntegerWithJavaMathBigDecimal:withJavaMathBigDecimal:", NULL, "LJavaMathBigDecimal", 0x9, NULL },
    { "equalsWithDouble:", NULL, "Z", 0x1, NULL },
    { "equalsWithInt:", NULL, "Z", 0x1, NULL },
    { "equalsWithLong:", NULL, "Z", 0x1, NULL },
    { "equalsWithRAREUTSDecimal:", NULL, "Z", 0x1, NULL },
    { "fractionValueString", NULL, "LNSString", 0x1, NULL },
    { "getBigDecimal", NULL, "LJavaMathBigDecimal", 0x1, NULL },
    { "getSNumberWithRAREUTSNumber:", NULL, "Z", 0x1, NULL },
    { "gtWithDouble:", NULL, "Z", 0x1, NULL },
    { "gtWithInt:", NULL, "Z", 0x1, NULL },
    { "gtWithLong:", NULL, "Z", 0x1, NULL },
    { "gtWithRAREUTSDecimal:", NULL, "Z", 0x1, NULL },
    { "hexMantissaValueStringWithBoolean:", NULL, "LNSString", 0x1, NULL },
    { "isInteger", NULL, "Z", 0x1, NULL },
    { "isNegative", NULL, "Z", 0x1, NULL },
    { "isZero", NULL, "Z", 0x1, NULL },
    { "ltWithDouble:", NULL, "Z", 0x1, NULL },
    { "ltWithInt:", NULL, "Z", 0x1, NULL },
    { "ltWithLong:", NULL, "Z", 0x1, NULL },
    { "ltWithRAREUTSDecimal:", NULL, "Z", 0x1, NULL },
    { "makeImmutable", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "modWithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "modWithRAREUTSDecimal:withBoolean:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "modWithJavaMathBigDecimal:withJavaMathBigDecimal:withBoolean:", NULL, "LJavaMathBigDecimal", 0x9, NULL },
    { "moveDecimalPointWithInt:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "multiplyWithDouble:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "multiplyWithInt:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "multiplyWithLong:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "multiplyWithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "multiplyWithRAREUTSNumber:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "multiplyWithNSString:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "multiplyWithJavaMathBigDecimal:withJavaMathBigDecimal:", NULL, "LJavaMathBigDecimal", 0x9, NULL },
    { "negate", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "not__", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "oneOver", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "or__WithDouble:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "or__WithInt:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "or__WithLong:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "or__WithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "or__WithNSString:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "powWithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "powWithRAREUTSNumber:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "roundWithInt:withBoolean:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithJavaMathBigDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithJavaMathBigInteger:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithDouble:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithLong:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithRAREUTSNumber:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithNSString:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithNSString:withBoolean:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithCharArray:withInt:withInt:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithLong:withLong:withInt:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "setValueWithCharArray:withInt:withInt:withBoolean:", NULL, "LRAREUTSDecimal", 0x1, "JavaLangNumberFormatException" },
    { "setValueExWithCharArray:withInt:withInt:withBoolean:", NULL, "Z", 0x1, NULL },
    { "sqrtWithJavaMathBigDecimal:", NULL, "LJavaMathBigDecimal", 0x9, NULL },
    { "subtractWithJavaMathBigDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "subtractWithDouble:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "subtractWithInt:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "subtractWithLong:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "subtractWithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "subtractWithNSString:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "toBigDecimalWithRAREUTSNumber:", NULL, "LJavaMathBigDecimal", 0x9, NULL },
    { "toCharBufferWithRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "toFormattedStringWithNSString:withInt:", NULL, "LNSString", 0x1, NULL },
    { "toStringWithJavaMathBigDecimal:", NULL, "LNSString", 0x9, NULL },
    { "toStringWithRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "toStringWithRAREUTCharArray:withBoolean:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "toStringExWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "valueOfWithDouble:", NULL, "LRAREUTSDecimal", 0x9, NULL },
    { "valueOfWithLong:", NULL, "LRAREUTSDecimal", 0x9, NULL },
    { "valueOfWithRAREUTSNumber:", NULL, "LRAREUTSDecimal", 0x9, NULL },
    { "xor__WithInt:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "xor__WithLong:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "xor__WithRAREUTSDecimal:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "xor__WithNSString:", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "zero", NULL, "LRAREUTSDecimal", 0x1, NULL },
    { "isPowerOfTenWithLong:", NULL, "Z", 0x10, NULL },
    { "setValueExWithNSString:withBoolean:", NULL, "Z", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "divideByZero_", NULL, 0x18, "LNSString" },
    { "numberToLarge_", NULL, 0x18, "LNSString" },
    { "mathContext_", NULL, 0x18, "LJavaMathMathContext" },
    { "zeroDecimal_", NULL, 0x19, "LRAREUTSDecimal" },
    { "thirtySixHundredDecimal_", NULL, 0x19, "LRAREUTSDecimal" },
    { "tenDecimal_", NULL, 0x19, "LRAREUTSDecimal" },
    { "bd8192_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd65536_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd60_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd512_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd4096_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd4_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd365_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd3600_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd32768_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd256_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd24_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd2048_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd2_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd128_", NULL, 0x18, "LRAREUTSDecimal" },
    { "bd1024_", NULL, 0x18, "LRAREUTSDecimal" },
    { "ptZeroOneDecimal_", NULL, 0x19, "LRAREUTSDecimal" },
    { "perThreadNumber_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "perThreadCA_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "minLong_", NULL, 0x1a, "LJavaMathBigDecimal" },
    { "maxLong_", NULL, 0x1a, "LJavaMathBigDecimal" },
    { "oneHundredDecimal_", NULL, 0x19, "LRAREUTSDecimal" },
    { "oneDecimal_", NULL, 0x19, "LRAREUTSDecimal" },
    { "charBuf_", NULL, 0x0, "LRAREUTCharArray" },
    { "theNumber_", NULL, 0x4, "LJavaMathBigDecimal" },
    { "dot_", NULL, 0x1a, "I" },
    { "exponent_", NULL, 0x1a, "I" },
  };
  static J2ObjcClassInfo _RAREUTSDecimal = { "SDecimal", "com.appnativa.util", NULL, 0x1, 97, methods, 32, fields, 0, NULL};
  return &_RAREUTSDecimal;
}

@end
@implementation RAREUTSDecimal_$1

- (id)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTSNumber alloc] initWithInt:0];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LNSObject", 0x24, NULL },
  };
  static J2ObjcClassInfo _RAREUTSDecimal_$1 = { "$1", "com.appnativa.util", "SDecimal", 0x8000, 1, methods, 0, NULL, 0, NULL};
  return &_RAREUTSDecimal_$1;
}

@end
@implementation RAREUTSDecimal_$2

- (id)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharArray alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LNSObject", 0x24, NULL },
  };
  static J2ObjcClassInfo _RAREUTSDecimal_$2 = { "$2", "com.appnativa.util", "SDecimal", 0x8000, 1, methods, 0, NULL, 0, NULL};
  return &_RAREUTSDecimal_$2;
}

@end
