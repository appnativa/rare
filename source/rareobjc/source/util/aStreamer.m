//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/aStreamer.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSBooleanArray.h"
#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSLongArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/util/ByteArray.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/aStreamer.h"
#include "com/appnativa/util/iCharsetHelper.h"
#include "com/appnativa/util/iStreamable.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Long.h"
#include "java/lang/StrictMath.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"

@implementation RAREUTaStreamer

static IOSCharArray * RAREUTaStreamer_padding_;
static NSString * RAREUTaStreamer_lineSeparator_;
static NSString * RAREUTaStreamer_emptyString_ = @"";
static BOOL RAREUTaStreamer_is64BitLong_;

+ (long long int)LONG_16BIT_VALUE {
  return RAREUTaStreamer_LONG_16BIT_VALUE;
}

+ (long long int)LONG_24BIT_VALUE {
  return RAREUTaStreamer_LONG_24BIT_VALUE;
}

+ (long long int)LONG_32BIT_VALUE {
  return RAREUTaStreamer_LONG_32BIT_VALUE;
}

+ (long long int)LONG_40BIT_VALUE {
  return RAREUTaStreamer_LONG_40BIT_VALUE;
}

+ (long long int)LONG_48BIT_VALUE {
  return RAREUTaStreamer_LONG_48BIT_VALUE;
}

+ (long long int)LONG_56BIT_VALUE {
  return RAREUTaStreamer_LONG_56BIT_VALUE;
}

+ (long long int)LONG_8BIT_VALUE {
  return RAREUTaStreamer_LONG_8BIT_VALUE;
}

+ (IOSCharArray *)padding {
  return RAREUTaStreamer_padding_;
}

+ (NSString *)lineSeparator {
  return RAREUTaStreamer_lineSeparator_;
}

+ (NSString *)emptyString {
  return RAREUTaStreamer_emptyString_;
}

+ (BOOL)is64BitLong {
  return RAREUTaStreamer_is64BitLong_;
}

+ (int)decode2BLengthWithByteArray:(IOSByteArray *)A
                           withInt:(int)pos {
  int len = IOSByteArray_Get(nil_chk(A), pos++) & (int) 0xff;
  len <<= 8;
  len |= IOSByteArray_Get(A, pos++) & (int) 0xff;
  return (len >= (int) 0xffff) ? -1 : len;
}

+ (int)decode4BLengthWithByteArray:(IOSByteArray *)A
                           withInt:(int)pos {
  int len = IOSByteArray_Get(nil_chk(A), pos++) & (int) 0xff;
  len <<= 8;
  len |= IOSByteArray_Get(A, pos++) & (int) 0xff;
  len <<= 8;
  len |= IOSByteArray_Get(A, pos++) & (int) 0xff;
  len <<= 8;
  len |= IOSByteArray_Get(A, pos++) & (int) 0xff;
  return (len < 0) ? -1 : len;
}

+ (void)encode2BLengthWithInt:(int)val
                withByteArray:(IOSByteArray *)outArg
                      withInt:(int)pos {
  if (val < 0) {
    val = (int) 0xffff;
  }
  (*IOSByteArray_GetRef(nil_chk(outArg), pos++)) = (char) ((val >> 8) & (int) 0xff);
  (*IOSByteArray_GetRef(outArg, pos++)) = (char) (val & (int) 0xff);
}

+ (void)encode4BLengthWithInt:(int)val
                withByteArray:(IOSByteArray *)outArg
                      withInt:(int)pos {
  if (val < 0) {
    val = (int) 0xffffffff;
  }
  (*IOSByteArray_GetRef(nil_chk(outArg), pos++)) = (char) ((val >> 24) & (int) 0xff);
  (*IOSByteArray_GetRef(outArg, pos++)) = (char) ((val >> 16) & (int) 0xff);
  (*IOSByteArray_GetRef(outArg, pos++)) = (char) ((val >> 8) & (int) 0xff);
  (*IOSByteArray_GetRef(outArg, pos++)) = (char) (val & (int) 0xff);
}

+ (int)encodeVarLengthWithInt:(int)val
    withJavaLangStringBuilder:(JavaLangStringBuilder *)outArg {
  int l;
  if (val < 0) {
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithChar:(unichar) 32768];
    return 1;
  }
  if (val < 32768) {
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithChar:(unichar) val];
    return 1;
  }
  if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
    l = 2;
  }
  else {
    l = 1;
  }
  (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithChar:(unichar) (l | 32768)];
  if (l == 1) {
    (void) [outArg appendWithChar:(unichar) val];
  }
  else {
    (void) [outArg appendWithChar:(unichar) ((val >> 16) & (int) 0xffff)];
    (void) [outArg appendWithChar:(unichar) (val & (int) 0xffff)];
  }
  return l + 1;
}

+ (int)encodeVarLengthWithInt:(int)val
             withJavaIoWriter:(JavaIoWriter *)outArg {
  int l;
  if (val < 0) {
    (void) [((JavaIoWriter *) nil_chk(outArg)) appendWithChar:(unichar) 32768];
    return 1;
  }
  if (val < 32768) {
    (void) [((JavaIoWriter *) nil_chk(outArg)) appendWithChar:(unichar) val];
    return 1;
  }
  if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
    l = 2;
  }
  else {
    l = 1;
  }
  (void) [((JavaIoWriter *) nil_chk(outArg)) appendWithChar:(unichar) (l | 32768)];
  if (l == 1) {
    (void) [outArg appendWithChar:(unichar) val];
  }
  else {
    (void) [outArg appendWithChar:(unichar) ((val >> 16) & (int) 0xffff)];
    (void) [outArg appendWithChar:(unichar) (val & (int) 0xffff)];
  }
  return l + 1;
}

+ (int)getVarLengthWithInt:(int)val {
  int l;
  if (val >= ((long long) (((uint64_t) 1LL) << 24))) {
    l = 4;
  }
  else if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
    l = 3;
  }
  else if (val >= ((long long) (((uint64_t) 1LL) << 8))) {
    l = 2;
  }
  else {
    l = 1;
  }
  return l + 1;
}

+ (int)getVarLengthWithLong:(long long int)val {
  int l;
  if (RAREUTaStreamer_is64BitLong_) {
    if (val >= ((long long) (((uint64_t) 1LL) << 56))) {
      l = 8;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 48))) {
      l = 7;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 40))) {
      l = 6;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 32))) {
      l = 5;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 24))) {
      l = 4;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
      l = 3;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 8))) {
      l = 2;
    }
    else {
      l = 1;
    }
  }
  else {
    if (val >= ((long long) (((uint64_t) 1LL) << 24))) {
      l = 4;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
      l = 3;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 8))) {
      l = 2;
    }
    else {
      l = 1;
    }
  }
  return l + 1;
}

+ (int)encodeVarLengthWithInt:(int)val
                withByteArray:(IOSByteArray *)outArg
                      withInt:(int)pos {
  if (val < 0) {
    (*IOSByteArray_GetRef(nil_chk(outArg), pos)) = ((char) 128);
    return 1;
  }
  if (val < 128) {
    (*IOSByteArray_GetRef(nil_chk(outArg), pos)) = ((char) val);
    return 1;
  }
  int l;
  if (val >= ((long long) (((uint64_t) 1LL) << 24))) {
    l = 4;
  }
  else if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
    l = 3;
  }
  else if (val >= ((long long) (((uint64_t) 1LL) << 8))) {
    l = 2;
  }
  else {
    l = 1;
  }
  (*IOSByteArray_GetRef(nil_chk(outArg), pos++)) = (char) (128 | l);
  while (l > 0) {
    l--;
    (*IOSByteArray_GetRef(outArg, pos++)) = (char) ((val >> (8 * l)) & (int) 0xff);
  }
  return pos;
}

+ (int)encodeVarLengthWithInt:(int)val
                withCharArray:(IOSCharArray *)outArg
                      withInt:(int)pos {
  if (val < 0) {
    (*IOSCharArray_GetRef(nil_chk(outArg), pos)) = ((unichar) 128);
    return 1;
  }
  if (val < 128) {
    (*IOSCharArray_GetRef(nil_chk(outArg), pos)) = ((unichar) val);
    return 1;
  }
  int l;
  if (val >= ((long long) (((uint64_t) 1LL) << 24))) {
    l = 4;
  }
  else if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
    l = 3;
  }
  else if (val >= ((long long) (((uint64_t) 1LL) << 8))) {
    l = 2;
  }
  else {
    l = 1;
  }
  (*IOSCharArray_GetRef(nil_chk(outArg), pos++)) = (unichar) (128 | l);
  while (l > 0) {
    l--;
    (*IOSCharArray_GetRef(outArg, pos++)) = (unichar) ((val >> (8 * l)) & (int) 0xff);
  }
  return pos;
}

- (void)fromStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

+ (BOOL)fromStreamWithBoolean:(BOOL)val
        withJavaIoInputStream:(JavaIoInputStream *)inArg {
  return [RAREUTaStreamer readBooleanWithJavaIoInputStream:inArg];
}

+ (IOSBooleanArray *)fromStreamWithBooleanArray:(IOSBooleanArray *)a
                          withJavaIoInputStream:(JavaIoInputStream *)inArg {
  a = [RAREUTaStreamer readBooleanArrayWithJavaIoInputStream:inArg];
  return a;
}

+ (IOSByteArray *)fromStreamWithByteArray:(IOSByteArray *)a
                    withJavaIoInputStream:(JavaIoInputStream *)inArg {
  a = [RAREUTaStreamer readBytesWithJavaIoInputStream:inArg];
  return a;
}

+ (int)fromStreamWithInt:(int)val
   withJavaIoInputStream:(JavaIoInputStream *)inArg {
  return [RAREUTaStreamer readIntWithJavaIoInputStream:inArg];
}

+ (IOSIntArray *)fromStreamWithIntArray:(IOSIntArray *)a
                  withJavaIoInputStream:(JavaIoInputStream *)inArg {
  a = [RAREUTaStreamer readIntArrayWithJavaIoInputStream:inArg];
  return a;
}

+ (void)fromStreamWithRAREUTiStreamable:(id<RAREUTiStreamable>)what
                  withJavaIoInputStream:(JavaIoInputStream *)inArg {
  [((id<RAREUTiStreamable>) nil_chk(what)) fromStreamWithJavaIoInputStream:inArg];
}

+ (long long int)fromStreamWithLong:(long long int)val
              withJavaIoInputStream:(JavaIoInputStream *)inArg {
  return [RAREUTaStreamer readLongWithJavaIoInputStream:inArg];
}

+ (IOSLongArray *)fromStreamWithLongArray:(IOSLongArray *)a
                    withJavaIoInputStream:(JavaIoInputStream *)inArg {
  a = [RAREUTaStreamer readLongArrayWithJavaIoInputStream:inArg];
  return a;
}

+ (BOOL)fromStreamWithRAREUTSNumber:(RAREUTSNumber *)num
              withJavaIoInputStream:(JavaIoInputStream *)inArg {
  if (![RAREUTaStreamer readBooleanWithJavaIoInputStream:inArg]) {
    return NO;
  }
  long long int man = [RAREUTaStreamer readLongWithJavaIoInputStream:inArg];
  long long int frac = [RAREUTaStreamer readLongWithJavaIoInputStream:inArg];
  int dec = [RAREUTaStreamer readIntWithJavaIoInputStream:inArg];
  (void) [((RAREUTSNumber *) nil_chk(num)) setValueWithLong:man withLong:frac withInt:dec];
  return YES;
}

+ (NSString *)fromStreamWithNSString:(NSString *)val
               withJavaIoInputStream:(JavaIoInputStream *)inArg {
  return [RAREUTaStreamer readStringWithJavaIoInputStream:inArg];
}

+ (IOSObjectArray *)fromStreamWithNSStringArray:(IOSObjectArray *)a
                          withJavaIoInputStream:(JavaIoInputStream *)inArg {
  a = [RAREUTaStreamer readStringArrayWithJavaIoInputStream:inArg withRAREUTiCharsetHelper:nil];
  return a;
}

+ (int)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
                   withByteArray:(IOSByteArray *)use
                         withInt:(int)len {
  int pos = 0;
  if (len > 0) {
    int n;
    n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:use withInt:0 withInt:len];
    if (n == -1) {
      return 0;
    }
    len -= n;
    pos += n;
    while (len > 0) {
      n = [inArg readWithByteArray:use withInt:pos withInt:len];
      if (n == -1) {
        return pos;
      }
      len -= n;
      pos += n;
    }
  }
  else {
    if (len == -1) {
      return -1;
    }
  }
  return pos;
}

+ (int)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
             withRAREUTByteArray:(RAREUTByteArray *)use
                         withInt:(int)len {
  if (len > 0) {
    [((RAREUTByteArray *) nil_chk(use)) ensureCapacityWithInt:len];
    use->_length_ = len;
    int n;
    int pos = 0;
    n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:use->A_ withInt:0 withInt:use->_length_];
    if (n == -1) {
      return 0;
    }
    len -= n;
    while (len > 0) {
      pos += n;
      n = [inArg readWithByteArray:use->A_ withInt:pos withInt:len];
      if (n == -1) {
        return pos;
      }
      len -= n;
    }
  }
  else {
    if (len == -1) {
      return -1;
    }
    ((RAREUTByteArray *) nil_chk(use))->_length_ = 0;
  }
  return ((RAREUTByteArray *) nil_chk(use))->_length_;
}

+ (int)read2BBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withRAREUTByteArray:(RAREUTByteArray *)use {
  int len = [RAREUTaStreamer readWithJavaIoInputStream:inArg withRAREUTByteArray:use withInt:2];
  if (len != 2) {
    @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
  }
  len = [RAREUTaStreamer decode2BLengthWithByteArray:((RAREUTByteArray *) nil_chk(use))->A_ withInt:0];
  if (len < 1) {
    return len;
  }
  if (len > 0) {
    [use ensureCapacityWithInt:len];
    use->_length_ = len;
    int n;
    int pos = 0;
    n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:use->A_ withInt:pos withInt:len];
    if (n == -1) {
      return 0;
    }
    len -= n;
    while (len > 0) {
      pos += n;
      n = [inArg readWithByteArray:use->A_ withInt:pos withInt:len];
      if (n == -1) {
        return pos;
      }
      len -= n;
    }
  }
  else {
    if (len == -1) {
      return -1;
    }
    use->_length_ = 0;
  }
  return use->_length_;
}

+ (int)read4BBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withRAREUTByteArray:(RAREUTByteArray *)use {
  int len = [RAREUTaStreamer readWithJavaIoInputStream:inArg withRAREUTByteArray:use withInt:4];
  if (len != 4) {
    @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
  }
  len = [RAREUTaStreamer decode4BLengthWithByteArray:((RAREUTByteArray *) nil_chk(use))->A_ withInt:0];
  if (len < 1) {
    return len;
  }
  if (len > 0) {
    [use ensureCapacityWithInt:len];
    use->_length_ = len;
    int n;
    int pos = 0;
    n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:use->A_ withInt:pos withInt:len];
    if (n == -1) {
      return 0;
    }
    len -= n;
    while (len > 0) {
      pos += n;
      n = [inArg readWithByteArray:use->A_ withInt:pos withInt:len];
      if (n == -1) {
        return pos;
      }
      len -= n;
    }
  }
  else {
    if (len == -1) {
      return -1;
    }
    use->_length_ = 0;
  }
  return use->_length_;
}

+ (BOOL)readBooleanWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  int val = (int) ([((JavaIoInputStream *) nil_chk(inArg)) read] & (int) 0xff);
  return (val == 0) ? NO : YES;
}

+ (IOSBooleanArray *)readBooleanArrayWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  if (len == -1) {
    return nil;
  }
  IOSBooleanArray *a = [IOSBooleanArray arrayWithLength:len];
  for (int i = 0; i < len; i++) {
    (*IOSBooleanArray_GetRef(a, i)) = [RAREUTaStreamer readBooleanWithJavaIoInputStream:inArg];
  }
  return a;
}

+ (IOSByteArray *)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  if (len == -1) {
    return nil;
  }
  IOSByteArray *a = [IOSByteArray arrayWithLength:len];
  if (len > 0) {
    int n;
    int pos = 0;
    n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:a withInt:0 withInt:len];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] init];
    }
    len -= n;
    while (len > 0) {
      pos += n;
      n = [inArg readWithByteArray:a withInt:pos withInt:len];
      if (n == -1) {
        @throw [[JavaIoEOFException alloc] init];
      }
      len -= n;
    }
  }
  return a;
}

+ (int)readBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg
                  withRAREUTByteArray:(RAREUTByteArray *)use {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  if (len > 0) {
    [((RAREUTByteArray *) nil_chk(use)) ensureCapacityWithInt:len];
    use->_length_ = len;
    int n;
    int pos = 0;
    n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:use->A_ withInt:pos withInt:len];
    if (n == -1) {
      return 0;
    }
    len -= n;
    while (len > 0) {
      pos += n;
      n = [inArg readWithByteArray:use->A_ withInt:pos withInt:len];
      if (n == -1) {
        return pos;
      }
      len -= n;
    }
  }
  else {
    if (len == -1) {
      return -1;
    }
    ((RAREUTByteArray *) nil_chk(use))->_length_ = 0;
  }
  return ((RAREUTByteArray *) nil_chk(use))->_length_;
}

+ (int)readBytesExWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withRAREUTByteArray:(RAREUTByteArray *)use {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  if (len > 0) {
    int pos = ((RAREUTByteArray *) nil_chk(use))->_length_;
    [use ensureCapacityWithInt:use->_length_ + len];
    use->_length_ += len;
    int n;
    n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:use->A_ withInt:pos withInt:len];
    if (n == -1) {
      return 0;
    }
    len -= n;
    while (len > 0) {
      pos += n;
      n = [inArg readWithByteArray:use->A_ withInt:pos withInt:len];
      if (n == -1) {
        return pos;
      }
      len -= n;
    }
  }
  return len;
}

+ (int)readCharArrayWithRAREUTCharArray:(RAREUTCharArray *)outArg
                  withJavaIoInputStream:(JavaIoInputStream *)inArg
               withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  [((RAREUTCharArray *) nil_chk(outArg)) clear];
  if (len == -1) {
    return -1;
  }
  if (len == 0) {
    return 0;
  }
  IOSByteArray *b = [IOSByteArray arrayWithLength:len];
  int n;
  int pos = 0;
  n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:b withInt:0 withInt:(int) [b count]];
  if (n == -1) {
    return 0;
  }
  len -= n;
  while (len > 0) {
    pos += n;
    n = [inArg readWithByteArray:b withInt:pos withInt:len];
    if (n == -1) {
      return pos;
    }
    len -= n;
  }
  if (csh == nil) {
    (void) [outArg setWithByteArray:b withInt:0 withInt:len withRAREUTiCharsetHelper:nil];
  }
  else {
    outArg->_length_ = [csh getCharsWithByteArray:b withInt:0 withInt:(int) [b count] withRAREUTCharArray:outArg withInt:0];
  }
  return outArg->_length_;
}

+ (int)readIntWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  int l = [((JavaIoInputStream *) nil_chk(inArg)) read];
  if (l == -1) {
    @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
  }
  l &= (int) 0xff;
  BOOL neg = NO;
  if (l >= 128) {
    neg = YES;
    l -= 128;
  }
  if (l > 4) {
    @throw [[JavaIoIOException alloc] initWithNSString:@"bad numeric value"];
  }
  int num = 0;
  int n;
  for (int i = 0; i < l; i++) {
    num <<= 8;
    n = [inArg read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] init];
    }
    num |= (n & (int) 0xff);
  }
  return neg ? (num * -1) : num;
}

+ (int)readIntWithJavaIoReader:(JavaIoReader *)inArg {
  BOOL neg = NO;
  int val = 0;
  int n = [((JavaIoReader *) nil_chk(inArg)) read];
  if (n > 128) {
    neg = YES;
    n -= 128;
  }
  if (n > 2) {
    @throw [[JavaIoIOException alloc] initWithNSString:@"bad numeric value"];
  }
  if (n == 1) {
    n = [inArg read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val = n & (int) 0xffff;
  }
  else {
    n = [inArg read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val = n & (int) 0xffff;
    val = val << 16;
    n = [inArg read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val += n & (int) 0xffff;
  }
  if (neg) {
    val = -val;
  }
  return val;
}

+ (IOSIntArray *)readIntArrayWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  if (len == -1) {
    return nil;
  }
  IOSIntArray *a = [IOSIntArray arrayWithLength:len];
  for (int i = 0; i < len; i++) {
    (*IOSIntArray_GetRef(a, i)) = [RAREUTaStreamer readIntWithJavaIoInputStream:inArg];
  }
  return a;
}

+ (long long int)readLongWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  BOOL neg = NO;
  int l = [((JavaIoInputStream *) nil_chk(inArg)) read];
  if (l == -1) {
    @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
  }
  l &= (int) 0xff;
  if (l >= 128) {
    l -= 128;
    neg = YES;
  }
  if (l > 8) {
    @throw [[JavaIoIOException alloc] initWithNSString:@"bad numeric value"];
  }
  long long int num = 0;
  int n;
  for (int i = 0; i < l; i++) {
    num <<= 8;
    n = [inArg read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] init];
    }
    num |= (n & (int) 0xff);
  }
  return neg ? (num * -1) : num;
}

+ (IOSLongArray *)readLongArrayWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  if (len == -1) {
    return nil;
  }
  IOSLongArray *a = [IOSLongArray arrayWithLength:len];
  for (int i = 0; i < len; i++) {
    (*IOSLongArray_GetRef(a, i)) = [RAREUTaStreamer readLongWithJavaIoInputStream:inArg];
  }
  return a;
}

+ (RAREUTSNumber *)readSNumberWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  RAREUTSNumber *num = [[RAREUTSNumber alloc] init];
  if ([RAREUTaStreamer fromStreamWithRAREUTSNumber:num withJavaIoInputStream:inArg]) {
    return nil;
  }
  return num;
}

+ (NSString *)readStringWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return [RAREUTaStreamer readStringWithJavaIoInputStream:inArg withRAREUTiCharsetHelper:nil];
}

+ (NSString *)readStringWithJavaIoReader:(JavaIoReader *)inArg {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoReader:inArg];
  if (len == -1) {
    return nil;
  }
  if (len == 0) {
    return RAREUTaStreamer_emptyString_;
  }
  IOSCharArray *chars = [IOSCharArray arrayWithLength:len];
  int n;
  int pos = 0;
  n = [((JavaIoReader *) nil_chk(inArg)) readWithCharArray:chars withInt:0 withInt:(int) [chars count]];
  len -= n;
  while (len > 0) {
    pos += n;
    n = [inArg readWithCharArray:chars withInt:pos withInt:len];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] init];
    }
    len -= n;
  }
  return [NSString stringWithCharacters:chars];
}

+ (NSString *)readStringWithJavaIoInputStream:(JavaIoInputStream *)inArg
                     withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  if (len == -1) {
    return nil;
  }
  if (len == 0) {
    return RAREUTaStreamer_emptyString_;
  }
  IOSByteArray *b = [IOSByteArray arrayWithLength:len];
  int n;
  int pos = 0;
  n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:b withInt:0 withInt:(int) [b count]];
  len -= n;
  while (len > 0) {
    pos += n;
    n = [inArg readWithByteArray:b withInt:pos withInt:len];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] init];
    }
    len -= n;
  }
  return (csh == nil) ? [NSString stringWithBytes:b] : [csh getStringWithByteArray:b withInt:0 withInt:(int) [b count]];
}

+ (NSString *)readStringWithJavaIoInputStream:(JavaIoInputStream *)inArg
                          withRAREUTByteArray:(RAREUTByteArray *)ba
                     withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  if (len == -1) {
    return nil;
  }
  if (len == 0) {
    return RAREUTaStreamer_emptyString_;
  }
  [((RAREUTByteArray *) nil_chk(ba)) ensureCapacityWithInt:len];
  ba->_length_ = len;
  int n;
  int pos = 0;
  n = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:ba->A_ withInt:0 withInt:ba->_length_];
  len -= n;
  while (len > 0) {
    pos += n;
    n = [inArg readWithByteArray:ba->A_ withInt:pos withInt:len];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] init];
    }
    len -= n;
  }
  return (csh == nil) ? [ba description] : [ba toStringWithRAREUTiCharsetHelper:csh];
}

+ (IOSObjectArray *)readStringArrayWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  if (len == -1) {
    return nil;
  }
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[NSString class]]];
  for (int i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(a, i, [RAREUTaStreamer readStringWithJavaIoInputStream:inArg withRAREUTiCharsetHelper:csh]);
  }
  return a;
}

+ (int)readVarLengthWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  int len = [((JavaIoInputStream *) nil_chk(inArg)) read];
  if (len == -1) {
    @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
  }
  len &= (int) 0xff;
  if (len < 128) {
    return len;
  }
  if (len == 128) {
    return -1;
  }
  int l = (int) (len & (int) 0x7f);
  if (l > 4) {
    @throw [[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Improper length value encoding (%d)", l]];
  }
  len = 0;
  int n;
  for (int i = 0; i < l; i++) {
    len <<= 8;
    n = [inArg read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] init];
    }
    len |= (n & (int) 0xff);
  }
  return len;
}

+ (int)readVarLengthWithJavaIoReader:(JavaIoReader *)inArg {
  int val = 0;
  int n = [((JavaIoReader *) nil_chk(inArg)) read];
  if (n == -1) {
    @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
  }
  if (n < 32768) {
    return n;
  }
  if (n == 32768) {
    return -1;
  }
  n -= 32768;
  if (n > 2) {
    @throw [[JavaIoIOException alloc] initWithNSString:@"bad numeric value"];
  }
  if (n == 1) {
    n = [inArg read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val = n & (int) 0xffff;
  }
  else {
    n = [inArg read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val = n & (int) 0xffff;
    val = val << 16;
    n = [inArg read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val += n & (int) 0xffff;
  }
  return val;
}

+ (int)readVarLengthWithJavaIoInputStream:(JavaIoInputStream *)inArg
                      withRAREUTByteArray:(RAREUTByteArray *)ba {
  int len = [((JavaIoInputStream *) nil_chk(inArg)) read];
  if (len == -1) {
    @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
  }
  len &= (int) 0xff;
  if (len < 128) {
    return len;
  }
  if (len == 128) {
    return -1;
  }
  int l = (int) (len & (int) 0x7f);
  if (l > 4) {
    @throw [[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Improper length value encoding (%d)", l]];
  }
  len = 0;
  int n;
  while ((n = [inArg readWithByteArray:((RAREUTByteArray *) nil_chk(ba))->A_ withInt:0 withInt:l]) != -1) {
    len += n;
    if (len == l) {
      break;
    }
  }
  len = 0;
  if (len != l) {
    @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
  }
  for (int i = 0; i < l; i++) {
    len <<= 8;
    len |= (IOSByteArray_Get(nil_chk(ba->A_), i) & (int) 0xff);
  }
  return len;
}

- (void)toStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

+ (void)toStreamWithBoolean:(BOOL)val
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:val ? 1 : 0];
}

+ (void)toStreamWithBooleanArray:(IOSBooleanArray *)a
          withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (a == nil) {
    [RAREUTaStreamer writeVarLengthWithInt:-1 withJavaIoOutputStream:outArg];
    return;
  }
  [RAREUTaStreamer writeVarLengthWithInt:(int) [((IOSBooleanArray *) nil_chk(a)) count] withJavaIoOutputStream:outArg];
  for (int i = 0; i < (int) [a count]; i++) {
    [RAREUTaStreamer toStreamWithBoolean:IOSBooleanArray_Get(a, i) withJavaIoOutputStream:outArg];
  }
}

+ (void)toStreamWithByteArray:(IOSByteArray *)a
       withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (a == nil) {
    [RAREUTaStreamer writeVarLengthWithInt:-1 withJavaIoOutputStream:outArg];
    return;
  }
  [RAREUTaStreamer writeVarLengthWithInt:(int) [((IOSByteArray *) nil_chk(a)) count] withJavaIoOutputStream:outArg];
  if ((int) [a count] > 0) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:a];
  }
}

+ (void)toStreamWithInt:(int)val
 withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [RAREUTaStreamer writeIntWithInt:val withJavaIoOutputStream:outArg];
}

+ (void)toStreamWithIntArray:(IOSIntArray *)a
      withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (a == nil) {
    [RAREUTaStreamer writeVarLengthWithInt:-1 withJavaIoOutputStream:outArg];
    return;
  }
  [RAREUTaStreamer writeVarLengthWithInt:(int) [((IOSIntArray *) nil_chk(a)) count] withJavaIoOutputStream:outArg];
  for (int i = 0; i < (int) [a count]; i++) {
    [RAREUTaStreamer toStreamWithInt:IOSIntArray_Get(a, i) withJavaIoOutputStream:outArg];
  }
}

+ (void)toStreamWithRAREUTiStreamable:(id<RAREUTiStreamable>)what
               withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((id<RAREUTiStreamable>) nil_chk(what)) toStreamWithJavaIoOutputStream:outArg];
}

+ (void)toStreamWithLong:(long long int)val
  withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  BOOL neg = NO;
  if (val < 0) {
    neg = YES;
    val *= -1;
  }
  int l;
  if (RAREUTaStreamer_is64BitLong_) {
    if (val >= ((long long) (((uint64_t) 1LL) << 56))) {
      l = 8;
    }
    else if (val > RAREUTaStreamer_LONG_48BIT_VALUE) {
      l = 7;
    }
    else if (val > RAREUTaStreamer_LONG_40BIT_VALUE) {
      l = 6;
    }
    else if (val > RAREUTaStreamer_LONG_32BIT_VALUE) {
      l = 5;
    }
    else if (val > RAREUTaStreamer_LONG_24BIT_VALUE) {
      l = 4;
    }
    else if (val > RAREUTaStreamer_LONG_16BIT_VALUE) {
      l = 3;
    }
    else if (val > RAREUTaStreamer_LONG_8BIT_VALUE) {
      l = 2;
    }
    else {
      l = 1;
    }
  }
  else {
    if (val > RAREUTaStreamer_LONG_24BIT_VALUE) {
      l = 4;
    }
    else if (val > RAREUTaStreamer_LONG_16BIT_VALUE) {
      l = 3;
    }
    else if (val > RAREUTaStreamer_LONG_8BIT_VALUE) {
      l = 2;
    }
    else {
      l = 1;
    }
  }
  if (neg) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) (l + 128)];
  }
  else {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) (l)];
  }
  for (int i = l - 1; i >= 0; i--) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) ((val >> (8 * i)) & (int) 0xff)];
  }
}

+ (void)toStreamWithLongArray:(IOSLongArray *)a
       withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (a == nil) {
    [RAREUTaStreamer writeVarLengthWithInt:-1 withJavaIoOutputStream:outArg];
    return;
  }
  [RAREUTaStreamer writeVarLengthWithInt:(int) [((IOSLongArray *) nil_chk(a)) count] withJavaIoOutputStream:outArg];
  for (int i = 0; i < (int) [a count]; i++) {
    [RAREUTaStreamer toStreamWithLong:IOSLongArray_Get(a, i) withJavaIoOutputStream:outArg];
  }
}

+ (void)toStreamWithRAREUTSNumber:(RAREUTSNumber *)val
           withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (val == nil) {
    [RAREUTaStreamer toStreamWithBoolean:NO withJavaIoOutputStream:outArg];
    return;
  }
  [RAREUTaStreamer toStreamWithBoolean:YES withJavaIoOutputStream:outArg];
  [RAREUTaStreamer toStreamWithLong:[((RAREUTSNumber *) nil_chk(val)) longLongValue] withJavaIoOutputStream:outArg];
  [RAREUTaStreamer toStreamWithLong:[val fractionalPart] withJavaIoOutputStream:outArg];
  [RAREUTaStreamer toStreamWithInt:[val decimalPlaces] withJavaIoOutputStream:outArg];
}

+ (void)toStreamWithNSString:(NSString *)val
      withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (val == nil) {
    [RAREUTaStreamer writeVarLengthWithInt:-1 withJavaIoOutputStream:outArg];
    return;
  }
  IOSByteArray *b = [((NSString *) nil_chk(val)) getBytes];
  [RAREUTaStreamer writeVarLengthWithInt:(int) [((IOSByteArray *) nil_chk(b)) count] withJavaIoOutputStream:outArg];
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:b withInt:0 withInt:(int) [b count]];
}

+ (void)toStreamWithNSStringArray:(IOSObjectArray *)a
           withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [RAREUTaStreamer toStreamWithNSStringArray:a withJavaIoOutputStream:outArg withRAREUTiCharsetHelper:nil];
}

+ (void)toStreamWithNSString:(NSString *)val
      withJavaIoOutputStream:(JavaIoOutputStream *)outArg
    withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  if (val == nil) {
    [RAREUTaStreamer writeVarLengthWithInt:-1 withJavaIoOutputStream:outArg];
    return;
  }
  if ([((NSString *) nil_chk(val)) sequenceLength] == 0) {
    [RAREUTaStreamer writeVarLengthWithInt:0 withJavaIoOutputStream:outArg];
    return;
  }
  IOSByteArray *b = (csh == nil) ? [val getBytes] : [csh getBytesWithNSString:val];
  [RAREUTaStreamer writeVarLengthWithInt:(int) [b count] withJavaIoOutputStream:outArg];
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:b withInt:0 withInt:(int) [b count]];
}

+ (void)toStreamWithNSStringArray:(IOSObjectArray *)a
           withJavaIoOutputStream:(JavaIoOutputStream *)outArg
         withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  if (a == nil) {
    [RAREUTaStreamer writeVarLengthWithInt:-1 withJavaIoOutputStream:outArg];
    return;
  }
  [RAREUTaStreamer writeVarLengthWithInt:(int) [((IOSObjectArray *) nil_chk(a)) count] withJavaIoOutputStream:outArg];
  for (int i = 0; i < (int) [a count]; i++) {
    [RAREUTaStreamer writeStringWithNSString:IOSObjectArray_Get(a, i) withJavaIoOutputStream:outArg withRAREUTiCharsetHelper:csh];
  }
}

+ (NSString *)toStringExWithIntArray:(IOSIntArray *)val
                             withInt:(int)depth {
  if (val == nil) {
    return RAREUTaStreamer_emptyString_;
  }
  JavaLangStringBuilder *s = [[JavaLangStringBuilder alloc] init];
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(val)) count]; i++) {
    [RAREUTaStreamer writePaddingWithJavaLangStringBuilder:s withInt:depth];
    (void) [s appendWithInt:IOSIntArray_Get(val, i)];
    (void) [s appendWithNSString:RAREUTaStreamer_lineSeparator_];
  }
  return [s description];
}

+ (NSString *)toStringExWithLongArray:(IOSLongArray *)val
                              withInt:(int)depth {
  if (val == nil) {
    return RAREUTaStreamer_emptyString_;
  }
  JavaLangStringBuilder *s = [[JavaLangStringBuilder alloc] init];
  for (int i = 0; i < (int) [((IOSLongArray *) nil_chk(val)) count]; i++) {
    [RAREUTaStreamer writePaddingWithJavaLangStringBuilder:s withInt:depth];
    (void) [s appendWithLong:IOSLongArray_Get(val, i)];
    (void) [s appendWithNSString:RAREUTaStreamer_lineSeparator_];
  }
  return [s description];
}

+ (NSString *)toStringExWithNSStringArray:(IOSObjectArray *)val
                                  withInt:(int)depth {
  if (val == nil) {
    return RAREUTaStreamer_emptyString_;
  }
  JavaLangStringBuilder *s = [[JavaLangStringBuilder alloc] init];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(val)) count]; i++) {
    [RAREUTaStreamer writePaddingWithJavaLangStringBuilder:s withInt:depth];
    (void) [s appendWithNSString:IOSObjectArray_Get(val, i)];
    (void) [s appendWithNSString:RAREUTaStreamer_lineSeparator_];
  }
  return [s description];
}

+ (void)writeBytesWithRAREUTByteArray:(RAREUTByteArray *)outArg
                        withByteArray:(IOSByteArray *)b {
  if (b == nil) {
    [RAREUTaStreamer encodeVarLengthWithInt:-1 withByteArray:((RAREUTByteArray *) nil_chk(outArg))->A_ withInt:0];
    return;
  }
  int len = (int) [((IOSByteArray *) nil_chk(b)) count];
  [((RAREUTByteArray *) nil_chk(outArg)) ensureCapacityWithInt:len + 6];
  [RAREUTaStreamer encodeVarLengthWithInt:len withByteArray:outArg->A_ withInt:0];
  [outArg addWithByteArray:b withInt:0 withInt:len];
}

+ (int)writeBytesWithRAREUTByteArray:(RAREUTByteArray *)outArg
                       withByteArray:(IOSByteArray *)b
                             withInt:(int)pos
                             withInt:(int)len {
  if (b == nil) {
    [RAREUTaStreamer encodeVarLengthWithInt:-1 withByteArray:((RAREUTByteArray *) nil_chk(outArg))->A_ withInt:0];
    return 1;
  }
  [((RAREUTByteArray *) nil_chk(outArg)) ensureCapacityWithInt:len + 6];
  int n = [RAREUTaStreamer encodeVarLengthWithInt:len withByteArray:outArg->A_ withInt:0];
  [outArg addWithByteArray:b withInt:pos withInt:len];
  return n + len;
}

+ (int)writeBytesWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                          withByteArray:(IOSByteArray *)b
                                withInt:(int)pos
                                withInt:(int)len {
  if (b == nil) {
    [RAREUTaStreamer writeVarLengthWithInt:-1 withJavaIoOutputStream:outArg];
    return 1;
  }
  int n = [RAREUTaStreamer writeVarLengthWithInt:len withJavaIoOutputStream:outArg];
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:b withInt:pos withInt:len];
  return n + len;
}

+ (int)writeIntWithInt:(int)val
withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  BOOL neg = NO;
  if (val < 0) {
    neg = YES;
    val *= -1;
  }
  int l;
  if (val >= ((long long) (((uint64_t) 1LL) << 24))) {
    l = 4;
  }
  else if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
    l = 3;
  }
  else if (val >= ((long long) (((uint64_t) 1LL) << 8))) {
    l = 2;
  }
  else {
    l = 1;
  }
  if (neg) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) (l + 128)];
  }
  else {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) l];
  }
  for (int i = l - 1; i >= 0; i--) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) ((val >> (8 * i)) & (int) 0xff)];
  }
  return l + 1;
}

+ (int)writeIntWithInt:(int)val
      withJavaIoWriter:(JavaIoWriter *)outArg {
  BOOL neg = NO;
  if (val < 0) {
    neg = YES;
    val *= -1;
  }
  int l;
  if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
    l = 2;
  }
  else {
    l = 1;
  }
  if (neg) {
    (void) [((JavaIoWriter *) nil_chk(outArg)) appendWithChar:(unichar) (l + 128)];
  }
  else {
    (void) [((JavaIoWriter *) nil_chk(outArg)) appendWithChar:(unichar) l];
  }
  if (l == 1) {
    (void) [((JavaIoWriter *) nil_chk(outArg)) appendWithChar:(unichar) val];
  }
  else {
    (void) [((JavaIoWriter *) nil_chk(outArg)) appendWithChar:(unichar) ((val >> 16) & (int) 0xffff)];
    (void) [outArg appendWithChar:(unichar) (val & (int) 0xffff)];
  }
  return l + 1;
}

+ (int)writeLongWithLong:(long long int)val
  withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  BOOL neg = NO;
  if (val < 0) {
    neg = YES;
    val *= -1;
  }
  int l;
  if (RAREUTaStreamer_is64BitLong_) {
    if (val >= ((long long) (((uint64_t) 1LL) << 56))) {
      l = 8;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 48))) {
      l = 7;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 40))) {
      l = 6;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 32))) {
      l = 5;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 24))) {
      l = 4;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
      l = 3;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 8))) {
      l = 2;
    }
    else {
      l = 1;
    }
  }
  else {
    if (val >= ((long long) (((uint64_t) 1LL) << 24))) {
      l = 4;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
      l = 3;
    }
    else if (val >= ((long long) (((uint64_t) 1LL) << 8))) {
      l = 2;
    }
    else {
      l = 1;
    }
  }
  if (neg) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) (l + 128)];
  }
  else {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) (l)];
  }
  for (int i = l - 1; i >= 0; i--) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) ((val >> (8 * i)) & (int) 0xff)];
  }
  return l + 1;
}

+ (void)writePaddingWithRAREUTCharArray:(RAREUTCharArray *)outArg
                                withInt:(int)depth {
  if (depth == 0) {
    return;
  }
  int len = (int) [((IOSCharArray *) nil_chk(RAREUTaStreamer_padding_)) count];
  depth *= 2;
  while (depth > len) {
    (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithCharArray:RAREUTaStreamer_padding_ withInt:0 withInt:len];
    depth -= len;
  }
  if (depth > 0) {
    (void) [((RAREUTCharArray *) nil_chk(outArg)) appendWithCharArray:RAREUTaStreamer_padding_ withInt:0 withInt:depth];
  }
}

+ (void)writePaddingWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                      withInt:(int)depth {
  if (depth == 0) {
    return;
  }
  int len = (int) [((IOSCharArray *) nil_chk(RAREUTaStreamer_padding_)) count];
  depth *= 2;
  while (depth > len) {
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithCharArray:RAREUTaStreamer_padding_ withInt:0 withInt:len];
    depth -= len;
  }
  if (depth > 0) {
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithCharArray:RAREUTaStreamer_padding_ withInt:0 withInt:depth];
  }
}

+ (void)writePaddingWithJavaIoWriter:(JavaIoWriter *)outArg
                             withInt:(int)depth {
  if (depth == 0) {
    return;
  }
  int len = (int) [((IOSCharArray *) nil_chk(RAREUTaStreamer_padding_)) count];
  depth *= 2;
  while (depth > len) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:RAREUTaStreamer_padding_ withInt:0 withInt:len];
    depth -= len;
  }
  if (depth > 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:RAREUTaStreamer_padding_ withInt:0 withInt:depth];
  }
}

+ (void)writeStringWithNSString:(NSString *)val
         withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [RAREUTaStreamer toStreamWithNSString:val withJavaIoOutputStream:outArg];
}

+ (void)writeStringWithNSString:(NSString *)val
               withJavaIoWriter:(JavaIoWriter *)outArg {
  int len = (val == nil) ? -1 : (int) [val sequenceLength];
  [RAREUTaStreamer encodeVarLengthWithInt:len withJavaIoWriter:outArg];
  if (len > 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:val];
  }
}

+ (void)writeStringWithNSString:(NSString *)val
         withJavaIoOutputStream:(JavaIoOutputStream *)outArg
       withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  [RAREUTaStreamer toStreamWithNSString:val withJavaIoOutputStream:outArg withRAREUTiCharsetHelper:csh];
}

+ (void)writeStringWithCharArray:(IOSCharArray *)val
                         withInt:(int)pos
                         withInt:(int)len
                withJavaIoWriter:(JavaIoWriter *)outArg {
  [RAREUTaStreamer encodeVarLengthWithInt:len withJavaIoWriter:outArg];
  if (len > 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:val withInt:pos withInt:len];
  }
}

+ (int)writeVarLengthWithInt:(int)val
      withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (val < 0) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) 128];
    return 1;
  }
  if (val < 128) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) val];
    return 1;
  }
  int l;
  if (val >= ((long long) (((uint64_t) 1LL) << 24))) {
    l = 4;
  }
  else if (val >= ((long long) (((uint64_t) 1LL) << 16))) {
    l = 3;
  }
  else if (val >= ((long long) (((uint64_t) 1LL) << 8))) {
    l = 2;
  }
  else {
    l = 1;
  }
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(char) (128 | l)];
  for (int i = l - 1; i >= 0; i--) {
    [outArg writeWithInt:(char) ((val >> (8 * i)) & (int) 0xff)];
  }
  return l + 1;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [RAREUTaStreamer class]) {
    RAREUTaStreamer_padding_ = [RAREUTHelper getPadding];
    RAREUTaStreamer_lineSeparator_ = [RAREUTHelper lineSeparator];
    {
      int n = (int) ([JavaLangStrictMath logWithDouble:JavaLangLong_MAX_VALUE] / [JavaLangStrictMath logWithDouble:16]);
      if ((n % 2) > 0) {
        n++;
      }
      if (n > 16) {
        RAREUTaStreamer_is64BitLong_ = YES;
      }
      else {
        RAREUTaStreamer_is64BitLong_ = NO;
      }
    }
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "decode2BLengthWithByteArray:withInt:", NULL, "I", 0x19, NULL },
    { "decode4BLengthWithByteArray:withInt:", NULL, "I", 0x19, NULL },
    { "encodeVarLengthWithInt:withJavaIoWriter:", NULL, "I", 0x9, "JavaIoIOException" },
    { "fromStreamWithJavaIoInputStream:", NULL, "V", 0x1, "JavaIoIOException" },
    { "fromStreamWithBoolean:withJavaIoInputStream:", NULL, "Z", 0x9, "JavaIoIOException" },
    { "fromStreamWithBooleanArray:withJavaIoInputStream:", NULL, "LIOSBooleanArray", 0x9, "JavaIoIOException" },
    { "fromStreamWithByteArray:withJavaIoInputStream:", NULL, "LIOSByteArray", 0x9, "JavaIoIOException" },
    { "fromStreamWithInt:withJavaIoInputStream:", NULL, "I", 0x9, "JavaIoIOException" },
    { "fromStreamWithIntArray:withJavaIoInputStream:", NULL, "LIOSIntArray", 0x9, "JavaIoIOException" },
    { "fromStreamWithRAREUTiStreamable:withJavaIoInputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "fromStreamWithLong:withJavaIoInputStream:", NULL, "J", 0x9, "JavaIoIOException" },
    { "fromStreamWithLongArray:withJavaIoInputStream:", NULL, "LIOSLongArray", 0x9, "JavaIoIOException" },
    { "fromStreamWithRAREUTSNumber:withJavaIoInputStream:", NULL, "Z", 0x19, "JavaIoIOException" },
    { "fromStreamWithNSString:withJavaIoInputStream:", NULL, "LNSString", 0x9, "JavaIoIOException" },
    { "fromStreamWithNSStringArray:withJavaIoInputStream:", NULL, "LIOSObjectArray", 0x9, "JavaIoIOException" },
    { "readWithJavaIoInputStream:withByteArray:withInt:", NULL, "I", 0x9, "JavaIoIOException" },
    { "readWithJavaIoInputStream:withRAREUTByteArray:withInt:", NULL, "I", 0x9, "JavaIoIOException" },
    { "read2BBytesWithJavaIoInputStream:withRAREUTByteArray:", NULL, "I", 0x9, "JavaIoIOException" },
    { "read4BBytesWithJavaIoInputStream:withRAREUTByteArray:", NULL, "I", 0x9, "JavaIoIOException" },
    { "readBooleanWithJavaIoInputStream:", NULL, "Z", 0x9, "JavaIoIOException" },
    { "readBooleanArrayWithJavaIoInputStream:", NULL, "LIOSBooleanArray", 0x9, "JavaIoIOException" },
    { "readBytesWithJavaIoInputStream:", NULL, "LIOSByteArray", 0x9, "JavaIoIOException" },
    { "readBytesWithJavaIoInputStream:withRAREUTByteArray:", NULL, "I", 0x9, "JavaIoIOException" },
    { "readBytesExWithJavaIoInputStream:withRAREUTByteArray:", NULL, "I", 0x9, "JavaIoIOException" },
    { "readCharArrayWithRAREUTCharArray:withJavaIoInputStream:withRAREUTiCharsetHelper:", NULL, "I", 0x19, "JavaIoIOException" },
    { "readIntWithJavaIoInputStream:", NULL, "I", 0x19, "JavaIoIOException" },
    { "readIntWithJavaIoReader:", NULL, "I", 0x19, "JavaIoIOException" },
    { "readIntArrayWithJavaIoInputStream:", NULL, "LIOSIntArray", 0x9, "JavaIoIOException" },
    { "readLongWithJavaIoInputStream:", NULL, "J", 0x9, "JavaIoIOException" },
    { "readLongArrayWithJavaIoInputStream:", NULL, "LIOSLongArray", 0x9, "JavaIoIOException" },
    { "readSNumberWithJavaIoInputStream:", NULL, "LRAREUTSNumber", 0x19, "JavaIoIOException" },
    { "readStringWithJavaIoInputStream:", NULL, "LNSString", 0x19, "JavaIoIOException" },
    { "readStringWithJavaIoReader:", NULL, "LNSString", 0x19, "JavaIoIOException" },
    { "readStringWithJavaIoInputStream:withRAREUTiCharsetHelper:", NULL, "LNSString", 0x19, "JavaIoIOException" },
    { "readStringWithJavaIoInputStream:withRAREUTByteArray:withRAREUTiCharsetHelper:", NULL, "LNSString", 0x19, "JavaIoIOException" },
    { "readStringArrayWithJavaIoInputStream:withRAREUTiCharsetHelper:", NULL, "LIOSObjectArray", 0x9, "JavaIoIOException" },
    { "readVarLengthWithJavaIoInputStream:", NULL, "I", 0x19, "JavaIoIOException" },
    { "readVarLengthWithJavaIoReader:", NULL, "I", 0x19, "JavaIoIOException" },
    { "readVarLengthWithJavaIoInputStream:withRAREUTByteArray:", NULL, "I", 0x19, "JavaIoIOException" },
    { "toStreamWithJavaIoOutputStream:", NULL, "V", 0x1, "JavaIoIOException" },
    { "toStreamWithBoolean:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithBooleanArray:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithByteArray:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithInt:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithIntArray:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithRAREUTiStreamable:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithLong:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithLongArray:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithRAREUTSNumber:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithNSString:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithNSStringArray:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithNSString:withJavaIoOutputStream:withRAREUTiCharsetHelper:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStreamWithNSStringArray:withJavaIoOutputStream:withRAREUTiCharsetHelper:", NULL, "V", 0x9, "JavaIoIOException" },
    { "toStringExWithIntArray:withInt:", NULL, "LNSString", 0x9, NULL },
    { "toStringExWithLongArray:withInt:", NULL, "LNSString", 0x9, NULL },
    { "toStringExWithNSStringArray:withInt:", NULL, "LNSString", 0x9, NULL },
    { "writeBytesWithRAREUTByteArray:withByteArray:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeBytesWithJavaIoOutputStream:withByteArray:withInt:withInt:", NULL, "I", 0x9, "JavaIoIOException" },
    { "writeIntWithInt:withJavaIoOutputStream:", NULL, "I", 0x9, "JavaIoIOException" },
    { "writeIntWithInt:withJavaIoWriter:", NULL, "I", 0x9, "JavaIoIOException" },
    { "writeLongWithLong:withJavaIoOutputStream:", NULL, "I", 0x9, "JavaIoIOException" },
    { "writePaddingWithJavaIoWriter:withInt:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeStringWithNSString:withJavaIoOutputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeStringWithNSString:withJavaIoWriter:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeStringWithNSString:withJavaIoOutputStream:withRAREUTiCharsetHelper:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeStringWithCharArray:withInt:withInt:withJavaIoWriter:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeVarLengthWithInt:withJavaIoOutputStream:", NULL, "I", 0x9, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LONG_16BIT_VALUE_", NULL, 0x18, "J" },
    { "LONG_24BIT_VALUE_", NULL, 0x18, "J" },
    { "LONG_32BIT_VALUE_", NULL, 0x18, "J" },
    { "LONG_40BIT_VALUE_", NULL, 0x18, "J" },
    { "LONG_48BIT_VALUE_", NULL, 0x18, "J" },
    { "LONG_56BIT_VALUE_", NULL, 0x18, "J" },
    { "LONG_8BIT_VALUE_", NULL, 0x18, "J" },
    { "padding_", NULL, 0x18, "LIOSCharArray" },
    { "lineSeparator_", NULL, 0x18, "LNSString" },
    { "emptyString_", NULL, 0x18, "LNSString" },
    { "is64BitLong_", NULL, 0x18, "Z" },
  };
  static J2ObjcClassInfo _RAREUTaStreamer = { "aStreamer", "com.appnativa.util", NULL, 0x401, 67, methods, 11, fields, 0, NULL};
  return &_RAREUTaStreamer;
}

@end
