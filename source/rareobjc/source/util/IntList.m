//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/IntList.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "com/appnativa/util/IntList.h"
#include "com/appnativa/util/aStreamer.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/EmptyStackException.h"

@implementation RAREUTIntList

- (id)init {
  if (self = [super init]) {
    A_ = [IOSIntArray arrayWithLength:10];
  }
  return self;
}

- (id)initWithInt:(int)len {
  if (self = [super init]) {
    A_ = [IOSIntArray arrayWithLength:len];
  }
  return self;
}

- (id)initWithIntArray:(IOSIntArray *)values {
  if (self = [super init]) {
    A_ = values;
    _length_ = (int) [((IOSIntArray *) nil_chk(values)) count];
  }
  return self;
}

- (void)addWithInt:(int)e {
  if (_length_ == (int) [((IOSIntArray *) nil_chk(A_)) count]) {
    [self ensureCapacityWithInt:_length_ + 1];
  }
  (*IOSIntArray_GetRef(A_, _length_++)) = e;
}

- (void)addWithIntArray:(IOSIntArray *)e {
  [self addWithIntArray:e withInt:0 withInt:(int) [((IOSIntArray *) nil_chk(e)) count]];
}

- (void)addWithInt:(int)pos
           withInt:(int)e {
  if (pos > _length_) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@>%@", [NSString valueOfInt:pos], [NSString valueOfInt:_length_]]];
  }
  if (pos < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@<0", [NSString valueOfInt:pos]]];
  }
  if (_length_ == (int) [((IOSIntArray *) nil_chk(A_)) count]) {
    [self ensureCapacityWithInt:_length_ + 1];
  }
  if (pos == _length_) {
    (*IOSIntArray_GetRef(A_, _length_++)) = e;
    return;
  }
  [JavaLangSystem arraycopyWithId:A_ withInt:pos withId:A_ withInt:pos + 1 withInt:_length_ - pos];
  (*IOSIntArray_GetRef(A_, pos)) = e;
  _length_++;
}

- (void)addWithIntArray:(IOSIntArray *)e
                withInt:(int)pos
                withInt:(int)len {
  if (len == -1) {
    len = (int) [((IOSIntArray *) nil_chk(e)) count] - pos;
  }
  int nlen = len + _length_;
  if (nlen > (int) [((IOSIntArray *) nil_chk(A_)) count]) {
    [self ensureCapacityWithInt:nlen];
  }
  if (len == 1) {
    [self addWithInt:IOSIntArray_Get(nil_chk(e), pos)];
  }
  else {
    if (len > 20) {
      [JavaLangSystem arraycopyWithId:e withInt:pos withId:A_ withInt:_length_ withInt:len];
      _length_ = nlen;
    }
    else {
      len += pos;
      for (int i = pos; i < len; i++) {
        (*IOSIntArray_GetRef(A_, _length_++)) = IOSIntArray_Get(nil_chk(e), i);
      }
    }
  }
}

- (void)addWithInt:(int)index
      withIntArray:(IOSIntArray *)e
           withInt:(int)pos
           withInt:(int)len {
  if (index > _length_) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@>%@", [NSString valueOfInt:pos], [NSString valueOfInt:_length_]]];
  }
  if (index < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@<0", [NSString valueOfInt:pos]]];
  }
  if (len == -1) {
    len = (int) [((IOSIntArray *) nil_chk(e)) count] - pos;
  }
  int nlen = len + _length_;
  [self ensureCapacityWithInt:nlen];
  [JavaLangSystem arraycopyWithId:A_ withInt:index withId:A_ withInt:index + len withInt:_length_ - index];
  [JavaLangSystem arraycopyWithId:e withInt:pos withId:A_ withInt:index withInt:len];
  _length_ = nlen;
}

- (void)addAllWithRAREUTIntList:(RAREUTIntList *)e {
  [self addWithIntArray:((RAREUTIntList *) nil_chk(e))->A_ withInt:0 withInt:e->_length_];
}

- (void)clear {
  _length_ = 0;
}

- (id)clone {
  RAREUTIntList *v = [[RAREUTIntList alloc] initWithInt:_length_];
  [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:v->A_ withInt:0 withInt:_length_];
  return v;
}

- (BOOL)containsWithInt:(int)e {
  return [self indexOfWithInt:e] != -1;
}

- (void)copyIntoWithIntArray:(IOSIntArray *)a {
  [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:a withInt:0 withInt:_length_];
}

- (int)copyIntoWithIntArray:(IOSIntArray *)a
                    withInt:(int)pos
                    withInt:(int)len {
  if (len > _length_) {
    len = _length_;
  }
  [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:a withInt:pos withInt:len];
  return len;
}

- (RAREUTIntList *)delete__WithInt:(int)start
                           withInt:(int)end {
  [self checkRangeWithInt:start];
  if ((end == -1) || (end > _length_)) {
    end = _length_;
  }
  int len = end - start;
  if (len > 0) {
    [JavaLangSystem arraycopyWithId:A_ withInt:start + len withId:A_ withInt:start withInt:_length_ - end];
    _length_ -= len;
  }
  return self;
}

- (void)ensureCapacityWithInt:(int)len {
  int olen = (int) [((IOSIntArray *) nil_chk(A_)) count];
  if (len > olen) {
    IOSIntArray *a = A_;
    int newCapacity = (olen * 3) / 2 + 1;
    if (newCapacity < len) {
      newCapacity = len;
    }
    A_ = [IOSIntArray arrayWithLength:newCapacity];
    [JavaLangSystem arraycopyWithId:a withInt:0 withId:A_ withInt:0 withInt:_length_];
  }
}

- (int)getWithInt:(int)pos {
  [self checkRangeWithInt:pos];
  return IOSIntArray_Get(nil_chk(A_), pos);
}

- (int)gteIndexOfWithInt:(int)e {
  for (int i = 0; i < _length_; i++) {
    if (IOSIntArray_Get(nil_chk(A_), i) >= e) {
      return i;
    }
  }
  return -1;
}

- (int)indexOfWithInt:(int)e {
  int len = _length_;
  IOSIntArray *num = A_;
  for (int i = 0; i < len; i++) {
    if (IOSIntArray_Get(nil_chk(num), i) == e) {
      return i;
    }
  }
  return -1;
}

+ (int)indexOfWithIntArray:(IOSIntArray *)list
                   withInt:(int)e {
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(list)) count]; i++) {
    if (IOSIntArray_Get(list, i) == e) {
      return i;
    }
  }
  return -1;
}

- (int)indexOfGTWithInt:(int)e {
  for (int i = 0; i < _length_; i++) {
    if (IOSIntArray_Get(nil_chk(A_), i) > e) {
      return i;
    }
  }
  return -1;
}

- (int)indexOfGTEWithInt:(int)e {
  for (int i = 0; i < _length_; i++) {
    if (IOSIntArray_Get(nil_chk(A_), i) >= e) {
      return i;
    }
  }
  return -1;
}

- (int)indexOfLTWithInt:(int)e {
  for (int i = 0; i < _length_; i++) {
    if (IOSIntArray_Get(nil_chk(A_), i) < e) {
      return i;
    }
  }
  return -1;
}

- (int)indexOfLTEWithInt:(int)e {
  for (int i = 0; i < _length_; i++) {
    if (IOSIntArray_Get(nil_chk(A_), i) <= e) {
      return i;
    }
  }
  return -1;
}

- (BOOL)isEmpty {
  return _length_ == 0;
}

- (int)lastIndexOfWithInt:(int)e {
  for (int i = _length_ - 1; i >= 0; i--) {
    if (IOSIntArray_Get(nil_chk(A_), i) == e) {
      return i;
    }
  }
  return -1;
}

- (int)lastIndexOfGTWithInt:(int)e {
  for (int i = _length_ - 1; i >= 0; i--) {
    if (IOSIntArray_Get(nil_chk(A_), i) > e) {
      return i;
    }
  }
  return -1;
}

- (int)lastIndexOfGTEWithInt:(int)e {
  for (int i = _length_ - 1; i >= 0; i--) {
    if (IOSIntArray_Get(nil_chk(A_), i) >= e) {
      return i;
    }
  }
  return -1;
}

- (int)lastIndexOfLTWithInt:(int)e {
  for (int i = _length_ - 1; i >= 0; i--) {
    if (IOSIntArray_Get(nil_chk(A_), i) < e) {
      return i;
    }
  }
  return -1;
}

- (int)lastIndexOfLTEWithInt:(int)e {
  for (int i = _length_ - 1; i >= 0; i--) {
    if (IOSIntArray_Get(nil_chk(A_), i) <= e) {
      return i;
    }
  }
  return -1;
}

- (int)peek {
  if (_length_ == 0) {
    @throw [[JavaUtilEmptyStackException alloc] init];
  }
  return IOSIntArray_Get(nil_chk(A_), _length_ - 1);
}

- (int)pop {
  if (_length_ == 0) {
    @throw [[JavaUtilEmptyStackException alloc] init];
  }
  _length_--;
  int s = IOSIntArray_Get(nil_chk(A_), _length_);
  return s;
}

- (void)sort {
  if (_length_ > 0) {
    [JavaUtilArrays sortWithIntArray:A_ withInt:0 withInt:_length_];
  }
}

- (void)pushWithInt:(int)e {
  if (_length_ == (int) [((IOSIntArray *) nil_chk(A_)) count]) {
    [self ensureCapacityWithInt:_length_ + 1];
  }
  (*IOSIntArray_GetRef(A_, _length_++)) = e;
}

- (int)removeAtWithInt:(int)pos {
  [self checkRangeWithInt:pos];
  int ret = IOSIntArray_Get(nil_chk(A_), pos);
  if (pos != (_length_ - 1)) {
    [JavaLangSystem arraycopyWithId:A_ withInt:pos + 1 withId:A_ withInt:pos withInt:_length_ - (pos + 1)];
  }
  _length_--;
  return ret;
}

- (void)removeValueWithInt:(int)num {
  int i = [self indexOfWithInt:num];
  if (i != -1) {
    [self removeAtWithInt:i];
  }
}

- (void)removeValuesWithIntArray:(IOSIntArray *)num {
  if (num == nil) {
    return;
  }
  int len = (int) [((IOSIntArray *) nil_chk(num)) count];
  for (int i = 0; i < len; i++) {
    int n = [self indexOfWithInt:IOSIntArray_Get(num, i)];
    if (n != -1) {
      [self removeAtWithInt:n];
    }
  }
}

- (void)removeValuesWithRAREUTIntList:(RAREUTIntList *)list {
  int len = (list == nil) ? 0 : list->_length_;
  if (len == 0) {
    return;
  }
  IOSIntArray *num = ((RAREUTIntList *) nil_chk(list))->A_;
  for (int i = 0; i < len; i++) {
    int n = [self indexOfWithInt:IOSIntArray_Get(nil_chk(num), i)];
    if (n != -1) {
      [self removeAtWithInt:n];
    }
  }
}

- (int)setWithInt:(int)pos
          withInt:(int)e {
  [self checkRangeWithInt:pos];
  int o = IOSIntArray_Get(nil_chk(A_), pos);
  (*IOSIntArray_GetRef(A_, pos)) = e;
  return o;
}

- (void)setLengthWithInt:(int)newLength {
  if (newLength > (int) [((IOSIntArray *) nil_chk(A_)) count]) {
    [self ensureCapacityWithInt:newLength];
  }
  _length_ = newLength;
}

- (int)size {
  return _length_;
}

- (IOSIntArray *)toArray {
  if ((int) [((IOSIntArray *) nil_chk(A_)) count] == _length_) {
    return A_;
  }
  IOSIntArray *b = [IOSIntArray arrayWithLength:_length_];
  if (_length_ > 20) {
    [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:b withInt:0 withInt:_length_];
  }
  else {
    for (int i = 0; i < _length_; i++) {
      (*IOSIntArray_GetRef(b, i)) = IOSIntArray_Get(A_, i);
    }
  }
  return b;
}

- (NSString *)description {
  return [self toStringExWithInt:0];
}

- (NSString *)toStringExWithInt:(int)depth {
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  for (int i = 0; i < _length_; i++) {
    [RAREUTaStreamer writePaddingWithJavaLangStringBuilder:sb withInt:depth];
    (void) [sb appendWithInt:IOSIntArray_Get(nil_chk(A_), i)];
    (void) [sb appendWithNSString:@"\n"];
  }
  return [sb description];
}

- (void)trimToSize {
  A_ = [self toArray];
}

- (void)checkRangeWithInt:(int)pos {
  if (pos >= _length_) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@>=%@", [NSString valueOfInt:pos], [NSString valueOfInt:_length_]]];
  }
  if (pos < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@<0", [NSString valueOfInt:pos]]];
  }
}

- (void)copyAllFieldsTo:(RAREUTIntList *)other {
  [super copyAllFieldsTo:other];
  other->A_ = A_;
  other->_length_ = _length_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "containsWithInt:", NULL, "Z", 0x1, NULL },
    { "delete__WithInt:withInt:", NULL, "LRAREUTIntList", 0x1, NULL },
    { "getWithInt:", NULL, "I", 0x1, "JavaLangIndexOutOfBoundsException" },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "removeValuesWithIntArray:", NULL, "V", 0x81, NULL },
    { "toArray", NULL, "LIOSIntArray", 0x1, NULL },
    { "toStringExWithInt:", NULL, "LNSString", 0x1, NULL },
    { "checkRangeWithInt:", NULL, "V", 0x0, "JavaLangIndexOutOfBoundsException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x1, "LIOSIntArray" },
    { "_length_", NULL, 0x1, "I" },
  };
  static J2ObjcClassInfo _RAREUTIntList = { "IntList", "com.appnativa.util", NULL, 0x11, 9, methods, 2, fields, 0, NULL};
  return &_RAREUTIntList;
}

@end
