//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/ByteArray.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "com/appnativa/util/ByteArray.h"
#include "com/appnativa/util/ByteArrayHolder.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/ISO88591Helper.h"
#include "com/appnativa/util/iCharsetHelper.h"
#include "java/io/IOException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/InternalError.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"

@implementation RAREUTByteArray

- (id)init {
  return [self initRAREUTByteArrayWithInt:16];
}

- (id)initWithByteArray:(IOSByteArray *)a {
  if (self = [super init]) {
    A_ = a;
    _length_ = (int) [((IOSByteArray *) nil_chk(a)) count];
  }
  return self;
}

- (id)initRAREUTByteArrayWithInt:(int)len {
  if (self = [super init]) {
    A_ = [IOSByteArray arrayWithLength:len];
  }
  return self;
}

- (id)initWithInt:(int)len {
  return [self initRAREUTByteArrayWithInt:len];
}

- (void)addWithByte:(char)e {
  if (_length_ == (int) [((IOSByteArray *) nil_chk(A_)) count]) {
    [self ensureCapacityWithInt:_length_ + 1];
  }
  (*IOSByteArray_GetRef(A_, _length_++)) = e;
}

- (void)addWithByteArray:(IOSByteArray *)e {
  [self addWithByteArray:e withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(e)) count]];
}

- (void)addWithRAREUTByteArray:(RAREUTByteArray *)e {
  [self addWithByteArray:((RAREUTByteArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_];
}

- (void)addWithRAREUTByteArrayHolder:(RAREUTByteArrayHolder *)e {
  [self addWithByteArray:((RAREUTByteArrayHolder *) nil_chk(e))->bytes_ withInt:e->position_ withInt:e->length_];
}

- (RAREUTByteArray *)addWithNSString:(NSString *)e {
  if (charsetHelper_ == nil) {
    [self addWithByteArray:[((NSString *) nil_chk(e)) getBytes]];
  }
  else {
    [self addWithByteArray:[charsetHelper_ getBytesWithNSString:e]];
  }
  return self;
}

- (void)addWithInt:(int)pos
          withByte:(char)e {
  if (pos > _length_) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%d>%d", pos, _length_]];
  }
  if (pos < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%d<0", pos]];
  }
  if (_length_ == (int) [((IOSByteArray *) nil_chk(A_)) count]) {
    [self ensureCapacityWithInt:_length_ + 1];
  }
  if (pos == _length_) {
    (*IOSByteArray_GetRef(A_, _length_++)) = e;
    return;
  }
  [JavaLangSystem arraycopyWithId:A_ withInt:pos withId:A_ withInt:pos + 1 withInt:_length_ - pos];
  (*IOSByteArray_GetRef(A_, pos)) = e;
  _length_++;
}

- (void)addWithByteArray:(IOSByteArray *)e
                 withInt:(int)pos
                 withInt:(int)len {
  if (len == 0) {
    return;
  }
  if (len == -1) {
    len = (int) [((IOSByteArray *) nil_chk(e)) count] - pos;
  }
  int nlen = len + _length_;
  if (nlen > (int) [((IOSByteArray *) nil_chk(A_)) count]) {
    [self ensureCapacityWithInt:nlen];
  }
  if (len == 1) {
    [self addWithByte:IOSByteArray_Get(nil_chk(e), pos)];
  }
  else {
    [JavaLangSystem arraycopyWithId:e withInt:pos withId:A_ withInt:_length_ withInt:len];
    _length_ = nlen;
  }
}

- (void)addAllWithRAREUTByteArray:(RAREUTByteArray *)e {
  [self addWithByteArray:((RAREUTByteArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_];
}

- (int)available {
  return _length_ - thePos_;
}

- (int)capacity {
  return (int) [((IOSByteArray *) nil_chk(A_)) count];
}

- (void)clear {
  _length_ = 0;
  thePos_ = 0;
  theMark_ = 0;
  (*IOSByteArray_GetRef(nil_chk(A_), 0)) = 0;
}

- (id)clone {
  @try {
    RAREUTByteArray *v = (RAREUTByteArray *) check_class_cast([super clone], [RAREUTByteArray class]);
    ((RAREUTByteArray *) nil_chk(v))->A_ = [IOSByteArray arrayWithLength:(int) [((IOSByteArray *) nil_chk(A_)) count]];
    [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:v->A_ withInt:0 withInt:(int) [A_ count]];
    return v;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[JavaLangInternalError alloc] init];
  }
}

- (void)close {
  thePos_ = _length_;
}

- (int)compareToWithRAREUTByteArray:(RAREUTByteArray *)array {
  return (self == array) ? 0 : [RAREUTHelper compareToWithByteArray:A_ withInt:0 withInt:_length_ withByteArray:((RAREUTByteArray *) nil_chk(array))->A_ withInt:0 withInt:array->_length_];
}

- (int)compareToWithId:(id)o {
  return [self compareToWithRAREUTByteArray:(RAREUTByteArray *) check_class_cast(o, [RAREUTByteArray class])];
}

- (BOOL)containsWithByte:(char)e {
  return [self indexOfWithByte:e] != -1;
}

- (void)copyIntoWithByteArray:(IOSByteArray *)a {
  [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:a withInt:0 withInt:_length_];
}

- (int)copyIntoWithByteArray:(IOSByteArray *)a
                     withInt:(int)pos
                     withInt:(int)len {
  if (len > _length_) {
    len = _length_;
  }
  [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:a withInt:pos withInt:len];
  return len;
}

- (void)ensureCapacityWithInt:(int)len {
  int olen = (int) [((IOSByteArray *) nil_chk(A_)) count];
  if (len > olen) {
    IOSByteArray *a = A_;
    int newCapacity = (olen * 3) / 2 + 1;
    if (newCapacity < len) {
      newCapacity = len;
    }
    A_ = [IOSByteArray arrayWithLength:newCapacity];
    [JavaLangSystem arraycopyWithId:a withInt:0 withId:A_ withInt:0 withInt:olen];
  }
}

- (BOOL)equalsWithRAREUTByteArray:(RAREUTByteArray *)array {
  return (self == array) ? YES : ((array != nil) && (array->_length_ == _length_) && [RAREUTHelper regionMatchesWithByteArray:A_ withInt:0 withByteArray:array->A_ withInt:0 withInt:_length_]);
}

- (BOOL)isEqual:(id)a {
  if ([a isKindOfClass:[RAREUTByteArray class]]) {
    return [self equalsWithRAREUTByteArray:(RAREUTByteArray *) check_class_cast(a, [RAREUTByteArray class])];
  }
  return NO;
}

- (char)getWithInt:(int)pos {
  [self checkRangeWithInt:pos];
  return IOSByteArray_Get(nil_chk(A_), pos);
}

- (IOSCharArray *)getChars {
  return [((RAREUTCharArray *) nil_chk([self getCharsWithRAREUTCharArray:[[RAREUTCharArray alloc] init]])) toCharArray];
}

- (RAREUTCharArray *)getCharsWithRAREUTCharArray:(RAREUTCharArray *)outArg {
  if (charsetHelper_ != nil) {
    ((RAREUTCharArray *) nil_chk(outArg))->_length_ += [charsetHelper_ getCharsWithByteArray:A_ withInt:0 withInt:_length_ withRAREUTCharArray:outArg withInt:outArg->_length_];
  }
  else {
    ((RAREUTCharArray *) nil_chk(outArg))->_length_ += [((RAREUTISO88591Helper *) nil_chk([RAREUTISO88591Helper getInstance])) getCharsWithByteArray:A_ withInt:0 withInt:_length_ withRAREUTCharArray:outArg withInt:outArg->_length_];
  }
  return outArg;
}

- (IOSCharArray *)getCharsWithRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  return [((RAREUTCharArray *) nil_chk([self getCharsWithRAREUTCharArray:[[RAREUTCharArray alloc] init] withRAREUTiCharsetHelper:csh])) toCharArray];
}

- (RAREUTCharArray *)getCharsWithRAREUTCharArray:(RAREUTCharArray *)outArg
                        withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  ((RAREUTCharArray *) nil_chk(outArg))->_length_ += [((id<RAREUTiCharsetHelper>) nil_chk(csh)) getCharsWithByteArray:A_ withInt:0 withInt:_length_ withRAREUTCharArray:outArg withInt:outArg->_length_];
  return outArg;
}

- (NSUInteger)hash {
  int h = 0;
  int len = _length_;
  int i = 0;
  IOSByteArray *a = A_;
  while (i < len) {
    h = (31 * h) + IOSByteArray_Get(nil_chk(a), i++);
  }
  return h;
}

- (int)indexOfWithByte:(char)b {
  for (int i = 0; i < _length_; i++) {
    if (IOSByteArray_Get(nil_chk(A_), i) == b) {
      return i;
    }
  }
  return -1;
}

- (BOOL)isEmpty {
  return _length_ == 0;
}

- (int)lastIndexOfWithByte:(char)b {
  for (int i = _length_ - 1; i >= 0; i--) {
    if (IOSByteArray_Get(nil_chk(A_), i) == b) {
      return i;
    }
  }
  return -1;
}

- (void)markWithInt:(int)readAheadLimit {
  theMark_ = thePos_;
}

- (BOOL)markSupported {
  return YES;
}

- (int)peek {
  return (thePos_ < _length_) ? (IOSByteArray_Get(nil_chk(A_), thePos_) & (int) 0xff) : (-1);
}

- (int)position {
  return thePos_;
}

- (void)pushWithByte:(char)e {
  if (_length_ == (int) [((IOSByteArray *) nil_chk(A_)) count]) {
    [self ensureCapacityWithInt:_length_ + 1];
  }
  (*IOSByteArray_GetRef(A_, _length_++)) = e;
}

- (int)read {
  return (thePos_ < _length_) ? (IOSByteArray_Get(nil_chk(A_), thePos_++) & (int) 0xff) : (-1);
}

- (IOSByteArray *)readWithInt:(int)len {
  if (len > (_length_ - thePos_)) {
    len = _length_ - thePos_;
  }
  if (len <= 0) {
    return [IOSByteArray arrayWithLength:0];
  }
  if ((int) [((IOSByteArray *) nil_chk(A_)) count] == len) {
    return A_;
  }
  IOSByteArray *b = [IOSByteArray arrayWithLength:len];
  [JavaLangSystem arraycopyWithId:A_ withInt:thePos_ withId:b withInt:0 withInt:len];
  return b;
}

- (int)readWithByteArray:(IOSByteArray *)b
                 withInt:(int)off
                 withInt:(int)len {
  if (b == nil) {
    @throw [[JavaLangNullPointerException alloc] init];
  }
  else if ((off < 0) || (off > (int) [b count]) || (len < 0) || ((off + len) > (int) [b count]) || ((off + len) < 0)) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] init];
  }
  if (thePos_ >= _length_) {
    return -1;
  }
  if ((thePos_ + len) > _length_) {
    len = _length_ - thePos_;
  }
  if (len <= 0) {
    return 0;
  }
  [JavaLangSystem arraycopyWithId:A_ withInt:thePos_ withId:b withInt:off withInt:len];
  thePos_ += len;
  return len;
}

- (void)removeWithByte:(char)obj {
  int i = [self indexOfWithByte:obj];
  if (i != -1) {
    [self removeWithInt:i];
  }
}

- (char)removeWithInt:(int)pos {
  [self checkRangeWithInt:pos];
  if (pos == (_length_ - 1)) {
    _length_--;
    return IOSByteArray_Get(nil_chk(A_), pos);
  }
  else {
    char s = IOSByteArray_Get(nil_chk(A_), pos);
    _length_--;
    [JavaLangSystem arraycopyWithId:A_ withInt:pos + 1 withId:A_ withInt:pos withInt:_length_ - pos];
    return s;
  }
}

- (void)removeWithInt:(int)pos
              withInt:(int)len {
  if (len < 1) {
    return;
  }
  [self checkRangeWithInt:pos];
  if ((pos + len) == _length_) {
    _length_ = 0;
    return;
  }
  if ((pos + len) >= _length_) {
    _length_ = pos;
  }
  else {
    [JavaLangSystem arraycopyWithId:A_ withInt:pos + len withId:A_ withInt:pos withInt:_length_ - (pos + len)];
    _length_ -= len;
  }
}

- (void)reset {
  thePos_ = theMark_;
}

- (RAREUTByteArray *)setWithByte:(char)e {
  _length_ = 1;
  (*IOSByteArray_GetRef(nil_chk(A_), 0)) = e;
  theMark_ = 0;
  thePos_ = 0;
  return self;
}

- (RAREUTByteArray *)setWithByteArray:(IOSByteArray *)e {
  return [self setWithByteArray:e withInt:0 withInt:(e == nil) ? 0 : (int) [e count]];
}

- (RAREUTByteArray *)setWithRAREUTByteArray:(RAREUTByteArray *)e {
  return [self setWithByteArray:((RAREUTByteArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_];
}

- (RAREUTByteArray *)setWithRAREUTByteArrayHolder:(RAREUTByteArrayHolder *)e {
  return [self setWithByteArray:((RAREUTByteArrayHolder *) nil_chk(e))->bytes_ withInt:e->position_ withInt:e->length_];
}

- (RAREUTByteArray *)setWithRAREUTCharArray:(RAREUTCharArray *)e {
  theMark_ = 0;
  thePos_ = 0;
  _length_ = 0;
  if (charsetHelper_ != nil) {
    _length_ = [charsetHelper_ getBytesWithCharArray:((RAREUTCharArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_ withRAREUTByteArray:self withInt:0];
  }
  else {
    _length_ = [((RAREUTISO88591Helper *) nil_chk([RAREUTISO88591Helper getInstance])) getBytesWithCharArray:((RAREUTCharArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_ withRAREUTByteArray:self withInt:0];
  }
  return self;
}

- (RAREUTByteArray *)setWithNSString:(NSString *)e {
  theMark_ = 0;
  thePos_ = 0;
  _length_ = 0;
  if ((e != nil) && ([e sequenceLength] > 0)) {
    if (charsetHelper_ == nil) {
      [self addWithByteArray:[e getBytes]];
    }
    else {
      [self addWithByteArray:[charsetHelper_ getBytesWithNSString:e]];
    }
  }
  return self;
}

- (RAREUTByteArray *)setWithRAREUTCharArray:(RAREUTCharArray *)e
                   withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  theMark_ = 0;
  thePos_ = 0;
  _length_ = [((id<RAREUTiCharsetHelper>) nil_chk(csh)) getBytesWithCharArray:((RAREUTCharArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_ withRAREUTByteArray:self withInt:0];
  return self;
}

- (char)setWithInt:(int)pos
          withByte:(char)e {
  [self checkRangeWithInt:pos];
  char o = IOSByteArray_Get(nil_chk(A_), pos);
  (*IOSByteArray_GetRef(A_, pos)) = e;
  return o;
}

- (RAREUTByteArray *)setWithNSString:(NSString *)e
            withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  theMark_ = 0;
  thePos_ = 0;
  _length_ = 0;
  if ((e != nil) && ([e sequenceLength] > 0)) {
    [self addWithByteArray:[((id<RAREUTiCharsetHelper>) nil_chk(csh)) getBytesWithNSString:e]];
  }
  return self;
}

- (RAREUTByteArray *)setWithByteArray:(IOSByteArray *)e
                              withInt:(int)pos
                              withInt:(int)len {
  if (len > 0) {
    len = (len == -1) ? ((int) [((IOSByteArray *) nil_chk(e)) count] - pos) : len;
    [self ensureCapacityWithInt:len];
    [JavaLangSystem arraycopyWithId:e withInt:pos withId:A_ withInt:0 withInt:len];
    _length_ = len;
  }
  else {
    _length_ = 0;
  }
  theMark_ = 0;
  thePos_ = 0;
  return self;
}

- (RAREUTByteArray *)setWithCharArray:(IOSCharArray *)e
                              withInt:(int)pos
                              withInt:(int)len {
  theMark_ = 0;
  thePos_ = 0;
  if (charsetHelper_ != nil) {
    _length_ = [charsetHelper_ getBytesWithCharArray:e withInt:pos withInt:len withRAREUTByteArray:self withInt:0];
  }
  else {
    _length_ = [((RAREUTISO88591Helper *) nil_chk([RAREUTISO88591Helper getInstance])) getBytesWithCharArray:e withInt:pos withInt:len withRAREUTByteArray:self withInt:0];
  }
  return self;
}

- (RAREUTByteArray *)setWithCharArray:(IOSCharArray *)e
                              withInt:(int)pos
                              withInt:(int)len
             withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  theMark_ = 0;
  thePos_ = 0;
  if (csh != nil) {
    _length_ = [csh getBytesWithCharArray:e withInt:pos withInt:len withRAREUTByteArray:self withInt:0];
  }
  else {
    _length_ = [((RAREUTISO88591Helper *) nil_chk([RAREUTISO88591Helper getInstance])) getBytesWithCharArray:e withInt:pos withInt:len withRAREUTByteArray:self withInt:0];
  }
  return self;
}

- (void)setCharsetHelperWithRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  charsetHelper_ = csh;
}

- (IOSByteArray *)setExWithByteArray:(IOSByteArray *)e
                             withInt:(int)len {
  IOSByteArray *oa = A_;
  A_ = e;
  _length_ = (len == -1) ? ((int) [((IOSByteArray *) nil_chk(e)) count] - thePos_) : len;
  theMark_ = 0;
  thePos_ = 0;
  return oa;
}

- (int)size {
  return _length_;
}

- (long long int)skipWithLong:(long long int)n {
  if ((thePos_ + n) > _length_) {
    n = _length_ - thePos_;
  }
  if (n < 0) {
    return 0;
  }
  thePos_ += n;
  return n;
}

- (BOOL)startsWithWithRAREUTByteArray:(RAREUTByteArray *)ba {
  if (_length_ < ((RAREUTByteArray *) nil_chk(ba))->_length_) {
    return NO;
  }
  return [RAREUTHelper regionMatchesWithByteArray:A_ withInt:0 withByteArray:ba->A_ withInt:0 withInt:ba->_length_];
}

- (BOOL)startsWithWithRAREUTByteArrayHolder:(RAREUTByteArrayHolder *)bah {
  if (_length_ < ((RAREUTByteArrayHolder *) nil_chk(bah))->length_) {
    return NO;
  }
  return [RAREUTHelper regionMatchesWithByteArray:A_ withInt:0 withByteArray:bah->bytes_ withInt:bah->position_ withInt:bah->length_];
}

- (IOSByteArray *)toArray {
  int len = _length_;
  if (len == 0) {
    return [IOSByteArray arrayWithLength:0];
  }
  if ((int) [((IOSByteArray *) nil_chk(A_)) count] == len) {
    return A_;
  }
  IOSByteArray *b = [IOSByteArray arrayWithLength:len];
  [JavaLangSystem arraycopyWithId:A_ withInt:thePos_ withId:b withInt:0 withInt:len];
  return b;
}

- (IOSByteArray *)toArrayEx {
  int len = _length_ - thePos_;
  if (len == 0) {
    return [IOSByteArray arrayWithLength:0];
  }
  if ((int) [((IOSByteArray *) nil_chk(A_)) count] == len) {
    return A_;
  }
  IOSByteArray *b = [IOSByteArray arrayWithLength:len];
  [JavaLangSystem arraycopyWithId:A_ withInt:thePos_ withId:b withInt:0 withInt:len];
  return b;
}

- (RAREUTByteArrayHolder *)toByteArrayHolder {
  return [[RAREUTByteArrayHolder alloc] initWithByteArray:[self toArray]];
}

- (NSString *)description {
  if (_length_ == 0) {
    return @"";
  }
  if (charsetHelper_ == nil) {
    return [NSString stringWithBytes:A_ offset:0 length:_length_];
  }
  return [((id<RAREUTiCharsetHelper>) nil_chk(charsetHelper_)) getStringWithByteArray:A_ withInt:0 withInt:_length_];
}

- (NSString *)toStringWithRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  if (csh == nil) {
    return [NSString stringWithBytes:A_ offset:0 length:_length_];
  }
  return [((id<RAREUTiCharsetHelper>) nil_chk(csh)) getStringWithByteArray:A_ withInt:0 withInt:_length_];
}

- (NSString *)toStringWithRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh
                           withRAREUTCharArray:(RAREUTCharArray *)ca {
  if (_length_ == 0) {
    return @"";
  }
  [((RAREUTCharArray *) nil_chk(ca)) ensureCapacityWithInt:_length_];
  IOSCharArray *chars = ca->A_;
  int charLen = [((id<RAREUTiCharsetHelper>) nil_chk(csh)) getCharsWithByteArray:A_ withInt:0 withInt:_length_ withCharArray:chars withInt:0];
  return [NSString stringWithCharacters:chars offset:0 length:charLen];
}

- (void)trimToSize {
  A_ = [self toArray];
}

- (void)unread {
  if (thePos_ > 0) {
    thePos_--;
  }
}

- (void)checkRangeWithInt:(int)pos {
  if (pos >= _length_) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%d>=%d", pos, _length_]];
  }
  if (pos < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%d<0", pos]];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(RAREUTByteArray *)other {
  [super copyAllFieldsTo:other];
  other->A_ = A_;
  other->_length_ = _length_;
  other->charsetHelper_ = charsetHelper_;
  other->theMark_ = theMark_;
  other->thePos_ = thePos_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addWithNSString:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
    { "containsWithByte:", NULL, "Z", 0x1, NULL },
    { "equalsWithRAREUTByteArray:", NULL, "Z", 0x1, NULL },
    { "getWithInt:", NULL, "B", 0x1, "JavaLangIndexOutOfBoundsException" },
    { "getChars", NULL, "LIOSCharArray", 0x1, NULL },
    { "getCharsWithRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "getCharsWithRAREUTiCharsetHelper:", NULL, "LIOSCharArray", 0x1, NULL },
    { "getCharsWithRAREUTCharArray:withRAREUTiCharsetHelper:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "markSupported", NULL, "Z", 0x1, NULL },
    { "readWithInt:", NULL, "LIOSByteArray", 0x1, NULL },
    { "setWithByte:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setWithByteArray:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setWithRAREUTByteArray:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setWithRAREUTByteArrayHolder:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setWithRAREUTCharArray:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setWithNSString:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setWithRAREUTCharArray:withRAREUTiCharsetHelper:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setWithNSString:withRAREUTiCharsetHelper:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setWithByteArray:withInt:withInt:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setWithCharArray:withInt:withInt:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setWithCharArray:withInt:withInt:withRAREUTiCharsetHelper:", NULL, "LRAREUTByteArray", 0x1, NULL },
    { "setExWithByteArray:withInt:", NULL, "LIOSByteArray", 0x1, NULL },
    { "startsWithWithRAREUTByteArray:", NULL, "Z", 0x1, NULL },
    { "startsWithWithRAREUTByteArrayHolder:", NULL, "Z", 0x1, NULL },
    { "toArray", NULL, "LIOSByteArray", 0x1, NULL },
    { "toArrayEx", NULL, "LIOSByteArray", 0x1, NULL },
    { "toByteArrayHolder", NULL, "LRAREUTByteArrayHolder", 0x1, NULL },
    { "toStringWithRAREUTiCharsetHelper:", NULL, "LNSString", 0x1, NULL },
    { "toStringWithRAREUTiCharsetHelper:withRAREUTCharArray:", NULL, "LNSString", 0x1, NULL },
    { "checkRangeWithInt:", NULL, "V", 0x2, "JavaLangIndexOutOfBoundsException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x1, "LIOSByteArray" },
    { "_length_", NULL, 0x1, "I" },
    { "charsetHelper_", NULL, 0x4, "LRAREUTiCharsetHelper" },
    { "theMark_", NULL, 0x4, "I" },
    { "thePos_", NULL, 0x4, "I" },
  };
  static J2ObjcClassInfo _RAREUTByteArray = { "ByteArray", "com.appnativa.util", NULL, 0x1, 33, methods, 5, fields, 0, NULL};
  return &_RAREUTByteArray;
}

@end
