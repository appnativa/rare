//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src-json/com/appnativa/util/json/JSONStructuredNode.java
//
//  Created by decoteaud on 9/15/15.
//

#include "com/appnativa/util/iStructuredNode.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/appnativa/util/json/JSONStructuredNode.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation RAREUTJSONStructuredNode

- (id)initWithNSString:(NSString *)name
      withJavaUtilList:(id<JavaUtilList>)object {
  if (self = [super init]) {
    myPosition_ = -1;
    if ([(id) object isKindOfClass:[RAREUTJSONArray class]]) {
      object = [((RAREUTJSONArray *) check_class_cast(object, [RAREUTJSONArray class])) getObjectList];
    }
    listChildren_ = object;
    self->nodeName_ = name;
  }
  return self;
}

- (id)initWithNSString:(NSString *)name
       withJavaUtilMap:(id<JavaUtilMap>)object {
  if (self = [super init]) {
    myPosition_ = -1;
    self->nodeName_ = name;
    if ([(id) object isKindOfClass:[RAREUTJSONObject class]]) {
      object = [((RAREUTJSONObject *) check_class_cast(object, [RAREUTJSONObject class])) getObjectMap];
    }
    self->mapChildren_ = object;
    id<JavaUtilMap> o = (id<JavaUtilMap>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(mapChildren_)) removeWithId:@"_attributes"], @protocol(JavaUtilMap));
    if ([(id) o isKindOfClass:[RAREUTJSONObject class]]) {
      o = [((RAREUTJSONObject *) check_class_cast(o, [RAREUTJSONObject class])) getObjectMap];
    }
    self->nodeAttributes_ = o;
    self->nodeValue_ = [mapChildren_ removeWithId:@"_value"];
    self->nodeComment_ = (NSString *) check_class_cast([mapChildren_ removeWithId:@"_comment"], [NSString class]);
    self->nodeLinkedData_ = [mapChildren_ removeWithId:@"_linkedData"];
    if ([nodeValue_ conformsToProtocol: @protocol(JavaUtilList)]) {
      if ([nodeValue_ isKindOfClass:[RAREUTJSONArray class]]) {
        nodeValue_ = [((RAREUTJSONArray *) check_class_cast(object, [RAREUTJSONArray class])) getObjectList];
      }
      listChildren_ = (id<JavaUtilList>) check_protocol_cast(nodeValue_, @protocol(JavaUtilList));
      childCount_ = [((id<JavaUtilList>) nil_chk(listChildren_)) size];
      nodeValue_ = nil;
      mapChildren_ = nil;
    }
    else {
      childCount_ = [((id<JavaUtilMap>) nil_chk(object)) size];
    }
  }
  return self;
}

- (id)initWithNSString:(NSString *)name
                withId:(id)value {
  if (self = [super init]) {
    myPosition_ = -1;
    self->nodeName_ = name;
    self->nodeValue_ = value;
  }
  return self;
}

- (void)copyAttributesWithJavaUtilMap:(id<JavaUtilMap>)destination {
  if (nodeAttributes_ != nil) {
    [((id<JavaUtilMap>) nil_chk(destination)) putAllWithJavaUtilMap:nodeAttributes_];
  }
}

- (id)getAttributeWithNSString:(NSString *)name {
  return (nodeAttributes_ == nil) ? nil : [nodeAttributes_ getWithId:name];
}

- (id<JavaUtilMap>)getAttributes {
  return nodeAttributes_;
}

- (id<RAREUTiStructuredNode>)getChildWithInt:(int)index {
  if (sChildren_ == nil) {
    [self createChildren];
  }
  return (sChildren_ == nil) ? nil : [sChildren_ getWithInt:index];
}

- (id<RAREUTiStructuredNode>)getChildWithNSString:(NSString *)name {
  if (sMap_ == nil) {
    [self createNameMap];
  }
  return (sMap_ == nil) ? nil : [sMap_ getWithId:name];
}

- (int)getChildCount {
  return childCount_;
}

- (NSString *)getComment {
  return nodeComment_;
}

- (id<RAREUTiStructuredNode>)getFirstSignificantChild {
  if ((sChildren_ == nil) && (childCount_ > 0)) {
    [self createChildren];
  }
  return (sChildren_ == nil) ? nil : [sChildren_ getWithInt:0];
}

- (id)getLinkedData {
  return nodeLinkedData_;
}

- (NSString *)getName {
  return nodeName_;
}

- (id<RAREUTiStructuredNode>)getNextSibling {
  if (parent_ != nil && [parent_ getChildCount] > myPosition_ + 1) {
    return [parent_ getChildWithInt:myPosition_ + 1];
  }
  return nil;
}

- (NSString *)getPreformattedTag {
  return nil;
}

- (id)getValue {
  return nodeValue_;
}

- (NSString *)getValueAsString {
  return (nodeValue_ == nil) ? nil : [nodeValue_ description];
}

- (BOOL)hasAttributeWithNSString:(NSString *)name {
  return (nodeAttributes_ != nil) && [nodeAttributes_ containsKeyWithId:name];
}

- (BOOL)hasAttributes {
  return (nodeAttributes_ != nil) && ([nodeAttributes_ size] > 0);
}

- (BOOL)hasChildren {
  return childCount_ > 0;
}

- (BOOL)isPreformattedData {
  return NO;
}

- (void)createChildren {
  if (mapChildren_ != nil) {
    [self createChildrenWithJavaUtilMap:mapChildren_];
  }
  else if (listChildren_ != nil) {
    [self createChildrenWithJavaUtilList:listChildren_];
  }
}

- (void)createChildrenWithJavaUtilList:(id<JavaUtilList>)children {
  sChildren_ = [[JavaUtilArrayList alloc] initWithInt:childCount_];
  for (id __strong o in nil_chk(children)) {
    [sChildren_ addWithId:[[RAREUTJSONStructuredNode alloc] initWithNSString:@"no_name" withId:o]];
  }
}

- (void)createChildrenWithJavaUtilMap:(id<JavaUtilMap>)children {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(children)) entrySet])) iterator];
  sChildren_ = [[JavaUtilArrayList alloc] initWithInt:childCount_];
  RAREUTJSONStructuredNode *child;
  int i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> e = [it next];
    NSString *name = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]);
    id v = [e getValue];
    if ([v conformsToProtocol: @protocol(JavaUtilMap)]) {
      child = [[RAREUTJSONStructuredNode alloc] initWithNSString:name withJavaUtilMap:(id<JavaUtilMap>) check_protocol_cast(v, @protocol(JavaUtilMap))];
    }
    else if ([v conformsToProtocol: @protocol(JavaUtilList)]) {
      child = [[RAREUTJSONStructuredNode alloc] initWithNSString:name withJavaUtilList:(id<JavaUtilList>) check_protocol_cast(v, @protocol(JavaUtilList))];
    }
    else {
      child = [[RAREUTJSONStructuredNode alloc] initWithNSString:name withId:v];
    }
    [sChildren_ addWithId:child];
    ((RAREUTJSONStructuredNode *) nil_chk(child))->parent_ = self;
    child->myPosition_ = i++;
  }
}

- (void)createNameMap {
  if (mapChildren_ != nil) {
    if (sChildren_ == nil) {
      [self createChildren];
    }
    sMap_ = [[JavaUtilHashMap alloc] init];
    for (RAREUTJSONStructuredNode * __strong node in nil_chk(sChildren_)) {
      (void) [sMap_ putWithId:[((RAREUTJSONStructuredNode *) nil_chk(node)) getName] withId:node];
    }
  }
}

- (void)copyAllFieldsTo:(RAREUTJSONStructuredNode *)other {
  [super copyAllFieldsTo:other];
  other->childCount_ = childCount_;
  other->listChildren_ = listChildren_;
  other->mapChildren_ = mapChildren_;
  other->myPosition_ = myPosition_;
  other->nodeAttributes_ = nodeAttributes_;
  other->nodeComment_ = nodeComment_;
  other->nodeLinkedData_ = nodeLinkedData_;
  other->nodeName_ = nodeName_;
  other->nodeValue_ = nodeValue_;
  other->parent_ = parent_;
  other->sChildren_ = sChildren_;
  other->sMap_ = sMap_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getAttributeWithNSString:", NULL, "LNSObject", 0x1, NULL },
    { "getAttributes", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getChildWithInt:", NULL, "LRAREUTiStructuredNode", 0x1, NULL },
    { "getChildWithNSString:", NULL, "LRAREUTiStructuredNode", 0x1, NULL },
    { "getComment", NULL, "LNSString", 0x1, NULL },
    { "getFirstSignificantChild", NULL, "LRAREUTiStructuredNode", 0x1, NULL },
    { "getLinkedData", NULL, "LNSObject", 0x1, NULL },
    { "getName", NULL, "LNSString", 0x1, NULL },
    { "getNextSibling", NULL, "LRAREUTiStructuredNode", 0x1, NULL },
    { "getPreformattedTag", NULL, "LNSString", 0x1, NULL },
    { "getValue", NULL, "LNSObject", 0x1, NULL },
    { "getValueAsString", NULL, "LNSString", 0x1, NULL },
    { "hasAttributeWithNSString:", NULL, "Z", 0x1, NULL },
    { "hasAttributes", NULL, "Z", 0x1, NULL },
    { "hasChildren", NULL, "Z", 0x1, NULL },
    { "isPreformattedData", NULL, "Z", 0x1, NULL },
    { "createChildren", NULL, "V", 0x4, NULL },
    { "createChildrenWithJavaUtilList:", NULL, "V", 0x4, NULL },
    { "createChildrenWithJavaUtilMap:", NULL, "V", 0x4, NULL },
    { "createNameMap", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "myPosition_", NULL, 0x0, "I" },
    { "childCount_", NULL, 0x0, "I" },
    { "listChildren_", NULL, 0x0, "LJavaUtilList" },
    { "mapChildren_", NULL, 0x0, "LJavaUtilMap" },
    { "nodeAttributes_", NULL, 0x0, "LJavaUtilMap" },
    { "nodeComment_", NULL, 0x0, "LNSString" },
    { "nodeLinkedData_", NULL, 0x0, "LNSObject" },
    { "nodeName_", NULL, 0x0, "LNSString" },
    { "nodeValue_", NULL, 0x0, "LNSObject" },
    { "sChildren_", NULL, 0x0, "LJavaUtilArrayList" },
    { "sMap_", NULL, 0x0, "LJavaUtilMap" },
    { "parent_", NULL, 0x0, "LRAREUTJSONStructuredNode" },
  };
  static J2ObjcClassInfo _RAREUTJSONStructuredNode = { "JSONStructuredNode", "com.appnativa.util.json", NULL, 0x1, 20, methods, 12, fields, 0, NULL};
  return &_RAREUTJSONStructuredNode;
}

@end
