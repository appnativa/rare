//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src-json/com/appnativa/util/json/JSONTokener.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONException.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/appnativa/util/json/JSONTokener.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"

@implementation RAREUTJSONTokener

- (id)initRAREUTJSONTokenerWithJavaIoReader:(JavaIoReader *)reader {
  if (self = [super init]) {
    usePathAsName_ = YES;
    self->reader_ = [((JavaIoReader *) nil_chk(reader)) markSupported] ? reader : [[JavaIoBufferedReader alloc] initWithJavaIoReader:reader];
    self->useLastChar_ = NO;
    self->index_ = 0;
  }
  return self;
}

- (id)initWithJavaIoReader:(JavaIoReader *)reader {
  return [self initRAREUTJSONTokenerWithJavaIoReader:reader];
}

- (id)initWithNSString:(NSString *)s {
  return [self initRAREUTJSONTokenerWithJavaIoReader:[[JavaIoStringReader alloc] initWithNSString:s]];
}

- (void)back {
  if (useLastChar_ || index_ <= 0) {
    @throw [[RAREUTJSONException alloc] initWithNSString:@"Stepping back two steps is not supported"];
  }
  index_ -= 1;
  useLastChar_ = YES;
}

+ (int)dehexcharWithChar:(unichar)c {
  if (c >= '0' && c <= '9') {
    return c - '0';
  }
  if (c >= 'A' && c <= 'F') {
    return c - ('A' - 10);
  }
  if (c >= 'a' && c <= 'f') {
    return c - ('a' - 10);
  }
  return -1;
}

- (BOOL)more {
  unichar nextChar = [self next];
  if (nextChar == 0) {
    return NO;
  }
  [self back];
  return YES;
}

- (unichar)next {
  if (self->useLastChar_) {
    self->useLastChar_ = NO;
    if (self->lastChar_ != 0) {
      self->index_ += 1;
    }
    return self->lastChar_;
  }
  int c;
  @try {
    c = [((JavaIoReader *) nil_chk(self->reader_)) read];
  }
  @catch (JavaIoIOException *exc) {
    @throw [[RAREUTJSONException alloc] initWithJavaLangThrowable:exc];
  }
  if (c <= 0) {
    self->lastChar_ = 0;
    return 0;
  }
  self->index_ += 1;
  self->lastChar_ = (unichar) c;
  return self->lastChar_;
}

- (unichar)nextWithChar:(unichar)c {
  unichar n = [self next];
  if (n != c) {
    @throw [self syntaxErrorWithNSString:[NSString stringWithFormat:@"Expected '%C' and instead saw '%C'", c, n]];
  }
  return n;
}

- (NSString *)nextWithInt:(int)n {
  if (n == 0) {
    return @"";
  }
  IOSCharArray *buffer = [IOSCharArray arrayWithLength:n];
  int pos = 0;
  if (self->useLastChar_) {
    self->useLastChar_ = NO;
    (*IOSCharArray_GetRef(buffer, 0)) = self->lastChar_;
    pos = 1;
  }
  @try {
    int len;
    while ((pos < n) && ((len = [((JavaIoReader *) nil_chk(reader_)) readWithCharArray:buffer withInt:pos withInt:n - pos]) != -1)) {
      pos += len;
    }
  }
  @catch (JavaIoIOException *exc) {
    @throw [[RAREUTJSONException alloc] initWithJavaLangThrowable:exc];
  }
  self->index_ += pos;
  if (pos < n) {
    @throw [self syntaxErrorWithNSString:@"Substring bounds error"];
  }
  self->lastChar_ = IOSCharArray_Get(buffer, n - 1);
  return [NSString stringWithCharacters:buffer];
}

- (unichar)nextClean {
  for (; ; ) {
    unichar c = [self next];
    if (c == 0 || c > ' ') {
      return c;
    }
  }
}

- (NSString *)nextStringWithChar:(unichar)quote {
  unichar c;
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  for (; ; ) {
    c = [self next];
    switch (c) {
      case 0:
      case 0x000a:
      case 0x000d:
      @throw [self syntaxErrorWithNSString:@"Unterminated string"];
      case '\\':
      c = [self next];
      switch (c) {
        case 'b':
        (void) [sb appendWithChar:0x0008];
        break;
        case 't':
        (void) [sb appendWithChar:0x0009];
        break;
        case 'n':
        (void) [sb appendWithChar:0x000a];
        break;
        case 'f':
        (void) [sb appendWithChar:0x000c];
        break;
        case 'r':
        (void) [sb appendWithChar:0x000d];
        break;
        case 'u':
        (void) [sb appendWithChar:(unichar) [JavaLangInteger parseIntWithNSString:[self nextWithInt:4] withInt:16]];
        break;
        case '"':
        case '\'':
        case '\\':
        case '/':
        (void) [sb appendWithChar:c];
        break;
        default:
        @throw [self syntaxErrorWithNSString:@"Illegal escape."];
      }
      break;
      default:
      if (c == quote) {
        return [sb description];
      }
      (void) [sb appendWithChar:c];
    }
  }
}

- (NSString *)nextToWithChar:(unichar)d {
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  for (; ; ) {
    unichar c = [self next];
    if (c == d || c == 0 || c == 0x000a || c == 0x000d) {
      if (c != 0) {
        [self back];
      }
      return [((NSString *) nil_chk([sb description])) trim];
    }
    (void) [sb appendWithChar:c];
  }
}

- (NSString *)nextToWithNSString:(NSString *)delimiters {
  unichar c;
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  for (; ; ) {
    c = [self next];
    if ([((NSString *) nil_chk(delimiters)) indexOf:c] >= 0 || c == 0 || c == 0x000a || c == 0x000d) {
      if (c != 0) {
        [self back];
      }
      return [((NSString *) nil_chk([sb description])) trim];
    }
    (void) [sb appendWithChar:c];
  }
}

- (id)nextValueWithNSString:(NSString *)key {
  if (terminateParsing_) {
    return nil;
  }
  unichar c = [self nextClean];
  NSString *s;
  switch (c) {
    case '"':
    case '\'':
    return [self nextStringWithChar:c];
    case '{':
    [self back];
    return [[RAREUTJSONObject alloc] initWithNSString:key withRAREUTJSONTokener:self];
    case '[':
    case '(':
    [self back];
    return [[RAREUTJSONArray alloc] initWithNSString:key withRAREUTJSONTokener:self];
  }
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  while (c >= ' ' && [@",:]}/\\\"[{;=#" indexOf:c] < 0) {
    (void) [sb appendWithChar:c];
    c = [self next];
  }
  [self back];
  s = [((NSString *) nil_chk([sb description])) trim];
  if ([((NSString *) nil_chk(s)) isEqual:@""]) {
    @throw [self syntaxErrorWithNSString:@"Missing value"];
  }
  return [RAREUTJSONObject stringToValueWithNSString:s];
}

- (unichar)skipToWithChar:(unichar)to {
  unichar c;
  @try {
    int startIndex = self->index_;
    [((JavaIoReader *) nil_chk(reader_)) markWithInt:JavaLangInteger_MAX_VALUE];
    do {
      c = [self next];
      if (c == 0) {
        [reader_ reset];
        self->index_ = startIndex;
        return c;
      }
    }
    while (c != to);
  }
  @catch (JavaIoIOException *exc) {
    @throw [[RAREUTJSONException alloc] initWithJavaLangThrowable:exc];
  }
  [self back];
  return c;
}

- (RAREUTJSONException *)syntaxErrorWithNSString:(NSString *)message {
  return [[RAREUTJSONException alloc] initWithNSString:[NSString stringWithFormat:@"%@%@", message, [self description]]];
}

- (NSString *)description {
  return [NSString stringWithFormat:@" at character %d", index_];
}

- (void)setTerminateParsingWithBoolean:(BOOL)terminateParsing {
  self->terminateParsing_ = terminateParsing;
}

- (id<RAREUTJSONTokener_iWatcher>)getWatcher {
  return watcher_;
}

- (void)setWatcherWithRAREUTJSONTokener_iWatcher:(id<RAREUTJSONTokener_iWatcher>)watcher {
  self->watcher_ = watcher;
}

- (BOOL)isTerminateParsing {
  return terminateParsing_;
}

- (void)dispose {
  if (reader_ != nil) {
    @try {
      [reader_ close];
    }
    @catch (JavaIoIOException *ignore) {
    }
  }
  self->watcher_ = nil;
  self->reader_ = nil;
}

- (BOOL)isUsePathAsName {
  return usePathAsName_;
}

- (NSString *)makePathNameWithNSString:(NSString *)parentName
                          withNSString:(NSString *)key {
  if (key == nil) {
    return nil;
  }
  if (parentName == nil) {
    return key;
  }
  if (pathBuffer_ == nil) {
    pathBuffer_ = [[RAREUTCharArray alloc] init];
  }
  return [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk(pathBuffer_)) setWithNSString:parentName])) appendWithChar:'/'])) appendWithNSString:key])) description];
}

- (void)setUsePathAsNameWithBoolean:(BOOL)usePathAsName {
  self->usePathAsName_ = usePathAsName;
}

- (void)copyAllFieldsTo:(RAREUTJSONTokener *)other {
  [super copyAllFieldsTo:other];
  other->index_ = index_;
  other->lastChar_ = lastChar_;
  other->pathBuffer_ = pathBuffer_;
  other->reader_ = reader_;
  other->terminateParsing_ = terminateParsing_;
  other->useLastChar_ = useLastChar_;
  other->usePathAsName_ = usePathAsName_;
  other->watcher_ = watcher_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "back", NULL, "V", 0x1, "RAREUTJSONException" },
    { "more", NULL, "Z", 0x1, "RAREUTJSONException" },
    { "next", NULL, "C", 0x1, "RAREUTJSONException" },
    { "nextWithChar:", NULL, "C", 0x1, "RAREUTJSONException" },
    { "nextWithInt:", NULL, "LNSString", 0x1, "RAREUTJSONException" },
    { "nextClean", NULL, "C", 0x1, "RAREUTJSONException" },
    { "nextStringWithChar:", NULL, "LNSString", 0x1, "RAREUTJSONException" },
    { "nextToWithChar:", NULL, "LNSString", 0x1, "RAREUTJSONException" },
    { "nextToWithNSString:", NULL, "LNSString", 0x1, "RAREUTJSONException" },
    { "nextValueWithNSString:", NULL, "LNSObject", 0x1, "RAREUTJSONException" },
    { "skipToWithChar:", NULL, "C", 0x1, "RAREUTJSONException" },
    { "syntaxErrorWithNSString:", NULL, "LRAREUTJSONException", 0x1, NULL },
    { "getWatcher", NULL, "LRAREUTJSONTokener_iWatcher", 0x1, NULL },
    { "isTerminateParsing", NULL, "Z", 0x1, NULL },
    { "isUsePathAsName", NULL, "Z", 0x1, NULL },
    { "makePathNameWithNSString:withNSString:", NULL, "LNSString", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "terminateParsing_", NULL, 0x0, "Z" },
    { "usePathAsName_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _RAREUTJSONTokener = { "JSONTokener", "com.appnativa.util.json", NULL, 0x1, 16, methods, 2, fields, 0, NULL};
  return &_RAREUTJSONTokener;
}

@end

@interface RAREUTJSONTokener_iWatcher : NSObject
@end

@implementation RAREUTJSONTokener_iWatcher

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "keyEncounteredWithRAREUTJSONObject:withNSString:", NULL, "Z", 0x401, NULL },
    { "valueEncounteredWithRAREUTJSONObject:withNSString:withId:", NULL, "LNSObject", 0x401, NULL },
    { "valueEncounteredWithRAREUTJSONArray:withNSString:withId:", NULL, "LNSObject", 0x401, NULL },
    { "willParseObjectWithRAREUTJSONObject:", NULL, "V", 0x401, NULL },
    { "willParseArrayWithRAREUTJSONArray:", NULL, "V", 0x401, NULL },
    { "didParseObjectWithRAREUTJSONObject:", NULL, "V", 0x401, NULL },
    { "didParseArrayWithRAREUTJSONArray:", NULL, "V", 0x401, NULL },
  };
  static J2ObjcClassInfo _RAREUTJSONTokener_iWatcher = { "iWatcher", "com.appnativa.util.json", "JSONTokener", 0x201, 7, methods, 0, NULL, 0, NULL};
  return &_RAREUTJSONTokener_iWatcher;
}

@end
@implementation RAREUTJSONTokener_aWatcher

- (BOOL)keyEncounteredWithRAREUTJSONObject:(RAREUTJSONObject *)parent
                              withNSString:(NSString *)key {
  return YES;
}

- (id)valueEncounteredWithRAREUTJSONObject:(RAREUTJSONObject *)parent
                              withNSString:(NSString *)valueName
                                    withId:(id)value {
  return value;
}

- (id)valueEncounteredWithRAREUTJSONArray:(RAREUTJSONArray *)parent
                             withNSString:(NSString *)arrayName
                                   withId:(id)value {
  return value;
}

- (void)willParseObjectWithRAREUTJSONObject:(RAREUTJSONObject *)object {
}

- (void)willParseArrayWithRAREUTJSONArray:(RAREUTJSONArray *)array {
}

- (void)didParseObjectWithRAREUTJSONObject:(RAREUTJSONObject *)object {
}

- (void)didParseArrayWithRAREUTJSONArray:(RAREUTJSONArray *)array {
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "keyEncounteredWithRAREUTJSONObject:withNSString:", NULL, "Z", 0x1, NULL },
    { "valueEncounteredWithRAREUTJSONObject:withNSString:withId:", NULL, "LNSObject", 0x1, NULL },
    { "valueEncounteredWithRAREUTJSONArray:withNSString:withId:", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcClassInfo _RAREUTJSONTokener_aWatcher = { "aWatcher", "com.appnativa.util.json", "JSONTokener", 0x409, 3, methods, 0, NULL, 0, NULL};
  return &_RAREUTJSONTokener_aWatcher;
}

@end
