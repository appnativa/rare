//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src-json/com/appnativa/util/json/JSONArray.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/util/FilterableList.h"
#include "com/appnativa/util/aFilterableList.h"
#include "com/appnativa/util/iFilter.h"
#include "com/appnativa/util/iFilterableList.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONException.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/appnativa/util/json/JSONTokener.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"

@implementation RAREUTJSONArray

- (id)initRAREUTJSONArray {
  if (self = [super init]) {
    self->myArrayList_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (id)init {
  return [self initRAREUTJSONArray];
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (self = [super init]) {
    self->myArrayList_ = (collection == nil) ? [[JavaUtilArrayList alloc] init] : [[JavaUtilArrayList alloc] initWithJavaUtilCollection:collection];
  }
  return self;
}

- (id)initRAREUTJSONArrayWithRAREUTJSONTokener:(RAREUTJSONTokener *)x {
  return [self initRAREUTJSONArrayWithNSString:nil withRAREUTJSONTokener:x];
}

- (id)initWithRAREUTJSONTokener:(RAREUTJSONTokener *)x {
  return [self initRAREUTJSONArrayWithRAREUTJSONTokener:x];
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)array {
  if (self = [self initRAREUTJSONArray]) {
    int length = [((id<JavaUtilList>) nil_chk(array)) size];
    for (int i = 0; i < length; i += 1) {
      (void) [self putWithId:[array getWithInt:i]];
    }
  }
  return self;
}

- (id)initWithNSString:(NSString *)source {
  return [self initRAREUTJSONArrayWithRAREUTJSONTokener:[[RAREUTJSONTokener alloc] initWithNSString:source]];
}

- (id)initRAREUTJSONArrayWithNSString:(NSString *)name
                withRAREUTJSONTokener:(RAREUTJSONTokener *)x {
  if (self = [self initRAREUTJSONArray]) {
    [self setNameWithNSString:name];
    id<RAREUTJSONTokener_iWatcher> watcher = [((RAREUTJSONTokener *) nil_chk(x)) getWatcher];
    unichar c = [x nextClean];
    unichar q;
    if (watcher != nil) {
      [watcher willParseArrayWithRAREUTJSONArray:self];
    }
    if (c == '[') {
      q = ']';
    }
    else if (c == '(') {
      q = ')';
    }
    else {
      @throw [x syntaxErrorWithNSString:@"A JSONArray text must start with '['"];
    }
    @try {
      if ([x nextClean] == ']') {
        return self;
      }
      [x back];
      id value;
      for (; ; ) {
        if ([x nextClean] == ',') {
          [x back];
          value = nil;
        }
        else {
          [x back];
          value = [x nextValueWithNSString:name];
        }
        if (watcher != nil) {
          value = [watcher valueEncounteredWithRAREUTJSONArray:self withNSString:name withId:value];
          if ([x isTerminateParsing]) {
            return self;
          }
          if (value != nil) {
            [((JavaUtilArrayList *) nil_chk(myArrayList_)) addWithId:value];
          }
        }
        else {
          [((JavaUtilArrayList *) nil_chk(myArrayList_)) addWithId:value];
        }
        c = [x nextClean];
        switch (c) {
          case ';':
          case ',':
          if ([x nextClean] == ']') {
            return self;
          }
          [x back];
          break;
          case ']':
          case ')':
          if (q != c) {
            @throw [x syntaxErrorWithNSString:[NSString stringWithFormat:@"Expected a '%@'", [[JavaLangCharacter alloc] initWithChar:q]]];
          }
          return self;
          default:
          @throw [x syntaxErrorWithNSString:@"Expected a ',' or ']'"];
        }
      }
    }
    @finally {
      if (watcher != nil) {
        [watcher didParseArrayWithRAREUTJSONArray:self];
      }
    }
  }
  return self;
}

- (id)initWithNSString:(NSString *)name
 withRAREUTJSONTokener:(RAREUTJSONTokener *)x {
  return [self initRAREUTJSONArrayWithNSString:name withRAREUTJSONTokener:x];
}

- (void)addWithInt:(int)index
            withId:(id)element {
  [((JavaUtilArrayList *) nil_chk(myArrayList_)) addWithInt:index withId:element];
}

- (BOOL)addWithId:(id)e {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) addWithId:e];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) addAllWithJavaUtilCollection:c];
}

- (BOOL)addAllWithInt:(int)index
withJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) addAllWithInt:index withJavaUtilCollection:c];
}

- (int)chopWithInt:(int)len {
  return [RAREUTaFilterableList chopWithJavaUtilList:myArrayList_ withInt:len];
}

- (void)clear {
  [((JavaUtilArrayList *) nil_chk(myArrayList_)) clear];
}

- (id)clone {
  return [[RAREUTJSONArray alloc] initWithJavaUtilList:[[JavaUtilArrayList alloc] initWithJavaUtilCollection:self->myArrayList_]];
}

- (BOOL)containsWithId:(id)o {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) containsWithId:o];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) containsAllWithJavaUtilCollection:c];
}

- (BOOL)isEqual:(id)o {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) isEqual:o];
}

- (RAREUTJSONObject *)findJSONObjectWithNSString:(NSString *)key
                               withRAREUTiFilter:(id<RAREUTiFilter>)filter {
  return [self findJSONObjectWithNSString:key withRAREUTiFilter:filter withInt:0];
}

- (RAREUTJSONObject *)findJSONObjectWithNSString:(NSString *)key
                               withRAREUTiFilter:(id<RAREUTiFilter>)filter
                                         withInt:(int)startIndex {
  JavaUtilArrayList *list = myArrayList_;
  int len = [((JavaUtilArrayList *) nil_chk(myArrayList_)) size];
  for (int i = startIndex; i < len; i++) {
    RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast([((JavaUtilArrayList *) nil_chk(list)) getWithInt:i], [RAREUTJSONObject class]);
    id v = [((RAREUTJSONObject *) nil_chk(o)) optWithNSString:key];
    if (v != nil && [((id<RAREUTiFilter>) nil_chk(filter)) passesWithId:v withRAREUTiStringConverter:nil]) {
      return o;
    }
  }
  return nil;
}

- (RAREUTJSONObject *)findJSONObjectWithNSString:(NSString *)key
                                    withNSString:(NSString *)value {
  return [self findJSONObjectWithNSString:key withNSString:value withInt:0];
}

- (RAREUTJSONObject *)findJSONObjectWithNSString:(NSString *)key
                                    withNSString:(NSString *)value
                                         withInt:(int)startIndex {
  JavaUtilArrayList *list = myArrayList_;
  int len = [((JavaUtilArrayList *) nil_chk(myArrayList_)) size];
  for (int i = startIndex; i < len; i++) {
    RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast([((JavaUtilArrayList *) nil_chk(list)) getWithInt:i], [RAREUTJSONObject class]);
    id v = [((RAREUTJSONObject *) nil_chk(o)) optWithNSString:key];
    if (v != nil && [v isEqual:value]) {
      return o;
    }
  }
  return nil;
}

- (int)findJSONObjectIndexWithNSString:(NSString *)key
                     withRAREUTiFilter:(id<RAREUTiFilter>)filter {
  return [self findJSONObjectIndexWithNSString:key withRAREUTiFilter:filter withInt:0];
}

- (int)findJSONObjectIndexWithNSString:(NSString *)key
                     withRAREUTiFilter:(id<RAREUTiFilter>)filter
                               withInt:(int)startIndex {
  JavaUtilArrayList *list = myArrayList_;
  int len = [((JavaUtilArrayList *) nil_chk(myArrayList_)) size];
  for (int i = startIndex; i < len; i++) {
    RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast([((JavaUtilArrayList *) nil_chk(list)) getWithInt:i], [RAREUTJSONObject class]);
    id v = [((RAREUTJSONObject *) nil_chk(o)) optWithNSString:key];
    if (v != nil && [((id<RAREUTiFilter>) nil_chk(filter)) passesWithId:v withRAREUTiStringConverter:nil]) {
      return i;
    }
  }
  return -1;
}

- (int)findJSONObjectIndexWithNSString:(NSString *)key
                          withNSString:(NSString *)value
                               withInt:(int)startIndex {
  JavaUtilArrayList *list = myArrayList_;
  int len = [((JavaUtilArrayList *) nil_chk(myArrayList_)) size];
  for (int i = startIndex; i < len; i++) {
    RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast([((JavaUtilArrayList *) nil_chk(list)) getWithInt:i], [RAREUTJSONObject class]);
    id v = [((RAREUTJSONObject *) nil_chk(o)) optWithNSString:key];
    if (v != nil && [v isEqual:value]) {
      return i;
    }
  }
  return -1;
}

- (id)getWithInt:(int)index {
  id o = [self optWithInt:index];
  if (o == nil) {
    @throw [[RAREUTJSONException alloc] initWithNSString:[NSString stringWithFormat:@"JSONArray[%d] not found.", index]];
  }
  return o;
}

- (BOOL)getBooleanWithInt:(int)index {
  id o = [self getWithInt:index];
  if ([nil_chk(o) isEqual:[JavaLangBoolean getFALSE]] || (([o isKindOfClass:[NSString class]]) && [((NSString *) check_class_cast(o, [NSString class])) equalsIgnoreCase:@"false"])) {
    return NO;
  }
  else if ([o isEqual:[JavaLangBoolean getTRUE]] || (([o isKindOfClass:[NSString class]]) && [((NSString *) check_class_cast(o, [NSString class])) equalsIgnoreCase:@"true"])) {
    return YES;
  }
  @throw [[RAREUTJSONException alloc] initWithNSString:[NSString stringWithFormat:@"JSONArray[%d] is not a Boolean.", index]];
}

- (double)getDoubleWithInt:(int)index {
  id o = [self getWithInt:index];
  @try {
    return ([o isKindOfClass:[NSNumber class]]) ? [((NSNumber *) check_class_cast(o, [NSNumber class])) doubleValue] : [[JavaLangDouble valueOfWithNSString:(NSString *) check_class_cast(o, [NSString class])] doubleValue];
  }
  @catch (JavaLangException *e) {
    @throw [[RAREUTJSONException alloc] initWithNSString:[NSString stringWithFormat:@"JSONArray[%d] is not a number.", index]];
  }
}

- (id<RAREUTiFilterableList>)getiFilterableList {
  if (filterableList_ == nil) {
    filterableList_ = [[RAREUTFilterableList alloc] initWithJavaUtilList:myArrayList_];
  }
  return filterableList_;
}

- (int)getIntWithInt:(int)index {
  id o = [self getWithInt:index];
  return ([o isKindOfClass:[NSNumber class]]) ? [((NSNumber *) check_class_cast(o, [NSNumber class])) intValue] : (int) [self getDoubleWithInt:index];
}

- (RAREUTJSONArray *)getJSONArrayWithInt:(int)index {
  id o = [self getWithInt:index];
  if ([o isKindOfClass:[RAREUTJSONArray class]]) {
    return (RAREUTJSONArray *) check_class_cast(o, [RAREUTJSONArray class]);
  }
  @throw [[RAREUTJSONException alloc] initWithNSString:[NSString stringWithFormat:@"JSONArray[%d] is not a JSONArray.", index]];
}

- (RAREUTJSONObject *)getJSONObjectWithInt:(int)index {
  id o = [self getWithInt:index];
  if ([o isKindOfClass:[RAREUTJSONObject class]]) {
    return (RAREUTJSONObject *) check_class_cast(o, [RAREUTJSONObject class]);
  }
  @throw [[RAREUTJSONException alloc] initWithNSString:[NSString stringWithFormat:@"JSONArray[%d] is not a JSONObject.", index]];
}

- (int)getLength {
  return [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) size];
}

- (long long int)getLongWithInt:(int)index {
  id o = [self getWithInt:index];
  return ([o isKindOfClass:[NSNumber class]]) ? [((NSNumber *) check_class_cast(o, [NSNumber class])) longLongValue] : (long long int) [self getDoubleWithInt:index];
}

- (NSString *)getName {
  return name_;
}

- (id<JavaUtilList>)getObjectList {
  return myArrayList_;
}

- (NSString *)getStringWithInt:(int)index {
  return [nil_chk([self getWithInt:index]) description];
}

- (NSUInteger)hash {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) hash];
}

- (int)indexOfWithId:(id)o {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) indexOfWithId:o];
}

- (BOOL)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) isEmpty];
}

- (BOOL)isNullWithInt:(int)index {
  return [nil_chk([RAREUTJSONObject getNULL]) isEqual:[self optWithInt:index]];
}

- (id<JavaUtilIterator>)iterator {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) iterator];
}

- (NSString *)join {
  return [self joinWithNSString:@","];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  int len = [self length];
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  for (int i = 0; i < len; i += 1) {
    if (i > 0) {
      (void) [sb appendWithNSString:separator];
    }
    (void) [sb appendWithNSString:[RAREUTJSONObject valueToStringWithId:[((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:i]]];
  }
  return [sb description];
}

- (int)lastIndexOfWithId:(id)o {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) lastIndexOfWithId:o];
}

- (int)length {
  return [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) size];
}

- (id<JavaUtilListIterator>)listIterator {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) listIterator];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)index {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) listIteratorWithInt:index];
}

- (id)optWithInt:(int)index {
  return ((index < 0) || (index >= [self length])) ? nil : [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:index];
}

- (BOOL)optBooleanWithInt:(int)index {
  return [self optBooleanWithInt:index withBoolean:NO];
}

- (BOOL)optBooleanWithInt:(int)index
              withBoolean:(BOOL)defaultValue {
  @try {
    return [self getBooleanWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (double)optDoubleWithInt:(int)index {
  return [self optDoubleWithInt:index withDouble:JavaLangDouble_NaN];
}

- (double)optDoubleWithInt:(int)index
                withDouble:(double)defaultValue {
  @try {
    return [self getDoubleWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (int)optIntWithInt:(int)index {
  return [self optIntWithInt:index withInt:0];
}

- (int)optIntWithInt:(int)index
             withInt:(int)defaultValue {
  @try {
    return [self getIntWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (RAREUTJSONArray *)optJSONArrayWithInt:(int)index {
  id o = [self optWithInt:index];
  return ([o isKindOfClass:[RAREUTJSONArray class]]) ? (RAREUTJSONArray *) check_class_cast(o, [RAREUTJSONArray class]) : nil;
}

- (RAREUTJSONObject *)optJSONObjectWithInt:(int)index {
  id o = [self optWithInt:index];
  return ([o isKindOfClass:[RAREUTJSONObject class]]) ? (RAREUTJSONObject *) check_class_cast(o, [RAREUTJSONObject class]) : nil;
}

- (long long int)optLongWithInt:(int)index {
  return [self optLongWithInt:index withLong:0];
}

- (long long int)optLongWithInt:(int)index
                       withLong:(long long int)defaultValue {
  @try {
    return [self getLongWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (NSString *)optStringWithInt:(int)index {
  return [self optStringWithInt:index withNSString:@""];
}

- (NSString *)optStringWithInt:(int)index
                  withNSString:(NSString *)defaultValue {
  id o = [self optWithInt:index];
  return (o != nil) ? [o description] : defaultValue;
}

- (RAREUTJSONArray *)putWithBoolean:(BOOL)value {
  (void) [self putWithId:value ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE]];
  return self;
}

- (RAREUTJSONArray *)putWithJavaUtilCollection:(id<JavaUtilCollection>)value {
  (void) [self putWithJavaUtilCollection:[[RAREUTJSONArray alloc] initWithJavaUtilCollection:value]];
  return self;
}

- (RAREUTJSONArray *)putWithDouble:(double)value {
  JavaLangDouble *d = [[JavaLangDouble alloc] initWithDouble:value];
  [RAREUTJSONObject testValidityWithId:d];
  (void) [self putWithId:d];
  return self;
}

- (RAREUTJSONArray *)putWithInt:(int)value {
  (void) [self putWithId:[[JavaLangInteger alloc] initWithInt:value]];
  return self;
}

- (RAREUTJSONArray *)putWithInt:(int)index
                    withBoolean:(BOOL)value {
  (void) [self putWithInt:index withId:value ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE]];
  return self;
}

- (RAREUTJSONArray *)putWithInt:(int)index
         withJavaUtilCollection:(id<JavaUtilCollection>)value {
  (void) [self putWithInt:index withJavaUtilCollection:[[RAREUTJSONArray alloc] initWithJavaUtilCollection:value]];
  return self;
}

- (RAREUTJSONArray *)putWithInt:(int)index
                     withDouble:(double)value {
  (void) [self putWithInt:index withId:[[JavaLangDouble alloc] initWithDouble:value]];
  return self;
}

- (RAREUTJSONArray *)putWithInt:(int)index
                        withInt:(int)value {
  (void) [self putWithInt:index withId:[[JavaLangInteger alloc] initWithInt:value]];
  return self;
}

- (RAREUTJSONArray *)putWithInt:(int)index
                       withLong:(long long int)value {
  (void) [self putWithInt:index withId:[[JavaLangLong alloc] initWithLong:value]];
  return self;
}

- (RAREUTJSONArray *)putWithInt:(int)index
                withJavaUtilMap:(id<JavaUtilMap>)value {
  if (!([(id) value isKindOfClass:[RAREUTJSONObject class]])) {
    value = [[RAREUTJSONObject alloc] initWithJavaUtilMap:value];
  }
  [RAREUTJSONObject testValidityWithId:value];
  if (index < 0) {
    @throw [[RAREUTJSONException alloc] initWithNSString:[NSString stringWithFormat:@"JSONArray[%d] not found.", index]];
  }
  if (index < [self length]) {
    (void) [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) setWithInt:index withId:value];
  }
  else {
    while (index != [self length]) {
      (void) [self putWithId:[RAREUTJSONObject getNULL]];
    }
    (void) [self putWithJavaUtilMap:value];
  }
  return self;
}

- (RAREUTJSONArray *)putWithInt:(int)index
                         withId:(id)value {
  [RAREUTJSONObject testValidityWithId:value];
  if (index < 0) {
    @throw [[RAREUTJSONException alloc] initWithNSString:[NSString stringWithFormat:@"JSONArray[%d] not found.", index]];
  }
  if (index < [self length]) {
    (void) [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) setWithInt:index withId:value];
  }
  else {
    while (index != [self length]) {
      (void) [self putWithId:[RAREUTJSONObject getNULL]];
    }
    (void) [self putWithId:value];
  }
  return self;
}

- (RAREUTJSONArray *)putWithLong:(long long int)value {
  (void) [self putWithId:[[JavaLangLong alloc] initWithLong:value]];
  return self;
}

- (RAREUTJSONArray *)putWithJavaUtilMap:(id<JavaUtilMap>)value {
  if (!([(id) value isKindOfClass:[RAREUTJSONObject class]])) {
    value = [[RAREUTJSONObject alloc] initWithJavaUtilMap:value];
  }
  [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:value];
  return self;
}

- (RAREUTJSONArray *)putWithId:(id)value {
  [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:value];
  return self;
}

- (id)removeWithInt:(int)index {
  id o = [self optWithInt:index];
  (void) [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) removeWithInt:index];
  return o;
}

- (BOOL)removeWithId:(id)o {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) removeWithId:o];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) removeAllWithJavaUtilCollection:c];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) retainAllWithJavaUtilCollection:c];
}

- (id)setWithInt:(int)index
          withId:(id)element {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) setWithInt:index withId:element];
}

- (void)setNameWithNSString:(NSString *)name {
  self->name_ = name;
}

- (int)size {
  return [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) size];
}

- (RAREUTJSONArray *)sliceWithInt:(int)start {
  return [self sliceWithInt:start withInt:[self size]];
}

- (RAREUTJSONArray *)sliceWithInt:(int)start
                          withInt:(int)end {
  id<JavaUtilList> list = myArrayList_;
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  if (end < 0) {
    end = len - end;
  }
  if (start >= end) {
    return [[RAREUTJSONArray alloc] init];
  }
  if (start < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"start<0"];
  }
  JavaUtilArrayList *fl = [[JavaUtilArrayList alloc] initWithInt:end - start];
  while (start < end) {
    [fl addWithId:[list getWithInt:start++]];
  }
  return [[RAREUTJSONArray alloc] initWithJavaUtilList:fl];
}

- (void)sort {
  [JavaUtilCollections sortWithJavaUtilList:myArrayList_];
}

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)c {
  [JavaUtilCollections sortWithJavaUtilList:myArrayList_ withJavaUtilComparator:c];
}

- (RAREUTJSONArray *)spliceWithInt:(int)index
                           withInt:(int)howMany {
  return [self spliceWithInt:index withInt:howMany withNSObjectArray:(IOSObjectArray *) check_class_cast(nil, [IOSObjectArray class])];
}

- (RAREUTJSONArray *)spliceWithInt:(int)index
                           withInt:(int)howMany
                 withNSObjectArray:(IOSObjectArray *)e {
  return [self spliceListWithInt:index withInt:howMany withJavaUtilList:(e == nil) ? nil : [JavaUtilArrays asListWithNSObjectArray:e]];
}

- (RAREUTJSONArray *)spliceListWithInt:(int)index
                               withInt:(int)howMany
                      withJavaUtilList:(id<JavaUtilList>)e {
  id<JavaUtilList> list = myArrayList_;
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  if (index < 0) {
    index = len + index;
  }
  if (index < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"index=%d", index]];
  }
  int i = index;
  if (len > i + howMany) {
    len = i + howMany;
  }
  id<JavaUtilList> rlist = [[JavaUtilArrayList alloc] initWithInt:(i < len) ? len - i : 0];
  while (i < len) {
    [rlist addWithId:[list getWithInt:index]];
    (void) [list removeWithInt:index];
    i++;
  }
  if (e != nil) {
    if (index >= [list size]) {
      [self addAllWithJavaUtilCollection:e];
    }
    else {
      [self addAllWithInt:index withJavaUtilCollection:e];
    }
  }
  return [[RAREUTJSONArray alloc] initWithJavaUtilList:list];
}

- (id<JavaUtilList>)subListWithInt:(int)fromIndex
                           withInt:(int)toIndex {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) subListWithInt:fromIndex withInt:toIndex];
}

- (IOSObjectArray *)toArray {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  return [((JavaUtilArrayList *) nil_chk(myArrayList_)) toArrayWithNSObjectArray:a];
}

- (RAREUTJSONObject *)toJSONObjectWithRAREUTJSONArray:(RAREUTJSONArray *)names {
  if ((names == nil) || ([names length] == 0) || ([self length] == 0)) {
    return nil;
  }
  RAREUTJSONObject *jo = [[RAREUTJSONObject alloc] init];
  for (int i = 0; i < [((RAREUTJSONArray *) nil_chk(names)) length]; i += 1) {
    (void) [jo putWithNSString:[names getStringWithInt:i] withId:[self optWithInt:i]];
  }
  return jo;
}

- (NSString *)description {
  @try {
    return [NSString stringWithFormat:@"[%@]", [self joinWithNSString:@","]];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (NSString *)toStringWithInt:(int)indentFactor {
  return [self toStringWithInt:indentFactor withInt:0];
}

- (JavaIoWriter *)writeWithJavaIoWriter:(JavaIoWriter *)writer {
  @try {
    BOOL b = NO;
    int len = [self length];
    [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'['];
    for (int i = 0; i < len; i += 1) {
      if (b) {
        [writer writeWithInt:','];
      }
      id v = [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:i];
      if ([v isKindOfClass:[RAREUTJSONObject class]]) {
        (void) [((RAREUTJSONObject *) check_class_cast(v, [RAREUTJSONObject class])) writeWithJavaIoWriter:writer];
      }
      else if ([v isKindOfClass:[RAREUTJSONArray class]]) {
        (void) [((RAREUTJSONArray *) check_class_cast(v, [RAREUTJSONArray class])) writeWithJavaIoWriter:writer];
      }
      else {
        [writer writeWithNSString:[RAREUTJSONObject valueToStringWithId:v]];
      }
      b = YES;
    }
    [writer writeWithInt:']'];
    return writer;
  }
  @catch (JavaIoIOException *e) {
    @throw [[RAREUTJSONException alloc] initWithJavaLangThrowable:e];
  }
}

- (NSString *)toStringWithInt:(int)indentFactor
                      withInt:(int)indent {
  int len = [self length];
  if (len == 0) {
    return @"[]";
  }
  int i;
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] initWithNSString:@"["];
  if (len == 1) {
    (void) [sb appendWithNSString:[RAREUTJSONObject valueToStringWithId:[((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:0] withInt:indentFactor withInt:indent]];
  }
  else {
    int newindent = indent + indentFactor;
    (void) [sb appendWithChar:0x000a];
    for (i = 0; i < len; i += 1) {
      if (i > 0) {
        (void) [sb appendWithNSString:@",\n"];
      }
      for (int j = 0; j < newindent; j += 1) {
        (void) [sb appendWithChar:' '];
      }
      (void) [sb appendWithNSString:[RAREUTJSONObject valueToStringWithId:[((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:i] withInt:indentFactor withInt:newindent]];
    }
    (void) [sb appendWithChar:0x000a];
    for (i = 0; i < indent; i += 1) {
      (void) [sb appendWithChar:' '];
    }
  }
  (void) [sb appendWithChar:']'];
  return [sb description];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(RAREUTJSONArray *)other {
  [super copyAllFieldsTo:other];
  other->filterableList_ = filterableList_;
  other->myArrayList_ = myArrayList_;
  other->name_ = name_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithRAREUTJSONTokener:", NULL, NULL, 0x1, "RAREUTJSONException" },
    { "initWithJavaUtilList:", NULL, NULL, 0x1, "RAREUTJSONException" },
    { "initWithNSString:", NULL, NULL, 0x1, "RAREUTJSONException" },
    { "initWithNSString:withRAREUTJSONTokener:", NULL, NULL, 0x1, "RAREUTJSONException" },
    { "addWithId:", NULL, "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "addAllWithInt:withJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "containsWithId:", NULL, "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "findJSONObjectWithNSString:withRAREUTiFilter:", NULL, "LRAREUTJSONObject", 0x1, NULL },
    { "findJSONObjectWithNSString:withRAREUTiFilter:withInt:", NULL, "LRAREUTJSONObject", 0x1, NULL },
    { "findJSONObjectWithNSString:withNSString:", NULL, "LRAREUTJSONObject", 0x1, NULL },
    { "findJSONObjectWithNSString:withNSString:withInt:", NULL, "LRAREUTJSONObject", 0x1, NULL },
    { "getWithInt:", NULL, "LNSObject", 0x1, "RAREUTJSONException" },
    { "getBooleanWithInt:", NULL, "Z", 0x1, "RAREUTJSONException" },
    { "getDoubleWithInt:", NULL, "D", 0x1, "RAREUTJSONException" },
    { "getiFilterableList", NULL, "LRAREUTiFilterableList", 0x1, NULL },
    { "getIntWithInt:", NULL, "I", 0x1, "RAREUTJSONException" },
    { "getJSONArrayWithInt:", NULL, "LRAREUTJSONArray", 0x1, "RAREUTJSONException" },
    { "getJSONObjectWithInt:", NULL, "LRAREUTJSONObject", 0x1, "RAREUTJSONException" },
    { "getLongWithInt:", NULL, "J", 0x1, "RAREUTJSONException" },
    { "getName", NULL, "LNSString", 0x1, NULL },
    { "getObjectList", NULL, "LJavaUtilList", 0x1, NULL },
    { "getStringWithInt:", NULL, "LNSString", 0x1, "RAREUTJSONException" },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "isNullWithInt:", NULL, "Z", 0x1, NULL },
    { "iterator", NULL, "LJavaUtilIterator", 0x1, NULL },
    { "join", NULL, "LNSString", 0x1, NULL },
    { "joinWithNSString:", NULL, "LNSString", 0x1, "RAREUTJSONException" },
    { "listIterator", NULL, "LJavaUtilListIterator", 0x1, NULL },
    { "listIteratorWithInt:", NULL, "LJavaUtilListIterator", 0x1, NULL },
    { "optWithInt:", NULL, "LNSObject", 0x1, NULL },
    { "optBooleanWithInt:", NULL, "Z", 0x1, NULL },
    { "optBooleanWithInt:withBoolean:", NULL, "Z", 0x1, NULL },
    { "optJSONArrayWithInt:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "optJSONObjectWithInt:", NULL, "LRAREUTJSONObject", 0x1, NULL },
    { "optStringWithInt:", NULL, "LNSString", 0x1, NULL },
    { "optStringWithInt:withNSString:", NULL, "LNSString", 0x1, NULL },
    { "putWithBoolean:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "putWithJavaUtilCollection:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "putWithDouble:", NULL, "LRAREUTJSONArray", 0x1, "RAREUTJSONException" },
    { "putWithInt:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "putWithInt:withBoolean:", NULL, "LRAREUTJSONArray", 0x1, "RAREUTJSONException" },
    { "putWithInt:withJavaUtilCollection:", NULL, "LRAREUTJSONArray", 0x1, "RAREUTJSONException" },
    { "putWithInt:withDouble:", NULL, "LRAREUTJSONArray", 0x1, "RAREUTJSONException" },
    { "putWithInt:withInt:", NULL, "LRAREUTJSONArray", 0x1, "RAREUTJSONException" },
    { "putWithInt:withLong:", NULL, "LRAREUTJSONArray", 0x1, "RAREUTJSONException" },
    { "putWithInt:withJavaUtilMap:", NULL, "LRAREUTJSONArray", 0x1, "RAREUTJSONException" },
    { "putWithInt:withId:", NULL, "LRAREUTJSONArray", 0x1, "RAREUTJSONException" },
    { "putWithLong:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "putWithJavaUtilMap:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "putWithId:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "removeWithInt:", NULL, "LNSObject", 0x1, NULL },
    { "removeWithId:", NULL, "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "setWithInt:withId:", NULL, "LNSObject", 0x1, NULL },
    { "sliceWithInt:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "sliceWithInt:withInt:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "spliceWithInt:withInt:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "spliceWithInt:withInt:withNSObjectArray:", NULL, "LRAREUTJSONArray", 0x81, NULL },
    { "spliceListWithInt:withInt:withJavaUtilList:", NULL, "LRAREUTJSONArray", 0x1, NULL },
    { "subListWithInt:withInt:", NULL, "LJavaUtilList", 0x1, NULL },
    { "toArray", NULL, "LIOSObjectArray", 0x1, NULL },
    { "toArrayWithNSObjectArray:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "toJSONObjectWithRAREUTJSONArray:", NULL, "LRAREUTJSONObject", 0x1, "RAREUTJSONException" },
    { "toStringWithInt:", NULL, "LNSString", 0x1, "RAREUTJSONException" },
    { "writeWithJavaIoWriter:", NULL, "LJavaIoWriter", 0x1, "RAREUTJSONException" },
    { "toStringWithInt:withInt:", NULL, "LNSString", 0x0, "RAREUTJSONException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "filterableList_", NULL, 0x4, "LRAREUTiFilterableList" },
    { "myArrayList_", NULL, 0x4, "LJavaUtilArrayList" },
    { "name_", NULL, 0x4, "LNSString" },
  };
  static J2ObjcClassInfo _RAREUTJSONArray = { "JSONArray", "com.appnativa.util.json", NULL, 0x1, 70, methods, 3, fields, 0, NULL};
  return &_RAREUTJSONArray;
}

@end
