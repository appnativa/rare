//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/ASCII85OutputStream.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "com/appnativa/util/ASCII85OutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"

@implementation RAREUTASCII85OutputStream

- (id)initRAREUTASCII85OutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (self = [super initWithJavaIoOutputStream:outArg]) {
    width_ = 72;
  }
  return self;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return [self initRAREUTASCII85OutputStreamWithJavaIoOutputStream:outArg];
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                     withBoolean:(BOOL)useSpaceCompression {
  if (self = [self initRAREUTASCII85OutputStreamWithJavaIoOutputStream:outArg]) {
    self->useSpaceCompression_ = useSpaceCompression;
  }
  return self;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                         withInt:(int)width
                     withBoolean:(BOOL)useSpaceCompression {
  if (self = [self initRAREUTASCII85OutputStreamWithJavaIoOutputStream:outArg]) {
    self->width_ = width;
    self->useSpaceCompression_ = useSpaceCompression;
  }
  return self;
}

- (void)flush {
  if (encoding_) {
    if (count_ > 0) {
      [self encodeWithInt:tuple_ withInt:count_];
    }
    if (pos_ + 2 > width_) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:0x000d];
      [out_ writeWithInt:0x000a];
    }
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:'~'];
    [out_ writeWithInt:'>'];
    [out_ writeWithInt:0x000d];
    [out_ writeWithInt:0x000a];
    encoding_ = NO;
    tuple_ = count_ = 0;
  }
  [super flush];
}

- (void)writeWithInt:(int)b {
  if (!encoding_) {
    [self startEncoding];
  }
  switch (count_++) {
    case 0:
    tuple_ |= ((b & (int) 0xff) << 24);
    break;
    case 1:
    tuple_ |= ((b & (int) 0xff) << 16);
    break;
    case 2:
    tuple_ |= ((b & (int) 0xff) << 8);
    break;
    case 3:
    tuple_ |= (b & (int) 0xff);
    if (tuple_ == 0) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:'z'];
      if (pos_++ >= width_) {
        pos_ = 0;
        [out_ writeWithInt:0x000d];
        [out_ writeWithInt:0x000a];
      }
    }
    else if (useSpaceCompression_ && (tuple_ == (int) 0x20202020)) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:'y'];
      if (pos_++ >= width_) {
        pos_ = 0;
        [out_ writeWithInt:0x000d];
        [out_ writeWithInt:0x000a];
      }
    }
    else {
      [self encodeWithInt:tuple_ withInt:count_];
    }
    tuple_ = 0;
    count_ = 0;
    break;
  }
}

- (void)writeUnencodedWithByteArray:(IOSByteArray *)b {
  [self writeUnencodedWithByteArray:b withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(b)) count]];
}

- (void)writeUnencodedWithInt:(int)b {
  [super writeWithInt:b];
}

- (void)writeUnencodedWithByteArray:(IOSByteArray *)b
                            withInt:(int)off
                            withInt:(int)len {
  for (int i = 0; i < len; i++) {
    [self writeUnencodedWithInt:IOSByteArray_Get(nil_chk(b), off + i)];
  }
}

- (void)encodeWithInt:(int)tuple
              withInt:(int)count {
  int i = 5;
  IOSByteArray *buf = [IOSByteArray arrayWithLength:5];
  short int bufPos = 0;
  long long int longTuple = 0 | (tuple & (long long) 0xffffffffLL);
  do {
    (*IOSByteArray_GetRef(buf, bufPos++)) = (char) (longTuple % 85);
    longTuple /= 85;
  }
  while (--i > 0);
  i = count;
  do {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:IOSByteArray_Get(buf, --bufPos) + '!'];
    if (pos_++ >= width_) {
      pos_ = 0;
      [out_ writeWithInt:0x000d];
      [out_ writeWithInt:0x000a];
    }
  }
  while (i-- > 0);
}

- (void)startEncoding {
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:'<'];
  [out_ writeWithInt:'~'];
  pos_ = 2;
  encoding_ = YES;
}

- (void)copyAllFieldsTo:(RAREUTASCII85OutputStream *)other {
  [super copyAllFieldsTo:other];
  other->count_ = count_;
  other->encoding_ = encoding_;
  other->pos_ = pos_;
  other->tuple_ = tuple_;
  other->useSpaceCompression_ = useSpaceCompression_;
  other->width_ = width_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "flush", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeWithInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeUnencodedWithByteArray:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeUnencodedWithInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeUnencodedWithByteArray:withInt:withInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "encodeWithInt:withInt:", NULL, "V", 0x2, "JavaIoIOException" },
    { "startEncoding", NULL, "V", 0x2, "JavaIoIOException" },
  };
  static J2ObjcClassInfo _RAREUTASCII85OutputStream = { "ASCII85OutputStream", "com.appnativa.util", NULL, 0x1, 7, methods, 0, NULL, 0, NULL};
  return &_RAREUTASCII85OutputStream;
}

@end
