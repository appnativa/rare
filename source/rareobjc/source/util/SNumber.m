//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/SNumber.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSDoubleArray.h"
#include "IOSFloatArray.h"
#include "IOSIntArray.h"
#include "IOSLongArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/util/ByteArray.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/SDecimal.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/aStreamer.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StrictMath.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Method.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@implementation RAREUTSNumber

static RAREUTSNumber * RAREUTSNumber_ZERO_;
static RAREUTSNumber * RAREUTSNumber_ONE_;
static unichar RAREUTSNumber_ZERO_DIGIT_;
static unichar RAREUTSNumber_MINUS_SIGN_;
static unichar RAREUTSNumber_PLUS_SIGN_;
static unichar RAREUTSNumber_DECIMAL_POINT_;
static unichar RAREUTSNumber_EXPONENT_LOWERCASE_;
static unichar RAREUTSNumber_EXPONENT_UPPERCASE_;
static IOSCharArray * RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_;
static IOSCharArray * RAREUTSNumber_EXPONENT_CHARS_UPPERCASE_;
static int RAREUTSNumber_maxDigits_ = 19;
static IOSDoubleArray * RAREUTSNumber_fractens_;
static IOSLongArray * RAREUTSNumber_tens_;
static NSString * RAREUTSNumber_NO_POWER_FRACTION_MSG_ = @"fractional power not supported for numbers 2**-63 <= >= 2**63";
static NSString * RAREUTSNumber_POINT_ONE_;
static NSString * RAREUTSNumber_POINT_ZERO_ONE_;
static NSString * RAREUTSNumber_POINT_ZERO_ZERO_ONE_;
static NSString * RAREUTSNumber_POINT_ZERO_ZERO_ZERO_ONE_;
static IOSCharArray * RAREUTSNumber_DigitOnes_;
static IOSCharArray * RAREUTSNumber_DigitTens_;
static IOSCharArray * RAREUTSNumber_digits_;
static NSString * RAREUTSNumber_divideByZero_ = @"divide by zero";
static IOSCharArray * RAREUTSNumber_hexDigits_;
static JavaLangThreadLocal * RAREUTSNumber_perThreadNumber_;
static JavaLangThreadLocal * RAREUTSNumber_perThreadBuffer_;

+ (int)ALLOW_EXPONENT {
  return RAREUTSNumber_ALLOW_EXPONENT;
}

+ (int)ALLOW_OPS {
  return RAREUTSNumber_ALLOW_OPS;
}

+ (int)ALLOW_TRAILING_E {
  return RAREUTSNumber_ALLOW_TRAILING_E;
}

+ (int)ALLOW_ZEROS {
  return RAREUTSNumber_ALLOW_ZEROS;
}

+ (RAREUTSNumber *)ZERO {
  return RAREUTSNumber_ZERO_;
}

+ (RAREUTSNumber *)ONE {
  return RAREUTSNumber_ONE_;
}

+ (unichar)ZERO_DIGIT {
  return RAREUTSNumber_ZERO_DIGIT_;
}

+ (unichar)MINUS_SIGN {
  return RAREUTSNumber_MINUS_SIGN_;
}

+ (unichar)PLUS_SIGN {
  return RAREUTSNumber_PLUS_SIGN_;
}

+ (unichar)DECIMAL_POINT {
  return RAREUTSNumber_DECIMAL_POINT_;
}

+ (unichar)EXPONENT_LOWERCASE {
  return RAREUTSNumber_EXPONENT_LOWERCASE_;
}

+ (unichar)EXPONENT_UPPERCASE {
  return RAREUTSNumber_EXPONENT_UPPERCASE_;
}

+ (IOSCharArray *)EXPONENT_CHARS_LOWERCASE {
  return RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_;
}

+ (IOSCharArray *)EXPONENT_CHARS_UPPERCASE {
  return RAREUTSNumber_EXPONENT_CHARS_UPPERCASE_;
}

+ (int)maxDigits {
  return RAREUTSNumber_maxDigits_;
}

+ (int *)maxDigitsRef {
  return &RAREUTSNumber_maxDigits_;
}

+ (IOSDoubleArray *)fractens {
  return RAREUTSNumber_fractens_;
}

+ (IOSLongArray *)tens {
  return RAREUTSNumber_tens_;
}

+ (NSString *)NO_POWER_FRACTION_MSG {
  return RAREUTSNumber_NO_POWER_FRACTION_MSG_;
}

+ (void)setNO_POWER_FRACTION_MSG:(NSString *)NO_POWER_FRACTION_MSG {
  RAREUTSNumber_NO_POWER_FRACTION_MSG_ = NO_POWER_FRACTION_MSG;
}

+ (NSString *)POINT_ONE {
  return RAREUTSNumber_POINT_ONE_;
}

+ (NSString *)POINT_ZERO_ONE {
  return RAREUTSNumber_POINT_ZERO_ONE_;
}

+ (NSString *)POINT_ZERO_ZERO_ONE {
  return RAREUTSNumber_POINT_ZERO_ZERO_ONE_;
}

+ (NSString *)POINT_ZERO_ZERO_ZERO_ONE {
  return RAREUTSNumber_POINT_ZERO_ZERO_ZERO_ONE_;
}

+ (IOSCharArray *)DigitOnes {
  return RAREUTSNumber_DigitOnes_;
}

+ (IOSCharArray *)DigitTens {
  return RAREUTSNumber_DigitTens_;
}

+ (IOSCharArray *)digits {
  return RAREUTSNumber_digits_;
}

+ (NSString *)divideByZero {
  return RAREUTSNumber_divideByZero_;
}

+ (IOSCharArray *)hexDigits {
  return RAREUTSNumber_hexDigits_;
}

+ (JavaLangThreadLocal *)perThreadNumber {
  return RAREUTSNumber_perThreadNumber_;
}

+ (void)setPerThreadNumber:(JavaLangThreadLocal *)perThreadNumber {
  RAREUTSNumber_perThreadNumber_ = perThreadNumber;
}

+ (JavaLangThreadLocal *)perThreadBuffer {
  return RAREUTSNumber_perThreadBuffer_;
}

+ (void)setPerThreadBuffer:(JavaLangThreadLocal *)perThreadBuffer {
  RAREUTSNumber_perThreadBuffer_ = perThreadBuffer;
}

- (id)init {
  return [super init];
}

- (id)initWithJavaMathBigDecimal:(JavaMathBigDecimal *)bd {
  if (self = [super init]) {
    bigNumber_ = [[RAREUTSDecimal alloc] initWithJavaMathBigDecimal:bd];
  }
  return self;
}

- (id)initWithJavaMathBigInteger:(JavaMathBigInteger *)bd {
  if (self = [super init]) {
    bigNumber_ = [[RAREUTSDecimal alloc] initWithJavaMathBigInteger:bd];
  }
  return self;
}

- (id)initWithDouble:(double)num {
  if (self = [super init]) {
    (void) [self setValueWithDouble:num];
  }
  return self;
}

- (id)initWithInt:(int)num {
  if (self = [super init]) {
    mantissa_ = num;
  }
  return self;
}

- (id)initWithLong:(long long int)num {
  if (self = [super init]) {
    mantissa_ = num;
  }
  return self;
}

- (id)initWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (self = [super init]) {
    mantissa_ = ((RAREUTSNumber *) nil_chk(snum))->mantissa_;
    fraction_ = snum->fraction_;
    decplaces_ = snum->decplaces_;
    bigNumber_ = (snum->bigNumber_ == nil) ? nil : [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:snum->bigNumber_];
  }
  return self;
}

- (id)initWithNSString:(NSString *)str {
  if (self = [super init]) {
    (void) [self setValueWithNSString:str withBoolean:NO];
  }
  return self;
}

- (id)initWithNSString:(NSString *)str
           withBoolean:(BOOL)javaparsecompat {
  if (self = [super init]) {
    (void) [self setValueWithNSString:str withBoolean:javaparsecompat];
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)chars
                withInt:(int)pos
                withInt:(int)len {
  if (self = [super init]) {
    [self setValueExWithCharArray:chars withInt:pos withInt:len withBoolean:NO withBoolean:NO];
  }
  return self;
}

- (id)initWithLong:(long long int)mantissa
          withLong:(long long int)fraction
           withInt:(int)decplaces {
  if (self = [super init]) {
    self->mantissa_ = mantissa;
    self->fraction_ = fraction;
    self->decplaces_ = decplaces;
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)chars
                withInt:(int)pos
                withInt:(int)len
            withBoolean:(BOOL)javaparsecompat {
  if (self = [super init]) {
    (void) [self setValueWithCharArray:chars withInt:pos withInt:len withBoolean:javaparsecompat];
  }
  return self;
}

+ (void)setMaxDigitsWithInt:(int)max {
  if ((max > 1) && (max < 20)) {
    RAREUTSNumber_maxDigits_ = max;
  }
}

+ (int)getMaxDigits {
  return RAREUTSNumber_maxDigits_;
}

- (RAREUTSNumber *)addWithDouble:(double)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) addWithDouble:num];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithDouble:num];
  return [self addWithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)addWithInt:(int)num {
  return [self addWithLong:(long long int) num];
}

- (RAREUTSNumber *)addWithLong:(long long int)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) addWithLong:num];
  }
  if (bigNumber_ != nil) {
    bigNumber_ = [bigNumber_ addWithRAREUTSDecimal:[self valueOfWithDouble:num]];
    return self;
  }
  if ((mantissa_ >= JavaLangInteger_MAX_VALUE) || (mantissa_ >= JavaLangInteger_MIN_VALUE) || (num >= JavaLangInteger_MAX_VALUE) || (num >= JavaLangInteger_MIN_VALUE)) {
    return [self addWithRAREUTSDecimal:[RAREUTSDecimal valueOfWithLong:num]];
  }
  mantissa_ += num;
  return self;
}

- (RAREUTSNumber *)addWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) addWithRAREUTSNumber:snum];
  }
  if ((bigNumber_ != nil) || (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ != nil)) {
    RAREUTSDecimal *bd2 = (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ == nil) ? [RAREUTSDecimal valueOfWithRAREUTSNumber:snum] : snum->bigNumber_;
    RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
    bd1 = [bd1 addWithRAREUTSDecimal:bd2];
    [self fromSDecimalWithRAREUTSDecimal:bd1];
    return self;
  }
  if ((((RAREUTSNumber *) nil_chk(snum))->mantissa_ == 0) && (snum->fraction_ == 0)) {
    return self;
  }
  if ((mantissa_ == 0) && (fraction_ == 0)) {
    mantissa_ = snum->mantissa_;
    fraction_ = snum->fraction_;
    decplaces_ = snum->decplaces_;
    return self;
  }
  if ((mantissa_ >= JavaLangInteger_MAX_VALUE) || (mantissa_ < JavaLangInteger_MIN_VALUE) || (snum->mantissa_ >= JavaLangInteger_MAX_VALUE) || (snum->mantissa_ <= JavaLangInteger_MIN_VALUE)) {
    return [self addWithRAREUTSDecimal:[RAREUTSDecimal valueOfWithRAREUTSNumber:snum]];
  }
  do {
    long long int num;
    long long int base;
    long long int n;
    if (((mantissa_ <= 0) && (fraction_ <= 0) && ((snum->mantissa_ <= 0) && (snum->fraction_ <= 0))) || ((mantissa_ >= 0) && (fraction_ >= 0) && ((snum->mantissa_ >= 0) && (snum->fraction_ >= 0)))) {
      num = snum->fraction_;
      n = decplaces_ - snum->decplaces_;
      if (n < 0) {
        fraction_ *= [RAREUTSNumber tenpowWithLong:-n];
        decplaces_ = snum->decplaces_;
      }
      else if (n > 0) {
        num = snum->fraction_ * [RAREUTSNumber tenpowWithLong:n];
      }
      mantissa_ += snum->mantissa_;
      fraction_ += num;
      if (fraction_ != 0) {
        base = [RAREUTSNumber tenpowWithLong:decplaces_];
        mantissa_ += (fraction_ / base);
        fraction_ = fraction_ % base;
      }
      break;
    }
    if ((mantissa_ == 0) && (fraction_ == 0)) {
      mantissa_ = snum->mantissa_;
      fraction_ = snum->fraction_;
      break;
    }
    long long int man;
    long long int frac;
    int dec;
    BOOL ineg = (mantissa_ < 0) || (fraction_ < 0);
    BOOL hneg = (snum->mantissa_ < 0) || (snum->fraction_ < 0);
    BOOL ilarger = YES;
    man = snum->mantissa_;
    frac = snum->fraction_;
    dec = snum->decplaces_;
    n = decplaces_ - dec;
    if (n < 0) {
      fraction_ *= [RAREUTSNumber tenpowWithLong:-n];
      decplaces_ = dec;
    }
    else if (n > 0) {
      frac = frac * [RAREUTSNumber tenpowWithLong:n];
    }
    if (ineg || hneg) {
      mantissa_ *= ((mantissa_ < 0) ? (-1) : 1);
      fraction_ *= ((fraction_ < 0) ? (-1) : 1);
      man *= ((man < 0) ? (-1) : 1);
      frac *= ((frac < 0) ? (-1) : 1);
      do {
        if ((man < mantissa_) || ((frac < fraction_) && (man == mantissa_))) {
          if (hneg || ineg) {
            man *= -1;
            frac *= -1;
          }
          break;
        }
        num = man;
        man = mantissa_;
        mantissa_ = num;
        num = frac;
        frac = fraction_;
        fraction_ = num;
        ilarger = NO;
        man *= -1;
        frac *= -1;
      }
      while (NO);
    }
    if (mantissa_ != 0) {
      mantissa_--;
      fraction_ += [RAREUTSNumber tenpowWithLong:decplaces_];
    }
    mantissa_ += man;
    fraction_ += frac;
    if (fraction_ != 0) {
      base = [RAREUTSNumber tenpowWithLong:decplaces_];
      mantissa_ += (fraction_ / base);
      fraction_ = fraction_ % base;
      n = (fraction_ < 0) ? (fraction_ * -1) : fraction_;
      while ((n > 0) && ((n % 10) == 0)) {
        n /= 10;
        decplaces_--;
      }
      fraction_ = (fraction_ < 0) ? (n * -1) : n;
      if ((mantissa_ > 0) && (fraction_ < 0)) {
        fraction_ *= -1;
      }
    }
    if (ilarger) {
      if (ineg) {
        mantissa_ *= ((mantissa_ > 0) ? (-1) : 1);
        fraction_ *= ((fraction_ > 0) ? (-1) : 1);
      }
    }
    else {
      if (hneg) {
        mantissa_ *= ((mantissa_ > 0) ? (-1) : 1);
        fraction_ *= ((fraction_ > 0) ? (-1) : 1);
      }
    }
  }
  while (NO);
  return self;
}

- (RAREUTSNumber *)addWithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) addWithNSString:str];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithNSString:str];
  return [self addWithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)and__WithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) and__WithRAREUTSNumber:snum];
  }
  if (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ != nil) {
    bigNumber_ = [self toSDecimal];
  }
  if (bigNumber_ != nil) {
    bigNumber_ = [bigNumber_ and__WithRAREUTSDecimal:[snum toSDecimal]];
    return self;
  }
  mantissa_ = mantissa_ & snum->mantissa_;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

- (RAREUTSNumber *)and__WithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) and__WithNSString:str];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithNSString:str];
  return [self and__WithRAREUTSNumber:snum];
}

+ (BOOL)booleanValueWithId:(id)bol {
  if (bol == nil) {
    return NO;
  }
  if ([bol isKindOfClass:[JavaLangBoolean class]]) {
    return [((JavaLangBoolean *) check_class_cast(bol, [JavaLangBoolean class])) booleanValue];
  }
  if ([bol isKindOfClass:[NSNumber class]]) {
    return [((NSNumber *) check_class_cast(bol, [NSNumber class])) intValue] != 0;
  }
  return [RAREUTSNumber booleanValueWithNSString:[nil_chk(bol) description]];
}

+ (BOOL)booleanValueWithNSString:(NSString *)str {
  if ((str == nil) || ([str sequenceLength] == 0)) {
    return NO;
  }
  if ([((NSString *) nil_chk(str)) equalsIgnoreCase:@"true"]) {
    return YES;
  }
  return [RAREUTSNumber longValueWithNSString:str] != 0;
}

+ (NSString *)bytesToHexStringWithByteArray:(IOSByteArray *)b {
  return [RAREUTSNumber bytesToHexStringWithByteArray:b withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(b)) count]];
}

+ (NSString *)bytesToHexStringWithByteArray:(IOSByteArray *)b
                                    withInt:(int)pos
                                    withInt:(int)len {
  IOSCharArray *buf = [IOSCharArray arrayWithLength:len * 2];
  for (int i = 0; i < len; i++) {
    (*IOSCharArray_GetRef(buf, i * 2)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_hexDigits_), (IOSByteArray_Get(nil_chk(b), i + pos) & (int) 0xff) >> 4);
    (*IOSCharArray_GetRef(buf, (i * 2) + 1)) = IOSCharArray_Get(RAREUTSNumber_hexDigits_, IOSByteArray_Get(b, i + pos) & (int) 0xf);
  }
  return [NSString stringWithCharacters:buf];
}

+ (NSString *)charsToHexStringWithCharArray:(IOSCharArray *)b {
  return [RAREUTSNumber charsToHexStringWithCharArray:b withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(b)) count]];
}

+ (NSString *)charsToHexStringWithCharArray:(IOSCharArray *)b
                                    withInt:(int)pos
                                    withInt:(int)len {
  IOSCharArray *buf = [IOSCharArray arrayWithLength:len * 2];
  for (int i = 0; i < len; i++) {
    (*IOSCharArray_GetRef(buf, i * 2)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_hexDigits_), (IOSCharArray_Get(nil_chk(b), i + pos) & (int) 0xff) >> 4);
    (*IOSCharArray_GetRef(buf, (i * 2) + 1)) = IOSCharArray_Get(RAREUTSNumber_hexDigits_, IOSCharArray_Get(b, i + pos) & (int) 0xf);
  }
  return [NSString stringWithCharacters:buf];
}

- (id)clone {
  return [[RAREUTSNumber alloc] initWithRAREUTSNumber:self];
}

- (int)compareToWithId:(id)obj {
  RAREUTSNumber *snum = nil;
  if ([obj isKindOfClass:[RAREUTSNumber class]]) {
    snum = (RAREUTSNumber *) check_class_cast(obj, [RAREUTSNumber class]);
  }
  else if ([obj isKindOfClass:[NSNumber class]]) {
    snum = [[RAREUTSNumber alloc] initWithDouble:[((NSNumber *) check_class_cast(obj, [NSNumber class])) doubleValue]];
  }
  else {
    snum = [[RAREUTSNumber alloc] initWithNSString:[nil_chk(obj) description]];
  }
  return [self compareToWithRAREUTSNumber:snum];
}

- (int)compareToWithRAREUTSNumber:(RAREUTSNumber *)num {
  if (bigNumber_ != nil) {
    return [bigNumber_ compareToWithRAREUTSDecimal:[RAREUTSDecimal valueOfWithRAREUTSNumber:num]];
  }
  double d = ([self doubleValue] - [((RAREUTSNumber *) nil_chk(num)) doubleValue]);
  if (d == 0) {
    return 0;
  }
  return (d < 0) ? -1 : 1;
}

- (RAREUTSNumber *)createReusableInternalBuffers {
  strBuffer_ = [[RAREUTCharArray alloc] init];
  return self;
}

- (int)decimalPlaces {
  if (bigNumber_ != nil) {
    return [bigNumber_ decimalPlaces];
  }
  return decplaces_;
}

- (RAREUTSNumber *)divideWithDouble:(double)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) divideWithDouble:num];
  }
  if (num == 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSNumber_divideByZero_];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithDouble:num];
  return [self divideWithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)divideWithInt:(int)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) divideWithInt:num];
  }
  if (num == 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSNumber_divideByZero_];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithInt:num];
  return [self divideWithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)divideWithLong:(long long int)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) setValueWithLong:num];
  }
  if (num == 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSNumber_divideByZero_];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithLong:num];
  return [self divideWithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)divideWithRAREUTSDecimal:(RAREUTSDecimal *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) divideWithRAREUTSDecimal:snum];
  }
  if ([((RAREUTSDecimal *) nil_chk(snum)) isZero]) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSNumber_divideByZero_];
  }
  if ([self isZero]) {
    return self;
  }
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bd1 = [bd1 divideWithRAREUTSDecimal:snum];
  [self fromSDecimalWithRAREUTSDecimal:bd1];
  return self;
}

- (RAREUTSNumber *)divideWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) divideWithRAREUTSNumber:snum];
  }
  if ((bigNumber_ == nil) && (((RAREUTSNumber *) nil_chk(snum))->fraction_ == 0) && (snum->bigNumber_ == nil)) {
    long long int snummantissa = snum->mantissa_;
    if (snummantissa == 0) {
      @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSNumber_divideByZero_];
    }
    if ((mantissa_ == 0) && (fraction_ == 0)) {
      return self;
    }
    if (snummantissa == 1) {
      return self;
    }
    if (snummantissa == 10) {
      return [self shiftDecimalWithInt:-1];
    }
    if (snummantissa == 100) {
      return [self shiftDecimalWithInt:-2];
    }
    if (snummantissa == 1000) {
      return [self shiftDecimalWithInt:-3];
    }
    if (snummantissa == 10000) {
      return [self shiftDecimalWithInt:-4];
    }
    if (snummantissa == 2) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd2]];
    }
    if (snummantissa == 4) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd4]];
    }
    if (snummantissa == 24) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd24]];
    }
    if (snummantissa == 60) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd60]];
    }
    if (snummantissa == 128) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd128]];
    }
    if (snummantissa == 256) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd256]];
    }
    if (snummantissa == 365) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd365]];
    }
    if (snummantissa == 512) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd512]];
    }
    if (snummantissa == 1024) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd1024]];
    }
    if (snummantissa == 2048) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd2048]];
    }
    if (snummantissa == 3600) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd3600]];
    }
    if (snummantissa == 4096) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd4096]];
    }
    if (snummantissa == 8192) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd8192]];
    }
    if (snummantissa == 32768) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd32768]];
    }
    if (snummantissa == 65536) {
      return [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd65536]];
    }
  }
  if (bigNumber_ != nil) {
    if ([bigNumber_ isZero]) {
      return self;
    }
  }
  else {
    if ((mantissa_ == 0) && (fraction_ == 0)) {
      return self;
    }
  }
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bd1 = [bd1 divideWithRAREUTSNumber:snum];
  [self fromSDecimalWithRAREUTSDecimal:bd1];
  return self;
}

- (RAREUTSNumber *)divideWithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) divideWithNSString:str];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithNSString:str];
  return [self divideWithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)divideIntegerWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) divideIntegerWithRAREUTSNumber:snum];
  }
  if ((bigNumber_ == nil) && (((RAREUTSNumber *) nil_chk(snum))->fraction_ == 0)) {
    long long int snummantissa = snum->mantissa_;
    if (snummantissa == 0) {
      @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSNumber_divideByZero_];
    }
    if ((mantissa_ == 0) && (fraction_ == 0)) {
      return self;
    }
    if (snummantissa == 1) {
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 10) {
      (void) [self shiftDecimalWithInt:-1];
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 100) {
      (void) [self shiftDecimalWithInt:-2];
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 1000) {
      (void) [self shiftDecimalWithInt:-3];
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 10000) {
      (void) [self shiftDecimalWithInt:-4];
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 2) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd2]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 4) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd4]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 24) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd24]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 60) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd60]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 128) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd128]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 256) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd256]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 365) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd365]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 512) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd512]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 1024) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd1024]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 2048) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd2048]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 3600) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd3600]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 4096) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd4096]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 8192) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd8192]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 32768) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd32768]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
    if (snummantissa == 65536) {
      (void) [self multiplyWithRAREUTSDecimal:[RAREUTSDecimal bd65536]];
      if (bigNumber_ != nil) {
        (void) [bigNumber_ roundWithInt:0 withBoolean:NO];
      }
      fraction_ = 0;
      decplaces_ = 0;
      return self;
    }
  }
  if (bigNumber_ != nil) {
    if ([bigNumber_ isZero]) {
      return self;
    }
  }
  else {
    if ((mantissa_ == 0) && (fraction_ == 0)) {
      return self;
    }
  }
  RAREUTSDecimal *bd2 = (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ == nil) ? [RAREUTSDecimal valueOfWithRAREUTSNumber:snum] : snum->bigNumber_;
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bigNumber_ = [bd1 divideIntegerWithRAREUTSDecimal:bd2];
  mantissa_ = 0;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

- (double)doubleValue {
  if (bigNumber_ != nil) {
    return [bigNumber_ doubleValue];
  }
  double d = mantissa_;
  double dec = (fraction_ != 0) ? ([RAREUTSNumber negtenpowWithLong:decplaces_] * fraction_) : 0;
  d += dec;
  return d;
}

+ (double)doubleValueWithNSString:(NSString *)str {
  return [RAREUTSNumber doubleValueWithNSString:str withBoolean:NO];
}

+ (double)doubleValueWithNSString:(NSString *)str
                      withBoolean:(BOOL)javaparsecompat {
  RAREUTSNumber *snum = (RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class]);
  (void) [((RAREUTSNumber *) nil_chk(snum)) setValueWithNSString:str withBoolean:javaparsecompat];
  return [snum doubleValue];
}

+ (double)doubleValueWithLong:(long long int)mantissa
                     withLong:(long long int)fraction
                      withInt:(int)decplaces {
  double d = mantissa;
  double dec = [JavaLangStrictMath powWithDouble:10 withDouble:-decplaces] * fraction;
  d += dec;
  return d;
}

- (BOOL)equalsWithDouble:(double)num {
  if (bigNumber_ != nil) {
    return [bigNumber_ equalsWithRAREUTSDecimal:[self valueOfWithDouble:num]];
  }
  if ([self doubleValue] == num) {
    return YES;
  }
  return NO;
}

- (BOOL)equalsWithInt:(int)num {
  return [self equalsWithLong:(long long int) num];
}

- (BOOL)equalsWithLong:(long long int)num {
  if (bigNumber_ != nil) {
    return [bigNumber_ equalsWithRAREUTSDecimal:[self valueOfWithDouble:num]];
  }
  if ((mantissa_ == num) && (fraction_ == 0) && (decplaces_ == 0)) {
    return YES;
  }
  return NO;
}

- (BOOL)isEqual:(id)obj {
  if (obj == nil) {
    return NO;
  }
  RAREUTSNumber *snum = nil;
  if ([obj isKindOfClass:[RAREUTSNumber class]]) {
    snum = (RAREUTSNumber *) check_class_cast(obj, [RAREUTSNumber class]);
  }
  else {
    snum = [[RAREUTSNumber alloc] initWithNSString:[nil_chk(obj) description]];
  }
  return [self equalsWithRAREUTSNumber:snum];
}

- (BOOL)equalsWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (snum == nil) {
    return NO;
  }
  if (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ != nil) {
    bigNumber_ = [self toSDecimal];
  }
  if (bigNumber_ != nil) {
    return [bigNumber_ equalsWithRAREUTSDecimal:[snum toSDecimal]];
  }
  if ((mantissa_ == snum->mantissa_) && (fraction_ == snum->fraction_) && (decplaces_ == snum->decplaces_)) {
    return YES;
  }
  return NO;
}

- (BOOL)equalsWithLong:(long long int)mantissa
              withLong:(long long int)fraction
               withInt:(int)decplaces {
  if (bigNumber_ != nil) {
    RAREUTSNumber *num = (RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class]);
    (void) [((RAREUTSNumber *) nil_chk(num)) setValueWithLong:mantissa withLong:fraction withInt:decplaces];
    return [bigNumber_ equalsWithRAREUTSDecimal:[RAREUTSDecimal valueOfWithRAREUTSNumber:num]];
  }
  if ((self->mantissa_ == mantissa) && (self->fraction_ == fraction) && (self->decplaces_ == decplaces)) {
    return YES;
  }
  return NO;
}

- (float)floatValue {
  return (float) [self doubleValue];
}

+ (float)floatValueWithNSString:(NSString *)str {
  return [RAREUTSNumber floatValueWithNSString:str withBoolean:NO];
}

+ (float)floatValueWithNSString:(NSString *)str
                    withBoolean:(BOOL)javaparsecompat {
  RAREUTSNumber *snum = (RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class]);
  (void) [((RAREUTSNumber *) nil_chk(snum)) setValueWithNSString:str withBoolean:javaparsecompat];
  return [snum floatValue];
}

+ (float)floatValueWithCharArray:(IOSCharArray *)chars
                         withInt:(int)pos
                         withInt:(int)len
                     withBoolean:(BOOL)javaparsecompat {
  RAREUTSNumber *snum = (RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class]);
  (void) [((RAREUTSNumber *) nil_chk(snum)) setValueWithCharArray:chars withInt:pos withInt:len withBoolean:javaparsecompat];
  return [snum floatValue];
}

+ (int)fractionToStringWithLong:(long long int)fraction
                        withInt:(int)decplaces
                  withCharArray:(IOSCharArray *)chars
                        withInt:(int)pos {
  if (fraction == 0) {
    return 0;
  }
  if ((fraction < 10) && (decplaces == 1)) {
    (*IOSCharArray_GetRef(nil_chk(chars), pos)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (unichar) fraction);
    return 1;
  }
  long long int frac = (fraction < 0) ? -fraction : fraction;
  int len = [RAREUTSNumber stringSizeWithLong:fraction];
  int cl = decplaces - len;
  if (cl > 0) {
    int i = 0;
    while (i < cl) {
      (*IOSCharArray_GetRef(nil_chk(chars), pos++)) = RAREUTSNumber_ZERO_DIGIT_;
      i++;
    }
  }
  [RAREUTSNumber getCharsWithLong:frac withInt:pos + len withCharArray:chars];
  return decplaces;
}

- (long long int)fractionValue {
  if (bigNumber_ != nil) {
    return [bigNumber_ fractionValue];
  }
  long long int f = fraction_;
  if (f != 0) {
    int fsize = [RAREUTSNumber stringSizeWithLong:f];
    int cl = decplaces_ - fsize;
    if (cl > 0) {
      f *= [RAREUTSNumber tenpowWithLong:cl];
    }
  }
  return f;
}

- (NSString *)fractionValueString {
  if (bigNumber_ != nil) {
    return [bigNumber_ fractionValueString];
  }
  RAREUTCharArray *out = strBuffer_;
  if ((decplaces_ == 0) || (fraction_ == 0)) {
    return @"";
  }
  if (out == nil) {
    out = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadBuffer_)) get], [RAREUTCharArray class]);
  }
  (void) [self toStringWithRAREUTCharArray:out withBoolean:NO];
  int n = [((RAREUTCharArray *) nil_chk(out)) indexOfWithChar:RAREUTSNumber_DECIMAL_POINT_];
  return (n == -1) ? @"" : [out substringWithInt:n + 1];
}

- (long long int)fractionalPart {
  if (bigNumber_ != nil) {
    return [bigNumber_ fractionValue];
  }
  return fraction_;
}

+ (RAREUTSNumber *)fromStreamWithRAREUTSNumber:(RAREUTSNumber *)val
                         withJavaIoInputStream:(JavaIoInputStream *)inArg {
  return [RAREUTSNumber readSNumberWithJavaIoInputStream:inArg];
}

- (NSNumber *)getNumber {
  if (bigNumber_ != nil) {
    return [bigNumber_ getBigDecimal];
  }
  if (decplaces_ == 0) {
    return [JavaLangLong valueOfWithLong:mantissa_];
  }
  return [JavaLangDouble valueOfWithDouble:[self doubleValue]];
}

- (BOOL)gtWithDouble:(double)num {
  if ([self doubleValue] > num) {
    return YES;
  }
  return NO;
}

- (BOOL)gtWithInt:(int)num {
  return [self gtWithLong:(long long int) num];
}

- (BOOL)gtWithLong:(long long int)num {
  if (bigNumber_ != nil) {
    return [bigNumber_ gtWithRAREUTSDecimal:[self valueOfWithDouble:num]];
  }
  if (mantissa_ > num) {
    return YES;
  }
  if (mantissa_ < num) {
    return NO;
  }
  if (fraction_ == 0) {
    return NO;
  }
  if (fraction_ < 0) {
    return NO;
  }
  return YES;
}

- (BOOL)gtWithRAREUTSNumber:(RAREUTSNumber *)snum {
  return [self doubleValue] > [((RAREUTSNumber *) nil_chk(snum)) doubleValue];
}

- (NSUInteger)hash {
  if (bigNumber_ != nil) {
    return [bigNumber_ hash];
  }
  return (int) (mantissa_ ^ fraction_) * decplaces_;
}

+ (IOSByteArray *)hexStringToBytesWithNSString:(NSString *)str {
  IOSCharArray *b = [((NSString *) nil_chk(str)) toCharArray];
  return [RAREUTSNumber hexStringToBytesWithCharArray:b withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(b)) count]];
}

+ (IOSByteArray *)hexStringToBytesWithCharArray:(IOSCharArray *)chars
                                        withInt:(int)pos
                                        withInt:(int)len {
  len = len / 2;
  IOSByteArray *nb = [IOSByteArray arrayWithLength:len];
  for (int i = 0; i < len; i++) {
    (*IOSByteArray_GetRef(nb, i)) = (char) (([JavaLangCharacter digitWithChar:IOSCharArray_Get(nil_chk(chars), (i * 2) + pos) withInt:16] << 4) & (int) 0xff);
    (*IOSByteArray_GetRef(nb, i)) += (char) (([JavaLangCharacter digitWithChar:IOSCharArray_Get(chars, (i * 2) + pos + 1) withInt:16]) & (int) 0xff);
  }
  return nb;
}

+ (IOSCharArray *)hexStringToCharsWithNSString:(NSString *)str {
  IOSCharArray *b = [((NSString *) nil_chk(str)) toCharArray];
  return [RAREUTSNumber hexStringToCharsWithCharArray:b withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(b)) count]];
}

+ (IOSCharArray *)hexStringToCharsWithCharArray:(IOSCharArray *)chars
                                        withInt:(int)pos
                                        withInt:(int)len {
  len = len / 2;
  IOSCharArray *nb = [IOSCharArray arrayWithLength:len];
  for (int i = 0; i < len; i++) {
    (*IOSCharArray_GetRef(nb, i)) = (unichar) (([JavaLangCharacter digitWithChar:IOSCharArray_Get(nil_chk(chars), (i * 2) + pos) withInt:16] << 4) & (int) 0xff);
    (*IOSCharArray_GetRef(nb, i)) += (unichar) (([JavaLangCharacter digitWithChar:IOSCharArray_Get(chars, (i * 2) + pos + 1) withInt:16]) & (int) 0xff);
  }
  return nb;
}

+ (long long int)hexStringToLongWithCharArray:(IOSCharArray *)chars
                                      withInt:(int)pos
                                      withInt:(int)len {
  long long int num = 0;
  int n;
  len += pos;
  while (pos < len) {
    n = [JavaLangCharacter getNumericValueWithChar:IOSCharArray_Get(nil_chk(chars), pos++)];
    if ((n < 0) || (n > 15)) {
      n = 0;
    }
    num <<= 4;
    num |= (n & (int) 0xf);
  }
  return num;
}

- (int)intValue {
  if (bigNumber_ != nil) {
    return (int) [bigNumber_ longValue];
  }
  return (int) mantissa_;
}

+ (int)intValueWithNSString:(NSString *)str {
  return [((RAREUTSNumber *) nil_chk([((RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class])) setValueWithNSString:str withBoolean:NO])) intValue];
}

+ (int)intValueWithNSString:(NSString *)str
                withBoolean:(BOOL)javaparsecompat {
  return [((RAREUTSNumber *) nil_chk([((RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class])) setValueWithNSString:str withBoolean:javaparsecompat])) intValue];
}

+ (int)intValueWithCharArray:(IOSCharArray *)chars
                     withInt:(int)pos
                     withInt:(int)len
                 withBoolean:(BOOL)javaparsecompat {
  return [((RAREUTSNumber *) nil_chk([((RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class])) setValueWithCharArray:chars withInt:pos withInt:len withBoolean:javaparsecompat])) intValue];
}

+ (int)intValueExWithRAREUTSNumber:(RAREUTSNumber *)snum
                     withCharArray:(IOSCharArray *)chars
                           withInt:(int)len
                     withCharArray:(IOSCharArray *)ops
                           withInt:(int)oppos
                           withInt:(int)oplen {
  if (ops == nil) {
    oplen = 0;
  }
  if (len < 2) {
    int mantissa = 0;
    mantissa = (len == 0) ? 0 : [JavaLangCharacter getNumericValueWithChar:IOSCharArray_Get(nil_chk(chars), 0)];
    if ((mantissa < 0) || (mantissa > 9)) {
      mantissa = 0;
    }
    return (oplen == 0) ? mantissa : [RAREUTSNumber multiOperationWithInt:mantissa withCharArray:ops withInt:oppos withInt:oplen];
  }
  (void) [((RAREUTSNumber *) nil_chk(snum)) setValueWithCharArray:chars withInt:oppos withInt:len withBoolean:NO];
  if (oplen > 0) {
    (void) [snum multiOperationWithCharArray:ops withInt:oppos withInt:oplen];
  }
  if ((snum->bigNumber_ == nil) && (snum->fraction_ == 0) && ([JavaLangMath absWithLong:snum->mantissa_] < JavaLangInteger_MAX_VALUE)) {
    return (int) snum->mantissa_;
  }
  return JavaLangInteger_MAX_VALUE;
}

- (int)intValueMax {
  if (bigNumber_ != nil) {
    BOOL n = [bigNumber_ isNegative];
    int v = (int) [bigNumber_ longValue];
    if (n && (v < 0)) {
      return v;
    }
    if (!n && (v > 0)) {
      return v;
    }
    return JavaLangInteger_MAX_VALUE;
  }
  return (mantissa_ > JavaLangInteger_MAX_VALUE) ? JavaLangInteger_MAX_VALUE : (int) mantissa_;
}

+ (int)intValueMaxWithNSString:(NSString *)str {
  if (str == nil) {
    return 0;
  }
  RAREUTSNumber *num = (RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class]);
  (void) [((RAREUTSNumber *) nil_chk(num)) setValueWithNSString:str withBoolean:NO];
  return (num->mantissa_ > JavaLangInteger_MAX_VALUE) ? JavaLangInteger_MAX_VALUE : (int) num->mantissa_;
}

- (BOOL)isBigNumber {
  return bigNumber_ != nil;
}

- (BOOL)isInteger {
  if (bigNumber_ != nil) {
    return [bigNumber_ isInteger];
  }
  if (decplaces_ == 0) {
    return YES;
  }
  return NO;
}

- (BOOL)isNegative {
  if (bigNumber_ != nil) {
    return [bigNumber_ isNegative];
  }
  if ((mantissa_ < 0) || (fraction_ < 0)) {
    return YES;
  }
  return NO;
}

+ (BOOL)isNumericWithNSString:(NSString *)str {
  return [RAREUTSNumber isNumericWithNSString:str withInt:RAREUTSNumber_ALLOW_EXPONENT];
}

+ (BOOL)isNumericWithNSString:(NSString *)str
                      withInt:(int)flags {
  if (str == nil) {
    return NO;
  }
  RAREUTCharArray *ca = [((RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadBuffer_)) get], [RAREUTCharArray class])) setWithNSString:str];
  return [RAREUTSNumber isNumericWithCharArray:((RAREUTCharArray *) nil_chk(ca))->A_ withInt:0 withInt:ca->_length_ withInt:flags];
}

+ (BOOL)isNumericWithCharArray:(IOSCharArray *)chars
                       withInt:(int)pos
                       withInt:(int)len
                       withInt:(int)flags {
  if ((chars == nil) || (len == 0)) {
    return NO;
  }
  BOOL aexponent = (flags & RAREUTSNumber_ALLOW_EXPONENT) > 0;
  BOOL trailinge = (flags & RAREUTSNumber_ALLOW_TRAILING_E) > 0;
  BOOL zeroany = (flags & RAREUTSNumber_ALLOW_ZEROS) > 0;
  BOOL esign = NO;
  BOOL decimal = NO;
  BOOL e = NO;
  int state = 0;
  int i = 0;
  unichar firstchar = 0;
  unichar lastchar = 0;
  BOOL ret = YES;
  unichar c = IOSCharArray_Get(nil_chk(chars), pos);
  if ((len == 1) && [RAREUTSNumber isNumericWithChar:c]) {
    return YES;
  }
  if (c == RAREUTSNumber_MINUS_SIGN_) {
    pos++;
    len--;
  }
  if ((flags & RAREUTSNumber_ALLOW_OPS) > 0) {
    i = 0;
    while (i < len) {
      if (((c = IOSCharArray_Get(chars, pos)) == RAREUTSNumber_MINUS_SIGN_) || (c == RAREUTSNumber_PLUS_SIGN_) || (c == '\'')) {
        pos++;
        len--;
      }
      i++;
    }
  }
  if (len == 0) {
    return NO;
  }
  lastchar = IOSCharArray_Get(chars, (pos + len) - 1);
  for (i = 0; i < len; i++) {
    c = IOSCharArray_Get(chars, i + pos);
    if (state == RAREUTSNumber_dot) {
      if (![RAREUTSNumber isNumericWithChar:c]) {
        if ([RAREUTSNumber isExponentSymbolWithChar:c withCharArray:chars withInt:i + pos withInt:len - i]) {
          if (aexponent) {
            if ((IOSCharArray_Get(chars, (i + pos) - 1) != RAREUTSNumber_DECIMAL_POINT_) && (firstchar != 0)) {
              if (IOSCharArray_Get(chars, (i + pos) - 1) != RAREUTSNumber_DECIMAL_POINT_) {
                state = RAREUTSNumber_exponent;
                e = YES;
                if (RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ != nil) {
                  i += (int) [RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ count] - 1;
                }
                continue;
              }
            }
          }
        }
        ret = NO;
        break;
      }
    }
    else if (state == RAREUTSNumber_exponent) {
      if (![RAREUTSNumber isNumericWithChar:c]) {
        if (!esign && ((c == RAREUTSNumber_PLUS_SIGN_) || (c == RAREUTSNumber_MINUS_SIGN_))) {
          esign = YES;
          continue;
        }
        ret = NO;
        break;
      }
    }
    else {
      if (![RAREUTSNumber isNumericWithChar:c]) {
        if (c == RAREUTSNumber_DECIMAL_POINT_) {
          if (firstchar == 0) {
            firstchar = RAREUTSNumber_DECIMAL_POINT_;
          }
          state = RAREUTSNumber_dot;
          decimal = YES;
          continue;
        }
        if ([RAREUTSNumber isExponentSymbolWithChar:c withCharArray:chars withInt:i + pos withInt:len - i]) {
          if (aexponent) {
            if (firstchar != 0) {
              state = RAREUTSNumber_exponent;
              e = YES;
              if (RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ != nil) {
                i += (int) [RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ count] - 1;
              }
              continue;
            }
          }
        }
        ret = NO;
        break;
      }
      else if (firstchar == 0) {
        firstchar = c;
        if ((firstchar == RAREUTSNumber_ZERO_DIGIT_) && !zeroany) {
          ret = NO;
          break;
        }
      }
      else if (!zeroany && (i == 1) && (firstchar == RAREUTSNumber_ZERO_DIGIT_) && (c == RAREUTSNumber_ZERO_DIGIT_)) {
        ret = NO;
        break;
      }
    }
  }
  if (ret) {
    if (![RAREUTSNumber isNumericWithChar:lastchar]) {
      if (!e || !trailinge || ![RAREUTSNumber isTrailingExponentWithChar:lastchar]) {
        ret = NO;
      }
    }
    else if (!zeroany && (lastchar == RAREUTSNumber_ZERO_DIGIT_) && decimal) {
      ret = NO;
    }
  }
  return ret;
}

- (BOOL)isRational {
  if (bigNumber_ != nil) {
    return [bigNumber_ scale__] != 0;
  }
  return fraction_ != 0;
}

- (BOOL)isRationalOrBigNumber {
  if (bigNumber_ != nil) {
    return YES;
  }
  return fraction_ != 0;
}

- (BOOL)isZero {
  if (bigNumber_ != nil) {
    return [bigNumber_ isZero];
  }
  if ((mantissa_ == 0) && (fraction_ == 0)) {
    return YES;
  }
  return NO;
}

- (long long int)longLongValue {
  return (bigNumber_ != nil) ? [bigNumber_ longValue] : mantissa_;
}

+ (long long int)longValueWithNSString:(NSString *)str {
  return [((RAREUTSNumber *) nil_chk([((RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class])) setValueWithNSString:str withBoolean:NO])) longLongValue];
}

+ (long long int)longValueWithNSString:(NSString *)str
                           withBoolean:(BOOL)javaparsecompat {
  return [((RAREUTSNumber *) nil_chk([((RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class])) setValueWithNSString:str withBoolean:javaparsecompat])) longLongValue];
}

+ (long long int)longValueWithCharArray:(IOSCharArray *)chars
                                withInt:(int)pos
                                withInt:(int)len
                            withBoolean:(BOOL)javaparsecompat {
  return [((RAREUTSNumber *) nil_chk([((RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class])) setValueWithCharArray:chars withInt:pos withInt:len withBoolean:javaparsecompat])) longLongValue];
}

- (BOOL)ltWithDouble:(double)num {
  if ([self doubleValue] < num) {
    return YES;
  }
  return NO;
}

- (BOOL)ltWithInt:(int)num {
  return [self ltWithLong:(long long int) num];
}

- (BOOL)ltWithLong:(long long int)num {
  if (bigNumber_ != nil) {
    return [bigNumber_ ltWithRAREUTSDecimal:[self valueOfWithDouble:num]];
  }
  if (mantissa_ < num) {
    return YES;
  }
  if (mantissa_ > num) {
    return NO;
  }
  if (fraction_ < 0) {
    return YES;
  }
  return NO;
}

- (BOOL)ltWithRAREUTSNumber:(RAREUTSNumber *)snum {
  return [self doubleValue] < [((RAREUTSNumber *) nil_chk(snum)) doubleValue];
}

- (RAREUTSNumber *)makeImmutable {
  immutable_ = YES;
  return self;
}

- (RAREUTSNumber *)modWithRAREUTSNumber:(RAREUTSNumber *)snum {
  return [self modWithRAREUTSNumber:snum withBoolean:NO];
}

- (RAREUTSNumber *)modWithRAREUTSNumber:(RAREUTSNumber *)snum
                            withBoolean:(BOOL)special {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) modWithRAREUTSNumber:snum withBoolean:special];
  }
  if ((bigNumber_ == nil) && (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ == nil) && (snum->fraction_ == 0) && (mantissa_ > -1) && (snum->mantissa_ > -1)) {
    do {
      if (snum->mantissa_ == 0) {
        @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSNumber_divideByZero_];
      }
      if ((mantissa_ == 0) || (mantissa_ == snum->mantissa_)) {
        mantissa_ = 0;
        break;
      }
      if (mantissa_ > snum->mantissa_) {
        mantissa_ -= (mantissa_ / snum->mantissa_) * snum->mantissa_;
        break;
      }
    }
    while (NO);
    return self;
  }
  RAREUTSDecimal *bd2 = (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:snum] : snum->bigNumber_;
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bigNumber_ = [bd1 modWithRAREUTSDecimal:bd2 withBoolean:special];
  mantissa_ = 0;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

- (RAREUTSNumber *)multiOperationWithCharArray:(IOSCharArray *)ops
                                       withInt:(int)pos
                                       withInt:(int)len {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithLong:mantissa_ withLong:fraction_ withInt:decplaces_]) multiOperationWithCharArray:ops withInt:pos withInt:len];
  }
  int i = pos + len - 1;
  unichar c;
  while (i >= pos) {
    c = IOSCharArray_Get(nil_chk(ops), i--);
    if (c == RAREUTSNumber_MINUS_SIGN_) {
      if (bigNumber_ != nil) {
        bigNumber_ = [bigNumber_ negate];
        return self;
      }
      mantissa_ *= -1;
      fraction_ *= -1;
    }
    else if (c == '\'') {
      if (bigNumber_ != nil) {
        mantissa_ = fraction_ = [bigNumber_ isZero] ? 0 : 1;
        bigNumber_ = nil;
      }
      if ((mantissa_ == 0) && (fraction_ == 0)) {
        mantissa_ = 1;
        fraction_ = 0;
        decplaces_ = 0;
      }
      else {
        mantissa_ = 0;
        fraction_ = 0;
        decplaces_ = 0;
        bigNumber_ = nil;
      }
    }
    else if (c != RAREUTSNumber_PLUS_SIGN_) {
      @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"The specified operation '%@' is Invalid or unsupported", [NSString stringWithCharacters:ops offset:pos length:len]]];
    }
  }
  return self;
}

- (RAREUTSNumber *)multiplyWithDouble:(double)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) multiplyWithDouble:num];
  }
  if (bigNumber_ != nil) {
    bigNumber_ = [bigNumber_ multiplyWithRAREUTSDecimal:[self valueOfWithDouble:num]];
    return self;
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithDouble:num];
  return [self multiplyWithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)multiplyWithInt:(int)num {
  return [self multiplyWithLong:(long long int) num];
}

- (RAREUTSNumber *)multiplyWithLong:(long long int)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) multiplyWithLong:num];
  }
  if (num == 1) {
    return self;
  }
  if ((num == 0) || ((mantissa_ == 0) && (fraction_ == 0))) {
    mantissa_ = 0;
    fraction_ = 0;
    decplaces_ = 0;
    bigNumber_ = nil;
    return self;
  }
  if (bigNumber_ != nil) {
    (void) [self multiplyWithRAREUTSDecimal:[self valueOfWithDouble:num]];
    return self;
  }
  if ((mantissa_ >= JavaLangInteger_MAX_VALUE) || (mantissa_ <= JavaLangInteger_MIN_VALUE) || (fraction_ >= JavaLangInteger_MAX_VALUE) || (fraction_ <= JavaLangInteger_MIN_VALUE)) {
    bigNumber_ = [self toSDecimal];
    bigNumber_ = [((RAREUTSDecimal *) nil_chk(bigNumber_)) multiplyWithRAREUTSDecimal:[self valueOfWithDouble:num]];
    return self;
  }
  BOOL neg = NO;
  long long int mant = mantissa_;
  long long int frac = (decplaces_ == 0) ? 0 : fraction_;
  if (frac < 0) {
    frac *= -1;
    neg = YES;
  }
  if (mant < 0) {
    neg = YES;
    mant *= -1;
  }
  if (num < 0) {
    neg = !neg;
    num *= -1;
  }
  mant *= num;
  frac *= num;
  mantissa_ = mant;
  fraction_ = frac;
  if (decplaces_ != 0) {
    num = [RAREUTSNumber tenpowWithLong:decplaces_];
    if (num <= fraction_) {
      mantissa_ += (fraction_ / num);
      fraction_ = fraction_ % num;
    }
    while ((fraction_ > 0) && ((fraction_ % 10) == 0)) {
      fraction_ = fraction_ / 10;
      decplaces_--;
    }
    if (decplaces_ < 0) {
      decplaces_ = 0;
    }
  }
  if (neg) {
    fraction_ *= -1;
    mantissa_ *= -1;
  }
  return self;
}

- (RAREUTSNumber *)multiplyWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) multiplyWithRAREUTSNumber:snum];
  }
  if ((bigNumber_ != nil) || (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ != nil)) {
    if ((((RAREUTSNumber *) nil_chk(snum))->bigNumber_ == nil) && (snum->fraction_ == 0) && (snum->mantissa_ == 1)) {
      return self;
    }
    if ((bigNumber_ == nil) && (fraction_ == 0) && (mantissa_ == 1)) {
      mantissa_ = 0;
      fraction_ = 0;
      decplaces_ = 0;
      (void) [self setValueWithRAREUTSDecimal:snum->bigNumber_];
      return self;
    }
    RAREUTSDecimal *bd2 = (snum->bigNumber_ == nil) ? [RAREUTSDecimal valueOfWithRAREUTSNumber:snum] : snum->bigNumber_;
    RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
    bigNumber_ = [bd1 multiplyWithRAREUTSDecimal:bd2];
    mantissa_ = 0;
    fraction_ = 0;
    decplaces_ = 0;
    return self;
  }
  if (((RAREUTSNumber *) nil_chk(snum))->decplaces_ == 0) {
    return (snum->mantissa_ == 1) ? self : [self multiplyWithLong:snum->mantissa_];
  }
  if (decplaces_ == 0) {
    long long int m = mantissa_;
    mantissa_ = snum->mantissa_;
    fraction_ = snum->fraction_;
    decplaces_ = snum->decplaces_;
    return (m == 1) ? self : [self multiplyWithLong:m];
  }
  else {
    RAREUTSNumber *num = [[RAREUTSNumber alloc] initWithRAREUTSNumber:self];
    (void) [num multiplyWithLong:snum->fraction_];
    (void) [num shiftDecimalWithInt:-snum->decplaces_];
    (void) [self multiplyWithLong:snum->mantissa_];
    (void) [self addWithRAREUTSNumber:num];
  }
  return self;
}

- (RAREUTSNumber *)multiplyWithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) multiplyWithNSString:str];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithNSString:str];
  return [self multiplyWithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)negate {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) negate];
  }
  if (bigNumber_ != nil) {
    bigNumber_ = [bigNumber_ negate];
    return self;
  }
  mantissa_ *= -1;
  fraction_ *= -1;
  return self;
}

+ (JavaMathBigDecimal *)newBigDecimalWithNSString:(NSString *)s {
  return [[JavaMathBigDecimal alloc] initWithNSString:s];
}

+ (JavaMathBigInteger *)newBigIntegerWithNSString:(NSString *)s
                                          withInt:(int)radix {
  return [[JavaMathBigInteger alloc] initWithNSString:s withInt:radix];
}

+ (RAREUTSDecimal *)newSDecimalWithNSString:(NSString *)s {
  return [[RAREUTSDecimal alloc] initWithNSString:s];
}

- (RAREUTSNumber *)not__ {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) not__];
  }
  if (bigNumber_ != nil) {
    mantissa_ = fraction_ = [bigNumber_ isZero] ? 0 : 1;
    bigNumber_ = nil;
  }
  if ((mantissa_ == 0) && (fraction_ == 0)) {
    mantissa_ = 1;
    fraction_ = 0;
    decplaces_ = 0;
  }
  else {
    mantissa_ = 0;
    fraction_ = 0;
    decplaces_ = 0;
    bigNumber_ = nil;
  }
  return self;
}

- (RAREUTSNumber *)oneOver {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) oneOver];
  }
  RAREUTSNumber *num = (RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class]);
  (void) [((RAREUTSNumber *) nil_chk(num)) setValueWithLong:1 withLong:0 withInt:0];
  num->bigNumber_ = nil;
  num = [num divideWithRAREUTSNumber:self];
  bigNumber_ = ((RAREUTSNumber *) nil_chk(num))->bigNumber_;
  mantissa_ = num->mantissa_;
  fraction_ = num->fraction_;
  decplaces_ = num->decplaces_;
  return self;
}

- (RAREUTSNumber *)or__WithDouble:(double)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) or__WithDouble:num];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithDouble:num];
  return [self or__WithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)or__WithInt:(int)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) or__WithInt:num];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithInt:num];
  return [self or__WithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)or__WithLong:(long long int)num {
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithLong:num];
  return [self or__WithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)or__WithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) or__WithRAREUTSNumber:snum];
  }
  if (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ != nil) {
    bigNumber_ = [self toSDecimal];
  }
  if (bigNumber_ != nil) {
    bigNumber_ = [bigNumber_ or__WithRAREUTSDecimal:[snum toSDecimal]];
    return self;
  }
  mantissa_ = mantissa_ | snum->mantissa_;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

- (RAREUTSNumber *)or__WithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) or__WithNSString:str];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithNSString:str];
  return [self or__WithRAREUTSNumber:snum];
}

+ (double)parseDoubleWithNSString:(NSString *)str {
  return [RAREUTSNumber doubleValueWithNSString:str];
}

+ (IOSDoubleArray *)parseDoublesWithNSString:(NSString *)s {
  if (s == nil) {
    return nil;
  }
  if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
    return [IOSDoubleArray arrayWithLength:0];
  }
  id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:s withChar:',' withBoolean:YES];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  IOSDoubleArray *a = [IOSDoubleArray arrayWithLength:len];
  for (int i = 0; i < len; i++) {
    (*IOSDoubleArray_GetRef(a, i)) = [RAREUTSNumber doubleValueWithNSString:(NSString *) check_class_cast([list getWithInt:i], [NSString class])];
  }
  return a;
}

+ (IOSFloatArray *)parseFloatsWithNSString:(NSString *)s {
  if (s == nil) {
    return nil;
  }
  if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
    return [IOSFloatArray arrayWithLength:0];
  }
  id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:s withChar:',' withBoolean:YES];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  IOSFloatArray *a = [IOSFloatArray arrayWithLength:len];
  for (int i = 0; i < len; i++) {
    (*IOSFloatArray_GetRef(a, i)) = [RAREUTSNumber floatValueWithNSString:(NSString *) check_class_cast([list getWithInt:i], [NSString class])];
  }
  return a;
}

+ (int)parseIntWithNSString:(NSString *)str {
  return (int) [RAREUTSNumber longValueWithNSString:str];
}

+ (IOSIntArray *)parseIntegersWithNSString:(NSString *)s {
  if (s == nil) {
    return nil;
  }
  if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
    return [IOSIntArray arrayWithLength:0];
  }
  id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:s withChar:',' withBoolean:YES];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  IOSIntArray *a = [IOSIntArray arrayWithLength:len];
  for (int i = 0; i < len; i++) {
    (*IOSIntArray_GetRef(a, i)) = [RAREUTSNumber intValueWithNSString:(NSString *) check_class_cast([list getWithInt:i], [NSString class])];
  }
  return a;
}

- (RAREUTSNumber *)powWithRAREUTSDecimal:(RAREUTSDecimal *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) powWithRAREUTSDecimal:snum];
  }
  if ([((RAREUTSDecimal *) nil_chk(snum)) isZero]) {
    mantissa_ = 1;
    fraction_ = 0;
    decplaces_ = 0;
  }
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bd1 = [bd1 powWithRAREUTSDecimal:snum];
  [self fromSDecimalWithRAREUTSDecimal:bd1];
  return self;
}

- (RAREUTSNumber *)powWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) powWithRAREUTSNumber:snum];
  }
  if ([((RAREUTSNumber *) nil_chk(snum)) isZero]) {
    if ([self isZero]) {
      @throw [[JavaLangArithmeticException alloc] initWithNSString:@"Illegal Value"];
    }
    mantissa_ = 1;
    fraction_ = 0;
    decplaces_ = 0;
    return self;
  }
  if (([snum fractionalPart] != 0) || [snum isNegative]) {
    double d = [self doubleValue];
    double d2 = [snum doubleValue];
    if (d2 == 0) {
      if (d == 0) {
        @throw [[JavaLangArithmeticException alloc] initWithNSString:@"Illegal Value"];
      }
      mantissa_ = 1;
      fraction_ = 0;
      decplaces_ = 0;
    }
    else {
      d = [JavaLangStrictMath powWithDouble:d withDouble:d2];
      (void) [self setValueWithDouble:d];
    }
    return self;
  }
  if ((snum->fraction_ != 0) && (snum->mantissa_ == 0)) {
    if ([self isNegative] || ((snum->fraction_ < 0) && [self isZero])) {
      @throw [[JavaLangArithmeticException alloc] initWithNSString:@"Illegal Value"];
    }
  }
  RAREUTSDecimal *bd2 = (snum->bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:snum] : snum->bigNumber_;
  if ([bd2 scale__] > 0) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSNumber_NO_POWER_FRACTION_MSG_];
  }
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bigNumber_ = [bd1 powWithRAREUTSDecimal:bd2];
  mantissa_ = 0;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

+ (RAREUTSNumber *)readSNumberWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  long long int m = 0;
  long long int f = 0;
  int d = 0;
  m = [RAREUTaStreamer readLongWithJavaIoInputStream:inArg];
  f = [RAREUTaStreamer readLongWithJavaIoInputStream:inArg];
  d = [RAREUTaStreamer readIntWithJavaIoInputStream:inArg];
  return [[RAREUTSNumber alloc] initWithLong:m withLong:f withInt:d];
}

+ (void)readSNumberWithRAREUTSNumber:(RAREUTSNumber *)use
               withJavaIoInputStream:(JavaIoInputStream *)inArg {
  long long int m = 0;
  long long int f = 0;
  int d = 0;
  m = [RAREUTaStreamer readLongWithJavaIoInputStream:inArg];
  f = [RAREUTaStreamer readLongWithJavaIoInputStream:inArg];
  d = [RAREUTaStreamer readIntWithJavaIoInputStream:inArg];
  (void) [((RAREUTSNumber *) nil_chk(use)) setValueWithLong:m withLong:f withInt:d];
}

+ (IOSObjectArray *)readSNumberArrayWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoInputStream:inArg];
  if (len == -1) {
    return nil;
  }
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[RAREUTSNumber class]]];
  for (int i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(a, i, [RAREUTSNumber readSNumberWithJavaIoInputStream:inArg]);
  }
  return a;
}

- (RAREUTSNumber *)roundWithInt:(int)places
                    withBoolean:(BOOL)up {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) roundWithInt:places withBoolean:up];
  }
  if (bigNumber_ != nil) {
    bigNumber_ = [bigNumber_ roundWithInt:places withBoolean:up];
    return self;
  }
  if (places == 0) {
    if (up && (fraction_ != 0)) {
      long long int num = [RAREUTSNumber tenpowWithLong:decplaces_ - places];
      long long int test = fraction_ % num;
      test *= ((test < 0) ? (-1) : 1);
      if (up && (test > ((num - 1) / 2))) {
        mantissa_ += ((fraction_ < 0) ? (-1) : 1);
      }
    }
    fraction_ = 0;
    decplaces_ = 0;
  }
  else if (places < decplaces_) {
    long long int num = [RAREUTSNumber tenpowWithLong:decplaces_ - places];
    long long int frac = fraction_ / num;
    long long int test = fraction_ % num;
    test *= ((test < 0) ? (-1) : 1);
    if (up && (test > ((num - 1) / 2))) {
      frac += ((fraction_ < 0) ? (-1) : 1);
    }
    fraction_ = frac;
    decplaces_ = places;
    frac *= ((frac < 0) ? (-1) : 1);
    num = [RAREUTSNumber tenpowWithLong:places];
    if (frac >= num) {
      mantissa_ += ((fraction_ < 0) ? (-1) : 1);
      decplaces_ = 0;
      fraction_ = 0;
    }
  }
  return self;
}

- (int)scale__ {
  if (bigNumber_ != nil) {
    return [bigNumber_ scale__];
  }
  return decplaces_;
}

- (RAREUTSNumber *)setScaleWithInt:(int)places {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) setScaleWithInt:places];
  }
  if (bigNumber_ != nil) {
    bigNumber_ = [bigNumber_ moveDecimalPointWithInt:places];
  }
  else if ((places < -18) || (places > 18)) {
    bigNumber_ = [((RAREUTSDecimal *) nil_chk([self toSDecimal])) moveDecimalPointWithInt:places];
  }
  else {
    decplaces_ = places;
    if (places == 0) {
      fraction_ = 0;
    }
  }
  return self;
}

- (RAREUTSNumber *)setValueWithJavaMathBigDecimal:(JavaMathBigDecimal *)num {
  if (immutable_) {
    return [[RAREUTSNumber alloc] initWithJavaMathBigDecimal:num];
  }
  if (bigNumber_ == nil) {
    bigNumber_ = [[RAREUTSDecimal alloc] initWithJavaMathBigDecimal:num];
  }
  else {
    bigNumber_ = [bigNumber_ setValueWithJavaMathBigDecimal:num];
  }
  mantissa_ = 0;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

- (RAREUTSNumber *)setValueWithJavaMathBigInteger:(JavaMathBigInteger *)num {
  if (immutable_) {
    return [[RAREUTSNumber alloc] initWithJavaMathBigInteger:num];
  }
  if (bigNumber_ == nil) {
    bigNumber_ = [[RAREUTSDecimal alloc] initWithJavaMathBigInteger:num];
  }
  else {
    bigNumber_ = [bigNumber_ setValueWithJavaMathBigInteger:num];
  }
  mantissa_ = 0;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

- (RAREUTSNumber *)setValueWithDouble:(double)num {
  return [self setValueWithDouble:num withInt:RAREUTSNumber_maxDigits_];
}

- (RAREUTSNumber *)setValueWithDouble:(double)num
                              withInt:(int)maxDecPlaces {
  if (immutable_) {
    return [[RAREUTSNumber alloc] initWithDouble:num];
  }
  mantissa_ = 0;
  fraction_ = 0;
  decplaces_ = 0;
  if ((num < JavaLangLong_MIN_VALUE) || (num > JavaLangLong_MAX_VALUE)) {
    if (bigNumber_ == nil) {
      bigNumber_ = [[RAREUTSDecimal alloc] initWithDouble:num];
    }
    else {
      bigNumber_ = [bigNumber_ setValueWithDouble:num];
    }
  }
  else {
    bigNumber_ = nil;
    mantissa_ = (long long int) num;
    if ((mantissa_ > 0) && (mantissa_ > num)) {
      mantissa_--;
    }
    else if ((mantissa_ < 0) && (mantissa_ < num)) {
      mantissa_++;
    }
    num = fmod(num, 1);
    decplaces_ = 0;
    while (((fmod(num, 1)) != 0) && (decplaces_ < 16)) {
      if (decplaces_ == maxDecPlaces) {
        break;
      }
      num *= 10;
      decplaces_++;
    }
    fraction_ = (long long int) num;
    if (fraction_ > num) {
      fraction_--;
    }
  }
  return self;
}

- (RAREUTSNumber *)setValueWithInt:(int)num {
  if (immutable_) {
    return [[RAREUTSNumber alloc] initWithInt:num];
  }
  bigNumber_ = nil;
  mantissa_ = num;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

- (RAREUTSNumber *)setValueWithLong:(long long int)num {
  if (immutable_) {
    return [[RAREUTSNumber alloc] initWithLong:num];
  }
  bigNumber_ = nil;
  mantissa_ = num;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

- (RAREUTSNumber *)setValueWithRAREUTSNumber:(RAREUTSNumber *)num {
  if (immutable_) {
    return [[RAREUTSNumber alloc] initWithRAREUTSNumber:num];
  }
  bigNumber_ = (((RAREUTSNumber *) nil_chk(num))->bigNumber_ == nil) ? nil : [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:num->bigNumber_];
  mantissa_ = num->mantissa_;
  fraction_ = num->fraction_;
  decplaces_ = num->decplaces_;
  return self;
}

- (RAREUTSNumber *)setValueWithNSString:(NSString *)str {
  (void) [self setValueWithNSString:str withBoolean:NO];
  return self;
}

- (RAREUTSNumber *)setValueWithNSString:(NSString *)str
                            withBoolean:(BOOL)javaparsecompat {
  if (![self setValueExWithNSString:str withBoolean:javaparsecompat withBoolean:NO]) {
    @throw [[JavaLangNumberFormatException alloc] init];
  }
  return self;
}

- (RAREUTSNumber *)setValueWithCharArray:(IOSCharArray *)chars
                                 withInt:(int)pos
                                 withInt:(int)len {
  if (immutable_) {
    return [[RAREUTSNumber alloc] initWithCharArray:chars withInt:pos withInt:len];
  }
  [self setValueExWithCharArray:chars withInt:pos withInt:len withBoolean:NO withBoolean:NO];
  return self;
}

- (RAREUTSNumber *)setValueWithLong:(long long int)mantissa
                           withLong:(long long int)fraction
                            withInt:(int)decplaces {
  if (immutable_) {
    return [[RAREUTSNumber alloc] initWithLong:mantissa withLong:fraction withInt:decplaces];
  }
  bigNumber_ = nil;
  self->mantissa_ = mantissa;
  self->fraction_ = fraction;
  self->decplaces_ = decplaces;
  return self;
}

- (RAREUTSNumber *)setValueWithCharArray:(IOSCharArray *)chars
                                 withInt:(int)pos
                                 withInt:(int)len
                             withBoolean:(BOOL)javaparsecompat {
  if (immutable_) {
    return [[RAREUTSNumber alloc] initWithCharArray:chars withInt:pos withInt:len withBoolean:javaparsecompat];
  }
  if (![self setValueExWithCharArray:chars withInt:pos withInt:len withBoolean:javaparsecompat withBoolean:NO]) {
    @throw [[JavaLangNumberFormatException alloc] init];
  }
  return self;
}

- (BOOL)setValueExWithNSString:(NSString *)str
                   withBoolean:(BOOL)javaparsecompat
                   withBoolean:(BOOL)trailinge {
  if (immutable_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"immutable object"];
  }
  if (str == nil) {
    bigNumber_ = nil;
    mantissa_ = 0;
    fraction_ = 0;
    decplaces_ = 0;
    return YES;
  }
  RAREUTCharArray *ca = strBuffer_;
  if (ca == nil) {
    ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadBuffer_)) get], [RAREUTCharArray class]);
  }
  (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:str];
  if (ca->_length_ == 0) {
    if (javaparsecompat) {
      return NO;
    }
    bigNumber_ = nil;
    mantissa_ = 0;
    fraction_ = 0;
    decplaces_ = 0;
    return YES;
  }
  return [self setValueExWithCharArray:ca->A_ withInt:0 withInt:ca->_length_ withBoolean:javaparsecompat withBoolean:trailinge];
}

- (BOOL)setValueExWithCharArray:(IOSCharArray *)chars
                        withInt:(int)pos
                        withInt:(int)len
                    withBoolean:(BOOL)javaparsecompat
                    withBoolean:(BOOL)trailinge {
  if (immutable_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Immutable object"];
  }
  mantissa_ = 0;
  fraction_ = 0;
  decplaces_ = 0;
  bigNumber_ = nil;
  if (len == 0) {
    return javaparsecompat ? NO : YES;
  }
  if (len == 1) {
    mantissa_ = [JavaLangCharacter getNumericValueWithChar:IOSCharArray_Get(nil_chk(chars), pos)];
    if ((mantissa_ < 0) || (mantissa_ > 9)) {
      mantissa_ = 0;
      return javaparsecompat ? NO : YES;
    }
    return YES;
  }
  if ((len == 3) && (IOSCharArray_Get(nil_chk(chars), pos) == RAREUTSNumber_DECIMAL_POINT_) && (IOSCharArray_Get(chars, pos + 1) == RAREUTSNumber_ZERO_DIGIT_) && (IOSCharArray_Get(chars, pos + 2) == '1')) {
    fraction_ = 1;
    decplaces_ = 2;
    return YES;
  }
  if ((IOSCharArray_Get(nil_chk(chars), pos) == '0') && (IOSCharArray_Get(chars, pos + 1) == 'x')) {
    @try {
      mantissa_ = [JavaLangLong parseLongWithNSString:[NSString stringWithCharacters:chars offset:pos + 2 length:len - 2] withInt:16];
      return YES;
    }
    @catch (JavaLangNumberFormatException *e) {
      return NO;
    }
  }
  BOOL neg = NO;
  int opos = pos;
  int olen = len;
  int n = pos + len;
  int exp = 0;
  unichar expchar = RAREUTSNumber_PLUS_SIGN_;
  unichar c = 0;
  int d;
  while (pos < n) {
    c = IOSCharArray_Get(chars, pos);
    if ((c == RAREUTSNumber_MINUS_SIGN_) || (c == RAREUTSNumber_PLUS_SIGN_)) {
      if (c == RAREUTSNumber_MINUS_SIGN_) {
        neg = !neg;
      }
      pos++;
    }
    else if (c == RAREUTSNumber_ZERO_DIGIT_) {
      pos++;
    }
    else {
      break;
    }
  }
  while (pos < n) {
    c = IOSCharArray_Get(chars, pos++);
    d = [JavaLangCharacter getNumericValueWithChar:c];
    if ((d < 0) || (d > 9)) {
      break;
    }
    mantissa_ *= 10;
    mantissa_ += d;
    if (mantissa_ < 0) {
      return [self setBNValueExWithCharArray:chars withInt:opos withInt:olen withBoolean:javaparsecompat];
    }
  }
  if (c == RAREUTSNumber_DECIMAL_POINT_) {
    while (pos < n) {
      c = IOSCharArray_Get(chars, pos++);
      d = [JavaLangCharacter getNumericValueWithChar:c];
      if ((d < 0) || (d > 9)) {
        break;
      }
      fraction_ *= 10;
      fraction_ += d;
      decplaces_++;
      if ((fraction_ < 0) || (decplaces_ == RAREUTSNumber_maxDigits_)) {
        return [self setBNValueExWithCharArray:chars withInt:opos withInt:olen withBoolean:javaparsecompat];
      }
    }
  }
  if ([RAREUTSNumber isExponentSymbolWithChar:c withCharArray:chars withInt:pos - 1 withInt:n - pos]) {
    if (RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ != nil) {
      pos += (int) [RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ count] - 1;
    }
    if (pos == n) {
      if (!trailinge && javaparsecompat) {
        return NO;
      }
    }
    else {
      c = IOSCharArray_Get(chars, pos++);
      if ((c == RAREUTSNumber_PLUS_SIGN_) || (c == RAREUTSNumber_MINUS_SIGN_)) {
        expchar = c;
      }
      else {
        pos--;
      }
      while (pos < n) {
        c = IOSCharArray_Get(chars, pos++);
        d = [JavaLangCharacter getNumericValueWithChar:c];
        if ((d < 0) || (d > 9)) {
          break;
        }
        exp *= 10;
        exp += d;
        if (exp < 0) {
          return [self setBNValueExWithCharArray:chars withInt:opos withInt:olen withBoolean:javaparsecompat];
        }
      }
    }
  }
  if ((c != RAREUTSNumber_DECIMAL_POINT_) && ![RAREUTSNumber isNumericWithChar:c]) {
    if (javaparsecompat) {
      return NO;
    }
  }
  while ((decplaces_ > 0) && ((fraction_ % 10) == 0)) {
    fraction_ /= 10;
    decplaces_--;
  }
  if (neg) {
    mantissa_ *= -1;
    fraction_ *= -1;
  }
  if (exp > 0) {
    exp *= ((expchar == RAREUTSNumber_MINUS_SIGN_) ? (-1) : 1);
    (void) [self shiftDecimalWithInt:exp];
  }
  if (fraction_ == 0) {
    decplaces_ = 0;
  }
  return YES;
}

- (RAREUTSNumber *)shiftDecimalWithInt:(int)places {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) shiftDecimalWithInt:places];
  }
  if (bigNumber_ != nil) {
    bigNumber_ = [bigNumber_ moveDecimalPointWithInt:places];
    return self;
  }
  if ((places == 0) || ((fraction_ == 0) && (mantissa_ == 0))) {
    return self;
  }
  if (((places < 0) && ((decplaces_ - places) >= RAREUTSNumber_maxDigits_)) || ((places > 0) && ((decplaces_ + places) >= RAREUTSNumber_maxDigits_))) {
    bigNumber_ = [self toSDecimal];
    bigNumber_ = [((RAREUTSDecimal *) nil_chk(bigNumber_)) moveDecimalPointWithInt:places];
    mantissa_ = 0;
    fraction_ = 0;
    decplaces_ = 0;
    return self;
  }
  if (places > 0) {
    return [self multiplyWithLong:[RAREUTSNumber tenpowWithLong:places]];
  }
  long long int n;
  long long int num = [RAREUTSNumber tenpowWithLong:decplaces_];
  while (places < 0) {
    n = mantissa_ % 10;
    n *= num;
    fraction_ += n;
    mantissa_ /= 10;
    num *= 10;
    decplaces_++;
    places++;
  }
  while ((decplaces_ > 0) && ((fraction_ % 10) == 0)) {
    fraction_ /= 10;
    decplaces_--;
  }
  if (fraction_ == 0) {
    decplaces_ = 0;
  }
  return self;
}

- (RAREUTSNumber *)subtractWithDouble:(double)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) subtractWithDouble:num];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithDouble:num];
  return [self subtractWithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)subtractWithInt:(int)num {
  return [self subtractWithLong:(long long int) num];
}

- (RAREUTSNumber *)subtractWithLong:(long long int)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) subtractWithLong:num];
  }
  if (bigNumber_ != nil) {
    bigNumber_ = [bigNumber_ subtractWithRAREUTSDecimal:[self valueOfWithDouble:num]];
    return self;
  }
  mantissa_ -= num;
  return self;
}

- (RAREUTSNumber *)subtractWithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) subtractWithRAREUTSNumber:snum];
  }
  if ((bigNumber_ != nil) || (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ != nil)) {
    RAREUTSDecimal *bd2 = (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ == nil) ? [RAREUTSDecimal valueOfWithRAREUTSNumber:snum] : snum->bigNumber_;
    RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
    bd1 = [bd1 subtractWithRAREUTSDecimal:bd2];
    [self fromSDecimalWithRAREUTSDecimal:bd1];
    return self;
  }
  RAREUTSNumber *snum2 = [((RAREUTSNumber *) nil_chk(snum)) negate];
  (void) [self addWithRAREUTSNumber:snum2];
  if (snum2 == snum) {
    (void) [snum negate];
  }
  return self;
}

- (RAREUTSNumber *)subtractWithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) subtractWithNSString:str];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithNSString:str];
  return [self subtractWithRAREUTSNumber:snum];
}

+ (long long int)tenpowWithLong:(long long int)p {
  if (p < RAREUTSNumber_tenlen) {
    return IOSLongArray_Get(nil_chk(RAREUTSNumber_tens_), (int) p);
  }
  int i = 0;
  p--;
  int num = 10;
  long long int l = num;
  while (i < p) {
    l *= num;
    i++;
  }
  return (p < 0) ? 1 : l;
}

- (NSString *)toFormattedStringWithNSString:(NSString *)format
                                    withInt:(int)places {
  if (bigNumber_ != nil) {
    return [bigNumber_ toFormattedStringWithNSString:format withInt:places];
  }
  IOSCharArray *chars = [IOSCharArray arrayWithLength:(RAREUTSNumber_maxDigits_ * 2) + 20];
  int mpos = (int) [chars count] / 2;
  int pos = mpos;
  int dpos = mpos;
  int len = 0;
  int i;
  long long int mant = mantissa_;
  long long int frac = fraction_;
  long long int num;
  long long int n;
  BOOL neg = NO;
  BOOL comma = [((NSString *) nil_chk(format)) indexOf:','] != -1;
  BOOL paren = [format indexOf:'P'] != -1;
  BOOL trail = [format indexOf:'T'] != -1;
  int comman = 0;
  if (places > 0) {
    n = mpos + 2 + places;
    n = (n >= ((int) [chars count] - 2)) ? ((int) [chars count] - 3) : n;
    for (i = mpos + 1; i < n; i++) {
      (*IOSCharArray_GetRef(chars, i)) = RAREUTSNumber_ZERO_DIGIT_;
    }
    places = (int) (n - (mpos + 2));
  }
  if ((mant == 0) && (frac == 0)) {
    (*IOSCharArray_GetRef(chars, --pos)) = RAREUTSNumber_ZERO_DIGIT_;
    len++;
  }
  else {
    if ((mant < 0) || (frac < 0)) {
      neg = YES;
      mant = (mant < 0) ? (-mant) : mant;
      frac = (frac < 0) ? (-frac) : frac;
    }
    i = 0;
    while ((mant > 0) && (i < RAREUTSNumber_maxDigits_)) {
      n = mant % 10;
      (*IOSCharArray_GetRef(chars, --pos)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + n);
      len++;
      i++;
      mant -= n;
      mant = mant / 10;
      if (comma) {
        comman++;
        if (comman == 3) {
          (*IOSCharArray_GetRef(chars, --pos)) = ',';
          comman = 0;
          len++;
        }
      }
    }
    if (mantissa_ == 0) {
      if (places > -1) {
        (*IOSCharArray_GetRef(chars, --pos)) = RAREUTSNumber_ZERO_DIGIT_;
      }
    }
    else if (IOSCharArray_Get(chars, pos) == ',') {
      pos++;
      len--;
    }
    if ((frac != 0) && (places != 0)) {
      (*IOSCharArray_GetRef(chars, dpos++)) = RAREUTSNumber_DECIMAL_POINT_;
      len++;
      num = [RAREUTSNumber tenpowWithLong:decplaces_ - 1];
      while ((num > 0) && (dpos < (int) [chars count])) {
        n = (int) ((frac / num) % 10);
        (*IOSCharArray_GetRef(chars, dpos++)) = (unichar) (n + RAREUTSNumber_ZERO_DIGIT_);
        len++;
        i++;
        if (num < 2) {
          break;
        }
        num = num / 10;
      }
      for (i = dpos; i < (int) [chars count]; i++) {
        (*IOSCharArray_GetRef(chars, i)) = RAREUTSNumber_ZERO_DIGIT_;
      }
      while ((dpos > 20) && (IOSCharArray_Get(chars, --dpos) == RAREUTSNumber_ZERO_DIGIT_)) {
        len--;
      }
    }
  }
  if ((fraction_ != 0) && (places > -1)) {
    len = mpos - pos + places;
    if (places > 0) {
      len++;
    }
  }
  else if ((fraction_ == 0) && (places > 0)) {
    len += (places + 1);
    (*IOSCharArray_GetRef(chars, dpos++)) = RAREUTSNumber_DECIMAL_POINT_;
  }
  if (paren) {
    if (neg) {
      (*IOSCharArray_GetRef(chars, pos + len)) = ')';
      (*IOSCharArray_GetRef(chars, --pos)) = '(';
      len += 2;
    }
    else {
      (*IOSCharArray_GetRef(chars, pos + len)) = ' ';
      (*IOSCharArray_GetRef(chars, --pos)) = ' ';
      len += 2;
    }
  }
  else if (trail) {
    if (neg) {
      (*IOSCharArray_GetRef(chars, pos + len)) = (([format indexOf:RAREUTSNumber_MINUS_SIGN_] == -1) && ((mantissa_ != 0) || (fraction_ != 0))) ? RAREUTSNumber_MINUS_SIGN_ : ' ';
      len++;
    }
    else {
      (*IOSCharArray_GetRef(chars, pos + len)) = (([format indexOf:RAREUTSNumber_PLUS_SIGN_] != -1) && ((mantissa_ != 0) || (fraction_ != 0))) ? RAREUTSNumber_PLUS_SIGN_ : ' ';
      len++;
    }
  }
  else {
    if (neg) {
      if (([format indexOf:RAREUTSNumber_MINUS_SIGN_] == -1) && ((mantissa_ != 0) || (fraction_ != 0))) {
        (*IOSCharArray_GetRef(chars, --pos)) = RAREUTSNumber_MINUS_SIGN_;
        len++;
      }
    }
    else {
      if (([format indexOf:RAREUTSNumber_PLUS_SIGN_] != -1) && ((mantissa_ != 0) || (fraction_ != 0))) {
        (*IOSCharArray_GetRef(chars, --pos)) = RAREUTSNumber_PLUS_SIGN_;
        len++;
      }
    }
  }
  return [NSString stringWithCharacters:chars offset:pos length:len];
}

- (void)toStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [RAREUTaStreamer toStreamWithLong:[self longLongValue] withJavaIoOutputStream:outArg];
  [RAREUTaStreamer toStreamWithLong:[self fractionalPart] withJavaIoOutputStream:outArg];
  [RAREUTaStreamer toStreamWithInt:[self decimalPlaces] withJavaIoOutputStream:outArg];
}

- (NSString *)description {
  if (bigNumber_ != nil) {
    return [bigNumber_ description];
  }
  if (fraction_ == 0) {
    return [RAREUTStringCache valueOfWithLong:mantissa_];
  }
  if ((mantissa_ == 0) && (fraction_ == 1)) {
    if (decplaces_ == 1) {
      return @".1";
    }
    if (decplaces_ == 2) {
      return @".01";
    }
    if (decplaces_ == 3) {
      return @".001";
    }
    if (decplaces_ == 4) {
      return @".0001";
    }
  }
  RAREUTCharArray *out = strBuffer_;
  if (out == nil) {
    out = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadBuffer_)) get], [RAREUTCharArray class]);
  }
  int msize = 0;
  if ((mantissa_ != 0) || (fraction_ == 0)) {
    msize = (mantissa_ < 0) ? [RAREUTSNumber stringSizeWithLong:-mantissa_] + 1 : [RAREUTSNumber stringSizeWithLong:mantissa_];
  }
  int fsize = 0;
  long long int frac = (fraction_ < 0) ? -fraction_ : fraction_;
  int cl = 0;
  if (fraction_ != 0) {
    fsize = [RAREUTSNumber stringSizeWithLong:fraction_];
    cl = decplaces_ - fsize;
  }
  [((RAREUTCharArray *) nil_chk(out)) ensureCapacityWithInt:fsize + msize + cl + 1];
  IOSCharArray *A = out->A_;
  if (msize > 0) {
    [RAREUTSNumber getCharsWithLong:mantissa_ withInt:msize withCharArray:A];
  }
  if (fsize > 0) {
    if ((mantissa_ == 0) && (fraction_ < 0)) {
      (*IOSCharArray_GetRef(nil_chk(A), msize++)) = RAREUTSNumber_MINUS_SIGN_;
    }
    (*IOSCharArray_GetRef(nil_chk(A), msize)) = RAREUTSNumber_DECIMAL_POINT_;
    if (cl > 0) {
      int i = 0;
      while (i < cl) {
        (*IOSCharArray_GetRef(A, ++msize)) = RAREUTSNumber_ZERO_DIGIT_;
        i++;
      }
    }
    out->_length_ = fsize + msize + 1;
    [RAREUTSNumber getCharsWithLong:frac withInt:out->_length_ withCharArray:A];
    if (cl < 0) {
      out->_length_ += cl;
    }
    cl = out->_length_;
    while (cl > 0 && IOSCharArray_Get(A, cl - 1) == '0') {
      cl--;
    }
    out->_length_ = cl;
  }
  else {
    out->_length_ = msize;
  }
  return [out description];
}

+ (NSString *)toStringWithBoolean:(BOOL)val {
  return val ? @"true" : @"false";
}

- (RAREUTCharArray *)toStringWithRAREUTCharArray:(RAREUTCharArray *)outArg {
  if (bigNumber_ != nil) {
    return [bigNumber_ toStringWithRAREUTCharArray:outArg withBoolean:NO];
  }
  int msize = 0;
  if ((mantissa_ != 0) || (fraction_ == 0)) {
    msize = (mantissa_ < 0) ? [RAREUTSNumber stringSizeWithLong:-mantissa_] + 1 : [RAREUTSNumber stringSizeWithLong:mantissa_];
  }
  int fsize = 0;
  long long int frac = (fraction_ < 0) ? -fraction_ : fraction_;
  int cl = 0;
  if (fraction_ != 0) {
    fsize = [RAREUTSNumber stringSizeWithLong:fraction_];
    cl = decplaces_ - fsize;
  }
  [((RAREUTCharArray *) nil_chk(outArg)) ensureCapacityWithInt:fsize + msize + cl + 1];
  if (msize > 0) {
    [RAREUTSNumber getCharsWithLong:mantissa_ withInt:msize withCharArray:outArg->A_];
  }
  if (fsize > 0) {
    if ((mantissa_ == 0) && (fraction_ < 0)) {
      (*IOSCharArray_GetRef(nil_chk(outArg->A_), msize++)) = RAREUTSNumber_MINUS_SIGN_;
    }
    (*IOSCharArray_GetRef(nil_chk(outArg->A_), msize)) = RAREUTSNumber_DECIMAL_POINT_;
    if (cl > 0) {
      int i = 0;
      while (i < cl) {
        (*IOSCharArray_GetRef(outArg->A_, ++msize)) = RAREUTSNumber_ZERO_DIGIT_;
        i++;
      }
    }
    outArg->_length_ = fsize + msize + 1;
    [RAREUTSNumber getCharsWithLong:frac withInt:outArg->_length_ withCharArray:outArg->A_];
    if (cl < 0) {
      outArg->_length_ += cl;
    }
  }
  else {
    outArg->_length_ = msize;
  }
  return outArg;
}

+ (NSString *)toStringWithDouble:(double)num {
  RAREUTSNumber *snum = (RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadNumber_)) get], [RAREUTSNumber class]);
  (void) [((RAREUTSNumber *) nil_chk(snum)) setValueWithDouble:num];
  return [snum description];
}

+ (NSString *)toStringWithInt:(int)num {
  return [RAREUTStringCache valueOfWithInt:num];
}

+ (NSString *)toStringWithLong:(long long int)num {
  return [RAREUTStringCache valueOfWithLong:num];
}

- (RAREUTCharArray *)toStringWithRAREUTCharArray:(RAREUTCharArray *)outArg
                                     withBoolean:(BOOL)append {
  if (bigNumber_ != nil) {
    return [bigNumber_ toStringWithRAREUTCharArray:outArg withBoolean:append];
  }
  if (!append) {
    ((RAREUTCharArray *) nil_chk(outArg))->_length_ = 0;
  }
  int msize = 0;
  if ((mantissa_ != 0) || (fraction_ == 0)) {
    msize = (mantissa_ < 0) ? [RAREUTSNumber stringSizeWithLong:-mantissa_] + 1 : [RAREUTSNumber stringSizeWithLong:mantissa_];
  }
  int fsize = 0;
  int cl = 0;
  long long int frac = (fraction_ < 0) ? -fraction_ : fraction_;
  if (fraction_ != 0) {
    fsize = [RAREUTSNumber stringSizeWithLong:fraction_];
    cl = decplaces_ - fsize;
  }
  int len = ((RAREUTCharArray *) nil_chk(outArg))->_length_;
  msize += len;
  [outArg ensureCapacityWithInt:msize + fsize + cl + 1];
  if (msize != len) {
    [RAREUTSNumber getCharsWithLong:mantissa_ withInt:msize withCharArray:outArg->A_];
  }
  if (fsize > 0) {
    if ((mantissa_ == 0) && (fraction_ < 0)) {
      (*IOSCharArray_GetRef(nil_chk(outArg->A_), msize++)) = RAREUTSNumber_MINUS_SIGN_;
    }
    (*IOSCharArray_GetRef(nil_chk(outArg->A_), msize)) = RAREUTSNumber_DECIMAL_POINT_;
    if (cl > 0) {
      int i = 0;
      while (i < cl) {
        (*IOSCharArray_GetRef(outArg->A_, ++msize)) = RAREUTSNumber_ZERO_DIGIT_;
        i++;
      }
    }
    outArg->_length_ = fsize + msize + 1;
    [RAREUTSNumber getCharsWithLong:frac withInt:outArg->_length_ withCharArray:outArg->A_];
    if (cl < 0) {
      outArg->_length_ += cl;
    }
  }
  else {
    outArg->_length_ = msize;
  }
  return outArg;
}

- (NSString *)toStringExWithRAREUTCharArray:(RAREUTCharArray *)tmp {
  if (bigNumber_ != nil) {
    return [((RAREUTCharArray *) nil_chk([bigNumber_ toStringWithRAREUTCharArray:tmp])) description];
  }
  if (fraction_ == 0) {
    return [RAREUTStringCache valueOfWithLong:mantissa_];
  }
  if ((mantissa_ == 0) && (fraction_ == 1)) {
    if (decplaces_ == 1) {
      return RAREUTSNumber_POINT_ONE_;
    }
    if (decplaces_ == 2) {
      return RAREUTSNumber_POINT_ZERO_ONE_;
    }
    if (decplaces_ == 3) {
      return RAREUTSNumber_POINT_ZERO_ZERO_ONE_;
    }
    if (decplaces_ == 4) {
      return RAREUTSNumber_POINT_ZERO_ZERO_ZERO_ONE_;
    }
  }
  int msize = 0;
  if ((mantissa_ != 0) || (fraction_ == 0)) {
    msize = (mantissa_ < 0) ? [RAREUTSNumber stringSizeWithLong:-mantissa_] + 1 : [RAREUTSNumber stringSizeWithLong:mantissa_];
  }
  int fsize = 0;
  long long int frac = (fraction_ < 0) ? -fraction_ : fraction_;
  int cl = 0;
  if (fraction_ != 0) {
    fsize = [RAREUTSNumber stringSizeWithLong:fraction_];
    cl = decplaces_ - fsize;
  }
  [((RAREUTCharArray *) nil_chk(tmp)) ensureCapacityWithInt:fsize + msize + cl + 1];
  IOSCharArray *A = tmp->A_;
  if (msize > 0) {
    [RAREUTSNumber getCharsWithLong:mantissa_ withInt:msize withCharArray:A];
  }
  if (fsize > 0) {
    if ((mantissa_ == 0) && (fraction_ < 0)) {
      (*IOSCharArray_GetRef(nil_chk(A), msize++)) = RAREUTSNumber_MINUS_SIGN_;
    }
    (*IOSCharArray_GetRef(nil_chk(A), msize)) = RAREUTSNumber_DECIMAL_POINT_;
    if (cl > 0) {
      int i = 0;
      while (i < cl) {
        (*IOSCharArray_GetRef(A, ++msize)) = RAREUTSNumber_ZERO_DIGIT_;
        i++;
      }
    }
    msize = fsize + msize + 1;
    [RAREUTSNumber getCharsWithLong:frac withInt:msize withCharArray:A];
    if (cl < 0) {
      msize += cl;
    }
  }
  return [NSString stringWithCharacters:A offset:0 length:msize];
}

+ (int)toUnsignedStringWithLong:(long long int)i
                  withCharArray:(IOSCharArray *)buf
                        withInt:(int)pos {
  if (i < 0) {
    i = -i;
  }
  int len = [RAREUTSNumber stringSizeWithLong:i];
  [RAREUTSNumber getCharsWithLong:i withInt:pos + len withCharArray:buf];
  return len;
}

+ (int)toUnsignedStringWithLong:(long long int)i
                        withInt:(int)radix
            withRAREUTCharArray:(RAREUTCharArray *)ca
                        withInt:(int)pos {
  if ((radix < JavaLangCharacter_MIN_RADIX) || (radix > JavaLangCharacter_MAX_RADIX)) {
    radix = 10;
  }
  (void) [((RAREUTCharArray *) nil_chk(ca)) setLengthWithInt:pos + 65];
  IOSCharArray *buf = ca->A_;
  int charPos = pos + 64;
  if (i > 0) {
    i = -i;
  }
  while (i <= -radix) {
    (*IOSCharArray_GetRef(nil_chk(buf), charPos--)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_digits_), (int) (-(i % radix)));
    i = i / radix;
  }
  (*IOSCharArray_GetRef(nil_chk(buf), charPos)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_digits_), (int) (-i));
  (void) [ca removeWithInt:pos withInt:charPos];
  return (ca->_length_ - pos);
}

+ (int)toUnsignedStringExWithLong:(long long int)i
                          withInt:(int)radix
                    withCharArray:(IOSCharArray *)buf {
  if ((radix < JavaLangCharacter_MIN_RADIX) || (radix > JavaLangCharacter_MAX_RADIX)) {
    radix = 10;
  }
  int charPos = 64;
  if (i > 0) {
    i = -i;
  }
  while (i <= -radix) {
    (*IOSCharArray_GetRef(nil_chk(buf), charPos--)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_digits_), (int) (-(i % radix)));
    i = i / radix;
  }
  (*IOSCharArray_GetRef(nil_chk(buf), charPos)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_digits_), (int) (-i));
  return charPos;
}

- (RAREUTSNumber *)xor__WithInt:(int)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) xor__WithInt:num];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithInt:num];
  return [self xor__WithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)xor__WithLong:(long long int)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) xor__WithLong:num];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithLong:num];
  return [self xor__WithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)xor__WithRAREUTSNumber:(RAREUTSNumber *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) xor__WithRAREUTSNumber:snum];
  }
  if (((RAREUTSNumber *) nil_chk(snum))->bigNumber_ != nil) {
    bigNumber_ = [self toSDecimal];
  }
  if (bigNumber_ != nil) {
    bigNumber_ = [bigNumber_ xor__WithRAREUTSDecimal:[snum toSDecimal]];
    return self;
  }
  mantissa_ = mantissa_ ^ snum->mantissa_;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

- (RAREUTSNumber *)xor__WithNSString:(NSString *)str {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) xor__WithNSString:str];
  }
  RAREUTSNumber *snum = [[RAREUTSNumber alloc] initWithNSString:str];
  return [self xor__WithRAREUTSNumber:snum];
}

- (RAREUTSNumber *)zero {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) zero];
  }
  mantissa_ = 0;
  fraction_ = 0;
  decplaces_ = 0;
  bigNumber_ = nil;
  return self;
}

+ (void)getCharsWithLong:(long long int)i
                 withInt:(int)index
           withCharArray:(IOSCharArray *)buf {
  long long int q;
  int r;
  int charPos = index;
  unichar sign = 0;
  if (i < 0) {
    sign = RAREUTSNumber_MINUS_SIGN_;
    i = -i;
  }
  while (i > JavaLangInteger_MAX_VALUE) {
    q = i / 100;
    r = (int) (i - (((long long) (((uint64_t) q) << 6)) + ((long long) (((uint64_t) q) << 5)) + ((long long) (((uint64_t) q) << 2))));
    i = q;
    (*IOSCharArray_GetRef(nil_chk(buf), --charPos)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_DigitOnes_), r);
    (*IOSCharArray_GetRef(buf, --charPos)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_DigitTens_), r);
  }
  int q2;
  int i2 = (int) i;
  while (i2 >= 65536) {
    q2 = i2 / 100;
    r = i2 - ((q2 << 6) + (q2 << 5) + (q2 << 2));
    i2 = q2;
    (*IOSCharArray_GetRef(nil_chk(buf), --charPos)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_DigitOnes_), r);
    (*IOSCharArray_GetRef(buf, --charPos)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_DigitTens_), r);
  }
  for (; ; ) {
    q2 = (int) (((unsigned int) (i2 * 52429)) >> (16 + 3));
    r = i2 - ((q2 << 3) + (q2 << 1));
    (*IOSCharArray_GetRef(nil_chk(buf), --charPos)) = IOSCharArray_Get(nil_chk(RAREUTSNumber_digits_), r);
    i2 = q2;
    if (i2 == 0) {
      break;
    }
  }
  if (sign != 0) {
    (*IOSCharArray_GetRef(nil_chk(buf), --charPos)) = sign;
  }
}

+ (long long int)multiplyWithLong:(long long int)mantissa
                         withLong:(long long int)fraction
                          withInt:(int)decplaces
                         withLong:(long long int)num {
  if (decplaces == 0) {
    mantissa *= num;
  }
  else {
    mantissa *= num;
    fraction *= num;
    BOOL neg = NO;
    if (fraction < 0) {
      fraction *= -1;
      neg = YES;
    }
    if (mantissa < 0) {
      neg = YES;
      mantissa *= -1;
    }
    num = [RAREUTSNumber tenpowWithLong:decplaces];
    if (num <= fraction) {
      mantissa += (fraction / num);
    }
    if (neg) {
      mantissa *= -1;
    }
  }
  return mantissa;
}

+ (double)negtenpowWithLong:(long long int)p {
  if (p < 1) {
    return 0;
  }
  if (p < RAREUTSNumber_tenlen) {
    return IOSDoubleArray_Get(nil_chk(RAREUTSNumber_fractens_), (int) p);
  }
  return [JavaLangStrictMath powWithDouble:10 withDouble:-p];
}

+ (int)stringSizeWithLong:(long long int)x {
  long long int p = 10;
  int i = 1;
  if (x < 0) {
    x = -x;
  }
  while (i < RAREUTSNumber_maxDigits_) {
    if (x < p) {
      return i;
    }
    p = 10 * p;
    i++;
  }
  return RAREUTSNumber_maxDigits_;
}

- (RAREUTSNumber *)addWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) addWithRAREUTSDecimal:num];
  }
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bd1 = [bd1 addWithRAREUTSDecimal:num];
  [self fromSDecimalWithRAREUTSDecimal:bd1];
  return self;
}

- (RAREUTSNumber *)divideIntegerWithRAREUTSDecimal:(RAREUTSDecimal *)snum {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) divideIntegerWithRAREUTSDecimal:snum];
  }
  if ([((RAREUTSDecimal *) nil_chk(snum)) isZero]) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSNumber_divideByZero_];
  }
  if (bigNumber_ != nil) {
    if ([bigNumber_ isZero]) {
      return self;
    }
  }
  else {
    if ((mantissa_ == 0) && (fraction_ == 0)) {
      return self;
    }
  }
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bd1 = [bd1 divideIntegerWithRAREUTSDecimal:snum];
  [self fromSDecimalWithRAREUTSDecimal:bd1];
  return self;
}

- (RAREUTSNumber *)modWithRAREUTSDecimal:(RAREUTSDecimal *)snum
                             withBoolean:(BOOL)special {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) modWithRAREUTSDecimal:snum withBoolean:special];
  }
  if ([((RAREUTSDecimal *) nil_chk(snum)) isZero]) {
    @throw [[JavaLangArithmeticException alloc] initWithNSString:RAREUTSNumber_divideByZero_];
  }
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bd1 = [bd1 modWithRAREUTSDecimal:snum withBoolean:special];
  [self fromSDecimalWithRAREUTSDecimal:bd1];
  return self;
}

- (RAREUTSNumber *)multiplyWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) multiplyWithRAREUTSDecimal:num];
  }
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bd1 = [bd1 multiplyWithRAREUTSDecimal:num];
  [self fromSDecimalWithRAREUTSDecimal:bd1];
  return self;
}

- (RAREUTSNumber *)setValueWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithInt:0]) setValueWithRAREUTSDecimal:num];
  }
  bigNumber_ = [[RAREUTSDecimal alloc] initWithRAREUTSDecimal:num];
  mantissa_ = 0;
  fraction_ = 0;
  decplaces_ = 0;
  return self;
}

- (RAREUTSNumber *)subtractWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  if (immutable_) {
    return [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithRAREUTSNumber:self]) subtractWithRAREUTSDecimal:num];
  }
  RAREUTSDecimal *bd1 = (bigNumber_ == nil) ? [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self] : bigNumber_;
  bd1 = [bd1 subtractWithRAREUTSDecimal:num];
  [self fromSDecimalWithRAREUTSDecimal:bd1];
  return self;
}

- (void)fromSDecimalWithRAREUTSDecimal:(RAREUTSDecimal *)num {
  mantissa_ = 0;
  fraction_ = 0;
  decplaces_ = 0;
  bigNumber_ = num;
}

+ (int)multiOperationWithInt:(int)sval
               withCharArray:(IOSCharArray *)ops
                     withInt:(int)pos
                     withInt:(int)len {
  int i = pos + len - 1;
  unichar c;
  while (i >= pos) {
    c = IOSCharArray_Get(nil_chk(ops), i--);
    if (c == RAREUTSNumber_MINUS_SIGN_) {
      sval = -sval;
    }
    else if (c == '\'') {
      sval = (sval != 0) ? 0 : 1;
    }
    else if (c == RAREUTSNumber_PLUS_SIGN_) {
    }
    else {
      @throw [[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"The specified operation '%@' is Invalid or unsupported", [NSString stringWithCharacters:ops offset:pos length:len]]];
    }
  }
  return sval;
}

- (BOOL)setBNValueExWithCharArray:(IOSCharArray *)chars
                          withInt:(int)pos
                          withInt:(int)len
                      withBoolean:(BOOL)javaparsecompat {
  bigNumber_ = [[RAREUTSDecimal alloc] initWithInt:0];
  if ([bigNumber_ setValueExWithCharArray:chars withInt:pos withInt:len withBoolean:javaparsecompat]) {
    return YES;
  }
  bigNumber_ = nil;
  return NO;
}

- (RAREUTSDecimal *)toSDecimal {
  if (bigNumber_ != nil) {
    return bigNumber_;
  }
  return [[RAREUTSDecimal alloc] initWithRAREUTSNumber:self];
}

+ (RAREUTSNumber *)valueOfWithJavaLangInteger:(JavaLangInteger *)number {
  if (number == nil) {
    return nil;
  }
  switch ([((JavaLangInteger *) nil_chk(number)) intValue]) {
    case 0:
    return RAREUTSNumber_ZERO_;
    case 1:
    return RAREUTSNumber_ONE_;
    default:
    return [[RAREUTSNumber alloc] initWithInt:[number intValue]];
  }
}

+ (RAREUTSNumber *)valueOfWithJavaLangLong:(JavaLangLong *)number {
  if (number == nil) {
    return nil;
  }
  long long int l = [((JavaLangLong *) nil_chk(number)) longLongValue];
  if (l == 0) {
    return RAREUTSNumber_ZERO_;
  }
  if (l == 1) {
    return RAREUTSNumber_ONE_;
  }
  return [[RAREUTSNumber alloc] initWithLong:l];
}

+ (RAREUTSNumber *)valueOfWithJavaLangDouble:(JavaLangDouble *)number {
  if (number == nil) {
    return nil;
  }
  return [[RAREUTSNumber alloc] initWithDouble:[((JavaLangDouble *) nil_chk(number)) doubleValue]];
}

+ (RAREUTSNumber *)valueOfWithJavaLangFloat:(JavaLangFloat *)number {
  if (number == nil) {
    return nil;
  }
  return [[RAREUTSNumber alloc] initWithDouble:[((JavaLangFloat *) nil_chk(number)) floatValue]];
}

+ (RAREUTSNumber *)valueOfWithNSNumber:(NSNumber *)number {
  if (number == nil) {
    return nil;
  }
  if ([number isKindOfClass:[JavaLangInteger class]]) {
    return [RAREUTSNumber valueOfWithJavaLangInteger:(JavaLangInteger *) check_class_cast(number, [JavaLangInteger class])];
  }
  if ([number isKindOfClass:[JavaLangLong class]]) {
    return [RAREUTSNumber valueOfWithJavaLangLong:(JavaLangLong *) check_class_cast(number, [JavaLangLong class])];
  }
  return [[RAREUTSNumber alloc] initWithDouble:[((NSNumber *) nil_chk(number)) doubleValue]];
}

- (RAREUTSDecimal *)valueOfWithDouble:(double)val {
  if (val == 0) {
    return [RAREUTSDecimal zeroDecimal];
  }
  if (val == 1) {
    return [RAREUTSDecimal oneDecimal];
  }
  if (sdecimal_ == nil) {
    sdecimal_ = [[RAREUTSDecimal alloc] initWithDouble:val];
  }
  else {
    sdecimal_ = [sdecimal_ setValueWithDouble:val];
  }
  return sdecimal_;
}

+ (BOOL)isNumericWithChar:(unichar)c {
  int n = [JavaLangCharacter getNumericValueWithChar:c];
  return (n > -1) && (n < 10);
}

+ (BOOL)isEqualWithFloat:(float)a
               withFloat:(float)b {
  return [JavaLangMath absWithFloat:a - b] < .0000001;
}

+ (BOOL)isEqualWithDouble:(double)a
               withDouble:(double)b {
  return [JavaLangMath absWithDouble:a - b] < .0000001;
}

+ (BOOL)isExponentSymbolWithChar:(unichar)c
                   withCharArray:(IOSCharArray *)chars
                         withInt:(int)pos
                         withInt:(int)len {
  if (RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ == nil) {
    return (c == RAREUTSNumber_EXPONENT_LOWERCASE_) || (c == RAREUTSNumber_EXPONENT_UPPERCASE_);
  }
  if (len < (int) [((IOSCharArray *) nil_chk(RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_)) count]) {
    return NO;
  }
  if (c == IOSCharArray_Get(nil_chk(RAREUTSNumber_EXPONENT_CHARS_UPPERCASE_), 0)) {
    return [RAREUTCharArray indexOfWithCharArray:chars withInt:pos withInt:(int) [RAREUTSNumber_EXPONENT_CHARS_UPPERCASE_ count] withCharArray:RAREUTSNumber_EXPONENT_CHARS_UPPERCASE_ withInt:0 withInt:(int) [RAREUTSNumber_EXPONENT_CHARS_UPPERCASE_ count] withInt:0] == 0;
  }
  if (c == IOSCharArray_Get(RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_, 0)) {
    return [RAREUTCharArray indexOfWithCharArray:chars withInt:pos withInt:(int) [RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ count] withCharArray:RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ withInt:0 withInt:(int) [RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ count] withInt:0] == 0;
  }
  return NO;
}

+ (BOOL)isTrailingExponentWithChar:(unichar)c {
  if (RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ == nil) {
    return (c == RAREUTSNumber_EXPONENT_LOWERCASE_) || (c == RAREUTSNumber_EXPONENT_UPPERCASE_);
  }
  return NO;
}

+ (JavaMathBigDecimal *)toBigDecimalWithByteArray:(IOSByteArray *)bytes
                                          withInt:(int)pos
                                          withInt:(int)len {
  int exp = IOSByteArray_Get(nil_chk(bytes), pos) & (int) 0xff;
  if (exp == (int) 0x80) {
    return [JavaMathBigDecimal ZERO];
  }
  RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadBuffer_)) get], [RAREUTCharArray class]);
  IOSCharArray *a = ((RAREUTCharArray *) nil_chk(ca))->A_;
  return [[JavaMathBigDecimal alloc] initWithCharArray:a withInt:0 withInt:[RAREUTSNumber encodedBytesToStringWithByteArray:bytes withInt:pos withInt:len withCharArray:a withInt:0 withRAREUTCharArray:ca]];
}

+ (int)toEncodedBytesWithJavaMathBigDecimal:(JavaMathBigDecimal *)value
                              withByteArray:(IOSByteArray *)outArg
                                    withInt:(int)offset
                                    withInt:(int)outDecimalPlaces
                        withRAREUTByteArray:(RAREUTByteArray *)outa {
  return [RAREUTSNumber toEncodedBytesWithNSString:[((JavaMathBigDecimal *) nil_chk(value)) toPlainString] withByteArray:outArg withInt:offset withInt:outDecimalPlaces withRAREUTByteArray:outa];
}

+ (int)toEncodedBytesWithDouble:(double)value
                  withByteArray:(IOSByteArray *)outArg
                        withInt:(int)offset
                        withInt:(int)outDecimalPlaces
            withRAREUTByteArray:(RAREUTByteArray *)outa {
  if ((value > JavaLangLong_MAX_VALUE) || (value < JavaLangLong_MIN_VALUE)) {
    return [RAREUTSNumber toEncodedBytesWithNSString:[((JavaMathBigDecimal *) [[JavaMathBigDecimal alloc] initWithDouble:value]) toPlainString] withByteArray:outArg withInt:offset withInt:outDecimalPlaces withRAREUTByteArray:outa];
  }
  long long int mantissa = 0;
  long long int fraction = 0;
  int decplaces = 0;
  mantissa = (long long int) value;
  if ((mantissa > 0) && (mantissa > value)) {
    mantissa--;
  }
  else if ((mantissa < 0) && (mantissa < value)) {
    mantissa++;
  }
  value = fmod(value, 1);
  decplaces = 0;
  while (((fmod(value, 1)) != 0) && (decplaces < 16)) {
    value *= 10;
    decplaces++;
  }
  fraction = (long long int) value;
  if (fraction > value) {
    fraction--;
  }
  if (outDecimalPlaces > -1) {
    decplaces = outDecimalPlaces;
  }
  return [RAREUTSNumber toEncodedBytesWithLong:mantissa withLong:fraction withInt:decplaces withByteArray:outArg withInt:offset withRAREUTByteArray:outa];
}

+ (int)toEncodedBytesWithNSString:(NSString *)value
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(int)offset
                          withInt:(int)outDecimalPlaces
              withRAREUTByteArray:(RAREUTByteArray *)outa {
  return [RAREUTSNumber toEncodedBytesWithCharArray:[((NSString *) nil_chk(value)) toCharArray] withInt:0 withInt:(int) [value sequenceLength] withByteArray:outArg withInt:offset withInt:outDecimalPlaces withRAREUTByteArray:outa];
}

- (int)toEncodedBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(int)offset
               withRAREUTByteArray:(RAREUTByteArray *)outa {
  if (bigNumber_ != nil) {
    RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadBuffer_)) get], [RAREUTCharArray class]);
    (void) [bigNumber_ toStringWithRAREUTCharArray:ca withBoolean:NO];
    return [RAREUTSNumber toEncodedBytesWithCharArray:((RAREUTCharArray *) nil_chk(ca))->A_ withInt:0 withInt:ca->_length_ withByteArray:outArg withInt:offset withInt:-1 withRAREUTByteArray:outa];
  }
  return [RAREUTSNumber toEncodedBytesWithLong:mantissa_ withLong:fraction_ withInt:decplaces_ withByteArray:outArg withInt:offset withRAREUTByteArray:nil];
}

+ (int)toEncodedBytesWithLong:(long long int)mantissa
                     withLong:(long long int)fraction
                      withInt:(int)decplaces
                withByteArray:(IOSByteArray *)outArg
                      withInt:(int)offset
          withRAREUTByteArray:(RAREUTByteArray *)outa {
  if ((mantissa == 0) && ((fraction == 0) || (decplaces == 0))) {
    if (outa != nil) {
      [outa ensureCapacityWithInt:offset + 2];
      outArg = outa->A_;
    }
    (*IOSByteArray_GetRef(nil_chk(outArg), offset)) = (char) (int) 0x80;
    return 1;
  }
  if (decplaces < 1) {
    fraction = 0;
    decplaces = 0;
  }
  BOOL neg = mantissa < 0;
  if (!neg) {
    neg = fraction < 0;
  }
  mantissa = neg ? -mantissa : mantissa;
  fraction = (fraction < 0) ? -fraction : fraction;
  int fdigits = (fraction == 0) ? 0 : [RAREUTSNumber stringSizeWithLong:fraction];
  int mdigits = (mantissa == 0) ? 0 : [RAREUTSNumber stringSizeWithLong:mantissa];
  int exp = mdigits - 1;
  if (mdigits == 0) {
    exp = fdigits - (decplaces + 1);
    decplaces = fdigits;
  }
  else if (decplaces == 0) {
    while (mantissa % 10 == 0) {
      mantissa /= 10;
      mdigits--;
    }
  }
  exp += (int) 0x3f;
  exp |= (int) 0x80;
  if (neg) {
    exp ^= (int) 0xff;
  }
  BOOL nibble = NO;
  int length = mdigits + decplaces;
  if (length % 2 == 1) {
    length++;
    nibble = YES;
  }
  length = length / 2;
  if (outa != nil) {
    [outa ensureCapacityWithInt:length + offset + 3];
    outArg = outa->A_;
  }
  (*IOSByteArray_GetRef(nil_chk(outArg), offset)) = (char) exp;
  offset++;
  int bpos = offset + length - 1;
  char b = 0;
  int nextDigit;
  while (decplaces-- > 0) {
    nextDigit = (int) (fraction % 10);
    if (nibble) {
      b &= (char) ((int) 0x000F);
      b |= ((char) nextDigit << 4);
      b++;
      if (neg) {
        b ^= (int) 0xff;
      }
      (*IOSByteArray_GetRef(outArg, bpos--)) = b;
      b = 0;
    }
    else {
      b &= (char) ((int) 0x00F0);
      b |= (char) nextDigit;
    }
    nibble = !nibble;
    fraction /= 10;
  }
  while (mantissa > 0) {
    nextDigit = (int) (mantissa % 10);
    if (nibble) {
      b &= (char) ((int) 0x000F);
      b |= ((char) nextDigit << 4);
      b++;
      if (neg) {
        b ^= (int) 0xff;
      }
      (*IOSByteArray_GetRef(outArg, bpos--)) = b;
      b = 0;
    }
    else {
      b &= (char) ((int) 0x00F0);
      b |= (char) nextDigit;
    }
    nibble = !nibble;
    mantissa /= 10;
  }
  if (neg) {
    bpos = offset + length;
    (*IOSByteArray_GetRef(outArg, bpos)) = (char) (int) 0xff;
    length++;
  }
  return length + 1;
}

+ (int)toEncodedBytesWithCharArray:(IOSCharArray *)chars
                           withInt:(int)pos
                           withInt:(int)len
                     withByteArray:(IOSByteArray *)outArg
                           withInt:(int)offset
                           withInt:(int)outDecimalPlaces
               withRAREUTByteArray:(RAREUTByteArray *)outa {
  BOOL neg = NO;
  if (IOSCharArray_Get(nil_chk(chars), pos) == RAREUTSNumber_MINUS_SIGN_) {
    neg = YES;
    pos++;
    len--;
  }
  int end = pos + len;
  while ((pos < end) && (IOSCharArray_Get(chars, pos) == RAREUTSNumber_ZERO_DIGIT_)) {
    pos++;
  }
  len = end - pos;
  if (len == 0) {
    if (outa != nil) {
      [outa ensureCapacityWithInt:offset + 2];
      outArg = outa->A_;
    }
    (*IOSByteArray_GetRef(nil_chk(outArg), offset)) = (char) (int) 0x80;
    return 1;
  }
  int scale_ = 0;
  while ((end > pos) && (IOSCharArray_Get(chars, end - 1) == RAREUTSNumber_ZERO_DIGIT_)) {
    scale_++;
    end--;
  }
  len = end - pos;
  int mdigits = end - pos;
  int fdigits = 0;
  int i = pos;
  int decpos = end;
  int oo = offset;
  while (i < end) {
    if (IOSCharArray_Get(chars, i) == RAREUTSNumber_DECIMAL_POINT_) {
      decpos = i;
      mdigits = i - pos;
      if (outDecimalPlaces == 0) {
        end = i;
        break;
      }
      while ((end > i) && (IOSCharArray_Get(chars, end - 1) == RAREUTSNumber_ZERO_DIGIT_)) {
        end--;
      }
      scale_ = end - i - 1;
      fdigits = scale_;
      if (mdigits == 0) {
        pos++;
        while ((pos < end) && (IOSCharArray_Get(chars, pos) == RAREUTSNumber_ZERO_DIGIT_)) {
          pos++;
          fdigits--;
        }
      }
      break;
    }
    i++;
  }
  int exp = mdigits - 1;
  if (mdigits == 0) {
    exp = fdigits - (scale_ + 1);
  }
  else if (fdigits == 0) {
    exp = mdigits + scale_ - 1;
  }
  exp += (int) 0x3f;
  exp |= (int) 0x80;
  if (neg) {
    exp ^= (int) 0xff;
  }
  int length = mdigits + fdigits;
  BOOL odd = length % 2 == 1;
  if (outa != nil) {
    [outa ensureCapacityWithInt:(length / 2) + offset + 3];
    outArg = outa->A_;
  }
  (*IOSByteArray_GetRef(nil_chk(outArg), offset)) = (char) exp;
  offset++;
  int b = 0;
  if (odd) {
    end--;
  }
  while (pos < end) {
    if (pos == decpos) {
      pos++;
      if (pos == end) {
        break;
      }
    }
    b = (IOSCharArray_Get(chars, pos++) & (int) 0x000F) << 4;
    if (pos == decpos) {
      pos++;
    }
    b += IOSCharArray_Get(chars, pos++) & (int) 0x000F;
    b++;
    if (neg) {
      b ^= (int) 0xff;
    }
    (*IOSByteArray_GetRef(outArg, offset++)) = (char) (b);
  }
  if (odd) {
    b = (IOSCharArray_Get(chars, pos++) & (int) 0x000F) << 4;
    b++;
    if (neg) {
      b ^= (int) 0xff;
    }
    (*IOSByteArray_GetRef(outArg, offset++)) = (char) (b);
  }
  if (neg) {
    (*IOSByteArray_GetRef(outArg, offset++)) = (char) (int) 0xff;
  }
  return offset - oo;
}

- (int)toEncodedCharsWithCharArray:(IOSCharArray *)outArg
                           withInt:(int)offset
               withRAREUTCharArray:(RAREUTCharArray *)outa {
  if (bigNumber_ != nil) {
    RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadBuffer_)) get], [RAREUTCharArray class]);
    (void) [bigNumber_ toStringWithRAREUTCharArray:ca withBoolean:NO];
    return [RAREUTSNumber toEncodedCharsWithCharArray:((RAREUTCharArray *) nil_chk(ca))->A_ withInt:0 withInt:ca->_length_ withCharArray:outArg withInt:offset withInt:-1 withRAREUTCharArray:outa];
  }
  return [RAREUTSNumber toEncodedCharsWithLong:mantissa_ withLong:fraction_ withInt:decplaces_ withCharArray:outArg withInt:offset withRAREUTCharArray:outa];
}

- (int)toEncodedCharsWithRAREUTCharArray:(RAREUTCharArray *)outArg {
  if (bigNumber_ != nil) {
    RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadBuffer_)) get], [RAREUTCharArray class]);
    (void) [bigNumber_ toStringWithRAREUTCharArray:ca withBoolean:NO];
    return [RAREUTSNumber toEncodedCharsWithCharArray:((RAREUTCharArray *) nil_chk(ca))->A_ withInt:0 withInt:ca->_length_ withCharArray:((RAREUTCharArray *) nil_chk(outArg))->A_ withInt:outArg->_length_ withInt:-1 withRAREUTCharArray:outArg];
  }
  return [RAREUTSNumber toEncodedCharsWithLong:mantissa_ withLong:fraction_ withInt:decplaces_ withCharArray:((RAREUTCharArray *) nil_chk(outArg))->A_ withInt:outArg->_length_ withRAREUTCharArray:outArg];
}

+ (int)toEncodedCharsWithLong:(long long int)mantissa
                     withLong:(long long int)fraction
                      withInt:(int)decplaces
                withCharArray:(IOSCharArray *)outArg
                      withInt:(int)offset
          withRAREUTCharArray:(RAREUTCharArray *)outa {
  if ((mantissa == 0) && ((fraction == 0) || (decplaces == 0))) {
    if (outa != nil) {
      [outa ensureCapacityWithInt:offset + 2];
      outArg = outa->A_;
    }
    (*IOSCharArray_GetRef(nil_chk(outArg), offset)) = (unichar) (int) 0x80;
    return 1;
  }
  if (decplaces < 1) {
    fraction = 0;
    decplaces = 0;
  }
  BOOL neg = mantissa < 0;
  if (!neg) {
    neg = fraction < 0;
  }
  mantissa = neg ? -mantissa : mantissa;
  fraction = (fraction < 0) ? -fraction : fraction;
  int fdigits = (fraction == 0) ? 0 : [RAREUTSNumber stringSizeWithLong:fraction];
  int mdigits = (mantissa == 0) ? 0 : [RAREUTSNumber stringSizeWithLong:mantissa];
  int exp = mdigits - 1;
  if (mdigits == 0) {
    exp = fdigits - (decplaces + 1);
    decplaces = fdigits;
  }
  else if (decplaces == 0) {
    while (mantissa % 10 == 0) {
      mantissa /= 10;
      mdigits--;
    }
  }
  exp += (int) 0x3f;
  exp |= (int) 0x80;
  if (neg) {
    exp ^= (int) 0xff;
  }
  BOOL nibble = NO;
  int length = mdigits + decplaces;
  if (length % 2 == 1) {
    length++;
    nibble = YES;
  }
  length = length / 2;
  if (outa != nil) {
    [outa ensureCapacityWithInt:length + offset + 3];
    outArg = outa->A_;
  }
  (*IOSCharArray_GetRef(nil_chk(outArg), offset)) = (unichar) exp;
  offset++;
  int bpos = offset + length - 1;
  unichar b = 0;
  int nextDigit;
  while (decplaces-- > 0) {
    nextDigit = (int) (fraction % 10);
    if (nibble) {
      b &= (char) ((int) 0x000F);
      b |= ((char) nextDigit << 4);
      b++;
      if (neg) {
        b ^= (int) 0xff;
      }
      (*IOSCharArray_GetRef(outArg, bpos--)) = b;
      b = 0;
    }
    else {
      b &= (char) ((int) 0x00F0);
      b |= (char) nextDigit;
    }
    nibble = !nibble;
    fraction /= 10;
  }
  while (mantissa > 0) {
    nextDigit = (int) (mantissa % 10);
    if (nibble) {
      b &= (char) ((int) 0x000F);
      b |= ((char) nextDigit << 4);
      b++;
      if (neg) {
        b ^= (int) 0xff;
      }
      (*IOSCharArray_GetRef(outArg, bpos--)) = b;
      b = 0;
    }
    else {
      b &= (char) ((int) 0x00F0);
      b |= (char) nextDigit;
    }
    nibble = !nibble;
    mantissa /= 10;
  }
  if (neg) {
    bpos = offset + length;
    (*IOSCharArray_GetRef(outArg, bpos)) = (unichar) (int) 0xff;
    length++;
  }
  return length + 1;
}

+ (int)toEncodedCharsWithCharArray:(IOSCharArray *)chars
                           withInt:(int)pos
                           withInt:(int)len
                     withCharArray:(IOSCharArray *)outArg
                           withInt:(int)offset
                           withInt:(int)outDecimalPlaces
               withRAREUTCharArray:(RAREUTCharArray *)outa {
  BOOL neg = NO;
  if (IOSCharArray_Get(nil_chk(chars), pos) == RAREUTSNumber_MINUS_SIGN_) {
    neg = YES;
    pos++;
    len--;
  }
  int end = pos + len;
  while ((pos < end) && (IOSCharArray_Get(chars, pos) == RAREUTSNumber_ZERO_DIGIT_)) {
    pos++;
  }
  len = end - pos;
  if (len == 0) {
    if (outa != nil) {
      [outa ensureCapacityWithInt:offset + 2];
      outArg = outa->A_;
    }
    (*IOSCharArray_GetRef(nil_chk(outArg), offset)) = (unichar) (int) 0x80;
    return 1;
  }
  int scale_ = 0;
  while ((end > pos) && (IOSCharArray_Get(chars, end - 1) == RAREUTSNumber_ZERO_DIGIT_)) {
    scale_++;
    end--;
  }
  len = end - pos;
  int mdigits = end - pos;
  int fdigits = 0;
  int i = pos;
  int decpos = end;
  int oo = offset;
  while (i < end) {
    if (IOSCharArray_Get(chars, i) == RAREUTSNumber_DECIMAL_POINT_) {
      decpos = i;
      mdigits = i - pos;
      if (outDecimalPlaces == 0) {
        end = i;
        break;
      }
      while ((end > i) && (IOSCharArray_Get(chars, end - 1) == RAREUTSNumber_ZERO_DIGIT_)) {
        end--;
      }
      scale_ = end - i - 1;
      fdigits = scale_;
      if (mdigits == 0) {
        pos++;
        while ((pos < end) && (IOSCharArray_Get(chars, pos) == RAREUTSNumber_ZERO_DIGIT_)) {
          pos++;
          fdigits--;
        }
      }
      break;
    }
    i++;
  }
  int exp = mdigits - 1;
  if (mdigits == 0) {
    exp = fdigits - (scale_ + 1);
  }
  else if (fdigits == 0) {
    exp = mdigits + scale_ - 1;
  }
  exp += (int) 0x3f;
  exp |= (int) 0x80;
  if (neg) {
    exp ^= (int) 0xff;
  }
  int length = mdigits + fdigits;
  BOOL odd = length % 2 == 1;
  if (outa != nil) {
    [outa ensureCapacityWithInt:(length / 2) + offset + 3];
    outArg = outa->A_;
  }
  (*IOSCharArray_GetRef(nil_chk(outArg), offset)) = (unichar) exp;
  offset++;
  int b = 0;
  if (odd) {
    end--;
  }
  while (pos < end) {
    if (pos == decpos) {
      pos++;
      if (pos == end) {
        break;
      }
    }
    b = (IOSCharArray_Get(chars, pos++) & (int) 0x000F) << 4;
    if (pos == decpos) {
      pos++;
    }
    b += IOSCharArray_Get(chars, pos++) & (int) 0x000F;
    b++;
    if (neg) {
      b ^= (int) 0xff;
    }
    (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (b);
  }
  if (odd) {
    b = (IOSCharArray_Get(chars, pos++) & (int) 0x000F) << 4;
    b++;
    if (neg) {
      b ^= (int) 0xff;
    }
    (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (b);
  }
  if (neg) {
    (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (int) 0xff;
  }
  return offset - oo;
}

+ (RAREUTSNumber *)fromEncodedBytesWithByteArray:(IOSByteArray *)bytes
                                         withInt:(int)pos
                                         withInt:(int)len {
  return [RAREUTSNumber fromEncodedBytesWithByteArray:bytes withInt:pos withInt:len withRAREUTSNumber:nil];
}

+ (RAREUTSNumber *)fromEncodedBytesWithByteArray:(IOSByteArray *)bytes
                                         withInt:(int)pos
                                         withInt:(int)len
                               withRAREUTSNumber:(RAREUTSNumber *)outArg {
  int exp = IOSByteArray_Get(nil_chk(bytes), pos) & (int) 0xff;
  if (exp == (int) 0x80) {
    return (outArg == nil) ? RAREUTSNumber_ZERO_ : [outArg setValueWithLong:0 withLong:0 withInt:0];
  }
  BOOL neg = (exp & (int) 0x80) == 0;
  if (neg) {
    exp ^= (int) 0xff;
    len--;
  }
  exp &= (int) 0x7f;
  exp -= (int) 0x3f;
  long long int mantissa = 0;
  long long int fraction = 0;
  int decplaces = 0;
  int end = len + pos;
  pos++;
  exp++;
  if (exp < 0) {
    decplaces = -exp;
  }
  char b;
  while ((pos < end) && (exp > 0)) {
    b = IOSByteArray_Get(bytes, pos++);
    b--;
    if (neg) {
      b ^= (int) 0xff;
    }
    mantissa = mantissa * 10 + ((int) (((unsigned int) (b & (int) 0xf0)) >> 4));
    exp--;
    if (exp == 0) {
      if ((pos != end) || (b & (int) 0x0f) != 0) {
        fraction = fraction * 10 + (b & (int) 0x0f);
        decplaces++;
      }
      break;
    }
    mantissa = mantissa * 10 + (b & (int) 0x0f);
    exp--;
  }
  while (exp > 0) {
    mantissa *= 10;
    exp--;
  }
  while (pos < end) {
    b = IOSByteArray_Get(bytes, pos++);
    b--;
    if (neg) {
      b ^= (int) 0xff;
    }
    fraction = fraction * 10 + ((int) (((unsigned int) (b & (int) 0xf0)) >> 4));
    decplaces++;
    if ((pos != end) || (b & (int) 0x0f) != 0) {
      fraction = fraction * 10 + (b & (int) 0x0f);
      decplaces++;
    }
  }
  return (outArg == nil) ? [[RAREUTSNumber alloc] initWithLong:mantissa withLong:fraction withInt:decplaces] : [outArg setValueWithLong:mantissa withLong:fraction withInt:decplaces];
}

+ (RAREUTSNumber *)fromEncodedCharsWithCharArray:(IOSCharArray *)chars
                                         withInt:(int)pos
                                         withInt:(int)len {
  return [RAREUTSNumber fromEncodedCharsWithCharArray:chars withInt:pos withInt:len withRAREUTSNumber:nil];
}

+ (RAREUTSNumber *)fromEncodedCharsWithCharArray:(IOSCharArray *)chars
                                         withInt:(int)pos
                                         withInt:(int)len
                               withRAREUTSNumber:(RAREUTSNumber *)outArg {
  int exp = IOSCharArray_Get(nil_chk(chars), pos) & (int) 0xff;
  if (exp == (int) 0x80) {
    return (outArg == nil) ? RAREUTSNumber_ZERO_ : [outArg setValueWithLong:0 withLong:0 withInt:0];
  }
  BOOL neg = (exp & (int) 0x80) == 0;
  if (neg) {
    exp ^= (int) 0xff;
    len--;
  }
  exp &= (int) 0x7f;
  exp -= (int) 0x3f;
  long long int mantissa = 0;
  long long int fraction = 0;
  int decplaces = 0;
  int end = len + pos;
  pos++;
  exp++;
  if (exp < 0) {
    decplaces = -exp;
  }
  unichar b;
  while ((pos < end) && (exp > 0)) {
    b = IOSCharArray_Get(chars, pos++);
    b--;
    if (neg) {
      b ^= (int) 0xff;
    }
    mantissa = mantissa * 10 + ((int) (((unsigned int) (b & (int) 0xf0)) >> 4));
    exp--;
    if (exp == 0) {
      if ((pos != end) || (b & (int) 0x0f) != 0) {
        fraction = fraction * 10 + (b & (int) 0x0f);
        decplaces++;
      }
      break;
    }
    mantissa = mantissa * 10 + (b & (int) 0x0f);
    exp--;
  }
  while (exp > 0) {
    mantissa *= 10;
    exp--;
  }
  while (pos < end) {
    b = IOSCharArray_Get(chars, pos++);
    b--;
    if (neg) {
      b ^= (int) 0xff;
    }
    fraction = fraction * 10 + ((int) (((unsigned int) (b & (int) 0xf0)) >> 4));
    decplaces++;
    if ((pos != end) || (b & (int) 0x0f) != 0) {
      fraction = fraction * 10 + (b & (int) 0x0f);
      decplaces++;
    }
  }
  return (outArg == nil) ? [[RAREUTSNumber alloc] initWithLong:mantissa withLong:fraction withInt:decplaces] : [outArg setValueWithLong:mantissa withLong:fraction withInt:decplaces];
}

+ (NSString *)encodedBytesToStringWithByteArray:(IOSByteArray *)bytes
                                        withInt:(int)pos
                                        withInt:(int)len {
  int exp = IOSByteArray_Get(nil_chk(bytes), pos) & (int) 0xff;
  if (exp == (int) 0x80) {
    return @"0";
  }
  RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadBuffer_)) get], [RAREUTCharArray class]);
  IOSCharArray *a = ((RAREUTCharArray *) nil_chk(ca))->A_;
  return [NSString stringWithCharacters:a offset:0 length:[RAREUTSNumber encodedBytesToStringWithByteArray:bytes withInt:pos withInt:len withCharArray:a withInt:0 withRAREUTCharArray:ca]];
}

+ (NSString *)encodedCharsToStringWithCharArray:(IOSCharArray *)chars
                                        withInt:(int)pos
                                        withInt:(int)len {
  int exp = IOSCharArray_Get(nil_chk(chars), pos) & (int) 0xff;
  if (exp == (int) 0x80) {
    return @"0";
  }
  RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTSNumber_perThreadBuffer_)) get], [RAREUTCharArray class]);
  IOSCharArray *a = ((RAREUTCharArray *) nil_chk(ca))->A_;
  return [NSString stringWithCharacters:a offset:0 length:[RAREUTSNumber encodedCharsToStringWithCharArray:chars withInt:pos withInt:len withCharArray:a withInt:0 withRAREUTCharArray:ca]];
}

+ (int)encodedBytesToStringWithByteArray:(IOSByteArray *)bytes
                                 withInt:(int)pos
                                 withInt:(int)len
                           withCharArray:(IOSCharArray *)outArg
                                 withInt:(int)offset
                     withRAREUTCharArray:(RAREUTCharArray *)ca {
  int exp = IOSByteArray_Get(nil_chk(bytes), pos) & (int) 0xff;
  if (exp == (int) 0x80) {
    (*IOSCharArray_GetRef(nil_chk(outArg), offset)) = RAREUTSNumber_ZERO_DIGIT_;
    return 1;
  }
  int oo = offset;
  BOOL neg = (exp & (int) 0x80) == 0;
  if (neg) {
    exp ^= (int) 0xff;
    len--;
    (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = RAREUTSNumber_MINUS_SIGN_;
  }
  exp &= (int) 0x7f;
  exp -= (int) 0x3f;
  int end = len + pos;
  pos++;
  char b = 0;
  if (ca != nil) {
    [ca ensureCapacityWithInt:offset + len + exp + 4];
    outArg = ca->A_;
  }
  if (exp < 0) {
    (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = RAREUTSNumber_DECIMAL_POINT_;
    while (exp < -1) {
      (*IOSCharArray_GetRef(outArg, offset++)) = RAREUTSNumber_ZERO_DIGIT_;
      exp++;
    }
    while (pos < end) {
      b = IOSByteArray_Get(bytes, pos++);
      b--;
      if (neg) {
        b ^= (int) 0xff;
      }
      (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + ((int) (((unsigned int) (b & (int) 0xf0)) >> 4)));
      (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
    }
    if (IOSCharArray_Get(outArg, offset - 1) == RAREUTSNumber_ZERO_DIGIT_) {
      offset--;
    }
  }
  else {
    BOOL nibble = NO;
    while ((pos < end) && (exp > -1)) {
      if (nibble) {
        (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
      }
      else {
        b = IOSByteArray_Get(bytes, pos++);
        b--;
        if (neg) {
          b ^= (int) 0xff;
        }
        (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + ((int) (((unsigned int) (b & (int) 0xf0)) >> 4)));
      }
      nibble = !nibble;
      exp--;
    }
    if (pos >= end) {
      if (nibble) {
        if (exp == -1) {
          if ((b & (int) 0x0f) != 0) {
            (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = RAREUTSNumber_DECIMAL_POINT_;
            (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
          }
        }
        else {
          (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
        }
      }
      while (exp > 0) {
        (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = RAREUTSNumber_ZERO_DIGIT_;
        exp--;
      }
    }
    else {
      (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = RAREUTSNumber_DECIMAL_POINT_;
      if (nibble) {
        (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
      }
      while (pos < end) {
        b = IOSByteArray_Get(bytes, pos++);
        b--;
        if (neg) {
          b ^= (int) 0xff;
        }
        (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + ((int) (((unsigned int) (b & (int) 0xf0)) >> 4)));
        (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
      }
      if (IOSCharArray_Get(outArg, offset - 1) == RAREUTSNumber_ZERO_DIGIT_) {
        offset--;
      }
    }
  }
  return offset - oo;
}

+ (int)encodedCharsToStringWithCharArray:(IOSCharArray *)chars
                                 withInt:(int)pos
                                 withInt:(int)len
                           withCharArray:(IOSCharArray *)outArg
                                 withInt:(int)offset
                     withRAREUTCharArray:(RAREUTCharArray *)ca {
  int exp = IOSCharArray_Get(nil_chk(chars), pos) & (int) 0xff;
  if (exp == (int) 0x80) {
    if (ca != nil) {
      [ca ensureCapacityWithInt:offset + 2];
      outArg = ca->A_;
    }
    (*IOSCharArray_GetRef(nil_chk(outArg), offset)) = RAREUTSNumber_ZERO_DIGIT_;
    return 1;
  }
  int oo = offset;
  BOOL neg = (exp & (int) 0x80) == 0;
  if (neg) {
    exp ^= (int) 0xff;
    len--;
  }
  exp &= (int) 0x7f;
  exp -= (int) 0x3f;
  int end = len + pos;
  pos++;
  unichar b = 0;
  if (ca != nil) {
    [ca ensureCapacityWithInt:offset + len + exp + 4];
    outArg = ca->A_;
  }
  if (neg) {
    (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = RAREUTSNumber_MINUS_SIGN_;
  }
  if (exp < 0) {
    (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = RAREUTSNumber_DECIMAL_POINT_;
    while (exp < -1) {
      (*IOSCharArray_GetRef(outArg, offset++)) = RAREUTSNumber_ZERO_DIGIT_;
      exp++;
    }
    while (pos < end) {
      b = IOSCharArray_Get(chars, pos++);
      b--;
      if (neg) {
        b ^= (int) 0xff;
      }
      (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + ((int) (((unsigned int) (b & (int) 0xf0)) >> 4)));
      (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
    }
    if (IOSCharArray_Get(outArg, offset - 1) == RAREUTSNumber_ZERO_DIGIT_) {
      offset--;
    }
  }
  else {
    BOOL nibble = NO;
    while ((pos < end) && (exp > -1)) {
      if (nibble) {
        (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
      }
      else {
        b = IOSCharArray_Get(chars, pos++);
        b--;
        if (neg) {
          b ^= (int) 0xff;
        }
        (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + ((int) (((unsigned int) (b & (int) 0xf0)) >> 4)));
      }
      nibble = !nibble;
      exp--;
    }
    if (pos >= end) {
      if (nibble) {
        if (exp == -1) {
          if ((b & (int) 0x0f) != 0) {
            (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = RAREUTSNumber_DECIMAL_POINT_;
            (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
          }
        }
        else {
          (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
        }
      }
      while (exp > 0) {
        (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = RAREUTSNumber_ZERO_DIGIT_;
        exp--;
      }
    }
    else {
      (*IOSCharArray_GetRef(nil_chk(outArg), offset++)) = RAREUTSNumber_DECIMAL_POINT_;
      if (nibble) {
        (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
      }
      while (pos < end) {
        b = IOSCharArray_Get(chars, pos++);
        b--;
        if (neg) {
          b ^= (int) 0xff;
        }
        (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + ((int) (((unsigned int) (b & (int) 0xf0)) >> 4)));
        (*IOSCharArray_GetRef(outArg, offset++)) = (unichar) (RAREUTSNumber_ZERO_DIGIT_ + (b & (int) 0x0f));
      }
      if (IOSCharArray_Get(outArg, offset - 1) == RAREUTSNumber_ZERO_DIGIT_) {
        offset--;
      }
    }
  }
  return offset - oo;
}

+ (void)initialize {
  if (self == [RAREUTSNumber class]) {
    RAREUTSNumber_ZERO_ = [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithInt:0]) makeImmutable];
    RAREUTSNumber_ONE_ = [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithInt:1]) makeImmutable];
    {
      int i = 0;
      RAREUTSNumber_tens_ = [IOSLongArray arrayWithLength:RAREUTSNumber_tenlen];
      while (i < RAREUTSNumber_tenlen) {
        (*IOSLongArray_GetRef(RAREUTSNumber_tens_, i)) = (long long int) [JavaLangStrictMath powWithDouble:10 withDouble:i];
        i++;
      }
      RAREUTSNumber_fractens_ = [IOSDoubleArray arrayWithLength:RAREUTSNumber_tenlen];
      i = 0;
      while (i < RAREUTSNumber_tenlen) {
        (*IOSDoubleArray_GetRef(RAREUTSNumber_fractens_, i)) = [JavaLangStrictMath powWithDouble:10 withDouble:-i];
        i++;
      }
      JavaTextDecimalFormatSymbols *fs;
      if ([@"true" isEqual:[JavaLangSystem getPropertyWithNSString:@"snumber.usSymbols"]]) {
        fs = [[JavaTextDecimalFormatSymbols alloc] initWithJavaUtilLocale:[JavaUtilLocale US]];
      }
      else {
        fs = [[JavaTextDecimalFormatSymbols alloc] init];
      }
      RAREUTSNumber_ZERO_DIGIT_ = [((JavaTextDecimalFormatSymbols *) nil_chk(fs)) getZeroDigit];
      RAREUTSNumber_MINUS_SIGN_ = [fs getMinusSign];
      RAREUTSNumber_PLUS_SIGN_ = '+';
      RAREUTSNumber_DECIMAL_POINT_ = [fs getDecimalSeparator];
      NSString *s = @"E";
      @try {
        JavaLangReflectMethod *m = [[IOSClass classWithClass:[JavaTextDecimalFormatSymbols class]] getDeclaredMethod:@"getExponentSeparator" parameterTypes:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]];
        if (m != nil) {
          s = (NSString *) check_class_cast([m invokeWithId:fs withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]], [NSString class]);
        }
      }
      @catch (JavaLangThrowable *ignore) {
      }
      s = [((NSString *) nil_chk(s)) lowercaseString];
      unichar c = [((NSString *) nil_chk(s)) charAtWithInt:0];
      IOSCharArray *chars = ([s sequenceLength] == 1) ? nil : [s toCharArray];
      RAREUTSNumber_EXPONENT_CHARS_LOWERCASE_ = chars;
      RAREUTSNumber_EXPONENT_LOWERCASE_ = c;
      s = [s uppercaseString];
      c = [((NSString *) nil_chk(s)) charAtWithInt:0];
      chars = ([s sequenceLength] == 1) ? nil : [s toCharArray];
      RAREUTSNumber_EXPONENT_CHARS_UPPERCASE_ = chars;
      RAREUTSNumber_EXPONENT_UPPERCASE_ = c;
    }
    RAREUTSNumber_POINT_ONE_ = [NSString stringWithFormat:@"%C1", RAREUTSNumber_DECIMAL_POINT_];
    RAREUTSNumber_POINT_ZERO_ONE_ = [NSString stringWithFormat:@"%d1", RAREUTSNumber_DECIMAL_POINT_ + RAREUTSNumber_ZERO_DIGIT_];
    RAREUTSNumber_POINT_ZERO_ZERO_ONE_ = [NSString stringWithFormat:@"%d1", RAREUTSNumber_DECIMAL_POINT_ + RAREUTSNumber_ZERO_DIGIT_ + RAREUTSNumber_ZERO_DIGIT_];
    RAREUTSNumber_POINT_ZERO_ZERO_ZERO_ONE_ = [NSString stringWithFormat:@"%d1", RAREUTSNumber_DECIMAL_POINT_ + RAREUTSNumber_ZERO_DIGIT_ + RAREUTSNumber_ZERO_DIGIT_ + RAREUTSNumber_ZERO_DIGIT_];
    RAREUTSNumber_DigitOnes_ = [IOSCharArray arrayWithCharacters:(unichar[]){ RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9' } count:100];
    RAREUTSNumber_DigitTens_ = [IOSCharArray arrayWithCharacters:(unichar[]){ RAREUTSNumber_ZERO_DIGIT_, RAREUTSNumber_ZERO_DIGIT_, RAREUTSNumber_ZERO_DIGIT_, RAREUTSNumber_ZERO_DIGIT_, RAREUTSNumber_ZERO_DIGIT_, RAREUTSNumber_ZERO_DIGIT_, RAREUTSNumber_ZERO_DIGIT_, RAREUTSNumber_ZERO_DIGIT_, RAREUTSNumber_ZERO_DIGIT_, RAREUTSNumber_ZERO_DIGIT_, '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9' } count:100];
    RAREUTSNumber_digits_ = [IOSCharArray arrayWithCharacters:(unichar[]){ RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' } count:36];
    RAREUTSNumber_hexDigits_ = [IOSCharArray arrayWithCharacters:(unichar[]){ RAREUTSNumber_ZERO_DIGIT_, '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16];
    RAREUTSNumber_perThreadNumber_ = [[RAREUTSNumber_$1 alloc] init];
    RAREUTSNumber_perThreadBuffer_ = [[RAREUTSNumber_$2 alloc] init];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(RAREUTSNumber *)other {
  [super copyAllFieldsTo:other];
  other->bigNumber_ = bigNumber_;
  other->decplaces_ = decplaces_;
  other->fraction_ = fraction_;
  other->immutable_ = immutable_;
  other->mantissa_ = mantissa_;
  other->sdecimal_ = sdecimal_;
  other->strBuffer_ = strBuffer_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addWithDouble:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "addWithInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "addWithLong:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "addWithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "addWithNSString:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "and__WithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "and__WithNSString:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "booleanValueWithId:", NULL, "Z", 0x9, NULL },
    { "booleanValueWithNSString:", NULL, "Z", 0x9, NULL },
    { "bytesToHexStringWithByteArray:", NULL, "LNSString", 0x9, NULL },
    { "bytesToHexStringWithByteArray:withInt:withInt:", NULL, "LNSString", 0x9, NULL },
    { "charsToHexStringWithCharArray:", NULL, "LNSString", 0x9, NULL },
    { "charsToHexStringWithCharArray:withInt:withInt:", NULL, "LNSString", 0x9, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "compareToWithRAREUTSNumber:", NULL, "I", 0x11, NULL },
    { "createReusableInternalBuffers", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "decimalPlaces", NULL, "I", 0x11, NULL },
    { "divideWithDouble:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "divideWithInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "divideWithLong:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "divideWithRAREUTSDecimal:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "divideWithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "divideWithNSString:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "divideIntegerWithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "doubleValue", NULL, "D", 0x11, NULL },
    { "equalsWithDouble:", NULL, "Z", 0x1, NULL },
    { "equalsWithInt:", NULL, "Z", 0x1, NULL },
    { "equalsWithLong:", NULL, "Z", 0x1, NULL },
    { "equalsWithRAREUTSNumber:", NULL, "Z", 0x1, NULL },
    { "equalsWithLong:withLong:withInt:", NULL, "Z", 0x1, NULL },
    { "fractionValue", NULL, "J", 0x11, NULL },
    { "fractionValueString", NULL, "LNSString", 0x1, NULL },
    { "fractionalPart", NULL, "J", 0x11, NULL },
    { "fromStreamWithRAREUTSNumber:withJavaIoInputStream:", NULL, "LRAREUTSNumber", 0x9, "JavaIoIOException" },
    { "getNumber", NULL, "LNSNumber", 0x1, NULL },
    { "gtWithDouble:", NULL, "Z", 0x1, NULL },
    { "gtWithInt:", NULL, "Z", 0x11, NULL },
    { "gtWithLong:", NULL, "Z", 0x1, NULL },
    { "gtWithRAREUTSNumber:", NULL, "Z", 0x11, NULL },
    { "hexStringToBytesWithNSString:", NULL, "LIOSByteArray", 0x9, NULL },
    { "hexStringToBytesWithCharArray:withInt:withInt:", NULL, "LIOSByteArray", 0x9, NULL },
    { "hexStringToCharsWithNSString:", NULL, "LIOSCharArray", 0x9, NULL },
    { "hexStringToCharsWithCharArray:withInt:withInt:", NULL, "LIOSCharArray", 0x9, NULL },
    { "intValueExWithRAREUTSNumber:withCharArray:withInt:withCharArray:withInt:withInt:", NULL, "I", 0x19, NULL },
    { "isBigNumber", NULL, "Z", 0x1, NULL },
    { "isInteger", NULL, "Z", 0x11, NULL },
    { "isNegative", NULL, "Z", 0x11, NULL },
    { "isNumericWithNSString:", NULL, "Z", 0x9, NULL },
    { "isNumericWithNSString:withInt:", NULL, "Z", 0x9, NULL },
    { "isNumericWithCharArray:withInt:withInt:withInt:", NULL, "Z", 0x9, NULL },
    { "isRational", NULL, "Z", 0x11, NULL },
    { "isRationalOrBigNumber", NULL, "Z", 0x11, NULL },
    { "isZero", NULL, "Z", 0x11, NULL },
    { "ltWithDouble:", NULL, "Z", 0x1, NULL },
    { "ltWithInt:", NULL, "Z", 0x1, NULL },
    { "ltWithLong:", NULL, "Z", 0x1, NULL },
    { "ltWithRAREUTSNumber:", NULL, "Z", 0x1, NULL },
    { "makeImmutable", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "modWithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "modWithRAREUTSNumber:withBoolean:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "multiOperationWithCharArray:withInt:withInt:", NULL, "LRAREUTSNumber", 0x11, NULL },
    { "multiplyWithDouble:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "multiplyWithInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "multiplyWithLong:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "multiplyWithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "multiplyWithNSString:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "negate", NULL, "LRAREUTSNumber", 0x11, NULL },
    { "newBigDecimalWithNSString:", NULL, "LJavaMathBigDecimal", 0x9, NULL },
    { "newBigIntegerWithNSString:withInt:", NULL, "LJavaMathBigInteger", 0x9, NULL },
    { "newSDecimalWithNSString:", NULL, "LRAREUTSDecimal", 0x9, NULL },
    { "not__", NULL, "LRAREUTSNumber", 0x11, NULL },
    { "oneOver", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "or__WithDouble:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "or__WithInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "or__WithLong:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "or__WithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "or__WithNSString:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "parseDoublesWithNSString:", NULL, "LIOSDoubleArray", 0x9, NULL },
    { "parseFloatsWithNSString:", NULL, "LIOSFloatArray", 0x9, NULL },
    { "parseIntegersWithNSString:", NULL, "LIOSIntArray", 0x9, NULL },
    { "powWithRAREUTSDecimal:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "powWithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "readSNumberWithJavaIoInputStream:", NULL, "LRAREUTSNumber", 0x9, "JavaIoIOException" },
    { "readSNumberWithRAREUTSNumber:withJavaIoInputStream:", NULL, "V", 0x9, "JavaIoIOException" },
    { "readSNumberArrayWithJavaIoInputStream:", NULL, "LIOSObjectArray", 0x9, "JavaIoIOException" },
    { "roundWithInt:withBoolean:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "scale__", NULL, "I", 0x11, NULL },
    { "setScaleWithInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithJavaMathBigDecimal:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithJavaMathBigInteger:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithDouble:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithDouble:withInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithLong:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithNSString:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithNSString:withBoolean:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithCharArray:withInt:withInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithLong:withLong:withInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "setValueWithCharArray:withInt:withInt:withBoolean:", NULL, "LRAREUTSNumber", 0x1, "JavaLangNumberFormatException" },
    { "setValueExWithNSString:withBoolean:withBoolean:", NULL, "Z", 0x1, NULL },
    { "setValueExWithCharArray:withInt:withInt:withBoolean:withBoolean:", NULL, "Z", 0x1, NULL },
    { "shiftDecimalWithInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "subtractWithDouble:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "subtractWithInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "subtractWithLong:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "subtractWithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "subtractWithNSString:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "toFormattedStringWithNSString:withInt:", NULL, "LNSString", 0x1, NULL },
    { "toStreamWithJavaIoOutputStream:", NULL, "V", 0x1, "JavaIoIOException" },
    { "toStringWithBoolean:", NULL, "LNSString", 0x9, NULL },
    { "toStringWithRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "toStringWithDouble:", NULL, "LNSString", 0x9, NULL },
    { "toStringWithInt:", NULL, "LNSString", 0x9, NULL },
    { "toStringWithLong:", NULL, "LNSString", 0x9, NULL },
    { "toStringWithRAREUTCharArray:withBoolean:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "toStringExWithRAREUTCharArray:", NULL, "LNSString", 0x1, NULL },
    { "xor__WithInt:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "xor__WithLong:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "xor__WithRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "xor__WithNSString:", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "zero", NULL, "LRAREUTSNumber", 0x11, NULL },
    { "getCharsWithLong:withInt:withCharArray:", NULL, "V", 0x8, NULL },
    { "multiplyWithLong:withLong:withInt:withLong:", NULL, "J", 0x8, NULL },
    { "negtenpowWithLong:", NULL, "D", 0x8, NULL },
    { "stringSizeWithLong:", NULL, "I", 0x18, NULL },
    { "addWithRAREUTSDecimal:", NULL, "LRAREUTSNumber", 0x4, NULL },
    { "divideIntegerWithRAREUTSDecimal:", NULL, "LRAREUTSNumber", 0x4, NULL },
    { "modWithRAREUTSDecimal:withBoolean:", NULL, "LRAREUTSNumber", 0x4, NULL },
    { "multiplyWithRAREUTSDecimal:", NULL, "LRAREUTSNumber", 0x4, NULL },
    { "setValueWithRAREUTSDecimal:", NULL, "LRAREUTSNumber", 0x4, NULL },
    { "subtractWithRAREUTSDecimal:", NULL, "LRAREUTSNumber", 0x4, NULL },
    { "fromSDecimalWithRAREUTSDecimal:", NULL, "V", 0x2, NULL },
    { "multiOperationWithInt:withCharArray:withInt:withInt:", NULL, "I", 0xa, NULL },
    { "setBNValueExWithCharArray:withInt:withInt:withBoolean:", NULL, "Z", 0x2, NULL },
    { "toSDecimal", NULL, "LRAREUTSDecimal", 0x2, NULL },
    { "valueOfWithJavaLangInteger:", NULL, "LRAREUTSNumber", 0x9, NULL },
    { "valueOfWithJavaLangLong:", NULL, "LRAREUTSNumber", 0x9, NULL },
    { "valueOfWithJavaLangDouble:", NULL, "LRAREUTSNumber", 0x9, NULL },
    { "valueOfWithJavaLangFloat:", NULL, "LRAREUTSNumber", 0x9, NULL },
    { "valueOfWithNSNumber:", NULL, "LRAREUTSNumber", 0x9, NULL },
    { "valueOfWithDouble:", NULL, "LRAREUTSDecimal", 0x2, NULL },
    { "isNumericWithChar:", NULL, "Z", 0x9, NULL },
    { "isEqualWithFloat:withFloat:", NULL, "Z", 0x9, NULL },
    { "isEqualWithDouble:withDouble:", NULL, "Z", 0x9, NULL },
    { "isExponentSymbolWithChar:withCharArray:withInt:withInt:", NULL, "Z", 0xa, NULL },
    { "isTrailingExponentWithChar:", NULL, "Z", 0xa, NULL },
    { "toBigDecimalWithByteArray:withInt:withInt:", NULL, "LJavaMathBigDecimal", 0x9, NULL },
    { "fromEncodedBytesWithByteArray:withInt:withInt:", NULL, "LRAREUTSNumber", 0x9, NULL },
    { "fromEncodedBytesWithByteArray:withInt:withInt:withRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x9, NULL },
    { "fromEncodedCharsWithCharArray:withInt:withInt:", NULL, "LRAREUTSNumber", 0x9, NULL },
    { "fromEncodedCharsWithCharArray:withInt:withInt:withRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x9, NULL },
    { "encodedBytesToStringWithByteArray:withInt:withInt:", NULL, "LNSString", 0x9, NULL },
    { "encodedCharsToStringWithCharArray:withInt:withInt:", NULL, "LNSString", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "ALLOW_EXPONENT_", NULL, 0x19, "I" },
    { "ALLOW_OPS_", NULL, 0x19, "I" },
    { "ALLOW_TRAILING_E_", NULL, 0x19, "I" },
    { "ALLOW_ZEROS_", NULL, 0x19, "I" },
    { "ZERO_", NULL, 0x19, "LRAREUTSNumber" },
    { "ONE_", NULL, 0x19, "LRAREUTSNumber" },
    { "ZERO_DIGIT_", NULL, 0x19, "C" },
    { "MINUS_SIGN_", NULL, 0x19, "C" },
    { "PLUS_SIGN_", NULL, 0x19, "C" },
    { "DECIMAL_POINT_", NULL, 0x19, "C" },
    { "EXPONENT_LOWERCASE_", NULL, 0x1a, "C" },
    { "EXPONENT_UPPERCASE_", NULL, 0x1a, "C" },
    { "EXPONENT_CHARS_LOWERCASE_", NULL, 0x1a, "LIOSCharArray" },
    { "EXPONENT_CHARS_UPPERCASE_", NULL, 0x1a, "LIOSCharArray" },
    { "maxDigits_", NULL, 0xa, "I" },
    { "tenlen_", NULL, 0x1a, "I" },
    { "fractens_", NULL, 0x1a, "LIOSDoubleArray" },
    { "tens_", NULL, 0x1a, "LIOSLongArray" },
    { "NO_POWER_FRACTION_MSG_", NULL, 0x9, "LNSString" },
    { "POINT_ONE_", NULL, 0x19, "LNSString" },
    { "POINT_ZERO_ONE_", NULL, 0x19, "LNSString" },
    { "POINT_ZERO_ZERO_ONE_", NULL, 0x19, "LNSString" },
    { "POINT_ZERO_ZERO_ZERO_ONE_", NULL, 0x19, "LNSString" },
    { "DigitOnes_", NULL, 0x18, "LIOSCharArray" },
    { "DigitTens_", NULL, 0x18, "LIOSCharArray" },
    { "digits_", NULL, 0x18, "LIOSCharArray" },
    { "divideByZero_", NULL, 0x18, "LNSString" },
    { "hexDigits_", NULL, 0x18, "LIOSCharArray" },
    { "perThreadNumber_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "perThreadBuffer_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "bigNumber_", NULL, 0x4, "LRAREUTSDecimal" },
    { "decplaces_", NULL, 0x4, "I" },
    { "fraction_", NULL, 0x4, "J" },
    { "mantissa_", NULL, 0x4, "J" },
    { "dot_", NULL, 0x1a, "I" },
    { "exponent_", NULL, 0x1a, "I" },
  };
  static J2ObjcClassInfo _RAREUTSNumber = { "SNumber", "com.appnativa.util", NULL, 0x11, 154, methods, 36, fields, 0, NULL};
  return &_RAREUTSNumber;
}

@end
@implementation RAREUTSNumber_$1

- (id)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTSNumber alloc] initWithInt:0];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LNSObject", 0x24, NULL },
  };
  static J2ObjcClassInfo _RAREUTSNumber_$1 = { "$1", "com.appnativa.util", "SNumber", 0x8000, 1, methods, 0, NULL, 0, NULL};
  return &_RAREUTSNumber_$1;
}

@end
@implementation RAREUTSNumber_$2

- (id)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharArray alloc] initWithInt:32];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LNSObject", 0x24, NULL },
  };
  static J2ObjcClassInfo _RAREUTSNumber_$2 = { "$2", "com.appnativa.util", "SNumber", 0x8000, 1, methods, 0, NULL, 0, NULL};
  return &_RAREUTSNumber_$2;
}

@end
