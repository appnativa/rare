//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src-apple-porting/com/appnativa/util/Helper.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/FormatException.h"
#include "com/appnativa/util/GenericCharsetHelper.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/ISO88591Helper.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/UTF8Helper.h"
#include "com/appnativa/util/iCharsetHelper.h"
#include "java/io/IOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/Writer.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/nio/ByteOrder.h"
#include "java/text/DateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"

@implementation RAREUTHelper

static double RAREUTHelper_HALFSECOND_ = 0.5;
static int RAREUTHelper_JGREG_ = 588829;
static NSString * RAREUTHelper_emptyString_ = @"";
static NSString * RAREUTHelper_lineSeparator_;
static NSString * RAREUTHelper_fileSeparator_;
static NSString * RAREUTHelper_osVersion_;
static NSString * RAREUTHelper_osName_;
static NSString * RAREUTHelper_javaVersion_;
static IOSCharArray * RAREUTHelper_paddingSpace_;

+ (double)HALFSECOND {
  return RAREUTHelper_HALFSECOND_;
}

+ (double *)HALFSECONDRef {
  return &RAREUTHelper_HALFSECOND_;
}

+ (int)JGREG {
  return RAREUTHelper_JGREG_;
}

+ (int *)JGREGRef {
  return &RAREUTHelper_JGREG_;
}

+ (NSString *)emptyString {
  return RAREUTHelper_emptyString_;
}

+ (NSString *)lineSeparator {
  return RAREUTHelper_lineSeparator_;
}

+ (NSString *)fileSeparator {
  return RAREUTHelper_fileSeparator_;
}

+ (NSString *)osVersion {
  return RAREUTHelper_osVersion_;
}

+ (NSString *)osName {
  return RAREUTHelper_osName_;
}

+ (NSString *)javaVersion {
  return RAREUTHelper_javaVersion_;
}

+ (IOSCharArray *)paddingSpace {
  return RAREUTHelper_paddingSpace_;
}

+ (int)compareToWithByteArray:(IOSByteArray *)ba1
                      withInt:(int)pos1
                      withInt:(int)len1
                withByteArray:(IOSByteArray *)ba2
                      withInt:(int)pos2
                      withInt:(int)len2 {
  int n = [JavaLangMath minWithInt:len1 withInt:len2];
  int i = pos1;
  int j = pos2;
  char c1;
  char c2;
  if (i == j) {
    int k = i;
    int lim = n + i;
    while (k < lim) {
      c1 = IOSByteArray_Get(nil_chk(ba1), k);
      c2 = IOSByteArray_Get(nil_chk(ba2), k);
      if (c1 != c2) {
        return c1 - c2;
      }
      k++;
    }
  }
  else {
    while (n-- != 0) {
      c1 = IOSByteArray_Get(nil_chk(ba1), i++);
      c2 = IOSByteArray_Get(nil_chk(ba2), j++);
      if (c1 != c2) {
        return c1 - c2;
      }
    }
  }
  return len1 - len2;
}

+ (int)compareToWithCharArray:(IOSCharArray *)ba1
                      withInt:(int)pos1
                      withInt:(int)len1
                withCharArray:(IOSCharArray *)ba2
                      withInt:(int)pos2
                      withInt:(int)len2 {
  int n = [JavaLangMath minWithInt:len1 withInt:len2];
  int i = pos1;
  int j = pos2;
  unichar c1;
  unichar c2;
  if (i == j) {
    int k = i;
    int lim = n + i;
    while (k < lim) {
      c1 = IOSCharArray_Get(nil_chk(ba1), k);
      c2 = IOSCharArray_Get(nil_chk(ba2), k);
      if (c1 != c2) {
        return c1 - c2;
      }
      k++;
    }
  }
  else {
    while (n-- != 0) {
      c1 = IOSCharArray_Get(nil_chk(ba1), i++);
      c2 = IOSCharArray_Get(nil_chk(ba2), j++);
      if (c1 != c2) {
        return c1 - c2;
      }
    }
  }
  return len1 - len2;
}

+ (IOSObjectArray *)getLocalResourcePostfixWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    return [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:[IOSClass classWithClass:[NSString class]]];
  }
  NSString *p1 = nil;
  NSString *p2 = nil;
  NSString *p3 = nil;
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  NSString *language = [((JavaUtilLocale *) nil_chk(locale)) getLanguage];
  NSString *country = [locale getCountry];
  NSString *variant = [locale getVariant];
  if (![@"" isEqual:language]) {
    (void) [sb appendWithNSString:@"_"];
    (void) [sb appendWithNSString:language];
    p1 = [sb description];
    if (![@"" isEqual:country]) {
      (void) [sb appendWithNSString:@"_"];
      (void) [sb appendWithNSString:country];
      p2 = [sb description];
      if (![@"" isEqual:variant]) {
        (void) [sb appendWithNSString:@"_"];
        (void) [sb appendWithNSString:variant];
        p3 = [sb description];
      }
    }
  }
  if (p3 != nil) {
    return [IOSObjectArray arrayWithObjects:(id[]){ p3, p2, p1 } count:3 type:[IOSClass classWithClass:[NSString class]]];
  }
  if (p2 != nil) {
    return [IOSObjectArray arrayWithObjects:(id[]){ p2, p1 } count:2 type:[IOSClass classWithClass:[NSString class]]];
  }
  return (p1 == nil) ? [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:[IOSClass classWithClass:[NSString class]]] : [IOSObjectArray arrayWithObjects:(id[]){ p1 } count:1 type:[IOSClass classWithClass:[NSString class]]];
}

+ (JavaUtilCalendar *)createCalendarWithNSString:(NSString *)spec {
  int len = (spec == nil) ? 0 : (int) [spec sequenceLength];
  if (len == 0) {
    return nil;
  }
  unichar fc = [JavaLangCharacter toUpperCaseWithChar:[((NSString *) nil_chk(spec)) charAtWithInt:0]];
  int n = [spec indexOf:'@'];
  JavaUtilCalendar *c = [JavaUtilCalendar getInstance];
  int num = 0;
  if (len > 1) {
    num = [RAREUTSNumber intValueWithNSString:[spec substring:1]];
  }
  if ((fc == 'T') && (len > 3)) {
    switch ([JavaLangCharacter toUpperCaseWithChar:[spec charAtWithInt:3]]) {
      case 'M':
      fc = 'M';
      break;
      case 'W':
      fc = 'W';
      break;
      case 'Y':
      fc = 'Y';
      break;
    }
  }
  switch (fc) {
    case 'T':
    [((JavaUtilCalendar *) nil_chk(c)) addWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:num];
    break;
    case 'M':
    [((JavaUtilCalendar *) nil_chk(c)) addWithInt:JavaUtilCalendar_MONTH withInt:num];
    break;
    case 'W':
    [((JavaUtilCalendar *) nil_chk(c)) addWithInt:JavaUtilCalendar_WEEK_OF_YEAR withInt:num];
    break;
    case 'Y':
    [((JavaUtilCalendar *) nil_chk(c)) addWithInt:JavaUtilCalendar_YEAR withInt:num];
    break;
    case 'N':
    if ((n == -1) && ([spec hasSuffix:@"h"] || [spec hasSuffix:@"H"])) {
      [((JavaUtilCalendar *) nil_chk(c)) addWithInt:JavaUtilCalendar_HOUR withInt:num];
    }
    else {
      [((JavaUtilCalendar *) nil_chk(c)) addWithInt:JavaUtilCalendar_MINUTE withInt:num];
    }
    break;
    default:
    break;
  }
  if (n != -1) {
    spec = [spec substring:n + 1];
    int h = [RAREUTSNumber intValueWithNSString:spec];
    if (h > 1000) {
      h = h / 1000;
    }
    else if (h > 100) {
      h = h / 100;
    }
    int min = 0;
    int sec = 0;
    n = [((NSString *) nil_chk(spec)) indexOf:':'];
    len = (int) [spec sequenceLength];
    if (n != -1) {
      min = [RAREUTSNumber intValueWithNSString:[spec substring:n + 1]];
      n = [spec indexOf:':' fromIndex:n + 1];
      if (n != -1) {
        sec = [RAREUTSNumber intValueWithNSString:[spec substring:n + 1]];
      }
    }
    else {
      if (len > 2) {
        min = [RAREUTSNumber intValueWithNSString:[spec substring:2]] % 60;
      }
    }
    if ([((NSString *) nil_chk([spec lowercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]])) hasSuffix:@"pm"]) {
      h += 12;
      if (h > 23) {
        h = 0;
      }
    }
    [((JavaUtilCalendar *) nil_chk(c)) setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:h];
    [c setWithInt:JavaUtilCalendar_MINUTE withInt:min];
    [c setWithInt:JavaUtilCalendar_SECOND withInt:sec];
    [c setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
  }
  return c;
}

+ (JavaUtilDate *)createDateWithNSString:(NSString *)spec {
  JavaUtilCalendar *c = [RAREUTHelper createCalendarWithNSString:spec];
  return (c == nil) ? nil : [c getTime];
}

+ (int)daysBetweenWithJavaUtilCalendar:(JavaUtilCalendar *)start
                  withJavaUtilCalendar:(JavaUtilCalendar *)end {
  double dstart = [RAREUTHelper toJulianWithIntArray:[IOSIntArray arrayWithInts:(int[]){ [((JavaUtilCalendar *) nil_chk(start)) getWithInt:JavaUtilCalendar_YEAR], [start getWithInt:JavaUtilCalendar_MONTH] + 1, [start getWithInt:JavaUtilCalendar_DATE] } count:3]];
  double dend = [RAREUTHelper toJulianWithIntArray:[IOSIntArray arrayWithInts:(int[]){ [((JavaUtilCalendar *) nil_chk(end)) getWithInt:JavaUtilCalendar_YEAR], [end getWithInt:JavaUtilCalendar_MONTH] + 1, [end getWithInt:JavaUtilCalendar_DATE] } count:3]];
  return (int) (dend - dstart);
}

+ (int)daysBetweenWithJavaUtilDate:(JavaUtilDate *)start
                  withJavaUtilDate:(JavaUtilDate *)end {
  JavaUtilCalendar *c1 = [JavaUtilCalendar getInstance];
  JavaUtilCalendar *c2 = [JavaUtilCalendar getInstance];
  [((JavaUtilCalendar *) nil_chk(c1)) setTimeWithJavaUtilDate:start];
  [((JavaUtilCalendar *) nil_chk(c2)) setTimeWithJavaUtilDate:end];
  return [RAREUTHelper daysBetweenWithJavaUtilCalendar:c1 withJavaUtilCalendar:c2];
}

+ (NSString *)exceptionStringWithJavaLangThrowable:(JavaLangThrowable *)e {
  NSString *s = [((JavaLangThrowable *) nil_chk(e)) getMessage];
  if ((s == nil) || ([s sequenceLength] == 0)) {
    s = [e description];
  }
  return s;
}

+ (NSString *)expandStringWithNSString:(NSString *)spec
                     withNSStringArray:(IOSObjectArray *)values {
  IOSCharArray *format = [((NSString *) nil_chk(spec)) toCharArray];
  JavaLangStringBuilder *expanded = [[JavaLangStringBuilder alloc] initWithInt:(int) [((IOSCharArray *) nil_chk(format)) count] + 10];
  int len = (int) [format count];
  unichar c;
  int i = 0;
  int n = 0;
  int vlen = (int) [((IOSObjectArray *) nil_chk(values)) count];
  while (i < len) {
    c = IOSCharArray_Get(format, i++);
    switch (c) {
      case '%':
      if (i == len) {
        (void) [expanded appendWithChar:c];
      }
      else {
        c = IOSCharArray_Get(format, i);
        if ((c == 'S') || (c == 's')) {
          if (n < vlen) {
            (void) [expanded appendWithNSString:IOSObjectArray_Get(values, n++)];
          }
          i++;
        }
        else {
          (void) [expanded appendWithChar:'%'];
        }
      }
      break;
      default:
      (void) [expanded appendWithChar:c];
      break;
    }
  }
  return [expanded description];
}

+ (NSString *)expandStringRepeatWithNSString:(NSString *)spec
                                withNSString:(NSString *)value {
  IOSCharArray *format = [((NSString *) nil_chk(spec)) toCharArray];
  JavaLangStringBuilder *expanded = [[JavaLangStringBuilder alloc] initWithInt:(int) [((IOSCharArray *) nil_chk(format)) count] + 10];
  int len = (int) [format count];
  unichar c;
  int i = 0;
  while (i < len) {
    c = IOSCharArray_Get(format, i++);
    switch (c) {
      case '%':
      if (i == len) {
        (void) [expanded appendWithChar:c];
      }
      else {
        c = IOSCharArray_Get(format, i);
        if ((c == 'S') || (c == 's')) {
          (void) [expanded appendWithNSString:value];
          i++;
        }
        else {
          (void) [expanded appendWithChar:'%'];
        }
      }
      break;
      default:
      (void) [expanded appendWithChar:c];
      break;
    }
  }
  return [expanded description];
}

+ (IOSIntArray *)fromJulianWithDouble:(double)injulian {
  int jalpha, ja, jb, jc, jd, je, year, month, day;
  double julian = injulian + RAREUTHelper_HALFSECOND_ / 86400.0;
  ja = (int) julian;
  if (ja >= RAREUTHelper_JGREG_) {
    jalpha = (int) (((ja - 1867216) - 0.25) / 36524.25);
    ja = ja + 1 + jalpha - jalpha / 4;
  }
  jb = ja + 1524;
  jc = (int) (6680.0 + ((jb - 2439870) - 122.1) / 365.25);
  jd = 365 * jc + jc / 4;
  je = (int) ((jb - jd) / 30.6001);
  day = jb - jd - (int) (30.6001 * je);
  month = je - 1;
  if (month > 12) {
    month = month - 12;
  }
  year = jc - 4715;
  if (month > 2) {
    year--;
  }
  if (year <= 0) {
    year--;
  }
  return [IOSIntArray arrayWithInts:(int[]){ year, month, day } count:3];
}

+ (double)haversineWithDouble:(double)lat1
                   withDouble:(double)long1
                   withDouble:(double)lat2
                   withDouble:(double)long2
                  withBoolean:(BOOL)kilometers {
  double dlong = (long2 - long1) * RAREUTHelper_d2r;
  double dlat = (lat2 - lat1) * RAREUTHelper_d2r;
  double a = [JavaLangMath powWithDouble:[JavaLangMath sinWithDouble:dlat / 2.0] withDouble:2] + [JavaLangMath cosWithDouble:lat1 * RAREUTHelper_d2r] * [JavaLangMath cosWithDouble:lat2 * RAREUTHelper_d2r] * [JavaLangMath powWithDouble:[JavaLangMath sinWithDouble:dlong / 2.0] withDouble:2];
  double c = 2 * [JavaLangMath atan2WithDouble:[JavaLangMath sqrtWithDouble:a] withDouble:[JavaLangMath sqrtWithDouble:1 - a]];
  double d = (kilometers ? 6367 : 3956) * c;
  return d;
}

+ (int)indexOfWithNSObjectArray:(IOSObjectArray *)array
                         withId:(id)object {
  if (array == nil) {
    return -1;
  }
  return [RAREUTHelper indexOfWithNSObjectArray:array withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(array)) count] withId:object];
}

+ (int)indexOfWithByteArray:(IOSByteArray *)bytes
                    withInt:(int)pos
                    withInt:(int)len
                   withByte:(char)b {
  if (bytes == nil) {
    return -1;
  }
  len += pos;
  while (pos < len) {
    if (IOSByteArray_Get(nil_chk(bytes), pos) == b) {
      return pos;
    }
    pos++;
  }
  return -1;
}

+ (BOOL)moveWithNSObjectArray:(IOSObjectArray *)list
                      withInt:(int)length
                      withInt:(int)from
                      withInt:(int)to {
  int len = length == -1 ? (int) [((IOSObjectArray *) nil_chk(list)) count] : length;
  if (to < 0 || to >= len) {
    return NO;
  }
  if (from < 0 || from >= len) {
    return NO;
  }
  if (from == to) {
    return YES;
  }
  id val = IOSObjectArray_Get(nil_chk(list), from);
  if (from != len - 1) {
    [JavaLangSystem arraycopyWithId:list withInt:from + 1 withId:list withInt:from withInt:len - from - 1];
  }
  if (to != len - 1) {
    [JavaLangSystem arraycopyWithId:list withInt:to withId:list withInt:to + 1 withInt:len - to - 1];
  }
  (void) IOSObjectArray_Set(list, to, val);
  return YES;
}

+ (int)indexOfWithNSObjectArray:(IOSObjectArray *)array
                        withInt:(int)pos
                        withInt:(int)len
                         withId:(id)object {
  if ((array == nil) || (len == 0)) {
    return -1;
  }
  len += pos;
  while (pos < len) {
    if (IOSObjectArray_Get(nil_chk(array), pos) == object) {
      return pos;
    }
    pos++;
  }
  return -1;
}

+ (int)indexOfEqualsWithNSObjectArray:(IOSObjectArray *)array
                               withId:(id)object {
  if (array == nil) {
    return -1;
  }
  return [RAREUTHelper indexOfEqualsWithNSObjectArray:array withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(array)) count] withId:object];
}

+ (int)indexOfEqualsWithNSObjectArray:(IOSObjectArray *)array
                              withInt:(int)pos
                              withInt:(int)len
                               withId:(id)object {
  if ((array == nil) || (len == 0) || (object == nil)) {
    return -1;
  }
  len += pos;
  while (pos < len) {
    if ([nil_chk(object) isEqual:IOSObjectArray_Get(nil_chk(array), pos)]) {
      return pos;
    }
    pos++;
  }
  return -1;
}

+ (id<JavaUtilList>)keysToObjectListWithJavaUtilMap:(id<JavaUtilMap>)map
                                   withJavaUtilList:(id<JavaUtilList>)list {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) keySet])) iterator];
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] initWithInt:[map size]];
  }
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:[it next]];
  }
  return list;
}

+ (id<JavaUtilList>)keysToStringListWithJavaUtilMap:(id<JavaUtilMap>)map
                                   withJavaUtilList:(id<JavaUtilList>)list {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) keySet])) iterator];
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] initWithInt:[map size]];
  }
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:[it next]];
  }
  return list;
}

+ (int)lastIndexOfWithByteArray:(IOSByteArray *)bytes
                        withInt:(int)pos
                        withInt:(int)len
                       withByte:(char)b {
  for (int i = len - 1; i >= pos; i--) {
    if (IOSByteArray_Get(nil_chk(bytes), i) == b) {
      return i;
    }
  }
  return -1;
}

+ (NSString *)linefeedToHTMLBreakWithNSString:(NSString *)s
                                  withBoolean:(BOOL)html {
  return [RAREUTHelper tokenReplacementWithNSString:s withNSString:@"\n" withNSString:@"<br/>" withBoolean:html withNSString:nil withNSString:nil withInt:-1];
}

+ (long long int)longFromObjectWithId:(id)o {
  if (o != nil) {
    if ([o isKindOfClass:[JavaLangInteger class]]) {
      return [((JavaLangInteger *) check_class_cast(o, [JavaLangInteger class])) longLongValue];
    }
    if ([o isKindOfClass:[JavaLangLong class]]) {
      return [((JavaLangLong *) check_class_cast(o, [JavaLangLong class])) longLongValue];
    }
    if ([o isKindOfClass:[JavaLangDouble class]]) {
      return [((JavaLangDouble *) check_class_cast(o, [JavaLangDouble class])) longLongValue];
    }
    if ([o isKindOfClass:[JavaLangFloat class]]) {
      return [((JavaLangFloat *) check_class_cast(o, [JavaLangFloat class])) longLongValue];
    }
    if ([o isKindOfClass:[NSString class]]) {
      return ([JavaLangLong parseLongWithNSString:(NSString *) check_class_cast(o, [NSString class])]);
    }
    @throw [[JavaLangNumberFormatException alloc] initWithNSString:@"Cannot convert the specified object to a long value"];
  }
  else {
    return 0;
  }
}

+ (NSString *)mapToStringWithJavaUtilMap:(id<JavaUtilMap>)map {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) iterator];
  id<JavaUtilMap_Entry> me;
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  id val;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    me = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
    val = [((id<JavaUtilMap_Entry>) nil_chk(me)) getValue];
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[nil_chk([me getKey]) description]])) appendWithChar:'='];
    if (val != nil) {
      if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:val]) {
        IOSObjectArray *a = (IOSObjectArray *) check_class_cast(val, [IOSObjectArray class]);
        int len = (int) [a count];
        (void) [sb appendWithChar:'('];
        int i = 0;
        (void) [sb appendWithId:IOSObjectArray_Get(a, i++)];
        while (i < len) {
          (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:','])) appendWithId:IOSObjectArray_Get(a, i++)];
        }
        (void) [sb appendWithChar:')'];
      }
      else {
        (void) [sb appendWithId:val];
      }
    }
    (void) [sb appendWithNSString:RAREUTHelper_lineSeparator_];
  }
  return [sb description];
}

+ (JavaLangThrowable *)pealExceptionWithJavaLangThrowable:(JavaLangThrowable *)t {
  JavaLangThrowable *c;
  int cnt = 0;
  if (t != nil) {
    while ((c = [t getCause]) != nil) {
      if (cnt > 100) {
        break;
      }
      t = c;
      cnt++;
    }
  }
  return t;
}

+ (int)recursiveTimedWaitWithInt:(int)timeout
                        withLong:(long long int)starttime
                         withInt:(int)sleep {
  long long int gone;
  if (timeout != -1) {
    gone = [JavaLangSystem currentTimeMillis] - starttime;
    if ((timeout - gone) < 1) {
      return 0;
    }
    timeout -= gone;
    [JavaLangThread sleepWithLong:sleep];
  }
  else {
    [JavaLangThread sleepWithLong:sleep];
  }
  return timeout;
}

+ (BOOL)regionMatchesWithByteArray:(IOSByteArray *)ba1
                           withInt:(int)pos1
                     withByteArray:(IOSByteArray *)ba2
                           withInt:(int)pos2
                           withInt:(int)len {
  int to = +pos1;
  int po = pos2;
  if ((pos2 < 0) || (pos1 < 0) || (pos1 > ((long long int) (int) [((IOSByteArray *) nil_chk(ba1)) count] - len)) || (pos2 > ((long long int) (int) [((IOSByteArray *) nil_chk(ba2)) count] - len))) {
    return NO;
  }
  while (len-- > 0) {
    char c1 = IOSByteArray_Get(nil_chk(ba1), to++);
    char c2 = IOSByteArray_Get(nil_chk(ba2), po++);
    if (c1 == c2) {
      continue;
    }
    return NO;
  }
  return YES;
}

+ (IOSCharArray *)removeElementsWithCharArray:(IOSCharArray *)array
                                      withInt:(int)startPos
                                      withInt:(int)length {
  if ((length < 1) || (startPos < 0)) {
    return array;
  }
  if (startPos + length > (int) [((IOSCharArray *) nil_chk(array)) count]) {
    length = (int) [array count] - startPos;
    if (length < 1) {
      return array;
    }
  }
  int newLength = (int) [array count] - length;
  if (newLength < 0) {
    newLength = [JavaLangMath maxWithInt:0 withInt:(int) [array count] - startPos];
  }
  IOSCharArray *copy_ = [IOSCharArray arrayWithLength:newLength];
  if (startPos > 0) {
    [JavaLangSystem arraycopyWithId:array withInt:0 withId:copy_ withInt:0 withInt:startPos];
  }
  [JavaLangSystem arraycopyWithId:array withInt:startPos + length withId:copy_ withInt:startPos withInt:newLength - startPos];
  return copy_;
}

+ (JavaLangRuntimeException *)runtimeExceptionWithJavaLangException:(JavaLangException *)e {
  if ([e isKindOfClass:[JavaLangRuntimeException class]]) {
    return (JavaLangRuntimeException *) check_class_cast(e, [JavaLangRuntimeException class]);
  }
  return [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
}

+ (double)toJulianWithIntArray:(IOSIntArray *)ymd {
  int year = IOSIntArray_Get(nil_chk(ymd), 0);
  int month = IOSIntArray_Get(ymd, 1);
  int day = IOSIntArray_Get(ymd, 2);
  int julianYear = year;
  if (year < 0) {
    julianYear++;
  }
  int julianMonth = month;
  if (month > 2) {
    julianMonth++;
  }
  else {
    julianYear--;
    julianMonth += 13;
  }
  double julian = ([JavaLangMath floorWithDouble:365.25 * julianYear] + [JavaLangMath floorWithDouble:30.6001 * julianMonth] + day + 1720995.0);
  if (day + 31 * (month + 12 * year) >= RAREUTHelper_JGREG_) {
    int ja = (int) (0.01 * julianYear);
    julian += 2 - ja + (0.25 * ja);
  }
  return [JavaLangMath floorWithDouble:julian];
}

+ (NSString *)toStringWithIntArray:(IOSIntArray *)list
                       withBoolean:(BOOL)bracket {
  if ((list == nil) || ((int) [list count] == 0)) {
    return @"";
  }
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  if (bracket) {
    (void) [sb appendWithChar:'['];
  }
  (void) [sb appendWithInt:IOSIntArray_Get(nil_chk(list), 0)];
  for (int i = 1; i < (int) [list count]; i++) {
    (void) [sb appendWithChar:','];
    (void) [sb appendWithInt:IOSIntArray_Get(list, i)];
  }
  if (bracket) {
    (void) [sb appendWithChar:']'];
  }
  return [sb description];
}

+ (NSString *)toStringWithJavaUtilList:(id<JavaUtilList>)list
                          withNSString:(NSString *)sep {
  return [((JavaLangStringBuilder *) nil_chk([RAREUTHelper toStringWithJavaLangStringBuilder:nil withJavaUtilList:list withNSString:sep])) description];
}

+ (NSString *)toStringWithNSObjectArray:(IOSObjectArray *)list
                           withNSString:(NSString *)sep {
  int len = (list == nil) ? 0 : (int) [list count];
  if (len == 0) {
    return @"";
  }
  if (len == 1) {
    return (IOSObjectArray_Get(nil_chk(list), 0) == nil) ? @"" : [IOSObjectArray_Get(list, 0) description];
  }
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  (void) [sb appendWithNSString:(IOSObjectArray_Get(nil_chk(list), 0) == nil) ? @"" : [IOSObjectArray_Get(list, 0) description]];
  for (int i = 1; i < len; i++) {
    if (sep != nil) {
      (void) [sb appendWithNSString:sep];
    }
    (void) [sb appendWithId:IOSObjectArray_Get(list, i)];
  }
  return [sb description];
}

+ (NSString *)toStringWithJavaUtilCalendar:(JavaUtilCalendar *)cal
                               withBoolean:(BOOL)dateonly
                               withBoolean:(BOOL)timeonly {
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  int y;
  if (!timeonly) {
    (void) [sb appendWithInt:[((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_YEAR]];
    (void) [sb appendWithChar:'-'];
    y = ([cal getWithInt:JavaUtilCalendar_MONTH] + 1);
    if (y < 10) {
      (void) [sb appendWithChar:'0'];
    }
    (void) [sb appendWithInt:y];
    (void) [sb appendWithChar:'-'];
    y = [cal getWithInt:JavaUtilCalendar_DAY_OF_MONTH];
    if (y < 10) {
      (void) [sb appendWithChar:'0'];
    }
    (void) [sb appendWithInt:y];
  }
  if (dateonly) {
    return [sb description];
  }
  (void) [sb appendWithChar:'T'];
  y = [((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
  if (y < 10) {
    (void) [sb appendWithChar:'0'];
  }
  (void) [sb appendWithInt:y];
  (void) [sb appendWithChar:':'];
  y = [cal getWithInt:JavaUtilCalendar_MINUTE];
  if (y < 10) {
    (void) [sb appendWithChar:'0'];
  }
  (void) [sb appendWithInt:y];
  (void) [sb appendWithChar:':'];
  y = [cal getWithInt:JavaUtilCalendar_SECOND];
  if (y < 10) {
    (void) [sb appendWithChar:'0'];
  }
  (void) [sb appendWithInt:y];
  y = [((JavaUtilTimeZone *) nil_chk([cal getTimeZone])) getRawOffset] / 3600000;
  if (y == 0) {
    (void) [sb appendWithChar:'Z'];
  }
  else {
    if (y > 0) {
      (void) [sb appendWithChar:'+'];
    }
    else {
      (void) [sb appendWithChar:'-'];
      y *= -1;
    }
    if (y < 10) {
      (void) [sb appendWithChar:'0'];
    }
    (void) [sb appendWithInt:y];
    (void) [sb appendWithNSString:@":00"];
  }
  return [sb description];
}

+ (NSString *)toStringWithNSObjectArray:(IOSObjectArray *)list
                                withInt:(int)len
                            withBoolean:(BOOL)lines {
  if (len == 0) {
    return @"";
  }
  if (len == 1) {
    return [IOSObjectArray_Get(nil_chk(list), 0) description];
  }
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  (void) [sb appendWithId:IOSObjectArray_Get(nil_chk(list), 0)];
  for (int i = 1; i < len; i++) {
    (void) [sb appendWithNSString:lines ? @"\x0d\n" : @"\t"];
    (void) [sb appendWithId:IOSObjectArray_Get(list, i)];
  }
  return [sb description];
}

+ (JavaLangStringBuilder *)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                            withJavaUtilList:(id<JavaUtilList>)list
                                                withNSString:(NSString *)sep {
  int len = (list == nil) ? 0 : [list size];
  if (sb == nil) {
    sb = [[JavaLangStringBuilder alloc] init];
  }
  if (len == 0) {
    return sb;
  }
  id o;
  if (len == 1) {
    o = [((id<JavaUtilList>) nil_chk(list)) getWithInt:0];
    if (o != nil) {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithId:o];
    }
  }
  else {
    o = [((id<JavaUtilList>) nil_chk(list)) getWithInt:0];
    if (o != nil) {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithId:o];
    }
    for (int i = 1; i < len; i++) {
      if (sep != nil) {
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:sep];
      }
      o = [list getWithInt:i];
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithId:o];
    }
  }
  return sb;
}

+ (NSString *)tokenReplacementWithNSString:(NSString *)s
                              withNSString:(NSString *)what
                              withNSString:(NSString *)with
                               withBoolean:(BOOL)html
                              withNSString:(NSString *)prefix
                              withNSString:(NSString *)suffix
                                   withInt:(int)maxLineCount {
  int n = [((NSString *) nil_chk(s)) indexOfString:what];
  if ((n == -1) && !html && (prefix == nil) && (suffix == nil)) {
    return s;
  }
  int p = 0;
  int nn;
  IOSCharArray *a = [s toCharArray];
  int tl = (int) [((NSString *) nil_chk(what)) sequenceLength];
  int len = (int) [((IOSCharArray *) nil_chk(a)) count];
  unichar c = [what charAtWithInt:0];
  BOOL one = tl == 1;
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithInt:len];
  if (maxLineCount < 1) {
    maxLineCount = JavaLangInteger_MAX_VALUE;
  }
  int lines = 0;
  if ([what hasPrefix:@"<html"]) {
    html = NO;
  }
  if (html) {
    (void) [sb appendWithNSString:@"<html>"];
  }
  if (prefix != nil) {
    (void) [sb appendWithNSString:prefix];
  }
  while ((lines < maxLineCount) && (n != -1)) {
    nn = n - p;
    if ((n > 0) && (IOSCharArray_Get(a, n - 1) == 0x000d)) {
      nn--;
    }
    lines++;
    (void) [sb appendWithCharArray:a withInt:p withInt:nn];
    (void) [sb appendWithNSString:with];
    p = n + tl;
    if (p >= len) {
      break;
    }
    n = one ? [s indexOfString:what fromIndex:p] : [s indexOf:c fromIndex:p];
  }
  n = len - p;
  if ((lines < maxLineCount) && (n > 0)) {
    (void) [sb appendWithCharArray:a withInt:p withInt:n];
  }
  if (suffix != nil) {
    (void) [sb appendWithNSString:suffix];
  }
  if (html) {
    (void) [sb appendWithNSString:@"</html>"];
  }
  return [sb description];
}

+ (BOOL)valuesEqualsWithJavaUtilMap:(id<JavaUtilMap>)map1
                    withJavaUtilMap:(id<JavaUtilMap>)map2 {
  if ((map1 == nil) || (map2 == nil)) {
    return map1 == map2;
  }
  if ([((id<JavaUtilMap>) nil_chk(map1)) size] != [((id<JavaUtilMap>) nil_chk(map2)) size]) {
    return NO;
  }
  id<JavaUtilMap_Entry> e;
  id v1, v2;
  id k;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([map1 entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    e = [it next];
    k = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
    v1 = [e getValue];
    v2 = [map2 getWithId:k];
    if (v1 == nil) {
      if (v2 != nil) {
        return NO;
      }
    }
    else {
      if (![v1 isEqual:v2]) {
        return NO;
      }
    }
  }
  return YES;
}

+ (id<JavaUtilList>)valuesToListWithJavaUtilMap:(id<JavaUtilMap>)map
                               withJavaUtilList:(id<JavaUtilList>)list {
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) values])) iterator];
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] initWithInt:[map size]];
  }
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:[it next]];
  }
  return list;
}

+ (void)writePaddingWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                      withInt:(int)depth {
  if (depth == 0) {
    return;
  }
  IOSCharArray *padding = [RAREUTHelper getPadding];
  int len = (int) [((IOSCharArray *) nil_chk(padding)) count];
  depth *= 2;
  while (depth > len) {
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithCharArray:padding withInt:0 withInt:len];
    depth -= len;
  }
  if (depth > 0) {
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithCharArray:padding withInt:0 withInt:depth];
  }
}

+ (void)writePaddingWithJavaIoWriter:(JavaIoWriter *)outArg
                             withInt:(int)depth {
  if (depth == 0) {
    return;
  }
  IOSCharArray *padding = [RAREUTHelper getPadding];
  int len = (int) [((IOSCharArray *) nil_chk(padding)) count];
  depth *= 2;
  while (depth > len) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:padding withInt:0 withInt:len];
    depth -= len;
  }
  if (depth > 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:padding withInt:0 withInt:depth];
  }
}

+ (id<JavaUtilList>)valuesToStringListWithJavaUtilMap:(id<JavaUtilMap>)map
                                     withJavaUtilList:(id<JavaUtilList>)list {
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) values])) iterator];
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] initWithInt:[map size]];
  }
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:[it next]];
  }
  return list;
}

+ (void)setDateTimeWithNSString:(NSString *)val
           withJavaUtilCalendar:(JavaUtilCalendar *)cal
                    withBoolean:(BOOL)settime {
  int i = 0;
  NSString *time = nil;
  NSString *date = nil;
  [((JavaUtilCalendar *) nil_chk(cal)) clear];
  int n = [((NSString *) nil_chk(val)) indexOf:'T'];
  if (n == -1) {
    n = [val indexOf:' '];
  }
  if (n != -1) {
    date = [val substring:0 endIndex:n];
    time = [val substring:n + 1];
  }
  else {
    date = val;
  }
  int y, m, d;
  unichar tok = 0;
  if ([((NSString *) nil_chk(date)) indexOf:'-'] != -1) {
    tok = '-';
  }
  else if ([date indexOf:'/'] != -1) {
    tok = '/';
  }
  if ((tok == 0) && ([date sequenceLength] != 10)) {
    @try {
      if (settime) {
        [cal setTimeWithJavaUtilDate:[((JavaTextDateFormat *) nil_chk([JavaTextDateFormat getDateTimeInstance])) parseWithNSString:val]];
      }
      else {
        [cal setTimeWithJavaUtilDate:[((JavaTextDateFormat *) nil_chk([JavaTextDateFormat getDateInstance])) parseWithNSString:val]];
      }
    }
    @catch (JavaLangException *ex) {
      @throw [[RAREUTFormatException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: %@", val]];
    }
    return;
  }
  IOSCharArray *data = [date toCharArray];
  if (tok != 0) {
    RAREUTCharScanner *sc = [[RAREUTCharScanner alloc] initWithCharArray:data withBoolean:NO];
    y = [RAREUTSNumber intValueWithNSString:[sc nextTokenWithChar:tok]];
    m = [RAREUTSNumber intValueWithNSString:[sc nextTokenWithChar:tok]];
    d = [RAREUTSNumber intValueWithNSString:[sc nextTokenWithChar:tok]];
    if ((y < 1) || (y > 3000)) {
      @throw [[RAREUTFormatException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: %@", val]];
    }
    if (y < 100) {
      y += ((y < 50) ? 2000 : 1900);
    }
    if ((m < 1) || (m > 12)) {
      @throw [[RAREUTFormatException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: %@", val]];
    }
    if ((d < 1) || (d > 31)) {
      @throw [[RAREUTFormatException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: %@", val]];
    }
  }
  else {
    i = 0;
    y = (int) [RAREUTSNumber longValueWithCharArray:data withInt:i withInt:4 withBoolean:YES];
    i += 5;
    m = ((IOSCharArray_Get(nil_chk(data), i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
    i += 3;
    d = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
  }
  if ((time != nil) && settime) {
    data = [time toCharArray];
    i = 0;
    int h = ((IOSCharArray_Get(nil_chk(data), i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
    i += 3;
    int mm = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
    i += 3;
    int sec = 0;
    int mil = 0;
    if (i + 2 < (int) [data count]) {
      sec = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
      i += 2;
      if ((i < (int) [data count]) && (IOSCharArray_Get(data, i) == '.')) {
        i++;
        mil = ((IOSCharArray_Get(data, i) - '0') * 100) + ((IOSCharArray_Get(data, i + 1) - '0') * 10) + (IOSCharArray_Get(data, i + 2) - '0');
        i += 3;
      }
    }
    if (i < (int) [data count]) {
      if (IOSCharArray_Get(data, i) != 'Z') {
        JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithInt:8];
        (void) [sb appendWithNSString:@"GMT"];
        (void) [sb appendWithCharArray:data withInt:i withInt:(int) [data count] - i];
        JavaUtilTimeZone *tz = [JavaUtilTimeZone getTimeZoneWithNSString:[sb description]];
        if (tz != nil) {
          [cal setTimeZoneWithJavaUtilTimeZone:tz];
        }
      }
    }
    [cal setWithInt:y withInt:m - 1 withInt:d withInt:h withInt:mm withInt:sec];
    [cal setWithInt:JavaUtilCalendar_MILLISECOND withInt:mil];
  }
  else {
    [cal setWithInt:y withInt:m - 1 withInt:d];
  }
}

+ (void)setTimeWithNSString:(NSString *)val
       withJavaUtilCalendar:(JavaUtilCalendar *)cal {
  int i = 0;
  IOSCharArray *data = [((NSString *) nil_chk(val)) toCharArray];
  [((JavaUtilCalendar *) nil_chk(cal)) clear];
  if ((int) [((IOSCharArray *) nil_chk(data)) count] != 5) {
    @throw [[RAREUTFormatException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: %@", val]];
  }
  @try {
    i = 0;
    int h = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
    i += 3;
    int mm = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
    i += 3;
    int sec = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
    i += 2;
    int mil = 0;
    if ((i < (int) [data count]) && (IOSCharArray_Get(data, i) == '.')) {
      i++;
      mil = ((IOSCharArray_Get(data, i) - '0') * 100) + ((IOSCharArray_Get(data, i + 1) - '0') * 10) + (IOSCharArray_Get(data, i + 2) - '0');
      i += 3;
    }
    if (i < (int) [data count]) {
      if (IOSCharArray_Get(data, i) != 'Z') {
        JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithInt:8];
        (void) [sb appendWithNSString:@"GMT"];
        (void) [sb appendWithCharArray:data withInt:i withInt:(int) [data count] - i];
        JavaUtilTimeZone *tz = [JavaUtilTimeZone getTimeZoneWithNSString:[sb description]];
        if (tz != nil) {
          [cal setTimeZoneWithJavaUtilTimeZone:tz];
        }
      }
    }
    [cal setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:h];
    [cal setWithInt:JavaUtilCalendar_MINUTE withInt:mm];
    [cal setWithInt:JavaUtilCalendar_SECOND withInt:sec];
    [cal setWithInt:JavaUtilCalendar_MILLISECOND withInt:mil];
  }
  @catch (JavaLangException *e) {
    @throw [[RAREUTFormatException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: %@", val]];
  }
}

+ (id<RAREUTiCharsetHelper>)getCharsetHelperWithNSString:(NSString *)cs {
  if ([((NSString *) nil_chk(cs)) equalsIgnoreCase:@"UTF-8"]) {
    return [RAREUTUTF8Helper getInstance];
  }
  if ([cs equalsIgnoreCase:@"UTF8"]) {
    return [RAREUTUTF8Helper getInstance];
  }
  if ([cs equalsIgnoreCase:@"ISO-8859-1"]) {
    return [RAREUTISO88591Helper getInstance];
  }
  if ([cs equalsIgnoreCase:@"ISO88591"]) {
    return [RAREUTISO88591Helper getInstance];
  }
  return [[RAREUTGenericCharsetHelper alloc] initWithNSString:cs];
}

+ (IOSCharArray *)getPadding {
  if (IOSCharArray_Get(nil_chk(RAREUTHelper_paddingSpace_), 0) != ' ') {
    int len = (int) [RAREUTHelper_paddingSpace_ count];
    for (int i = 0; i < len; i++) {
      (*IOSCharArray_GetRef(RAREUTHelper_paddingSpace_, i)) = ' ';
    }
  }
  return RAREUTHelper_paddingSpace_;
}

+ (NSString *)getTypeNameWithIOSClass:(IOSClass *)type {
  if ([((IOSClass *) nil_chk(type)) isArray]) {
    @try {
      IOSClass *cl = type;
      int dimensions = 0;
      while ([cl isArray]) {
        dimensions++;
        cl = [cl getComponentType];
      }
      JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
      (void) [sb appendWithNSString:[((IOSClass *) nil_chk(cl)) getName]];
      for (int i = 0; i < dimensions; i++) {
        (void) [sb appendWithNSString:@"[]"];
      }
      return [sb description];
    }
    @catch (JavaLangThrowable *e) {
    }
  }
  return [type getName];
}

+ (BOOL)isBigEndian {
  return [((JavaNioByteOrder *) nil_chk([JavaNioByteOrder nativeOrder])) isEqual:[JavaNioByteOrder getBIG_ENDIAN]];
}

+ (BOOL)isNumericWithNSString:(NSString *)str
                  withBoolean:(BOOL)tzero
                  withBoolean:(BOOL)lzero {
  if ((str == nil) || ([str sequenceLength] == 0)) {
    return NO;
  }
  IOSCharArray *chars = [((NSString *) nil_chk(str)) toCharArray];
  return [RAREUTHelper isNumericWithCharArray:chars withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(chars)) count] withBoolean:tzero withBoolean:lzero];
}

+ (BOOL)isNumericWithCharArray:(IOSCharArray *)chars
                       withInt:(int)pos
                       withInt:(int)len
                   withBoolean:(BOOL)tzero
                   withBoolean:(BOOL)lzero {
  BOOL dot = NO;
  if ((chars == nil) || (len == 0)) {
    return NO;
  }
  len += pos;
  unichar c = IOSCharArray_Get(nil_chk(chars), pos);
  BOOL neg = NO;
  if (c == '+') {
    return NO;
  }
  if (c == '-') {
    neg = YES;
    pos++;
  }
  int p = pos + 1;
  while (pos < len) {
    c = IOSCharArray_Get(chars, pos++);
    if ((c == '0') && (p == pos)) {
      if ((pos == len) && !neg) {
        return YES;
      }
      if (!lzero) {
        return NO;
      }
    }
    if ((c < 48) || (c > 57)) {
      if ((c == '.') && !dot) {
        dot = YES;
        continue;
      }
      return NO;
    }
  }
  if ((c == '.') || (c == '-')) {
    return NO;
  }
  return (!tzero && dot && (c == '0')) ? NO : YES;
}

+ (BOOL)isSameDayWithJavaUtilCalendar:(JavaUtilCalendar *)cal1
                 withJavaUtilCalendar:(JavaUtilCalendar *)cal2 {
  if ([((JavaUtilCalendar *) nil_chk(cal1)) getWithInt:JavaUtilCalendar_DAY_OF_YEAR] != [((JavaUtilCalendar *) nil_chk(cal2)) getWithInt:JavaUtilCalendar_DAY_OF_YEAR]) {
    return NO;
  }
  if ([cal1 getWithInt:JavaUtilCalendar_YEAR] != [cal2 getWithInt:JavaUtilCalendar_YEAR]) {
    return NO;
  }
  return YES;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [RAREUTHelper class]) {
    RAREUTHelper_lineSeparator_ = [JavaLangSystem getPropertyWithNSString:@"line.separator"];
    RAREUTHelper_fileSeparator_ = [JavaLangSystem getPropertyWithNSString:@"file.separator"];
    RAREUTHelper_osVersion_ = [JavaLangSystem getPropertyWithNSString:@"os.version"];
    RAREUTHelper_osName_ = [JavaLangSystem getPropertyWithNSString:@"os.name"];
    RAREUTHelper_javaVersion_ = [JavaLangSystem getPropertyWithNSString:@"java.version"];
    RAREUTHelper_paddingSpace_ = [IOSCharArray arrayWithLength:256];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "compareToWithByteArray:withInt:withInt:withByteArray:withInt:withInt:", NULL, "I", 0x19, NULL },
    { "compareToWithCharArray:withInt:withInt:withCharArray:withInt:withInt:", NULL, "I", 0x19, NULL },
    { "getLocalResourcePostfixWithJavaUtilLocale:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "createCalendarWithNSString:", NULL, "LJavaUtilCalendar", 0x9, NULL },
    { "createDateWithNSString:", NULL, "LJavaUtilDate", 0x9, NULL },
    { "exceptionStringWithJavaLangThrowable:", NULL, "LNSString", 0x9, NULL },
    { "expandStringWithNSString:withNSStringArray:", NULL, "LNSString", 0x89, NULL },
    { "expandStringRepeatWithNSString:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "fromJulianWithDouble:", NULL, "LIOSIntArray", 0x9, NULL },
    { "moveWithNSObjectArray:withInt:withInt:withInt:", NULL, "Z", 0x9, NULL },
    { "keysToObjectListWithJavaUtilMap:withJavaUtilList:", NULL, "LJavaUtilList", 0x9, NULL },
    { "keysToStringListWithJavaUtilMap:withJavaUtilList:", NULL, "LJavaUtilList", 0x9, NULL },
    { "linefeedToHTMLBreakWithNSString:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "mapToStringWithJavaUtilMap:", NULL, "LNSString", 0x9, NULL },
    { "pealExceptionWithJavaLangThrowable:", NULL, "LJavaLangThrowable", 0x9, NULL },
    { "recursiveTimedWaitWithInt:withLong:withInt:", NULL, "I", 0x9, "JavaLangInterruptedException" },
    { "regionMatchesWithByteArray:withInt:withByteArray:withInt:withInt:", NULL, "Z", 0x19, NULL },
    { "removeElementsWithCharArray:withInt:withInt:", NULL, "LIOSCharArray", 0x9, NULL },
    { "runtimeExceptionWithJavaLangException:", NULL, "LJavaLangRuntimeException", 0x19, NULL },
    { "toStringWithIntArray:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "toStringWithJavaUtilList:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "toStringWithNSObjectArray:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "toStringWithJavaUtilCalendar:withBoolean:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "toStringWithNSObjectArray:withInt:withBoolean:", NULL, "LNSString", 0x9, NULL },
    { "toStringWithJavaLangStringBuilder:withJavaUtilList:withNSString:", NULL, "LJavaLangStringBuilder", 0x9, NULL },
    { "tokenReplacementWithNSString:withNSString:withNSString:withBoolean:withNSString:withNSString:withInt:", NULL, "LNSString", 0x9, NULL },
    { "valuesEqualsWithJavaUtilMap:withJavaUtilMap:", NULL, "Z", 0x9, NULL },
    { "valuesToListWithJavaUtilMap:withJavaUtilList:", NULL, "LJavaUtilList", 0x9, NULL },
    { "writePaddingWithJavaIoWriter:withInt:", NULL, "V", 0x9, "JavaIoIOException" },
    { "valuesToStringListWithJavaUtilMap:withJavaUtilList:", NULL, "LJavaUtilList", 0x9, NULL },
    { "getCharsetHelperWithNSString:", NULL, "LRAREUTiCharsetHelper", 0x9, "JavaIoUnsupportedEncodingException" },
    { "getPadding", NULL, "LIOSCharArray", 0x19, NULL },
    { "getTypeNameWithIOSClass:", NULL, "LNSString", 0x9, NULL },
    { "isBigEndian", NULL, "Z", 0x9, NULL },
    { "isNumericWithNSString:withBoolean:withBoolean:", NULL, "Z", 0x9, NULL },
    { "isNumericWithCharArray:withInt:withInt:withBoolean:withBoolean:", NULL, "Z", 0x9, NULL },
    { "isSameDayWithJavaUtilCalendar:withJavaUtilCalendar:", NULL, "Z", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "HALFSECOND_", NULL, 0x9, "D" },
    { "JGREG_", NULL, 0x9, "I" },
    { "emptyString_", NULL, 0x19, "LNSString" },
    { "lineSeparator_", NULL, 0x19, "LNSString" },
    { "fileSeparator_", NULL, 0x19, "LNSString" },
    { "osVersion_", NULL, 0x19, "LNSString" },
    { "osName_", NULL, 0x19, "LNSString" },
    { "javaVersion_", NULL, 0x19, "LNSString" },
    { "paddingSpace_", NULL, 0x1a, "LIOSCharArray" },
    { "d2r_", NULL, 0x1a, "D" },
  };
  static J2ObjcClassInfo _RAREUTHelper = { "Helper", "com.appnativa.util", NULL, 0x11, 37, methods, 10, fields, 0, NULL};
  return &_RAREUTHelper;
}

@end
