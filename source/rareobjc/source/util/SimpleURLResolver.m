//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/SimpleURLResolver.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "com/appnativa/util/SimpleURLResolver.h"
#include "com/appnativa/util/Streams.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"

@implementation RAREUTSimpleURLResolver

- (id)init {
  return [super init];
}

- (id)initWithJavaNetURL:(JavaNetURL *)base {
  if (self = [super init]) {
    baseURL_ = base;
  }
  return self;
}

- (void)setBaseURLWithJavaNetURL:(JavaNetURL *)baseURL {
  self->baseURL_ = baseURL;
}

- (id)getApplicationContext {
  return nil;
}

- (JavaNetURL *)getBaseURL {
  return baseURL_;
}

- (JavaNetURLConnection *)getConnectionWithNSString:(NSString *)file {
  JavaNetURL *url = [[JavaNetURL alloc] initWithJavaNetURL:baseURL_ withNSString:file];
  return [url openConnection];
}

- (JavaIoReader *)getReaderWithNSString:(NSString *)file {
  JavaNetURL *url = [[JavaNetURL alloc] initWithJavaNetURL:baseURL_ withNSString:file];
  JavaNetURLConnection *conn = [url openConnection];
  @try {
    return [[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[((JavaNetURLConnection *) nil_chk(conn)) getInputStream] withNSString:[self getCharsetWithNSString:[conn getContentType]]];
  }
  @catch (JavaIoUnsupportedEncodingException *ex) {
  }
  return [[RAREUTStreams_ISO88591Reader alloc] initWithJavaIoInputStream:[((JavaNetURLConnection *) nil_chk(conn)) getInputStream]];
}

- (JavaIoInputStream *)getStreamWithNSString:(NSString *)file {
  JavaNetURL *url = [[JavaNetURL alloc] initWithJavaNetURL:baseURL_ withNSString:file];
  JavaNetURLConnection *conn = [url openConnection];
  return [((JavaNetURLConnection *) nil_chk(conn)) getInputStream];
}

- (JavaNetURL *)getURLWithNSString:(NSString *)file {
  return [[JavaNetURL alloc] initWithJavaNetURL:baseURL_ withNSString:file];
}

- (NSString *)getCharsetWithNSString:(NSString *)s {
  NSString *charSet = @"ISO-8859-1";
  if ((s != nil) && ([s sequenceLength] > 0)) {
    int n = [s indexOfString:@"charset="];
    if (n == -1) {
      s = nil;
    }
    else {
      n += [@"charset=" sequenceLength];
      int p = [s indexOf:';' fromIndex:n];
      if (p == -1) {
        s = [s substring:n];
      }
      else {
        s = [s substring:n endIndex:p];
      }
      s = [((NSString *) nil_chk(s)) trim];
    }
  }
  if ((s != nil) && ([s sequenceLength] > 0)) {
    charSet = s;
  }
  return charSet;
}

- (void)copyAllFieldsTo:(RAREUTSimpleURLResolver *)other {
  [super copyAllFieldsTo:other];
  other->baseURL_ = baseURL_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getApplicationContext", NULL, "LNSObject", 0x1, NULL },
    { "getBaseURL", NULL, "LJavaNetURL", 0x1, NULL },
    { "getConnectionWithNSString:", NULL, "LJavaNetURLConnection", 0x1, "JavaIoIOException" },
    { "getReaderWithNSString:", NULL, "LJavaIoReader", 0x1, "JavaIoIOException" },
    { "getStreamWithNSString:", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "getURLWithNSString:", NULL, "LJavaNetURL", 0x1, "JavaNetMalformedURLException" },
    { "getCharsetWithNSString:", NULL, "LNSString", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "baseURL_", NULL, 0x4, "LJavaNetURL" },
  };
  static J2ObjcClassInfo _RAREUTSimpleURLResolver = { "SimpleURLResolver", "com.appnativa.util", NULL, 0x1, 7, methods, 1, fields, 0, NULL};
  return &_RAREUTSimpleURLResolver;
}

@end
