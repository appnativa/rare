//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/ObjectCache.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/util/ObjectCache.h"
#include "com/appnativa/util/iCancelable.h"
#include "com/appnativa/util/iScheduler.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/Future.h"

@implementation RAREUTObjectCache

static RAREUTObjectCache_CacheComparator * RAREUTObjectCache_cacheComparator_;
static id<RAREUTObjectCache_iCacheReferenceCreator> RAREUTObjectCache_referenceCreator_;

+ (RAREUTObjectCache_CacheComparator *)cacheComparator {
  return RAREUTObjectCache_cacheComparator_;
}

+ (void)setCacheComparator:(RAREUTObjectCache_CacheComparator *)cacheComparator {
  RAREUTObjectCache_cacheComparator_ = cacheComparator;
}

+ (id<RAREUTObjectCache_iCacheReferenceCreator>)referenceCreator {
  return RAREUTObjectCache_referenceCreator_;
}

+ (void)setReferenceCreator:(id<RAREUTObjectCache_iCacheReferenceCreator>)referenceCreator {
  RAREUTObjectCache_referenceCreator_ = referenceCreator;
}

- (id)init {
  if (self = [super init]) {
    bufferSize_ = JavaLangInteger_MAX_VALUE;
    purgeRunning_ = NO;
    puregRatio_ = .25f;
    purgeInline_ = YES;
    strongBuffer_ = NO;
    cache_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
  }
  return self;
}

- (id)initWithInt:(int)initialCapacity {
  if (self = [super init]) {
    bufferSize_ = JavaLangInteger_MAX_VALUE;
    purgeRunning_ = NO;
    puregRatio_ = .25f;
    purgeInline_ = YES;
    strongBuffer_ = NO;
    cache_ = [[JavaUtilConcurrentConcurrentHashMap alloc] initWithInt:initialCapacity];
  }
  return self;
}

- (id)initWithInt:(int)initialCapacity
        withFloat:(float)loadFactor
          withInt:(int)concurrencyLevel {
  if (self = [super init]) {
    bufferSize_ = JavaLangInteger_MAX_VALUE;
    purgeRunning_ = NO;
    puregRatio_ = .25f;
    purgeInline_ = YES;
    strongBuffer_ = NO;
    cache_ = [[JavaUtilConcurrentConcurrentHashMap alloc] initWithInt:initialCapacity withFloat:loadFactor withInt:concurrencyLevel];
  }
  return self;
}

- (void)clear {
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(cache_)) size] > maxSizeReached_) {
    maxSizeReached_ = [cache_ size];
  }
  IOSObjectArray *a = (IOSObjectArray *) check_class_cast([((id<JavaUtilCollection>) nil_chk([cache_ values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[cache_ size] type:[IOSClass classWithProtocol:@protocol(RAREUTObjectCache_iCacheReference)]]], [IOSObjectArray class]);
  id<RAREUTObjectCache_iCacheReference> c;
  int len = (a == nil) ? 0 : (int) [a count];
  int i = 0;
  [cache_ clear];
  i = 0;
  while (i < len) {
    c = IOSObjectArray_Get(nil_chk(a), i++);
    if (c != nil) {
      [c clear];
    }
  }
}

- (void)purge {
  [self run];
}

- (id)putWithId:(id)key
         withId:(id)value {
  int cacheSize = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(cache_)) size];
  if (cacheSize > maxSizeReached_) {
    maxSizeReached_ = cacheSize;
  }
  if (cacheSize > bufferSize_) {
    if (purgeHandler_ != nil) {
      if (!purgeRunning_) {
        (void) [purgeHandler_ scheduleTaskWithJavaLangRunnable:self];
      }
    }
    else if ([self isPurgeInline]) {
      [self run];
    }
  }
  id<RAREUTObjectCache_iCacheReference> c = [self createCacheReferenceWithId:key withId:value];
  if (strongBuffer_) {
    (void) [((id<RAREUTObjectCache_iCacheReference>) nil_chk(c)) makeStrong];
  }
  c = (id<RAREUTObjectCache_iCacheReference>) check_protocol_cast([cache_ putWithId:key withId:c], @protocol(RAREUTObjectCache_iCacheReference));
  value = (c == nil) ? nil : [c get];
  if (c != nil) {
    [c clear];
  }
  return value;
}

- (id)removeWithId:(id)key {
  id<RAREUTObjectCache_iCacheReference> c = (id<RAREUTObjectCache_iCacheReference>) check_protocol_cast([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(cache_)) removeWithId:key], @protocol(RAREUTObjectCache_iCacheReference));
  id v = (c == nil) ? nil : [c get];
  if (c != nil) {
    [c clear];
  }
  return v;
}

- (void)run {
  if (purgeRunning_) {
    return;
  }
  @try {
    int cacheSize = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(cache_)) size];
    if (cacheSize > maxSizeReached_) {
      maxSizeReached_ = cacheSize;
    }
    if (cacheSize < bufferSize_) {
      return;
    }
    purgeRunning_ = YES;
    int dump = (int) (puregRatio_ * bufferSize_);
    if (dump < 1) {
      dump = 1;
    }
    IOSObjectArray *a = (IOSObjectArray *) check_class_cast([((id<JavaUtilCollection>) nil_chk([cache_ values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[cache_ size] type:[IOSClass classWithProtocol:@protocol(RAREUTObjectCache_iCacheReference)]]], [IOSObjectArray class]);
    id<RAREUTObjectCache_iCacheReference> c;
    int len = (a == nil) ? 0 : (int) [a count];
    int i = 0;
    [JavaUtilArrays sortWithNSObjectArray:a withInt:0 withInt:len withJavaUtilComparator:RAREUTObjectCache_cacheComparator_];
    i = 0;
    while (i < dump) {
      c = IOSObjectArray_Get(nil_chk(a), i++);
      if (c != nil) {
        id key = [c getKey];
        if (key != nil) {
          (void) [cache_ removeWithId:key];
        }
        [c clear];
      }
    }
  }
  @finally {
    purgeRunning_ = NO;
    purgeFurture_ = nil;
  }
}

- (int)size {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(cache_)) size];
}

- (void)setBufferSizeWithInt:(int)size {
  self->bufferSize_ = size;
}

- (void)setPuregRatioWithFloat:(float)ratio {
  self->puregRatio_ = ratio;
}

- (void)setPurgeHandlerWithRAREUTiScheduler:(id<RAREUTiScheduler>)handler {
  self->purgeHandler_ = handler;
}

- (void)setPurgeInlineWithBoolean:(BOOL)purgeInline {
  self->purgeInline_ = purgeInline;
}

+ (void)setReferenceCreatorWithRAREUTObjectCache_iCacheReferenceCreator:(id<RAREUTObjectCache_iCacheReferenceCreator>)creator {
  RAREUTObjectCache_referenceCreator_ = creator;
}

- (void)setStrongReferencesWithBoolean:(BOOL)strong {
  self->strongBuffer_ = strong;
}

- (id)getWithId:(id)key {
  id<RAREUTObjectCache_iCacheReference> c = (id<RAREUTObjectCache_iCacheReference>) check_protocol_cast([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(cache_)) getWithId:key], @protocol(RAREUTObjectCache_iCacheReference));
  if (c == nil) {
    return nil;
  }
  id v = [((id<RAREUTObjectCache_iCacheReference>) nil_chk(c)) get];
  if (v == nil) {
    (void) [cache_ removeWithId:key];
    [c clear];
  }
  return v;
}

- (int)getBufferSize {
  return bufferSize_;
}

- (int)getCacheSize {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(cache_)) size];
}

- (double)getPuregRatio {
  return puregRatio_;
}

- (BOOL)isEmpty {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(cache_)) size] == 0;
}

- (BOOL)isPurgeInline {
  return purgeInline_;
}

- (BOOL)isStrongReferences {
  return strongBuffer_;
}

- (id<RAREUTObjectCache_iCacheReference>)createCacheReferenceWithId:(id)key
                                                             withId:(id)value {
  if (RAREUTObjectCache_referenceCreator_ != nil) {
    return [RAREUTObjectCache_referenceCreator_ createCacheReferenceWithId:key withId:value];
  }
  return [[RAREUTObjectCache_CacheReference alloc] initWithId:key withId:value];
}

+ (void)initialize {
  if (self == [RAREUTObjectCache class]) {
    RAREUTObjectCache_cacheComparator_ = [[RAREUTObjectCache_CacheComparator alloc] init];
  }
}

- (void)copyAllFieldsTo:(RAREUTObjectCache *)other {
  [super copyAllFieldsTo:other];
  other->bufferSize_ = bufferSize_;
  other->cache_ = cache_;
  other->maxSizeReached_ = maxSizeReached_;
  other->puregRatio_ = puregRatio_;
  other->purgeFurture_ = purgeFurture_;
  other->purgeHandler_ = purgeHandler_;
  other->purgeInline_ = purgeInline_;
  other->purgeRunning_ = purgeRunning_;
  other->strongBuffer_ = strongBuffer_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "putWithId:withId:", NULL, "LNSObject", 0x1, NULL },
    { "removeWithId:", NULL, "LNSObject", 0x1, NULL },
    { "getWithId:", NULL, "LNSObject", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "isPurgeInline", NULL, "Z", 0x1, NULL },
    { "isStrongReferences", NULL, "Z", 0x1, NULL },
    { "createCacheReferenceWithId:withId:", NULL, "LRAREUTObjectCache_iCacheReference", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "cacheComparator_", NULL, 0xa, "LRAREUTObjectCache_CacheComparator" },
    { "referenceCreator_", NULL, 0xa, "LRAREUTObjectCache_iCacheReferenceCreator" },
    { "purgeFurture_", NULL, 0x1, "LJavaUtilConcurrentFuture" },
    { "cache_", NULL, 0x0, "LJavaUtilConcurrentConcurrentHashMap" },
    { "purgeRunning_", NULL, 0x44, "Z" },
  };
  static J2ObjcClassInfo _RAREUTObjectCache = { "ObjectCache", "com.appnativa.util", NULL, 0x1, 7, methods, 5, fields, 0, NULL};
  return &_RAREUTObjectCache;
}

@end

@interface RAREUTObjectCache_iCacheReferenceCreator : NSObject
@end

@implementation RAREUTObjectCache_iCacheReferenceCreator

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createCacheReferenceWithId:withId:", NULL, "LRAREUTObjectCache_iCacheReference", 0x401, NULL },
  };
  static J2ObjcClassInfo _RAREUTObjectCache_iCacheReferenceCreator = { "iCacheReferenceCreator", "com.appnativa.util", "ObjectCache", 0x209, 1, methods, 0, NULL, 0, NULL};
  return &_RAREUTObjectCache_iCacheReferenceCreator;
}

@end
@implementation RAREUTObjectCache_CacheComparator

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  id<RAREUTObjectCache_iCacheReference> c1 = (id<RAREUTObjectCache_iCacheReference>) check_protocol_cast(o1, @protocol(RAREUTObjectCache_iCacheReference));
  id<RAREUTObjectCache_iCacheReference> c2 = (id<RAREUTObjectCache_iCacheReference>) check_protocol_cast(o2, @protocol(RAREUTObjectCache_iCacheReference));
  if ((c1 == nil) || (c2 == nil)) {
    if (c1 == c2) {
      return 0;
    }
    return (c1 == nil) ? -1 : 1;
  }
  return (int) ([((id<RAREUTObjectCache_iCacheReference>) nil_chk(c1)) getTimestamp] - [((id<RAREUTObjectCache_iCacheReference>) nil_chk(c2)) getTimestamp]);
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _RAREUTObjectCache_CacheComparator = { "CacheComparator", "com.appnativa.util", "ObjectCache", 0xc, 0, NULL, 0, NULL, 0, NULL};
  return &_RAREUTObjectCache_CacheComparator;
}

@end

@interface RAREUTObjectCache_iCacheReference : NSObject
@end

@implementation RAREUTObjectCache_iCacheReference

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "clear", NULL, "V", 0x401, NULL },
    { "makeStrong", NULL, "LRAREUTObjectCache_iCacheReference", 0x401, NULL },
    { "get", NULL, "LNSObject", 0x401, NULL },
    { "getKey", NULL, "LNSObject", 0x401, NULL },
    { "getTimestamp", NULL, "J", 0x401, NULL },
  };
  static J2ObjcClassInfo _RAREUTObjectCache_iCacheReference = { "iCacheReference", "com.appnativa.util", "ObjectCache", 0x209, 5, methods, 0, NULL, 0, NULL};
  return &_RAREUTObjectCache_iCacheReference;
}

@end
@implementation RAREUTObjectCache_CacheReference

- (id)initWithId:(id)key
          withId:(id)referent {
  if (self = [super initWithId:referent]) {
    self->key_ = key;
    timestamp_ = [JavaLangSystem currentTimeMillis];
  }
  return self;
}

- (void)clear {
  [super clear];
  key_ = nil;
  strong_ = nil;
}

- (id<RAREUTObjectCache_iCacheReference>)makeStrong {
  strong_ = [super get];
  return self;
}

- (id)get {
  timestamp_ = [JavaLangSystem currentTimeMillis];
  return [super get];
}

- (id)getKey {
  return key_;
}

- (long long int)getTimestamp {
  return timestamp_;
}

- (void)copyAllFieldsTo:(RAREUTObjectCache_CacheReference *)other {
  [super copyAllFieldsTo:other];
  other->key_ = key_;
  other->strong_ = strong_;
  other->timestamp_ = timestamp_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "makeStrong", NULL, "LRAREUTObjectCache_iCacheReference", 0x1, NULL },
    { "get", NULL, "LNSObject", 0x1, NULL },
    { "getKey", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "key_", NULL, 0x0, "LNSObject" },
    { "strong_", NULL, 0x0, "LNSObject" },
    { "timestamp_", NULL, 0x0, "J" },
  };
  static J2ObjcClassInfo _RAREUTObjectCache_CacheReference = { "CacheReference", "com.appnativa.util", "ObjectCache", 0xc, 3, methods, 3, fields, 0, NULL};
  return &_RAREUTObjectCache_CacheReference;
}

@end
