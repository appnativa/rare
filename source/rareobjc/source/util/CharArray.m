//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/CharArray.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "com/appnativa/util/ByteArray.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/ISO88591Helper.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/aStreamer.h"
#include "com/appnativa/util/iCharsetHelper.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringIndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"

@implementation RAREUTCharArray

static JavaUtilHashSet * RAREUTCharArray_small_words_;
static IOSCharArray * RAREUTCharArray_title_case_word_chars_;
static int RAREUTCharArray_longest_small_word_ = 3;
static JavaLangThreadLocal * RAREUTCharArray_perThreadCharArray_;
static JavaLangThreadLocal * RAREUTCharArray_perThreadNumber_;

+ (int)expandBy {
  return RAREUTCharArray_expandBy;
}

+ (int)expandByHalf {
  return RAREUTCharArray_expandByHalf;
}

+ (JavaUtilHashSet *)small_words {
  return RAREUTCharArray_small_words_;
}

+ (void)setSmall_words:(JavaUtilHashSet *)small_words {
  RAREUTCharArray_small_words_ = small_words;
}

+ (IOSCharArray *)title_case_word_chars {
  return RAREUTCharArray_title_case_word_chars_;
}

+ (void)setTitle_case_word_chars:(IOSCharArray *)title_case_word_chars {
  RAREUTCharArray_title_case_word_chars_ = title_case_word_chars;
}

+ (int)longest_small_word {
  return RAREUTCharArray_longest_small_word_;
}

+ (int *)longest_small_wordRef {
  return &RAREUTCharArray_longest_small_word_;
}

+ (JavaLangThreadLocal *)perThreadCharArray {
  return RAREUTCharArray_perThreadCharArray_;
}

+ (void)setPerThreadCharArray:(JavaLangThreadLocal *)perThreadCharArray {
  RAREUTCharArray_perThreadCharArray_ = perThreadCharArray;
}

+ (JavaLangThreadLocal *)perThreadNumber {
  return RAREUTCharArray_perThreadNumber_;
}

+ (void)setPerThreadNumber:(JavaLangThreadLocal *)perThreadNumber {
  RAREUTCharArray_perThreadNumber_ = perThreadNumber;
}

- (id)init {
  if (self = [super init]) {
    A_ = [IOSCharArray arrayWithLength:RAREUTCharArray_expandBy];
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)e {
  if (self = [super init]) {
    _length_ = (int) [((IOSCharArray *) nil_chk(e)) count];
    A_ = [IOSCharArray arrayWithLength:_length_];
    if (_length_ < 15) {
      int i = 0;
      int len = _length_;
      IOSCharArray *a = A_;
      while (i < len) {
        (*IOSCharArray_GetRef(a, i)) = IOSCharArray_Get(e, i);
        i++;
      }
    }
    else {
      [JavaLangSystem arraycopyWithId:e withInt:0 withId:A_ withInt:0 withInt:_length_];
    }
  }
  return self;
}

- (id)initWithRAREUTCharArray:(RAREUTCharArray *)e {
  if (self = [super init]) {
    _length_ = ((RAREUTCharArray *) nil_chk(e))->_length_;
    A_ = [IOSCharArray arrayWithLength:_length_];
    if (_length_ < 15) {
      int i = 0;
      int len = _length_;
      IOSCharArray *a = A_;
      IOSCharArray *ea = e->A_;
      while (i < len) {
        (*IOSCharArray_GetRef(a, i)) = IOSCharArray_Get(ea, i);
        i++;
      }
    }
    else {
      [JavaLangSystem arraycopyWithId:e->A_ withInt:0 withId:A_ withInt:0 withInt:_length_];
    }
  }
  return self;
}

- (id)initWithInt:(int)len {
  if (self = [super init]) {
    A_ = [IOSCharArray arrayWithLength:len];
  }
  return self;
}

- (id)initWithNSString:(NSString *)e {
  if (self = [super init]) {
    _length_ = (e == nil) ? 0 : [e sequenceLength];
    A_ = [IOSCharArray arrayWithLength:_length_];
    if (e != nil) {
      [e getChars:0 sourceEnd:_length_ destination:A_ destinationBegin:0];
    }
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)e
                withInt:(int)pos
                withInt:(int)len {
  if (self = [super init]) {
    _length_ = len;
    A_ = [IOSCharArray arrayWithLength:_length_];
    if (_length_ < 9) {
      int i = 0;
      IOSCharArray *a = A_;
      len += pos;
      while (pos < len) {
        (*IOSCharArray_GetRef(a, i++)) = IOSCharArray_Get(nil_chk(e), pos++);
      }
    }
    else {
      [JavaLangSystem arraycopyWithId:e withInt:pos withId:A_ withInt:0 withInt:len];
    }
  }
  return self;
}

- (id)initWithCharArray:(IOSCharArray *)e
                withInt:(int)len {
  if (self = [super init]) {
    A_ = e;
    _length_ = len;
  }
  return self;
}

+ (JavaUtilHashSet *)getTitleCaseSmallWords {
  return RAREUTCharArray_small_words_;
}

+ (void)setTitleCaseSmallWordsWithJavaUtilHashSet:(JavaUtilHashSet *)words {
  RAREUTCharArray_small_words_ = words;
  int len = 0;
  id<JavaUtilIterator> it = [((JavaUtilHashSet *) nil_chk(RAREUTCharArray_small_words_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([it next], [RAREUTCharArray class]);
    if ([((RAREUTCharArray *) nil_chk(ca)) sequenceLength] > len) {
      len = [ca sequenceLength];
    }
  }
  RAREUTCharArray_longest_small_word_ = len;
}

+ (void)setTitleCaseWordSeparatorsWithCharArray:(IOSCharArray *)chars {
  RAREUTCharArray_title_case_word_chars_ = chars;
}

+ (IOSCharArray *)getTitleCaseWordSeparatorsWithCharArray:(IOSCharArray *)chars {
  return RAREUTCharArray_title_case_word_chars_;
}

- (RAREUTCharArray *)appendWithBoolean:(BOOL)e {
  return [self appendWithNSString:[NSString valueOfBool:e]];
}

- (RAREUTCharArray *)appendWithChar:(unichar)e {
  if (_length_ == (int) [((IOSCharArray *) nil_chk(A_)) count]) {
    [self expandCapacityWithInt:_length_ + 1];
  }
  (*IOSCharArray_GetRef(A_, _length_++)) = e;
  return self;
}

- (RAREUTCharArray *)appendCharWithInt:(int)e {
  if (_length_ == (int) [((IOSCharArray *) nil_chk(A_)) count]) {
    [self expandCapacityWithInt:_length_ + 1];
  }
  (*IOSCharArray_GetRef(A_, _length_++)) = (unichar) e;
  return self;
}

- (RAREUTCharArray *)appendWithCharArray:(IOSCharArray *)e {
  return [self appendWithCharArray:e withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(e)) count]];
}

- (RAREUTCharArray *)appendWithRAREUTCharArray:(RAREUTCharArray *)e {
  return [self appendWithCharArray:((RAREUTCharArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_];
}

- (RAREUTCharArray *)appendWithDouble:(double)e {
  return [((RAREUTSNumber *) nil_chk([((RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharArray_perThreadNumber_)) get], [RAREUTSNumber class])) setValueWithDouble:e])) toStringWithRAREUTCharArray:self withBoolean:YES];
}

- (RAREUTCharArray *)appendWithInt:(int)e {
  return [((RAREUTSNumber *) nil_chk([((RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharArray_perThreadNumber_)) get], [RAREUTSNumber class])) setValueWithInt:e])) toStringWithRAREUTCharArray:self withBoolean:YES];
}

- (RAREUTCharArray *)appendWithLong:(long long int)e {
  return [((RAREUTSNumber *) nil_chk([((RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharArray_perThreadNumber_)) get], [RAREUTSNumber class])) setValueWithLong:e])) toStringWithRAREUTCharArray:self withBoolean:YES];
}

- (RAREUTCharArray *)appendWithId:(id)o {
  return [self appendWithNSString:[nil_chk(o) description]];
}

- (RAREUTCharArray *)appendWithNSString:(NSString *)e {
  int len;
  if ((e != nil) && (len = [e sequenceLength]) != 0) {
    IOSCharArray *A = self->A_;
    int _length = self->_length_;
    int nlen = len + _length;
    if (nlen > (int) [((IOSCharArray *) nil_chk(A)) count]) {
      [self expandCapacityWithInt:nlen];
      A = self->A_;
    }
    if (len < 3) {
      (*IOSCharArray_GetRef(nil_chk(A), _length++)) = [e charAtWithInt:0];
      if (len == 2) {
        (*IOSCharArray_GetRef(A, _length++)) = [e charAtWithInt:1];
      }
    }
    else {
      [e getChars:0 sourceEnd:len destination:A destinationBegin:_length];
      _length = nlen;
    }
    self->_length_ = _length;
  }
  return self;
}

- (RAREUTCharArray *)appendWithCharArray:(IOSCharArray *)e
                                 withInt:(int)pos
                                 withInt:(int)len {
  if (len > 0) {
    if (len == -1) {
      len = (int) [((IOSCharArray *) nil_chk(e)) count] - pos;
    }
    IOSCharArray *A = self->A_;
    int nlen = len + _length_;
    if (nlen > (int) [((IOSCharArray *) nil_chk(A)) count]) {
      [self expandCapacityWithInt:nlen];
      A = self->A_;
    }
    if (len < 9) {
      int i = _length_;
      len += pos;
      while (pos < len) {
        (*IOSCharArray_GetRef(nil_chk(A), i++)) = IOSCharArray_Get(nil_chk(e), pos++);
      }
    }
    else {
      [JavaLangSystem arraycopyWithId:e withInt:pos withId:A withInt:_length_ withInt:len];
    }
    _length_ = nlen;
  }
  return self;
}

- (RAREUTCharArray *)appendWithRAREUTCharArray:(RAREUTCharArray *)e
                                       withInt:(int)pos
                                       withInt:(int)len {
  return [self appendWithCharArray:((RAREUTCharArray *) nil_chk(e))->A_ withInt:pos withInt:len];
}

- (RAREUTCharArray *)appendWithNSString:(NSString *)e
                                withInt:(int)pos
                                withInt:(int)len {
  if ((e != nil) && (len != 0)) {
    if (len == -1) {
      len = [e sequenceLength] - pos;
    }
    if (len != 0) {
      IOSCharArray *A = self->A_;
      int _length = self->_length_;
      int nlen = len + _length;
      if (nlen > (int) [((IOSCharArray *) nil_chk(A)) count]) {
        [self expandCapacityWithInt:nlen];
        A = self->A_;
      }
      if (len < 3) {
        (*IOSCharArray_GetRef(nil_chk(A), _length++)) = [e charAtWithInt:pos];
        if (len == 2) {
          (*IOSCharArray_GetRef(A, _length++)) = [e charAtWithInt:++pos];
        }
      }
      else {
        [e getChars:pos sourceEnd:pos + len destination:A destinationBegin:_length];
        _length = nlen;
      }
      self->A_ = A;
      self->_length_ = _length;
    }
  }
  return self;
}

- (RAREUTCharArray *)appendAtWithInt:(int)index
                 withRAREUTCharArray:(RAREUTCharArray *)e {
  return [self appendAtWithInt:index withCharArray:((RAREUTCharArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_];
}

- (RAREUTCharArray *)appendAtWithInt:(int)index
                       withCharArray:(IOSCharArray *)e
                             withInt:(int)pos
                             withInt:(int)len {
  _length_ = index;
  if (len == -1) {
    len = (int) [((IOSCharArray *) nil_chk(e)) count] - pos;
  }
  int nlen = len + _length_;
  if (nlen > (int) [((IOSCharArray *) nil_chk(A_)) count]) {
    [self expandCapacityWithInt:_length_ + len];
  }
  if (len == 1) {
    (*IOSCharArray_GetRef(A_, _length_++)) = IOSCharArray_Get(nil_chk(e), pos);
  }
  else {
    [JavaLangSystem arraycopyWithId:e withInt:pos withId:A_ withInt:_length_ withInt:len];
    _length_ = nlen;
  }
  return self;
}

- (RAREUTCharArray *)appendNumWithInt:(int)e {
  return [((RAREUTSNumber *) nil_chk([((RAREUTSNumber *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharArray_perThreadNumber_)) get], [RAREUTSNumber class])) setValueWithInt:e])) toStringWithRAREUTCharArray:self withBoolean:YES];
}

- (int)available {
  return (thePos_ < _length_) ? (_length_ - thePos_) : (0);
}

- (int)capacity {
  return (int) [((IOSCharArray *) nil_chk(A_)) count];
}

- (int)chopWithInt:(int)num {
  if (num > 0) {
    _length_ -= num;
  }
  if (_length_ < 0) {
    _length_ = 0;
  }
  return _length_;
}

- (unichar)charAtWithInt:(int)pos {
  [self checkRangeWithInt:pos];
  return IOSCharArray_Get(nil_chk(A_), pos);
}

+ (IOSCharArray *)copyOfWithCharArray:(IOSCharArray *)original
                              withInt:(int)newLength {
  IOSCharArray *copy_ = [IOSCharArray arrayWithLength:newLength];
  [JavaLangSystem arraycopyWithId:original withInt:0 withId:copy_ withInt:0 withInt:[JavaLangMath minWithInt:(int) [((IOSCharArray *) nil_chk(original)) count] withInt:newLength]];
  return copy_;
}

- (void)clear {
  _length_ = 0;
  thePos_ = 0;
  theMark_ = 0;
}

- (id)clone {
  return [[RAREUTCharArray alloc] initWithCharArray:A_];
}

- (void)close {
  thePos_ = _length_;
}

- (int)compareToWithRAREUTCharArray:(RAREUTCharArray *)ca {
  int len1 = _length_;
  int len2 = ((RAREUTCharArray *) nil_chk(ca))->_length_;
  int lim = [JavaLangMath minWithInt:len1 withInt:len2];
  IOSCharArray *v1 = A_;
  IOSCharArray *v2 = ca->A_;
  int k = 0;
  while (k < lim) {
    unichar c1 = IOSCharArray_Get(nil_chk(v1), k);
    unichar c2 = IOSCharArray_Get(nil_chk(v2), k);
    if (c1 != c2) {
      return c1 - c2;
    }
    k++;
  }
  return len1 - len2;
}

- (int)compareToWithId:(id)o {
  return [self compareToWithRAREUTCharArray:(RAREUTCharArray *) check_class_cast(o, [RAREUTCharArray class])];
}

- (RAREUTCharArray *)removeWithInt:(int)start
                           withInt:(int)end {
  [self checkRangeWithInt:start];
  if ((end == -1) || (end > _length_)) {
    end = _length_;
  }
  int len = end - start;
  if (len > 0) {
    [JavaLangSystem arraycopyWithId:A_ withInt:start + len withId:A_ withInt:start withInt:_length_ - end];
    _length_ -= len;
  }
  return self;
}

- (RAREUTCharArray *)deleteCharAtWithInt:(int)pos {
  [self checkRangeWithInt:pos];
  if (pos == (_length_ - 1)) {
    _length_--;
  }
  else {
    _length_--;
    [JavaLangSystem arraycopyWithId:A_ withInt:pos + 1 withId:A_ withInt:pos withInt:_length_ - pos];
  }
  return self;
}

- (void)encodeVarIntWithInt:(int)val {
  BOOL neg = NO;
  if (val < 0) {
    neg = YES;
    val *= -1;
  }
  int l;
  if (val >= (1 << 16)) {
    l = 2;
  }
  else {
    l = 1;
  }
  int i = _length_;
  if (i + l + 1 >= (int) [((IOSCharArray *) nil_chk(A_)) count]) {
    [self expandCapacityWithInt:_length_ + l + 1];
  }
  if (neg) {
    (*IOSCharArray_GetRef(A_, i++)) = (unichar) (l + 128);
  }
  else {
    (*IOSCharArray_GetRef(A_, i++)) = (unichar) l;
  }
  if (l == 1) {
    (*IOSCharArray_GetRef(A_, i++)) = (unichar) val;
  }
  else {
    (*IOSCharArray_GetRef(A_, i++)) = (unichar) ((val >> 16) & (int) 0xffff);
    (*IOSCharArray_GetRef(A_, i++)) = (unichar) (val & (int) 0xffff);
  }
  _length_ = i;
}

- (void)encodeVarLengthWithInt:(int)val {
  int l;
  if (val < 0) {
    if (_length_ + 1 >= (int) [((IOSCharArray *) nil_chk(A_)) count]) {
      [self expandCapacityWithInt:_length_ + 1];
    }
    (*IOSCharArray_GetRef(A_, _length_++)) = (unichar) 32768;
    return;
  }
  if (val < 32768) {
    if (_length_ + 1 >= (int) [((IOSCharArray *) nil_chk(A_)) count]) {
      [self expandCapacityWithInt:_length_ + 1];
    }
    (*IOSCharArray_GetRef(A_, _length_++)) = (unichar) val;
    return;
  }
  if (val >= (1 << 16)) {
    l = 2;
  }
  else {
    l = 1;
  }
  int i = _length_;
  if (i + l + 1 >= (int) [((IOSCharArray *) nil_chk(A_)) count]) {
    [self expandCapacityWithInt:_length_ + 1 + l];
  }
  (*IOSCharArray_GetRef(A_, i++)) = (unichar) (l | 32768);
  if (l == 1) {
    (*IOSCharArray_GetRef(A_, i++)) = (unichar) val;
  }
  else {
    (*IOSCharArray_GetRef(A_, i++)) = (unichar) ((val >> 16) & (int) 0xffff);
    (*IOSCharArray_GetRef(A_, i++)) = (unichar) (val & (int) 0xffff);
  }
  _length_ = i;
}

- (void)encodeVarStringWithNSString:(NSString *)val {
  if (val == nil) {
    [self encodeVarLengthWithInt:-1];
  }
  else {
    int len = [val sequenceLength];
    [self encodeVarLengthWithInt:len];
    if (len > 0) {
      (void) [self appendWithNSString:val];
    }
  }
}

- (BOOL)endsWithWithCharArray:(IOSCharArray *)suffix {
  return [self startsWithWithCharArray:suffix withInt:_length_ - (int) [((IOSCharArray *) nil_chk(suffix)) count] withInt:0 withInt:(int) [suffix count]];
}

- (BOOL)endsWithWithRAREUTCharArray:(RAREUTCharArray *)suffix {
  return [self startsWithWithCharArray:((RAREUTCharArray *) nil_chk(suffix))->A_ withInt:_length_ - suffix->_length_ withInt:0 withInt:suffix->_length_];
}

- (BOOL)endsWithWithNSString:(NSString *)suffix {
  return [self startsWithWithCharArray:[((NSString *) nil_chk(suffix)) toCharArray] withInt:_length_ - [suffix sequenceLength] withInt:0 withInt:[suffix sequenceLength]];
}

- (void)ensureCapacityWithInt:(int)minimumCapacity {
  if (minimumCapacity > (int) [((IOSCharArray *) nil_chk(A_)) count]) {
    [self expandCapacityWithInt:minimumCapacity];
  }
}

- (void)ensureLengthWithInt:(int)length {
  int len = (int) [((IOSCharArray *) nil_chk(A_)) count];
  if (length <= len) {
    return;
  }
  IOSCharArray *newValue = [IOSCharArray arrayWithLength:length];
  [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:newValue withInt:0 withInt:len];
  A_ = newValue;
}

- (BOOL)equalsWithRAREUTCharArray:(RAREUTCharArray *)array {
  if (((RAREUTCharArray *) nil_chk(array))->_length_ != _length_) {
    return NO;
  }
  int i = 0;
  IOSCharArray *A2 = array->A_;
  while (i < _length_) {
    if (IOSCharArray_Get(nil_chk(A_), i) != IOSCharArray_Get(nil_chk(A2), i)) {
      return NO;
    }
    i++;
  }
  return YES;
}

- (BOOL)isEqual:(id)o {
  if (!([o isKindOfClass:[RAREUTCharArray class]])) {
    return NO;
  }
  return [self equalsWithRAREUTCharArray:(RAREUTCharArray *) check_class_cast(o, [RAREUTCharArray class])];
}

- (BOOL)equalsWithCharArray:(IOSCharArray *)e
                    withInt:(int)pos
                    withInt:(int)len {
  if (len != _length_) {
    return NO;
  }
  for (int i = 0; i < len; i++) {
    if (IOSCharArray_Get(nil_chk(A_), i) != IOSCharArray_Get(nil_chk(e), i + pos)) {
      return NO;
    }
  }
  return YES;
}

- (BOOL)equalsIgnoreCaseWithRAREUTCharArray:(RAREUTCharArray *)otherBuffer {
  return (self == otherBuffer) ? YES : ((otherBuffer != nil) && (otherBuffer->_length_ == _length_) && [self regionMatchesWithBoolean:YES withInt:0 withCharArray:otherBuffer->A_ withInt:0 withInt:_length_]);
}

- (BOOL)equalsIgnoreCaseWithNSString:(NSString *)aString {
  return [((NSString *) nil_chk([self description])) equalsIgnoreCase:aString];
}

- (IOSByteArray *)getBytesWithRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  RAREUTByteArray *ba = [[RAREUTByteArray alloc] initWithInt:_length_];
  ba->_length_ = [((id<RAREUTiCharsetHelper>) nil_chk(csh)) getBytesWithCharArray:A_ withInt:0 withInt:_length_ withRAREUTByteArray:ba withInt:0];
  return [ba toArray];
}

- (int)getBytesWithRAREUTByteArray:(RAREUTByteArray *)ba
          withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  return [((id<RAREUTiCharsetHelper>) nil_chk(csh)) getBytesWithCharArray:A_ withInt:0 withInt:_length_ withRAREUTByteArray:ba withInt:0];
}

- (NSString *)getPieceWithChar:(unichar)tok
                       withInt:(int)piece {
  int i = 0;
  int n = 1;
  int oi = 0;
  int pos;
  int tl = 1;
  if ((piece < 1) || (tl == 0)) {
    return nil;
  }
  while ((n < piece) && ((i = [self indexOfWithChar:tok withInt:i]) != -1)) {
    i += tl;
    n++;
  }
  if ((n < piece) || (i == -1)) {
    return nil;
  }
  oi = i;
  i = [self indexOfWithChar:tok withInt:i];
  if (i == -1) {
    return [self substringWithInt:oi];
  }
  pos = oi;
  i += tl;
  while ((n < piece) && ((i = [self indexOfWithChar:tok withInt:i]) != -1)) {
    n++;
    i += tl;
  }
  if (i == -1) {
    return [self substringWithInt:pos];
  }
  return [self substringWithInt:pos withInt:i - tl];
}

- (int)getTokenWithChar:(unichar)c
    withRAREUTCharArray:(RAREUTCharArray *)outArg
                withInt:(int)start {
  int n = [self indexOfWithChar:c withInt:start];
  if (n == -1) {
    return -1;
  }
  ((RAREUTCharArray *) nil_chk(outArg))->_length_ = 0;
  (void) [outArg appendWithCharArray:A_ withInt:0 withInt:n];
  return (n + 1);
}

- (int)getTokenWithNSString:(NSString *)s
        withRAREUTCharArray:(RAREUTCharArray *)outArg
                    withInt:(int)start {
  int n = [self indexOfWithNSString:s withInt:start];
  if (n == -1) {
    return -1;
  }
  ((RAREUTCharArray *) nil_chk(outArg))->_length_ = 0;
  (void) [outArg appendWithCharArray:A_ withInt:0 withInt:n];
  return (n + [((NSString *) nil_chk(s)) sequenceLength]);
}

- (NSUInteger)hash {
  int h = 0;
  int i = 0;
  int len = _length_;
  IOSCharArray *a = A_;
  while (i < len) {
    h = (31 * h) + IOSCharArray_Get(nil_chk(a), i++);
  }
  return h;
}

- (int)indexOfWithChar:(unichar)e {
  IOSCharArray *v = A_;
  int len = _length_;
  int pos = 0;
  while (pos < len) {
    if (IOSCharArray_Get(nil_chk(v), pos) == e) {
      return pos;
    }
    pos++;
  }
  return -1;
}

- (int)indexOfWithRAREUTCharArray:(RAREUTCharArray *)e {
  return [RAREUTCharArray indexOfWithCharArray:A_ withInt:0 withInt:_length_ withCharArray:((RAREUTCharArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_ withInt:0];
}

- (int)indexOfWithNSString:(NSString *)e {
  return [RAREUTCharArray indexOfWithCharArray:A_ withInt:0 withInt:_length_ withCharArray:[((NSString *) nil_chk(e)) toCharArray] withInt:0 withInt:[e sequenceLength] withInt:0];
}

- (int)indexOfWithChar:(unichar)e
               withInt:(int)fromIndex {
  int max = _length_;
  if (fromIndex < 0) {
    fromIndex = 0;
  }
  else if (fromIndex >= _length_) {
    return -1;
  }
  for (int i = fromIndex; i < max; i++) {
    if (IOSCharArray_Get(nil_chk(A_), i) == e) {
      return i;
    }
  }
  return -1;
}

- (int)indexOfWithCharArray:(IOSCharArray *)e
                    withInt:(int)fromIndex {
  return [RAREUTCharArray indexOfWithCharArray:A_ withInt:0 withInt:_length_ withCharArray:e withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(e)) count] withInt:fromIndex];
}

- (int)indexOfWithRAREUTCharArray:(RAREUTCharArray *)e
                          withInt:(int)fromIndex {
  return [RAREUTCharArray indexOfWithCharArray:A_ withInt:0 withInt:_length_ withCharArray:((RAREUTCharArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_ withInt:fromIndex];
}

- (int)indexOfWithNSString:(NSString *)e
                   withInt:(int)fromIndex {
  return [RAREUTCharArray indexOfWithCharArray:A_ withInt:0 withInt:_length_ withCharArray:[((NSString *) nil_chk(e)) toCharArray] withInt:0 withInt:[e sequenceLength] withInt:fromIndex];
}

+ (int)indexOfWithCharArray:(IOSCharArray *)source
                    withInt:(int)pos
                    withInt:(int)len
                   withChar:(unichar)e
                    withInt:(int)fromIndex {
  int max = pos + len;
  if (fromIndex < pos) {
    fromIndex = pos;
  }
  else if (fromIndex >= len) {
    return -1;
  }
  for (int i = fromIndex; i < max; i++) {
    if (IOSCharArray_Get(nil_chk(source), i) == e) {
      return i;
    }
  }
  return -1;
}

+ (int)indexOfWithCharArray:(IOSCharArray *)source
                    withInt:(int)sourceOffset
                    withInt:(int)sourceCount
              withCharArray:(IOSCharArray *)target
                    withInt:(int)targetOffset
                    withInt:(int)targetCount
                    withInt:(int)fromIndex {
  if (fromIndex >= sourceCount) {
    return ((targetCount == 0) ? sourceCount : (-1));
  }
  if (fromIndex < 0) {
    fromIndex = 0;
  }
  if (targetCount == 0) {
    return fromIndex;
  }
  unichar first = IOSCharArray_Get(nil_chk(target), targetOffset);
  int i = sourceOffset + fromIndex;
  int max = sourceOffset + (sourceCount - targetCount);
  while (YES) {
    {
      while ((i <= max) && (IOSCharArray_Get(nil_chk(source), i) != first)) {
        i++;
      }
      if (i > max) {
        return -1;
      }
      int j = i + 1;
      int end = (j + targetCount) - 1;
      int k = targetOffset + 1;
      while (j < end) {
        if (IOSCharArray_Get(nil_chk(source), j++) != IOSCharArray_Get(target, k++)) {
          i++;
          goto continue_startSearchForFirstChar;
        }
      }
      return i - sourceOffset;
    }
    continue_startSearchForFirstChar: ;
  }
}

- (int)indexOfIgnoreCaseWithCharArray:(IOSCharArray *)e
                              withInt:(int)fromIndex {
  return [RAREUTCharArray indexOfIgnoreCaseWithCharArray:A_ withInt:0 withInt:_length_ withCharArray:e withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(e)) count] withInt:fromIndex];
}

- (int)indexOfIgnoreCaseWithRAREUTCharArray:(RAREUTCharArray *)e
                                    withInt:(int)fromIndex {
  return [RAREUTCharArray indexOfIgnoreCaseWithCharArray:A_ withInt:0 withInt:_length_ withCharArray:((RAREUTCharArray *) nil_chk(e))->A_ withInt:0 withInt:e->_length_ withInt:fromIndex];
}

- (int)indexOfIgnoreCaseWithNSString:(NSString *)e
                             withInt:(int)fromIndex {
  return [RAREUTCharArray indexOfIgnoreCaseWithCharArray:A_ withInt:0 withInt:_length_ withCharArray:[((NSString *) nil_chk(e)) toCharArray] withInt:0 withInt:[e sequenceLength] withInt:fromIndex];
}

+ (int)indexOfIgnoreCaseWithCharArray:(IOSCharArray *)source
                              withInt:(int)sourceOffset
                              withInt:(int)sourceCount
                        withCharArray:(IOSCharArray *)target
                              withInt:(int)targetOffset
                              withInt:(int)targetCount
                              withInt:(int)fromIndex {
  if (fromIndex >= sourceCount) {
    return ((targetCount == 0) ? sourceCount : (-1));
  }
  if (fromIndex < 0) {
    fromIndex = 0;
  }
  if (targetCount == 0) {
    return fromIndex;
  }
  unichar first = [JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(nil_chk(target), targetOffset)];
  int i = sourceOffset + fromIndex;
  int max = sourceOffset + (sourceCount - targetCount);
  while (YES) {
    {
      while ((i <= max) && ([JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(nil_chk(source), i)] != first)) {
        i++;
      }
      if (i > max) {
        return -1;
      }
      int j = i + 1;
      int end = (j + targetCount) - 1;
      int k = targetOffset + 1;
      while (j < end) {
        if ([JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(nil_chk(source), j++)] != [JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(target, k++)]) {
          i++;
          goto continue_startSearchForFirstChar;
        }
      }
      return i - sourceOffset;
    }
    continue_startSearchForFirstChar: ;
  }
}

- (RAREUTCharArray *)insertWithInt:(int)index
                          withChar:(unichar)e {
  if (index > _length_) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@>%@", [NSString valueOfInt:index], [NSString valueOfInt:_length_]]];
  }
  if (index < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@<0", [NSString valueOfInt:index]]];
  }
  if (_length_ == (int) [((IOSCharArray *) nil_chk(A_)) count]) {
    [self expandCapacityWithInt:_length_ + 1];
  }
  if (index == _length_) {
    (*IOSCharArray_GetRef(A_, _length_++)) = e;
    return self;
  }
  [JavaLangSystem arraycopyWithId:A_ withInt:index withId:A_ withInt:index + 1 withInt:_length_ - index];
  (*IOSCharArray_GetRef(A_, index)) = e;
  _length_++;
  return self;
}

- (RAREUTCharArray *)insertWithInt:(int)index
                     withCharArray:(IOSCharArray *)e {
  return [self insertWithInt:index withCharArray:e withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(e)) count]];
}

- (RAREUTCharArray *)insertWithInt:(int)index
                      withNSString:(NSString *)e {
  if (e != nil) {
    IOSCharArray *chars = [e toCharArray];
    (void) [self insertWithInt:index withCharArray:chars withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(chars)) count]];
  }
  return self;
}

- (RAREUTCharArray *)insertWithInt:(int)index
                     withCharArray:(IOSCharArray *)e
                           withInt:(int)pos
                           withInt:(int)len {
  if (len != 0) {
    if ((index < 0) || (index > _length_)) {
      @throw [[JavaLangStringIndexOutOfBoundsException alloc] init];
    }
    if ((pos < 0) || ((pos + len) < 0) || ((pos + len) > (int) [((IOSCharArray *) nil_chk(e)) count])) {
      @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:pos];
    }
    if (len < 0) {
      @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:len];
    }
    int nlen = _length_ + len;
    if (nlen > (int) [((IOSCharArray *) nil_chk(A_)) count]) {
      [self expandCapacityWithInt:nlen];
    }
    [JavaLangSystem arraycopyWithId:A_ withInt:index withId:A_ withInt:index + len withInt:_length_ - index];
    [JavaLangSystem arraycopyWithId:e withInt:pos withId:A_ withInt:index withInt:len];
    _length_ = nlen;
  }
  return self;
}

- (int)lastIndexOfWithInt:(int)ch {
  IOSCharArray *v = A_;
  int pos = _length_;
  while (pos > 0) {
    if (IOSCharArray_Get(nil_chk(v), --pos) == ch) {
      return pos;
    }
  }
  return -1;
}

- (int)lastIndexOfWithInt:(int)ch
                  withInt:(int)fromIndex {
  int min = 0;
  IOSCharArray *v = A_;
  for (int i = 0 + ((fromIndex >= _length_) ? (_length_ - 1) : fromIndex); i >= min; i--) {
    if (IOSCharArray_Get(nil_chk(v), i) == ch) {
      return i - 0;
    }
  }
  return -1;
}

- (RAREUTCharArray *)leftTrim {
  int start = 0;
  while ((start < _length_) && (IOSCharArray_Get(nil_chk(A_), start) <= ' ')) {
    start++;
  }
  if (start == _length_) {
    _length_ = 0;
    return self;
  }
  int end = _length_ - 1;
  _length_ = end - start + 1;
  [JavaLangSystem arraycopyWithId:A_ withInt:start withId:A_ withInt:0 withInt:_length_];
  return self;
}

- (int)sequenceLength {
  return _length_;
}

- (void)markWithInt:(int)readAheadLimit {
  theMark_ = thePos_;
}

- (BOOL)markSupported {
  return YES;
}

- (int)peek {
  return (thePos_ < _length_) ? (IOSCharArray_Get(nil_chk(A_), thePos_)) : (-1);
}

- (int)read {
  return (thePos_ < _length_) ? (IOSCharArray_Get(nil_chk(A_), thePos_++)) : (-1);
}

- (int)readWithCharArray:(IOSCharArray *)c
                 withInt:(int)off
                 withInt:(int)len {
  if (c == nil) {
    @throw [[JavaLangNullPointerException alloc] init];
  }
  else if ((off < 0) || (off > (int) [c count]) || (len < 0) || ((off + len) > (int) [c count]) || ((off + len) < 0)) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] init];
  }
  if (thePos_ >= _length_) {
    return -1;
  }
  if ((thePos_ + len) > _length_) {
    len = _length_ - thePos_;
  }
  if (len <= 0) {
    return 0;
  }
  [JavaLangSystem arraycopyWithId:A_ withInt:thePos_ withId:c withInt:off withInt:len];
  thePos_ += len;
  return len;
}

- (NSString *)readAll {
  int len = _length_ - thePos_;
  if (len == -1) {
    return nil;
  }
  if (len == 0) {
    return @"";
  }
  NSString *s = [NSString stringWithCharacters:A_ offset:thePos_ length:len];
  thePos_ += len;
  return s;
}

- (int)readPoisition {
  return thePos_;
}

- (NSString *)readStringWithInt:(int)len {
  if (len + thePos_ > _length_) {
    len = _length_ - thePos_;
    if (len == -1) {
      return nil;
    }
    if (len == 0) {
      return @"";
    }
  }
  NSString *s = [NSString stringWithCharacters:A_ offset:thePos_ length:len];
  thePos_ += len;
  return s;
}

- (int)readVarInt {
  BOOL neg = NO;
  int val = 0;
  int n = [self read];
  if (n > 128) {
    neg = YES;
    n -= 128;
  }
  if (n > 2) {
    @throw [[JavaIoIOException alloc] initWithNSString:@"bad numeric value"];
  }
  if (n == 1) {
    n = [self read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val = n & (int) 0xffff;
  }
  else {
    n = [self read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val = n & (int) 0xffff;
    val = val << 16;
    n = [self read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val += n & (int) 0xffff;
  }
  if (neg) {
    val = -val;
  }
  return val;
}

- (int)readVarLength {
  int val = 0;
  int n = [self read];
  if (n == -1) {
    @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
  }
  if (n < 32768) {
    return n;
  }
  if (n == 32768) {
    return -1;
  }
  n -= 32768;
  if (n > 2) {
    @throw [[JavaIoIOException alloc] initWithNSString:@"bad numeric value"];
  }
  if (n == 1) {
    n = [self read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val = n & (int) 0xffff;
  }
  else {
    n = [self read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val = n & (int) 0xffff;
    val = val << 16;
    n = [self read];
    if (n == -1) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"End of stream encountered"];
    }
    val += n & (int) 0xffff;
  }
  return val;
}

- (NSString *)readVarString {
  int len = [RAREUTaStreamer readVarLengthWithJavaIoReader:self];
  if (len == -1) {
    return nil;
  }
  if (len == 0) {
    return @"";
  }
  if (len + thePos_ > _length_) {
    len = _length_ - thePos_;
    if (len == -1) {
      return nil;
    }
    if (len == 0) {
      return @"";
    }
  }
  NSString *s = [NSString stringWithCharacters:A_ offset:thePos_ length:len];
  thePos_ += len;
  return s;
}

- (BOOL)ready {
  return thePos_ < _length_;
}

- (BOOL)regionMatchesWithBoolean:(BOOL)ignoreCase
                         withInt:(int)toffset
                   withCharArray:(IOSCharArray *)other
                         withInt:(int)ooffset
                         withInt:(int)len {
  IOSCharArray *ta = A_;
  int to = +toffset;
  IOSCharArray *pa = other;
  int po = ooffset;
  if ((ooffset < 0) || (toffset < 0) || (toffset > ((long long int) _length_ - len)) || (ooffset > ((long long int) (int) [((IOSCharArray *) nil_chk(other)) count] - len))) {
    return NO;
  }
  unichar c1;
  unichar c2;
  while (len-- > 0) {
    c1 = IOSCharArray_Get(nil_chk(ta), to++);
    c2 = IOSCharArray_Get(nil_chk(pa), po++);
    if (c1 == c2) {
      continue;
    }
    if (ignoreCase) {
      unichar u1 = [JavaLangCharacter toUpperCaseWithChar:c1];
      unichar u2 = [JavaLangCharacter toUpperCaseWithChar:c2];
      if (u1 == u2) {
        continue;
      }
      if ([JavaLangCharacter toLowerCaseWithChar:u1] == [JavaLangCharacter toLowerCaseWithChar:u2]) {
        continue;
      }
    }
    return NO;
  }
  return YES;
}

- (NSString *)removeStringWithInt:(int)start
                          withInt:(int)end {
  [self checkRangeWithInt:start];
  NSString *s = nil;
  if ((end == -1) || (end > _length_)) {
    end = _length_;
  }
  int len = end - start;
  if (len > 0) {
    s = [NSString stringWithCharacters:A_ offset:start length:len];
    [JavaLangSystem arraycopyWithId:A_ withInt:start + len withId:A_ withInt:start withInt:_length_ - end];
    _length_ -= len;
  }
  else {
    s = @"";
  }
  return s;
}

- (BOOL)removeTokenWithChar:(unichar)c
        withRAREUTCharArray:(RAREUTCharArray *)outArg {
  int n = [self indexOfWithChar:c];
  if (n == -1) {
    return NO;
  }
  ((RAREUTCharArray *) nil_chk(outArg))->_length_ = 0;
  (void) [outArg appendWithCharArray:A_ withInt:0 withInt:n];
  (void) [self removeWithInt:0 withInt:n + 1];
  return YES;
}

- (BOOL)removeTokenWithNSString:(NSString *)s
            withRAREUTCharArray:(RAREUTCharArray *)outArg {
  int n = [self indexOfWithNSString:s];
  if (n == -1) {
    return NO;
  }
  ((RAREUTCharArray *) nil_chk(outArg))->_length_ = 0;
  (void) [outArg appendWithCharArray:A_ withInt:0 withInt:n];
  (void) [self removeWithInt:0 withInt:n + [((NSString *) nil_chk(s)) sequenceLength]];
  return YES;
}

- (RAREUTCharArray *)replaceWithChar:(unichar)what
                            withChar:(unichar)with {
  for (int i = 0; i < _length_; i++) {
    if (IOSCharArray_Get(nil_chk(A_), i) == what) {
      (*IOSCharArray_GetRef(A_, i)) = with;
    }
  }
  return self;
}

+ (NSString *)removeLinefeedsWithNSString:(NSString *)str {
  if ((str == nil) || [str isEqual:@""]) {
    return str;
  }
  return [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((JavaLangThreadLocal *) nil_chk(RAREUTCharArray_perThreadCharArray_)) get])) setWithNSString:str])) removeLinefeeds])) description];
}

- (RAREUTCharArray *)removeLinefeeds {
  int n = 0;
  for (int i = 0; i < _length_; i++) {
    unichar c = IOSCharArray_Get(nil_chk(A_), i);
    if ((c != 0x000a) && (c != 0x000d)) {
      (*IOSCharArray_GetRef(A_, n++)) = c;
    }
  }
  _length_ = n;
  return self;
}

- (void)reset {
  thePos_ = theMark_;
}

- (RAREUTCharArray *)reverse {
  int n = _length_ - 1;
  unichar c;
  for (int i = (n - 1) >> 1; i >= 0; --i) {
    c = IOSCharArray_Get(nil_chk(A_), i);
    (*IOSCharArray_GetRef(A_, i)) = IOSCharArray_Get(A_, n - i);
    (*IOSCharArray_GetRef(A_, n - i)) = c;
  }
  return self;
}

- (RAREUTCharArray *)rightTrim {
  int end = _length_ - 1;
  while ((end > 0) && (IOSCharArray_Get(nil_chk(A_), end) <= ' ')) {
    end--;
  }
  _length_ = end + 1;
  [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:A_ withInt:0 withInt:_length_];
  return self;
}

- (RAREUTCharArray *)setWithChar:(unichar)e {
  _length_ = 1;
  (*IOSCharArray_GetRef(nil_chk(A_), 0)) = e;
  thePos_ = 0;
  theMark_ = 0;
  return self;
}

- (RAREUTCharArray *)setWithCharArray:(IOSCharArray *)e {
  _length_ = 0;
  thePos_ = 0;
  theMark_ = 0;
  (void) [self appendWithCharArray:e withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(e)) count]];
  return self;
}

- (RAREUTCharArray *)setWithRAREUTCharArray:(RAREUTCharArray *)e {
  int len = 0;
  if ((e != nil) && (len = e->_length_) != 0) {
    IOSCharArray *A = self->A_;
    if (len > (int) [((IOSCharArray *) nil_chk(A)) count]) {
      [self expandCapacityWithInt:len];
      A = self->A_;
    }
    if (len < 3) {
      (*IOSCharArray_GetRef(nil_chk(A), 0)) = IOSCharArray_Get(nil_chk(e->A_), 0);
      if (len == 2) {
        (*IOSCharArray_GetRef(A, 1)) = IOSCharArray_Get(e->A_, 1);
      }
    }
    else {
      [JavaLangSystem arraycopyWithId:e->A_ withInt:0 withId:A withInt:0 withInt:len];
    }
  }
  thePos_ = 0;
  theMark_ = 0;
  _length_ = len;
  return self;
}

- (RAREUTCharArray *)setWithNSString:(NSString *)e {
  int len = 0;
  if ((e != nil) && (len = [e sequenceLength]) != 0) {
    IOSCharArray *A = self->A_;
    if (len > (int) [((IOSCharArray *) nil_chk(A)) count]) {
      [self expandCapacityWithInt:len];
      A = self->A_;
    }
    if (len < 4) {
      (*IOSCharArray_GetRef(nil_chk(A), 0)) = [e charAtWithInt:0];
      if (len == 2) {
        (*IOSCharArray_GetRef(A, 1)) = [e charAtWithInt:1];
      }
      else if (len == 3) {
        (*IOSCharArray_GetRef(A, 1)) = [e charAtWithInt:1];
        (*IOSCharArray_GetRef(A, 2)) = [e charAtWithInt:2];
      }
    }
    else {
      [e getChars:0 sourceEnd:len destination:A destinationBegin:0];
    }
  }
  thePos_ = 0;
  theMark_ = 0;
  _length_ = len;
  return self;
}

- (RAREUTCharArray *)setWithCharArray:(IOSCharArray *)e
                              withInt:(int)pos
                              withInt:(int)len {
  if ((e != nil) && (len != 0)) {
    IOSCharArray *A = self->A_;
    if (len > (int) [((IOSCharArray *) nil_chk(A)) count]) {
      [self expandCapacityWithInt:len];
      A = self->A_;
    }
    if (len < 3) {
      (*IOSCharArray_GetRef(nil_chk(A), 0)) = IOSCharArray_Get(e, pos);
      if (len == 2) {
        (*IOSCharArray_GetRef(A, 1)) = IOSCharArray_Get(e, pos + 1);
      }
    }
    else {
      [JavaLangSystem arraycopyWithId:e withInt:pos withId:A withInt:0 withInt:len];
    }
  }
  thePos_ = 0;
  theMark_ = 0;
  _length_ = len;
  return self;
}

- (RAREUTCharArray *)setWithNSString:(NSString *)e
                             withInt:(int)pos
                             withInt:(int)len {
  _length_ = 0;
  thePos_ = 0;
  theMark_ = 0;
  if ((e != nil) && (len != 0)) {
    if (len == -1) {
      len = [e sequenceLength] - pos;
    }
    if (len != 0) {
      IOSCharArray *A = self->A_;
      int _length = self->_length_;
      int nlen = len + _length;
      if (nlen > (int) [((IOSCharArray *) nil_chk(A)) count]) {
        [self expandCapacityWithInt:nlen];
        A = self->A_;
      }
      if (len < 3) {
        (*IOSCharArray_GetRef(nil_chk(A), _length++)) = [e charAtWithInt:pos];
        if (len == 2) {
          (*IOSCharArray_GetRef(A, _length++)) = [e charAtWithInt:++pos];
        }
      }
      else {
        [e getChars:pos sourceEnd:pos + len destination:A destinationBegin:_length];
        _length = nlen;
      }
      self->A_ = A;
      self->_length_ = _length;
    }
  }
  return self;
}

- (RAREUTCharArray *)setWithByteArray:(IOSByteArray *)e {
  return [self setWithByteArray:e withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(e)) count] withRAREUTiCharsetHelper:[RAREUTISO88591Helper getInstance]];
}

- (RAREUTCharArray *)setWithByteArray:(IOSByteArray *)e
             withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  return [self setWithByteArray:e withInt:0 withInt:(int) [((IOSByteArray *) nil_chk(e)) count] withRAREUTiCharsetHelper:[RAREUTISO88591Helper getInstance]];
}

- (RAREUTCharArray *)setWithByteArray:(IOSByteArray *)e
                              withInt:(int)pos
                              withInt:(int)len
             withRAREUTiCharsetHelper:(id<RAREUTiCharsetHelper>)csh {
  _length_ = [((id<RAREUTiCharsetHelper>) nil_chk(csh)) getCharsWithByteArray:e withInt:pos withInt:len withRAREUTCharArray:self withInt:0];
  thePos_ = 0;
  theMark_ = 0;
  return self;
}

- (RAREUTCharArray *)setCharAtWithInt:(int)pos
                             withChar:(unichar)e {
  [self checkRangeWithInt:pos];
  (*IOSCharArray_GetRef(nil_chk(A_), pos)) = e;
  return self;
}

- (RAREUTCharArray *)setLengthWithInt:(int)newLength {
  if (newLength > _length_) {
    [self expandCapacityWithInt:newLength];
  }
  _length_ = newLength;
  return self;
}

- (RAREUTCharArray *)shrinkToWithInt:(int)start
                             withInt:(int)end {
  [self checkRangeWithInt:start];
  if ((end == -1) || (end > _length_)) {
    end = _length_;
  }
  int len = end - start;
  if (len > 0) {
    [JavaLangSystem arraycopyWithId:A_ withInt:start withId:A_ withInt:0 withInt:len];
    _length_ = len;
  }
  return self;
}

- (BOOL)startsWithWithCharArray:(IOSCharArray *)prefix {
  return [self startsWithWithCharArray:prefix withInt:0 withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(prefix)) count]];
}

- (BOOL)startsWithWithRAREUTCharArray:(RAREUTCharArray *)prefix {
  return [self startsWithWithCharArray:((RAREUTCharArray *) nil_chk(prefix))->A_ withInt:0 withInt:0 withInt:prefix->_length_];
}

- (BOOL)startsWithWithNSString:(NSString *)prefix {
  return [self startsWithWithCharArray:[((NSString *) nil_chk(prefix)) toCharArray] withInt:0 withInt:0 withInt:[prefix sequenceLength]];
}

- (BOOL)startsWithWithCharArray:(IOSCharArray *)prefix
                        withInt:(int)toffset {
  return [self startsWithWithCharArray:prefix withInt:toffset withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(prefix)) count]];
}

- (BOOL)startsWithWithNSString:(NSString *)prefix
                       withInt:(int)toffset {
  return [self startsWithWithCharArray:[((NSString *) nil_chk(prefix)) toCharArray] withInt:toffset withInt:0 withInt:[prefix sequenceLength]];
}

- (BOOL)startsWithWithCharArray:(IOSCharArray *)prefix
                        withInt:(int)toffset
                        withInt:(int)poffset
                        withInt:(int)plength {
  IOSCharArray *ta = A_;
  int to = toffset;
  int po = poffset;
  int pc = plength;
  if ((toffset < 0) || (toffset > (_length_ - pc))) {
    return NO;
  }
  while (--pc >= 0) {
    if (IOSCharArray_Get(nil_chk(ta), to++) != IOSCharArray_Get(nil_chk(prefix), po++)) {
      return NO;
    }
  }
  return YES;
}

- (RAREUTCharArray *)stripWithCharArray:(IOSCharArray *)bad {
  return [self stripWithCharArray:bad withBoolean:YES withBoolean:YES];
}

- (RAREUTCharArray *)stripWithCharArray:(IOSCharArray *)bad
                            withBoolean:(BOOL)left
                            withBoolean:(BOOL)right {
  IOSCharArray *chars = A_;
  int pos = 0;
  int len = _length_;
  if ((len < 1) || (chars == nil)) {
    return nil;
  }
  int i = pos;
  int n;
  int tok0 = 0;
  int tok1;
  BOOL badFound;
  int max = pos + len;
  if (left) {
    for (i = pos; i < max; i++) {
      badFound = NO;
      for (n = 0; n < (int) [((IOSCharArray *) nil_chk(bad)) count]; n++) {
        if (IOSCharArray_Get(nil_chk(chars), i) == IOSCharArray_Get(bad, n)) {
          badFound = YES;
          break;
        }
      }
      if (!badFound && (IOSCharArray_Get(nil_chk(chars), i) > 32)) {
        break;
      }
    }
  }
  tok0 = i;
  i = max - 1;
  if (right) {
    for (i = max - 1; i > pos; i--) {
      badFound = NO;
      for (n = 0; n < (int) [((IOSCharArray *) nil_chk(bad)) count]; n++) {
        if (IOSCharArray_Get(nil_chk(chars), i) == IOSCharArray_Get(bad, n)) {
          badFound = YES;
          break;
        }
      }
      if (!badFound && (IOSCharArray_Get(nil_chk(chars), i) > 32)) {
        break;
      }
    }
  }
  tok1 = (i + 1) - tok0;
  if (tok0 != 0) {
    (void) [self removeWithInt:0 withInt:tok0];
  }
  _length_ = tok1;
  return self;
}

- (id<JavaLangCharSequence>)subSequenceFrom:(int)start to:(int)end {
  if (start < 0) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:start];
  }
  if (end > _length_) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:end];
  }
  if (start > end) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:end - start];
  }
  return [[RAREUTCharArray alloc] initWithCharArray:A_ withInt:start withInt:end - start];
}

- (RAREUTCharArray *)subarrayWithInt:(int)start
                             withInt:(int)end {
  if (start < 0) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:start];
  }
  if (end > _length_) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:end];
  }
  if (start > end) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:end - start];
  }
  return [[RAREUTCharArray alloc] initWithCharArray:A_ withInt:start withInt:end - start];
}

- (NSString *)substringWithInt:(int)start {
  return [self substringWithInt:start withInt:_length_];
}

- (NSString *)substringWithInt:(int)start
                       withInt:(int)end {
  if (start < 0) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:start];
  }
  if (end > _length_) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:end];
  }
  if (start > end) {
    @throw [[JavaLangStringIndexOutOfBoundsException alloc] initWithInt:end - start];
  }
  int len = end - start;
  if (len == 0) {
    return @"";
  }
  return (len == 1) ? [RAREUTStringCache valueOfWithChar:IOSCharArray_Get(nil_chk(A_), start)] : [NSString stringWithCharacters:A_ offset:start length:len];
}

- (IOSCharArray *)toCharArray {
  if ((int) [((IOSCharArray *) nil_chk(A_)) count] == _length_) {
    return A_;
  }
  IOSCharArray *b = [IOSCharArray arrayWithLength:_length_];
  [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:b withInt:0 withInt:_length_];
  return b;
}

- (RAREUTCharArray *)toLowerCase {
  for (int i = 0; i < _length_; i++) {
    (*IOSCharArray_GetRef(nil_chk(A_), i)) = [JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(A_, i)];
  }
  return self;
}

+ (NSString *)toMixedCaseWithNSString:(NSString *)str {
  if (str == nil) {
    return nil;
  }
  return [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((JavaLangThreadLocal *) nil_chk(RAREUTCharArray_perThreadCharArray_)) get])) setWithNSString:str])) toTitleCaseWithCharArray:RAREUTCharArray_title_case_word_chars_])) description];
}

- (RAREUTCharArray *)toMixedCase {
  BOOL next = YES;
  for (int i = 0; i < _length_; i++) {
    if ([JavaLangCharacter isWhitespaceWithChar:IOSCharArray_Get(nil_chk(A_), i)]) {
      next = YES;
      continue;
    }
    if (![JavaLangCharacter isLetterWithChar:IOSCharArray_Get(A_, i)]) {
      if (next) {
        next = NO;
        (*IOSCharArray_GetRef(A_, i)) = [JavaLangCharacter toUpperCaseWithChar:IOSCharArray_Get(A_, i)];
      }
      else {
        (*IOSCharArray_GetRef(A_, i)) = [JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(A_, i)];
      }
    }
    else {
      if (next) {
        next = NO;
        (*IOSCharArray_GetRef(A_, i)) = [JavaLangCharacter toUpperCaseWithChar:IOSCharArray_Get(A_, i)];
      }
      else {
        (*IOSCharArray_GetRef(A_, i)) = [JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(A_, i)];
      }
    }
  }
  return self;
}

- (NSString *)sequenceDescription {
  if (_length_ == 0) {
    return @"";
  }
  return (_length_ == 1) ? [RAREUTStringCache valueOfWithChar:IOSCharArray_Get(nil_chk(A_), 0)] : [NSString stringWithCharacters:A_ offset:0 length:_length_];
}

- (RAREUTCharArray *)toTitleCase {
  return [self toTitleCaseWithCharArray:RAREUTCharArray_title_case_word_chars_];
}

+ (NSString *)toTitleCaseWithNSString:(NSString *)str {
  return [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((JavaLangThreadLocal *) nil_chk(RAREUTCharArray_perThreadCharArray_)) get])) setWithNSString:str])) toTitleCaseWithCharArray:RAREUTCharArray_title_case_word_chars_])) description];
}

- (RAREUTCharArray *)toTitleCaseWithCharArray:(IOSCharArray *)wordchars {
  if (_length_ == 0) {
    return self;
  }
  RAREUTCharArray *ca = (RAREUTCharArray *) check_class_cast([((JavaLangThreadLocal *) nil_chk(RAREUTCharArray_perThreadCharArray_)) get], [RAREUTCharArray class]);
  int llen = RAREUTCharArray_longest_small_word_ + 1;
  int start = 0;
  unichar ch;
  int wordcharslen = (wordchars == nil) ? 0 : (int) [wordchars count];
  int len;
  int calen = _length_;
  for (int i = 0; i < calen; i++) {
    ch = IOSCharArray_Get(nil_chk(A_), i);
    (*IOSCharArray_GetRef(A_, i)) = [JavaLangCharacter toLowerCaseWithChar:ch];
    if ((i == start) && ![JavaLangCharacter isLetterOrDigitWithChar:ch]) {
      start++;
      continue;
    }
    if ([JavaLangCharacter isWhitespaceWithChar:ch] || ((wordcharslen > 0) && [RAREUTCharScanner isTokenCharWithInt:0 withChar:ch withCharArray:wordchars withInt:wordcharslen])) {
      len = i - start;
      if ((len < llen) && (start != 0)) {
        (void) [((RAREUTCharArray *) nil_chk(ca)) setWithCharArray:A_ withInt:start withInt:len];
        if ([((JavaUtilHashSet *) nil_chk(RAREUTCharArray_small_words_)) containsWithId:ca]) {
          start = i + 1;
          continue;
        }
      }
      (*IOSCharArray_GetRef(A_, start)) = [JavaLangCharacter toTitleCaseWithChar:IOSCharArray_Get(A_, start)];
      if (len == 2) {
        (*IOSCharArray_GetRef(A_, start + 1)) = [JavaLangCharacter toTitleCaseWithChar:IOSCharArray_Get(A_, start + 1)];
      }
      start = i + 1;
    }
  }
  if (start < calen) {
    (*IOSCharArray_GetRef(nil_chk(A_), start)) = [JavaLangCharacter toTitleCaseWithChar:IOSCharArray_Get(A_, start)];
  }
  return self;
}

- (RAREUTCharArray *)smart {
  (void) [self toLowerCase];
  if (_length_ > 0) {
    (*IOSCharArray_GetRef(nil_chk(A_), 0)) = [JavaLangCharacter toUpperCaseWithChar:IOSCharArray_Get(A_, 0)];
  }
  return self;
}

- (RAREUTCharArray *)capatilize {
  (void) [self toLowerCase];
  if (_length_ > 0) {
    (*IOSCharArray_GetRef(nil_chk(A_), 0)) = [JavaLangCharacter toUpperCaseWithChar:IOSCharArray_Get(A_, 0)];
  }
  return self;
}

- (RAREUTCharArray *)toUpperCase {
  for (int i = 0; i < _length_; i++) {
    (*IOSCharArray_GetRef(nil_chk(A_), i)) = [JavaLangCharacter toUpperCaseWithChar:IOSCharArray_Get(A_, i)];
  }
  return self;
}

- (RAREUTCharArray *)trim {
  int start = 0;
  while ((start < _length_) && (IOSCharArray_Get(nil_chk(A_), start) <= ' ')) {
    start++;
  }
  if (start == _length_) {
    _length_ = 0;
    return self;
  }
  int end = _length_ - 1;
  while ((end > 0) && (IOSCharArray_Get(nil_chk(A_), end) <= ' ')) {
    end--;
  }
  _length_ = end - start + 1;
  [JavaLangSystem arraycopyWithId:A_ withInt:start withId:A_ withInt:0 withInt:_length_];
  return self;
}

- (void)trimToSize {
  A_ = [self toCharArray];
}

- (void)unread {
  if (thePos_ > 0) {
    thePos_--;
  }
}

- (RAREUTCharArray *)unescape {
  _length_ = [RAREUTCharScanner unescapeStringExWithCharArray:A_ withInt:0 withInt:_length_];
  return self;
}

- (RAREUTCharArray *)unescapeQuoted {
  _length_ = [RAREUTCharScanner cleanQuotedExWithCharArray:A_ withInt:0 withInt:_length_];
  return self;
}

+ (RAREUTCharArray *)wrapWithCharArray:(IOSCharArray *)e
                               withInt:(int)len {
  return [[RAREUTCharArray alloc] initWithCharArray:e withInt:len];
}

- (void)expandCapacityWithInt:(int)minimumCapacity {
  int len = (int) [((IOSCharArray *) nil_chk(A_)) count];
  int newCapacity = (len + 1) * 2;
  if (newCapacity < 0) {
    newCapacity = JavaLangInteger_MAX_VALUE;
  }
  else if (minimumCapacity > newCapacity) {
    newCapacity = minimumCapacity;
  }
  IOSCharArray *newValue = [IOSCharArray arrayWithLength:newCapacity];
  [JavaLangSystem arraycopyWithId:A_ withInt:0 withId:newValue withInt:0 withInt:len];
  A_ = newValue;
}

- (void)checkRangeWithInt:(int)pos {
  if (pos >= _length_) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@>%@", [NSString valueOfInt:pos], [NSString valueOfInt:_length_]]];
  }
  if (pos < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%@<0", [NSString valueOfInt:pos]]];
  }
}

+ (void)initialize {
  if (self == [RAREUTCharArray class]) {
    RAREUTCharArray_small_words_ = [[JavaUtilHashSet alloc] init];
    RAREUTCharArray_title_case_word_chars_ = [IOSCharArray arrayWithCharacters:(unichar[]){ ',', '/', '|', '^', '&', '+', '=', '.' } count:8];
    RAREUTCharArray_perThreadCharArray_ = [[RAREUTCharArray_$1 alloc] init];
    RAREUTCharArray_perThreadNumber_ = [[RAREUTCharArray_$2 alloc] init];
    {
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"a"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"an"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"and"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"as"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"but"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"by"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"en"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"for"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"if"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"in"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"is"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"of"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"on"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"or"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"the"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"to"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"v"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"v."]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"vs"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"vs."]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"via"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"ii"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"iii"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"vi"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"vii"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"iv"]];
      [RAREUTCharArray_small_words_ addWithId:[[RAREUTCharArray alloc] initWithNSString:@"do"]];
    }
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(RAREUTCharArray *)other {
  [super copyAllFieldsTo:other];
  other->A_ = A_;
  other->_length_ = _length_;
  other->theMark_ = theMark_;
  other->thePos_ = thePos_;
}

- (NSString *)description {
  return [self sequenceDescription];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithCharArray:withInt:", NULL, NULL, 0x2, NULL },
    { "getTitleCaseSmallWords", NULL, "LJavaUtilHashSet", 0x9, NULL },
    { "getTitleCaseWordSeparatorsWithCharArray:", NULL, "LIOSCharArray", 0x9, NULL },
    { "appendWithBoolean:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithChar:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendCharWithInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithDouble:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithLong:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithId:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithNSString:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithCharArray:withInt:withInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithRAREUTCharArray:withInt:withInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendWithNSString:withInt:withInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendAtWithInt:withRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendAtWithInt:withCharArray:withInt:withInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "appendNumWithInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "charAtWithInt:", NULL, "C", 0x1, "JavaLangIndexOutOfBoundsException" },
    { "copyOfWithCharArray:withInt:", NULL, "LIOSCharArray", 0x9, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
    { "removeWithInt:withInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "deleteCharAtWithInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "endsWithWithCharArray:", NULL, "Z", 0x1, NULL },
    { "endsWithWithRAREUTCharArray:", NULL, "Z", 0x1, NULL },
    { "endsWithWithNSString:", NULL, "Z", 0x1, NULL },
    { "equalsWithRAREUTCharArray:", NULL, "Z", 0x1, NULL },
    { "equalsWithCharArray:withInt:withInt:", NULL, "Z", 0x1, NULL },
    { "equalsIgnoreCaseWithRAREUTCharArray:", NULL, "Z", 0x1, NULL },
    { "equalsIgnoreCaseWithNSString:", NULL, "Z", 0x1, NULL },
    { "getBytesWithRAREUTiCharsetHelper:", NULL, "LIOSByteArray", 0x1, NULL },
    { "getPieceWithChar:withInt:", NULL, "LNSString", 0x11, NULL },
    { "insertWithInt:withChar:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "insertWithInt:withCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "insertWithInt:withNSString:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "insertWithInt:withCharArray:withInt:withInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "leftTrim", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "markSupported", NULL, "Z", 0x1, NULL },
    { "readAll", NULL, "LNSString", 0x1, NULL },
    { "readStringWithInt:", NULL, "LNSString", 0x1, NULL },
    { "readVarInt", NULL, "I", 0x1, "JavaIoIOException" },
    { "readVarLength", NULL, "I", 0x1, "JavaIoIOException" },
    { "readVarString", NULL, "LNSString", 0x1, "JavaIoIOException" },
    { "ready", NULL, "Z", 0x1, NULL },
    { "regionMatchesWithBoolean:withInt:withCharArray:withInt:withInt:", NULL, "Z", 0x1, NULL },
    { "removeStringWithInt:withInt:", NULL, "LNSString", 0x1, NULL },
    { "removeTokenWithChar:withRAREUTCharArray:", NULL, "Z", 0x1, NULL },
    { "removeTokenWithNSString:withRAREUTCharArray:", NULL, "Z", 0x1, NULL },
    { "replaceWithChar:withChar:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "removeLinefeedsWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "removeLinefeeds", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "reverse", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "rightTrim", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setWithChar:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setWithCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setWithRAREUTCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setWithNSString:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setWithCharArray:withInt:withInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setWithNSString:withInt:withInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setWithByteArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setWithByteArray:withRAREUTiCharsetHelper:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setWithByteArray:withInt:withInt:withRAREUTiCharsetHelper:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setCharAtWithInt:withChar:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "setLengthWithInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "shrinkToWithInt:withInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "startsWithWithCharArray:", NULL, "Z", 0x1, NULL },
    { "startsWithWithRAREUTCharArray:", NULL, "Z", 0x1, NULL },
    { "startsWithWithNSString:", NULL, "Z", 0x1, NULL },
    { "startsWithWithCharArray:withInt:", NULL, "Z", 0x1, NULL },
    { "startsWithWithNSString:withInt:", NULL, "Z", 0x1, NULL },
    { "startsWithWithCharArray:withInt:withInt:withInt:", NULL, "Z", 0x1, NULL },
    { "stripWithCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "stripWithCharArray:withBoolean:withBoolean:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "subarrayWithInt:withInt:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "substringWithInt:", NULL, "LNSString", 0x1, NULL },
    { "substringWithInt:withInt:", NULL, "LNSString", 0x1, NULL },
    { "toCharArray", NULL, "LIOSCharArray", 0x1, NULL },
    { "toLowerCase", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "toMixedCaseWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "toMixedCase", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "toTitleCase", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "toTitleCaseWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "toTitleCaseWithCharArray:", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "smart", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "capatilize", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "toUpperCase", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "trim", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "unescape", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "unescapeQuoted", NULL, "LRAREUTCharArray", 0x1, NULL },
    { "wrapWithCharArray:withInt:", NULL, "LRAREUTCharArray", 0x9, NULL },
    { "expandCapacityWithInt:", NULL, "V", 0x0, NULL },
    { "checkRangeWithInt:", NULL, "V", 0x2, "JavaLangIndexOutOfBoundsException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "expandBy_", NULL, 0x18, "I" },
    { "expandByHalf_", NULL, 0x18, "I" },
    { "A_", NULL, 0x1, "LIOSCharArray" },
    { "_length_", NULL, 0x1, "I" },
    { "small_words_", NULL, 0xa, "LJavaUtilHashSet" },
    { "title_case_word_chars_", NULL, 0xa, "LIOSCharArray" },
    { "longest_small_word_", NULL, 0xa, "I" },
    { "perThreadCharArray_", NULL, 0xa, "LJavaLangThreadLocal" },
    { "perThreadNumber_", NULL, 0xa, "LJavaLangThreadLocal" },
  };
  static J2ObjcClassInfo _RAREUTCharArray = { "CharArray", "com.appnativa.util", NULL, 0x11, 94, methods, 9, fields, 0, NULL};
  return &_RAREUTCharArray;
}

@end
@implementation RAREUTCharArray_$1

- (RAREUTCharArray *)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharArray alloc] initWithInt:16];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LRAREUTCharArray", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LRAREUTCharArray"};
  static J2ObjcClassInfo _RAREUTCharArray_$1 = { "$1", "com.appnativa.util", "CharArray", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREUTCharArray_$1;
}

@end
@implementation RAREUTCharArray_$2

- (id)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTSNumber alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LNSObject", 0x24, NULL },
  };
  static J2ObjcClassInfo _RAREUTCharArray_$2 = { "$2", "com.appnativa.util", "CharArray", 0x8000, 1, methods, 0, NULL, 0, NULL};
  return &_RAREUTCharArray_$2;
}

@end
