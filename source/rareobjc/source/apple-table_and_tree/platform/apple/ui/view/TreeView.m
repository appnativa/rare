//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/apple-table_and_tree/com/appnativa/rare/platform/apple/ui/view/TreeView.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/platform/apple/ui/util/AppleGraphics.h"
#include "com/appnativa/rare/platform/apple/ui/view/ListView.h"
#include "com/appnativa/rare/platform/apple/ui/view/TreeView.h"
#include "com/appnativa/rare/platform/apple/ui/view/View.h"
#include "com/appnativa/rare/platform/apple/ui/view/aPlatformTableBasedView.h"
#include "com/appnativa/rare/platform/apple/ui/view/aTableBasedView.h"
#include "com/appnativa/rare/platform/apple/ui/view/aView.h"
#include "com/appnativa/rare/ui/CheckListManager.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/PainterUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontMetrics.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/iListHandler.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformListDataModel.h"
#include "com/appnativa/rare/ui/iPlatformRenderingComponent.h"
#include "com/appnativa/rare/ui/renderer/ListItemRenderer.h"
#include "com/appnativa/rare/ui/renderer/aTreeItemRenderer.h"
#include "com/appnativa/rare/ui/tree/DataItemTreeModel.h"
#include "com/appnativa/rare/ui/tree/aDataItemTreeModel.h"
#include "com/appnativa/rare/ui/tree/iExpansionHandler.h"
#include "com/appnativa/rare/ui/tree/iTreeItem.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Math.h"
#import "RAREAPListView.h"
#import "com/appnativa/rare/ui/UIInsets.h"

@implementation RARETreeView

- (id)init {
  return [self initRARETreeViewWithId:[RARETreeView createTreeProxy]];
}

- (id)initRARETreeViewWithId:(id)proxy {
  if (self = [super initWithId:proxy]) {
    lastUpX_ = -1;
    lastUpY_ = -1;
    indentBy_ = [RAREScreenUtils platformPixelsWithFloat:[RAREPlatform isTouchDevice] ? 22 : 16];
    showRootHandles_ = YES;
    showRoot_ = YES;
    manageCheckboxSelection_ = YES;
    autoScrollOnExpansion_ = YES;
    parentItemsSelectable_ = YES;
    twistyMarginOfError_ = [RAREaTableBasedView INDICATOR_SLOP];
  }
  return self;
}

- (id)initWithId:(id)proxy {
  return [self initRARETreeViewWithId:proxy];
}

- (void)paintRowWithRAREaTableBasedView_RowView:(RAREaTableBasedView_RowView *)view
                          withRAREAppleGraphics:(RAREAppleGraphics *)g
                     withRARERenderableDataItem:(RARERenderableDataItem *)item
                            withRAREUIRectangle:(RAREUIRectangle *)rect
                              withRAREiTreeItem:(id<RAREiTreeItem>)ti {
  if (ti == nil) {
    ti = [((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getTreeItemWithRARERenderableDataItem:item];
  }
  int depth = 0;
  BOOL expanded = NO;
  BOOL leaf = YES;
  if (expandedIcon_ == nil) {
    [self loadIcons];
  }
  if (ti != nil) {
    depth = [ti getDepth];
    if (!showRoot_) {
      depth = [JavaLangMath maxWithInt:depth - 1 withInt:0];
    }
    expanded = [ti isExpanded];
    leaf = [ti isLeaf];
  }
  depth *= indentBy_;
  ((RAREaTableBasedView_RowView *) nil_chk(view))->indent_ = [RAREScreenUtils PLATFORM_PIXELS_2] + depth;
  if (showRootHandles_) {
    if (leaf) {
      view->indicator_ = nil;
    }
    else {
      view->indicator_ = expanded ? expandedIcon_ : collapsedIcon_;
    }
  }
  else {
    view->indicator_ = nil;
  }
  [super paintRowWithRAREaTableBasedView_RowView:view withRAREAppleGraphics:g withRARERenderableDataItem:item withRAREUIRectangle:rect withRAREiTreeItem:ti];
}

- (void)renderItemWithInt:(int)row
withRARERenderableDataItem:(RARERenderableDataItem *)item
withRAREaTableBasedView_RowView:(RAREaTableBasedView_RowView *)view
              withBoolean:(BOOL)isSelected
              withBoolean:(BOOL)hasFocus
        withRAREiTreeItem:(id<RAREiTreeItem>)ti {
  BOOL empty = (item == nil) || (item == [RAREaPlatformTableBasedView NULL_ITEM]);
  ((RAREaTableBasedView_RowView *) nil_chk(view))->row_ = row;
  if (empty) {
    item = [RAREaPlatformTableBasedView NULL_ITEM];
  }
  else {
    if (ti == nil) {
      ti = [((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getTreeItemWithRARERenderableDataItem:item];
    }
  }
  if ([self isTable]) {
    [super renderItemWithInt:row withRARERenderableDataItem:item withRAREaTableBasedView_RowView:view withBoolean:isSelected withBoolean:hasFocus withRAREiTreeItem:ti];
    return;
  }
  BOOL expanded = NO;
  BOOL leaf = YES;
  int depth = 0;
  if (!empty) {
    if (ti != nil) {
      leaf = [ti isLeaf];
      expanded = [ti isExpanded];
      depth = [ti getDepth];
      if (!showRoot_) {
        depth = [JavaLangMath maxWithInt:depth - 1 withInt:0];
      }
    }
    depth *= indentBy_;
    depth += checkboxWidth_;
    depth += indicatorWidth_;
    if (!leaf) {
      depth += [RAREaTableBasedView ICON_GAP];
    }
    [((RAREaTreeItemRenderer *) check_class_cast(itemRenderer_, [RAREaTreeItemRenderer class])) setItemStateWithBoolean:leaf withBoolean:expanded withInt:depth];
  }
  else {
    [((RAREaTreeItemRenderer *) check_class_cast(itemRenderer_, [RAREaTreeItemRenderer class])) prepareForEmptyItem];
  }
  id<RAREiPlatformComponent> c = [((RARERenderableDataItem *) nil_chk(item)) getRenderingComponent];
  if (c != nil) {
    [((RAREaPlatformTableBasedView_RowViewEx *) check_class_cast(view, [RAREaPlatformTableBasedView_RowViewEx class])) setRenderingViewWithRAREView:[c getView]];
  }
  else {
    id<RAREiPlatformRenderingComponent> rc = ((RAREaPlatformTableBasedView_RowViewEx *) check_class_cast(view, [RAREaPlatformTableBasedView_RowViewEx class]))->renderingComponent_;
    if (rc == nil) {
      rc = (id<RAREiPlatformRenderingComponent>) check_protocol_cast([view getComponent], @protocol(RAREiPlatformRenderingComponent));
    }
    id<JavaLangCharSequence> text = [((RAREListItemRenderer *) nil_chk(itemRenderer_)) configureRenderingComponentWithRAREiPlatformComponent:component_ withRAREiPlatformRenderingComponent:rc withRARERenderableDataItem:item withInt:row withBoolean:isSelected withBoolean:hasFocus withRAREColumn:nil withRARERenderableDataItem:nil];
    (void) [((id<RAREiPlatformRenderingComponent>) nil_chk(rc)) getComponentWithJavaLangCharSequence:text withRARERenderableDataItem:item];
  }
}

- (void)setAutoScrollOnExpansionWithBoolean:(BOOL)autoScrollOnExpansion {
  self->autoScrollOnExpansion_ = autoScrollOnExpansion;
}

- (void)setExpandableStateLockedWithBoolean:(BOOL)locked {
  expandableStateLocked_ = locked;
}

- (void)setExpansionHandlerWithRAREiExpansionHandler:(id<RAREiExpansionHandler>)expansionHandler {
  self->expansionHandler_ = expansionHandler;
}

- (void)setIconsWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)checked
                withRAREiPlatformIcon:(id<RAREiPlatformIcon>)unchecked
                withRAREiPlatformIcon:(id<RAREiPlatformIcon>)indeterminate {
  [super setIconsWithRAREiPlatformIcon:checked withRAREiPlatformIcon:unchecked withRAREiPlatformIcon:indeterminate];
}

- (void)setIndentByWithInt:(int)indent {
  indentBy_ = indent;
  indentBySet_ = YES;
}

- (void)setItemRendererWithRAREaTreeItemRenderer:(RAREaTreeItemRenderer *)lr {
  [super setItemRendererWithRAREListItemRenderer:lr];
}

- (void)setManageCheckboxSelectionWithBoolean:(BOOL)manageCheckboxSelection {
  self->manageCheckboxSelection_ = manageCheckboxSelection;
  if (checkListManager_ != nil) {
    [checkListManager_ setManageSelectionsWithBoolean:manageCheckboxSelection];
  }
}

- (void)setRootNodeCollapsibleWithBoolean:(BOOL)collapsible {
  rootNodeCollapsible_ = collapsible;
}

- (void)setSelectionTypeWithRAREiListHandler_SelectionTypeEnum:(RAREiListHandler_SelectionTypeEnum *)type {
  [super setSelectionTypeWithRAREiListHandler_SelectionTypeEnum:type];
  if (!twistyMarginOfErrorSet_) {
    if (type == [RAREiListHandler_SelectionTypeEnum CHECKED_LEFT]) {
      if (checkListManager_ != nil) {
        twistyMarginOfError_ = 0;
        [self setCheckboxLeftXSlopWithInt:0];
      }
      else {
        twistyMarginOfError_ = [RAREaTableBasedView INDICATOR_SLOP];
        [self setCheckboxLeftXSlopWithInt:[RAREaTableBasedView INDICATOR_SLOP]];
      }
    }
    else {
      twistyMarginOfError_ = [RAREaTableBasedView INDICATOR_SLOP];
      [self setCheckboxLeftXSlopWithInt:[RAREaTableBasedView INDICATOR_SLOP]];
    }
  }
}

- (void)setShowRootWithBoolean:(BOOL)show {
  showRoot_ = show;
}

- (void)setShowRootHandlesWithBoolean:(BOOL)show {
  showRootHandles_ = show;
  if (show) {
    [self loadIcons];
  }
  else {
    indicatorWidth_ = 0;
    indicatorHeight_ = 0;
    [self calculateOffset];
  }
}

- (void)setSingleClickToggleWithBoolean:(BOOL)singleClickToggle {
  self->singleClickToggle_ = singleClickToggle;
}

- (void)setToggleOnTwistyOnlyWithBoolean:(BOOL)twistyOnly {
  self->toggleOnTwistyOnly_ = twistyOnly;
}

- (void)setParentItemsSelectableWithBoolean:(BOOL)parentItemsSelectable {
  self->parentItemsSelectable_ = parentItemsSelectable;
}

- (BOOL)isParentItemsSelectable {
  return parentItemsSelectable_;
}

- (void)setTreeIconsWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)expaneded
                    withRAREiPlatformIcon:(id<RAREiPlatformIcon>)collapsed {
  expandedIcon_ = expaneded;
  collapsedIcon_ = collapsed;
  indicatorWidth_ = 0;
  indicatorHeight_ = 0;
  if (showRootHandles_) {
    if (expaneded != nil) {
      indicatorWidth_ = [expaneded getIconWidth];
      indicatorHeight_ = [expaneded getIconHeight];
    }
    if (collapsed != nil) {
      indicatorWidth_ = [JavaLangMath maxWithInt:indicatorWidth_ withInt:[collapsed getIconWidth]];
      indicatorHeight_ = [JavaLangMath maxWithInt:indicatorHeight_ withInt:[collapsed getIconHeight]];
    }
  }
  [self calculateOffset];
}

- (void)setTreeModelWithRAREDataItemTreeModel:(RAREDataItemTreeModel *)treeModel {
  self->treeModel_ = treeModel;
  [self setListModelWithRAREiPlatformListDataModel:[((RAREDataItemTreeModel *) nil_chk(treeModel)) getListModel]];
}

- (void)setTwistyMarginOfErrorWithInt:(int)twistyMarginOfError {
  self->twistyMarginOfError_ = twistyMarginOfError;
  twistyMarginOfErrorSet_ = YES;
}

- (id<RAREiPlatformIcon>)getCollapsedIcon {
  return collapsedIcon_;
}

- (int)getCount {
  return (listModel_ == nil) ? 0 : [listModel_ size];
}

- (id<RAREiPlatformIcon>)getExpandedIcon {
  return expandedIcon_;
}

- (id<RAREiExpansionHandler>)getExpansionHandler {
  return expansionHandler_;
}

- (int)getIndentWithInt:(int)row {
  RARERenderableDataItem *item = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row];
  id<RAREiTreeItem> ti = [((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getTreeItemWithRARERenderableDataItem:item];
  if (ti == nil) {
    return 0;
  }
  int depth = [((id<RAREiTreeItem>) nil_chk(ti)) getDepth];
  if (!showRoot_) {
    depth = [JavaLangMath maxWithInt:depth - 1 withInt:0];
  }
  depth *= indentBy_;
  return depth + indicatorWidth_ + [RAREaTableBasedView ICON_GAP];
}

- (int)getIndentBy {
  return indentBy_;
}

- (int)getIndicatorHeight {
  return indicatorHeight_;
}

- (int)getIndicatorWidth {
  return indicatorWidth_;
}

- (void)getPreferredSizeWithRAREUIDimension:(RAREUIDimension *)size
                                  withFloat:(float)maxWidth {
  if ([self isTable]) {
    [super getPreferredSizeWithRAREUIDimension:size withFloat:maxWidth];
    return;
  }
  RAREUIFont *f = [((RAREComponent *) nil_chk(component_)) getFont];
  if (f == nil) {
    f = [RAREFontUtils getDefaultFont];
  }
  float rh = [self getRowHeight];
  if (rh < 1) {
    rh = [RAREFontUtils getDefaultLineHeight];
  }
  ((RAREUIDimension *) nil_chk(size))->height_ = (int) rh * visibleRows_;
  int ch = [RAREFontUtils getCharacterWidthWithRAREUIFont:f];
  int w = ch * 5;
  id<RAREiPlatformListDataModel> list = listModel_;
  if ((list != nil) && ([list size] > 0)) {
    RAREUIFontMetrics *fm = [RAREUIFontMetrics getMetricsWithRAREUIFont:f];
    int len = [list size];
    id<RAREiTreeItem> ti = nil;
    int depth = 0;
    for (int i = 0; i < len; i++) {
      RARERenderableDataItem *item = [list getWithInt:i];
      ti = [((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getTreeItemWithRARERenderableDataItem:item];
      if (ti != nil) {
        depth = [ti getDepth];
        if (!showRoot_) {
          depth = [JavaLangMath maxWithInt:depth - 1 withInt:0];
        }
      }
      depth *= indentBy_;
      if (len > 20) {
        w = [JavaLangMath maxWithInt:w withInt:ch * [((NSString *) nil_chk([((RARERenderableDataItem *) nil_chk([((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:i])) description])) sequenceLength] + depth];
      }
      else {
        w = [JavaLangMath maxWithInt:w withInt:48 + [((RAREUIFontMetrics *) nil_chk(fm)) stringWidthWithNSString:[((RARERenderableDataItem *) nil_chk([((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:i])) description]] + depth];
      }
    }
  }
  if (itemRenderer_ != nil) {
    RAREUIInsets *in = [itemRenderer_ getInsets];
    w += ((RAREUIInsets *) nil_chk(in))->left_ + in->right_;
  }
  size->width_ = w;
}

- (id<RAREiTreeItem>)getTreeItemWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  return (treeModel_ == nil) ? nil : [treeModel_ getTreeItemWithRARERenderableDataItem:item];
}

- (RAREaDataItemTreeModel *)getTreeModel {
  return treeModel_;
}

- (int)getTwistyMarginOfError {
  return twistyMarginOfError_;
}

- (BOOL)isAutoScrollOnExpansion {
  return autoScrollOnExpansion_;
}

- (BOOL)isExpandableStateLocked {
  return expandableStateLocked_;
}

- (BOOL)isManageCheckboxSelection {
  return manageCheckboxSelection_;
}

- (BOOL)isRootNodeCollapsible {
  return rootNodeCollapsible_;
}

- (BOOL)isShowRoot {
  return showRoot_;
}

- (BOOL)isShowRootHandles {
  return showRootHandles_;
}

- (BOOL)isSingleClickToggle {
  return singleClickToggle_;
}

- (BOOL)isToggleOnTwistyOnly {
  return toggleOnTwistyOnly_;
}

- (BOOL)checkForCellHotspotWithInt:(int)row
                         withFloat:(float)x
                         withFloat:(float)y
                         withFloat:(float)width
                         withFloat:(float)height {
  RARERenderableDataItem *item = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row];
  id<RAREiTreeItem> ti = [self getTreeItemWithRARERenderableDataItem:item];
  if (ti == nil) {
    return NO;
  }
  int depth = [((id<RAREiTreeItem>) nil_chk(ti)) getDepth];
  if (!showRoot_) {
    depth = [JavaLangMath maxWithInt:depth - 1 withInt:0];
  }
  depth *= indentBy_;
  float sx = leftOffset_ + depth + RAREaTableBasedView_PAD_SIZE;
  if ((checkListManager_ != nil) && !linkedSelection_ && [self isOnCheckBoxWithFloat:x withFloat:y withFloat:width withFloat:height withInt:(int) (sx + indicatorWidth_ + [RAREaTableBasedView ICON_GAP])]) {
    if ([ti isLeaf]) {
      if ([checkListManager_ toggleRowWithInt:row withRARERenderableDataItem:item]) {
        [self repaint];
      }
      else {
        [self repaintRowWithInt:row];
      }
    }
    else {
      if ([checkListManager_ toggleManagedRowWithInt:row withRARERenderableDataItem:item]) {
        [self repaint];
      }
      else {
        [self repaintRowWithInt:row];
      }
    }
    return YES;
  }
  if (toggleOnTwistyOnly_) {
    float sy = (height - indicatorHeight_) / 2;
    if ((y < sy - [RAREaTableBasedView INDICATOR_SLOP]) || (y > (sy + indicatorHeight_ + [RAREaTableBasedView INDICATOR_SLOP]))) {
      return NO;
    }
    if ((x > sx - twistyMarginOfError_) && (x < (sx + indicatorWidth_ + twistyMarginOfError_))) {
      return [self handleExpansionWithRAREiTreeItem:ti withInt:row withBoolean:YES];
    }
  }
  else if (![ti isLeaf]) {
    [self handleExpansionWithRAREiTreeItem:ti withInt:row withBoolean:YES];
  }
  return NO;
}

- (RARECheckListManager *)createCheckListManager {
  if (!twistyMarginOfErrorSet_) {
    if (selectionType_ == [RAREiListHandler_SelectionTypeEnum CHECKED_LEFT]) {
      twistyMarginOfError_ = 0;
      [self setCheckboxLeftXSlopWithInt:0];
    }
    else {
      twistyMarginOfError_ = [RAREaTableBasedView INDICATOR_SLOP];
      [self setCheckboxLeftXSlopWithInt:[RAREaTableBasedView INDICATOR_SLOP]];
    }
  }
  RARECheckListManager *cm = [[RARECheckListManager alloc] initWithBoolean:NO withInt:-1];
  [cm setManageSelectionsWithBoolean:manageCheckboxSelection_];
  if (listModel_ != nil) {
    [cm setListModelWithRAREiPlatformListDataModel:listModel_];
  }
  return cm;
}

- (void)createHeader {
}

- (void)disposeEx {
  [super disposeEx];
  if (treeModel_ != nil) {
    [treeModel_ dispose];
  }
  treeModel_ = nil;
  expansionHandler_ = nil;
  expandedIcon_ = nil;
  collapsedIcon_ = nil;
}

- (BOOL)handleExpansionWithRAREiTreeItem:(id<RAREiTreeItem>)ti
                                 withInt:(int)position
                             withBoolean:(BOOL)userDriven {
  if ((expansionHandler_ != nil) && (!expandableStateLocked_ || !userDriven)) {
    if (![((id<RAREiTreeItem>) nil_chk(ti)) isLeaf]) {
      int scrollTo = [expansionHandler_ toggleExpansionWithRAREiTree:self withRAREiTreeItem:ti withInt:position];
      scrollTo = [JavaLangMath minWithInt:scrollTo withInt:[self getCount] - 1];
      if (scrollTo > 0) {
        if ([self isRowCheckedWithInt:position]) {
          for (int i = position + 1; i <= scrollTo; i++) {
            if (![self isRowCheckedWithInt:i]) {
              [self setRowCheckedWithInt:i withBoolean:YES];
            }
          }
        }
        if (autoScrollOnExpansion_) {
          [self scrollRowToVisibleWithInt:scrollTo];
        }
      }
      return YES;
    }
  }
  return NO;
}

- (void)loadIcons {
  if (collapsedIcon_ == nil) {
    collapsedIcon_ = [[RAREPainterUtils_TwistyIcon alloc] initWithRAREiPlatformComponent:[self getComponent] withBoolean:YES];
  }
  if (expandedIcon_ == nil) {
    expandedIcon_ = [[RAREPainterUtils_TwistyIcon alloc] initWithRAREiPlatformComponent:[self getComponent] withBoolean:NO];
  }
  [self setTreeIconsWithRAREiPlatformIcon:expandedIcon_ withRAREiPlatformIcon:collapsedIcon_];
}

- (void)toggleCheckedStateWithInt:(int)row {
  RARERenderableDataItem *item = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row];
  id<RAREiTreeItem> ti = [self getTreeItemWithRARERenderableDataItem:item];
  if ((ti != nil) && ![ti isLeaf]) {
    BOOL deep = [((RARECheckListManager *) nil_chk(checkListManager_)) toggleManagedRowWithInt:row withRARERenderableDataItem:item];
    if (manageCheckboxSelection_ && [ti isExpanded]) {
      if (deep) {
        [self repaint];
      }
      else {
        int ec = [((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getExpandableColumn];
        int cc = (ec == -1) ? [((RARERenderableDataItem *) nil_chk(item)) size] : [((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(item)) getWithInt:ec])) size];
        [self repaintRowsWithInt:row withInt:row + cc];
      }
    }
  }
  else {
    BOOL deep = [((RARECheckListManager *) nil_chk(checkListManager_)) toggleRowWithInt:row withRARERenderableDataItem:item];
    if (deep) {
      [self repaint];
    }
    else {
      [self repaintRowWithInt:row];
      if (manageCheckboxSelection_) {
        RARERenderableDataItem *parent = [((RARERenderableDataItem *) nil_chk(item)) getParentItem];
        if (parent != nil) {
          [self repaintRowWithRARERenderableDataItem:parent];
        }
      }
    }
  }
}

- (void)updateRenderInsetsForCheckBoxWithFloat:(float)left
                                     withFloat:(float)right {
  if (itemRenderer_ != nil) {
    RAREUIInsets *in = [itemRenderer_ getInsets];
    (void) [((RAREUIInsets *) nil_chk(in)) setWithRAREUIInsets:rinsets_];
    in->left_ += left;
    in->right_ += right;
  }
}

- (BOOL)isOnCheckBoxWithFloat:(float)x
                    withFloat:(float)width
                      withInt:(int)indent {
  if (selectionType_ == [RAREiListHandler_SelectionTypeEnum CHECKED_RIGHT]) {
    return (x >= width - RAREaTableBasedView_PAD_SIZE - checkboxWidth_) && (x < (width - RAREaTableBasedView_PAD_SIZE));
  }
  return (x > indent) && (x < indent + checkboxWidth_ + RAREaTableBasedView_PAD_SIZE);
}

- (BOOL)isSelectableWithInt:(int)row
                    withInt:(int)col
 withRARERenderableDataItem:(RARERenderableDataItem *)item {
  return [self isSelectableWithInt:row withRARERenderableDataItem:item withRAREiTreeItem:nil];
}

- (BOOL)isSelectableWithInt:(int)row
 withRARERenderableDataItem:(RARERenderableDataItem *)item
          withRAREiTreeItem:(id<RAREiTreeItem>)ti {
  if (!selectable_ || (row < 0)) {
    return NO;
  }
  if (item == nil) {
    item = (ti == nil) ? [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row] : [ti getData];
  }
  if (![((RARERenderableDataItem *) nil_chk(item)) isSelectable]) {
    return NO;
  }
  if (!parentItemsSelectable_) {
    if (ti == nil) {
      ti = [self getTreeItemWithRARERenderableDataItem:item];
    }
    if ((ti != nil) && ![ti isLeaf]) {
      return NO;
    }
  }
  return YES;
}

- (BOOL)isTable {
  return NO;
}

- (BOOL)isTree {
  return YES;
}

+ (id)createTreeProxy {
  return [[[RAREAPListView alloc]init] configureForTree];
}

- (int)getIndicatorWidthWithRAREUIImage:(RAREUIImage *)image {
  int w = [((RAREUIImage *) nil_chk(image)) getWidth];
  if (w > indicatorWidth_) {
    indicatorWidth_ = w;
  }
  return indicatorWidth_;
}

- (void)copyAllFieldsTo:(RARETreeView *)other {
  [super copyAllFieldsTo:other];
  other->autoScrollOnExpansion_ = autoScrollOnExpansion_;
  other->collapsedIcon_ = collapsedIcon_;
  other->expandableStateLocked_ = expandableStateLocked_;
  other->expandedIcon_ = expandedIcon_;
  other->expansionHandler_ = expansionHandler_;
  other->indentBy_ = indentBy_;
  other->indentBySet_ = indentBySet_;
  other->lastUpTime_ = lastUpTime_;
  other->lastUpX_ = lastUpX_;
  other->lastUpY_ = lastUpY_;
  other->manageCheckboxSelection_ = manageCheckboxSelection_;
  other->parentItemsSelectable_ = parentItemsSelectable_;
  other->rootNodeCollapsible_ = rootNodeCollapsible_;
  other->showRoot_ = showRoot_;
  other->showRootHandles_ = showRootHandles_;
  other->singleClickToggle_ = singleClickToggle_;
  other->toggleOnTwistyOnly_ = toggleOnTwistyOnly_;
  other->treeModel_ = treeModel_;
  other->twistyMarginOfError_ = twistyMarginOfError_;
  other->twistyMarginOfErrorSet_ = twistyMarginOfErrorSet_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "isParentItemsSelectable", NULL, "Z", 0x1, NULL },
    { "getCollapsedIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getExpandedIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getExpansionHandler", NULL, "LRAREiExpansionHandler", 0x1, NULL },
    { "getTreeItemWithRARERenderableDataItem:", NULL, "LRAREiTreeItem", 0x1, NULL },
    { "getTreeModel", NULL, "LRAREaDataItemTreeModel", 0x1, NULL },
    { "isAutoScrollOnExpansion", NULL, "Z", 0x1, NULL },
    { "isExpandableStateLocked", NULL, "Z", 0x1, NULL },
    { "isManageCheckboxSelection", NULL, "Z", 0x1, NULL },
    { "isRootNodeCollapsible", NULL, "Z", 0x1, NULL },
    { "isShowRoot", NULL, "Z", 0x1, NULL },
    { "isShowRootHandles", NULL, "Z", 0x1, NULL },
    { "isSingleClickToggle", NULL, "Z", 0x1, NULL },
    { "isToggleOnTwistyOnly", NULL, "Z", 0x1, NULL },
    { "checkForCellHotspotWithInt:withFloat:withFloat:withFloat:withFloat:", NULL, "Z", 0x4, NULL },
    { "createCheckListManager", NULL, "LRARECheckListManager", 0x4, NULL },
    { "createHeader", NULL, "V", 0x4, NULL },
    { "disposeEx", NULL, "V", 0x4, NULL },
    { "handleExpansionWithRAREiTreeItem:withInt:withBoolean:", NULL, "Z", 0x4, NULL },
    { "loadIcons", NULL, "V", 0x4, NULL },
    { "toggleCheckedStateWithInt:", NULL, "V", 0x4, NULL },
    { "updateRenderInsetsForCheckBoxWithFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "isOnCheckBoxWithFloat:withFloat:withInt:", NULL, "Z", 0x4, NULL },
    { "isSelectableWithInt:withInt:withRARERenderableDataItem:", NULL, "Z", 0x4, NULL },
    { "isSelectableWithInt:withRARERenderableDataItem:withRAREiTreeItem:", NULL, "Z", 0x4, NULL },
    { "isTable", NULL, "Z", 0x4, NULL },
    { "isTree", NULL, "Z", 0x4, NULL },
    { "createTreeProxy", NULL, "LNSObject", 0x10a, NULL },
    { "getIndicatorWidthWithRAREUIImage:", NULL, "I", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "lastUpX_", NULL, 0x0, "I" },
    { "lastUpY_", NULL, 0x0, "I" },
    { "lastUpTime_", NULL, 0x0, "J" },
    { "twistyMarginOfErrorSet_", NULL, 0x0, "Z" },
    { "indentBy_", NULL, 0x4, "I" },
    { "showRootHandles_", NULL, 0x4, "Z" },
    { "showRoot_", NULL, 0x4, "Z" },
    { "manageCheckboxSelection_", NULL, 0x4, "Z" },
    { "autoScrollOnExpansion_", NULL, 0x4, "Z" },
    { "collapsedIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "expandableStateLocked_", NULL, 0x4, "Z" },
    { "expandedIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "expansionHandler_", NULL, 0x4, "LRAREiExpansionHandler" },
    { "indentBySet_", NULL, 0x4, "Z" },
    { "rootNodeCollapsible_", NULL, 0x4, "Z" },
    { "singleClickToggle_", NULL, 0x4, "Z" },
    { "toggleOnTwistyOnly_", NULL, 0x4, "Z" },
    { "treeModel_", NULL, 0x4, "LRAREaDataItemTreeModel" },
    { "twistyMarginOfError_", NULL, 0x4, "I" },
    { "parentItemsSelectable_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _RARETreeView = { "TreeView", "com.appnativa.rare.platform.apple.ui.view", NULL, 0x1, 29, methods, 20, fields, 0, NULL};
  return &_RARETreeView;
}

@end
