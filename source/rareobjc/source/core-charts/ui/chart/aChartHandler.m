//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-charts/com/appnativa/rare/ui/chart/aChartHandler.java
//
//  Created by decoteaud on 3/14/16.
//

#include "IOSClass.h"
#include "IOSDoubleArray.h"
#include "IOSFloatArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/ConverterContext.h"
#include "com/appnativa/rare/converters/NumberConverter.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIFontHelper.h"
#include "com/appnativa/rare/ui/UIFontMetrics.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIStroke.h"
#include "com/appnativa/rare/ui/chart/CartesianPanel.h"
#include "com/appnativa/rare/ui/chart/ChartAxis.h"
#include "com/appnativa/rare/ui/chart/ChartDataItem.h"
#include "com/appnativa/rare/ui/chart/ChartDefinition.h"
#include "com/appnativa/rare/ui/chart/PlotInformation.h"
#include "com/appnativa/rare/ui/chart/aChartHandler.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/viewer/aChartViewer.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/NumberRange.h"
#include "com/appnativa/util/SNumber.h"
#include "java/io/PrintStream.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/text/DecimalFormat.h"
#include "java/text/MessageFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"

@implementation RAREaChartHandler_LabelData

- (id)initWithNSString:(NSString *)label
             withFloat:(float)width
             withFloat:(float)height {
  if (self = [super init]) {
    self->label_ = label;
    self->width_ = width;
    self->height_ = height;
  }
  return self;
}

- (int)compareToWithId:(id)o {
  return [((NSString *) nil_chk(label_)) compareToWithId:((RAREaChartHandler_LabelData *) nil_chk(o))->label_];
}

- (NSString *)description {
  return label_;
}

- (void)copyAllFieldsTo:(RAREaChartHandler_LabelData *)other {
  [super copyAllFieldsTo:other];
  other->height_ = height_;
  other->label_ = label_;
  other->position_ = position_;
  other->width_ = width_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "label_", NULL, 0x1, "LNSString" },
    { "width_", NULL, 0x1, "F" },
    { "height_", NULL, 0x1, "F" },
    { "position_", NULL, 0x1, "D" },
  };
  static J2ObjcClassInfo _RAREaChartHandler_LabelData = { "LabelData", "com.appnativa.rare.ui.chart", "aChartHandler", 0x9, 0, NULL, 4, fields, 0, NULL};
  return &_RAREaChartHandler_LabelData;
}

@end
@implementation RAREaChartHandler

static IOSObjectArray * RAREaChartHandler_defaultColors_;
static BOOL RAREaChartHandler_supportsMultipleRangeValues_;
static int RAREaChartHandler_LABELS_PADDING_;

+ (int)TYPE_DATE {
  return RAREaChartHandler_TYPE_DATE;
}

+ (int)TYPE_NUMBER {
  return RAREaChartHandler_TYPE_NUMBER;
}

+ (int)TYPE_STRING {
  return RAREaChartHandler_TYPE_STRING;
}

+ (IOSObjectArray *)defaultColors {
  return RAREaChartHandler_defaultColors_;
}

+ (void)setDefaultColors:(IOSObjectArray *)defaultColors {
  RAREaChartHandler_defaultColors_ = defaultColors;
}

+ (BOOL)supportsMultipleRangeValues {
  return RAREaChartHandler_supportsMultipleRangeValues_;
}

+ (BOOL *)supportsMultipleRangeValuesRef {
  return &RAREaChartHandler_supportsMultipleRangeValues_;
}

+ (int)LABELS_PADDING {
  return RAREaChartHandler_LABELS_PADDING_;
}

+ (int *)LABELS_PADDINGRef {
  return &RAREaChartHandler_LABELS_PADDING_;
}

- (id)init {
  if (self = [super init]) {
    [self setupDefaultsWithBoolean:NO];
  }
  return self;
}

- (void)configureTitleWithRAREiActionComponent:(id<RAREiActionComponent>)c
                    withRARERenderableDataItem:(RARERenderableDataItem *)title {
  [((id<RAREiActionComponent>) nil_chk(c)) setForegroundWithRAREUIColor:[self getTitleColorWithRARERenderableDataItem:title]];
  [c setFontWithRAREUIFont:[self getTitleFontWithRARERenderableDataItem:title]];
  if ([((RARERenderableDataItem *) nil_chk(title)) getBackground] != nil) {
    [c setBackgroundWithRAREUIColor:[title getBackground]];
  }
  if ([title getBorder] != nil) {
    [c setBorderWithRAREiPlatformBorder:[title getBorder]];
  }
  [c setTextWithJavaLangCharSequence:[title toCharSequence]];
}

- (id<RAREiPlatformComponent>)createChartWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                            withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)createLabelDataWithRAREChartDefinition:(RAREChartDefinition *)cd
                                               withBoolean:(BOOL)domain
                                                withDouble:(double)availableWidth
                                                withDouble:(double)startValue
                                                withDouble:(double)endValue
                                                withDouble:(double)increment {
  RAREChartAxis *ai = domain ? [((RAREChartDefinition *) nil_chk(cd)) getDomainAxis] : [((RAREChartDefinition *) nil_chk(cd)) getRangeAxis];
  RAREUIDimension *size = [[RAREUIDimension alloc] init];
  RAREUIFontMetrics *fm = [RAREUIFontMetrics getMetricsWithRAREUIFont:[self getAxisLabelFontWithRAREChartAxis:ai]];
  int textAngle = [ai getAngle];
  id<RAREiDataConverter> cvt = [ai getDomainDataConverter];
  id ctx = [ai getDomainContext];
  BOOL isDate = [RAREaChartHandler getDataTypeWithRAREChartAxis:ai] == RAREaChartHandler_TYPE_DATE;
  JavaUtilDate *date = isDate ? [[JavaUtilDate alloc] init] : nil;
  if (isDate) {
    [date setTimeWithLong:(long long int) startValue];
  }
  RAREaChartViewer *cv = [((RAREChartDefinition *) nil_chk(cd)) getChartViewer];
  int count = (int) ([JavaLangMath absWithDouble:endValue - startValue] / increment);
  if (count < 1) {
    count = 1;
  }
  double width = 0;
  int lineHeight = (int) [((RAREUIFontMetrics *) nil_chk(fm)) getHeight];
  NSString *s;
  id o = isDate ? date : [JavaLangDouble valueOfWithDouble:startValue];
  if (cvt == nil) {
    s = [o description];
  }
  else {
    s = (NSString *) check_class_cast([cvt objectToStringWithRAREiWidget:cv withId:o withId:ctx], [NSString class]);
  }
  [RAREaChartHandler calculateTextSizeWithFloat:[fm stringWidthWithNSString:s] withFloat:lineHeight withFloat:textAngle withRAREUIDimension:size];
  width += domain ? size->width_ : size->height_;
  if (isDate) {
    [date setTimeWithLong:(long long int) endValue];
  }
  o = isDate ? date : [JavaLangDouble valueOfWithDouble:endValue];
  if (cvt == nil) {
    s = [o description];
  }
  else {
    s = (NSString *) check_class_cast([cvt objectToStringWithRAREiWidget:cv withId:o withId:ctx], [NSString class]);
  }
  [RAREaChartHandler calculateTextSizeWithFloat:[fm stringWidthWithNSString:s] withFloat:lineHeight withFloat:textAngle withRAREUIDimension:size];
  width += domain ? size->width_ : size->height_;
  double midValue = increment * (count / 2) + startValue;
  if (isDate) {
    [date setTimeWithLong:(long long int) midValue];
  }
  o = isDate ? date : [JavaLangDouble valueOfWithDouble:midValue];
  if (cvt == nil) {
    s = [o description];
  }
  else {
    s = (NSString *) check_class_cast([cvt objectToStringWithRAREiWidget:cv withId:o withId:ctx], [NSString class]);
  }
  [RAREaChartHandler calculateTextSizeWithFloat:[fm stringWidthWithNSString:s] withFloat:lineHeight withFloat:textAngle withRAREUIDimension:size];
  width += domain ? size->width_ : size->height_;
  width = width / 3;
  double inc = [RAREaChartHandler calculateIncrementWithDouble:availableWidth withDouble:width withDouble:startValue withDouble:endValue withDouble:increment];
  double startPosition = startValue;
  double val = startPosition;
  if (count > 1000) {
    count = 5000;
  }
  id<JavaUtilList> list = [[JavaUtilArrayList alloc] initWithInt:count];
  [list addWithId:@""];
  for (int i = 1; i < count; i++) {
    val += inc;
    if (val > endValue) {
      if (i > 1) {
        (void) [list setWithInt:i - 1 withId:@""];
      }
      break;
    }
    if (isDate) {
      [date setTimeWithLong:(long long int) val];
    }
    o = isDate ? date : [JavaLangDouble valueOfWithDouble:val];
    if (cvt == nil) {
      s = [o description];
    }
    else {
      s = (NSString *) check_class_cast([cvt objectToStringWithRAREiWidget:cv withId:o withId:ctx], [NSString class]);
    }
    [list addWithId:s];
  }
  return [RAREaChartHandler createLabelsDataWithJavaUtilList:list withRAREaChartViewer:cv withRAREiDataConverter:nil withId:nil withBoolean:YES withRAREUIFontMetrics:fm withInt:textAngle withDouble:startPosition withDouble:inc withBoolean:NO];
}

- (IOSObjectArray *)createLabelsDataWithJavaUtilList:(id<JavaUtilList>)list
                                withRAREaChartViewer:(RAREaChartViewer *)cv
                              withRAREiDataConverter:(id<RAREiDataConverter>)cvt
                                              withId:(id)context
                                         withBoolean:(BOOL)domain
                               withRAREUIFontMetrics:(RAREUIFontMetrics *)fm
                                             withInt:(int)textAngle {
  return [RAREaChartHandler createLabelsDataWithJavaUtilList:list withRAREaChartViewer:cv withRAREiDataConverter:cvt withId:context withBoolean:domain withRAREUIFontMetrics:fm withInt:textAngle withDouble:0 withDouble:1 withBoolean:NO];
}

- (IOSObjectArray *)createNumericLabelsDataWithRAREChartDefinition:(RAREChartDefinition *)cd
                                                        withDouble:(double)width
                                                        withDouble:(double)startValue
                                                        withDouble:(double)endValue
                                                        withDouble:(double)increment
                                                       withBoolean:(BOOL)domain
                                                        withDouble:(double)widthDivisor {
  if (widthDivisor > 0) {
    increment = [RAREaChartHandler calculateIncrementWithDouble:width withDouble:widthDivisor withDouble:startValue withDouble:endValue withDouble:increment];
  }
  RAREChartAxis *ai = domain ? [((RAREChartDefinition *) nil_chk(cd)) getDomainAxis] : [((RAREChartDefinition *) nil_chk(cd)) getRangeAxis];
  id<RAREiDataConverter> cvt = domain ? [ai getDomainDataConverter] : [ai getDataConverter];
  id ctx = domain ? [ai getDomainContext] : [ai getValueContext];
  JavaTextDecimalFormat *df = nil;
  if ((cvt == nil) || (([(id) cvt isKindOfClass:[RARENumberConverter class]]) && (ctx == nil))) {
    cvt = nil;
    df = [[JavaTextDecimalFormat alloc] initWithNSString:@"#.##"];
  }
  int len = (int) [JavaLangMath maxWithDouble:1 withDouble:(endValue - startValue) / increment];
  len = [JavaLangMath minWithInt:1000 withInt:len];
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
  int n = 0;
  for (double d = startValue; d < endValue; d += increment) {
    [list addWithId:(df == nil) ? [JavaLangDouble valueOfWithDouble:d] : [df formatWithDouble:d]];
    n++;
    if (n == 1000) {
      break;
    }
  }
  RAREUIFontMetrics *fm = [RAREUIFontMetrics getMetricsWithRAREUIFont:[self getAxisLabelFontWithRAREChartAxis:ai]];
  return [RAREaChartHandler createLabelsDataWithJavaUtilList:list withRAREaChartViewer:[((RAREChartDefinition *) nil_chk(cd)) getChartViewer] withRAREiDataConverter:cvt withId:ctx withBoolean:domain withRAREUIFontMetrics:fm withInt:[ai getAngle] withDouble:startValue withDouble:increment withBoolean:NO];
}

- (RAREaChartHandler_SeriesData *)createSeriesDataWithInt:(int)dataType
                                  withRAREChartDefinition:(RAREChartDefinition *)cd
                                                  withInt:(int)row {
  RAREChartDataItem *series = [((RAREChartDefinition *) nil_chk(cd)) getSeriesWithInt:row];
  RAREPlotInformation_LabelTypeEnum *lt = [RAREaChartHandler getSeriesLabelTypeWithRAREPlotInformation:[cd getPlotInformation] withRAREChartDataItem:series];
  int end = [cd getEndColumn];
  if (end < 1) {
    end = [((RAREChartDataItem *) nil_chk(series)) size] - 1;
  }
  return [RAREaChartHandler createSeriesDataWithInt:dataType withRAREChartDataItem:series withJavaUtilList:[cd getDomainValues] withInt:[cd getStartColumn] withInt:end withRAREPlotInformation_LabelTypeEnum:lt];
}

- (id<RAREiPlatformComponent>)dataChangedWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                            withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)disposeWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                  withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)disposeChartWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel {
}

- (void)ensurePlotFullyVisibleWithDoubleArray:(IOSDoubleArray *)values
                                   withDouble:(double)lowest
                                   withDouble:(double)highest {
  double increment = IOSDoubleArray_Get(nil_chk(values), 2);
  double top = highest + increment;
  if (top > IOSDoubleArray_Get(values, 1)) {
    (*IOSDoubleArray_GetRef(values, 1)) += increment;
  }
  double bottom = lowest - increment;
  if (bottom < 0) {
    if (lowest >= .5) {
      bottom = 0;
    }
  }
  else if ((increment >= 2) && (int) bottom % 2 == 1) {
    bottom++;
  }
  if (bottom < IOSDoubleArray_Get(values, 0)) {
    (*IOSDoubleArray_GetRef(values, 0)) = bottom;
  }
}

- (RAREUIColor *)getAxisLabelColorWithRAREChartAxis:(RAREChartAxis *)ai {
  RAREUIColor *c = [((RAREChartAxis *) nil_chk(ai)) getLabelColor];
  if (c == nil) {
    c = [ai getForeground];
  }
  return (c == nil) ? chartForeground_ : c;
}

- (RAREUIFont *)getAxisLabelFontWithRAREChartAxis:(RAREChartAxis *)ai {
  RAREUIFont *f = [((RAREChartAxis *) nil_chk(ai)) getLabelFont];
  if (f == nil) {
    f = [ai getFont];
  }
  if (f == nil) {
    f = chartFont_;
  }
  if (f == nil) {
    f = [RAREFontUtils getDefaultFont];
  }
  return f;
}

- (RAREUIColor *)getAxisTitleColorWithRAREChartAxis:(RAREChartAxis *)ai {
  return [self getAxisLabelColorWithRAREChartAxis:ai];
}

- (RAREUIFont *)getAxisTitleFontWithRAREChartAxis:(RAREChartAxis *)ai {
  return [self getAxisLabelFontWithRAREChartAxis:ai];
}

- (RAREUIFont *)getChartFont {
  return chartFont_;
}

- (RAREUIColor *)getChartForeground {
  return chartForeground_;
}

- (RAREUIImage *)getChartImageWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                 withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RAREiPlatformComponent>)getLegendComponentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                                   withRAREChartDefinition:(RAREChartDefinition *)cd {
  return nil;
}

- (RAREUIDimension *)getPlotAreaSizeWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                       withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (RAREUIColor *)getTextColorWithRAREChartDefinition:(RAREChartDefinition *)cd {
  return [((RAREChartDefinition *) nil_chk(cd)) getTextColorWithRAREUIColor:plotLabelColor_];
}

- (RAREUIFont *)getTextFontWithRAREChartDefinition:(RAREChartDefinition *)cd {
  return [((RAREChartDefinition *) nil_chk(cd)) getTextFontWithRAREUIFont:plotLabelFont_];
}

- (double)getTimeIntervalWithRAREChartAxis_TimeUnitEnum:(RAREChartAxis_TimeUnitEnum *)tm {
  if (tm == nil) {
    tm = [RAREChartAxis_TimeUnitEnum DAY];
  }
  switch ([tm ordinal]) {
    case RAREChartAxis_TimeUnit_MILLISECOND:
    return 1;
    case RAREChartAxis_TimeUnit_SECOND:
    return 1000;
    case RAREChartAxis_TimeUnit_MINUTE:
    return 1000 * 60;
    case RAREChartAxis_TimeUnit_HOUR:
    return 1000 * 60 * 60;
    case RAREChartAxis_TimeUnit_DAY:
    return 1000 * 60 * 60 * 24;
    case RAREChartAxis_TimeUnit_MONTH:
    return 1000 * 60 * 60 * 24 * 30.0;
    case RAREChartAxis_TimeUnit_YEAR:
    return 1000 * 60 * 60 * 24 * 365.0;
    case RAREChartAxis_TimeUnit_WEEK:
    return 1000 * 60 * 60 * 24 * 7.0;
    default:
    return 1;
  }
}

- (double)getTimeIntervalWithDouble:(double)value
     withRAREChartAxis_TimeUnitEnum:(RAREChartAxis_TimeUnitEnum *)tm {
  double time = 0;
  if (value == 0) {
    value = 1;
  }
  if (tm == nil) {
    tm = [RAREChartAxis_TimeUnitEnum DAY];
  }
  if (tm != nil) {
    switch ([tm ordinal]) {
      case RAREChartAxis_TimeUnit_MILLISECOND:
      time = value;
      break;
      case RAREChartAxis_TimeUnit_SECOND:
      time = value * 1000;
      break;
      case RAREChartAxis_TimeUnit_MINUTE:
      time = value * 1000 * 60;
      break;
      case RAREChartAxis_TimeUnit_HOUR:
      time = value * 1000 * 60 * 60;
      break;
      case RAREChartAxis_TimeUnit_DAY:
      time = value * 1000 * 60 * 60 * 24;
      break;
      case RAREChartAxis_TimeUnit_MONTH:
      time = value * 1000 * 60 * 60 * 24 * 30;
      break;
      case RAREChartAxis_TimeUnit_YEAR:
      time = value * 1000 * 60 * 60 * 24 * 365;
      break;
      default:
      break;
    }
  }
  return time / 1000.0f;
}

- (RAREUIColor *)getTitleColorWithRARERenderableDataItem:(RARERenderableDataItem *)title {
  RAREUIColor *c = [((RARERenderableDataItem *) nil_chk(title)) getForeground];
  return (c == nil) ? chartForeground_ : c;
}

- (RAREUIFont *)getTitleFontWithRARERenderableDataItem:(RARERenderableDataItem *)title {
  RAREUIFont *font = [((RARERenderableDataItem *) nil_chk(title)) getFont];
  if (font == nil) {
    font = chartFont_;
  }
  if (font == nil) {
    font = [RAREFontUtils getDefaultFont];
  }
  return font;
}

- (BOOL)isLegendSeperate {
  return NO;
}

- (void)itemChangedWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                      withRAREChartDefinition:(RAREChartDefinition *)cd
                        withRAREChartDataItem:(RAREChartDataItem *)item {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (RAREChartDataItem *)itemFromLocationWithRAREChartDefinition:(RAREChartDefinition *)cd
                                                       withInt:(int)x
                                                       withInt:(int)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)recomputeAxisRangeAndTickWithDoubleArray:(IOSDoubleArray *)values {
  double axisStart = IOSDoubleArray_Get(nil_chk(values), 0);
  double axisEnd = IOSDoubleArray_Get(values, 1);
  double NumTicks = IOSDoubleArray_Get(values, 2);
  double axisWidth;
  double niceRange;
  double niceTick;
  if (NumTicks < 2) {
    NumTicks = 2;
  }
  axisWidth = axisEnd - axisStart;
  if (axisWidth == 0.0) {
    return;
  }
  niceRange = [RAREaChartHandler niceNumberWithDouble:axisWidth withBoolean:NO];
  niceTick = [RAREaChartHandler niceNumberWithDouble:niceRange / (NumTicks - 1) withBoolean:YES];
  (*IOSDoubleArray_GetRef(values, 0)) = [JavaLangMath floorWithDouble:axisStart / niceTick] * niceTick;
  (*IOSDoubleArray_GetRef(values, 1)) = [JavaLangMath ceilWithDouble:axisEnd / niceTick] * niceTick;
  if (IOSDoubleArray_Get(values, 2) != 0) {
    (*IOSDoubleArray_GetRef(values, 2)) = niceTick;
  }
}

- (void)setChartFontWithRAREUIFont:(RAREUIFont *)chartFont {
  self->chartFont_ = chartFont;
  self->plotLabelFont_ = chartFont;
}

- (void)setChartForegroundWithRAREUIColor:(RAREUIColor *)chartForeground {
  self->chartForeground_ = chartForeground;
  self->plotLabelColor_ = chartForeground;
}

- (void)setDomainLabelWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                         withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setDomainLabelsAngleWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                               withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setHorizontalScrollingEnabledWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartComponent
                                                    withBoolean:(BOOL)enable {
}

- (void)setRangeLabelWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                        withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setShowDomainLabelsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                              withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setShowPlotValuesWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                            withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setShowRangeLabelsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                             withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setVerticalScrollingEnabledWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartComponent
                                                  withBoolean:(BOOL)enable {
}

- (void)unzoomWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                 withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateRangeAxisWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                          withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updatesCompletedWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                           withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updatesPendingWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                         withRAREChartDefinition:(RAREChartDefinition *)cd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)calculateSeriesesRangeWithRAREChartDefinition:(RAREChartDefinition *)cd
                                              withInt:(int)domainType
                                      withDoubleArray:(IOSDoubleArray *)xrange
                                      withDoubleArray:(IOSDoubleArray *)yrange {
  if (IOSDoubleArray_Get(nil_chk(xrange), 0) == JavaLangDouble_MAX_VALUE) {
    (*IOSDoubleArray_GetRef(xrange, 0)) = 0;
  }
  if (IOSDoubleArray_Get(nil_chk(yrange), 0) == JavaLangDouble_MAX_VALUE) {
    (*IOSDoubleArray_GetRef(yrange, 0)) = 0;
  }
  double d;
  id<JavaUtilList> markers = [((RAREChartDefinition *) nil_chk(cd)) getRangeMarkers];
  int len = (markers == nil) ? 0 : [markers size];
  for (int i = 0; i < len; i++) {
    RAREChartDataItem *item = [((id<JavaUtilList>) nil_chk(markers)) getWithInt:i];
    d = [((NSNumber *) check_class_cast([((RAREChartDataItem *) nil_chk(item)) getValue], [NSNumber class])) doubleValue];
    if (d < IOSDoubleArray_Get(yrange, 0)) {
      (*IOSDoubleArray_GetRef(yrange, 0)) = d;
    }
    d = [((NSNumber *) check_class_cast([item getDomainValue], [NSNumber class])) doubleValue];
    if (d > IOSDoubleArray_Get(yrange, 1)) {
      (*IOSDoubleArray_GetRef(yrange, 1)) = d;
    }
  }
  markers = [cd getDomainMarkers];
  len = (markers == nil) ? 0 : [markers size];
  for (int i = 0; i < len; i++) {
    RAREChartDataItem *item = [((id<JavaUtilList>) nil_chk(markers)) getWithInt:i];
    d = [((NSNumber *) check_class_cast([((RAREChartDataItem *) nil_chk(item)) getValue], [NSNumber class])) doubleValue];
    if (d < IOSDoubleArray_Get(xrange, 0)) {
      (*IOSDoubleArray_GetRef(xrange, 0)) = d;
    }
    d = [((NSNumber *) check_class_cast([item getDomainValue], [NSNumber class])) doubleValue];
    if (d > IOSDoubleArray_Get(yrange, 1)) {
      (*IOSDoubleArray_GetRef(xrange, 1)) = d;
    }
  }
  (*IOSDoubleArray_GetRef(xrange, 2)) = 10;
  (*IOSDoubleArray_GetRef(yrange, 2)) = 10;
  double xl = IOSDoubleArray_Get(xrange, 0);
  double xh = IOSDoubleArray_Get(xrange, 1);
  double yl = IOSDoubleArray_Get(yrange, 0);
  double yh = IOSDoubleArray_Get(yrange, 1);
  [self recomputeAxisRangeAndTickWithDoubleArray:xrange];
  [self recomputeAxisRangeAndTickWithDoubleArray:yrange];
  RAREChartAxis *ai = [cd getRangeAxis];
  RARERenderableDataItem *di = [((RAREChartAxis *) nil_chk(ai)) getLowerBounds];
  int xrangeSet = 0;
  int yrangeSet = 0;
  if (di != nil) {
    d = [di doubleValue];
    if (d < yl) {
      yrangeSet = 1;
      (*IOSDoubleArray_GetRef(yrange, 0)) = d;
      yl = d;
    }
  }
  di = [ai getUpperBounds];
  if (di != nil) {
    d = [di doubleValue];
    if (d > yh) {
      yrangeSet += 2;
      (*IOSDoubleArray_GetRef(yrange, 1)) = d;
      yh = d;
    }
  }
  double inc = [ai getIncrement];
  if (inc != 0) {
    (*IOSDoubleArray_GetRef(yrange, 2)) = inc;
  }
  ai = [cd getDomainAxis];
  di = [((RAREChartAxis *) nil_chk(ai)) getLowerBounds];
  if (di != nil) {
    d = [di doubleValue];
    if (d < xl) {
      (*IOSDoubleArray_GetRef(xrange, 0)) = d;
      xrangeSet = 1;
    }
  }
  di = [ai getUpperBounds];
  if (di != nil) {
    d = [di doubleValue];
    if (d < xh) {
      (*IOSDoubleArray_GetRef(xrange, 1)) = d;
      xrangeSet += 2;
    }
  }
  inc = [ai getIncrement];
  if (domainType == RAREaChartHandler_TYPE_DATE) {
    if (inc == 0) {
      inc = 1;
    }
    RAREChartAxis_TimeUnitEnum *tu = [ai getTimeUnit];
    if ((tu != nil) && (tu != [RAREChartAxis_TimeUnitEnum NONE])) {
      inc *= [self getTimeIntervalWithRAREChartAxis_TimeUnitEnum:tu];
    }
  }
  else if (inc == 0) {
    inc = 1;
  }
  if (inc != 0) {
    (*IOSDoubleArray_GetRef(xrange, 2)) = inc;
  }
  if (yrangeSet != 3) {
    double l = IOSDoubleArray_Get(yrange, 0);
    double h = IOSDoubleArray_Get(yrange, 1);
    [self ensurePlotFullyVisibleWithDoubleArray:yrange withDouble:yl withDouble:yh];
    if (yrangeSet == 1) {
      (*IOSDoubleArray_GetRef(yrange, 0)) = l;
    }
    else if (yrangeSet == 2) {
      (*IOSDoubleArray_GetRef(yrange, 1)) = h;
    }
  }
  if (xrangeSet != 3) {
    double l = IOSDoubleArray_Get(xrange, 0);
    double h = IOSDoubleArray_Get(xrange, 1);
    [self ensurePlotFullyVisibleWithDoubleArray:xrange withDouble:xl withDouble:xh];
    if (xrangeSet == 1) {
      (*IOSDoubleArray_GetRef(xrange, 0)) = l;
    }
    else if (xrangeSet == 2) {
      (*IOSDoubleArray_GetRef(xrange, 1)) = h;
    }
  }
}

- (RAREUIColor *)getGridColorWithRAREPlotInformation:(RAREPlotInformation *)plot {
  RAREUIColor *c = (plot == nil) ? nil : [plot getGridColor];
  return (c == nil) ? gridColor_ : c;
}

- (RAREUIStroke *)getGridStrokeWithRAREPlotInformation:(RAREPlotInformation *)plot {
  RAREUIStroke *stroke = (plot == nil) ? nil : [plot getGridStroke];
  return (stroke == nil) ? [RAREUIStroke HALF_DOTTED_STROKE] : stroke;
}

- (void)setupDefaultsWithBoolean:(BOOL)allowNull {
  chartForeground_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Chart.foreground"];
  if ((chartForeground_ == nil) && !allowNull) {
    chartForeground_ = [RAREColorUtils getForeground];
  }
  chartBackground_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Chart.background"];
  if ((chartBackground_ == nil) && !allowNull) {
    chartBackground_ = [RAREColorUtils getBackground];
  }
  chartFont_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getFontWithNSString:@"Rare.Chart.font"];
  if ((chartFont_ == nil) && !allowNull) {
    chartFont_ = [RAREUIFontHelper getDefaultFont];
  }
  gridColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Chart.gridColor"];
  if ((gridColor_ == nil) && !allowNull) {
    gridColor_ = [RAREUIColor LIGHTGRAY];
  }
  plotBackground_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Chart.plotBackground"];
  plotLabelColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Chart.plotLabelColor"];
  if ((plotLabelColor_ == nil) && !allowNull) {
    plotLabelColor_ = chartForeground_;
  }
  plotLabelFont_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getFontWithNSString:@"Rare.Chart.plotLabelFont"];
  if ((plotLabelFont_ == nil) && !allowNull) {
    plotLabelFont_ = chartFont_;
  }
  legendLabelFont_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getFontWithNSString:@"Rare.Chart.legendLabelFont"];
  if ((legendLabelFont_ == nil) && !allowNull) {
    legendLabelFont_ = plotLabelFont_;
  }
  legendLabelColor_ = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.Chart.legendLabelColor"];
  if ((legendLabelColor_ == nil) && !allowNull) {
    legendLabelColor_ = plotLabelColor_;
  }
}

+ (BOOL)areAllTheSameTypeWithRAREChartDefinition:(RAREChartDefinition *)cd {
  id<JavaUtilList> rows = [((RAREChartDefinition *) nil_chk(cd)) getSeries];
  int len = (rows == nil) ? 0 : [rows size];
  if (len == 0) {
    return YES;
  }
  RAREChartDefinition_ChartTypeEnum *oct = nil;
  for (int i = 0; i < len; i++) {
    RAREChartDataItem *series = (RAREChartDataItem *) check_class_cast([((id<JavaUtilList>) nil_chk(rows)) getWithInt:i], [RAREChartDataItem class]);
    RAREChartDefinition_ChartTypeEnum *ct = [RAREaChartHandler getSeriesChartTypeWithRAREChartDefinition:cd withRAREChartDataItem:series];
    if (oct == nil) {
      oct = ct;
    }
    else if (oct != ct) {
      return NO;
    }
  }
  return YES;
}

+ (double)calculateIncrementWithDouble:(double)availableWidth
                            withDouble:(double)tickWidth
                            withDouble:(double)startValue
                            withDouble:(double)endValue
                            withDouble:(double)increment {
  int count = (int) ([JavaLangMath absWithDouble:endValue - startValue] / increment);
  count = (int) [JavaLangMath minWithDouble:availableWidth / tickWidth withDouble:count];
  if (count < 1) {
    count = 1;
  }
  double inc = [JavaLangMath absWithDouble:endValue - startValue] / count;
  inc /= increment;
  int ratio = (int) [JavaLangMath maxWithDouble:inc withDouble:1];
  inc = ratio * increment;
  return inc;
}

+ (void)calculateRangeBoundsWithRAREChartDataItem:(RAREChartDataItem *)series
                                  withDoubleArray:(IOSDoubleArray *)xrange
                                  withDoubleArray:(IOSDoubleArray *)yrange
                                          withInt:(int)start
                                          withInt:(int)end
                                      withBoolean:(BOOL)numberRange {
  if ((xrange == nil) && (yrange == nil)) {
    return;
  }
  double xmin = (xrange == nil) ? 0 : IOSDoubleArray_Get(xrange, 0);
  double xmax = (xrange == nil) ? 0 : IOSDoubleArray_Get(xrange, 1);
  double ymin = (yrange == nil) ? 0 : IOSDoubleArray_Get(yrange, 0);
  double ymax = (yrange == nil) ? 0 : IOSDoubleArray_Get(yrange, 1);
  double d;
  for (int i = start; i < end; i++) {
    RAREChartDataItem *di = (RAREChartDataItem *) check_class_cast([((RAREChartDataItem *) nil_chk(series)) getItemExWithInt:i], [RAREChartDataItem class]);
    if (numberRange) {
      RAREUTNumberRange *r = (RAREUTNumberRange *) check_class_cast([((RAREChartDataItem *) nil_chk(di)) getValue], [RAREUTNumberRange class]);
      d = [((NSNumber *) nil_chk([((RAREUTNumberRange *) nil_chk(r)) getLowValue])) doubleValue];
      ymin = [JavaLangMath minWithDouble:d withDouble:ymin];
      ymax = [JavaLangMath maxWithDouble:d withDouble:ymax];
      d = [((NSNumber *) nil_chk([r getHighValue])) doubleValue];
      ymin = [JavaLangMath minWithDouble:d withDouble:ymin];
      ymax = [JavaLangMath maxWithDouble:d withDouble:ymax];
    }
    else {
      d = [((RAREChartDataItem *) nil_chk(di)) doubleValue];
      ymin = [JavaLangMath minWithDouble:d withDouble:ymin];
      ymax = [JavaLangMath maxWithDouble:d withDouble:ymax];
    }
    if (xrange != nil) {
      d = [((RAREChartDataItem *) nil_chk(di)) getDomainDouble];
      xmin = [JavaLangMath minWithDouble:d withDouble:xmin];
      xmax = [JavaLangMath maxWithDouble:d withDouble:xmax];
    }
  }
  if (xrange != nil) {
    (*IOSDoubleArray_GetRef(xrange, 0)) = xmin;
    (*IOSDoubleArray_GetRef(xrange, 1)) = xmax;
  }
  if (yrange != nil) {
    (*IOSDoubleArray_GetRef(yrange, 0)) = ymin;
    (*IOSDoubleArray_GetRef(yrange, 1)) = ymax;
  }
}

+ (void)calculateTextSizeWithFloat:(float)textWidth
                         withFloat:(float)lineHeight
                         withFloat:(float)textAngle
               withRAREUIDimension:(RAREUIDimension *)size {
  lineHeight += (float) ([JavaLangMath sinWithDouble:textAngle] * textWidth);
  textWidth = (float) ([JavaLangMath cosWithDouble:textAngle] * textWidth);
  ((RAREUIDimension *) nil_chk(size))->width_ = (int) [JavaLangMath ceilWithDouble:textWidth];
  size->height_ = (int) [JavaLangMath ceilWithDouble:lineHeight];
}

+ (void)calculateTextSizeWithNSString:(NSString *)text
                withRAREUIFontMetrics:(RAREUIFontMetrics *)fm
                              withInt:(int)textAngle
                  withRAREUIDimension:(RAREUIDimension *)size {
  float angle = 0;
  int lineHeight = (int) [JavaLangMath ceilWithDouble:[((RAREUIFontMetrics *) nil_chk(fm)) getHeight]];
  if (textAngle < 0) {
    textAngle = 360 + textAngle;
  }
  BOOL has90Degree = (textAngle == 90) || (textAngle == -90) || (textAngle == 270);
  BOOL hasAngle = (textAngle != 0) && (textAngle != 360) && (textAngle != 180) && !has90Degree;
  if (hasAngle && !has90Degree) {
    angle = (float) [JavaLangMath toRadiansWithDouble:textAngle];
  }
  int textWidth = [fm stringWidthWithNSString:text];
  if (hasAngle) {
    [RAREaChartHandler calculateTextSizeWithFloat:textWidth withFloat:lineHeight withFloat:angle withRAREUIDimension:size];
  }
  else if (has90Degree) {
    ((RAREUIDimension *) nil_chk(size))->width_ = lineHeight;
    size->height_ = textWidth;
  }
  else {
    ((RAREUIDimension *) nil_chk(size))->width_ = textWidth;
    size->height_ = lineHeight;
  }
}

+ (IOSObjectArray *)createLabelsDataWithJavaUtilList:(id<JavaUtilList>)list
                                withRAREaChartViewer:(RAREaChartViewer *)cv
                              withRAREiDataConverter:(id<RAREiDataConverter>)cvt
                                              withId:(id)context
                                         withBoolean:(BOOL)domain
                               withRAREUIFontMetrics:(RAREUIFontMetrics *)fm
                                             withInt:(int)textAngle
                                          withDouble:(double)startPosition
                                          withDouble:(double)increment
                                         withBoolean:(BOOL)padEnds {
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  IOSObjectArray *labels = [IOSObjectArray arrayWithLength:padEnds ? len + 2 : len type:[IOSClass classWithClass:[RAREaChartHandler_LabelData class]]];
  NSString *s;
  float angle = 0;
  int lineHeight = (int) [JavaLangMath ceilWithDouble:[((RAREUIFontMetrics *) nil_chk(fm)) getHeight]];
  RAREUIDimension *size = [[RAREUIDimension alloc] init];
  if (textAngle < 0) {
    textAngle = 360 + textAngle;
  }
  BOOL has90Degree = (textAngle == 90) || (textAngle == -90) || (textAngle == 270);
  BOOL hasAngle = (textAngle != 0) && (textAngle != 360) && (textAngle != 180) && !has90Degree;
  if (hasAngle && !has90Degree) {
    angle = (float) [JavaLangMath toRadiansWithDouble:textAngle];
  }
  int n = padEnds ? 1 : 0;
  for (int i = 0; i < len; i++) {
    if (cvt != nil) {
      s = [((id<JavaLangCharSequence>) nil_chk([cvt objectToStringWithRAREiWidget:cv withId:[list getWithInt:i] withId:context])) sequenceDescription];
    }
    else {
      s = [nil_chk([list getWithInt:i]) description];
    }
    int textWidth = [fm stringWidthWithNSString:s];
    if (hasAngle) {
      [RAREaChartHandler calculateTextSizeWithFloat:textWidth withFloat:lineHeight withFloat:angle withRAREUIDimension:size];
    }
    else if (has90Degree) {
      size->width_ = lineHeight;
      size->height_ = textWidth;
    }
    else {
      size->width_ = textWidth;
      size->height_ = lineHeight;
    }
    (void) IOSObjectArray_Set(labels, n, [[RAREaChartHandler_LabelData alloc] initWithNSString:s withFloat:size->width_ withFloat:size->height_]);
    ((RAREaChartHandler_LabelData *) nil_chk(IOSObjectArray_Get(labels, n)))->position_ = startPosition + (i * increment);
    n++;
  }
  if (padEnds) {
    (void) IOSObjectArray_Set(labels, 0, [[RAREaChartHandler_LabelData alloc] initWithNSString:@"" withFloat:0 withFloat:0]);
    ((RAREaChartHandler_LabelData *) nil_chk(IOSObjectArray_Get(labels, 0)))->position_ = startPosition - increment;
    (void) IOSObjectArray_Set(labels, len + 1, [[RAREaChartHandler_LabelData alloc] initWithNSString:@"" withFloat:0 withFloat:0]);
    ((RAREaChartHandler_LabelData *) nil_chk(IOSObjectArray_Get(labels, len + 1)))->position_ = ((RAREaChartHandler_LabelData *) nil_chk(IOSObjectArray_Get(labels, len)))->position_ + increment;
  }
  return labels;
}

+ (RAREaChartHandler_SeriesData *)createSeriesDataWithInt:(int)dataType
                                    withRAREChartDataItem:(RAREChartDataItem *)series
                                         withJavaUtilList:(id<JavaUtilList>)domainValues
                                                  withInt:(int)start
                                                  withInt:(int)end
                    withRAREPlotInformation_LabelTypeEnum:(RAREPlotInformation_LabelTypeEnum *)lt {
  end++;
  int len = end - start;
  if (len <= 0) {
    return nil;
  }
  RAREaChartHandler_SeriesData *data = [[RAREaChartHandler_SeriesData alloc] initWithNSString:[((RAREChartDataItem *) nil_chk(series)) getDomainString] withInt:len withRAREPlotInformation_LabelTypeEnum:lt];
  RAREUIColor *c = [RAREaChartHandler getSeriesFillColorWithRAREChartDataItem:series];
  data->fillColor_ = c;
  c = [RAREaChartHandler getSeriesOutlineColorWithRAREChartDataItem:series];
  if (c != nil) {
    data->outlineColor_ = c;
  }
  RAREChartDataItem *di;
  int domainIndex = 0;
  NSNumber *range;
  id domain;
  NSString *label;
  int clen = (domainValues == nil) ? 0 : [domainValues size];
  for (int i = start; i < end; i++) {
    di = (RAREChartDataItem *) check_class_cast([series getItemExWithInt:i], [RAREChartDataItem class]);
    if (di != nil) {
      range = [di numberValue];
      domain = nil;
      if (domainIndex < clen) {
        RARERenderableDataItem *column = [((id<JavaUtilList>) nil_chk(domainValues)) getWithInt:domainIndex];
        if (column != nil) {
          switch (dataType) {
            case RAREaChartHandler_TYPE_NUMBER:
            domain = [JavaLangDouble valueOfWithDouble:[column doubleValue]];
            break;
            case RAREaChartHandler_TYPE_DATE:
            domain = [column getValue];
            break;
            default:
            domain = [column description];
            break;
          }
        }
      }
      domainIndex++;
      if (domain == nil) {
        switch (dataType) {
          case RAREaChartHandler_TYPE_NUMBER:
          domain = [di getDomainNumberValue];
          break;
          case RAREaChartHandler_TYPE_DATE:
          domain = [di getDomainValue];
          break;
          default:
          domain = [di getDomainString];
          break;
        }
      }
      if ((domain != nil) && (range != nil)) {
        label = nil;
        if (lt != nil) {
          switch ([lt ordinal]) {
            case RAREPlotInformation_LabelType_VALUES:
            label = [di description];
            break;
            case RAREPlotInformation_LabelType_LINKED_DATA:
            if ([di getLinkedData] != nil) {
              label = [nil_chk([di getLinkedData]) description];
            }
            break;
            case RAREPlotInformation_LabelType_TOOLTIPS:
            if ([di getTooltip] != nil) {
              label = [((id<JavaLangCharSequence>) nil_chk([di getTooltip])) sequenceDescription];
            }
            break;
            default:
            break;
          }
        }
        [data addValueWithRAREChartDataItem:di withJavaLangComparable:(id<JavaLangComparable>) check_protocol_cast(domain, @protocol(JavaLangComparable)) withNSNumber:range withNSString:label];
      }
    }
  }
  [data resolve];
  return data;
}

+ (int)getDataTypeWithRAREChartAxis:(RAREChartAxis *)axis {
  switch ([((RAREChartAxis *) nil_chk(axis)) getDomainType]) {
    case RARERenderableDataItem_TYPE_DATE:
    case RARERenderableDataItem_TYPE_DATETIME:
    case RARERenderableDataItem_TYPE_TIME:
    return RAREaChartHandler_TYPE_DATE;
    case RARERenderableDataItem_TYPE_INTEGER:
    case RARERenderableDataItem_TYPE_DECIMAL:
    return RAREaChartHandler_TYPE_NUMBER;
    default:
    return RAREaChartHandler_TYPE_STRING;
  }
}

+ (RAREUIColor *)getDefaultColorWithInt:(int)index {
  if (RAREaChartHandler_defaultColors_ == nil) {
    RAREaChartHandler_defaultColors_ = [RAREaChartHandler createDefaultColors];
  }
  index = index % (int) [((IOSObjectArray *) nil_chk(RAREaChartHandler_defaultColors_)) count];
  return IOSObjectArray_Get(RAREaChartHandler_defaultColors_, index);
}

+ (int)getLabelsModWithRAREaChartHandler_LabelDataArray:(IOSObjectArray *)list
                                              withFloat:(float)width
                                              withFloat:(float)pad {
  int len = (int) [((IOSObjectArray *) nil_chk(list)) count];
  int w = 0;
  for (int i = 0; i < len; i++) {
    w += ((RAREaChartHandler_LabelData *) nil_chk(IOSObjectArray_Get(list, i)))->width_ + pad;
  }
  if (w <= width) {
    return 0;
  }
  int mod = 1;
  while ((w > width) && (mod < len)) {
    mod++;
    w = [RAREaChartHandler getLabelsWidthWithRAREaChartHandler_LabelDataArray:list withInt:mod withFloat:pad];
  }
  return mod;
}

+ (RAREChartDefinition_ChartTypeEnum *)getSeriesChartTypeWithRAREChartDefinition:(RAREChartDefinition *)cd
                                                           withRAREChartDataItem:(RAREChartDataItem *)series {
  id o = [((RAREChartDataItem *) nil_chk(series)) getValueContext];
  RAREConverterContext *ctx = nil;
  if ([o isKindOfClass:[RAREConverterContext class]]) {
    ctx = (RAREConverterContext *) check_class_cast(o, [RAREConverterContext class]);
    o = [((RAREConverterContext *) nil_chk(ctx)) getUserObject];
  }
  if ([o isKindOfClass:[RAREChartDefinition_ChartTypeEnum class]]) {
    return (RAREChartDefinition_ChartTypeEnum *) o;
  }
  if (ctx != nil) {
    o = [ctx getName];
  }
  if ([o isKindOfClass:[NSString class]]) {
    @try {
      RAREChartDefinition_ChartTypeEnum *ct = [RAREChartDefinition_ChartTypeEnum valueOfWithNSString:[((NSString *) check_class_cast(o, [NSString class])) uppercaseStringWithJRELocale:[JavaUtilLocale US]]];
      if (ctx != nil) {
        [ctx setUserObjectWithId:ct];
      }
      return ct;
    }
    @catch (JavaLangException *ignore) {
    }
  }
  return [((RAREChartDefinition *) nil_chk(cd)) getChartType];
}

+ (RAREUIColor *)getSeriesFillColorWithRAREChartDataItem:(RAREChartDataItem *)series {
  id o = [((RAREChartDataItem *) nil_chk(series)) getCustomPropertyWithId:@"plot.shapes.fillColor"];
  if ([o isKindOfClass:[RAREUIColor class]]) {
    return (RAREUIColor *) check_class_cast(o, [RAREUIColor class]);
  }
  if ([o isKindOfClass:[NSString class]]) {
    return [RAREColorUtils getColorWithNSString:(NSString *) check_class_cast(o, [NSString class])];
  }
  return nil;
}

+ (RAREPlotInformation_LabelTypeEnum *)getSeriesLabelTypeWithRAREPlotInformation:(RAREPlotInformation *)pi
                                                           withRAREChartDataItem:(RAREChartDataItem *)series {
  id o = [((RAREChartDataItem *) nil_chk(series)) getCustomPropertyWithId:@"plot.labels"];
  if ([o isKindOfClass:[RAREPlotInformation_LabelTypeEnum class]]) {
    return (RAREPlotInformation_LabelTypeEnum *) o;
  }
  if ([o isKindOfClass:[NSString class]]) {
    @try {
      return [RAREPlotInformation_LabelTypeEnum valueOfWithNSString:[((NSString *) check_class_cast(o, [NSString class])) uppercaseStringWithJRELocale:[JavaUtilLocale US]]];
    }
    @catch (JavaLangException *ignore) {
    }
  }
  return (pi == nil) ? [RAREPlotInformation_LabelTypeEnum VALUES] : [pi getLabelType];
}

+ (float)getSeriesLineThicknessWithRAREChartDataItem:(RAREChartDataItem *)series
                                           withFloat:(float)def {
  id o = [((RAREChartDataItem *) nil_chk(series)) getCustomPropertyWithId:@"plot.lineThickness"];
  if ([o isKindOfClass:[NSNumber class]]) {
    return [((NSNumber *) check_class_cast(o, [NSNumber class])) floatValue];
  }
  if ([o isKindOfClass:[NSString class]]) {
    @try {
      return [RAREUTSNumber floatValueWithNSString:(NSString *) check_class_cast(o, [NSString class])];
    }
    @catch (JavaLangException *ignore) {
    }
  }
  return def;
}

+ (RAREUIColor *)getSeriesOutlineColorWithRAREChartDataItem:(RAREChartDataItem *)series {
  id o = [((RAREChartDataItem *) nil_chk(series)) getCustomPropertyWithId:@"plot.shapes.outlineColor"];
  if ([o isKindOfClass:[RAREUIColor class]]) {
    return (RAREUIColor *) check_class_cast(o, [RAREUIColor class]);
  }
  if ([o isKindOfClass:[NSString class]]) {
    return [RAREColorUtils getColorWithNSString:(NSString *) check_class_cast(o, [NSString class])];
  }
  RAREUIColor *bg = [series getBackground];
  if (bg != nil) {
    return bg;
  }
  id<RAREiPlatformComponentPainter> cp = [series getComponentPainter];
  return (cp == nil) ? nil : [cp getBackgroundColor];
}

+ (float)getSeriesOutlineLineThicknessWithRAREChartDataItem:(RAREChartDataItem *)series
                                                  withFloat:(float)def {
  id o = [((RAREChartDataItem *) nil_chk(series)) getCustomPropertyWithId:@"plot.outlineThickness"];
  if ([o isKindOfClass:[NSNumber class]]) {
    return [((NSNumber *) check_class_cast(o, [NSNumber class])) floatValue];
  }
  if ([o isKindOfClass:[NSString class]]) {
    @try {
      return [RAREUTSNumber floatValueWithNSString:(NSString *) check_class_cast(o, [NSString class])];
    }
    @catch (JavaLangException *ignore) {
    }
  }
  return def;
}

+ (RAREPlotInformation_ShapeStyleEnum *)getSeriesShapeStyleWithRAREPlotInformation:(RAREPlotInformation *)pi
                                                             withRAREChartDataItem:(RAREChartDataItem *)series {
  id o = [((RAREChartDataItem *) nil_chk(series)) getCustomPropertyWithId:@"plot.shapes"];
  if ([o isKindOfClass:[RAREPlotInformation_ShapeStyleEnum class]]) {
    return (RAREPlotInformation_ShapeStyleEnum *) o;
  }
  if ([o isKindOfClass:[NSString class]]) {
    @try {
      return [RAREPlotInformation_ShapeStyleEnum valueOfWithNSString:[((NSString *) check_class_cast(o, [NSString class])) uppercaseStringWithJRELocale:[JavaUtilLocale US]]];
    }
    @catch (JavaLangException *ignore) {
    }
  }
  return (pi == nil) ? [RAREPlotInformation_ShapeStyleEnum FILLED] : [pi getShapeStyle];
}

+ (void)remeasureLabelsWithRAREaChartHandler_LabelDataArray:(IOSObjectArray *)labels
                                      withRAREUIFontMetrics:(RAREUIFontMetrics *)fm
                                                    withInt:(int)textAngle {
  float angle = 0;
  int lineHeight = (int) [JavaLangMath ceilWithDouble:[((RAREUIFontMetrics *) nil_chk(fm)) getHeight]];
  RAREUIDimension *size = [[RAREUIDimension alloc] init];
  if (textAngle < 0) {
    textAngle = 360 + textAngle;
  }
  BOOL has90Degree = (textAngle == 90) || (textAngle == -90) || (textAngle == 270);
  BOOL hasAngle = (textAngle != 0) && (textAngle != 360) && (textAngle != 180) && !has90Degree;
  if (hasAngle && !has90Degree) {
    angle = (float) [JavaLangMath toRadiansWithDouble:textAngle];
  }
  int len = (int) [((IOSObjectArray *) nil_chk(labels)) count];
  for (int i = 0; i < len; i++) {
    RAREaChartHandler_LabelData *label = IOSObjectArray_Get(labels, i);
    int textWidth = [fm stringWidthWithNSString:((RAREaChartHandler_LabelData *) nil_chk(label))->label_];
    if (hasAngle) {
      [RAREaChartHandler calculateTextSizeWithFloat:textWidth withFloat:lineHeight withFloat:angle withRAREUIDimension:size];
    }
    else if (has90Degree) {
      size->width_ = lineHeight;
      size->height_ = textWidth;
    }
    else {
      size->width_ = textWidth;
      size->height_ = lineHeight;
    }
    label->width_ = size->width_;
    label->height_ = size->height_;
  }
}

+ (IOSObjectArray *)createDefaultColors {
  NSString *colors = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getStringWithNSString:@"Rare.Chart.defaultColors"];
  if ((colors != nil) && ([colors indexOf:','] != -1)) {
    id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:colors withChar:',' withBoolean:YES];
    int len = [((id<JavaUtilList>) nil_chk(list)) size];
    IOSObjectArray *a = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[RAREUIColor class]]];
    for (int i = 0; i < len; i++) {
      (void) IOSObjectArray_Set(a, i, [RAREUIColorHelper getColorWithNSString:[list getWithInt:i]]);
    }
    return a;
  }
  else {
    IOSObjectArray *a = [IOSObjectArray arrayWithLength:8 type:[IOSClass classWithClass:[RAREUIColor class]]];
    (void) IOSObjectArray_Set(a, 0, [RAREUIColor RED]);
    (void) IOSObjectArray_Set(a, 1, [RAREUIColor BLUE]);
    (void) IOSObjectArray_Set(a, 2, [RAREUIColor GREEN]);
    (void) IOSObjectArray_Set(a, 3, [RAREUIColor YELLOW]);
    (void) IOSObjectArray_Set(a, 4, [RAREUIColor MAGENTA]);
    (void) IOSObjectArray_Set(a, 5, [RAREUIColor ORANGE]);
    (void) IOSObjectArray_Set(a, 6, [RAREUIColor CYAN]);
    (void) IOSObjectArray_Set(a, 7, [RAREUIColor PINK]);
    return a;
  }
}

+ (int)getCalendarFieldWithRAREChartAxis_TimeUnitEnum:(RAREChartAxis_TimeUnitEnum *)tu {
  int field;
  switch ([tu ordinal]) {
    case RAREChartAxis_TimeUnit_MILLISECOND:
    field = JavaUtilCalendar_MILLISECOND;
    break;
    case RAREChartAxis_TimeUnit_SECOND:
    field = JavaUtilCalendar_SECOND;
    break;
    case RAREChartAxis_TimeUnit_MINUTE:
    field = JavaUtilCalendar_MINUTE;
    break;
    case RAREChartAxis_TimeUnit_HOUR:
    field = JavaUtilCalendar_HOUR;
    break;
    case RAREChartAxis_TimeUnit_WEEK:
    field = JavaUtilCalendar_WEEK_OF_YEAR;
    break;
    case RAREChartAxis_TimeUnit_MONTH:
    field = JavaUtilCalendar_MONTH;
    break;
    case RAREChartAxis_TimeUnit_YEAR:
    field = JavaUtilCalendar_YEAR;
    break;
    default:
    field = JavaUtilCalendar_DAY_OF_YEAR;
    break;
  }
  return field;
}

+ (int)getLabelsWidthWithRAREaChartHandler_LabelDataArray:(IOSObjectArray *)list
                                                  withInt:(int)mod
                                                withFloat:(float)pad {
  int len = (int) [((IOSObjectArray *) nil_chk(list)) count];
  int w = 0;
  for (int i = 0; i < len; i++) {
    if (i % mod == 0) {
      w += ((RAREaChartHandler_LabelData *) nil_chk(IOSObjectArray_Get(list, i)))->width_ + pad;
    }
  }
  return w;
}

+ (double)niceNumberWithDouble:(double)Value
                   withBoolean:(BOOL)Round {
  int exponent;
  double fraction;
  double niceFraction;
  exponent = (int) [JavaLangMath floorWithDouble:[JavaLangMath log10WithDouble:Value]];
  fraction = Value / [JavaLangMath powWithDouble:10 withDouble:exponent];
  if (Round) {
    if (fraction < 1.5) {
      niceFraction = 1.0;
    }
    else if (fraction < 3.0) {
      niceFraction = 2.0;
    }
    else if (fraction < 7.0) {
      niceFraction = 5.0;
    }
    else {
      niceFraction = 10.0;
    }
  }
  else {
    if (fraction <= 1.0) {
      niceFraction = 1.0;
    }
    else if (fraction <= 2.0) {
      niceFraction = 2.0;
    }
    else if (fraction <= 5.0) {
      niceFraction = 5.0;
    }
    else {
      niceFraction = 10.0;
    }
  }
  return niceFraction * [JavaLangMath powWithDouble:10 withDouble:exponent];
}

+ (BOOL)isSupportsMultipleRangeValues {
  return RAREaChartHandler_supportsMultipleRangeValues_;
}

+ (void)setSupportsMultipleRangeValuesWithBoolean:(BOOL)support {
  RAREaChartHandler_supportsMultipleRangeValues_ = support;
}

+ (void)initialize {
  if (self == [RAREaChartHandler class]) {
    RAREaChartHandler_LABELS_PADDING_ = [RAREScreenUtils PLATFORM_PIXELS_8];
  }
}

- (void)copyAllFieldsTo:(RAREaChartHandler *)other {
  [super copyAllFieldsTo:other];
  other->chartBackground_ = chartBackground_;
  other->chartFont_ = chartFont_;
  other->chartForeground_ = chartForeground_;
  other->gridColor_ = gridColor_;
  other->legendLabelColor_ = legendLabelColor_;
  other->legendLabelFont_ = legendLabelFont_;
  other->plotBackground_ = plotBackground_;
  other->plotLabelColor_ = plotLabelColor_;
  other->plotLabelFont_ = plotLabelFont_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createChartWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREiPlatformComponent", 0x401, NULL },
    { "createLabelDataWithRAREChartDefinition:withBoolean:withDouble:withDouble:withDouble:withDouble:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "createLabelsDataWithJavaUtilList:withRAREaChartViewer:withRAREiDataConverter:withId:withBoolean:withRAREUIFontMetrics:withInt:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "createNumericLabelsDataWithRAREChartDefinition:withDouble:withDouble:withDouble:withDouble:withBoolean:withDouble:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "createSeriesDataWithInt:withRAREChartDefinition:withInt:", NULL, "LRAREaChartHandler_SeriesData", 0x1, NULL },
    { "dataChangedWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREiPlatformComponent", 0x401, NULL },
    { "getAxisLabelColorWithRAREChartAxis:", NULL, "LRAREUIColor", 0x1, NULL },
    { "getAxisLabelFontWithRAREChartAxis:", NULL, "LRAREUIFont", 0x1, NULL },
    { "getAxisTitleColorWithRAREChartAxis:", NULL, "LRAREUIColor", 0x1, NULL },
    { "getAxisTitleFontWithRAREChartAxis:", NULL, "LRAREUIFont", 0x1, NULL },
    { "getChartFont", NULL, "LRAREUIFont", 0x1, NULL },
    { "getChartForeground", NULL, "LRAREUIColor", 0x1, NULL },
    { "getChartImageWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREUIImage", 0x401, NULL },
    { "getLegendComponentWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getPlotAreaSizeWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREUIDimension", 0x401, NULL },
    { "getTextColorWithRAREChartDefinition:", NULL, "LRAREUIColor", 0x1, NULL },
    { "getTextFontWithRAREChartDefinition:", NULL, "LRAREUIFont", 0x1, NULL },
    { "getTitleColorWithRARERenderableDataItem:", NULL, "LRAREUIColor", 0x1, NULL },
    { "getTitleFontWithRARERenderableDataItem:", NULL, "LRAREUIFont", 0x1, NULL },
    { "isLegendSeperate", NULL, "Z", 0x1, NULL },
    { "itemChangedWithRAREiPlatformComponent:withRAREChartDefinition:withRAREChartDataItem:", NULL, "V", 0x401, NULL },
    { "itemFromLocationWithRAREChartDefinition:withInt:withInt:", NULL, "LRAREChartDataItem", 0x401, NULL },
    { "setDomainLabelWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "V", 0x401, NULL },
    { "setDomainLabelsAngleWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "V", 0x401, NULL },
    { "setRangeLabelWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "V", 0x401, NULL },
    { "setShowDomainLabelsWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "V", 0x401, NULL },
    { "setShowPlotValuesWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "V", 0x401, NULL },
    { "setShowRangeLabelsWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "V", 0x401, NULL },
    { "unzoomWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "V", 0x401, NULL },
    { "updateRangeAxisWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "V", 0x401, NULL },
    { "updatesCompletedWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "V", 0x401, NULL },
    { "updatesPendingWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "V", 0x401, NULL },
    { "calculateSeriesesRangeWithRAREChartDefinition:withInt:withDoubleArray:withDoubleArray:", NULL, "V", 0x4, NULL },
    { "getGridColorWithRAREPlotInformation:", NULL, "LRAREUIColor", 0x4, NULL },
    { "getGridStrokeWithRAREPlotInformation:", NULL, "LRAREUIStroke", 0x4, NULL },
    { "setupDefaultsWithBoolean:", NULL, "V", 0x4, NULL },
    { "areAllTheSameTypeWithRAREChartDefinition:", NULL, "Z", 0x9, NULL },
    { "createLabelsDataWithJavaUtilList:withRAREaChartViewer:withRAREiDataConverter:withId:withBoolean:withRAREUIFontMetrics:withInt:withDouble:withDouble:withBoolean:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "createSeriesDataWithInt:withRAREChartDataItem:withJavaUtilList:withInt:withInt:withRAREPlotInformation_LabelTypeEnum:", NULL, "LRAREaChartHandler_SeriesData", 0x9, NULL },
    { "getDefaultColorWithInt:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getSeriesChartTypeWithRAREChartDefinition:withRAREChartDataItem:", NULL, "LRAREChartDefinition_ChartTypeEnum", 0x9, NULL },
    { "getSeriesFillColorWithRAREChartDataItem:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getSeriesLabelTypeWithRAREPlotInformation:withRAREChartDataItem:", NULL, "LRAREPlotInformation_LabelTypeEnum", 0x9, NULL },
    { "getSeriesOutlineColorWithRAREChartDataItem:", NULL, "LRAREUIColor", 0x9, NULL },
    { "getSeriesShapeStyleWithRAREPlotInformation:withRAREChartDataItem:", NULL, "LRAREPlotInformation_ShapeStyleEnum", 0x9, NULL },
    { "createDefaultColors", NULL, "LIOSObjectArray", 0xc, NULL },
    { "getCalendarFieldWithRAREChartAxis_TimeUnitEnum:", NULL, "I", 0xc, NULL },
    { "getLabelsWidthWithRAREaChartHandler_LabelDataArray:withInt:withFloat:", NULL, "I", 0x8, NULL },
    { "niceNumberWithDouble:withBoolean:", NULL, "D", 0x8, NULL },
    { "isSupportsMultipleRangeValues", NULL, "Z", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "TYPE_DATE_", NULL, 0x19, "I" },
    { "TYPE_NUMBER_", NULL, 0x19, "I" },
    { "TYPE_STRING_", NULL, 0x19, "I" },
    { "defaultColors_", NULL, 0xa, "LIOSObjectArray" },
    { "chartFont_", NULL, 0x4, "LRAREUIFont" },
    { "chartForeground_", NULL, 0x4, "LRAREUIColor" },
    { "chartBackground_", NULL, 0x4, "LRAREUIColor" },
    { "gridColor_", NULL, 0x4, "LRAREUIColor" },
    { "legendLabelColor_", NULL, 0x4, "LRAREUIColor" },
    { "legendLabelFont_", NULL, 0x4, "LRAREUIFont" },
    { "plotBackground_", NULL, 0x4, "LRAREUIColor" },
    { "plotLabelColor_", NULL, 0x4, "LRAREUIColor" },
    { "plotLabelFont_", NULL, 0x4, "LRAREUIFont" },
    { "supportsMultipleRangeValues_", NULL, 0xc, "Z" },
    { "LABELS_PADDING_", NULL, 0x9, "I" },
  };
  static J2ObjcClassInfo _RAREaChartHandler = { "aChartHandler", "com.appnativa.rare.ui.chart", NULL, 0x401, 50, methods, 15, fields, 0, NULL};
  return &_RAREaChartHandler;
}

@end
@implementation RAREaChartHandler_NoChartHandler

- (id)init {
  return [super init];
}

- (id<RAREiPlatformComponent>)createChartWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                            withRAREChartDefinition:(RAREChartDefinition *)cd {
  return [self getErrorPanelWithRAREiPlatformComponent:chartPanel];
}

- (id<RAREiPlatformComponent>)dataChangedWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                            withRAREChartDefinition:(RAREChartDefinition *)cd {
  return [self getErrorPanelWithRAREiPlatformComponent:chartPanel];
}

- (RAREUIImage *)getChartImageWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                 withRAREChartDefinition:(RAREChartDefinition *)cd {
  return nil;
}

- (RAREUIDimension *)getPlotAreaSizeWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                                       withRAREChartDefinition:(RAREChartDefinition *)cd {
  return [[RAREUIDimension alloc] init];
}

- (void)itemChangedWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                      withRAREChartDefinition:(RAREChartDefinition *)cd
                        withRAREChartDataItem:(RAREChartDataItem *)item {
}

- (RAREChartDataItem *)itemFromLocationWithRAREChartDefinition:(RAREChartDefinition *)cd
                                                       withInt:(int)x
                                                       withInt:(int)y {
  return nil;
}

- (void)setChartForegroundWithRAREUIColor:(RAREUIColor *)chartForeground {
}

- (void)setDomainLabelWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                         withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)setDomainLabelsAngleWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartComponent
                               withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)setRangeLabelWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                        withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)setShowDomainLabelsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                              withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)setShowPlotValuesWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                            withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)setShowRangeLabelsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                             withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)unzoomWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                 withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)updateRangeAxisWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                          withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)updatesCompletedWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                           withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (void)updatesPendingWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel
                         withRAREChartDefinition:(RAREChartDefinition *)cd {
}

- (id<RAREiPlatformComponent>)getErrorPanelWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)chartPanel {
  if (chartPanel == nil) {
    chartPanel = [[RARECartesianPanel alloc] init];
  }
  if (chartFont_ != nil) {
    [((id<RAREiPlatformComponent>) nil_chk(chartPanel)) setFontWithRAREUIFont:chartFont_];
  }
  return chartPanel;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createChartWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "dataChangedWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getChartImageWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREUIImage", 0x1, NULL },
    { "getPlotAreaSizeWithRAREiPlatformComponent:withRAREChartDefinition:", NULL, "LRAREUIDimension", 0x1, NULL },
    { "itemFromLocationWithRAREChartDefinition:withInt:withInt:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "getErrorPanelWithRAREiPlatformComponent:", NULL, "LRAREiPlatformComponent", 0x2, NULL },
  };
  static J2ObjcClassInfo _RAREaChartHandler_NoChartHandler = { "NoChartHandler", "com.appnativa.rare.ui.chart", "aChartHandler", 0x9, 6, methods, 0, NULL, 0, NULL};
  return &_RAREaChartHandler_NoChartHandler;
}

@end
@implementation RAREaChartHandler_SeriesData

- (id)initWithNSString:(NSString *)legend
               withInt:(int)size
withRAREPlotInformation_LabelTypeEnum:(RAREPlotInformation_LabelTypeEnum *)lt {
  if (self = [super init]) {
    showPointLabels_ = YES;
    labelType_ = [RAREPlotInformation_LabelTypeEnum VALUES];
    rangeValues_ = [[JavaUtilArrayList alloc] initWithInt:size];
    domainValues_ = [[JavaUtilArrayList alloc] initWithInt:size];
    dataItems_ = [[JavaUtilArrayList alloc] initWithInt:size];
    self->legend_ = legend;
    domainMap_ = [[JavaUtilLinkedHashMap alloc] init];
    self->labelType_ = (lt == nil) ? [RAREPlotInformation_LabelTypeEnum VALUES] : lt;
  }
  return self;
}

- (id)initWithNSString:(NSString *)legend
withRAREPlotInformation_LabelTypeEnum:(RAREPlotInformation_LabelTypeEnum *)lt
withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)data {
  if (self = [super init]) {
    showPointLabels_ = YES;
    labelType_ = [RAREPlotInformation_LabelTypeEnum VALUES];
    int len = [((JavaUtilLinkedHashMap *) nil_chk(data)) size];
    rangeValues_ = [[JavaUtilArrayList alloc] initWithInt:len];
    domainValues_ = [[JavaUtilArrayList alloc] initWithInt:len];
    dataItems_ = [[JavaUtilArrayList alloc] initWithInt:len];
    self->legend_ = legend;
    self->domainMap_ = data;
    self->labelType_ = (lt == nil) ? [RAREPlotInformation_LabelTypeEnum VALUES] : lt;
    [self resolve];
  }
  return self;
}

- (void)addValueWithRAREChartDataItem:(RAREChartDataItem *)item
               withJavaLangComparable:(id<JavaLangComparable>)domain
                         withNSNumber:(NSNumber *)value
                         withNSString:(NSString *)label {
  if ([RAREaChartHandler supportsMultipleRangeValues]) {
    NSNumber *ov = [((JavaUtilLinkedHashMap *) nil_chk(domainMap_)) getWithId:domain];
    if (ov != nil) {
      if ([ov isKindOfClass:[RAREaChartHandler_NumberListNumber class]]) {
        [((RAREaChartHandler_NumberListNumber *) check_class_cast(ov, [RAREaChartHandler_NumberListNumber class])) addNumberWithNSNumber:value];
      }
      else {
        RAREaChartHandler_NumberListNumber *list = [[RAREaChartHandler_NumberListNumber alloc] init];
        [list addNumberWithNSNumber:ov];
        [list addNumberWithNSNumber:value];
        (void) [domainMap_ putWithId:domain withId:list];
      }
    }
    else {
      (void) [domainMap_ putWithId:domain withId:value];
    }
  }
  else {
    (void) [((JavaUtilLinkedHashMap *) nil_chk(domainMap_)) putWithId:domain withId:value];
  }
  [((id<JavaUtilList>) nil_chk(dataItems_)) addWithId:item];
}

- (void)resolve {
  [((id<JavaUtilList>) nil_chk(domainValues_)) clear];
  [((id<JavaUtilList>) nil_chk(rangeValues_)) clear];
  [domainValues_ addAllWithJavaUtilCollection:[((JavaUtilLinkedHashMap *) nil_chk(domainMap_)) keySet]];
  [rangeValues_ addAllWithJavaUtilCollection:[domainMap_ values]];
}

- (void)clearValuesWithBoolean:(BOOL)rangeOnly {
  if (rangeValues_ != nil) {
    [rangeValues_ clear];
  }
  if (!rangeOnly) {
    if (domainValues_ != nil) {
      [domainValues_ clear];
    }
    if (domainMap_ != nil) {
      [domainMap_ clear];
    }
  }
}

- (IOSObjectArray *)createLabelsWithRAREaChartViewer:(RAREaChartViewer *)cv
                              withRAREiDataConverter:(id<RAREiDataConverter>)cvt
                                              withId:(id)context
                                         withBoolean:(BOOL)domain {
  int len = [((id<JavaUtilList>) nil_chk(domainValues_)) size];
  IOSObjectArray *labels = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[NSString class]]];
  id<JavaUtilList> list = domain ? ((id) domainValues_) : ((id) rangeValues_);
  NSString *s;
  for (int i = 0; i < len; i++) {
    if (cvt != nil) {
      s = [((id<JavaLangCharSequence>) nil_chk([cvt objectToStringWithRAREiWidget:cv withId:[list getWithInt:i] withId:context])) sequenceDescription];
    }
    else {
      s = [nil_chk([list getWithInt:i]) description];
    }
    (void) IOSObjectArray_Set(labels, i, s);
  }
  return labels;
}

- (void)dispose {
  if (domainMap_ != nil) {
    [domainMap_ clear];
  }
  if (dataItems_ != nil) {
    [dataItems_ clear];
  }
  linkedData_ = nil;
}

- (RAREChartDataItem *)getDataItemWithInt:(int)index {
  return [((id<JavaUtilList>) nil_chk(dataItems_)) getWithInt:index];
}

- (NSString *)getPieChartLabelWithInt:(int)index
                         withNSString:(NSString *)format {
  NSString *label = [self getPointLabelWithInt:index withNSString:nil];
  if ([((NSString *) nil_chk(label)) sequenceLength] == 0) {
    return label;
  }
  double total = pieTotal_;
  if (total == 0) {
    for (NSNumber * __strong num in nil_chk(rangeValues_)) {
      total += [((NSNumber *) nil_chk(num)) doubleValue];
    }
    pieTotal_ = total;
  }
  NSNumber *num = [((id<JavaUtilList>) nil_chk(rangeValues_)) getWithInt:index];
  double val = (num == nil) ? 0 : [num doubleValue];
  double percent = (val / total);
  if (percentFormat_ == nil) {
    percentFormat_ = [JavaTextNumberFormat getPercentInstanceWithJavaUtilLocale:[JavaUtilLocale getDefault]];
    totalFormat_ = [JavaTextNumberFormat getNumberInstanceWithJavaUtilLocale:[JavaUtilLocale getDefault]];
  }
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:4 type:[IOSClass classWithClass:[NSObject class]]];
  (void) IOSObjectArray_Set(a, 0, [((RAREChartDataItem *) nil_chk([((id<JavaUtilList>) nil_chk(dataItems_)) getWithInt:index])) getDomainString]);
  (void) IOSObjectArray_Set(a, 1, label);
  (void) IOSObjectArray_Set(a, 2, [((JavaTextNumberFormat *) nil_chk(percentFormat_)) formatWithId:[JavaLangDouble valueOfWithDouble:percent]]);
  (void) IOSObjectArray_Set(a, 3, [((JavaTextNumberFormat *) nil_chk(totalFormat_)) formatWithId:[JavaLangDouble valueOfWithDouble:total]]);
  return [JavaTextMessageFormat formatWithNSString:format withNSObjectArray:a];
}

- (NSString *)getPointLabelWithInt:(int)index
                      withNSString:(NSString *)format {
  NSString *label = @"";
  if (showPointLabels_) {
    RAREChartDataItem *di = [((id<JavaUtilList>) nil_chk(dataItems_)) getWithInt:index];
    switch ([labelType_ ordinal]) {
      case RAREPlotInformation_LabelType_VALUES:
      label = [((RAREChartDataItem *) nil_chk(di)) description];
      break;
      case RAREPlotInformation_LabelType_LINKED_DATA:
      if ([((RAREChartDataItem *) nil_chk(di)) getLinkedData] != nil) {
        label = [nil_chk([di getLinkedData]) description];
      }
      break;
      case RAREPlotInformation_LabelType_TOOLTIPS:
      if ([((RAREChartDataItem *) nil_chk(di)) getTooltip] != nil) {
        label = [((id<JavaLangCharSequence>) nil_chk([di getTooltip])) sequenceDescription];
      }
      break;
      default:
      break;
    }
    if (format != nil) {
      label = [RAREaPlatformHelper formatWithNSString:format withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ label, legend_ } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
    }
  }
  return label;
}

- (NSString *)description {
  return (legend_ == nil) ? [super description] : legend_;
}

- (void)copyAllFieldsTo:(RAREaChartHandler_SeriesData *)other {
  [super copyAllFieldsTo:other];
  other->chartType_ = chartType_;
  other->dataIndex_ = dataIndex_;
  other->dataItems_ = dataItems_;
  other->domainMap_ = domainMap_;
  other->domainValues_ = domainValues_;
  other->fillColor_ = fillColor_;
  other->isNumberRange_ = isNumberRange_;
  other->labelType_ = labelType_;
  other->legend_ = legend_;
  other->linkedData_ = linkedData_;
  other->outlineColor_ = outlineColor_;
  other->percentFormat_ = percentFormat_;
  other->pieTotal_ = pieTotal_;
  other->rangeValues_ = rangeValues_;
  other->seriesIndex_ = seriesIndex_;
  other->showPointLabels_ = showPointLabels_;
  other->totalFormat_ = totalFormat_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createLabelsWithRAREaChartViewer:withRAREiDataConverter:withId:withBoolean:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getDataItemWithInt:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "getPieChartLabelWithInt:withNSString:", NULL, "LNSString", 0x1, NULL },
    { "getPointLabelWithInt:withNSString:", NULL, "LNSString", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "rangeValues_", NULL, 0x1, "LJavaUtilList" },
    { "domainValues_", NULL, 0x1, "LJavaUtilList" },
    { "showPointLabels_", NULL, 0x1, "Z" },
    { "dataItems_", NULL, 0x1, "LJavaUtilList" },
    { "domainMap_", NULL, 0x1, "LJavaUtilLinkedHashMap" },
    { "legend_", NULL, 0x1, "LNSString" },
    { "linkedData_", NULL, 0x1, "LNSObject" },
    { "isNumberRange_", NULL, 0x1, "Z" },
    { "chartType_", NULL, 0x1, "LRAREChartDefinition_ChartTypeEnum" },
    { "seriesIndex_", NULL, 0x1, "I" },
    { "dataIndex_", NULL, 0x1, "I" },
    { "labelType_", NULL, 0x1, "LRAREPlotInformation_LabelTypeEnum" },
    { "outlineColor_", NULL, 0x1, "LRAREUIColor" },
    { "fillColor_", NULL, 0x1, "LRAREUIColor" },
  };
  static J2ObjcClassInfo _RAREaChartHandler_SeriesData = { "SeriesData", "com.appnativa.rare.ui.chart", "aChartHandler", 0x9, 4, methods, 14, fields, 0, NULL};
  return &_RAREaChartHandler_SeriesData;
}

@end
@implementation RAREaChartHandler_aChartInfo

- (void)addDomainValuesWithJavaUtilList:(id<JavaUtilList>)list {
  if ((domainValues_ == nil) || [domainValues_ isEmpty]) {
    domainValues_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:list];
    if (domainMap_ == nil) {
      domainMap_ = [[JavaUtilHashSet alloc] initWithJavaUtilCollection:list];
    }
    else {
      [domainMap_ clear];
      [domainMap_ addAllWithJavaUtilCollection:list];
    }
  }
  else {
    if ((domainMap_ == nil) || [domainMap_ isEmpty]) {
      domainMap_ = [[JavaUtilHashSet alloc] initWithJavaUtilCollection:domainValues_];
      domainValues_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:domainValues_];
    }
    for (id<JavaLangComparable> __strong o in nil_chk(list)) {
      if ([((JavaUtilHashSet *) nil_chk(domainMap_)) addWithId:o]) {
        [domainValues_ addWithId:o];
      }
    }
  }
}

- (IOSObjectArray *)createLabelDataWithRAREChartDefinition:(RAREChartDefinition *)cd
                                     withRAREUIFontMetrics:(RAREUIFontMetrics *)fm
                                               withBoolean:(BOOL)convert {
  if (domainValues_ == nil) {
    return nil;
  }
  id<RAREiDataConverter> cvt = convert ? [((RAREChartAxis *) nil_chk([((RAREChartDefinition *) nil_chk(cd)) getDomainAxis])) getDomainDataConverter] : nil;
  id ctx = convert ? [((RAREChartAxis *) nil_chk([((RAREChartDefinition *) nil_chk(cd)) getDomainAxis])) getDomainContext] : nil;
  int textAngle = [((RAREChartAxis *) nil_chk([((RAREChartDefinition *) nil_chk(cd)) getDomainAxis])) getAngle];
  labelData_ = [RAREaChartHandler createLabelsDataWithJavaUtilList:domainValues_ withRAREaChartViewer:[cd getChartViewer] withRAREiDataConverter:cvt withId:ctx withBoolean:YES withRAREUIFontMetrics:fm withInt:textAngle withDouble:0 withDouble:1 withBoolean:NO];
  return labelData_;
}

- (void)dispose {
  [self reset];
}

- (void)popularSeriesDataAndCaluclateRangesWithRAREaChartHandler:(RAREaChartHandler *)ch
                                         withRAREChartDefinition:(RAREChartDefinition *)cd {
  [self reset];
  id<JavaUtilList> serieses = [((RAREChartDefinition *) nil_chk(cd)) getSeries];
  id<JavaUtilList> sd = nil;
  int dataType = [RAREaChartHandler getDataTypeWithRAREChartAxis:[cd getDomainAxis]];
  domainType_ = dataType;
  int len = (serieses == nil) ? 0 : [serieses size];
  BOOL category = [self usesCategoryAxisAlways];
  if (len > 0) {
    int start = [cd getStartColumn];
    int eend = [cd getEndColumn];
    int end = 0;
    RAREChartAxis *ai = [cd getDomainAxis];
    {
      RAREChartAxis_TimeUnitEnum *tu;
      switch (dataType) {
        case RAREaChartHandler_TYPE_DATE:
        tu = [((RAREChartAxis *) nil_chk(ai)) getTimeUnit];
        if ((tu == nil) || (tu == [RAREChartAxis_TimeUnitEnum NONE])) {
          category = YES;
        }
        break;
        case RAREaChartHandler_TYPE_NUMBER:
        break;
        default:
        category = YES;
        break;
      }
    }
    categoryDomain_ = category;
    ai = [cd getRangeAxis];
    RAREPlotInformation *pi = [cd getPlotInformation];
    id<JavaUtilList> domainValues = [cd getDomainValues];
    sd = [[JavaUtilArrayList alloc] initWithInt:len];
    for (int i = 0; i < len; i++) {
      RAREChartDataItem *series = (RAREChartDataItem *) check_class_cast([((id<JavaUtilList>) nil_chk(serieses)) getWithInt:i], [RAREChartDataItem class]);
      if ([((RAREChartDataItem *) nil_chk(series)) isEmpty]) {
        continue;
      }
      RAREPlotInformation_LabelTypeEnum *lt = [RAREaChartHandler getSeriesLabelTypeWithRAREPlotInformation:pi withRAREChartDataItem:series];
      if (eend != 0) {
        end = eend + 1;
      }
      else {
        end = [series size];
      }
      if ([cd isAutoSort]) {
        [series sortWithJavaUtilComparator:[[RAREaChartHandler_aChartInfo_$1 alloc] init]];
      }
      RAREaChartHandler_SeriesData *data = [RAREaChartHandler createSeriesDataWithInt:dataType withRAREChartDataItem:series withJavaUtilList:domainValues withInt:start withInt:end withRAREPlotInformation_LabelTypeEnum:lt];
      if ((data != nil) && (data->domainValues_ != nil)) {
        data->seriesIndex_ = i;
        data->dataIndex_ = [sd size];
        data->chartType_ = [RAREaChartHandler getSeriesChartTypeWithRAREChartDefinition:cd withRAREChartDataItem:series];
        data->legend_ = [series description];
        switch ([data->chartType_ ordinal]) {
          case RAREChartDefinition_ChartType_RANGE_AREA:
          case RAREChartDefinition_ChartType_RANGE_BAR:
          data->isNumberRange_ = YES;
          break;
          default:
          break;
        }
        [sd addWithId:data];
        if (category) {
          [self addDomainValuesWithJavaUtilList:data->domainValues_];
        }
      }
    }
  }
  seriesData_ = ((sd == nil) || [sd isEmpty]) ? nil : sd;
  if (seriesData_ != nil) {
    [self updateRangeBoundsWithRAREaChartHandler:ch withRAREChartDefinition:cd];
    if ((domainMap_ != nil) && ![domainMap_ isEmpty]) {
      if (domainType_ != RAREaChartHandler_TYPE_STRING) {
        [JavaUtilCollections sortWithJavaUtilList:domainValues_];
      }
    }
    if (category) {
      [self updateCategorDomainValues];
    }
  }
}

- (BOOL)usesCategoryAxisAlways {
  return NO;
}

- (void)reset {
  if (seriesData_ != nil) {
    for (RAREaChartHandler_SeriesData * __strong d in seriesData_) {
      [((RAREaChartHandler_SeriesData *) nil_chk(d)) dispose];
    }
  }
  seriesData_ = nil;
  domainValues_ = nil;
  domainMap_ = nil;
  xAxisValues_ = nil;
  yAxisValues_ = nil;
  xIncrementFixed_ = YES;
  yIncrementFixed_ = YES;
  categoryDomain_ = NO;
}

- (void)setShowPointLabelsWithBoolean:(BOOL)show {
  if (seriesData_ != nil) {
    for (RAREaChartHandler_SeriesData * __strong data in seriesData_) {
      ((RAREaChartHandler_SeriesData *) nil_chk(data))->showPointLabels_ = show;
    }
  }
}

- (RAREaChartHandler_SeriesData *)updateSeriesWithRAREChartDefinition:(RAREChartDefinition *)cd
                                                withRAREChartDataItem:(RAREChartDataItem *)series {
  RAREaChartHandler_SeriesData *data = nil;
  int len = (seriesData_ == nil) ? 0 : [seriesData_ size];
  int index = (len == 0) ? -1 : [((RAREChartDefinition *) nil_chk(cd)) findSeriesIndexWithRAREChartDataItem:series];
  int dataIndex = -1;
  if (index != -1) {
    for (int i = 0; i < len; i++) {
      RAREaChartHandler_SeriesData *sd = [((id<JavaUtilList>) nil_chk(seriesData_)) getWithInt:i];
      if (((RAREaChartHandler_SeriesData *) nil_chk(sd))->seriesIndex_ == index) {
        data = sd;
        dataIndex = i;
        break;
      }
    }
  }
  if (data != nil) {
    int start = [((RAREChartDefinition *) nil_chk(cd)) getStartColumn];
    int eend = [cd getEndColumn];
    int end = 0;
    RAREPlotInformation_LabelTypeEnum *lt = [RAREaChartHandler getSeriesLabelTypeWithRAREPlotInformation:[cd getPlotInformation] withRAREChartDataItem:series];
    if (eend != 0) {
      end = eend + 1;
    }
    else {
      end = [((RAREChartDataItem *) nil_chk(series)) size];
    }
    if ([cd isAutoSort]) {
      [((RAREChartDataItem *) nil_chk(series)) sortWithJavaUtilComparator:[[RAREaChartHandler_aChartInfo_$2 alloc] init]];
    }
    data = [RAREaChartHandler createSeriesDataWithInt:domainType_ withRAREChartDataItem:series withJavaUtilList:[cd getDomainValues] withInt:start withInt:end withRAREPlotInformation_LabelTypeEnum:lt];
    if ((data != nil) && (data->domainValues_ != nil)) {
      data->seriesIndex_ = index;
      data->dataIndex_ = dataIndex;
      data->legend_ = (NSString *) check_class_cast([((RAREChartDataItem *) nil_chk(series)) getValue], [NSString class]);
      (void) [((id<JavaUtilList>) nil_chk(seriesData_)) setWithInt:dataIndex withId:data];
      if (categoryDomain_) {
        [self addDomainValuesWithJavaUtilList:data->domainValues_];
      }
    }
    else {
      (void) [((id<JavaUtilList>) nil_chk(seriesData_)) removeWithInt:dataIndex];
    }
  }
  return data;
}

- (void)updateCategorDomainValues {
  id<JavaUtilList> list = domainValues_;
  int len = (seriesData_ == nil) ? 0 : [seriesData_ size];
  if ((len == 0) || (list == nil) || [list isEmpty]) {
    return;
  }
  for (int i = 0; i < len; i++) {
    RAREaChartHandler_SeriesData *data = [((id<JavaUtilList>) nil_chk(seriesData_)) getWithInt:i];
    id<JavaUtilList> dv = ((RAREaChartHandler_SeriesData *) nil_chk(data))->domainValues_;
    if (dv == domainValues_) {
      dv = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:dv];
      data->domainValues_ = dv;
    }
    int dlen = (dv == nil) ? 0 : [dv size];
    for (int n = 0; n < dlen; n++) {
      int j = [((id<JavaUtilList>) nil_chk(list)) indexOfWithId:[((id<JavaUtilList>) nil_chk(dv)) getWithInt:n]];
      if (j != -1) {
        (void) [dv setWithInt:n withId:[JavaLangInteger valueOfWithInt:j]];
      }
      else {
        [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:@"!!!!BUG in updateCategorDomainValues!!!!!"];
      }
    }
  }
}

- (void)updateRangeBoundsWithRAREaChartHandler:(RAREaChartHandler *)ch
                       withRAREChartDefinition:(RAREChartDefinition *)cd {
  IOSDoubleArray *yrange = [IOSDoubleArray arrayWithLength:3];
  IOSDoubleArray *xrange = nil;
  (*IOSDoubleArray_GetRef(yrange, 0)) = JavaLangDouble_MAX_VALUE - 1;
  (*IOSDoubleArray_GetRef(yrange, 1)) = 0;
  (*IOSDoubleArray_GetRef(yrange, 2)) = 0;
  double ymin = IOSDoubleArray_Get(yrange, 0);
  double ymax = IOSDoubleArray_Get(yrange, 1);
  double xmin = JavaLangDouble_MAX_VALUE - 1;
  double xmax = 0;
  xrange = [IOSDoubleArray arrayWithLength:3];
  (*IOSDoubleArray_GetRef(xrange, 0)) = JavaLangDouble_MAX_VALUE - 1;
  (*IOSDoubleArray_GetRef(xrange, 1)) = 0;
  (*IOSDoubleArray_GetRef(xrange, 2)) = 0;
  int len = (seriesData_ == nil) ? 0 : [seriesData_ size];
  double d;
  for (int i = 0; i < len; i++) {
    RAREaChartHandler_SeriesData *data = [((id<JavaUtilList>) nil_chk(seriesData_)) getWithInt:i];
    id<JavaUtilList> nums = ((RAREaChartHandler_SeriesData *) nil_chk(data))->rangeValues_;
    int nlen = (nums == nil) ? 0 : [nums size];
    for (int n = 0; n < nlen; n++) {
      NSNumber *num = [((id<JavaUtilList>) nil_chk(nums)) getWithInt:n];
      if ([num isKindOfClass:[RAREUTNumberRange class]]) {
        RAREUTNumberRange *r = (RAREUTNumberRange *) check_class_cast(num, [RAREUTNumberRange class]);
        d = [((NSNumber *) nil_chk([((RAREUTNumberRange *) nil_chk(r)) getLowValue])) doubleValue];
        ymin = [JavaLangMath minWithDouble:d withDouble:ymin];
        ymax = [JavaLangMath maxWithDouble:d withDouble:ymax];
        d = [((NSNumber *) nil_chk([r getHighValue])) doubleValue];
        ymin = [JavaLangMath minWithDouble:d withDouble:ymin];
        ymax = [JavaLangMath maxWithDouble:d withDouble:ymax];
      }
      else {
        d = [((NSNumber *) nil_chk(num)) doubleValue];
        ymin = [JavaLangMath minWithDouble:d withDouble:ymin];
        ymax = [JavaLangMath maxWithDouble:d withDouble:ymax];
      }
    }
    if (!categoryDomain_) {
      id<JavaUtilList> doms = data->domainValues_;
      int dlen = (doms == nil) ? 0 : [doms size];
      for (int n = 0; n < dlen; n++) {
        id<JavaLangComparable> c = [((id<JavaUtilList>) nil_chk(doms)) getWithInt:n];
        if ([(id) c isKindOfClass:[JavaUtilDate class]]) {
          d = [((JavaUtilDate *) check_class_cast(c, [JavaUtilDate class])) getTime];
        }
        else {
          d = [((NSNumber *) check_class_cast(c, [NSNumber class])) doubleValue];
        }
        xmin = [JavaLangMath minWithDouble:d withDouble:xmin];
        xmax = [JavaLangMath maxWithDouble:d withDouble:xmax];
      }
    }
  }
  (*IOSDoubleArray_GetRef(yrange, 0)) = ymin;
  (*IOSDoubleArray_GetRef(yrange, 1)) = ymax;
  if (!categoryDomain_) {
    (*IOSDoubleArray_GetRef(xrange, 0)) = xmin;
    (*IOSDoubleArray_GetRef(xrange, 1)) = xmax;
  }
  else {
    (*IOSDoubleArray_GetRef(xrange, 0)) = 0;
    (*IOSDoubleArray_GetRef(xrange, 1)) = (domainValues_ == nil) ? 0 : [domainValues_ size];
  }
  [((RAREaChartHandler *) nil_chk(ch)) calculateSeriesesRangeWithRAREChartDefinition:cd withInt:domainType_ withDoubleArray:xrange withDoubleArray:yrange];
  xIncrementFixed_ = [((RAREChartAxis *) nil_chk([((RAREChartDefinition *) nil_chk(cd)) getDomainAxis])) getIncrement] != 0;
  RAREChartAxis_TimeUnitEnum *tu = [((RAREChartAxis *) nil_chk([cd getDomainAxis])) getTimeUnit];
  if ((tu != nil) && (tu != [RAREChartAxis_TimeUnitEnum NONE])) {
    xIncrementFixed_ = YES;
  }
  yIncrementFixed_ = [((RAREChartAxis *) nil_chk([cd getRangeAxis])) getIncrement] != 0;
  if (!xIncrementFixed_ && (IOSDoubleArray_Get(xrange, 2) > 1)) {
    (*IOSDoubleArray_GetRef(xrange, 2)) = 1;
  }
  if (!yIncrementFixed_ && (IOSDoubleArray_Get(yrange, 2) > 1)) {
    (*IOSDoubleArray_GetRef(yrange, 2)) = 1;
  }
  xAxisValues_ = xrange;
  yAxisValues_ = yrange;
}

- (id)init {
  if (self = [super init]) {
    xIncrementFixed_ = YES;
    yIncrementFixed_ = YES;
  }
  return self;
}

- (void)copyAllFieldsTo:(RAREaChartHandler_aChartInfo *)other {
  [super copyAllFieldsTo:other];
  other->categoryDomain_ = categoryDomain_;
  other->domainMap_ = domainMap_;
  other->domainType_ = domainType_;
  other->domainValues_ = domainValues_;
  other->labelData_ = labelData_;
  other->seriesData_ = seriesData_;
  other->xAxisValues_ = xAxisValues_;
  other->xIncrementFixed_ = xIncrementFixed_;
  other->yAxisValues_ = yAxisValues_;
  other->yIncrementFixed_ = yIncrementFixed_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createLabelDataWithRAREChartDefinition:withRAREUIFontMetrics:withBoolean:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "usesCategoryAxisAlways", NULL, "Z", 0x4, NULL },
    { "updateSeriesWithRAREChartDefinition:withRAREChartDataItem:", NULL, "LRAREaChartHandler_SeriesData", 0x1, NULL },
    { "updateCategorDomainValues", NULL, "V", 0x4, NULL },
    { "updateRangeBoundsWithRAREaChartHandler:withRAREChartDefinition:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "domainType_", NULL, 0x1, "I" },
    { "xAxisValues_", NULL, 0x1, "LIOSDoubleArray" },
    { "yAxisValues_", NULL, 0x1, "LIOSDoubleArray" },
    { "xIncrementFixed_", NULL, 0x1, "Z" },
    { "yIncrementFixed_", NULL, 0x1, "Z" },
    { "domainValues_", NULL, 0x1, "LJavaUtilList" },
    { "domainMap_", NULL, 0x1, "LJavaUtilHashSet" },
    { "seriesData_", NULL, 0x1, "LJavaUtilList" },
    { "labelData_", NULL, 0x1, "LIOSObjectArray" },
    { "categoryDomain_", NULL, 0x1, "Z" },
  };
  static J2ObjcClassInfo _RAREaChartHandler_aChartInfo = { "aChartInfo", "com.appnativa.rare.ui.chart", "aChartHandler", 0x40c, 5, methods, 10, fields, 0, NULL};
  return &_RAREaChartHandler_aChartInfo;
}

@end
@implementation RAREaChartHandler_aChartInfo_$1

- (int)compareWithId:(id)t
              withId:(id)t1 {
  return [((id<JavaLangComparable>) check_protocol_cast([((RAREChartDataItem *) check_class_cast(t, [RAREChartDataItem class])) getDomainValue], @protocol(JavaLangComparable))) compareToWithId:([((RAREChartDataItem *) check_class_cast(t1, [RAREChartDataItem class])) getDomainValue])];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _RAREaChartHandler_aChartInfo_$1 = { "$1", "com.appnativa.rare.ui.chart", "aChartHandler$aChartInfo", 0x8000, 0, NULL, 0, NULL, 0, NULL};
  return &_RAREaChartHandler_aChartInfo_$1;
}

@end
@implementation RAREaChartHandler_aChartInfo_$2

- (int)compareWithId:(id)t
              withId:(id)t1 {
  return [((id<JavaLangComparable>) check_protocol_cast([((RAREChartDataItem *) check_class_cast(t, [RAREChartDataItem class])) getDomainValue], @protocol(JavaLangComparable))) compareToWithId:([((RAREChartDataItem *) check_class_cast(t1, [RAREChartDataItem class])) getDomainValue])];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _RAREaChartHandler_aChartInfo_$2 = { "$2", "com.appnativa.rare.ui.chart", "aChartHandler$aChartInfo", 0x8000, 0, NULL, 0, NULL, 0, NULL};
  return &_RAREaChartHandler_aChartInfo_$2;
}

@end
@implementation RAREaChartHandler_NumberListNumber

- (double)doubleValue {
  return [((id<JavaUtilList>) nil_chk(numbers_)) isEmpty] ? 0 : [((NSNumber *) nil_chk([numbers_ getWithInt:0])) doubleValue];
}

- (float)floatValue {
  return [((id<JavaUtilList>) nil_chk(numbers_)) isEmpty] ? 0 : [((NSNumber *) nil_chk([numbers_ getWithInt:0])) floatValue];
}

- (int)intValue {
  return [((id<JavaUtilList>) nil_chk(numbers_)) isEmpty] ? 0 : [((NSNumber *) nil_chk([numbers_ getWithInt:0])) intValue];
}

- (long long int)longLongValue {
  return [((id<JavaUtilList>) nil_chk(numbers_)) isEmpty] ? 0 : [((NSNumber *) nil_chk([numbers_ getWithInt:0])) longLongValue];
}

- (NSString *)description {
  return [((id<JavaUtilList>) nil_chk(numbers_)) isEmpty] ? @"0" : [((NSNumber *) nil_chk([numbers_ getWithInt:0])) description];
}

- (id<JavaUtilList>)getNumbers {
  return numbers_;
}

- (void)addNumberWithNSNumber:(NSNumber *)num {
  [((id<JavaUtilList>) nil_chk(numbers_)) addWithId:num];
}

- (IOSFloatArray *)floatValues {
  int len = [((id<JavaUtilList>) nil_chk(numbers_)) size];
  IOSFloatArray *a = [IOSFloatArray arrayWithLength:len];
  if (len > 0) {
    for (int i = 0; i < len; i++) {
      (*IOSFloatArray_GetRef(a, i)) = [((NSNumber *) nil_chk([numbers_ getWithInt:i])) floatValue];
    }
  }
  return a;
}

- (IOSDoubleArray *)doubleValues {
  int len = [((id<JavaUtilList>) nil_chk(numbers_)) size];
  IOSDoubleArray *a = [IOSDoubleArray arrayWithLength:len];
  if (len > 0) {
    for (int i = 0; i < len; i++) {
      (*IOSDoubleArray_GetRef(a, i)) = [((NSNumber *) nil_chk([numbers_ getWithInt:i])) doubleValue];
    }
  }
  return a;
}

- (id)init {
  if (self = [super init]) {
    numbers_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(RAREaChartHandler_NumberListNumber *)other {
  [super copyAllFieldsTo:other];
  other->numbers_ = numbers_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getNumbers", NULL, "LJavaUtilList", 0x1, NULL },
    { "floatValues", NULL, "LIOSFloatArray", 0x1, NULL },
    { "doubleValues", NULL, "LIOSDoubleArray", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "numbers_", NULL, 0x4, "LJavaUtilList" },
  };
  static J2ObjcClassInfo _RAREaChartHandler_NumberListNumber = { "NumberListNumber", "com.appnativa.rare.ui.chart", "aChartHandler", 0x9, 3, methods, 1, fields, 0, NULL};
  return &_RAREaChartHandler_NumberListNumber;
}

@end
