//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-charts/com/appnativa/rare/viewer/aChartViewer.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/NumberContext.h"
#include "com/appnativa/rare/converters/NumberConverter.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iExceptionHandler.h"
#include "com/appnativa/rare/iPlatform.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/spot/Chart.h"
#include "com/appnativa/rare/spot/DataItem.h"
#include "com/appnativa/rare/spot/EmptyText.h"
#include "com/appnativa/rare/spot/Font.h"
#include "com/appnativa/rare/spot/ItemDescription.h"
#include "com/appnativa/rare/spot/Margin.h"
#include "com/appnativa/rare/spot/Plot.h"
#include "com/appnativa/rare/spot/Viewer.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/UIBorderHelper.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIStroke.h"
#include "com/appnativa/rare/ui/aWidgetListener.h"
#include "com/appnativa/rare/ui/chart/ChartAxis.h"
#include "com/appnativa/rare/ui/chart/ChartDataItem.h"
#include "com/appnativa/rare/ui/chart/ChartDefinition.h"
#include "com/appnativa/rare/ui/chart/PlotInformation.h"
#include "com/appnativa/rare/ui/chart/aChartHandler.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/MouseEvent.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/util/DataParser.h"
#include "com/appnativa/rare/util/EmptyTextItem.h"
#include "com/appnativa/rare/viewer/aChartViewer.h"
#include "com/appnativa/rare/viewer/aViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/widget/aPlatformWidget.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTInteger.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTReal.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/FilterableList.h"
#include "com/appnativa/util/NumberRange.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/iFilterableList.h"
#include "java/lang/CharSequence.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/ThreadLocal.h"
#include "java/text/ParseException.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@implementation RAREaChartViewer

- (id)init {
  return [self initRAREaChartViewerWithRAREiContainer:nil];
}

- (id)initRAREaChartViewerWithRAREiContainer:(id<RAREiContainer>)parent {
  if (self = [super initWithRAREiContainer:parent]) {
    widgetType_ = [RAREiWidget_WidgetTypeEnum Chart];
    columnCount_ = -1;
  }
  return self;
}

- (id)initWithRAREiContainer:(id<RAREiContainer>)parent {
  return [self initRAREaChartViewerWithRAREiContainer:parent];
}

- (BOOL)addWithId:(RARERenderableDataItem *)e {
  RAREChartDataItem *di = (RAREChartDataItem *) check_class_cast(e, [RAREChartDataItem class]);
  [((RAREChartDataItem *) nil_chk(di)) setItemTypeWithRAREChartDataItem_ItemTypeEnum:[RAREChartDataItem_ItemTypeEnum SERIES]];
  return [super addWithId:e];
}

- (RAREChartDataItem *)addAnnotationWithNSString:(NSString *)annotation
                                        withChar:(unichar)separator {
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk([RAREaWidget perThreadScanner])) get];
  [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:annotation];
  NSString *domain = [sc nextTokenWithChar:separator withBoolean:YES withBoolean:NO];
  RAREUTSNumber *vnum = [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithNSString:[sc nextTokenWithChar:separator withBoolean:YES withBoolean:NO]]) makeImmutable];
  RAREChartDataItem *di = [[RAREChartDataItem alloc] initWithId:vnum withInt:RARERenderableDataItem_TYPE_DECIMAL withId:nil withRAREiPlatformIcon:nil withRAREUIColor:nil withId:domain];
  NSString *s = [sc getLeftOver];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    [di setTitleWithNSString:s];
  }
  if (chartDefinition_ != nil) {
    [chartDefinition_ addAnnotationWithRAREChartDataItem:di];
  }
  return di;
}

- (RAREChartDataItem *)addDomainMarkerWithNSString:(NSString *)marker
                                          withChar:(unichar)separator {
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk([RAREaWidget perThreadScanner])) get];
  [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:marker];
  NSString *lnum = [sc nextTokenWithChar:separator withBoolean:YES withBoolean:NO];
  NSString *unum = [sc nextTokenWithChar:separator withBoolean:YES withBoolean:NO];
  RAREChartDataItem *di = [[RAREChartDataItem alloc] initWithId:lnum withInt:RARERenderableDataItem_TYPE_DECIMAL withId:nil withRAREiPlatformIcon:nil withRAREUIColor:nil withId:unum];
  NSString *s = [sc getLeftOver];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    [di setTitleWithNSString:s];
  }
  if (chartDefinition_ != nil) {
    [chartDefinition_ addDomainMarkerWithRAREChartDataItem:di];
  }
  return di;
}

- (RAREChartDataItem *)addDomainMarkerWithId:(id)lower
                                      withId:(id)upper
                                withNSString:(NSString *)title {
  RAREChartDataItem *di = [[RAREChartDataItem alloc] initWithId:lower withInt:RARERenderableDataItem_TYPE_DECIMAL withId:nil withRAREiPlatformIcon:nil withRAREUIColor:nil withId:upper];
  [di setTitleWithNSString:title];
  if (chartDefinition_ != nil) {
    [chartDefinition_ addDomainMarkerWithRAREChartDataItem:di];
  }
  return di;
}

- (RARERenderableDataItem *)addDomainValueWithId:(id)value {
  if (chartDefinition_ != nil) {
    RARERenderableDataItem *di;
    if ([value isKindOfClass:[RARERenderableDataItem class]]) {
      di = (RARERenderableDataItem *) check_class_cast(value, [RARERenderableDataItem class]);
    }
    else {
      di = [self createItemWithId:value];
    }
    [chartDefinition_ addDomainValueWithRARERenderableDataItem:di];
    return di;
  }
  return nil;
}

- (RARERenderableDataItem *)addDomainValueWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (chartDefinition_ != nil) {
    [chartDefinition_ addDomainValueWithRARERenderableDataItem:item];
  }
  return item;
}

- (void)addParsedRowWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  @synchronized (widgetType_) {
    if ([self isDisposed]) {
      return;
    }
    RARERenderableDataItem *di;
    int len = [((RARERenderableDataItem *) nil_chk(row)) getItemCount];
    if (aggregate_) {
      if (len == 0) {
        return;
      }
      di = [row getItemWithInt:0];
      [row copyExWithRARERenderableDataItem:di];
      (void) [row removeWithInt:0];
    }
    [self fixSeriesItemsWithRARERenderableDataItem:row];
    [self addWithId:row];
  }
}

- (RAREChartDataItem *)addRangeMarkerWithNSString:(NSString *)marker
                                     withNSString:(NSString *)separator {
  return [self addRangeMarkerWithNSString:marker withChar:[((NSString *) nil_chk(separator)) charAtWithInt:0]];
}

- (RAREChartDataItem *)addRangeMarkerWithNSString:(NSString *)marker
                                         withChar:(unichar)separator {
  RAREUTCharScanner *sc = [((JavaLangThreadLocal *) nil_chk([RAREaWidget perThreadScanner])) get];
  [((RAREUTCharScanner *) nil_chk(sc)) resetWithNSString:marker];
  RAREUTSNumber *lnum = [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithNSString:[sc nextTokenWithChar:separator withBoolean:YES withBoolean:NO withBoolean:YES]]) makeImmutable];
  RAREUTSNumber *unum = [((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithNSString:[sc nextTokenWithChar:separator withBoolean:YES withBoolean:NO withBoolean:YES]]) makeImmutable];
  RAREChartDataItem *di = [[RAREChartDataItem alloc] initWithId:lnum withInt:RARERenderableDataItem_TYPE_DECIMAL withId:nil withRAREiPlatformIcon:nil withRAREUIColor:nil withId:unum];
  NSString *s = [sc getLeftOver];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    [di setTitleWithNSString:[s trim]];
  }
  if (chartDefinition_ != nil) {
    [chartDefinition_ addRangeMarkerWithRAREChartDataItem:di];
  }
  return di;
}

- (RAREChartDataItem *)addRangeMarkerWithDouble:(double)lower
                                     withDouble:(double)upper
                                   withNSString:(NSString *)title {
  RAREChartDataItem *di = [[RAREChartDataItem alloc] initWithId:[JavaLangDouble valueOfWithDouble:lower] withInt:RARERenderableDataItem_TYPE_DECIMAL withId:nil withRAREiPlatformIcon:nil withRAREUIColor:nil withId:[JavaLangDouble valueOfWithDouble:upper]];
  [di setTitleWithNSString:title];
  [di setDomainTypeWithInt:RARERenderableDataItem_TYPE_DECIMAL];
  if (chartDefinition_ != nil) {
    [chartDefinition_ addRangeMarkerWithRAREChartDataItem:di];
  }
  return di;
}

- (RAREChartDataItem *)addSeriesWithRAREChartDataItem:(RAREChartDataItem *)series {
  [self fixSeriesItemsWithRARERenderableDataItem:series];
  [self addWithId:series];
  return series;
}

- (RAREChartDataItem *)addSubTitleWithRARERenderableDataItem:(RARERenderableDataItem *)title {
  RAREChartDataItem *di;
  if ([title isKindOfClass:[RAREChartDataItem class]]) {
    di = (RAREChartDataItem *) check_class_cast(title, [RAREChartDataItem class]);
  }
  else {
    di = [[RAREChartDataItem alloc] init];
    [di copyExWithRARERenderableDataItem:title];
  }
  if (chartDefinition_ != nil) {
    [chartDefinition_ addSubtitleWithRAREChartDataItem:di];
  }
  return di;
}

- (RAREChartDataItem *)addSubTitleWithNSString:(NSString *)title {
  RAREChartDataItem *di = [[RAREChartDataItem alloc] initWithId:title withInt:RARERenderableDataItem_TYPE_STRING withId:nil withRAREiPlatformIcon:nil withRAREUIColor:nil withId:nil];
  [di setDomainTypeWithInt:RARERenderableDataItem_TYPE_DECIMAL];
  if (chartDefinition_ != nil) {
    [chartDefinition_ addSubtitleWithRAREChartDataItem:di];
  }
  return di;
}

- (void)clearChart {
  if (chartDefinition_ != nil) {
    [chartDefinition_ clear];
  }
}

- (void)clearChartData {
  if (chartDefinition_ != nil) {
    [chartDefinition_ clearData];
  }
}

- (void)clearContents {
  [self clearChart];
}

- (void)configureWithRARESPOTViewer:(RARESPOTViewer *)vcfg {
  [self configureExWithRARESPOTChart:(RARESPOTChart *) check_class_cast(vcfg, [RARESPOTChart class])];
  [self fireConfigureEventWithRARESPOTWidget:vcfg withNSString:[RAREiConstants EVENT_CONFIGURE]];
  [self handleDataURLWithRARESPOTWidget:vcfg];
}

- (RAREChartDefinition *)createChartDefinitionWithRARESPOTChart:(RARESPOTChart *)cfg {
  RAREChartAxis *domainAxis;
  RAREChartAxis *rangeAxis;
  RAREChartDefinition_ChartTypeEnum *chartType;
  NSString *s = [((RARESPOTChart_CChartType *) nil_chk(((RARESPOTChart *) nil_chk(cfg))->chartType_)) stringValue];
  s = [((NSString *) nil_chk(s)) uppercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]];
  chartType = [RAREChartDefinition_ChartTypeEnum valueOfWithNSString:s];
  @try {
    rangeAxis = [self createAxisInfoWithBoolean:YES withRARESPOTDataItem:cfg->rangeAxis_];
    [((RAREChartAxis *) nil_chk(rangeAxis)) handleAttributesWithRAREiWidget:self withISPOTElement:cfg->rangeAxis_];
    domainAxis = [self createAxisInfoWithBoolean:NO withRARESPOTDataItem:cfg->domainAxis_];
    [((RAREChartAxis *) nil_chk(domainAxis)) handleAttributesWithRAREiWidget:self withISPOTElement:cfg->domainAxis_];
    switch ([chartType ordinal]) {
      case RAREChartDefinition_ChartType_RANGE_AREA:
      case RAREChartDefinition_ChartType_RANGE_BAR:
      if ([rangeAxis getDomainContext] == nil) {
        [rangeAxis setDomainConverterClassWithIOSClass:[IOSClass classWithClass:[RARENumberConverter class]]];
        [rangeAxis setDomainContextWithId:[RARENumberContext RANGE_CONTEXT]];
      }
      break;
      default:
      break;
    }
  }
  @catch (JavaTextParseException *ex) {
    @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:ex];
  }
  BOOL vertical = ![((SPOTBoolean *) nil_chk(cfg->horizontal_)) booleanValue];
  RAREChartDefinition *cd = [[RAREChartDefinition alloc] initWithRAREaChartViewer:self withRAREChartDefinition_ChartTypeEnum:chartType withBoolean:vertical withRAREChartAxis:domainAxis withRAREChartAxis:rangeAxis];
  [cd setShowLegendsWithBoolean:[((SPOTBoolean *) nil_chk(cfg->showLegends_)) booleanValue]];
  [cd setShowTooltipsWithBoolean:[((SPOTBoolean *) nil_chk(cfg->showTooltips_)) booleanValue]];
  [cd setAutoSortWithBoolean:[((SPOTBoolean *) nil_chk(cfg->autoSort_)) booleanValue]];
  [cd setAllowZoomingWithBoolean:[((SPOTBoolean *) nil_chk(cfg->zoomingAllowed_)) booleanValue]];
  [cd setShowPlotLabelsWithBoolean:[((SPOTBoolean *) nil_chk(cfg->showPlotLabels_)) booleanValue]];
  if ([((SPOTPrintableString *) nil_chk(cfg->bgColor_)) spot_valueWasSet]) {
    [cd setBackgroundColorWithRAREUIColor:[RAREColorUtils getBackgroundColorWithSPOTPrintableString:cfg->bgColor_]];
  }
  if ([((SPOTPrintableString *) nil_chk(cfg->fgColor_)) spot_valueWasSet]) {
    [cd setForegroundColorWithRAREUIColor:[RAREColorUtils getColorWithNSString:[cfg->fgColor_ getValue]]];
  }
  SPOTSet *set = [RAREDataParser resolveSetWithRAREiWidget:self withSPOTSet:[((RARESPOTDataItem *) nil_chk(cfg->domainAxis_)) getSubItems] withIOSClass:[IOSClass classWithClass:[RARESPOTDataItem class]]];
  int len = (set == nil) ? 0 : [set getCount];
  int type = [((RAREChartAxis *) nil_chk(domainAxis)) getType];
  for (int i = 0; i < len; i++) {
    [cd addDomainValueWithRARERenderableDataItem:[self createColumnWithRARESPOTDataItem:(RARESPOTDataItem *) check_class_cast([((SPOTSet *) nil_chk(set)) getExWithInt:i], [RARESPOTDataItem class]) withInt:type]];
  }
  s = [((SPOTPrintableString *) nil_chk(cfg->dataURL_)) spot_getAttributeWithNSString:@"aggregate"];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    aggregate_ = [s equalsIgnoreCase:@"true"];
  }
  if ([cfg getEmptyText] != nil) {
    [cd setEmptyTextItemWithRAREEmptyTextItem:[[RAREEmptyTextItem alloc] initWithRAREiWidget:self withRARESPOTEmptyText:[cfg getEmptyText]]];
  }
  [cd setPlotInformationWithRAREPlotInformation:[self createPlotInfoWithRARESPOTPlot:[cfg getPlot]]];
  [cd setAnnotationsWithJavaUtilList:[self createListWithSPOTSet:[cfg getAnnotations]]];
  [cd setDomainMarkersWithJavaUtilList:[self createListWithSPOTSet:[cfg getDomainMarkers]]];
  [cd setRangeMarkersWithJavaUtilList:[self createListWithSPOTSet:[cfg getRangeMarkers]]];
  [cd setSubTitlesWithJavaUtilList:[self createListWithSPOTSet:[cfg getSubTitles]]];
  if ([cfg getChartTitle] != nil) {
    [cd setTitleWithRARERenderableDataItem:[super createItemWithId:[cfg getChartTitle]]];
  }
  [cd setDraw3DWithBoolean:[((SPOTBoolean *) nil_chk(cfg->draw3D_)) booleanValue]];
  [cd setMouseHandlerWithRAREiMouseHandler:[[RAREaChartViewer_$1 alloc] initWithRAREaChartViewer:self]];
  return cd;
}

- (RARERenderableDataItem *)createItemWithId:(id)value {
  if ([value isKindOfClass:[RAREChartDataItem class]]) {
    return (RAREChartDataItem *) check_class_cast(value, [RAREChartDataItem class]);
  }
  RAREChartDataItem *di = [[RAREChartDataItem alloc] init];
  if ([value isKindOfClass:[RARERenderableDataItem class]]) {
    [di copyExWithRARERenderableDataItem:(RARERenderableDataItem *) check_class_cast(value, [RARERenderableDataItem class])];
  }
  else if ([value isKindOfClass:[RARESPOTDataItem class]]) {
    (void) [RAREaWidget populateItemWithRAREiWidget:self withRARESPOTDataItem:(RARESPOTDataItem *) check_class_cast(value, [RARESPOTDataItem class]) withRARERenderableDataItem:di];
  }
  else if ([value isKindOfClass:[RARESPOTItemDescription class]]) {
    RAREColumn *c = [self createColumnWithRARESPOTItemDescription:(RARESPOTItemDescription *) check_class_cast(value, [RARESPOTItemDescription class])];
    [di copyExWithRARERenderableDataItem:c];
    [di setTitleWithNSString:(NSString *) check_class_cast([((RAREColumn *) nil_chk(c)) getColumnTitle], [NSString class])];
    id val = [di getValue];
    RAREUTNumberRange *range = nil;
    if ([val isKindOfClass:[RAREUTNumberRange class]]) {
      range = (RAREUTNumberRange *) check_class_cast(val, [RAREUTNumberRange class]);
    }
    else if ([val isKindOfClass:[NSString class]]) {
      range = [RAREUTNumberRange valueOfWithNSString:(NSString *) check_class_cast(val, [NSString class])];
    }
    if (range != nil) {
      [di setDomainValueWithId:[range getLowValue]];
      [di setValueWithId:[range getHighValue]];
    }
  }
  else {
    [di setValueWithId:value];
  }
  [di setTypeWithInt:RARERenderableDataItem_TYPE_DECIMAL];
  return di;
}

- (RARERenderableDataItem *)createItemWithId:(id)value
                                     withInt:(int)type
                                      withId:(id)data
                                      withId:(id)icon
                                      withId:(id)color {
  NSString *s = (NSString *) check_class_cast(value, [NSString class]);
  NSString *domain = nil;
  if (s != nil) {
    int n = [s lastIndexOf:','];
    if (n != -1) {
      domain = [s substring:0 endIndex:n];
      s = [s substring:n + 1];
    }
  }
  id<RAREiPlatformIcon> ic = nil;
  if ([icon conformsToProtocol: @protocol(RAREiPlatformIcon)]) {
    ic = (id<RAREiPlatformIcon>) check_protocol_cast(icon, @protocol(RAREiPlatformIcon));
  }
  else if ([icon isKindOfClass:[NSString class]]) {
    ic = [self getIconWithNSString:(NSString *) check_class_cast(icon, [NSString class]) withNSString:nil];
  }
  RAREUIColor *c = nil;
  if ([color isKindOfClass:[RAREUIColor class]]) {
    c = (RAREUIColor *) check_class_cast(color, [RAREUIColor class]);
  }
  else if ([color isKindOfClass:[NSString class]]) {
    c = [self getColorWithNSString:(NSString *) check_class_cast(color, [NSString class])];
  }
  return [[RAREChartDataItem alloc] initWithId:s withInt:RARERenderableDataItem_TYPE_DECIMAL withId:data withRAREiPlatformIcon:ic withRAREUIColor:c withId:domain];
}

- (RARERenderableDataItem *)createItemExWithRARESPOTDataItem:(RARESPOTDataItem *)item {
  RAREChartDataItem *ci = [[RAREChartDataItem alloc] init];
  (void) [RAREaWidget populateItemWithRAREiWidget:self withRARESPOTDataItem:item withRARERenderableDataItem:ci];
  NSString *s = (NSString *) check_class_cast([ci getValue], [NSString class]);
  [ci setTypeWithInt:RARERenderableDataItem_TYPE_DECIMAL];
  NSString *domain = nil;
  if (s != nil) {
    int n = [s lastIndexOf:','];
    if (n != -1) {
      domain = [s substring:0 endIndex:n];
      s = [s substring:n + 1];
      [ci setValueWithId:s];
      [ci setDomainValueWithId:domain];
    }
  }
  return ci;
}

- (RARERenderableDataItem *)createRowWithInt:(int)capacity
                                 withBoolean:(BOOL)populate {
  RAREChartDataItem *row = [[RAREChartDataItem alloc] init];
  [row ensureCapacityWithInt:capacity];
  if (populate) {
    for (int i = 0; i < capacity; i++) {
      RAREChartDataItem *di = [[RAREChartDataItem alloc] init];
      [row addWithId:di];
    }
  }
  return row;
}

+ (RAREChartDataItem *)createSeriesWithNSString:(NSString *)name {
  RAREChartDataItem *di = [[RAREChartDataItem alloc] init];
  [di setValueWithId:name];
  [di setTypeWithInt:RARERenderableDataItem_TYPE_STRING];
  return di;
}

+ (RAREChartDataItem *)createSeriesValueWithId:(id)domain
                                        withId:(id)range {
  RAREChartDataItem *ci = [[RAREChartDataItem alloc] init];
  id o;
  [ci setTypeWithInt:RARERenderableDataItem_TYPE_DECIMAL];
  if ([range isKindOfClass:[RARERenderableDataItem class]]) {
    RARERenderableDataItem *r = (RARERenderableDataItem *) check_class_cast(range, [RARERenderableDataItem class]);
    [ci setTooltipWithJavaLangCharSequence:[((RARERenderableDataItem *) nil_chk(r)) getTooltip]];
    [ci setLinkedDataWithId:[r getLinkedData]];
    o = [r getValue];
    if ([o isKindOfClass:[NSNumber class]]) {
      [ci setValueWithId:o];
    }
    else {
      [ci setValueWithId:[nil_chk(range) description]];
    }
  }
  else {
    [ci setValueWithId:range];
  }
  if ([domain isKindOfClass:[RARERenderableDataItem class]]) {
    o = [((RARERenderableDataItem *) check_class_cast(domain, [RARERenderableDataItem class])) getValue];
    [ci setDomainValueWithId:o];
  }
  else {
    [ci setDomainValueWithId:domain];
  }
  return ci;
}

- (void)dispose {
  if (chartHandler_ != nil) {
    [chartHandler_ disposeWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
    if (chartDefinition_ != nil) {
      [chartDefinition_ clear];
    }
  }
  [super dispose];
  chartComponent_ = nil;
  chartHandler_ = nil;
  chartDefinition_ = nil;
}

- (void)itemChangedWithRAREChartDataItem:(RAREChartDataItem *)item {
  if ((chartHandler_ != nil) && (chartDefinition_ != nil)) {
    [chartHandler_ itemChangedWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_ withRAREChartDataItem:item];
  }
}

- (RAREChartDataItem *)itemFromLocationWithInt:(int)x
                                       withInt:(int)y {
  return [((RAREaChartHandler *) nil_chk(chartHandler_)) itemFromLocationWithRAREChartDefinition:chartDefinition_ withInt:x withInt:y];
}

- (void)rebuildChart {
  if (![RAREPlatform isUIThread]) {
    [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREaChartViewer_$2 alloc] initWithRAREaChartViewer:self]];
    return;
  }
  [self refreshItemsWithBoolean:YES];
}

- (void)refreshItems {
  if (![RAREPlatform isUIThread]) {
    [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREaChartViewer_$3 alloc] initWithRAREaChartViewer:self]];
    return;
  }
  [self refreshItemsWithBoolean:NO];
}

- (void)refreshItemsWithBoolean:(BOOL)rebuild {
  if (chartDefinition_ != nil) {
    [chartDefinition_ setSeriesWithJavaUtilList:[self getItems]];
    if (rebuild) {
      (void) [((RAREaChartHandler *) nil_chk(chartHandler_)) createChartWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
    }
    else {
      (void) [((RAREaChartHandler *) nil_chk(chartHandler_)) dataChangedWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
    }
    if (formComponent_ != chartComponent_) {
      [((id<RAREiPlatformComponent>) nil_chk(formComponent_)) revalidate];
      [formComponent_ repaint];
    }
  }
}

- (void)sortSeriesDatapointsWithBoolean:(BOOL)descending {
  int len = [self size];
  if (len < 2) {
    return;
  }
  id<JavaUtilComparator> c = [[RAREaChartViewer_$4 alloc] initWithBoolean:descending];
  for (int i = 0; i < len; i++) {
    [((RARERenderableDataItem *) nil_chk([self getWithInt:i])) sortWithJavaUtilComparator:c];
  }
}

- (RAREChartDataItem *)toChartSeriesWithRARERenderableDataItem:(RARERenderableDataItem *)item
                                                   withBoolean:(BOOL)firstIsSeriesName {
  if ([item isKindOfClass:[RAREChartDataItem class]]) {
    return (RAREChartDataItem *) check_class_cast(item, [RAREChartDataItem class]);
  }
  RAREChartDataItem *di = [[RAREChartDataItem alloc] init];
  int len = [((RARERenderableDataItem *) nil_chk(item)) getItemCount];
  int pos = 0;
  if (firstIsSeriesName) {
    if (len == 0) {
      return di;
    }
    RARERenderableDataItem *rdi = [item getItemWithInt:0];
    [di copyExWithRARERenderableDataItem:rdi];
    pos = 1;
  }
  else {
    di = [[RAREChartDataItem alloc] init];
    [di copyExWithRARERenderableDataItem:item];
  }
  [di setTypeWithInt:RARERenderableDataItem_TYPE_STRING];
  [di setValueContextWithId:nil];
  [di setConverterClassWithIOSClass:nil];
  if (len > 0) {
    id<JavaUtilList> items = [item getItems];
    for (int i = pos; i < len; i++) {
      [di addWithId:[self createItemWithId:[((id<JavaUtilList>) nil_chk(items)) getWithInt:i]]];
    }
  }
  return di;
}

- (void)updatesCompleted {
  if ((chartHandler_ != nil) && (chartDefinition_ != nil)) {
    [chartHandler_ updatesCompletedWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
  }
}

- (void)updatesPending {
  if ((chartHandler_ != nil) && (chartDefinition_ != nil)) {
    [chartHandler_ updatesPendingWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
  }
}

- (void)setChartDefinitionWithRAREChartDefinition:(RAREChartDefinition *)cd {
  chartDefinition_ = cd;
  chartComponent_ = [((RAREaChartHandler *) nil_chk(chartHandler_)) createChartWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
}

- (void)setDomainLabelWithNSString:(NSString *)label {
  if (chartDefinition_ != nil) {
    [((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) setLabelWithNSString:label];
  }
  if ((chartHandler_ != nil) && (chartComponent_ != nil)) {
    [chartHandler_ setDomainLabelWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
  }
}

- (void)setDomainLabelAngelWithInt:(int)angle {
  if ((chartDefinition_ != nil) && ([((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) getAngle] != angle)) {
    [((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) setAngleWithInt:angle];
  }
  if (chartComponent_ != nil) {
    [((RAREaChartHandler *) nil_chk(chartHandler_)) setDomainLabelAngelWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
  }
}

- (void)setDomainLabelsVisibleWithBoolean:(BOOL)visible {
  if (chartDefinition_ != nil) {
    [((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) setLabelsVisibleWithBoolean:visible];
    [((RAREaChartHandler *) nil_chk(chartHandler_)) setShowDomainLabelsWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
  }
}

- (void)setHorizontalScrollingEnabledWithBoolean:(BOOL)enable {
  [((RAREaChartHandler *) nil_chk(chartHandler_)) setHorizontalScrollingEnabledWithRAREiPlatformComponent:chartComponent_ withBoolean:enable];
}

- (void)setOrientationWithBoolean:(BOOL)vertical {
  [((RAREChartDefinition *) nil_chk(chartDefinition_)) setOrientationWithBoolean:vertical];
}

- (void)setPlotValuesVisibleWithBoolean:(BOOL)visible {
  if (chartDefinition_ != nil) {
    if ([chartDefinition_ isShowPlotLabels] != visible) {
      [chartDefinition_ setShowPlotLabelsWithBoolean:visible];
      [((RAREaChartHandler *) nil_chk(chartHandler_)) setShowPlotValuesWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
    }
  }
}

- (void)setRangeBoundsWithId:(id)lower
                      withId:(id)upper
          withJavaLangDouble:(JavaLangDouble *)increment {
  if (chartDefinition_ != nil) {
    [((RAREChartAxis *) nil_chk([chartDefinition_ getRangeAxis])) setBoundsWithId:lower withId:upper withJavaLangDouble:increment];
    if (chartComponent_ != nil) {
      [((RAREaChartHandler *) nil_chk(chartHandler_)) updateRangeAxisWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
    }
  }
}

- (void)setRangeLabelWithNSString:(NSString *)label {
  if (chartDefinition_ != nil) {
    [((RAREChartAxis *) nil_chk([chartDefinition_ getRangeAxis])) setLabelWithNSString:label];
  }
}

- (void)setRangeLabelsVisibleWithBoolean:(BOOL)visible {
  if (chartDefinition_ != nil) {
    [((RAREChartAxis *) nil_chk([chartDefinition_ getRangeAxis])) setLabelsVisibleWithBoolean:visible];
    [((RAREaChartHandler *) nil_chk(chartHandler_)) setShowRangeLabelsWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
  }
}

- (void)setVerticalScrollingEnabledWithBoolean:(BOOL)enable {
  [((RAREaChartHandler *) nil_chk(chartHandler_)) setVerticalScrollingEnabledWithRAREiPlatformComponent:chartComponent_ withBoolean:enable];
}

- (RAREChartDefinition *)getChartDefinition {
  return chartDefinition_;
}

- (RAREChartAxis *)getDomainAxis {
  return (chartDefinition_ == nil) ? nil : [chartDefinition_ getDomainAxis];
}

- (RARERenderableDataItem *)getDomainValueWithInt:(int)col {
  if (chartDefinition_ != nil) {
    return [chartDefinition_ getDomainValueWithInt:col];
  }
  return nil;
}

- (RAREChartAxis *)getRangeAxis {
  return (chartDefinition_ == nil) ? nil : [chartDefinition_ getRangeAxis];
}

- (id)getSelection {
  if (chartDefinition_ != nil) {
    return [chartDefinition_ getVisitedItem];
  }
  return nil;
}

- (int)getSelectionColumn {
  if (chartDefinition_ != nil) {
    return [chartDefinition_ getVisitedItemIndex];
  }
  return -1;
}

- (int)getSelectionRow {
  if (chartDefinition_ != nil) {
    return [chartDefinition_ getVisitedSeriesIndex];
  }
  return -1;
}

- (BOOL)getShowPlotValues {
  if (chartDefinition_ != nil) {
    return [chartDefinition_ isShowPlotLabels];
  }
  return NO;
}

- (RAREUIDimension *)getPlotAreaSize {
  if (chartDefinition_ != nil) {
    (void) [((RAREaChartHandler *) nil_chk(chartHandler_)) getPlotAreaSizeWithRAREiPlatformComponent:chartComponent_ withRAREChartDefinition:chartDefinition_];
  }
  return [self getSize];
}

- (void)configureExWithRARESPOTChart:(RARESPOTChart *)cfg {
  if (chartHandler_ == nil) {
    chartHandler_ = [self createChartHandler];
  }
  chartDefinition_ = [self createChartDefinitionWithRARESPOTChart:cfg];
  chartComponent_ = [((RAREaChartHandler *) nil_chk(chartHandler_)) createChartWithRAREiPlatformComponent:nil withRAREChartDefinition:chartDefinition_];
  dataComponent_ = formComponent_ = chartComponent_;
  [self configureExWithRARESPOTViewer:cfg withBoolean:YES withBoolean:NO withBoolean:YES];
  deletingAllowed_ = NO;
  pastingAllowed_ = NO;
  [self configureMenusWithRAREiPlatformComponent:formComponent_ withRARESPOTWidget:cfg withBoolean:NO];
  if ([((RARESPOTFont *) nil_chk(((RARESPOTChart *) nil_chk(cfg))->font_)) spot_hasValue]) {
    [chartHandler_ setChartFontWithRAREUIFont:[self getFont]];
  }
  if ([((SPOTPrintableString *) nil_chk(cfg->fgColor_)) spot_hasValue]) {
    [chartHandler_ setChartForegroundWithRAREUIColor:[self getForeground]];
  }
}

- (RAREChartAxis *)createAxisInfoWithBoolean:(BOOL)raxis
                        withRARESPOTDataItem:(RARESPOTDataItem *)di {
  RAREChartAxis *ai = [[RAREChartAxis alloc] init];
  NSString *ctx = [((SPOTPrintableString *) nil_chk(((RARESPOTDataItem *) nil_chk(di))->valueContext_)) getValue];
  int type = [((RARESPOTDataItem_CValueType *) nil_chk(di->valueType_)) intValue];
  [di->valueType_ setValueWithInt:RARESPOTDataItem_CValueType_string_type];
  [di->valueContext_ setValueWithNSString:(NSString *) check_class_cast(nil, [NSString class])];
  (void) [RAREaWidget populateItemWithRAREiWidget:self withRARESPOTDataItem:di withRARERenderableDataItem:ai];
  [di->valueType_ setValueWithInt:type];
  [ai setRangeAxisWithBoolean:raxis];
  if (raxis) {
    [ai setDomainTypeWithInt:RARERenderableDataItem_TYPE_DECIMAL];
  }
  else {
    [ai setDomainTypeWithInt:[RARERenderableDataItem fromSPOTTypeWithInt:type]];
  }
  [di->valueContext_ setValueWithNSString:ctx];
  NSString *s = [((SPOTPrintableString *) nil_chk(di->converterClass_)) getValue];
  @try {
    IOSClass *cvtclass = (s != nil) ? [((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDataConverterClassWithNSString:s] : [RARERenderableDataItem getDefaultConverterClassWithInt:[ai getDomainType]];
    if (cvtclass != nil) {
      id<RAREiDataConverter> cvt = [((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDataConverterWithIOSClass:cvtclass];
      if (raxis) {
        [ai setConverterClassWithIOSClass:cvtclass];
        [ai setDataConverterWithRAREiDataConverter:cvt];
        [ai setValueContextWithId:[((id<RAREiDataConverter>) nil_chk(cvt)) createContextWithRAREiWidget:self withNSString:ctx]];
      }
      else {
        [ai setDomainConverterClassWithIOSClass:cvtclass];
        [ai setDomainDataConverterWithRAREiDataConverter:cvt];
        [ai setDomainContextWithId:[((id<RAREiDataConverter>) nil_chk(cvt)) createContextWithRAREiWidget:self withNSString:ctx]];
      }
    }
  }
  @catch (JavaLangClassNotFoundException *ex) {
    [((id<RAREiExceptionHandler>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultExceptionHandler])) handleExceptionWithJavaLangThrowable:ex];
  }
  s = [di spot_getAttributeWithNSString:@"label"];
  if (s != nil) {
    [ai setLabelWithNSString:s];
  }
  return ai;
}

- (RAREaChartHandler *)createChartHandler {
  id o = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getWithNSString:@"Rare.Chart.handler"];
  if ([o isKindOfClass:[NSString class]]) {
    return (RAREaChartHandler *) check_class_cast([RAREPlatform createObjectWithNSString:(NSString *) check_class_cast(o, [NSString class])], [RAREaChartHandler class]);
  }
  return (RAREaChartHandler *) check_class_cast([((id<RAREiPlatform>) nil_chk([RAREPlatform getPlatform])) createChartHandler], [RAREaChartHandler class]);
}

- (RAREChartDataItem *)createColumnWithRARESPOTDataItem:(RARESPOTDataItem *)di
                                                withInt:(int)type {
  RAREChartDataItem *ci = [[RAREChartDataItem alloc] init];
  (void) [RAREaWidget populateItemWithRAREiWidget:self withRARESPOTDataItem:di withRARERenderableDataItem:ci];
  [ci setTypeWithInt:type];
  return ci;
}

- (RAREPlotInformation *)createPlotInfoWithRARESPOTPlot:(RARESPOTPlot *)plot {
  if (plot == nil) {
    return nil;
  }
  RAREUIColor *gridColor = nil;
  RAREUIInsets *margin = nil;
  RAREUIImage *image = nil;
  RAREUIStroke *gridStroke = nil;
  BOOL showGridLines = YES;
  NSString *s = [((SPOTPrintableString *) nil_chk(((RARESPOTPlot *) nil_chk(plot))->bgColor_)) getValue];
  if (s != nil) {
    bgColor_ = [self getColorWithNSString:s];
  }
  switch ([((RARESPOTPlot_CGridLine *) nil_chk(plot->gridLine_)) intValue]) {
    case RARESPOTPlot_CGridLine_solid:
    gridStroke = [RAREUIStroke SOLID_STROKE];
    break;
    case RARESPOTPlot_CGridLine_dashed:
    gridStroke = [RAREUIStroke DASHED_STROKE];
    break;
    case RARESPOTPlot_CGridLine_dotted:
    gridStroke = [RAREUIStroke DOTTED_STROKE];
    break;
    case RARESPOTPlot_CGridLine_none:
    showGridLines = NO;
    break;
    default:
    break;
  }
  s = [plot->gridLine_ spot_getAttributeWithNSString:@"color"];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    gridColor = [self getColorWithNSString:s];
  }
  s = [((SPOTPrintableString *) nil_chk(plot->bgImageURL_)) getValue];
  if (s != nil) {
    image = [self getImageWithNSString:s];
  }
  if ([plot getContentPadding] != nil) {
    margin = [((RARESPOTMargin *) nil_chk([plot getContentPadding])) getInsets];
  }
  s = [((NSString *) nil_chk([((RARESPOTPlot_CShapes *) nil_chk(plot->shapes_)) stringValue])) uppercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]];
  RAREPlotInformation_ShapeStyleEnum *ss = [plot->shapes_ spot_valueWasSet] ? [RAREPlotInformation_ShapeStyleEnum valueOfWithNSString:s] : nil;
  RAREPlotInformation *pi = [[RAREPlotInformation alloc] initWithRAREUIColor:bgColor_ withRAREUIColor:gridColor withRAREUIInsets:margin withRAREUIStroke:gridStroke withRAREUIImage:image withRAREPlotInformation_ShapeStyleEnum:ss];
  s = [((SPOTPrintableString *) nil_chk(plot->borderColor_)) getValue];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    [pi setBorderColorWithRAREUIColor:[self getColorWithNSString:s]];
  }
  s = [((NSString *) nil_chk([((RARESPOTPlot_CLabels *) nil_chk(plot->labels_)) stringValue])) uppercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]];
  [pi setLabelTypeWithRAREPlotInformation_LabelTypeEnum:[RAREPlotInformation_LabelTypeEnum valueOfWithNSString:s]];
  [pi setLabelsFormatWithNSString:[plot->labels_ spot_getAttributeWithNSString:@"format"]];
  s = [plot->labels_ spot_getAttributeWithNSString:@"fgColor"];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    [pi setLabelsForegroundWithRAREUIColor:[RAREColorUtils getColorWithNSString:s]];
  }
  s = [plot->labels_ spot_getAttributeWithNSString:@"bgColor"];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    [pi setLabelsBackgroundWithRAREUIColor:[RAREColorUtils getColorWithNSString:s]];
  }
  s = [plot->labels_ spot_getAttributeWithNSString:@"border"];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    [pi setLabelsBorderWithRAREiBorder:[RAREUIBorderHelper createBorderWithNSString:s]];
  }
  s = [plot->labels_ spot_getAttributeWithNSString:@"font"];
  if ((s != nil) && ([s sequenceLength] > 0)) {
    [pi setLabelsFontWithRAREUIFont:[RAREFontUtils parseFontWithRAREiWidget:self withRAREUIFont:nil withNSString:s]];
  }
  [pi setShowGridLinesWithBoolean:showGridLines];
  if ([((SPOTInteger *) nil_chk(plot->fgAlpha_)) spot_valueWasSet]) {
    [pi setForegroundAlphaWithFloat:([plot->fgAlpha_ getValue]) / 255.0f];
  }
  if ([((SPOTReal *) nil_chk(plot->lineThickness_)) spot_valueWasSet]) {
    [pi setLineThicknessWithFloat:[plot->lineThickness_ floatValue]];
  }
  if ([((SPOTReal *) nil_chk(plot->outlineThickness_)) spot_valueWasSet]) {
    [pi setOutlineThicknessWithFloat:[plot->outlineThickness_ floatValue]];
  }
  if ([plot->shapes_ spot_valueWasSet]) {
    s = [plot->shapes_ spot_getAttributeWithNSString:@"outlineColor"];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      [pi setOutlineColorWithRAREUIColor:[RAREColorUtils getColorWithNSString:s]];
    }
    s = [plot->shapes_ spot_getAttributeWithNSString:@"fillColor"];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      [pi setFillColorWithRAREUIColor:[RAREColorUtils getColorWithNSString:s]];
    }
  }
  return pi;
}

- (void)finishedLoadingEx {
  if ([self isDisposed]) {
    return;
  }
  [self refreshItems];
  [super finishedLoadingEx];
}

- (NSString *)getWidgetAttributeWithNSString:(NSString *)name {
  if ([@"%rangeValue" isEqual:name]) {
    id o = [((RAREChartDefinition *) nil_chk(chartDefinition_)) getCurrentRangeValue];
    return (o == nil) ? @"" : [o description];
  }
  else if ([@"%domainValue" isEqual:name]) {
    id o = [((RAREChartDefinition *) nil_chk(chartDefinition_)) getCurrentDomainValue];
    return (o == nil) ? @"" : [o description];
  }
  return [super getWidgetAttributeWithNSString:name];
}

- (id<RAREUTiFilterableList>)createListWithSPOTSet:(SPOTSet *)set {
  int len = (set == nil) ? 0 : [set getCount];
  if (len == 0) {
    return nil;
  }
  RAREUTFilterableList *list = [[RAREUTFilterableList alloc] initWithInt:len];
  for (int i = 0; i < len; i++) {
    [list addWithId:(RAREChartDataItem *) check_class_cast([self createItemWithId:[((SPOTSet *) nil_chk(set)) getExWithInt:i]], [RAREChartDataItem class])];
  }
  return list;
}

- (void)fixSeriesItemsWithRARERenderableDataItem:(RARERenderableDataItem *)series {
  if ((chartDefinition_ == nil) || [((RARERenderableDataItem *) nil_chk(series)) isEmpty]) {
    return;
  }
  RAREChartDataItem *sitem = (RAREChartDataItem *) check_class_cast(series, [RAREChartDataItem class]);
  [((RAREChartDataItem *) nil_chk(sitem)) setTypeWithInt:RARERenderableDataItem_TYPE_STRING];
  [sitem setDomainTypeWithInt:[((RAREChartAxis *) nil_chk([((RAREChartDefinition *) nil_chk(chartDefinition_)) getDomainAxis])) getAxisType]];
  [sitem setDomainDataConverterWithRAREiDataConverter:[((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) getDomainDataConverter]];
  [sitem setDomainContextWithId:[((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) getDomainContext]];
  [sitem setDomainConverterClassWithIOSClass:[((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) getDomainConverterClass]];
  id<RAREiDataConverter> cvt = [((RAREChartAxis *) nil_chk([chartDefinition_ getRangeAxis])) getDomainDataConverter];
  id vc = [((RAREChartAxis *) nil_chk([chartDefinition_ getRangeAxis])) getDomainContext];
  RAREChartDefinition_ChartTypeEnum *ct = [RAREaChartHandler getSeriesChartTypeWithRAREChartDefinition:chartDefinition_ withRAREChartDataItem:(RAREChartDataItem *) check_class_cast(series, [RAREChartDataItem class])];
  if ((ct == [RAREChartDefinition_ChartTypeEnum RANGE_AREA]) || (ct == [RAREChartDefinition_ChartTypeEnum RANGE_BAR])) {
    vc = [RARENumberContext RANGE_CONTEXT];
  }
  for (RARERenderableDataItem * __strong di in nil_chk([((RARERenderableDataItem *) nil_chk(series)) getItems])) {
    RAREChartDataItem *item = (RAREChartDataItem *) check_class_cast(di, [RAREChartDataItem class]);
    if (item == nil) {
      continue;
    }
    [((RAREChartDataItem *) nil_chk(item)) setTypeWithInt:[((RAREChartAxis *) nil_chk([chartDefinition_ getRangeAxis])) getAxisType]];
    if (cvt != nil) {
      [item setDataConverterWithRAREiDataConverter:cvt];
    }
    [item setValueContextWithId:vc];
    [item setDomainTypeWithInt:[((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) getAxisType]];
    [item setDomainDataConverterWithRAREiDataConverter:[((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) getDomainDataConverter]];
    [item setDomainContextWithId:[((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) getDomainContext]];
    [item setDomainConverterClassWithIOSClass:[((RAREChartAxis *) nil_chk([chartDefinition_ getDomainAxis])) getDomainConverterClass]];
  }
}

- (void)copyAllFieldsTo:(RAREaChartViewer *)other {
  [super copyAllFieldsTo:other];
  other->aggregate_ = aggregate_;
  other->chartComponent_ = chartComponent_;
  other->chartDefinition_ = chartDefinition_;
  other->chartHandler_ = chartHandler_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addWithRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "addAnnotationWithNSString:withChar:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "addDomainMarkerWithNSString:withChar:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "addDomainMarkerWithId:withId:withNSString:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "addDomainValueWithId:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "addDomainValueWithRARERenderableDataItem:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "addRangeMarkerWithNSString:withNSString:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "addRangeMarkerWithNSString:withChar:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "addRangeMarkerWithDouble:withDouble:withNSString:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "addSeriesWithRAREChartDataItem:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "addSubTitleWithRARERenderableDataItem:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "addSubTitleWithNSString:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "createChartDefinitionWithRARESPOTChart:", NULL, "LRAREChartDefinition", 0x1, NULL },
    { "createItemWithId:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "createItemWithId:withInt:withId:withId:withId:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "createItemExWithRARESPOTDataItem:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "createRowWithInt:withBoolean:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "createSeriesWithNSString:", NULL, "LRAREChartDataItem", 0x9, NULL },
    { "createSeriesValueWithId:withId:", NULL, "LRAREChartDataItem", 0x9, NULL },
    { "itemFromLocationWithInt:withInt:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "toChartSeriesWithRARERenderableDataItem:withBoolean:", NULL, "LRAREChartDataItem", 0x1, NULL },
    { "getChartDefinition", NULL, "LRAREChartDefinition", 0x1, NULL },
    { "getDomainAxis", NULL, "LRAREChartAxis", 0x1, NULL },
    { "getDomainValueWithInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getRangeAxis", NULL, "LRAREChartAxis", 0x1, NULL },
    { "getSelection", NULL, "LNSObject", 0x1, NULL },
    { "getShowPlotValues", NULL, "Z", 0x1, NULL },
    { "getPlotAreaSize", NULL, "LRAREUIDimension", 0x1, NULL },
    { "configureExWithRARESPOTChart:", NULL, "V", 0x4, NULL },
    { "createAxisInfoWithBoolean:withRARESPOTDataItem:", NULL, "LRAREChartAxis", 0x4, NULL },
    { "createChartHandler", NULL, "LRAREaChartHandler", 0x4, NULL },
    { "createColumnWithRARESPOTDataItem:withInt:", NULL, "LRAREChartDataItem", 0x4, NULL },
    { "createPlotInfoWithRARESPOTPlot:", NULL, "LRAREPlotInformation", 0x4, NULL },
    { "finishedLoadingEx", NULL, "V", 0x4, NULL },
    { "getWidgetAttributeWithNSString:", NULL, "LNSString", 0x4, NULL },
    { "createListWithSPOTSet:", NULL, "LRAREUTiFilterableList", 0x2, NULL },
    { "fixSeriesItemsWithRARERenderableDataItem:", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "chartComponent_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "chartDefinition_", NULL, 0x4, "LRAREChartDefinition" },
    { "chartHandler_", NULL, 0x4, "LRAREaChartHandler" },
  };
  static J2ObjcClassInfo _RAREaChartViewer = { "aChartViewer", "com.appnativa.rare.viewer", NULL, 0x401, 37, methods, 3, fields, 0, NULL};
  return &_RAREaChartViewer;
}

@end
@implementation RAREaChartViewer_$1

- (BOOL)wantsMouseMoveEvents {
  RAREaWidgetListener *wl = [this$0_ getWidgetListener];
  return (wl != nil) && [wl isChangeEventEnabled];
}

- (void)mouseMovedWithRAREMouseEvent:(RAREMouseEvent *)event
               withRAREChartDataItem:(RAREChartDataItem *)item {
  RAREaWidgetListener *wl = [this$0_ getWidgetListener];
  if ((wl != nil) && [wl isChangeEventEnabled]) {
    [wl executeWithNSString:[RAREiConstants EVENT_CHANGE] withJavaUtilEventObject:event];
  }
}

- (void)mouseClickedWithRAREMouseEvent:(RAREMouseEvent *)event
                 withRAREChartDataItem:(RAREChartDataItem *)item {
  RAREaWidgetListener *wl = [this$0_ getWidgetListener];
  if ((wl != nil) && [wl isActionEventEnabled]) {
    [wl actionPerformedWithRAREActionEvent:[[RAREActionEvent alloc] initWithId:this$0_->chartComponent_ withId:event]];
  }
}

- (id)initWithRAREaChartViewer:(RAREaChartViewer *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "wantsMouseMoveEvents", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaChartViewer" },
  };
  static J2ObjcClassInfo _RAREaChartViewer_$1 = { "$1", "com.appnativa.rare.viewer", "aChartViewer", 0x8000, 1, methods, 1, fields, 0, NULL};
  return &_RAREaChartViewer_$1;
}

@end
@implementation RAREaChartViewer_$2

- (void)run {
  [this$0_ refreshItemsWithBoolean:YES];
}

- (id)initWithRAREaChartViewer:(RAREaChartViewer *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaChartViewer" },
  };
  static J2ObjcClassInfo _RAREaChartViewer_$2 = { "$2", "com.appnativa.rare.viewer", "aChartViewer", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_RAREaChartViewer_$2;
}

@end
@implementation RAREaChartViewer_$3

- (void)run {
  [this$0_ refreshItemsWithBoolean:NO];
}

- (id)initWithRAREaChartViewer:(RAREaChartViewer *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaChartViewer" },
  };
  static J2ObjcClassInfo _RAREaChartViewer_$3 = { "$3", "com.appnativa.rare.viewer", "aChartViewer", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_RAREaChartViewer_$3;
}

@end
@implementation RAREaChartViewer_$4

- (int)compareWithId:(RARERenderableDataItem *)o1
              withId:(RARERenderableDataItem *)o2 {
  if ((o1 == nil) || (o2 == nil)) {
    return 0;
  }
  int n = [((RAREChartDataItem *) check_class_cast(o1, [RAREChartDataItem class])) compareToWithRAREChartDataItem:(RAREChartDataItem *) check_class_cast(o2, [RAREChartDataItem class])];
  return val$descending_ ? n * -1 : n;
}

- (id)initWithBoolean:(BOOL)capture$0 {
  val$descending_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$descending_", NULL, 0x1012, "Z" },
  };
  static J2ObjcClassInfo _RAREaChartViewer_$4 = { "$4", "com.appnativa.rare.viewer", "aChartViewer", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_RAREaChartViewer_$4;
}

@end
