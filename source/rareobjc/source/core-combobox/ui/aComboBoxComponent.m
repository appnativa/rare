//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-combobox/com/appnativa/rare/ui/aComboBoxComponent.java
//
//  Created by decoteaud on 3/14/16.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/spot/ComboBox.h"
#include "com/appnativa/rare/spot/GridCell.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/ui/BorderUtils.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/ComboBoxComponent.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/Container.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/PainterUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/XPContainer.h"
#include "com/appnativa/rare/ui/aComboBoxComponent.h"
#include "com/appnativa/rare/ui/aComponent.h"
#include "com/appnativa/rare/ui/border/UICompoundBorder.h"
#include "com/appnativa/rare/ui/border/UILineBorder.h"
#include "com/appnativa/rare/ui/border/aUIBevelBorder.h"
#include "com/appnativa/rare/ui/border/aUILineBorder.h"
#include "com/appnativa/rare/ui/border/aUIMatteBorder.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/EventListenerList.h"
#include "com/appnativa/rare/ui/event/ExpansionEvent.h"
#include "com/appnativa/rare/ui/event/ItemChangeEvent.h"
#include "com/appnativa/rare/ui/event/KeyEvent.h"
#include "com/appnativa/rare/ui/event/MouseEvent.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/event/iPopupMenuListener.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iActionable.h"
#include "com/appnativa/rare/ui/iPaintedButton.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformItemRenderer.h"
#include "com/appnativa/rare/ui/iPlatformListDataModel.h"
#include "com/appnativa/rare/ui/iPlatformListHandler.h"
#include "com/appnativa/rare/ui/iPlatformPath.h"
#include "com/appnativa/rare/ui/iPlatformWindowManager.h"
#include "com/appnativa/rare/ui/iPopup.h"
#include "com/appnativa/rare/ui/painter/PainterHolder.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/renderer/aListItemRenderer.h"
#include "com/appnativa/rare/ui/text/iPlatformTextEditor.h"
#include "com/appnativa/rare/widget/ComboBoxWidget.h"
#include "com/appnativa/rare/widget/aComboBoxWidget.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/util/ContainsFilter.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Math.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@implementation RAREaComboBoxComponent

- (id)initWithId:(id)view {
  if (self = [super initWithId:view]) {
    buttonVisible_ = YES;
    restrictInput_ = YES;
    autoFilter_ = YES;
    margin_ = [[RAREUIInsets alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_2]];
    if ([RAREPlatform isTouchDevice]) {
      iconSize_ = [RAREUIScreen platformPixelsWithInt:24];
    }
    else {
      focusPainted_ = YES;
      iconSize_ = [RAREUIScreen platformPixelsWithInt:16];
    }
    editor_ = [self createEditor];
    id<RAREiPlatformComponent> ec = [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getComponent];
    if ([(id) ec conformsToProtocol: @protocol(RAREiActionComponent)]) {
      [((id<RAREiActionComponent>) check_protocol_cast(ec, @protocol(RAREiActionComponent))) setAutoAdjustSizeWithBoolean:NO];
    }
    RAREaComboBoxComponent_Listener *l = [[RAREaComboBoxComponent_Listener alloc] initWithRAREaComboBoxComponent:self];
    [((id<RAREiPlatformComponent>) nil_chk(ec)) addFocusListenerWithRAREiFocusListener:l];
    [ec addMouseListenerWithRAREiMouseListener:l];
    if ([RAREPlatform hasPhysicalKeyboard]) {
      [self addKeyListenerWithRAREiKeyListener:l];
      [ec addKeyListenerWithRAREiKeyListener:l];
    }
    else {
      [editor_ addActionListenerWithRAREiActionListener:l];
    }
    [self addMouseListenerWithRAREiMouseListener:l];
    [self addWithRAREiPlatformComponent:[editor_ getContainer]];
    RAREUIFont *f = [self getFont];
    RAREUIColor *fg = [self getForeground];
    if (f != nil) {
      [((id<RAREiPlatformComponent>) nil_chk([editor_ getComponent])) setFontWithRAREUIFont:f];
    }
    if (fg != nil) {
      [((id<RAREiPlatformComponent>) nil_chk([editor_ getComponent])) setForegroundWithRAREUIColor:fg];
    }
  }
  return self;
}

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  id<RAREiPlatformComponent> c = [((RAREActionEvent *) nil_chk(e)) getComponent];
  if (c == [self getPopupButton]) {
    if ([self isPopupVisible]) {
      [self cancelPopup];
    }
    else {
      if (![RAREPlatform isTouchDevice]) {
        [self requestFocus];
      }
      [self showPopup];
    }
  }
  else {
    [self hidePopup];
    [self popupActionPerformedWithRAREActionEvent:e];
  }
}

- (void)addActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  [((RAREEventListenerList *) nil_chk([self getEventListenerList])) addWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiActionListener)] withId:l];
}

- (void)addPopupMenuListenerWithRAREiPopupMenuListener:(id<RAREiPopupMenuListener>)l {
  [((RAREEventListenerList *) nil_chk([self getEventListenerList])) addWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiPopupMenuListener)] withId:l];
}

- (void)cancelPopup {
  if ([self isPopupVisible]) {
    [self popupMenuCanceledWithRAREExpansionEvent:[[RAREExpansionEvent alloc] initWithId:currentPopup_ withRAREExpansionEvent_TypeEnum:[RAREExpansionEvent_TypeEnum WILL_COLLAPSE]]];
  }
}

- (void)configurationCompletedWithRAREaWidget:(RAREaWidget *)w
                           withRARESPOTWidget:(RARESPOTWidget *)cfg {
  RAREUIProperties *defs = [RAREPlatform getUIDefaults];
  hasCustomPaint_ = ![self isOpaque] || [self isBackgroundSet] || (([self getComponentPainter] != nil) && [((id<RAREiPlatformComponentPainter>) nil_chk([self getComponentPainter])) isBackgroundPaintEnabled]) || (boxPainterHolder_ != nil);
  if (!hasCustomPaint_) {
    if ([self isEditable]) {
      [self setBackgroundWithRAREUIColor:[RAREUIColor WHITE]];
      [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getComponent])) setForegroundWithRAREUIColor:[RAREUIColor BLACK]];
    }
    else {
      [self setPainterHolderWithRAREPainterHolder:[RAREPainterUtils createComboBoxPaintHolder]];
    }
  }
  RARESPOTComboBox *cb = nil;
  if ([cfg isKindOfClass:[RARESPOTComboBox class]]) {
    cb = (RARESPOTComboBox *) check_class_cast(cfg, [RARESPOTComboBox class]);
  }
  id<RAREiPlatformBorder> border = [self getBorder];
  id<RAREiPlatformBorder> b;
  if (border == nil) {
    b = [((RAREUIProperties *) nil_chk(defs)) getBorderWithNSString:@"Rare.ComboBox.border"];
    if (b == nil) {
      usingDefaultBorder_ = YES;
      standardBorder_ = [RAREBorderUtils getDefaultComboBoxBorder];
      b = standardBorder_;
      if (isDefaultContent_) {
        RAREUIInsets *in = [((id<RAREiPlatformBorder>) nil_chk(b)) getBorderInsetsWithRAREUIInsets:(RAREUIInsets *) check_class_cast(nil, [RAREUIInsets class])];
        ((RAREUIInsets *) nil_chk(in))->left_ += ((RAREUIInsets *) nil_chk(margin_))->left_ + [RAREScreenUtils PLATFORM_PIXELS_1];
        in->top_ = [RAREScreenUtils PLATFORM_PIXELS_2];
        in->bottom_ = [RAREScreenUtils PLATFORM_PIXELS_2];
        in->right_ = [RAREScreenUtils PLATFORM_PIXELS_2];
        [((id<RAREiPlatformItemRenderer>) nil_chk([((id<RAREiPlatformListHandler>) nil_chk(listHandler_)) getItemRenderer])) setInsetsWithRAREUIInsets:in];
      }
    }
    border = b;
    [self setBorderWithRAREiPlatformBorder:b];
  }
  if (popupPainter_ == nil) {
    defaultPopupPainter_ = [[RAREUIComponentPainter alloc] init];
    [defaultPopupPainter_ setBorderWithRAREiPlatformBorder:popupBorder_];
    if ([defaultPopupPainter_ getBorder] == nil) {
      RAREUIColor *c = [self getBorderColorWithRAREiPlatformBorder:border];
      if (c == nil) {
        c = [RAREaUILineBorder getDefaultLineColor];
      }
      if (usingDefaultBorder_) {
        b = standardPopupBorder_ = [[RAREUILineBorder alloc] initWithRAREUIColor:c withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:[RAREScreenUtils PLATFORM_PIXELS_6]];
        (void) [standardPopupBorder_ setFlatTopWithBoolean:YES];
      }
      else {
        if (cb != nil && [((SPOTBoolean *) nil_chk(cb->useSameBorderForPopup_)) booleanValue]) {
          b = [((RAREaWidget *) nil_chk(w)) getBorder];
        }
        else {
          b = [[RAREUILineBorder alloc] initWithRAREUIColor:c];
        }
      }
      [defaultPopupPainter_ setBorderWithRAREiPlatformBorder:b];
    }
  }
  else {
    if (usingDefaultBorder_ && ([popupPainter_ getBorder] == nil)) {
      RAREUIColor *c = [self getBorderColorWithRAREiPlatformBorder:border];
      if (c == nil) {
        c = [RAREaUILineBorder getDefaultLineColor];
      }
      standardPopupBorder_ = [[RAREUILineBorder alloc] initWithRAREUIColor:c withFloat:[RAREScreenUtils PLATFORM_PIXELS_1] withFloat:[RAREScreenUtils PLATFORM_PIXELS_6]];
      (void) [standardPopupBorder_ setFlatTopWithBoolean:YES];
      [popupPainter_ setBorderWithRAREiPlatformBorder:standardPopupBorder_];
    }
    if ((cb != nil) && (listHandler_ != nil)) {
      NSString *s = [((RARESPOTGridCell *) nil_chk([cb getPopupPainter])) spot_getAttributeWithNSString:@"showDivider"];
      if ([@"false" isEqual:s]) {
        [listHandler_ setShowDividerWithBoolean:NO];
      }
      else {
        s = [((RARESPOTGridCell *) nil_chk([cb getPopupPainter])) spot_getAttributeWithNSString:@"dividerLineColor"];
        if (s != nil) {
          [listHandler_ setDividerLineWithRAREUIColor:[RAREColorUtils getColorWithNSString:s] withRAREUIStroke:nil];
        }
        RAREUIColor *bg = [popupPainter_ getBackgroundColor];
        if (bg != nil) {
          bg = [bg lightWithInt:[bg isDarkColor] ? 10 : -10];
          [listHandler_ setDividerLineWithRAREUIColor:bg withRAREUIStroke:nil];
        }
      }
    }
  }
  if (listHandler_ != nil) {
    id<RAREiPlatformComponentPainter> p = (popupPainter_ == nil) ? defaultPopupPainter_ : popupPainter_;
    if (p != nil) {
      if (![p isBackgroundPaintEnabled]) {
        RAREUIColor *bg = [((id<RAREiPlatformComponent>) nil_chk([listHandler_ getContainerComponent])) getBackground];
        if (bg == nil) {
          bg = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.ComboBox.list.background"];
        }
        if (bg == nil) {
          bg = [RAREColorUtils getListBackground];
        }
        if (bg == nil) {
          bg = [RAREUIColor WHITE];
        }
        [p setBackgroundColorWithRAREUIColor:bg];
      }
      [((id<RAREiPlatformComponent>) nil_chk([listHandler_ getContainerComponent])) setOpaqueWithBoolean:NO];
    }
  }
  if ([w isKindOfClass:[RAREaComboBoxWidget class]]) {
    RAREaComboBoxWidget *cw = (RAREaComboBoxWidget *) check_class_cast(w, [RAREaComboBoxWidget class]);
    if ([(id) listHandler_ isKindOfClass:[RAREComboBoxComponent_ComboBoxListHandler class]]) {
      [((RAREaListItemRenderer *) nil_chk([((RAREComboBoxComponent_ComboBoxListHandler *) check_class_cast(listHandler_, [RAREComboBoxComponent_ComboBoxListHandler class])) getItemRenderer])) setItemDescriptionWithRAREColumn:[((RAREaComboBoxWidget *) nil_chk(cw)) getItemDescription]];
    }
  }
}

- (void)contentsChangedWithId:(id)source {
  listSize_ = nil;
}

- (void)contentsChangedWithId:(id)source
                      withInt:(int)index0
                      withInt:(int)index1 {
  listSize_ = nil;
}

- (id<RAREiPlatformListHandler>)createDefaultListHandlerWithRAREiWidget:(id<RAREiWidget>)w
                                         withRAREiPlatformListDataModel:(id<RAREiPlatformListDataModel>)listModel {
  isDefaultContent_ = YES;
  return [self createListHandlerWithRAREiWidget:w withRAREiPlatformListDataModel:listModel];
}

- (void)dispose {
  if (currentPopup_ != nil) {
    [currentPopup_ dispose];
    currentPopup_ = nil;
  }
  [super dispose];
  if (listHandler_ != nil) {
    [listHandler_ dispose];
  }
  if (popupContent_ != nil) {
    [popupContent_ dispose];
  }
  standardBorder_ = nil;
  boxPainterHolder_ = nil;
  buttonPainterHolder_ = nil;
  currentPopup_ = nil;
  downButton_ = nil;
  editor_ = nil;
  listHandler_ = nil;
  popupContent_ = nil;
  popupPainter_ = nil;
  defaultPopupPainter_ = nil;
  upButton_ = nil;
  valueItem_ = nil;
  popupBorder_ = nil;
}

- (void)hidePopup {
  [self hidePopupExWithBoolean:YES];
}

- (void)intervalAddedWithId:(id)source
                    withInt:(int)index0
                    withInt:(int)index1 {
  listSize_ = nil;
}

- (void)intervalRemovedWithId:(id)source
                      withInt:(int)index0
                      withInt:(int)index1
             withJavaUtilList:(id<JavaUtilList>)removed {
  listSize_ = nil;
}

- (void)itemChangedWithRAREItemChangeEvent:(RAREItemChangeEvent *)e {
  [self setEditorValueWithRARERenderableDataItem:(RARERenderableDataItem *) check_class_cast([((RAREItemChangeEvent *) nil_chk(e)) getNewValue], [RARERenderableDataItem class])];
}

- (void)layoutWithFloat:(float)width
              withFloat:(float)height {
  if (!initialized_) {
    [self initializeComboBox];
  }
  id<RAREiPlatformBorder> b = [self getBorder];
  float x = 0;
  float y = 0;
  if (b != nil) {
    RAREUIInsets *in = [b getBorderInsetsWithRAREUIInsets:computeInsets_];
    x = ((RAREUIInsets *) nil_chk(in))->left_;
    y = in->top_;
    width -= (in->left_ + in->right_);
    height -= (in->top_ + in->bottom_);
  }
  if (![self isButtonVisible]) {
    [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getContainer])) setBoundsWithFloat:x + ((RAREUIInsets *) nil_chk(margin_))->left_ + [RAREScreenUtils PLATFORM_PIXELS_1] withFloat:y + margin_->top_ withFloat:width - (margin_->left_ + margin_->right_ + [RAREScreenUtils PLATFORM_PIXELS_1]) withFloat:height - (margin_->top_ + margin_->bottom_)];
    return;
  }
  if (editorPreferredHeight_ < [RAREFontUtils getDefaultLineHeight]) {
    RAREUIDimension *size = [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getContainer])) getPreferredSizeWithRAREUIDimension:nil withFloat:0];
    editorPreferredHeight_ = ((RAREUIDimension *) nil_chk(size))->height_;
  }
  float buttonSize = height;
  [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getContainer])) setBoundsWithFloat:x + ((RAREUIInsets *) nil_chk(margin_))->left_ + [RAREScreenUtils PLATFORM_PIXELS_1] withFloat:y + ((height - editorPreferredHeight_) / 2) withFloat:width - buttonSize - (margin_->left_ + margin_->right_ + [RAREScreenUtils PLATFORM_PIXELS_1]) withFloat:editorPreferredHeight_];
  [((id<RAREiActionComponent>) nil_chk(downButton_)) setBoundsWithFloat:x + width - buttonSize withFloat:y withFloat:buttonSize withFloat:height];
  listSize_ = nil;
}

- (void)popupMenuCanceledWithRAREExpansionEvent:(RAREExpansionEvent *)e {
  popupCanceled_ = YES;
  if (listenerList_ != nil) {
    [RAREUtils firePopupCanceledEventWithRAREEventListenerList:listenerList_ withRAREExpansionEvent:e];
  }
}

- (void)popupMenuWillBecomeInvisibleWithRAREExpansionEvent:(RAREExpansionEvent *)e {
  if (listenerList_ != nil) {
    [RAREUtils firePopupEventWithRAREEventListenerList:listenerList_ withRAREExpansionEvent:e withBoolean:NO];
  }
  [self hidePopupExWithBoolean:NO];
}

- (void)popupMenuWillBecomeVisibleWithRAREExpansionEvent:(RAREExpansionEvent *)e {
  if (listenerList_ != nil) {
    [RAREUtils firePopupEventWithRAREEventListenerList:listenerList_ withRAREExpansionEvent:e withBoolean:YES];
  }
}

- (void)removeActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  if (listenerList_ != nil) {
    [listenerList_ removeWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiActionListener)] withId:l];
  }
}

- (void)removePopupMenuListenerWithRAREiPopupMenuListener:(id<RAREiPopupMenuListener>)l {
  if (listenerList_ != nil) {
    [listenerList_ removeWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiPopupMenuListener)] withId:l];
  }
}

- (void)requestFocus {
  [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getComponent])) requestFocus];
}

- (void)showPopup {
  [self showPopupEx];
}

- (void)structureChangedWithId:(id)source {
  listSize_ = nil;
}

- (void)textChangedWithId:(id)source {
  if (!deletingText_) {
    if (autoFilter_ || (restrictInput_ && (listHandler_ != nil) && ![listHandler_ isEmpty])) {
      if (startsWithFilter_ == nil) {
        startsWithFilter_ = [[RAREUTContainsFilter alloc] initWithNSString:@"" withBoolean:YES withBoolean:YES withBoolean:NO withBoolean:NO];
      }
      NSString *s = [self getEditorValue];
      if ([((NSString *) nil_chk(s)) sequenceLength] > 0) {
        s = [s lowercaseStringWithJRELocale:[JavaUtilLocale getDefault]];
        [((RAREUTContainsFilter *) nil_chk(startsWithFilter_)) setValueWithNSString:s];
        int n = [((id<RAREiPlatformListHandler>) nil_chk(listHandler_)) findWithRAREUTiFilter:startsWithFilter_ withInt:0];
        if (n != -1) {
          int startIndex = [((NSString *) nil_chk(s)) sequenceLength];
          RARERenderableDataItem *item = [listHandler_ getWithInt:n];
          [((id<RAREiPlatformTextEditor>) nil_chk([self getTextEditor])) setChangeEventsEnabledWithBoolean:NO];
          if ([listHandler_ getSelectedIndex] != n) {
            [listHandler_ setSelectedIndexWithInt:n];
          }
          [self setEditorValueWithRARERenderableDataItem:item];
          s = [((RARERenderableDataItem *) nil_chk(item)) description];
          int endIndex = [((NSString *) nil_chk(s)) sequenceLength];
          if (startIndex < endIndex) {
            [((id<RAREiPlatformTextEditor>) nil_chk([self getTextEditor])) setSelectionWithInt:startIndex withInt:endIndex];
          }
          [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREaComboBoxComponent_$1 alloc] initWithRAREaComboBoxComponent:self]];
        }
      }
    }
  }
}

- (BOOL)textChangingWithId:(id)source
                   withInt:(int)startIndex
                   withInt:(int)endIndex
  withJavaLangCharSequence:(id<JavaLangCharSequence>)replacementString {
  deletingText_ = [((id<JavaLangCharSequence>) nil_chk(replacementString)) sequenceLength] == 0;
  return YES;
}

- (void)setAutoFilterWithBoolean:(BOOL)autoFilter {
  self->autoFilter_ = autoFilter;
  if (initialized_ && [self isAutoFilter] && (autoFilter || restrictInput_)) {
    [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) removeTextChangeListenerWithRAREiTextChangeListener:self];
    [editor_ addTextChangeListenerWithRAREiTextChangeListener:self];
  }
}

- (void)setButtonPainterHolderWithRAREPainterHolder:(RAREPainterHolder *)ph {
  buttonPainterHolder_ = ph;
}

- (void)setButtonVisibleWithBoolean:(BOOL)visible {
  self->buttonVisible_ = visible;
  if (buttonPainterHolder_ == nil) {
    if (visible) {
      downButton_ = [self createButton];
      [((id<RAREiActionComponent>) nil_chk(downButton_)) addActionListenerWithRAREiActionListener:self];
      [self addWithRAREiPlatformComponent:downButton_];
    }
    [self setButtonPainterHolderWithRAREPainterHolder:[RAREPainterUtils createComboBoxButtonPaintHolder]];
  }
  if (downButton_ != nil) {
    [downButton_ setVisibleWithBoolean:visible];
    [downButton_ setAutoAdjustSizeWithBoolean:NO];
  }
}

- (void)setDropDownIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  downIcon_ = icon;
  int m = [JavaLangMath maxWithInt:[((id<RAREiPlatformIcon>) nil_chk(icon)) getIconWidth] withInt:[icon getIconHeight]];
  iconSize_ = [JavaLangMath maxWithInt:m withInt:iconSize_];
}

- (void)setEditableWithBoolean:(BOOL)editable {
  [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) setEditableWithBoolean:editable];
  if (initialized_) {
    if (editable && (autoFilter_ || restrictInput_)) {
      [editor_ removeTextChangeListenerWithRAREiTextChangeListener:self];
      [editor_ addTextChangeListenerWithRAREiTextChangeListener:self];
    }
  }
  if (initialized_ && !hasCustomPaint_) {
    if (editable) {
      [self setBackgroundWithRAREUIColor:[RAREUIColor WHITE]];
      [self setPainterHolderWithRAREPainterHolder:nil];
    }
    else {
      [self setPainterHolderWithRAREPainterHolder:[RAREPainterUtils createComboBoxPaintHolder]];
    }
  }
}

- (void)setEditorValueWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  valueItem_ = nil;
  if (text == nil) {
    text = @"";
  }
  if (listHandler_ != nil) {
    NSString *s = [((id<JavaLangCharSequence>) nil_chk(text)) sequenceDescription];
    int n = [listHandler_ findWithNSString:s withInt:0 withBoolean:NO];
    if ((n != -1) && [((RARERenderableDataItem *) nil_chk([listHandler_ getWithInt:n])) valueEqualsWithId:s]) {
      [self setEditorValueWithRARERenderableDataItem:[listHandler_ getWithInt:n]];
      return;
    }
  }
  [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) setTextWithJavaLangCharSequence:text];
}

- (void)setEditorValueWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (item == nil) {
    [self setEditorValueWithJavaLangCharSequence:@""];
    return;
  }
  valueItem_ = item;
  [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) setTextWithJavaLangCharSequence:[((RARERenderableDataItem *) nil_chk(item)) toCharSequence]];
  RAREUIFont *f = nil;
  RAREUIColor *fg = nil;
  if (useItemAttributes_) {
    f = [item getFont];
    fg = [item getForeground];
  }
  if (f != nil) {
    [((id<RAREiPlatformComponent>) nil_chk([editor_ getComponent])) setFontWithRAREUIFont:f];
  }
  if (fg != nil) {
    [((id<RAREiPlatformComponent>) nil_chk([editor_ getComponent])) setForegroundWithRAREUIColor:fg];
  }
}

- (void)setEmptyFieldColorWithRAREUIColor:(RAREUIColor *)color {
  self->emptyFieldColor_ = color;
  [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) setEmptyFieldColorWithRAREUIColor:color];
}

- (void)setEmptyFieldFontWithRAREUIFont:(RAREUIFont *)font {
  self->emptyFieldFont_ = font;
  [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) setEmptyFieldFontWithRAREUIFont:font];
}

- (void)setEmptyFieldTextWithNSString:(NSString *)text {
  self->emptyFieldText_ = text;
  [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) setEmptyFieldTextWithNSString:text];
}

- (void)setEnabledWithBoolean:(BOOL)enabled {
  if (enabled != [self isEnabled]) {
    [super setEnabledWithBoolean:enabled];
    [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getComponent])) setEnabledWithBoolean:enabled];
    if (downButton_ != nil) {
      [downButton_ setEnabledWithBoolean:enabled];
    }
    if ([self getForegroundEx] == nil) {
      [((id<RAREiPlatformComponent>) nil_chk([editor_ getComponent])) setForegroundWithRAREUIColor:enabled ? [RAREColorUtils getForeground] : [RAREColorUtils getDisabledForeground]];
    }
  }
}

- (void)setFontWithRAREUIFont:(RAREUIFont *)font {
  [super setFontWithRAREUIFont:font];
  [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getComponent])) setFontWithRAREUIFont:font];
}

- (void)setForegroundWithRAREUIColor:(RAREUIColor *)fg {
  [super setForegroundWithRAREUIColor:fg];
  [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getComponent])) setForegroundWithRAREUIColor:fg];
}

- (void)setEditorIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  self->editorIcon_ = icon;
  if (icon != nil) {
    ((RAREUIInsets *) nil_chk(margin_))->left_ = [icon getIconWidth] + [RAREScreenUtils PLATFORM_PIXELS_4];
  }
  else {
    ((RAREUIInsets *) nil_chk(margin_))->left_ = [RAREScreenUtils PLATFORM_PIXELS_2];
  }
}

- (void)setMaximumVisibleRowCountWithInt:(int)rows {
  maxVisibleRows_ = rows;
}

- (void)setPainterHolderWithRAREPainterHolder:(RAREPainterHolder *)ph {
  boxPainterHolder_ = ph;
  id<RAREiPlatformComponentPainter> cp = [self getComponentPainterWithBoolean:YES];
  [((id<RAREiPlatformComponentPainter>) nil_chk(cp)) setPainterHolderWithRAREPainterHolder:ph];
}

- (void)setPopupBorderWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)b {
  usingDefaultBorder_ = NO;
  popupBorder_ = b;
}

- (void)setPopupContentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)content {
  if ([(id) popupContent_ conformsToProtocol: @protocol(RAREiActionable)]) {
    [((id<RAREiActionable>) check_protocol_cast(popupContent_, @protocol(RAREiActionable))) removeActionListenerWithRAREiActionListener:self];
  }
  popupContent_ = content;
  if ([(id) popupContent_ conformsToProtocol: @protocol(RAREiActionable)]) {
    [((id<RAREiActionable>) check_protocol_cast(popupContent_, @protocol(RAREiActionable))) addActionListenerWithRAREiActionListener:self];
  }
}

- (void)setPopupContentWithRAREiPlatformListHandler:(id<RAREiPlatformListHandler>)list {
  [self setEditorValueWithJavaLangCharSequence:@""];
  if (list == nil) {
    popupContent_ = nil;
    return;
  }
  if (listHandler_ != nil) {
    [listHandler_ removeActionListenerWithRAREiActionListener:self];
    [listHandler_ removeSelectionChangeListenerWithRAREiItemChangeListener:self];
    [listHandler_ removeDataModelListenerWithRAREiDataModelListener:self];
  }
  popupContent_ = [((id<RAREiPlatformListHandler>) nil_chk(list)) getContainerComponent];
  [list addSelectionChangeListenerWithRAREiItemChangeListener:self];
  [list addActionListenerWithRAREiActionListener:self];
  [list addDataModelListenerWithRAREiDataModelListener:self];
  listHandler_ = list;
}

- (void)setPopupPainterWithRAREiPlatformComponentPainter:(id<RAREiPlatformComponentPainter>)popupPainter {
  self->popupPainter_ = popupPainter;
}

- (void)setPopupResizableWithBoolean:(BOOL)resizable {
}

- (void)setPopupVisibleWithBoolean:(BOOL)visible {
  if (visible) {
    [self showPopup];
  }
  else {
    [self hidePopup];
  }
}

- (void)setRestrictInputWithBoolean:(BOOL)restrictInput {
  self->restrictInput_ = restrictInput;
  if (initialized_ && [self isAutoFilter] && (autoFilter_ || restrictInput)) {
    [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) removeTextChangeListenerWithRAREiTextChangeListener:self];
    [editor_ addTextChangeListenerWithRAREiTextChangeListener:self];
  }
}

- (void)setScaleButtonIconsWithBoolean:(BOOL)b {
}

- (void)setShowPopupAsDialogWithBoolean:(BOOL)showAsDialog {
  self->showAsDialog_ = showAsDialog;
}

- (void)setUseDialogButtonWithBoolean:(BOOL)dialog {
  useDialogButton_ = dialog;
}

- (void)setUseItemAttributesWithBoolean:(BOOL)useItemAttributes {
  self->useItemAttributes_ = useItemAttributes;
}

- (void)setVisibleCharactersWithInt:(int)count {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<RAREiPlatformTextEditor>)getTextEditor {
  return editor_;
}

- (NSString *)getEditorValue {
  return [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getPlainText];
}

- (RAREUIColor *)getEmptyFieldColor {
  return emptyFieldColor_;
}

- (RAREUIFont *)getEmptyFieldFont {
  return emptyFieldFont_;
}

- (id<JavaLangCharSequence>)getEmptyFieldText {
  return emptyFieldText_;
}

- (id<RAREiPlatformIcon>)getLeftMarginIcon {
  return editorIcon_;
}

- (id<RAREiPlatformBorder>)getPopupBorder {
  return (popupPainter_ == nil) ? nil : [popupPainter_ getBorder];
}

- (id<RAREiActionComponent>)getPopupButton {
  return downButton_;
}

- (id<RAREiPlatformComponentPainter>)getPopupPainter {
  return popupPainter_;
}

- (void)getPreferredSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                    withFloat:(float)maxWidth {
  if (!initialized_) {
    [self initializeComboBox];
  }
  (void) [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getContainer])) getPreferredSizeWithRAREUIDimension:size withFloat:0];
  float width = ((RAREUIDimension *) nil_chk(size))->width_;
  float height = size->height_;
  editorPreferredHeight_ = height;
  if (listHandler_ != nil) {
    width = [JavaLangMath maxWithFloat:width withFloat:[listHandler_ getPreferredWidth]];
  }
  else if (popupContent_ != nil) {
    (void) [popupContent_ getPreferredSizeWithRAREUIDimension:size];
    width = [JavaLangMath maxWithFloat:width withFloat:size->width_];
  }
  width += [RAREScreenUtils PLATFORM_PIXELS_2];
  if (buttonVisible_) {
    float buttonSize = iconSize_ + [RAREScreenUtils PLATFORM_PIXELS_2];
    height = [JavaLangMath maxWithFloat:height withFloat:buttonSize];
    width += buttonSize + [RAREScreenUtils PLATFORM_PIXELS_6];
  }
  width += (((RAREUIInsets *) nil_chk(margin_))->left_ + margin_->right_);
  height += (margin_->top_ + margin_->bottom_);
  size->width_ = width;
  size->height_ = height;
  if (maxWidth > 0) {
    size->width_ = [JavaLangMath minWithFloat:maxWidth withFloat:size->width_];
  }
  [RAREUtils adjustComboBoxSizeWithRAREUIDimension:size];
}

- (BOOL)hasValue {
  return [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getTextLength] > 0;
}

- (BOOL)isAutoFilter {
  return autoFilter_;
}

- (BOOL)isButtonVisible {
  return buttonVisible_;
}

- (BOOL)isEditable {
  return [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) isEditable];
}

- (BOOL)isFocusOwner {
  return [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getComponent])) isFocusOwner];
}

- (BOOL)isPopupVisible {
  return (currentPopup_ != nil) && [currentPopup_ isShowing];
}

- (BOOL)isRestrictInput {
  return restrictInput_;
}

- (BOOL)isShowPopupAsDialog {
  return showAsDialog_;
}

- (BOOL)isUseItemAttributes {
  return useItemAttributes_;
}

- (RAREUIColor *)getBorderColorWithRAREiPlatformBorder:(id<RAREiPlatformBorder>)b {
  if ([(id) b isKindOfClass:[RAREaUILineBorder class]]) {
    return [((RAREaUILineBorder *) check_class_cast(b, [RAREaUILineBorder class])) getLineColor];
  }
  if ([(id) b isKindOfClass:[RAREUICompoundBorder class]]) {
    return [self getBorderColorWithRAREiPlatformBorder:[((RAREUICompoundBorder *) check_class_cast(b, [RAREUICompoundBorder class])) getOutsideBorder]];
  }
  if ([(id) b isKindOfClass:[RAREaUIBevelBorder class]]) {
    return [((RAREaUIBevelBorder *) check_class_cast(b, [RAREaUIBevelBorder class])) getShadowOuterColor];
  }
  if ([(id) b isKindOfClass:[RAREaUIMatteBorder class]]) {
    return [((RAREaUIMatteBorder *) check_class_cast(b, [RAREaUIMatteBorder class])) getLineColor];
  }
  return [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getColorWithNSString:@"Rare.ComboBox.borderColor"];
}

- (id<RAREiActionComponent>)createButton {
  return [RAREPlatformHelper createNakedButtonWithRAREiPlatformComponent:self withBoolean:YES withInt:0];
}

- (void)setContentIntoPopupWithRAREiPopup:(id<RAREiPopup>)popup
               withRAREiPlatformComponent:(id<RAREiPlatformComponent>)content {
  [((id<RAREiPopup>) nil_chk(popup)) setContentWithRAREiPlatformComponent:content];
}

- (id<RAREiPlatformTextEditor>)createEditor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RAREiPlatformListHandler>)createListHandlerWithRAREiWidget:(id<RAREiWidget>)w
                                  withRAREiPlatformListDataModel:(id<RAREiPlatformListDataModel>)listModel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RAREiPopup>)createPopup {
  return [((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getWindowManager])) createPopupWithRAREiWidget:[RAREPlatform findWidgetForComponentWithId:self]];
}

- (void)handleEditorMousePressWithRAREMouseEvent:(RAREMouseEvent *)e {
  if (![self isEditable]) {
    if ([self isPopupVisible]) {
      [self hidePopup];
    }
    else {
      [self showPopup];
    }
  }
  else {
    id<RAREiPlatformComponent> c = [self getComponentAtWithFloat:[((RAREMouseEvent *) nil_chk(e)) getX] withFloat:[e getY] withBoolean:YES];
    if (c == downButton_) {
      if ([self isPopupVisible]) {
        [self hidePopup];
      }
      else {
        [self showPopup];
      }
    }
  }
  if (![RAREPlatform isTouchDevice]) {
    [self requestFocus];
  }
}

- (void)handleKeyPressedWithRAREKeyEvent:(RAREKeyEvent *)e {
  if ([((RAREKeyEvent *) nil_chk(e)) isConsumed]) {
    return;
  }
  BOOL showing = [self isPopupVisible];
  if ([e isTabKeyPressed]) {
    if ([e isShiftKeyPressed]) {
      [((RAREaWidget *) check_class_cast([RAREPlatform findWidgetForComponentWithId:self], [RAREaWidget class])) focusPreviousWidget];
    }
    else {
      [((RAREaWidget *) check_class_cast([RAREPlatform findWidgetForComponentWithId:self], [RAREaWidget class])) focusNextWidget];
    }
    [self keyboardActionPerformedWithRAREActionEvent:[[RAREActionEvent alloc] initWithId:self]];
    [e consume];
  }
  else if ([e isEnterKeyPressed]) {
    [self hidePopup];
    [self keyboardActionPerformedWithRAREActionEvent:[[RAREActionEvent alloc] initWithId:self]];
    [e consume];
  }
  else if ([e isEscapeKeyPressed]) {
    if (showing) {
      [self cancelPopup];
    }
    [e consume];
  }
  else if (listHandler_ != nil) {
    int n = [listHandler_ getSelectedIndex];
    int len = [listHandler_ size];
    if ([e isDownArrowKeyPressed]) {
      if (n + 1 < len) {
        [listHandler_ setSelectedIndexWithInt:n + 1];
      }
      [e consume];
    }
    if ([e isUpArrowKeyPressed]) {
      if (n > 0) {
        [listHandler_ setSelectedIndexWithInt:n - 1];
      }
      [e consume];
    }
    else if ([e isPageDownKeyPressed]) {
      int f = [listHandler_ getFirstVisibleIndex];
      int l = [listHandler_ getLastVisibleIndex];
      if ((f != -1) && (l != -1) && (l + 1 < len)) {
        f = [JavaLangMath minWithInt:len - 1 withInt:l + (l - f)];
        if (f > n) {
          [listHandler_ setSelectedIndexWithInt:n];
        }
      }
      [e consume];
    }
    else if ([e isPageUpKeyPressed]) {
      int f = [listHandler_ getFirstVisibleIndex];
      int l = [listHandler_ getLastVisibleIndex];
      if ((f != -1) && (l != -1) && (l + 1 < len)) {
        f = [JavaLangMath minWithInt:len - 1 withInt:l + (l - f)];
        if (f > n) {
          [listHandler_ setSelectedIndexWithInt:n];
        }
      }
      [e consume];
    }
    else if ([e isHomePressed]) {
      if (len > 0) {
        [listHandler_ setSelectedIndexWithInt:0];
      }
      [e consume];
    }
    else if ([e isEndPressed]) {
      if (len > 0) {
        [listHandler_ setSelectedIndexWithInt:len - 1];
      }
      [e consume];
    }
  }
}

- (void)hidePopupExWithBoolean:(BOOL)callhideOnPopup {
  if (currentPopup_ != nil) {
    id<RAREiPopup> p = currentPopup_;
    [p removePopupMenuListenerWithRAREiPopupMenuListener:self];
    if (callhideOnPopup && (listenerList_ != nil)) {
      [RAREUtils firePopupEventWithRAREEventListenerList:listenerList_ withRAREExpansionEvent:[[RAREExpansionEvent alloc] initWithId:self withRAREExpansionEvent_TypeEnum:[RAREExpansionEvent_TypeEnum WILL_COLLAPSE]] withBoolean:NO];
    }
    currentPopup_ = nil;
    if (standardBorder_ != nil) {
      (void) [standardBorder_ setFlatTopWithBoolean:NO];
      (void) [standardBorder_ setFlatBottomWithBoolean:NO];
      [self setBorderWithRAREiPlatformBorder:standardBorder_];
      [self repaint];
    }
    if (callhideOnPopup) {
      [p hidePopup];
    }
    [self popupHiddenWithRAREiPopup:p];
    [p dispose];
  }
}

- (void)initializeComboBox {
  if (!initialized_) {
    if ([self isEditable] && (autoFilter_ || restrictInput_)) {
      [((id<RAREiPlatformTextEditor>) nil_chk(editor_)) addTextChangeListenerWithRAREiTextChangeListener:self];
    }
    initialized_ = YES;
    if (buttonVisible_ && (downButton_ == nil)) {
      downButton_ = [self createButton];
      [((id<RAREiActionComponent>) nil_chk(downButton_)) setAutoAdjustSizeWithBoolean:NO];
      if (![self isEnabled]) {
        [downButton_ setEnabledWithBoolean:NO];
      }
      [downButton_ addActionListenerWithRAREiActionListener:self];
      [self addWithRAREiPlatformComponent:downButton_];
      if (buttonPainterHolder_ == nil) {
        [self setButtonPainterHolderWithRAREPainterHolder:[RAREPainterUtils createComboBoxButtonPaintHolder]];
      }
      if (useDialogButton_) {
        [self setDropDownIconWithRAREiPlatformIcon:[RAREPlatform getResourceAsIconWithNSString:@"Rare.icon.ComboBox.dialog"]];
      }
    }
  }
}

- (void)keyboardActionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  if (listHandler_ != nil) {
    [listHandler_ fireActionForSelected];
  }
  else if (listenerList_ != nil) {
    [RAREUtils fireActionEventWithRAREEventListenerList:listenerList_ withRAREActionEvent:e];
  }
}

- (void)paintButtonBackgroundWithRAREPainterHolder:(RAREPainterHolder *)ph
                         withRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                                         withFloat:(float)x
                                         withFloat:(float)y
                                         withFloat:(float)width
                                         withFloat:(float)height
            withRAREiPaintedButton_ButtonStateEnum:(RAREiPaintedButton_ButtonStateEnum *)state {
  [((RAREPainterHolder *) nil_chk(ph)) paintWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:width withFloat:height withRAREiPaintedButton_ButtonStateEnum:state withInt:RAREiPainter_HORIZONTAL withBoolean:NO];
}

- (void)paintIconWithRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)graphics {
  if (editorIcon_ != nil) {
    RAREUIInsets *in = [self getInsetsEx];
    float x = [RAREScreenUtils PLATFORM_PIXELS_2];
    float iw = [editorIcon_ getIconWidth];
    if (in != nil) {
      x += in->left_ - iw;
    }
    [editorIcon_ paintWithRAREiPlatformGraphics:graphics withFloat:x withFloat:([self getHeight] - [editorIcon_ getIconHeight]) / 2 withFloat:iw withFloat:[editorIcon_ getIconHeight]];
  }
  if ([self isButtonVisible]) {
    id<RAREiActionComponent> down = [self getPopupButton];
    RAREUIRectangle *r = [((id<RAREiActionComponent>) nil_chk(down)) getBounds];
    RAREUIColor *fg = nil;
    RAREiPaintedButton_ButtonStateEnum *state = [down getButtonState];
    id<RAREiPlatformIcon> icon = nil;
    if (buttonPainterHolder_ != nil) {
      [self paintButtonBackgroundWithRAREPainterHolder:buttonPainterHolder_ withRAREiPlatformGraphics:graphics withFloat:((RAREUIRectangle *) nil_chk(r))->x_ withFloat:r->y_ withFloat:r->width_ withFloat:r->height_ withRAREiPaintedButton_ButtonStateEnum:[down getButtonState]];
      fg = [buttonPainterHolder_ getForegroundWithRAREiPaintedButton_ButtonStateEnum:state];
      icon = [buttonPainterHolder_ getIconWithRAREiPaintedButton_ButtonStateEnum:state];
    }
    if (fg == nil) {
      fg = [RAREUIColorHelper getForeground];
      if (![down isEnabled]) {
        fg = [((RAREUIColor *) nil_chk(fg)) getDisabledColor];
      }
    }
    if (icon == nil) {
      icon = downIcon_;
    }
    if (icon != nil) {
      [RAREUtils paintCenteredIconWithRAREiPlatformGraphics:graphics withRAREiPlatformIcon:icon withFloat:((RAREUIRectangle *) nil_chk(r))->x_ withFloat:r->y_ withFloat:r->width_ withFloat:r->height_];
    }
    else {
      id<RAREiPlatformPath> p = [self getArrowWithFloat:((RAREUIRectangle *) nil_chk(r))->width_ withFloat:r->height_];
      [((id<RAREiPlatformGraphics>) nil_chk(graphics)) setColorWithRAREUIColor:fg];
      [graphics fillShapeWithRAREiPlatformShape:p withFloat:r->x_ withFloat:r->y_];
    }
  }
}

- (void)popupActionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  if (listenerList_ != nil) {
    [RAREUtils fireActionEventWithRAREEventListenerList:listenerList_ withRAREActionEvent:e];
  }
}

- (void)popupHiddenWithRAREiPopup:(id<RAREiPopup>)p {
}

- (void)getWillBecomeVisibleBoundsWithRAREUIRectangle:(RAREUIRectangle *)rect {
  if (popupBounds_ != nil) {
    [((RAREUIRectangle *) nil_chk(rect)) setWithRAREaUIRectangle:rect];
  }
  else {
    [((RAREUIRectangle *) nil_chk(rect)) setWithFloat:0 withFloat:0 withFloat:0 withFloat:0];
  }
}

- (void)showPopupEx {
  if ((currentPopup_ != nil) && [currentPopup_ isShowing]) {
    return;
  }
  [RAREPlatformHelper hideVirtualKeyboardWithRAREiPlatformComponent:self];
  popupCanceled_ = NO;
  id<RAREiPopup> p = [self createPopup];
  [((id<RAREiPopup>) nil_chk(p)) setTransientWithBoolean:YES];
  [p setFocusableWithBoolean:popupContentFocusable_];
  [p setMovableWithBoolean:NO];
  if (popupContent_ == nil) {
    id<RAREiWidget> w = [self getPopupWidget];
    if (w != nil) {
      [((id<RAREiPlatformComponent>) nil_chk([w getDataComponent])) setFocusPaintedWithBoolean:NO];
      [((id<RAREiPlatformComponent>) nil_chk([w getContainerComponent])) setFocusPaintedWithBoolean:NO];
      if ([(id) w conformsToProtocol: @protocol(RAREiPlatformListHandler)]) {
        [self setPopupContentWithRAREiPlatformListHandler:(id<RAREiPlatformListHandler>) check_protocol_cast(w, @protocol(RAREiPlatformListHandler))];
      }
      else {
        [self setPopupContentWithRAREiPlatformComponent:[w getContainerComponent]];
      }
    }
  }
  if (popupBounds_ == nil) {
    popupBounds_ = [[RAREUIRectangle alloc] init];
  }
  [self getProposedPopupBoundsWithRAREUIRectangle:popupBounds_];
  if (popupContent_ != nil) {
    [p setComponentPainterWithRAREiPlatformComponentPainter:(popupPainter_ == nil) ? defaultPopupPainter_ : popupPainter_];
    [self setContentIntoPopupWithRAREiPopup:p withRAREiPlatformComponent:popupContent_];
  }
  [self willShowPopupWithRAREiPopup:p withRAREUIRectangle:popupBounds_];
  [p setSizeWithFloat:((RAREUIRectangle *) nil_chk(popupBounds_))->width_ withFloat:popupBounds_->height_];
  [p addPopupMenuListenerWithRAREiPopupMenuListener:self];
  if (standardBorder_ != nil) {
    if (popupBounds_->y_ < -[RAREScreenUtils PLATFORM_PIXELS_6]) {
      (void) [standardBorder_ setFlatTopWithBoolean:YES];
      if (standardPopupBorder_ != nil) {
        (void) [standardPopupBorder_ setFlatBottomWithBoolean:YES];
        (void) [standardPopupBorder_ setFlatTopWithBoolean:NO];
      }
    }
    else {
      (void) [standardBorder_ setFlatBottomWithBoolean:YES];
      if (standardPopupBorder_ != nil) {
        (void) [standardPopupBorder_ setFlatTopWithBoolean:YES];
        (void) [standardPopupBorder_ setFlatBottomWithBoolean:NO];
      }
    }
    [self setBorderWithRAREiPlatformBorder:standardBorder_];
    [self repaint];
    [RAREPlatform invokeLaterWithJavaLangRunnable:[[RAREaComboBoxComponent_$2 alloc] initWithRAREaComboBoxComponent:self withRAREiPopup:p]];
  }
  else {
    currentPopup_ = p;
    [p showPopupWithRAREiPlatformComponent:self withFloat:popupBounds_->x_ withFloat:popupBounds_->y_];
  }
}

- (void)willShowPopupWithRAREiPopup:(id<RAREiPopup>)p
                withRAREUIRectangle:(RAREUIRectangle *)bounds {
  if (usingDefaultBorder_) {
    if (((RAREUIRectangle *) nil_chk(popupBounds_))->y_ < 0) {
      popupBounds_->y_ += [RAREScreenUtils PLATFORM_PIXELS_1];
    }
    else if (popupBounds_->y_ == 0) {
      popupBounds_->y_ -= [RAREScreenUtils PLATFORM_PIXELS_1];
    }
  }
}

- (id<RAREiPlatformPath>)getArrowWithFloat:(float)width
                                 withFloat:(float)height {
  id<RAREiPlatformPath> p = downArrow_;
  if (p == nil) {
    p = [RAREaPlatformHelper createPath];
    downArrow_ = p;
    downSize_ = [[RAREUIDimension alloc] init];
  }
  RAREUIDimension *d = downSize_;
  if ((((RAREUIDimension *) nil_chk(d))->height_ != height) || (d->width_ != width)) {
    p = [RAREPainterUtils drawArrowWithRAREiPlatformPath:p withFloat:width withFloat:height withBoolean:YES];
  }
  d->width_ = width;
  d->height_ = height;
  return p;
}

- (void)getMinimumSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                  withFloat:(float)maxWidth {
  if (!initialized_) {
    [self initializeComboBox];
  }
  size = [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiPlatformTextEditor>) nil_chk(editor_)) getContainer])) getMinimumSizeWithRAREUIDimension:size];
  float width = ((RAREUIDimension *) nil_chk(size))->width_;
  float height = size->height_;
  if (buttonVisible_) {
    float buttonSize = iconSize_ + [RAREScreenUtils PLATFORM_PIXELS_2];
    height = [JavaLangMath maxWithFloat:height withFloat:buttonSize];
    width += buttonSize;
  }
  width += (((RAREUIInsets *) nil_chk(margin_))->left_ + margin_->right_);
  height += (margin_->top_ + margin_->bottom_);
  size->width_ = width;
  size->height_ = height;
}

- (id<RAREiWidget>)getPopupWidget {
  return [((RAREComboBoxWidget *) check_class_cast([self getWidget], [RAREComboBoxWidget class])) getPopupWidget];
}

- (void)getProposedPopupBoundsWithRAREUIRectangle:(RAREUIRectangle *)r {
  RAREUIDimension *size = listSize_;
  if (size == nil) {
    if (listHandler_ != nil) {
      int count = [listHandler_ size];
      if (maxVisibleRows_ > 0) {
        if (count > maxVisibleRows_) {
          [listHandler_ setVisibleRowCountWithInt:maxVisibleRows_];
        }
        else {
          [listHandler_ setVisibleRowCountWithInt:0];
        }
      }
      else {
        [listHandler_ setVisibleRowCountWithInt:count];
      }
    }
    size = [((id<RAREiPlatformComponent>) nil_chk(popupContent_)) getPreferredSize];
    id<RAREiPlatformComponentPainter> p = (popupPainter_ == nil) ? defaultPopupPainter_ : popupPainter_;
    if ((p != nil) && ([p getBorder] != nil)) {
      RAREUIInsets *in = [((id<RAREiPlatformBorder>) nil_chk([p getBorder])) getBorderInsetsWithRAREUIInsets:((RAREUIInsets *) check_class_cast(nil, [RAREUIInsets class]))];
      ((RAREUIDimension *) nil_chk(size))->height_ += ((RAREUIInsets *) nil_chk(in))->top_ + in->bottom_;
      size->width_ += in->left_ + in->right_;
    }
    listSize_ = size;
  }
  [((RAREComboBoxWidget *) check_class_cast([self getWidget], [RAREComboBoxWidget class])) getProposedPopupBoundsWithRAREUIDimension:size withRAREUIRectangle:r];
}

- (BOOL)isPopupContentFocusable {
  return popupContentFocusable_;
}

- (void)setPopupContentFocusableWithBoolean:(BOOL)popupContentFocusable {
  self->popupContentFocusable_ = popupContentFocusable;
}

- (void)copyAllFieldsTo:(RAREaComboBoxComponent *)other {
  [super copyAllFieldsTo:other];
  other->autoFilter_ = autoFilter_;
  other->boxPainterHolder_ = boxPainterHolder_;
  other->buttonPainterHolder_ = buttonPainterHolder_;
  other->buttonVisible_ = buttonVisible_;
  other->currentPopup_ = currentPopup_;
  other->defaultPopupPainter_ = defaultPopupPainter_;
  other->deletingText_ = deletingText_;
  other->downArrow_ = downArrow_;
  other->downButton_ = downButton_;
  other->downIcon_ = downIcon_;
  other->downSize_ = downSize_;
  other->editor_ = editor_;
  other->editorIcon_ = editorIcon_;
  other->editorPreferredHeight_ = editorPreferredHeight_;
  other->emptyFieldColor_ = emptyFieldColor_;
  other->emptyFieldFont_ = emptyFieldFont_;
  other->emptyFieldText_ = emptyFieldText_;
  other->hasCustomPaint_ = hasCustomPaint_;
  other->iconSize_ = iconSize_;
  other->initialized_ = initialized_;
  other->isDefaultContent_ = isDefaultContent_;
  other->listHandler_ = listHandler_;
  other->listSize_ = listSize_;
  other->maxVisibleRows_ = maxVisibleRows_;
  other->popupBorder_ = popupBorder_;
  other->popupBounds_ = popupBounds_;
  other->popupCanceled_ = popupCanceled_;
  other->popupContent_ = popupContent_;
  other->popupContentFocusable_ = popupContentFocusable_;
  other->popupPainter_ = popupPainter_;
  other->restrictInput_ = restrictInput_;
  other->showAsDialog_ = showAsDialog_;
  other->standardBorder_ = standardBorder_;
  other->standardPopupBorder_ = standardPopupBorder_;
  other->startsWithFilter_ = startsWithFilter_;
  other->upButton_ = upButton_;
  other->useDialogButton_ = useDialogButton_;
  other->useItemAttributes_ = useItemAttributes_;
  other->usingDefaultBorder_ = usingDefaultBorder_;
  other->valueItem_ = valueItem_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createDefaultListHandlerWithRAREiWidget:withRAREiPlatformListDataModel:", NULL, "LRAREiPlatformListHandler", 0x1, NULL },
    { "textChangingWithId:withInt:withInt:withJavaLangCharSequence:", NULL, "Z", 0x1, NULL },
    { "setVisibleCharactersWithInt:", NULL, "V", 0x401, NULL },
    { "getTextEditor", NULL, "LRAREiPlatformTextEditor", 0x1, NULL },
    { "getEditorValue", NULL, "LNSString", 0x1, NULL },
    { "getEmptyFieldColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getEmptyFieldFont", NULL, "LRAREUIFont", 0x1, NULL },
    { "getEmptyFieldText", NULL, "LJavaLangCharSequence", 0x1, NULL },
    { "getLeftMarginIcon", NULL, "LRAREiPlatformIcon", 0x1, NULL },
    { "getPopupBorder", NULL, "LRAREiPlatformBorder", 0x1, NULL },
    { "getPopupButton", NULL, "LRAREiActionComponent", 0x1, NULL },
    { "getPopupPainter", NULL, "LRAREiPlatformComponentPainter", 0x1, NULL },
    { "hasValue", NULL, "Z", 0x1, NULL },
    { "isAutoFilter", NULL, "Z", 0x1, NULL },
    { "isButtonVisible", NULL, "Z", 0x1, NULL },
    { "isEditable", NULL, "Z", 0x1, NULL },
    { "isFocusOwner", NULL, "Z", 0x1, NULL },
    { "isPopupVisible", NULL, "Z", 0x1, NULL },
    { "isRestrictInput", NULL, "Z", 0x1, NULL },
    { "isShowPopupAsDialog", NULL, "Z", 0x1, NULL },
    { "isUseItemAttributes", NULL, "Z", 0x1, NULL },
    { "getBorderColorWithRAREiPlatformBorder:", NULL, "LRAREUIColor", 0x0, NULL },
    { "createButton", NULL, "LRAREiActionComponent", 0x4, NULL },
    { "setContentIntoPopupWithRAREiPopup:withRAREiPlatformComponent:", NULL, "V", 0x4, NULL },
    { "createEditor", NULL, "LRAREiPlatformTextEditor", 0x404, NULL },
    { "createListHandlerWithRAREiWidget:withRAREiPlatformListDataModel:", NULL, "LRAREiPlatformListHandler", 0x404, NULL },
    { "createPopup", NULL, "LRAREiPopup", 0x4, NULL },
    { "handleEditorMousePressWithRAREMouseEvent:", NULL, "V", 0x4, NULL },
    { "handleKeyPressedWithRAREKeyEvent:", NULL, "V", 0x4, NULL },
    { "hidePopupExWithBoolean:", NULL, "V", 0x4, NULL },
    { "initializeComboBox", NULL, "V", 0x4, NULL },
    { "keyboardActionPerformedWithRAREActionEvent:", NULL, "V", 0x4, NULL },
    { "paintButtonBackgroundWithRAREPainterHolder:withRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:withRAREiPaintedButton_ButtonStateEnum:", NULL, "V", 0x4, NULL },
    { "paintIconWithRAREiPlatformGraphics:", NULL, "V", 0x4, NULL },
    { "popupActionPerformedWithRAREActionEvent:", NULL, "V", 0x4, NULL },
    { "popupHiddenWithRAREiPopup:", NULL, "V", 0x4, NULL },
    { "showPopupEx", NULL, "V", 0x4, NULL },
    { "willShowPopupWithRAREiPopup:withRAREUIRectangle:", NULL, "V", 0x4, NULL },
    { "getArrowWithFloat:withFloat:", NULL, "LRAREiPlatformPath", 0x4, NULL },
    { "getMinimumSizeExWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
    { "getPopupWidget", NULL, "LRAREiWidget", 0x4, NULL },
    { "getProposedPopupBoundsWithRAREUIRectangle:", NULL, "V", 0x4, NULL },
    { "isPopupContentFocusable", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "listSize_", NULL, 0x0, "LRAREUIDimension" },
    { "buttonVisible_", NULL, 0x4, "Z" },
    { "boxPainterHolder_", NULL, 0x4, "LRAREPainterHolder" },
    { "buttonPainterHolder_", NULL, 0x4, "LRAREPainterHolder" },
    { "currentPopup_", NULL, 0x4, "LRAREiPopup" },
    { "defaultPopupPainter_", NULL, 0x4, "LRAREiPlatformComponentPainter" },
    { "downButton_", NULL, 0x4, "LRAREiActionComponent" },
    { "editor_", NULL, 0x4, "LRAREiPlatformTextEditor" },
    { "editorPreferredHeight_", NULL, 0x4, "F" },
    { "emptyFieldColor_", NULL, 0x4, "LRAREUIColor" },
    { "emptyFieldFont_", NULL, 0x4, "LRAREUIFont" },
    { "emptyFieldText_", NULL, 0x4, "LJavaLangCharSequence" },
    { "hasCustomPaint_", NULL, 0x4, "Z" },
    { "iconSize_", NULL, 0x4, "I" },
    { "initialized_", NULL, 0x4, "Z" },
    { "isDefaultContent_", NULL, 0x4, "Z" },
    { "listHandler_", NULL, 0x4, "LRAREiPlatformListHandler" },
    { "popupBorder_", NULL, 0x4, "LRAREiPlatformBorder" },
    { "popupCanceled_", NULL, 0x4, "Z" },
    { "popupContent_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "popupPainter_", NULL, 0x4, "LRAREiPlatformComponentPainter" },
    { "showAsDialog_", NULL, 0x4, "Z" },
    { "standardBorder_", NULL, 0x4, "LRAREUILineBorder" },
    { "standardPopupBorder_", NULL, 0x4, "LRAREUILineBorder" },
    { "upButton_", NULL, 0x4, "LRAREiActionComponent" },
    { "useDialogButton_", NULL, 0x4, "Z" },
    { "useItemAttributes_", NULL, 0x4, "Z" },
    { "usingDefaultBorder_", NULL, 0x4, "Z" },
    { "valueItem_", NULL, 0x4, "LRARERenderableDataItem" },
    { "restrictInput_", NULL, 0x4, "Z" },
    { "autoFilter_", NULL, 0x4, "Z" },
    { "downArrow_", NULL, 0x4, "LRAREiPlatformPath" },
    { "downIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "downSize_", NULL, 0x4, "LRAREUIDimension" },
    { "maxVisibleRows_", NULL, 0x4, "I" },
    { "popupContentFocusable_", NULL, 0x4, "Z" },
    { "popupBounds_", NULL, 0x4, "LRAREUIRectangle" },
  };
  static J2ObjcClassInfo _RAREaComboBoxComponent = { "aComboBoxComponent", "com.appnativa.rare.ui", NULL, 0x401, 43, methods, 37, fields, 0, NULL};
  return &_RAREaComboBoxComponent;
}

@end
@implementation RAREaComboBoxComponent_Listener

- (void)keyPressedWithRAREKeyEvent:(RAREKeyEvent *)e {
  [this$0_ handleKeyPressedWithRAREKeyEvent:e];
}

- (void)keyReleasedWithRAREKeyEvent:(RAREKeyEvent *)e {
}

- (void)keyTypedWithRAREKeyEvent:(RAREKeyEvent *)e {
}

- (void)mouseReleasedWithRAREMouseEvent:(RAREMouseEvent *)e {
  [this$0_ handleEditorMousePressWithRAREMouseEvent:e];
}

- (void)focusChangedWithId:(id)view
               withBoolean:(BOOL)hasFocus
                    withId:(id)oppositeView
               withBoolean:(BOOL)temporary {
  [this$0_ focusChangedWithId:view withBoolean:hasFocus withId:oppositeView withBoolean:temporary];
}

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  [this$0_ hidePopup];
  [this$0_ keyboardActionPerformedWithRAREActionEvent:e];
  [((RAREActionEvent *) nil_chk(e)) consume];
}

- (id)initWithRAREaComboBoxComponent:(RAREaComboBoxComponent *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaComboBoxComponent" },
  };
  static J2ObjcClassInfo _RAREaComboBoxComponent_Listener = { "Listener", "com.appnativa.rare.ui", "aComboBoxComponent", 0x0, 0, NULL, 1, fields, 0, NULL};
  return &_RAREaComboBoxComponent_Listener;
}

@end
@implementation RAREaComboBoxComponent_$1

- (void)run {
  [((id<RAREiPlatformTextEditor>) nil_chk([this$0_ getTextEditor])) setChangeEventsEnabledWithBoolean:YES];
}

- (id)initWithRAREaComboBoxComponent:(RAREaComboBoxComponent *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaComboBoxComponent" },
  };
  static J2ObjcClassInfo _RAREaComboBoxComponent_$1 = { "$1", "com.appnativa.rare.ui", "aComboBoxComponent", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_RAREaComboBoxComponent_$1;
}

@end
@implementation RAREaComboBoxComponent_$2

- (void)run {
  this$0_->currentPopup_ = val$p_;
  [((id<RAREiPopup>) nil_chk(val$p_)) showPopupWithRAREiPlatformComponent:this$0_ withFloat:((RAREUIRectangle *) nil_chk(this$0_->popupBounds_))->x_ withFloat:this$0_->popupBounds_->y_];
}

- (id)initWithRAREaComboBoxComponent:(RAREaComboBoxComponent *)outer$
                      withRAREiPopup:(id<RAREiPopup>)capture$0 {
  this$0_ = outer$;
  val$p_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaComboBoxComponent" },
    { "val$p_", NULL, 0x1012, "LRAREiPopup" },
  };
  static J2ObjcClassInfo _RAREaComboBoxComponent_$2 = { "$2", "com.appnativa.rare.ui", "aComboBoxComponent", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_RAREaComboBoxComponent_$2;
}

@end
