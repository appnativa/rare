//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-table_and_tree/com/appnativa/rare/viewer/aTableViewer.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/spot/Font.h"
#include "com/appnativa/rare/spot/GridCell.h"
#include "com/appnativa/rare/spot/ItemDescription.h"
#include "com/appnativa/rare/spot/ListBox.h"
#include "com/appnativa/rare/spot/Table.h"
#include "com/appnativa/rare/spot/Viewer.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIPoint.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/UIStroke.h"
#include "com/appnativa/rare/ui/aWidgetListener.h"
#include "com/appnativa/rare/ui/border/UIMatteBorder.h"
#include "com/appnativa/rare/ui/event/iExpandedListener.h"
#include "com/appnativa/rare/ui/event/iExpansionListener.h"
#include "com/appnativa/rare/ui/iListHandler.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformItemRenderer.h"
#include "com/appnativa/rare/ui/iPlatformListHandler.h"
#include "com/appnativa/rare/ui/iTableModel.h"
#include "com/appnativa/rare/ui/iTreeHandler.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/renderer/aListItemRenderer.h"
#include "com/appnativa/rare/ui/table/TableHelper.h"
#include "com/appnativa/rare/ui/table/TableStyle.h"
#include "com/appnativa/rare/ui/table/aTableHeader.h"
#include "com/appnativa/rare/ui/table/iTableComponent.h"
#include "com/appnativa/rare/util/DataItemCollection.h"
#include "com/appnativa/rare/util/ListHelper.h"
#include "com/appnativa/rare/util/SubItemComparator.h"
#include "com/appnativa/rare/viewer/aListViewer.h"
#include "com/appnativa/rare/viewer/aTableViewer.h"
#include "com/appnativa/rare/viewer/aViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTInteger.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/FilterableList.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/MutableInteger.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/iFilter.h"
#include "com/appnativa/util/iFilterableList.h"
#include "com/appnativa/util/iStringConverter.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@implementation RAREaTableViewer

- (id)init {
  return [self initRAREaTableViewerWithRAREiContainer:nil];
}

- (id)initRAREaTableViewerWithRAREiContainer:(id<RAREiContainer>)parent {
  if (self = [super initWithRAREiContainer:parent]) {
    widgetType_ = [RAREiWidget_WidgetTypeEnum Table];
    initiallySelectedIndex_ = -1;
  }
  return self;
}

- (id)initWithRAREiContainer:(id<RAREiContainer>)parent {
  return [self initRAREaTableViewerWithRAREiContainer:parent];
}

- (void)addChildWithRARERenderableDataItem:(RARERenderableDataItem *)child {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) addChildWithRARERenderableDataItem:child];
}

- (id)getSelection {
  if (selectAllAllowed_) {
    return [self getSelections];
  }
  return [self getSelectedItem];
}

- (void)addChildWithInt:(int)row
withRARERenderableDataItem:(RARERenderableDataItem *)child {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) addChildWithInt:row withRARERenderableDataItem:child];
}

- (void)addChildWithRARERenderableDataItem:(RARERenderableDataItem *)item
                withRARERenderableDataItem:(RARERenderableDataItem *)child {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) addChildWithRARERenderableDataItem:item withRARERenderableDataItem:child];
}

- (void)addChildrenWithInt:(int)row
          withJavaUtilList:(id<JavaUtilList>)children {
  if (treeHandler_ != nil) {
    [treeHandler_ addChildrenWithInt:row withJavaUtilList:children];
  }
}

- (void)addChildrenWithRARERenderableDataItem:(RARERenderableDataItem *)row
                             withJavaUtilList:(id<JavaUtilList>)children {
  if (treeHandler_ != nil) {
    [treeHandler_ addChildrenWithRARERenderableDataItem:row withJavaUtilList:children];
  }
}

- (void)addExpandedListenerWithRAREiExpandedListener:(id<RAREiExpandedListener>)l {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) addExpandedListenerWithRAREiExpandedListener:l];
}

- (void)addExpansionListenerWithRAREiExpansionListener:(id<RAREiExpansionListener>)l {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) addExpansionListenerWithRAREiExpansionListener:l];
}

- (void)addParsedRowWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  @synchronized (widgetType_) {
    if (![self isDisposed]) {
      if ((gridViewType_ == nil) && (columnCount_ == 1) && ([((RARERenderableDataItem *) nil_chk(row)) getItemCount] == 0)) {
        RARERenderableDataItem *item = [[RARERenderableDataItem alloc] init];
        [item addWithId:row];
        row = item;
      }
      [self fixColumnsWithRARERenderableDataItem:row];
      if (treeHandler_ != nil) {
        [self addTreeRowWithRARERenderableDataItem:row];
      }
      else {
        [((RARERenderableDataItem *) nil_chk(row)) setModelDataWithId:nil];
        [((id<JavaUtilList>) nil_chk([self getTempList])) addWithId:row];
      }
    }
  }
}

- (void)clearCellsWithIntArray:(IOSIntArray *)rows
                  withIntArray:(IOSIntArray *)cols
                   withBoolean:(BOOL)valueOnly {
  RARERenderableDataItem *di;
  RARERenderableDataItem *row;
  BOOL cells = NO;
  int len = (rows == nil) ? 0 : (int) [rows count];
  int clen = (cols == nil) ? 0 : (int) [cols count];
  for (int i = 0; i < len; i++) {
    row = [((id<RAREiTableModel>) nil_chk(tableModel_)) getRowWithInt:IOSIntArray_Get(nil_chk(rows), i)];
    if (row == nil) {
      continue;
    }
    if (!cells) {
      if (valueOnly) {
        [((RARERenderableDataItem *) nil_chk(row)) clearSubItemValues];
      }
      else {
        [((RARERenderableDataItem *) nil_chk(row)) clearSubItemsEx];
      }
      continue;
    }
    for (int n = 0; n < clen; n++) {
      di = [((RARERenderableDataItem *) nil_chk(row)) getItemExWithInt:IOSIntArray_Get(nil_chk(cols), n)];
      if (di != nil) {
        if (valueOnly) {
          [di setValueWithId:nil];
        }
        else {
          [di clear];
        }
      }
    }
  }
  [self refreshItems];
}

- (void)clearRootNode {
  if (treeHandler_ != nil) {
    [treeHandler_ clearRootNode];
  }
  else {
    [self clear];
  }
}

- (void)clearSelectedCellsWithBoolean:(BOOL)valueOnly {
  [self clearCellsWithIntArray:[self getSelectedIndexes] withIntArray:nil withBoolean:valueOnly];
}

- (void)collapseAll {
  if (treeHandler_ != nil) {
    [treeHandler_ collapseAll];
  }
}

- (void)collapseRowWithInt:(int)row {
  if (treeHandler_ != nil) {
    [treeHandler_ collapseRowWithInt:row];
  }
}

- (void)collapseRowWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (treeHandler_ != nil) {
    [treeHandler_ collapseRowWithRARERenderableDataItem:item];
  }
}

- (void)configureWithRARESPOTViewer:(RARESPOTViewer *)vcfg {
  [self configureExWithRARESPOTTable:(RARESPOTTable *) check_class_cast(vcfg, [RARESPOTTable class])];
  [self fireConfigureEventWithRARESPOTWidget:vcfg withNSString:[RAREiConstants EVENT_CONFIGURE]];
  RAREaTableHeader *th = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) getTableHeader];
  if ([((RAREaTableHeader *) nil_chk(th)) isVisible]) {
    RAREUIColor *c = [th getBackground];
    if (c != nil) {
      [((id<RAREiPlatformComponent>) nil_chk([self getContainerComponent])) putClientPropertyWithNSString:[RAREiConstants RARE_FILLCOLOR_PROPERTY] withId:c];
    }
  }
  [self handleDataURLWithRARESPOTWidget:vcfg];
}

- (RAREColumn *)createColumnWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if ([item isKindOfClass:[RAREColumn class]]) {
    return (RAREColumn *) check_class_cast([((RARERenderableDataItem *) nil_chk(item)) clone], [RAREColumn class]);
  }
  RAREColumn *c = [[RAREColumn alloc] init];
  [c copyExWithRARERenderableDataItem:item];
  if ([((RARERenderableDataItem *) nil_chk(item)) getValue] != nil) {
    [c setColumnTitleWithJavaLangCharSequence:[nil_chk([item getValue]) description]];
  }
  return c;
}

- (RAREColumn *)createColumnWithNSString:(NSString *)title {
  return [self createColumnWithNSString:(title == nil) ? @"" : title withInt:RARERenderableDataItem_TYPE_STRING withRAREiPlatformIcon:(id<RAREiPlatformIcon>) check_protocol_cast(nil, @protocol(RAREiPlatformIcon))];
}

- (RAREColumn *)createColumnWithNSString:(NSString *)title
                                 withInt:(int)type
                   withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  return [self createColumnWithNSString:(title == nil) ? @"" : title withId:nil withInt:type withId:nil withRAREiPlatformIcon:icon];
}

- (RAREColumn *)createColumnWithNSString:(NSString *)title
                                 withInt:(int)type
                            withNSString:(NSString *)icon {
  id<RAREiPlatformIcon> ic = nil;
  if (icon != nil) {
    ic = [self getIconWithNSString:icon withNSString:nil];
  }
  return [self createColumnWithNSString:(title == nil) ? @"" : title withId:nil withInt:type withId:nil withRAREiPlatformIcon:ic];
}

- (RAREColumn *)createColumnWithNSString:(NSString *)title
                                  withId:(id)value
                                 withInt:(int)type
                                  withId:(id)data
                   withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  return [((id<RAREiTableComponent>) nil_chk(tableHandler_)) createColumnWithNSString:title withId:value withInt:type withId:data withRAREiPlatformIcon:icon];
}

- (id<JavaUtilList>)createColumnsWithNSStringArray:(IOSObjectArray *)data {
  int len = (data == nil) ? 0 : (int) [data count];
  return [self createColumnsWithNSStringArray:data withInt:0 withInt:len];
}

- (id<JavaUtilList>)createColumnsWithNSStringArray:(IOSObjectArray *)data
                                           withInt:(int)pos
                                           withInt:(int)len {
  id<JavaUtilList> list = [[RAREUTFilterableList alloc] initWithInt:len];
  RAREColumn *col;
  len += pos;
  for (int i = 0; i < len; i++) {
    if (pos < len) {
      col = [[RAREColumn alloc] initWithJavaLangCharSequence:IOSObjectArray_Get(nil_chk(data), pos + i)];
    }
    else {
      col = [[RAREColumn alloc] initWithJavaLangCharSequence:@""];
    }
    [list addWithId:col];
  }
  return list;
}

- (RARERenderableDataItem *)createRowWithNSStringArray:(IOSObjectArray *)data {
  return [self createRowWithNSStringArray:data withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(data)) count]];
}

- (RARERenderableDataItem *)createRowWithNSObjectArray:(IOSObjectArray *)data
                                               withInt:(int)pos
                                               withInt:(int)len {
  RARERenderableDataItem *col;
  RARERenderableDataItem *row = [[RARERenderableDataItem alloc] init];
  len += pos;
  id item;
  for (int i = 0; i < columnCount_; i++) {
    if (pos < len) {
      item = IOSObjectArray_Get(nil_chk(data), pos + i);
      if ([item isKindOfClass:[NSString class]]) {
        item = [[RARERenderableDataItem alloc] initWithId:item];
      }
      else if (!([item isKindOfClass:[RARERenderableDataItem class]])) {
        item = [[RARERenderableDataItem alloc] initWithNSString:nil withId:item];
      }
      col = (RARERenderableDataItem *) check_class_cast(item, [RARERenderableDataItem class]);
    }
    else {
      col = [[RARERenderableDataItem alloc] initWithId:@""];
    }
    [row addWithId:col];
  }
  return row;
}

- (RARERenderableDataItem *)createRowWithNSStringArray:(IOSObjectArray *)data
                                               withInt:(int)pos
                                               withInt:(int)len {
  RARERenderableDataItem *row = [[RARERenderableDataItem alloc] init];
  RARERenderableDataItem *col;
  int clen = len;
  if (clen < columnCount_) {
    clen = columnCount_;
  }
  len += pos;
  for (int i = 0; i < clen; i++) {
    if (pos < len) {
      col = [[RARERenderableDataItem alloc] initWithId:IOSObjectArray_Get(nil_chk(data), pos + i)];
    }
    else {
      col = [[RARERenderableDataItem alloc] initWithId:@""];
    }
    [row addWithId:col];
  }
  return row;
}

- (void)dispose {
  if (![self isDisposable]) {
    return;
  }
  if (tableModel_ != nil) {
    [tableModel_ dispose];
  }
  if (tableHandler_ != nil) {
    [tableHandler_ dispose];
  }
  if (levelStack_ != nil) {
    [levelStack_ clear];
  }
  [super dispose];
  treeHandler_ = nil;
  levelStack_ = nil;
  tableModel_ = nil;
  tableHandler_ = nil;
}

- (void)editCellWithInt:(int)row
                withInt:(int)column {
}

- (void)expandAll {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) expandAll];
}

- (void)expandRowWithInt:(int)row {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) expandRowWithInt:row];
}

- (void)expandRowWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) expandRowWithRARERenderableDataItem:item];
}

- (BOOL)filterWithRAREUTiFilter:(id<RAREUTiFilter>)filter {
  BOOL filtered = NO;
  if (treeHandler_ != nil) {
    filtered = [treeHandler_ filterWithRAREUTiFilter:filter];
  }
  else {
    filtered = [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) filterWithRAREUTiFilter:filter];
  }
  if (filtered) {
    [self clearSelection];
    [self update];
    return YES;
  }
  return NO;
}

- (BOOL)filterWithInt:(int)col
    withRAREUTiFilter:(id<RAREUTiFilter>)filter {
  [self setActiveColumnWithInt:col];
  return [self filterWithRAREUTiFilter:filter];
}

- (BOOL)filterWithInt:(int)col
         withNSString:(NSString *)filter
          withBoolean:(BOOL)contains {
  [self setActiveColumnWithInt:col];
  return [self filterWithNSString:filter withBoolean:contains withBoolean:YES withBoolean:YES];
}

- (BOOL)filterWithNSString:(NSString *)filter
               withBoolean:(BOOL)contains
               withBoolean:(BOOL)nullPasses
               withBoolean:(BOOL)emptyPasses {
  if (treeHandler_ != nil) {
    if ([treeHandler_ filterWithNSString:filter withBoolean:contains withBoolean:nullPasses withBoolean:emptyPasses]) {
      [self clearSelection];
      [self repaint];
      return YES;
    }
  }
  else if ([((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) filterWithNSString:filter withBoolean:contains withBoolean:nullPasses withBoolean:emptyPasses]) {
    [((id<RAREiTableModel>) nil_chk(tableModel_)) tableDataChanged];
    [self clearSelection];
    [self repaint];
    return YES;
  }
  return NO;
}

- (int)findWithInt:(int)col
 withRAREUTiFilter:(id<RAREUTiFilter>)filter
           withInt:(int)start {
  [self setActiveColumnWithInt:col];
  return [super findWithRAREUTiFilter:filter withInt:start];
}

- (int)findWithInt:(int)col
      withNSString:(NSString *)filter
       withBoolean:(BOOL)contains {
  return [self findWithInt:col withNSString:filter withInt:0 withBoolean:contains];
}

- (int)findWithInt:(int)col
      withNSString:(NSString *)filter
           withInt:(int)start
       withBoolean:(BOOL)contains {
  [self setActiveColumnWithInt:col];
  return [super findWithNSString:filter withInt:start withBoolean:contains];
}

- (void)finishedParsing {
  [super finishedParsing];
  if (levelStack_ != nil) {
    [levelStack_ clear];
  }
  levelStack_ = nil;
  currentRow_ = nil;
}

- (void)handleGroupedCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  [self handleGroupedCollectionWithJavaUtilCollection:collection withBoolean:NO];
}

- (void)handleGroupedCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                                          withBoolean:(BOOL)appendCounts {
  if (self->treeHandler_ == nil) {
    [self handleCollectionWithJavaUtilCollection:collection withInt:0];
    return;
  }
  if (collection == nil) {
    return;
  }
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(collection)) iterator];
  RARERenderableDataItem *row;
  @try {
    [self startedParsing];
    [self startedLoading];
    id<JavaUtilList> list = [self getTempList];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      row = [it next];
      if (appendCounts) {
        NSString *s = [((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:0])) description];
        if ((s == nil) || ([s sequenceLength] == 0)) {
          s = [NSString stringWithFormat:@"(%d)", [((RARERenderableDataItem *) nil_chk([row getWithInt:0])) size]];
        }
        else {
          s = [NSString stringWithFormat:@"%@%@", s, [NSString stringWithFormat:@" (%d)", [((RARERenderableDataItem *) nil_chk([row getWithInt:0])) size]]];
        }
        [((RARERenderableDataItem *) nil_chk([row getWithInt:0])) setValueWithId:s];
      }
      [self fixColumnsWithRARERenderableDataItem:row];
      [((id<JavaUtilList>) nil_chk(list)) addWithId:row];
    }
    [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setDataEventsEnabledWithBoolean:NO];
    [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) setTreeEventsEnabledWithBoolean:NO];
    [treeHandler_ setAllWithJavaUtilCollection:list];
    [treeHandler_ setTreeEventsEnabledWithBoolean:YES];
    [((id<JavaUtilList>) nil_chk(list)) clear];
    tempList_ = nil;
  }
  @finally {
    [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setDataEventsEnabledWithBoolean:YES];
    [self finishedParsing];
    [self finishedLoading];
  }
}

- (void)moveColumnWithInt:(int)column
                  withInt:(int)targetColumn {
  [((id<RAREiTableComponent>) nil_chk(tableHandler_)) moveColumnWithInt:column withInt:targetColumn];
}

- (void)refreshItems {
  if (![RAREPlatform isUIThread]) {
    [RAREListHelper runLaterWithRAREiListHandler:self withRAREListHelper_RunTypeEnum:[RAREListHelper_RunTypeEnum REFRESH]];
    return;
  }
  @try {
    [self setDataEventsEnabledWithBoolean:NO];
    if (tempList_ != nil) {
      [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setAllWithJavaUtilCollection:tempList_];
      [tempList_ clear];
      tempList_ = nil;
      if (sorter_ != nil) {
        [listComponent_ sortWithJavaUtilComparator:sorter_];
        if ([(id) sorter_ isKindOfClass:[RARESubItemComparator class]]) {
          RARESubItemComparator *c = (RARESubItemComparator *) check_class_cast(sorter_, [RARESubItemComparator class]);
          if ([c getSortColumn] != -1) {
            [self setSortColumnWithInt:[c getSortColumn] withBoolean:[c isSortDescending]];
          }
        }
      }
    }
  }
  @finally {
    [self setDataEventsEnabledWithBoolean:YES];
    [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) refreshItems];
  }
}

- (void)removeExpandedListenerWithRAREiExpandedListener:(id<RAREiExpandedListener>)l {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) removeExpandedListenerWithRAREiExpandedListener:l];
}

- (void)removeExpansionListenerWithRAREiExpansionListener:(id<RAREiExpansionListener>)l {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) removeExpansionListenerWithRAREiExpansionListener:l];
}

- (void)resetDataWithJavaUtilList:(id<JavaUtilList>)rows {
  id<JavaLangRunnable> r = [[RAREaTableViewer_$1 alloc] initWithRAREaTableViewer:self withJavaUtilList:rows];
  if ([RAREPlatform isUIThread]) {
    [r run];
  }
  else {
    [RAREPlatform invokeLaterWithJavaLangRunnable:r];
  }
}

- (void)resetTableWithJavaUtilList:(id<JavaUtilList>)columns {
  [self resetTableWithJavaUtilList:columns withJavaUtilList:nil];
}

- (void)resetTableWithJavaUtilList:(id<JavaUtilList>)columns
                  withJavaUtilList:(id<JavaUtilList>)rows {
  columnCount_ = [((id<JavaUtilList>) nil_chk(columns)) size];
  [((id<RAREiTableComponent>) nil_chk(tableHandler_)) resetTableWithJavaUtilList:columns withJavaUtilList:rows];
}

- (void)rowChangedWithInt:(int)index {
  if (tableModel_ != nil) {
    [tableModel_ rowChangedWithInt:index];
  }
}

- (void)gridViewItemChangedWithInt:(int)index {
  if (tableModel_ != nil) {
    if ([((id<RAREiTableComponent>) nil_chk(tableHandler_)) getGridViewType] != nil) {
      index = (int) [JavaLangMath floorWithDouble:index / [tableHandler_ getColumnCount]];
    }
    [tableModel_ rowChangedWithInt:index];
  }
}

- (void)gridViewItemChangedWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (tableModel_ != nil) {
    if ([((id<RAREiTableComponent>) nil_chk(tableHandler_)) getGridViewType] != nil) {
      RARERenderableDataItem *parent = [((RARERenderableDataItem *) nil_chk(item)) getParentItem];
      if (parent != nil) {
        item = parent;
      }
    }
    [tableModel_ rowChangedWithRARERenderableDataItem:item];
  }
}

- (void)rowChangedWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (tableModel_ != nil) {
    [tableModel_ rowChangedWithRARERenderableDataItem:item];
  }
}

- (void)rowsChangedWithIntArray:(IOSIntArray *)rows {
  [((id<RAREiTableModel>) nil_chk(tableModel_)) rowsChangedWithIntArray:rows];
}

- (void)rowsChangedWithInt:(int)firstRow
                   withInt:(int)lastRow {
  [((id<RAREiTableModel>) nil_chk(tableModel_)) rowsChangedWithInt:firstRow withInt:lastRow];
}

- (void)sizeColumnToFitWithInt:(int)col {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)sizeColumnsToFit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (tempList_ != nil) {
    sorter_ = comparator;
    return;
  }
  if (treeHandler_ != nil) {
    [treeHandler_ sortWithJavaUtilComparator:comparator];
  }
  else {
    [((id<RAREiTableModel>) nil_chk(tableModel_)) sortWithJavaUtilComparator:comparator];
  }
}

- (void)sortWithInt:(int)col
        withBoolean:(BOOL)descending {
  [self sortWithInt:col withBoolean:descending withBoolean:NO];
}

- (void)sortWithInt:(int)col
        withBoolean:(BOOL)descending
        withBoolean:(BOOL)useLinkedData {
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  if (tempList_ != nil) {
    sorter_ = [self getComparatorWithInt:col withBoolean:descending];
    return;
  }
  [tableHandler_ sortWithInt:col withBoolean:descending withBoolean:useLinkedData];
}

- (void)sortExWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  BOOL enabled = [self isDataEventsEnabled];
  [self setDataEventsEnabledWithBoolean:NO];
  @try {
    [self sortWithJavaUtilComparator:comparator];
  }
  @finally {
    [self setDataEventsEnabledWithBoolean:enabled];
  }
}

- (void)sortExWithInt:(int)col
          withBoolean:(BOOL)descending {
  [self sortExWithInt:col withBoolean:descending withBoolean:NO];
}

- (void)sortExWithInt:(int)col
          withBoolean:(BOOL)descending
          withBoolean:(BOOL)useLinkedData {
  BOOL enabled = [self isDataEventsEnabled];
  [self setDataEventsEnabledWithBoolean:NO];
  @try {
    [self sortWithInt:col withBoolean:descending withBoolean:useLinkedData];
  }
  @finally {
    [self setDataEventsEnabledWithBoolean:enabled];
  }
}

- (void)startedParsing {
  currentRow_ = nil;
  [super startedParsing];
}

- (void)toggleRowWithInt:(int)row {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) toggleRowWithInt:row];
}

- (BOOL)unfilter {
  if (treeHandler_ != nil) {
    if ([treeHandler_ unfilter]) {
      if ([((id<RAREiTableComponent>) nil_chk(tableHandler_)) isAutoSizeRows]) {
        [tableHandler_ sizeRowsToFit];
        [self update];
      }
      return YES;
    }
  }
  else if ([super unfilter]) {
    if ([((id<RAREiTableComponent>) nil_chk(tableHandler_)) isAutoSizeRows]) {
      [tableHandler_ sizeRowsToFit];
      [self update];
    }
    return YES;
  }
  return NO;
}

- (void)setActiveColumnWithInt:(int)col {
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  [((id<RAREiTableModel>) nil_chk(tableModel_)) setActiveColumnWithInt:col];
}

- (void)setAutoScrollOnExpansionWithBoolean:(BOOL)autoScrollOnExpansion {
  if (treeHandler_ != nil) {
    [treeHandler_ setAutoScrollOnExpansionWithBoolean:autoScrollOnExpansion];
  }
}

- (void)setColumnIconWithInt:(int)col
       withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  [tableHandler_ setColumnIconWithInt:col withRAREiPlatformIcon:icon];
}

- (void)setColumnNameWithInt:(int)col
                withNSString:(NSString *)name {
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  RAREColumn *cc = [((id<RAREiTableModel>) nil_chk(tableModel_)) getColumnWithInt:col];
  ((RAREColumn *) nil_chk(cc))->columnName_ = name;
}

- (void)setColumnTitleWithInt:(int)col
                 withNSString:(NSString *)title {
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  [tableHandler_ setColumnTitleWithInt:col withJavaLangCharSequence:title];
}

- (void)setColumnVisibleWithInt:(int)col
                    withBoolean:(BOOL)visible {
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  [tableHandler_ setColumnVisibleWithInt:col withBoolean:visible];
}

- (void)setConverterWithRAREUTiStringConverter:(id<RAREUTiStringConverter>)converter {
  if (treeHandler_ != nil) {
    [treeHandler_ setConverterWithRAREUTiStringConverter:converter];
  }
  else {
    [super setConverterWithRAREUTiStringConverter:converter];
  }
}

- (void)setEditingModeWithRAREiTreeHandler_EditingModeEnum:(RAREiTreeHandler_EditingModeEnum *)mode {
}

- (void)setExpandableStateLockedWithBoolean:(BOOL)locked {
  if (treeHandler_ != nil) {
    [treeHandler_ setExpandableStateLockedWithBoolean:locked];
  }
}

- (void)setFromHTTPFormValueWithId:(id)value {
  {
    int n;
    switch (submitValueType_) {
      case RARESPOTTable_CSubmitValue_selected_index:
      if (value == nil) {
        [self setSelectedIndexWithInt:-1];
        return;
      }
      if ([value isKindOfClass:[IOSIntArray class]]) {
        [self setSelectedIndexesWithIntArray:(IOSIntArray *) check_class_cast(value, [IOSIntArray class])];
        break;
      }
      n = -1;
      if ([value isKindOfClass:[NSNumber class]]) {
        n = [((NSNumber *) check_class_cast(value, [NSNumber class])) intValue];
      }
      else {
        NSString *s = [nil_chk(value) description];
        if (([((NSString *) nil_chk(s)) sequenceLength] > 0) && [JavaLangCharacter isDigitWithChar:[s charAtWithInt:0]]) {
          n = [RAREUTSNumber intValueWithNSString:s];
        }
      }
      if ((n < -1) || (n >= [self size])) {
        n = -1;
      }
      [self setSelectedIndexWithInt:n];
      break;
      case RARESPOTTable_CSubmitValue_selected_linked_data:
      if (value != nil) {
        if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:value]) {
          [self setSelectedIndexesWithIntArray:[RARERenderableDataItem findLinkedDataObjectsExWithJavaUtilList:listComponent_ withNSObjectArray:(IOSObjectArray *) check_class_cast(value, [IOSObjectArray class])]];
        }
        else {
          [self setSelectedIndexWithInt:[self indexOfLinkedDataWithId:value]];
        }
      }
      else {
        [self setSelectedIndexWithInt:-1];
      }
      break;
      default:
      [self setValueWithId:value];
      break;
    }
  }
}

- (void)setGridViewTypeWithId:(id)type {
  if (gridViewType_ != nil) {
    if ([type isKindOfClass:[NSString class]]) {
      type = [RAREiTableComponent_GridViewTypeEnum valueOfWithNSString:[((NSString *) check_class_cast(type, [NSString class])) uppercaseStringWithJRELocale:[JavaUtilLocale US]]];
    }
    if ([type isKindOfClass:[RAREiTableComponent_GridViewTypeEnum class]]) {
      [((id<RAREiTableComponent>) nil_chk(tableHandler_)) setGridViewTypeWithRAREiTableComponent_GridViewTypeEnum:(RAREiTableComponent_GridViewTypeEnum *) type];
      gridViewType_ = [tableHandler_ getGridViewType];
    }
  }
}

- (void)setHideFilteredEmptyBranchesWithBoolean:(BOOL)hide {
}

- (void)setIndentByWithInt:(int)indent {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) setIndentByWithInt:indent];
}

- (void)setRawRowsWithJavaUtilList:(id<JavaUtilList>)rows {
  if (treeHandler_ != nil) {
    [treeHandler_ setAllWithJavaUtilCollection:rows];
  }
  else {
    [((id<RAREiTableModel>) nil_chk(tableModel_)) setAllWithJavaUtilCollection:rows];
  }
  [self refreshItems];
}

- (void)setRootNodeCollapsibleWithBoolean:(BOOL)collapsible {
}

- (void)setRowHeightWithInt:(int)row
                    withInt:(int)height {
  [((id<RAREiTableComponent>) nil_chk(tableHandler_)) setRowHeightWithInt:row withInt:height];
}

- (void)setSelectedColumnIndexWithInt:(int)index {
  [((id<RAREiTableComponent>) nil_chk(tableHandler_)) setSelectedColumnIndexWithInt:index];
}

- (void)setSelectedIndexWithInt:(int)index {
  [super setSelectedIndexWithInt:index];
  [((id<RAREiTableComponent>) nil_chk(tableHandler_)) setSelectedColumnIndexWithInt:0];
}

- (int)getGridViewSelectedPoistion {
  int index = [self getSelectedIndex];
  if ([((id<RAREiTableComponent>) nil_chk(tableHandler_)) getGridViewType] != nil) {
    int col = [self getSelectedColumn];
    index = (index * [self getRowCount]) + col;
  }
  return index;
}

- (void)setGridViewSelectedPositionWithInt:(int)index {
  if ([((id<RAREiTableComponent>) nil_chk(tableHandler_)) getGridViewType] != nil) {
    int n = [tableHandler_ getColumnCount];
    int row = (int) [JavaLangMath floorWithDouble:index / n];
    int col = index % n;
    [super setSelectedIndexWithInt:row];
    [tableHandler_ setSelectedColumnIndexWithInt:col];
  }
  else {
    [super setSelectedIndexWithInt:index];
    [tableHandler_ setSelectedColumnIndexWithInt:0];
  }
}

- (void)setSelectedItemWithRARERenderableDataItem:(RARERenderableDataItem *)value {
  if (!columnSelectionAllowed_ || (value == nil)) {
    [super setSelectedItemWithRARERenderableDataItem:value];
  }
  else {
    RARERenderableDataItem *parent = [value getParentItem];
    if (parent == nil) {
      [super setSelectedItemWithRARERenderableDataItem:value];
      return;
    }
    int n = [self indexOfWithId:parent];
    if (n != -1) {
      int c = [((RARERenderableDataItem *) nil_chk(parent)) indexOfWithId:value];
      if (c != -1) {
        [super setSelectedIndexWithInt:n];
        [((id<RAREiTableComponent>) nil_chk(tableHandler_)) setSelectedColumnIndexWithInt:c];
      }
    }
  }
}

- (void)setSelectedColumnIndicesWithIntArray:(IOSIntArray *)indices {
  [((id<RAREiTableComponent>) nil_chk(tableHandler_)) setSelectedColumnIndicesWithIntArray:indices];
}

- (void)setShowRootHandlesWithBoolean:(BOOL)show {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) setShowRootHandlesWithBoolean:show];
}

- (void)setShowRootNodeWithBoolean:(BOOL)show {
  if (treeHandler_ == nil) {
    return;
  }
  [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) setShowRootNodeWithBoolean:show];
}

- (void)setSingleClickToggleWithBoolean:(BOOL)singleClickToggle {
  if (treeHandler_ != nil) {
    [treeHandler_ setSingleClickToggleWithBoolean:singleClickToggle];
  }
}

- (void)setSortColumnWithInt:(int)col
                 withBoolean:(BOOL)descending {
  [((id<RAREiTableComponent>) nil_chk(tableHandler_)) setSortColumnWithInt:col withBoolean:descending];
}

- (void)setToggleOnTwistyOnlyWithBoolean:(BOOL)twistyOnly {
  if (treeHandler_ != nil) {
    [treeHandler_ setToggleOnTwistyOnlyWithBoolean:twistyOnly];
  }
}

- (void)setTreeEventsEnabledWithBoolean:(BOOL)enabled {
  if (treeHandler_ != nil) {
    [treeHandler_ setTreeEventsEnabledWithBoolean:enabled];
  }
}

- (void)setTwistyMarginOfErrorWithInt:(int)twistyMarginOfError {
  if (treeHandler_ != nil) {
    [treeHandler_ setTwistyMarginOfErrorWithInt:twistyMarginOfError];
  }
}

- (void)setValueAtWithInt:(int)row
                  withInt:(int)col
                   withId:(id)value {
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  RARERenderableDataItem *item = [self getItemAtWithInt:row withInt:col];
  [((RARERenderableDataItem *) nil_chk(item)) setValueWithId:value];
  [((id<RAREiTableModel>) nil_chk(tableModel_)) rowChangedWithInt:row];
}

- (id<JavaUtilList>)getChildRowsWithJavaUtilList:(id<JavaUtilList>)list {
  if ([self isEmpty]) {
    return [JavaUtilCollections EMPTY_LIST];
  }
  id<JavaUtilList> rows = [self getRawRows];
  int ecol = [self getExpandableColumn];
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] init];
  }
  int len = [((id<JavaUtilList>) nil_chk(rows)) size];
  for (int i = 0; i < len; i++) {
    id<RAREUTiFilterableList> items = [((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk([rows getWithInt:i])) getWithInt:ecol])) getItems];
    if (items != nil) {
      [((id<JavaUtilList>) nil_chk(list)) addAllWithJavaUtilCollection:items];
    }
  }
  return list;
}

- (int)getCoilumnIndexAtWithRAREUIPoint:(RAREUIPoint *)p {
  return (p == nil) ? -1 : [self getColumnIndexAtWithFloat:p->x_ withFloat:p->y_];
}

- (RAREColumn *)getColumnWithInt:(int)col {
  if (col < 0) {
    return nil;
  }
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  return [((id<RAREiTableModel>) nil_chk(tableModel_)) getColumnWithInt:col];
}

- (int)getColumnCount {
  return [((id<RAREiTableModel>) nil_chk(tableModel_)) getColumnCount];
}

- (int)getColumnIndexAtWithFloat:(float)x
                       withFloat:(float)y {
  return [((id<RAREiTableComponent>) nil_chk(tableHandler_)) getColumnIndexAtWithFloat:x withFloat:y];
}

- (NSString *)getColumnNameWithInt:(int)col {
  if (col < 0) {
    return nil;
  }
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  RAREColumn *c = [((id<RAREiTableModel>) nil_chk(tableModel_)) getColumnWithInt:col];
  return (((RAREColumn *) nil_chk(c))->columnName_ == nil) ? nil : c->columnName_;
}

- (id<JavaLangCharSequence>)getColumnTitleWithInt:(int)col {
  if (col < 0) {
    return nil;
  }
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  RAREColumn *c = [((id<RAREiTableModel>) nil_chk(tableModel_)) getColumnWithInt:col];
  return (c == nil) ? nil : [c getColumnTitle];
}

- (id<JavaUtilList>)getColumns {
  return [JavaUtilCollections unmodifiableListWithJavaUtilList:[((id<RAREiTableModel>) nil_chk(tableModel_)) getColumns]];
}

- (id<RAREUTiStringConverter>)getConverter {
  if (treeHandler_ != nil) {
    return [treeHandler_ getConverter];
  }
  else {
    return [super getConverter];
  }
}

- (id<JavaUtilList>)getDisplayColumns {
  return [((id<RAREiTableModel>) nil_chk(tableModel_)) getColumns];
}

- (int)getEditingColumn {
  return -1;
}

- (int)getExpandableColumn {
  if (treeHandler_ == nil) {
    return -1;
  }
  return [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) getExpandableColumn];
}

- (int)getFirstVisibleColumnIndex {
  return [((id<RAREiTableComponent>) nil_chk(tableHandler_)) getFirstVisibleColumnIndex];
}

- (int)getLastVisibleColumnIndex {
  return [((id<RAREiTableComponent>) nil_chk(tableHandler_)) getLastVisibleColumnIndex];
}

- (RAREiTableComponent_GridViewTypeEnum *)getGridViewType {
  return gridViewType_;
}

- (id)getHTTPFormValue {
  if (![self hasSelection]) {
    return nil;
  }
  switch (submitValueType_) {
    case RARESPOTTable_CSubmitValue_selected_index:
    if (!selectAllAllowed_) {
      return [JavaLangInteger valueOfWithInt:[self getSelectedIndex]];
    }
    return [self getSelectedIndexes];
    case RARESPOTTable_CSubmitValue_selected_linked_data:
    if (!selectAllAllowed_) {
      return [self getSelectionDataAsString];
    }
    return [self getSelectionsDataAsStrings];
    case RARESPOTTable_CSubmitValue_selected_specific_column_linked_data:
    if (!selectAllAllowed_) {
      return [self getSelectionDataAsStringWithInt:submitColumn_];
    }
    return [self toStringWithId:[self getSelectionDataWithInt:submitColumn_]];
    case RARESPOTTable_CSubmitValue_selected_specific_column_value_text:
    if (!selectAllAllowed_) {
      return [self getSelectionAsStringWithInt:submitColumn_];
    }
    return [self toStringWithId:[self getSelectionWithInt:submitColumn_]];
    default:
    if (!selectAllAllowed_) {
      return [self getSelection];
    }
    return [self getSelections];
  }
}

- (RARERenderableDataItem *)getItemWithInt:(int)row
                                   withInt:(int)col {
  return [self getItemAtWithInt:row withInt:col];
}

- (RARERenderableDataItem *)getItemAtWithInt:(int)row
                                     withInt:(int)col {
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  return [((id<RAREiTableModel>) nil_chk(tableModel_)) getItemAtWithInt:row withInt:col];
}

- (RAREUIRectangle *)getItemBoundsWithInt:(int)row
                                  withInt:(int)col {
  return [((id<RAREiTableComponent>) nil_chk(tableHandler_)) getCellRectWithInt:row withInt:col withBoolean:YES];
}

- (RARERenderableDataItem *)getParentWithInt:(int)index {
  int n = [self getParentIndexWithInt:index];
  return (n == -1) ? nil : [self getWithInt:n];
}

- (int)getParentIndexWithInt:(int)index {
  if (treeHandler_ == nil) {
    return -1;
  }
  RARERenderableDataItem *item = [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) getParentWithInt:index];
  if (item == nil) {
    return -1;
  }
  while (index > 0) {
    index--;
    if ([self getWithInt:index] == item) {
      return index;
    }
  }
  return -1;
}

- (int)getPopupMenuIndex {
  int n = [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) getPopupMenuIndex];
  return (n == -1) ? [self getSelectedIndex] : n;
}

- (RARERenderableDataItem *)getPopupMenuItem {
  int row = [self getPopupMenuIndex];
  return (row == -1) ? nil : [((id<RAREiTableModel>) nil_chk(tableModel_)) getWithInt:row];
}

- (id<JavaUtilList>)getRawRows {
  if (treeHandler_ != nil) {
    return [treeHandler_ getRawRows];
  }
  return [((id<RAREiTableModel>) nil_chk(tableModel_)) getRowsEx];
}

- (RARERenderableDataItem *)getRootItem {
  if (treeHandler_ != nil) {
    return [treeHandler_ getRootItem];
  }
  return nil;
}

- (int)getSelectedColumn {
  return [((id<RAREiTableComponent>) nil_chk(tableHandler_)) getSelectedColumn];
}

- (RARERenderableDataItem *)getSelectedItem {
  if (!columnSelectionAllowed_) {
    return [super getSelectedItem];
  }
  int col = [self getSelectedColumn];
  if (col == -1) {
    return [super getSelectedItem];
  }
  RARERenderableDataItem *item = [super getSelectedItem];
  return (item == nil) ? nil : [item getItemExWithInt:col];
}

- (id)getSelectionWithInt:(int)col {
  if (![self hasSelection]) {
    return nil;
  }
  if (col == -1) {
    col = [self getSelectedColumn];
    if (col == -1) {
      col = 0;
    }
  }
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  if (!selectAllAllowed_) {
    return [((id<RAREiTableModel>) nil_chk(tableModel_)) getItemAtWithInt:[self getSelectedIndex] withInt:col];
  }
  IOSIntArray *sels = [self getSelectedIndexes];
  int len = (int) [((IOSIntArray *) nil_chk(sels)) count];
  IOSObjectArray *a = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[RARERenderableDataItem class]]];
  for (int i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(a, i, [((id<RAREiTableModel>) nil_chk(tableModel_)) getItemAtWithInt:IOSIntArray_Get(sels, i) withInt:col]);
  }
  return a;
}

- (NSString *)getSelectionAsStringWithInt:(int)col {
  id o = [self getSelectionWithInt:col];
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:o]) {
    return [RAREUTHelper toStringWithNSObjectArray:(IOSObjectArray *) check_class_cast(o, [IOSObjectArray class]) withNSString:@"\t"];
  }
  return (o == nil) ? nil : [o description];
}

- (id)getSelectionDataWithInt:(int)col {
  col = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) convertViewIndexToModelWithInt:col];
  return [RAREDataItemCollection getSelectionDataWithRAREiListHandler:self withBoolean:selectAllAllowed_ withInt:col];
}

- (NSString *)getSelectionDataAsStringWithInt:(int)col {
  id o = [self getSelectionDataWithInt:col];
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:o]) {
    return [RAREUTHelper toStringWithNSObjectArray:(IOSObjectArray *) check_class_cast(o, [IOSObjectArray class]) withNSString:@"\t"];
  }
  return (o == nil) ? nil : [o description];
}

- (IOSObjectArray *)getSelections {
  IOSObjectArray *b = nil;
  IOSIntArray *sels = [self getSelectedIndexes];
  if (sels != nil) {
    int len = (int) [sels count];
    b = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[RARERenderableDataItem class]]];
    for (int i = 0; i < len; i++) {
      (void) IOSObjectArray_Set(b, i, [self getConvertedRowWithInt:IOSIntArray_Get(sels, i)]);
    }
  }
  return b;
}

- (IOSObjectArray *)getSelectionsAsStrings {
  return [self getSelectionsAsStringsWithBoolean:NO];
}

- (IOSObjectArray *)getSelectionsDataAsStrings {
  return [self getSelectionsAsStringsWithBoolean:YES];
}

- (int)getSortColumn {
  return [((id<RAREiTableComponent>) nil_chk(tableHandler_)) getSortColumn];
}

- (id<RAREiTableComponent>)getTableComponent {
  return tableHandler_;
}

- (int)getTwistyMarginOfError {
  if (treeHandler_ != nil) {
    return [treeHandler_ getTwistyMarginOfError];
  }
  return 0;
}

- (id)getValueAtWithInt:(int)row
                withInt:(int)col {
  RARERenderableDataItem *item = [self getItemAtWithInt:row withInt:col];
  return (item == nil) ? nil : [item getValue];
}

- (void)convertWithInt:(int)col
withRARERenderableDataItem:(RARERenderableDataItem *)item {
  RAREColumn *c = [self getColumnWithInt:col];
  [((RAREColumn *) nil_chk(c)) convertWithRAREiWidget:self withRARERenderableDataItem:item];
}

- (BOOL)isAutoScrollOnExpansion {
  if (treeHandler_ != nil) {
    return [treeHandler_ isAutoScrollOnExpansion];
  }
  return NO;
}

- (BOOL)isExpandableStateLocked {
  if (treeHandler_ != nil) {
    return [treeHandler_ isExpandableStateLocked];
  }
  return NO;
}

- (BOOL)isFiltered {
  if (treeHandler_ != nil) {
    return [treeHandler_ isFiltered];
  }
  return NO;
}

- (BOOL)isHideFilteredEmptyBranches {
  return NO;
}

- (BOOL)isItemEditableWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (treeHandler_ != nil) {
    return [treeHandler_ isItemEditableWithRARERenderableDataItem:item];
  }
  return NO;
}

- (BOOL)isLeafItemWithInt:(int)index {
  if (treeHandler_ != nil) {
    return [treeHandler_ isLeafItemWithInt:index];
  }
  return NO;
}

- (BOOL)isRootNodeCollapsible {
  return NO;
}

- (BOOL)isRowExpandedWithInt:(int)row {
  if (treeHandler_ == nil) {
    return NO;
  }
  return [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) isRowExpandedWithInt:row];
}

- (BOOL)isRowExpandedWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (treeHandler_ == nil) {
    return NO;
  }
  return [((id<RAREiTreeHandler>) nil_chk(treeHandler_)) isRowExpandedWithRARERenderableDataItem:item];
}

- (BOOL)isSingleClickToggle {
  if (treeHandler_ != nil) {
    return [treeHandler_ isSingleClickToggle];
  }
  return NO;
}

- (BOOL)isSortDescending {
  return [((id<RAREiTableComponent>) nil_chk(tableHandler_)) isSortDescending];
}

- (BOOL)isTabular {
  return YES;
}

- (BOOL)isToggleOnTwistyOnly {
  if (treeHandler_ != nil) {
    return [treeHandler_ isToggleOnTwistyOnly];
  }
  return NO;
}

- (BOOL)isTreeTable {
  return treeHandler_ != nil;
}

- (void)addTreeRowWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  id o = [((RARERenderableDataItem *) nil_chk(row)) getModelData];
  int l = 1;
  if ([o isKindOfClass:[RAREUTMutableInteger class]]) {
    RAREUTMutableInteger *level = (RAREUTMutableInteger *) check_class_cast(o, [RAREUTMutableInteger class]);
    [row setModelDataWithId:nil];
    l = [((RAREUTMutableInteger *) nil_chk(level)) intValue];
    if (l < 1) {
      l = 1;
    }
  }
  if ((l < 2) || (currentRow_ == nil)) {
    [((id<JavaUtilList>) nil_chk([self getTempList])) addWithId:row];
    currentRow_ = row;
    if (levelStack_ != nil) {
      [levelStack_ clear];
    }
  }
  else {
    RARERenderableDataItem *ci = nil;
    if (levelStack_ == nil) {
      levelStack_ = [[JavaUtilLinkedList alloc] init];
    }
    int currentLevel = [((JavaUtilLinkedList *) nil_chk(levelStack_)) size] + 1;
    if (currentLevel > l) {
      while (currentLevel > l) {
        (void) [levelStack_ poll];
        currentLevel--;
      }
      [((RARERenderableDataItem *) nil_chk([levelStack_ peek])) addWithId:row];
    }
    else if (currentLevel == l) {
      [((RARERenderableDataItem *) nil_chk([levelStack_ peek])) addWithId:row];
    }
    else {
      ci = currentRow_;
      ci = [ci getItemWithInt:[((id<RAREiTreeHandler>) nil_chk(treeHandler_)) getExpandableColumn]];
      [((RARERenderableDataItem *) nil_chk(ci)) addWithId:row];
      if ([levelStack_ peek] != currentRow_) {
        [levelStack_ addWithInt:0 withId:ci];
      }
    }
    currentRow_ = row;
  }
}

- (void)configureExWithRARESPOTTable:(RARESPOTTable *)cfg {
  [self createModelAndComponentsWithRARESPOTViewer:cfg];
  [self configureExWithRARESPOTViewer:cfg withBoolean:YES withBoolean:YES withBoolean:YES];
  if (![((SPOTBoolean *) nil_chk(((RARESPOTTable *) nil_chk(cfg))->focusPainted_)) spot_hasValue] || ![cfg->focusPainted_ booleanValue]) {
    [((id<RAREiPlatformComponent>) nil_chk(formComponent_)) setFocusPaintedWithBoolean:YES];
  }
  id<RAREiPlatformListHandler> comp = listComponent_;
  id<RAREiTableComponent> table = tableHandler_;
  [self setSubItemsWithRAREUTiFilterableList:tableModel_];
  [((id<RAREiPlatformListHandler>) nil_chk(comp)) setDeselectEventsDisabledWithBoolean:![((SPOTBoolean *) nil_chk(cfg->deselectEventsEnabled_)) booleanValue]];
  [comp setSingleClickActionWithBoolean:[((SPOTBoolean *) nil_chk(cfg->singleClickActionEnabled_)) booleanValue]];
  switch ([((RARESPOTTable_CSelectionMode *) nil_chk(cfg->selectionMode_)) intValue]) {
    case RARESPOTListBox_CSelectionMode_multiple:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum MULTIPLE]];
    break;
    case RARESPOTListBox_CSelectionMode_block:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum BLOCK]];
    break;
    case RARESPOTListBox_CSelectionMode_invisible:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum INVISIBLE]];
    break;
    case RARESPOTListBox_CSelectionMode_none:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum NONE]];
    break;
    default:
    [self setSelectionModeWithRAREiListHandler_SelectionModeEnum:[RAREiListHandler_SelectionModeEnum SINGLE]];
    break;
  }
  RARETableStyle *tableStyle = [[RARETableStyle alloc] init];
  if ([((SPOTInteger *) nil_chk(cfg->visibleRowCount_)) spot_valueWasSet]) {
    int n = [cfg->visibleRowCount_ intValue];
    [comp setVisibleRowCountWithInt:n];
  }
  else {
    [((id<RAREiPlatformListHandler>) nil_chk(listComponent_)) setVisibleRowCountWithInt:[RARETableHelper getDefaultPreferredRows]];
  }
  listComponent_ = comp;
  tableStyle->columnReorderingAllowed_ = [((SPOTBoolean *) nil_chk(cfg->columnReorderingAllowed_)) booleanValue];
  tableStyle->columnResizingAllowed_ = [((SPOTBoolean *) nil_chk(cfg->columnResizingAllowed_)) booleanValue];
  tableStyle->columnSortingAllowed_ = [((SPOTBoolean *) nil_chk(cfg->columnSortingAllowed_)) booleanValue];
  tableStyle->columnSelectionAllowed_ = [((SPOTBoolean *) nil_chk(cfg->columnSelectionAllowed_)) booleanValue];
  tableStyle->extendBackgroundRendering_ = [((SPOTBoolean *) nil_chk(cfg->extendBackgroundRendering_)) booleanValue];
  tableStyle->colHeaderHotspotsSupported_ = [((SPOTBoolean *) nil_chk(cfg->colHeaderHotspotsSupported_)) booleanValue];
  tableStyle->sortColumnHiliteColor_ = [self getColorWithNSString:[((SPOTPrintableString *) nil_chk(cfg->sortColumnHighlightColor_)) getValue]];
  tableStyle->hiliteSortColumn_ = [((SPOTBoolean *) nil_chk(cfg->highlightSortColumn_)) booleanValue];
  tableStyle->rowHeaderFooterSelectionPainted_ = [((SPOTBoolean *) nil_chk(cfg->rowHeaderFooterSelectionPainted_)) booleanValue];
  tableStyle->backgroundHiliteColor_ = [self getColorWithNSString:[((SPOTPrintableString *) nil_chk(cfg->alternatingHighlightColor_)) getValue]];
  tableStyle->headerForeground_ = [self getColorWithNSString:[((SPOTPrintableString *) nil_chk(cfg->headerFgColor_)) getValue]];
  tableStyle->headerFont_ = [self getFontWithRARESPOTFont:cfg->headerFont_];
  if ([((SPOTBoolean *) nil_chk(cfg->boldColumnHeaders_)) booleanValue]) {
    if (tableStyle->headerFont_ == nil) {
      tableStyle->headerFont_ = [((RAREUIFont *) nil_chk([self getFont])) deriveBold];
    }
    else {
      tableStyle->headerFont_ = [tableStyle->headerFont_ deriveBold];
    }
  }
  if ([((SPOTPrintableString *) nil_chk(cfg->headerBgColor_)) spot_hasValue]) {
    [((id<RAREiTableComponent>) nil_chk(table)) setHeaderBackgroundWithRAREPaintBucket:[RAREUIColorHelper getPaintBucketWithSPOTPrintableString:cfg->headerBgColor_]];
  }
  tableStyle->headerCellPainter_ = [RAREUIColorHelper configureWithRAREiWidget:self withRARESPOTGridCell:[cfg getHeaderCell] withRAREPaintBucket:nil];
  tableStyle->headerFillerPainter_ = [RAREUIColorHelper configureWithRAREiWidget:self withRARESPOTGridCell:[cfg getHeaderRightFillerCell] withRAREPaintBucket:nil];
  if ((tableStyle->sortColumnHiliteColor_ == nil) && tableStyle->hiliteSortColumn_) {
    tableStyle->sortColumnHiliteColor_ = [[RAREUIColor alloc] initWithInt:0 withInt:0 withInt:0 withInt:10];
  }
  switch ([((RARESPOTTable_CAlternatingHighlightType *) nil_chk(cfg->alternatingHighlightType_)) intValue]) {
    case RARESPOTTable_CAlternatingHighlightType_row:
    tableStyle->backgroundHilite_ = [RARETableStyle_BackgroundHighlightEnum ROW];
    break;
    case RARESPOTTable_CAlternatingHighlightType_column:
    tableStyle->backgroundHilite_ = [RARETableStyle_BackgroundHighlightEnum COLUMN];
    break;
    default:
    break;
  }
  if ((tableStyle->backgroundHiliteColor_ == nil) && (tableStyle->backgroundHilite_ != nil)) {
    tableStyle->backgroundHiliteColor_ = [[RAREUIColor alloc] initWithInt:247 withInt:247 withInt:247];
  }
  if ([((SPOTBoolean *) nil_chk(cfg->displayAsGridView_)) booleanValue] && ![((RARESPOTTable_CGridLineType *) nil_chk(cfg->gridLineType_)) spot_valueWasSet]) {
    tableStyle->showHorizontalLines_ = NO;
    tableStyle->showVerticalLines_ = NO;
  }
  else {
    switch ([((RARESPOTTable_CGridLineType *) nil_chk(cfg->gridLineType_)) intValue]) {
      case RARESPOTTable_CGridLineType_both:
      tableStyle->showHorizontalLines_ = YES;
      tableStyle->showVerticalLines_ = YES;
      break;
      case RARESPOTTable_CGridLineType_horizontal_lines:
      tableStyle->showHorizontalLines_ = YES;
      break;
      case RARESPOTTable_CGridLineType_vertical_lines:
      tableStyle->showVerticalLines_ = YES;
      break;
      default:
      break;
    }
  }
  tableStyle->gridColor_ = [self getColorWithNSString:[((SPOTPrintableString *) nil_chk(cfg->gridLineColor_)) getValue]];
  if ((tableStyle->gridColor_ == nil) && (tableStyle->showVerticalLines_ || tableStyle->showHorizontalLines_)) {
    tableStyle->gridColor_ = [RAREColorUtils getListDividerColor];
  }
  switch ([((RARESPOTTable_CGridLineStyle *) nil_chk(cfg->gridLineStyle_)) intValue]) {
    case RARESPOTTable_CGridLineStyle_dotted:
    tableStyle->gridLineStroke_ = [RAREUIStroke DOTTED_STROKE];
    break;
    case RARESPOTTable_CGridLineStyle_dashed:
    tableStyle->gridLineStroke_ = [RAREUIStroke DASHED_STROKE];
    break;
    default:
    tableStyle->gridLineStroke_ = [RAREUIStroke SOLID_STROKE];
    break;
  }
  tableStyle->headerMarginColor_ = [self getColorWithNSString:[((SPOTPrintableString *) nil_chk(cfg->headerSeparatorColor_)) getValue]];
  tableStyle->headerBottomMarginColor_ = [self getColorWithNSString:[((SPOTPrintableString *) nil_chk(cfg->headerBottomSeparatorColor_)) getValue]];
  BOOL wordWrap = [((SPOTBoolean *) nil_chk(cfg->wordWrapByDefault_)) booleanValue];
  if (![((SPOTBoolean *) nil_chk(cfg->autoSizeColumnsToFit_)) booleanValue] && [((SPOTBoolean *) nil_chk(cfg->autoSizeRowsToFit_)) booleanValue]) {
    wordWrap = YES;
  }
  int len = [((SPOTSet *) nil_chk(cfg->columns_)) size];
  JavaUtilArrayList *columns = [[JavaUtilArrayList alloc] initWithInt:(len == 0) ? 10 : len];
  RAREColumn *col;
  RAREUIFont *headerFont = tableStyle->headerFont_;
  for (int i = 0; i < len; i++) {
    RARESPOTItemDescription *id_ = (RARESPOTItemDescription *) check_class_cast([cfg->columns_ getExWithInt:i], [RARESPOTItemDescription class]);
    col = [self createColumnWithRARESPOTItemDescription:id_];
    if (wordWrap && ![((SPOTBoolean *) nil_chk(((RARESPOTItemDescription *) nil_chk(id_))->wordWrap_)) spot_valueWasSet]) {
      ((RAREColumn *) nil_chk(col))->wordWrap_ = YES;
    }
    [col setWidthWithInt:[((RAREColumn *) nil_chk(col)) calculatePreferedWidthWithRAREiPlatformComponent:dataComponent_ withFloat:400]];
    if ([col getHeaderFont] == nil) {
      [col setHeaderFontWithRAREUIFont:headerFont];
    }
    [columns addWithId:col];
  }
  if (len == 0) {
    col = [[RAREColumn alloc] initWithJavaLangCharSequence:@" "];
    if (wordWrap) {
      col->wordWrap_ = YES;
    }
    [col setHeaderFontWithRAREUIFont:headerFont];
  }
  columnCount_ = len;
  [((id<RAREiTableModel>) nil_chk(tableModel_)) resetModelWithJavaUtilList:columns withRAREUTiFilterableList:[[RAREUTFilterableList alloc] init]];
  [self configureSelectionModelGroupWithSPOTPrintableString:cfg->selectionGroupName_ withId:[[NSObject alloc] init]];
  [self setSubItemsWithRAREUTiFilterableList:tableModel_];
  NSString *s = nil;
  if ([((SPOTPrintableString *) nil_chk(cfg->rowHeight_)) spot_valueWasSet]) {
    s = [cfg->rowHeight_ getValue];
  }
  if (s == nil) {
    s = [RAREPlatformHelper getDefaultRowHeight];
  }
  [self setRowHeightWithInt:[RAREUIScreen toPlatformPixelHeightWithNSString:s withRAREiPlatformComponent:dataComponent_ withFloat:400 withBoolean:YES]];
  RAREPaintBucket *pb = [RAREColorUtils configureWithRAREiWidget:self withRARESPOTGridCell:[cfg getSelectionPainter] withRAREPaintBucket:nil];
  if (pb != nil) {
    [((id<RAREiPlatformItemRenderer>) nil_chk([listComponent_ getItemRenderer])) setSelectionPaintWithRAREPaintBucket:pb];
  }
  if ([((SPOTBoolean *) nil_chk(cfg->changeSelColorOnLostFocus_)) booleanValue]) {
    [listComponent_ setChangeSelColorOnLostFocusWithBoolean:YES];
    pb = [RAREColorUtils configureWithRAREiWidget:self withRARESPOTGridCell:[cfg getLostFocusSelectionPainter] withRAREPaintBucket:nil];
    if (pb != nil) {
      [((id<RAREiPlatformItemRenderer>) nil_chk([listComponent_ getItemRenderer])) setSelectionPaintWithRAREPaintBucket:pb];
    }
  }
  int initialSortColumn = -1;
  if ([((SPOTInteger *) nil_chk(cfg->sortedByColumn_)) spot_hasValue]) {
    initialSortColumn = [cfg->sortedByColumn_ intValue];
  }
  if (initialSortColumn != -1) {
    [((id<RAREiTableComponent>) nil_chk(tableHandler_)) setSortColumnWithInt:initialSortColumn withBoolean:[@"true" isEqual:[cfg->sortedByColumn_ spot_getAttributeWithNSString:@"descending"]]];
  }
  [listComponent_ setHandleFirstFocusSelectionWithBoolean:[((SPOTBoolean *) nil_chk(cfg->handleFirstFocusSelection_)) booleanValue]];
  initiallySelectedIndex_ = [((SPOTInteger *) nil_chk(cfg->selectedIndex_)) intValue];
  submitValueType_ = [((RARESPOTTable_CSubmitValue *) nil_chk(cfg->submitValue_)) intValue];
  submitColumn_ = [((SPOTInteger *) nil_chk(cfg->submitColumn_)) intValue];
  if ((submitColumn_ < 0) || (submitColumn_ > columnCount_)) {
    submitColumn_ = 0;
  }
  gridViewType_ = [((id<RAREiTableComponent>) nil_chk(tableHandler_)) getGridViewType];
  columnSelectionAllowed_ = tableStyle->columnSelectionAllowed_ || (gridViewType_ != nil);
  [((id<RAREiTableComponent>) nil_chk(table)) setStyleWithRARETableStyle:tableStyle];
  [table setTable];
}

- (void)convertRowsWithIntArray:(IOSIntArray *)sels {
  int len = (sels == nil) ? 0 : (int) [sels count];
  for (int i = 0; i < len; i++) {
    (void) [self getConvertedRowWithInt:i];
  }
}

- (void)fixColumnsWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  int len = [((RARERenderableDataItem *) nil_chk(item)) getItemCount];
  if (len < columnCount_) {
    [item setItemCountWithInt:columnCount_];
  }
}

- (void)initializeListenersWithRAREaWidgetListener:(RAREaWidgetListener *)l {
  [super initializeListenersWithRAREaWidgetListener:l];
  if (l != nil) {
    if ((treeHandler_ != nil) && [l isExpandedEventsEnabled]) {
      [treeHandler_ addExpandedListenerWithRAREiExpandedListener:l];
    }
    if ((treeHandler_ != nil) && [l isExpansionEventsEnabled]) {
      [treeHandler_ addExpansionListenerWithRAREiExpansionListener:l];
    }
  }
}

- (RARERenderableDataItem *)getConvertedRowWithInt:(int)row {
  RARERenderableDataItem *item = [((id<RAREiTableModel>) nil_chk(tableModel_)) getWithInt:row];
  if ((item != nil) && ![item isStateFlagSetWithShort:(char) 64]) {
    [item setStateFlagWithShort:(char) 64];
    int len = [tableModel_ getColumnCount];
    for (int i = 0; i < len; i++) {
      (void) [tableModel_ getItemAtWithInt:row withInt:i];
    }
  }
  return item;
}

- (IOSObjectArray *)getSelectionsAsStringsWithBoolean:(BOOL)data {
  IOSIntArray *sels = [self getSelectedIndexes];
  if ((sels == nil) || ((int) [sels count] == 0)) {
    return nil;
  }
  [self convertRowsWithIntArray:sels];
  id<JavaUtilList> rows = [((id<RAREiTableModel>) nil_chk(tableModel_)) getRowsEx];
  if (data) {
    return [RAREDataItemCollection getValuesAsStringsWithJavaUtilList:rows withIntArray:sels withInt:-1 withBoolean:YES withBoolean:YES withNSString:nil];
  }
  else {
    return [RAREDataItemCollection getValuesAsStringsWithJavaUtilList:rows withIntArray:sels withInt:-1 withBoolean:NO withBoolean:YES withNSString:nil];
  }
}

- (NSString *)getWidgetAttributeWithNSString:(NSString *)name {
  int n = [((NSString *) nil_chk(name)) indexOf:'['];
  int row = -1;
  int col = -1;
  if (n != -1) {
    int c = n;
    col = [RAREUTSNumber intValueWithNSString:[name substring:n + 1]];
    n = [name indexOf:',' fromIndex:n + 1];
    if (n != -1) {
      row = col;
      col = [RAREUTSNumber intValueWithNSString:[name substring:n + 1]];
    }
    name = [name substring:0 endIndex:c];
  }
  if (row == -1) {
    if ([((NSString *) nil_chk(name)) isEqual:[RAREiConstants WIDGET_ATT_SELECTION_DATA]]) {
      return [self getSelectionDataAsStringWithInt:col];
    }
    if ([name isEqual:[RAREiConstants WIDGET_ATT_SELECTION_VALUE]]) {
      return [self getSelectionAsStringWithInt:col];
    }
    if ([name isEqual:[RAREiConstants WIDGET_ATT_DATA]]) {
      RARERenderableDataItem *di = [self getItemExWithInt:col];
      id o = (di == nil) ? nil : [di getLinkedData];
      return (o == nil) ? nil : [o description];
    }
    if ([name isEqual:[RAREiConstants WIDGET_ATT_VALUE]]) {
      RARERenderableDataItem *di = [self getItemExWithInt:col];
      return (di == nil) ? nil : [RAREUTHelper toStringWithJavaUtilList:[di getItems] withNSString:@","];
    }
    if ([name isEqual:[RAREiConstants WIDGET_ATT_SELECTION_ROW]]) {
      return [RAREUTSNumber toStringWithInt:[self getSelectedIndex]];
    }
    if ([name isEqual:[RAREiConstants WIDGET_ATT_COLUMN_NAME]]) {
      return [self getColumnNameWithInt:col];
    }
    if ([name isEqual:[RAREiConstants WIDGET_ATT_SELECTION_ROWS]]) {
      IOSIntArray *rows = [self getSelectedIndexes];
      return (rows == nil) ? @"" : [JavaUtilArrays toStringWithIntArray:rows];
    }
    if ([name isEqual:[RAREiConstants WIDGET_ATT_ROW_COUNT]]) {
      return [RAREUTStringCache valueOfWithInt:[self getItemCount]];
    }
    return [super getWidgetAttributeWithNSString:name];
  }
  else {
    RARERenderableDataItem *di = [((id<RAREiTableModel>) nil_chk(tableModel_)) getItemAtWithInt:row withInt:col];
    if ([((NSString *) nil_chk(name)) isEqual:[RAREiConstants WIDGET_ATT_VALUE]]) {
      return (di == nil) ? nil : [di description];
    }
    if ([name isEqual:[RAREiConstants WIDGET_ATT_DATA]]) {
      if (di != nil) {
        id o = [di getLinkedData];
        return (o == nil) ? nil : [o description];
      }
    }
    return nil;
  }
}

- (void)adjustMultiTableRendererWithRAREaListItemRenderer:(RAREaListItemRenderer *)lr
                    withRAREiTableComponent_TableTypeEnum:(RAREiTableComponent_TableTypeEnum *)type {
  RAREPaintBucket *pb = [((RAREaListItemRenderer *) nil_chk(lr)) getSelectionPaint];
  if ((pb != nil) && ([(id) [pb getBorder] isKindOfClass:[RAREUIMatteBorder class]])) {
    pb = (RAREPaintBucket *) check_class_cast([pb clone], [RAREPaintBucket class]);
    RAREUIMatteBorder *b = (RAREUIMatteBorder *) check_class_cast([((RAREUIMatteBorder *) check_class_cast([((RAREPaintBucket *) nil_chk(pb)) getBorder], [RAREUIMatteBorder class])) clone], [RAREUIMatteBorder class]);
    [pb setBorderWithRAREiPlatformBorder:b];
    RAREUIInsets *in = [((RAREUIMatteBorder *) nil_chk(b)) getBorderInsetsExWithRAREUIInsets:nil];
    switch ([type ordinal]) {
      case RAREiTableComponent_TableType_HEADER:
      ((RAREUIInsets *) nil_chk(in))->right_ = 0;
      break;
      case RAREiTableComponent_TableType_FOOTER:
      ((RAREUIInsets *) nil_chk(in))->left_ = 0;
      break;
      default:
      ((RAREUIInsets *) nil_chk(in))->left_ = 0;
      in->right_ = 0;
      break;
    }
    [b setInsetsWithRAREUIInsets:in];
    [lr setSelectionPaintWithRAREPaintBucket:pb];
  }
}

- (int)getMiltiTableConfigurationTypeWithRARESPOTTable:(RARESPOTTable *)cfg {
  int type = 0;
  int len = [((SPOTSet *) nil_chk(((RARESPOTTable *) nil_chk(cfg))->columns_)) size];
  for (int i = 0; i < len; i++) {
    RARESPOTItemDescription *id_ = (RARESPOTItemDescription *) check_class_cast([cfg->columns_ getExWithInt:i], [RARESPOTItemDescription class]);
    switch ([((RARESPOTItemDescription_CRenderType *) nil_chk(((RARESPOTItemDescription *) nil_chk(id_))->renderType_)) intValue]) {
      case RARESPOTItemDescription_CRenderType_header:
      case RARESPOTItemDescription_CRenderType_header_index:
      case RARESPOTItemDescription_CRenderType_header_index_normal:
      case RARESPOTItemDescription_CRenderType_header_normal:
      type |= 1;
      break;
      case RARESPOTItemDescription_CRenderType_footer_normal:
      case RARESPOTItemDescription_CRenderType_footer:
      case RARESPOTItemDescription_CRenderType_footer_index:
      case RARESPOTItemDescription_CRenderType_footer_index_normal:
      type |= 2;
      break;
      default:
      break;
    }
  }
  return type;
}

- (IOSObjectArray *)toStringWithId:(id)o {
  if (!([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:o])) {
    if (o == nil) {
      return nil;
    }
    return [IOSObjectArray arrayWithObjects:(id[]){ [nil_chk(o) description] } count:1 type:[IOSClass classWithClass:[NSString class]]];
  }
  IOSObjectArray *a = (IOSObjectArray *) check_class_cast(o, [IOSObjectArray class]);
  int len = (int) [((IOSObjectArray *) nil_chk(a)) count];
  IOSObjectArray *s = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[NSString class]]];
  for (int i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(s, i, (IOSObjectArray_Get(a, i) == nil) ? @"" : [IOSObjectArray_Get(a, i) description]);
  }
  return s;
}

- (id<JavaUtilComparator>)getComparatorWithInt:(int)col
                                   withBoolean:(BOOL)descending {
  RARESubItemComparator *c = [[RARESubItemComparator alloc] initWithRAREiTableModel:tableModel_ withBoolean:descending];
  [c setColumnWithInt:col];
  return c;
}

- (void)copyAllFieldsTo:(RAREaTableViewer *)other {
  [super copyAllFieldsTo:other];
  other->columnSelectionAllowed_ = columnSelectionAllowed_;
  other->currentRow_ = currentRow_;
  other->gridViewType_ = gridViewType_;
  other->levelStack_ = levelStack_;
  other->tableHandler_ = tableHandler_;
  other->tableModel_ = tableModel_;
  other->treeHandler_ = treeHandler_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getSelection", NULL, "LNSObject", 0x1, NULL },
    { "createColumnWithRARERenderableDataItem:", NULL, "LRAREColumn", 0x1, NULL },
    { "createColumnWithNSString:", NULL, "LRAREColumn", 0x1, NULL },
    { "createColumnWithNSString:withInt:withRAREiPlatformIcon:", NULL, "LRAREColumn", 0x1, NULL },
    { "createColumnWithNSString:withInt:withNSString:", NULL, "LRAREColumn", 0x1, NULL },
    { "createColumnWithNSString:withId:withInt:withId:withRAREiPlatformIcon:", NULL, "LRAREColumn", 0x1, NULL },
    { "createColumnsWithNSStringArray:", NULL, "LJavaUtilList", 0x1, NULL },
    { "createColumnsWithNSStringArray:withInt:withInt:", NULL, "LJavaUtilList", 0x1, NULL },
    { "createRowWithNSStringArray:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "createRowWithNSObjectArray:withInt:withInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "createRowWithNSStringArray:withInt:withInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "filterWithRAREUTiFilter:", NULL, "Z", 0x1, NULL },
    { "filterWithInt:withRAREUTiFilter:", NULL, "Z", 0x1, NULL },
    { "filterWithInt:withNSString:withBoolean:", NULL, "Z", 0x1, NULL },
    { "filterWithNSString:withBoolean:withBoolean:withBoolean:", NULL, "Z", 0x1, NULL },
    { "rowsChangedWithIntArray:", NULL, "V", 0x81, NULL },
    { "sizeColumnToFitWithInt:", NULL, "V", 0x401, NULL },
    { "sizeColumnsToFit", NULL, "V", 0x401, NULL },
    { "unfilter", NULL, "Z", 0x1, NULL },
    { "getChildRowsWithJavaUtilList:", NULL, "LJavaUtilList", 0x1, NULL },
    { "getColumnWithInt:", NULL, "LRAREColumn", 0x1, NULL },
    { "getColumnNameWithInt:", NULL, "LNSString", 0x1, NULL },
    { "getColumnTitleWithInt:", NULL, "LJavaLangCharSequence", 0x1, NULL },
    { "getColumns", NULL, "LJavaUtilList", 0x1, NULL },
    { "getConverter", NULL, "LRAREUTiStringConverter", 0x1, NULL },
    { "getDisplayColumns", NULL, "LJavaUtilList", 0x1, NULL },
    { "getGridViewType", NULL, "LRAREiTableComponent_GridViewTypeEnum", 0x1, NULL },
    { "getHTTPFormValue", NULL, "LNSObject", 0x1, NULL },
    { "getItemWithInt:withInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getItemAtWithInt:withInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getItemBoundsWithInt:withInt:", NULL, "LRAREUIRectangle", 0x1, NULL },
    { "getParentWithInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getPopupMenuItem", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getRawRows", NULL, "LJavaUtilList", 0x1, NULL },
    { "getRootItem", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getSelectedItem", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getSelectionWithInt:", NULL, "LNSObject", 0x1, NULL },
    { "getSelectionAsStringWithInt:", NULL, "LNSString", 0x1, NULL },
    { "getSelectionDataWithInt:", NULL, "LNSObject", 0x1, NULL },
    { "getSelectionDataAsStringWithInt:", NULL, "LNSString", 0x1, NULL },
    { "getSelections", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getSelectionsAsStrings", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getSelectionsDataAsStrings", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getTableComponent", NULL, "LRAREiTableComponent", 0x1, NULL },
    { "getValueAtWithInt:withInt:", NULL, "LNSObject", 0x1, NULL },
    { "isAutoScrollOnExpansion", NULL, "Z", 0x1, NULL },
    { "isExpandableStateLocked", NULL, "Z", 0x1, NULL },
    { "isFiltered", NULL, "Z", 0x1, NULL },
    { "isHideFilteredEmptyBranches", NULL, "Z", 0x1, NULL },
    { "isItemEditableWithRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "isLeafItemWithInt:", NULL, "Z", 0x1, NULL },
    { "isRootNodeCollapsible", NULL, "Z", 0x1, NULL },
    { "isRowExpandedWithInt:", NULL, "Z", 0x1, NULL },
    { "isRowExpandedWithRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "isSingleClickToggle", NULL, "Z", 0x1, NULL },
    { "isSortDescending", NULL, "Z", 0x1, NULL },
    { "isTabular", NULL, "Z", 0x1, NULL },
    { "isToggleOnTwistyOnly", NULL, "Z", 0x1, NULL },
    { "isTreeTable", NULL, "Z", 0x1, NULL },
    { "addTreeRowWithRARERenderableDataItem:", NULL, "V", 0x4, NULL },
    { "configureExWithRARESPOTTable:", NULL, "V", 0x4, NULL },
    { "convertRowsWithIntArray:", NULL, "V", 0x4, NULL },
    { "fixColumnsWithRARERenderableDataItem:", NULL, "V", 0x4, NULL },
    { "initializeListenersWithRAREaWidgetListener:", NULL, "V", 0x4, NULL },
    { "getConvertedRowWithInt:", NULL, "LRARERenderableDataItem", 0x4, NULL },
    { "getSelectionsAsStringsWithBoolean:", NULL, "LIOSObjectArray", 0x4, NULL },
    { "getWidgetAttributeWithNSString:", NULL, "LNSString", 0x4, NULL },
    { "adjustMultiTableRendererWithRAREaListItemRenderer:withRAREiTableComponent_TableTypeEnum:", NULL, "V", 0x4, NULL },
    { "getMiltiTableConfigurationTypeWithRARESPOTTable:", NULL, "I", 0x4, NULL },
    { "toStringWithId:", NULL, "LIOSObjectArray", 0x2, NULL },
    { "getComparatorWithInt:withBoolean:", NULL, "LJavaUtilComparator", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "columnSelectionAllowed_", NULL, 0x4, "Z" },
    { "currentRow_", NULL, 0x4, "LRARERenderableDataItem" },
    { "gridViewType_", NULL, 0x4, "LRAREiTableComponent_GridViewTypeEnum" },
    { "levelStack_", NULL, 0x4, "LJavaUtilLinkedList" },
    { "tableHandler_", NULL, 0x4, "LRAREiTableComponent" },
    { "tableModel_", NULL, 0x4, "LRAREiTableModel" },
    { "treeHandler_", NULL, 0x4, "LRAREiTreeHandler" },
  };
  static J2ObjcClassInfo _RAREaTableViewer = { "aTableViewer", "com.appnativa.rare.viewer", NULL, 0x401, 71, methods, 7, fields, 0, NULL};
  return &_RAREaTableViewer;
}

@end
@implementation RAREaTableViewer_$1

- (void)run {
  if (this$0_->treeHandler_ != nil) {
    [this$0_->treeHandler_ setAllWithJavaUtilCollection:val$rows_];
  }
  else {
    [((id<RAREiTableModel>) nil_chk(this$0_->tableModel_)) setAllWithJavaUtilCollection:val$rows_];
  }
}

- (id)initWithRAREaTableViewer:(RAREaTableViewer *)outer$
              withJavaUtilList:(id<JavaUtilList>)capture$0 {
  this$0_ = outer$;
  val$rows_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaTableViewer" },
    { "val$rows_", NULL, 0x1012, "LJavaUtilList" },
  };
  static J2ObjcClassInfo _RAREaTableViewer_$1 = { "$1", "com.appnativa.rare.viewer", "aTableViewer", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_RAREaTableViewer_$1;
}

@end
