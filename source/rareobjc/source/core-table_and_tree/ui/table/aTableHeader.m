//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-table_and_tree/com/appnativa/rare/ui/table/aTableHeader.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/ui/BasicSelectionModel.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIImageIcon.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIPoint.h"
#include "com/appnativa/rare/ui/UIPopupMenu.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/aComponent.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/EventListenerList.h"
#include "com/appnativa/rare/ui/event/MouseEvent.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/event/iChangeListener.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformGraphics.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformItemRenderer.h"
#include "com/appnativa/rare/ui/iPlatformRenderingComponent.h"
#include "com/appnativa/rare/ui/iTableModel.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/iComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/renderer/UILabelRenderer.h"
#include "com/appnativa/rare/ui/renderer/aFormsLayoutRenderer.h"
#include "com/appnativa/rare/ui/renderer/aListItemRenderer.h"
#include "com/appnativa/rare/ui/table/ColumnChangeEvent.h"
#include "com/appnativa/rare/ui/table/MultiTableTableComponent.h"
#include "com/appnativa/rare/ui/table/TableComponent.h"
#include "com/appnativa/rare/ui/table/TableHelper.h"
#include "com/appnativa/rare/ui/table/aTableHeader.h"
#include "com/appnativa/rare/ui/table/iTableComponent.h"
#include "com/appnativa/rare/viewer/TableViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/FilterableList.h"
#include "com/appnativa/util/IntList.h"
#include "com/appnativa/util/iFilterableList.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@implementation RAREaTableHeader

static int RAREaTableHeader_columnSizePad_;
static id<RAREiPlatformIcon> RAREaTableHeader_sort_asc_;
static id<RAREiPlatformIcon> RAREaTableHeader_sort_dsc_;

+ (int)columnSizePad {
  return RAREaTableHeader_columnSizePad_;
}

+ (int *)columnSizePadRef {
  return &RAREaTableHeader_columnSizePad_;
}

+ (id<RAREiPlatformIcon>)sort_asc {
  return RAREaTableHeader_sort_asc_;
}

+ (void)setSort_asc:(id<RAREiPlatformIcon>)sort_asc {
  RAREaTableHeader_sort_asc_ = sort_asc;
}

+ (id<RAREiPlatformIcon>)sort_dsc {
  return RAREaTableHeader_sort_dsc_;
}

+ (void)setSort_dsc:(id<RAREiPlatformIcon>)sort_dsc {
  RAREaTableHeader_sort_dsc_ = sort_dsc;
}

- (id)init {
  if (self = [super init]) {
    columns_ = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[RAREColumn class]]];
    viewPositions_ = [IOSIntArray arrayWithLength:0];
    multiTableTableComponent_ = nil;
    cellInsets_ = [[RAREUIInsets alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_2]];
    headerPadding_ = [[RAREUIInsets alloc] initWithFloat:[RAREScreenUtils PLATFORM_PIXELS_2]];
    pressedColumn_ = -1;
    sortColumn_ = -1;
    showHeaderMargin_ = YES;
    sortingAllowed_ = YES;
    marginColor_ = [RARETableHelper getMarginColor];
    bottomMarginColor_ = [RARETableHelper getBottomMarginColorWithRAREUIColor:marginColor_];
    headerHeightNum_ = [self calculateMinHeight];
  }
  return self;
}

- (void)addColumnChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
  [((RAREEventListenerList *) nil_chk([self getEventListenerList])) addWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)] withId:l];
}

- (void)removeColumnChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
  if (listenerList_ != nil) {
    [((RAREEventListenerList *) nil_chk([self getEventListenerList])) addWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)] withId:l];
  }
}

- (void)addSpaceWithRAREaListItemRenderer:(RAREaListItemRenderer *)renderer
                                  withInt:(int)extra {
  IOSObjectArray *cols = columns_;
  int len = (int) [((IOSObjectArray *) nil_chk(cols)) count];
  RAREColumn *c;
  int i;
  int count = 0;
  for (i = 0; i < len; i++) {
    if ([(c = IOSObjectArray_Get(cols, i)) isVisible] && !((RAREColumn *) nil_chk(c))->sizeFixed_) {
      count++;
    }
  }
  if (count == 0) {
    return;
  }
  int size = (extra / count);
  RAREColumn *lc = nil;
  for (i = 0; i < len; i++) {
    if ([(c = IOSObjectArray_Get(cols, i)) isVisible] && !((RAREColumn *) nil_chk(c))->sizeFixed_) {
      [c setWidthWithInt:[c getWidth] + size];
      lc = c;
    }
  }
  size = extra - (size * count);
  if ((size > 0) && (lc != nil)) {
    [lc setWidthWithInt:[lc getWidth] + size];
  }
}

- (int)calculateColumnWidthWithRAREiTableModel:(id<RAREiTableModel>)tm
                                       withInt:(int)col
                                withRAREColumn:(RAREColumn *)c
                                       withInt:(int)maxRows
                           withRAREUIDimension:(RAREUIDimension *)size
             withRAREaTableHeader_SizeTypeEnum:(RAREaTableHeader_SizeTypeEnum *)type {
  RARERenderableDataItem *rowItem, *item;
  int len = [JavaLangMath minWithInt:maxRows withInt:[((id<RAREiTableModel>) nil_chk(tm)) size]];
  id<RAREiPlatformItemRenderer> renderer = [((id<RAREiTableComponent>) nil_chk([self getTableComponent])) getItemRenderer];
  [self getColumnSizeWithRAREiPlatformItemRenderer:renderer withInt:col withRAREColumn:c withRAREaTableHeader_SizeTypeEnum:type withFloat:[((id<RAREiPlatformComponent>) nil_chk([self getTableComponentEx])) getWidth] withRAREUIDimension:size];
  BOOL preferred = type != [RAREaTableHeader_SizeTypeEnum MIN];
  float width = ((RAREUIDimension *) nil_chk(size))->width_;
  float height = size->height_;
  for (int i = 0; i < len; i++) {
    rowItem = [tm getRowWithInt:i];
    item = [((RARERenderableDataItem *) nil_chk(rowItem)) getItemExWithInt:col];
    if ((item != nil) && ([item getColumnSpan] == 1)) {
      [RARETableHelper calculateItemSizeWithRAREiPlatformComponent:self withRAREiPlatformItemRenderer:renderer withRAREColumn:c withRARERenderableDataItem:item withInt:i withRARERenderableDataItem:rowItem withRAREUIDimension:size withInt:preferred ? 0 : [((RAREColumn *) nil_chk(c)) getWidth] withInt:0];
      if (size->width_ > width) {
        width = size->width_;
      }
    }
  }
  size->height_ = height;
  size->width_ = width;
  return (int) [JavaLangMath ceilWithDouble:width];
}

- (void)clearSelection {
  if (selectionModel_ != nil) {
    [selectionModel_ clearSelection];
  }
}

- (void)columnDraggingWithInt:(int)viewPosition
                      withInt:(int)insertPosition
                      withInt:(int)xPosition {
  if ([self hasListenersWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)]]) {
    [RAREUtils fireChangeEventWithRAREEventListenerList:[self getEventListenerList] withRAREChangeEvent:[[RAREColumnChangeEvent alloc] initWithId:self withInt:viewPosition withInt:insertPosition withInt:xPosition]];
  }
}

- (BOOL)columnInRowClickedWithInt:(int)row
                          withInt:(int)col {
  if (selectionModel_ != nil) {
    RARERenderableDataItem *item = [((id<RAREiTableModel>) nil_chk([((RARETableComponent *) check_class_cast([self getTableComponent], [RARETableComponent class])) getModel])) getItemAtWithInt:row withInt:col];
    if (![((RARERenderableDataItem *) nil_chk(item)) isSelectable]) {
      return NO;
    }
    [selectionModel_ clearAndSelectWithInt:col];
  }
  return YES;
}

- (void)columnSizeChangedWithInt:(int)viewPosition {
  if ([self hasListenersWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)]]) {
    [RAREUtils fireChangeEventWithRAREEventListenerList:[self getEventListenerList] withRAREChangeEvent:[[RAREColumnChangeEvent alloc] initWithId:self withRAREColumnChangeEvent_ChangeTypeEnum:[RAREColumnChangeEvent_ChangeTypeEnum RESIZED] withInt:viewPosition]];
  }
}

- (void)dispose {
  if (renderingComponent_ != nil) {
    [renderingComponent_ dispose];
  }
  [super dispose];
  pressedHeaderPainter_ = nil;
  renderingComponent_ = nil;
  columns_ = nil;
  multiTableTableComponent_ = nil;
}

- (RAREUIColor *)getBottomMarginColor {
  return bottomMarginColor_;
}

- (RAREColumn *)getColumnAtWithInt:(int)index {
  if ((index > -1) && (index < (int) [((IOSObjectArray *) nil_chk(columns_)) count])) {
    return IOSObjectArray_Get(columns_, index);
  }
  return nil;
}

- (int)getColumnCount {
  return (int) [((IOSObjectArray *) nil_chk(columns_)) count];
}

- (RAREColumn *)getColumnForViewAtWithInt:(int)viewColumn {
  return IOSObjectArray_Get(nil_chk(columns_), IOSIntArray_Get(nil_chk(viewPositions_), viewColumn));
}

- (int)getColumnIndexAtWithFloat:(float)x
                       withFloat:(float)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getColumnIndexForClickedColumnWithInt:(int)col {
  id<RAREiTableComponent> tc = [self getTableComponent];
  RAREiTableComponent_TableTypeEnum *type = [((id<RAREiTableComponent>) nil_chk(tc)) getTableType];
  if ((type == nil) || (type == [RAREiTableComponent_TableTypeEnum HEADER])) {
    return col;
  }
  id<RAREiTableComponent> mtc = [((RARETableViewer *) check_class_cast([self getWidget], [RARETableViewer class])) getTableComponent];
  tc = [((id<RAREiTableComponent>) nil_chk(mtc)) getRowHeaderTable];
  if (tc != nil) {
    col += [tc getColumnCount];
  }
  if (type == [RAREiTableComponent_TableTypeEnum FOOTER]) {
    col += [((id<RAREiTableComponent>) nil_chk([mtc getMainTable])) getColumnCount];
  }
  return col;
}

- (int)getColumnIndexForViewAtWithInt:(int)viewColumn {
  return IOSIntArray_Get(nil_chk(viewPositions_), viewColumn);
}

- (IOSObjectArray *)getColumns {
  return columns_;
}

- (void)getColumnSizeWithRAREiPlatformItemRenderer:(id<RAREiPlatformItemRenderer>)renderer
                                           withInt:(int)col
                                    withRAREColumn:(RAREColumn *)c
                 withRAREaTableHeader_SizeTypeEnum:(RAREaTableHeader_SizeTypeEnum *)type
                                         withFloat:(float)tableWidth
                               withRAREUIDimension:(RAREUIDimension *)size {
  RAREUIInsets *in = cellInsets_;
  RAREPaintBucket *pb = [((RAREColumn *) nil_chk(c)) getHeaderPainter];
  if (pb != nil) {
    id<RAREiPlatformBorder> b = [pb getBorder];
    if (b != nil) {
      in = [b getBorderInsetsWithRAREUIInsets:[[RAREUIInsets alloc] init]];
    }
  }
  if (renderingComponent_ == nil) {
    renderingComponent_ = [[RAREUILabelRenderer alloc] init];
  }
  RAREUIFont *f = [c getHeaderFont];
  if (f == nil) {
    f = [self getFont];
  }
  (void) [((id<RAREiPlatformItemRenderer>) nil_chk(renderer)) configureRenderingComponentWithRAREiPlatformComponent:self withRAREiPlatformRenderingComponent:renderingComponent_ withRARERenderableDataItem:c withInt:0 withBoolean:NO withBoolean:NO withRAREColumn:nil withRARERenderableDataItem:nil];
  [((RAREUILabelRenderer *) nil_chk(renderingComponent_)) setWordWrapWithBoolean:c->headerWordWrap_];
  if (f != nil) {
    [renderingComponent_ setFontWithRAREUIFont:f];
  }
  (void) [((id<RAREiPlatformComponent>) nil_chk([renderingComponent_ getComponentWithJavaLangCharSequence:[c getColumnTitle] withRARERenderableDataItem:c])) getPreferredSizeWithRAREUIDimension:size];
  ((RAREUIDimension *) nil_chk(size))->width_ += ((RAREUIInsets *) nil_chk(in))->left_ + in->right_;
  size->height_ += in->top_ + in->bottom_;
  int w = 0;
  switch ([type ordinal]) {
    case RAREaTableHeader_SizeType_MIN:
    w = [c calculateMinimumWidthWithRAREiPlatformComponent:[self getTableComponentEx] withFloat:(tableWidth == 0) ? 100 : tableWidth];
    break;
    case RAREaTableHeader_SizeType_PREFERRED:
    if (c->preferedWidth_ != 0) {
      w = [c calculatePreferedWidthWithRAREiPlatformComponent:[self getTableComponentEx] withFloat:(tableWidth == 0) ? 100 : tableWidth];
    }
    break;
    default:
    break;
  }
  size->width_ = [JavaLangMath maxWithFloat:size->width_ withFloat:w] + RAREaTableHeader_columnSizePad_;
  size->height_ += [RAREScreenUtils PLATFORM_PIXELS_1] + iconPadding_;
}

- (int)getColumnXWithInt:(int)column {
  IOSObjectArray *cols = columns_;
  int len = (int) [((IOSObjectArray *) nil_chk(cols)) count];
  int x = 0;
  int d = [RAREScreenUtils PLATFORM_PIXELS_1];
  for (int i = 0; i < len; i++) {
    if (i == column) {
      break;
    }
    if ([((RAREColumn *) IOSObjectArray_Get(cols, i)) isVisible]) {
      x += [((RAREColumn *) IOSObjectArray_Get(cols, i)) getWidth];
      if (i > 0) {
        x += d;
      }
    }
  }
  return x;
}

- (int)getDynamicColumnsWidth {
  if ((columns_ == nil) || ((int) [columns_ count] == 0)) {
    return 0;
  }
  int n = [((RAREColumn *) IOSObjectArray_Get(nil_chk(columns_), 0)) calculatePreferedWidthWithRAREiPlatformComponent:[self getTableComponentEx] withFloat:400];
  return n * (int) [columns_ count];
}

- (int)getFirstVisibleColumnInView {
  RAREUIRectangle *r = [((id<RAREiTableComponent>) nil_chk([self getTableComponent])) getViewRect];
  int n = [self getColumnIndexAtWithFloat:((RAREUIRectangle *) nil_chk(r))->x_ withFloat:0];
  if (n == -1) {
    if (r->x_ == 0) {
      n = [self getFirstVisibleColumn];
    }
    else {
      n = [self getLastVisibleColumn];
    }
  }
  return n;
}

- (int)getGridColumnWidthWithRAREUIDimension:(RAREUIDimension *)reuseableSize {
  RAREColumn *c = IOSObjectArray_Get(nil_chk(columns_), 0);
  if (reuseableSize == nil) {
    reuseableSize = [[RAREUIDimension alloc] init];
  }
  RAREaListItemRenderer *renderer = (RAREaListItemRenderer *) check_class_cast([((id<RAREiTableComponent>) nil_chk([self getTableComponent])) getItemRenderer], [RAREaListItemRenderer class]);
  [self getColumnSizeWithRAREiPlatformItemRenderer:renderer withInt:0 withRAREColumn:c withRAREaTableHeader_SizeTypeEnum:[RAREaTableHeader_SizeTypeEnum PREFERRED] withFloat:0 withRAREUIDimension:reuseableSize];
  return [((RAREUIDimension *) nil_chk(reuseableSize)) intWidth] + [RAREScreenUtils PLATFORM_PIXELS_1];
}

- (RAREiTableComponent_GridViewTypeEnum *)getGridViewType {
  return gridViewMode_;
}

- (RAREUIPoint *)getHotspotPopupLocationWithInt:(int)column {
  return nil;
}

- (int)getLastVisibleColumn {
  if (lastVisibleColumn_ == -1) {
    IOSObjectArray *cols = columns_;
    IOSIntArray *vp = viewPositions_;
    int len = (int) [((IOSObjectArray *) nil_chk(cols)) count];
    for (int i = len - 1; i >= 0; i--) {
      if ([((RAREColumn *) IOSObjectArray_Get(cols, IOSIntArray_Get(nil_chk(vp), i))) isVisible]) {
        lastVisibleColumn_ = i;
        break;
      }
    }
  }
  return lastVisibleColumn_;
}

- (int)getLastVisibleColumnInView {
  RAREUIRectangle *r = [((id<RAREiTableComponent>) nil_chk([self getTableComponent])) getViewRect];
  int n = [self getColumnIndexAtWithFloat:((RAREUIRectangle *) nil_chk(r))->x_ + r->width_ - 1 withFloat:0];
  if (n == -1) {
    n = [self getLastVisibleColumn];
  }
  return n;
}

- (RAREUIColor *)getMarginColor {
  return marginColor_;
}

- (int)getMeasuredHeight {
  if (measuredHeight_ == 0) {
    return 0;
  }
  return (int) [JavaLangMath ceilWithDouble:measuredHeight_ + ((RAREUIInsets *) nil_chk(headerPadding_))->top_ + headerPadding_->bottom_ + [RAREScreenUtils PLATFORM_PIXELS_1]];
}

- (RAREUIDimension *)getMinimumSizeWithRAREUIDimension:(RAREUIDimension *)size {
  if (size == nil) {
    size = [[RAREUIDimension alloc] init];
  }
  [self getSizeWithRAREUIDimension:size withBoolean:YES withFloat:100];
  return size;
}

- (RAREMultiTableTableComponent *)getMultiTableTableComponent {
  return multiTableTableComponent_;
}

- (int)getOriginalsGridViewsRowCount {
  return flatCount_;
}

- (int)getPreferredHeight {
  if (preferredSize_ != nil) {
    return [preferredSize_ intHeight];
  }
  return [((RAREUIDimension *) nil_chk([self getPreferredSizeWithRAREUIDimension:nil])) intHeight];
}

- (RAREUIDimension *)getPreferredSizeWithRAREUIDimension:(RAREUIDimension *)size {
  if (size == nil) {
    size = [[RAREUIDimension alloc] init];
  }
  if (preferredSize_ != nil) {
    [((RAREUIDimension *) nil_chk(size)) setSizeWithRAREUIDimension:preferredSize_];
    return size;
  }
  size = [super getPreferredSizeWithRAREUIDimension:size];
  if (preferredSize_ == nil) {
    preferredSize_ = [[RAREUIDimension alloc] initWithRAREUIDimension:size];
  }
  else {
    [preferredSize_ setSizeWithRAREUIDimension:size];
  }
  return size;
}

- (void)getPreferredSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                    withFloat:(float)maxWidth {
  [self getSizeWithRAREUIDimension:size withBoolean:NO withFloat:maxWidth];
}

- (id<JavaUtilList>)getPropertyTableActions {
  return propertyTableActions_;
}

- (RAREColumn *)getPropertyTableHeaderColumnDescription {
  return propertyTableHeaderColumnDescription_;
}

- (int)getRowHeightWithInt:(int)row
withRAREiPlatformItemRenderer:(id<RAREiPlatformItemRenderer>)renderer
                   withInt:(int)defaultHeight {
  id<RAREiTableComponent> tc = [self getTableComponent];
  id<RAREiPlatformComponent> pc = [((id<RAREiTableComponent>) nil_chk(tc)) getPlatformComponent];
  id<RAREiTableModel> tm = [tc getModel];
  RARERenderableDataItem *rowItem = [((id<RAREiTableModel>) nil_chk(tm)) getRowWithInt:row];
  RARERenderableDataItem *mainRowItem = [tm getRowWithInt:row];
  int h = [((RARERenderableDataItem *) nil_chk(rowItem)) getHeight];
  if (h < 1) {
    IOSObjectArray *columns;
    IOSIntArray *vp;
    if (multiTableTableComponent_ == nil) {
      columns = self->columns_;
      vp = self->viewPositions_;
      tm = [((id<RAREiTableComponent>) nil_chk([((RARETableViewer *) check_class_cast([((id<RAREiPlatformComponent>) nil_chk(pc)) getWidget], [RARETableViewer class])) getTableComponent])) getModel];
      mainRowItem = [((id<RAREiTableModel>) nil_chk(tm)) getRowWithInt:row];
      h = [((RARERenderableDataItem *) nil_chk(mainRowItem)) getHeight];
    }
    else {
      vp = [multiTableTableComponent_ getViewPositions];
      columns = [multiTableTableComponent_ getColumns];
    }
    if (h < 1) {
      h = [RARETableHelper calculateRowHeightWithRAREiPlatformComponent:pc withRAREiPlatformItemRenderer:renderer withRAREiPlatformListDataModel:tm withInt:row withRAREColumnArray:columns withBoolean:NO withInt:defaultHeight withIntArray:vp];
    }
    [rowItem setHeightWithInt:h];
    if (mainRowItem != nil) {
      [mainRowItem setHeightWithInt:h];
    }
  }
  return h;
}

- (int)getSelectedColumn {
  return (selectionModel_ == nil) ? -1 : [selectionModel_ getLeadIndex];
}

- (int)getSelectedColumnCount {
  return (selectionModel_ == nil) ? 0 : [selectionModel_ getSelectionCount];
}

- (IOSIntArray *)getSelectedColumnIndices {
  return (selectionModel_ == nil) ? nil : [selectionModel_ getSelectedIndices];
}

- (int)getSelectionPaintEndColumn {
  return selectionPaintEndCol_;
}

- (int)getSelectionPaintStartColumn {
  return selectionPaintStartCol_;
}

- (void)getSizeWithRAREUIDimension:(RAREUIDimension *)size
                       withBoolean:(BOOL)minimum
                         withFloat:(float)tableWidth {
  int width = 0;
  int height = 0;
  IOSObjectArray *cols = columns_;
  int len = (int) [((IOSObjectArray *) nil_chk(cols)) count];
  RAREColumn *c;
  if (gridViewMode_ == [RAREiTableComponent_GridViewTypeEnum VERTICAL_WRAP]) {
    len = 1;
  }
  RAREaListItemRenderer *renderer = (RAREaListItemRenderer *) check_class_cast([((id<RAREiTableComponent>) nil_chk([self getTableComponent])) getItemRenderer], [RAREaListItemRenderer class]);
  if (autoSizedColumns_ && (measuredHeight_ > 0)) {
    height = measuredHeight_;
  }
  int d = [RAREScreenUtils PLATFORM_PIXELS_1];
  for (int i = 0; i < len; i++) {
    if ([(c = IOSObjectArray_Get(cols, i)) isVisible]) {
      if (autoSizedColumns_ && (measuredHeight_ > 0)) {
        width += [((RAREColumn *) nil_chk(c)) getWidth] + d;
      }
      else {
        [self getColumnSizeWithRAREiPlatformItemRenderer:renderer withInt:i withRAREColumn:c withRAREaTableHeader_SizeTypeEnum:minimum ? [RAREaTableHeader_SizeTypeEnum MIN] : [RAREaTableHeader_SizeTypeEnum PREFERRED] withFloat:tableWidth withRAREUIDimension:size];
        width += ((RAREUIDimension *) nil_chk(size))->width_ + d;
        height = [JavaLangMath maxWithInt:height withInt:[size intHeight]];
      }
    }
  }
  measuredHeight_ = height;
  ((RAREUIDimension *) nil_chk(size))->width_ = width;
  size->height_ = height;
  size->width_ += ((RAREUIInsets *) nil_chk(headerPadding_))->left_ + headerPadding_->right_;
  size->height_ += headerPadding_->top_ + headerPadding_->bottom_;
  size->height_ += d;
  if (headerHeightNum_ > size->height_) {
    size->height_ = headerHeightNum_;
  }
}

- (int)getSpanWidthWithInt:(int)start
                   withInt:(int)span {
  return [RARETableHelper getSpanWidthWithInt:start withInt:span withRAREColumnArray:columns_ withIntArray:viewPositions_];
}

- (id<RAREiTableComponent>)getTableComponent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)getViewIndexForColumnAtWithInt:(int)dataColumn {
  int len = (int) [((IOSIntArray *) nil_chk(viewPositions_)) count];
  for (int i = 0; i < len; i++) {
    if (IOSIntArray_Get(viewPositions_, i) == dataColumn) {
      return i;
    }
  }
  return -1;
}

- (int)getVisibleColumnCount {
  IOSObjectArray *cols = columns_;
  int len = (int) [((IOSObjectArray *) nil_chk(cols)) count];
  int count = 0;
  for (int i = 0; i < len; i++) {
    if ([((RAREColumn *) IOSObjectArray_Get(cols, i)) isVisible]) {
      count++;
    }
  }
  return count;
}

- (int)getWidth {
  if (![self isVisible]) {
    IOSObjectArray *cols = columns_;
    int len = (int) [((IOSObjectArray *) nil_chk(cols)) count];
    int width = 0;
    for (int i = 0; i < len; i++) {
      if ([((RAREColumn *) IOSObjectArray_Get(cols, i)) isVisible]) {
        width += [((RAREColumn *) IOSObjectArray_Get(cols, i)) getWidth];
      }
    }
    return width;
  }
  return [super getWidth];
}

- (BOOL)handleGridViewWithInt:(int)width
                      withInt:(int)height
                      withInt:(int)rowHeght
                  withBoolean:(BOOL)contentsChanged {
  BOOL changed = NO;
  if (!chagingColumns_) {
    RAREColumn *c = IOSObjectArray_Get(nil_chk(columns_), 0);
    RARERenderableDataItem *selectedItem = contentsChanged ? nil : [((RARETableViewer *) check_class_cast([((id<RAREiPlatformComponent>) nil_chk([self getTableComponentEx])) getWidget], [RARETableViewer class])) getSelectedItem];
    int w = [((RAREColumn *) nil_chk(c)) calculatePreferedWidthWithRAREiPlatformComponent:[self getTableComponentEx] withFloat:width];
    id<RAREUTiFilterableList> rows;
    if (contentsChanged || (originalItems_ == nil)) {
      rows = [((id<RAREiTableModel>) nil_chk([((id<RAREiTableComponent>) nil_chk([self getTableComponent])) getModel])) getRowsEx];
      if ([((id<RAREUTiFilterableList>) nil_chk(rows)) isEmpty]) {
        if ((int) [columns_ count] == 1) {
          return NO;
        }
        wrappRows_ = nil;
      }
      originalItems_ = rows;
      flatCount_ = [RARETableHelper getFlatItemCountWithJavaUtilList:rows];
    }
    else {
      rows = originalItems_;
    }
    int n;
    int dx = 0;
    if (gridViewMode_ == [RAREiTableComponent_GridViewTypeEnum VERTICAL_WRAP]) {
      n = (int) [JavaLangMath maxWithDouble:[JavaLangMath floorWithDouble:(float) width / (float) (w + 1)] withDouble:1];
      if (!c->sizeFixed_) {
        dx = (int) [JavaLangMath floorWithDouble:(width - (n * w)) / n];
      }
    }
    else {
      float h = (float) [JavaLangMath maxWithDouble:[JavaLangMath floorWithDouble:(float) height / (float) rowHeght] withDouble:1];
      n = (int) [JavaLangMath maxWithDouble:[JavaLangMath floorWithDouble:(float) width / (float) (w + 1)] withDouble:1];
      if (n * h < flatCount_) {
        n = (int) [JavaLangMath maxWithDouble:[JavaLangMath ceilWithDouble:flatCount_ / h] withDouble:1];
      }
      if (!c->sizeFixed_) {
        dx = (int) [JavaLangMath floorWithDouble:(width - (n * w)) / n];
      }
    }
    if (dx < 0) {
      dx = 0;
    }
    [self updateGridColumnWidthsWithInt:w + dx];
    if ((n != (int) [columns_ count]) || contentsChanged) {
      lastVisibleColumn_ = -1;
      firstVisibleColumn_ = -1;
      chagingColumns_ = YES;
      columns_ = [self getWrappedColumnsWithInt:n];
      wrappRows_ = [RAREaTableHeader wrapItemsWithRAREUTiFilterableList:rows withInt:n];
      if (wrappRows_ == rows) {
        wrappRows_ = nil;
      }
      else {
        rows = wrappRows_;
      }
      int len = (int) [((IOSObjectArray *) nil_chk(columns_)) count];
      if ((int) [((IOSIntArray *) nil_chk(viewPositions_)) count] != len) {
        viewPositions_ = [IOSIntArray arrayWithLength:len];
        for (int i = 0; i < len; i++) {
          (*IOSIntArray_GetRef(viewPositions_, i)) = i;
        }
      }
      [self setColumnsEx];
      [self resetTableModelWithRAREUTiFilterableList:rows];
      if (selectedItem != nil) {
        RARETableViewer *tv = ((RARETableViewer *) check_class_cast([((id<RAREiPlatformComponent>) nil_chk([self getTableComponentEx])) getWidget], [RARETableViewer class]));
        [((RARETableViewer *) nil_chk(tv)) setSelectedItemWithRARERenderableDataItem:selectedItem];
      }
      chagingColumns_ = NO;
      changed = YES;
    }
  }
  if (changed) {
    [self setSizeWithInt:[self getWidth] withInt:0];
  }
  return changed;
}

- (BOOL)handleMouseReleaseWithRAREMouseEvent:(RAREMouseEvent *)e {
  return YES;
}

- (void)imageLoadedWithRAREUIImage:(RAREUIImage *)image {
  [((id<RAREiPlatformComponent>) nil_chk([self getTableComponentEx])) revalidate];
  [((id<RAREiPlatformComponent>) nil_chk([self getTableComponentEx])) repaint];
}

- (BOOL)isAutoSizedColumns {
  return autoSizedColumns_;
}

- (BOOL)isColumnSelectionAllowed {
  return columnSelectionAllowed_;
}

- (BOOL)isColumnVisibleWithInt:(int)col {
  return [((RAREColumn *) nil_chk([self getColumnAtWithInt:col])) isVisible];
}

- (BOOL)isGridView {
  return gridViewMode_ != nil;
}

- (BOOL)isHeaderTracksSections {
  return headerTracksSections_;
}

- (BOOL)isPaintLeftMargin {
  return paintLeftMargin_;
}

- (BOOL)isPaintRightMargin {
  return paintRightMargin_;
}

- (BOOL)isPropertyTabe {
  return propertyTabe_;
}

- (BOOL)isShowHeaderMargin {
  return showHeaderMargin_;
}

- (BOOL)isSortingAllowed {
  return sortingAllowed_;
}

- (void)moveColumnWithInt:(int)from
                  withInt:(int)to {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (BOOL)paintColumnWithRAREColumn:(RAREColumn *)col
        withRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                        withFloat:(float)x
                        withFloat:(float)y
                        withFloat:(float)width
                        withFloat:(float)height {
  if (![self isGridView]) {
    RAREPaintBucket *pb = [((RAREColumn *) nil_chk(col)) getItemPainter];
    id<RAREiComponentPainter> cp = (pb == nil) ? nil : [pb getCachedComponentPainter];
    if (cp != nil) {
      [cp paintWithRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:width withFloat:height withInt:RAREiPainter_UNKNOWN];
      return YES;
    }
  }
  return NO;
}

- (BOOL)paintColumnWithInt:(int)i
 withRAREiPlatformGraphics:(id<RAREiPlatformGraphics>)g
                 withFloat:(float)x
                 withFloat:(float)y
                 withFloat:(float)width
                 withFloat:(float)height {
  if ((i > -1) && (i < (int) [((IOSObjectArray *) nil_chk(columns_)) count])) {
    return [self paintColumnWithRAREColumn:IOSObjectArray_Get(columns_, i) withRAREiPlatformGraphics:g withFloat:x withFloat:y withFloat:width withFloat:height];
  }
  return NO;
}

- (void)reduceColumnSizesWithRAREiPlatformItemRenderer:(id<RAREiPlatformItemRenderer>)renderer
                                               withInt:(int)toMuch {
  IOSObjectArray *cols = columns_;
  int len = (int) [((IOSObjectArray *) nil_chk(cols)) count];
  RAREColumn *c;
  RAREUIDimension *size = [[RAREUIDimension alloc] init];
  int i;
  int count = 0;
  for (i = 0; i < len; i++) {
    if ([(c = IOSObjectArray_Get(cols, i)) isVisible]) {
      count++;
      if (((RAREColumn *) nil_chk(c))->preferedWidth_ != 0) {
        continue;
      }
      [self getColumnSizeWithRAREiPlatformItemRenderer:renderer withInt:i withRAREColumn:c withRAREaTableHeader_SizeTypeEnum:[RAREaTableHeader_SizeTypeEnum PREFERRED] withFloat:[self getWidth] withRAREUIDimension:size];
      [c setWidthWithInt:[size intWidth]];
      toMuch -= size->width_;
      if (toMuch < 1) {
        break;
      }
    }
  }
  if ((toMuch < 1) || (count == 0)) {
    return;
  }
  toMuch = (int) [JavaLangMath ceilWithDouble:(float) toMuch / (float) count];
  for (i = 0; i < len; i++) {
    if ([(c = IOSObjectArray_Get(cols, i)) isVisible]) {
      [c setWidthWithInt:[JavaLangMath maxWithInt:[((RAREColumn *) nil_chk(c)) getWidth] - toMuch withInt:0]];
    }
  }
}

- (void)revalidate {
  [super revalidate];
  preferredSize_ = nil;
}

- (void)setBottomMarginColorWithRAREUIColor:(RAREUIColor *)bottomMarginColor {
  self->bottomMarginColor_ = bottomMarginColor;
}

- (void)setColumnIconWithInt:(int)col
       withRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColumnsWithJavaUtilList:(id<JavaUtilList>)columns {
  measuredHeight_ = 0;
  lastVisibleColumn_ = -1;
  firstVisibleColumn_ = -1;
  if ([self getComponentPainter] == nil) {
    [self setupDafaultPainter];
  }
  iconPadding_ = 0;
  int len = [((id<JavaUtilList>) nil_chk(columns)) size];
  BOOL touchable = NO;
  IOSObjectArray *cols = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[RAREColumn class]]];
  IOSIntArray *vp = [IOSIntArray arrayWithLength:len];
  for (int i = 0; i < len; i++) {
    RAREColumn *c = [columns getWithInt:i];
    (void) IOSObjectArray_Set(cols, i, c);
    (*IOSIntArray_GetRef(vp, i)) = i;
    if (([((RAREColumn *) nil_chk(c)) getHeaderActionListener] != nil) || [c hasPopupMenu]) {
      touchable = YES;
    }
    if ([(id) [c getCellRenderer] isKindOfClass:[RAREaFormsLayoutRenderer class]]) {
      [((RAREaFormsLayoutRenderer *) check_class_cast([c getCellRenderer], [RAREaFormsLayoutRenderer class])) dataModelChangedWithRAREiPlatformListDataModel:[((id<RAREiTableComponent>) nil_chk([self getTableComponent])) getModel]];
    }
  }
  if (sortingAllowed_) {
    iconPadding_ = [((id<RAREiPlatformIcon>) nil_chk([self getSortIconWithBoolean:YES])) getIconHeight] / 2;
    touchable = YES;
  }
  if (touchable) {
    if ([RAREPlatform isTouchDevice] && (headerHeight_ == nil)) {
      headerHeight_ = @"1.75ln";
      headerHeightNum_ = [self calculateMinHeight];
    }
  }
  self->columns_ = cols;
  self->viewPositions_ = vp;
  preferredSize_ = nil;
  [self resetSelectionPaintColumns];
  [self setColumnsEx];
}

- (void)setColumnSelectionAllowedWithBoolean:(BOOL)columnSelectionAllowed {
  self->columnSelectionAllowed_ = columnSelectionAllowed;
}

- (void)setColumnTitleWithInt:(int)col
     withJavaLangCharSequence:(id<JavaLangCharSequence>)title {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColumnVisibleWithInt:(int)col
                    withBoolean:(BOOL)visible {
  if ([self isColumnVisibleWithInt:col] != visible) {
    lastVisibleColumn_ = -1;
    firstVisibleColumn_ = -1;
    [self setColumnVisibleExWithInt:col withBoolean:visible];
    int vp = [self getViewIndexForColumnAtWithInt:col];
    if ([self hasListenersWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)]]) {
      [RAREUtils fireChangeEventWithRAREEventListenerList:[self getEventListenerList] withRAREChangeEvent:[[RAREColumnChangeEvent alloc] initWithId:self withRAREColumnChangeEvent_ChangeTypeEnum:[RAREColumnChangeEvent_ChangeTypeEnum VISIBILITY_CHANGED] withInt:vp]];
    }
  }
}

- (void)setFontWithRAREUIFont:(RAREUIFont *)f {
  [super setFontWithRAREUIFont:f];
  measuredHeight_ = 0;
  headerHeightNum_ = [self calculateMinHeight];
}

- (void)setGridViewTypeWithRAREiTableComponent_GridViewTypeEnum:(RAREiTableComponent_GridViewTypeEnum *)gridViewMode {
  self->gridViewMode_ = gridViewMode;
}

- (void)setHeaderCellPainterWithRAREPaintBucket:(RAREPaintBucket *)headerPainter {
  self->headerCellPainter_ = headerPainter;
  if (headerPainter != nil) {
    if ([headerPainter getBorder] != nil) {
      cellInsets_ = [((id<RAREiPlatformBorder>) nil_chk([headerPainter getBorder])) getBorderInsetsWithRAREUIInsets:cellInsets_];
    }
    if ([headerPainter getForegroundColor] != nil) {
      [self setForegroundWithRAREUIColor:[headerPainter getForegroundColor]];
    }
    if ([headerPainter getFont] != nil) {
      [self setFontWithRAREUIFont:[headerPainter getFont]];
    }
  }
}

- (void)setHeaderHeightWithNSString:(NSString *)height {
  headerHeight_ = height;
  headerHeightNum_ = [self calculateMinHeight];
}

- (void)setHeaderTracksSectionsWithBoolean:(BOOL)headerTracksSections {
  self->headerTracksSections_ = headerTracksSections;
}

- (void)setMarginColorWithRAREUIColor:(RAREUIColor *)marginColor {
  if ((marginColor != nil) && ([marginColor getAlpha] == 0)) {
    marginColor = nil;
  }
  if (self->bottomMarginColor_ == self->marginColor_) {
    self->bottomMarginColor_ = nil;
  }
  self->marginColor_ = marginColor;
  if (self->bottomMarginColor_ == nil) {
    self->bottomMarginColor_ = marginColor;
  }
}

- (void)setMultiTableTableComponentWithRAREMultiTableTableComponent:(RAREMultiTableTableComponent *)mttc {
  multiTableTableComponent_ = mttc;
}

- (void)setPaintLeftMarginWithBoolean:(BOOL)paintLeftMargin {
  self->paintLeftMargin_ = paintLeftMargin;
}

- (void)setPaintRightMarginWithBoolean:(BOOL)paintRightMargin {
  self->paintRightMargin_ = paintRightMargin;
}

- (void)setPressedHeaderPainterWithRAREPaintBucket:(RAREPaintBucket *)pb {
  self->pressedHeaderPainter_ = pb;
}

- (void)setPropertyTabeWithBoolean:(BOOL)propertyTabe {
  self->propertyTabe_ = propertyTabe;
}

- (void)setPropertyTableActionsWithJavaUtilList:(id<JavaUtilList>)propertyTableActions {
  self->propertyTableActions_ = propertyTableActions;
}

- (void)setPropertyTableHeaderColumnDescriptionWithRAREColumn:(RAREColumn *)propertyTableHeaderColumnDescription {
  self->propertyTableHeaderColumnDescription_ = propertyTableHeaderColumnDescription;
}

- (void)setSelectedIndexWithInt:(int)index {
  if (selectionModel_ != nil) {
    [selectionModel_ clearAndSelectWithInt:index];
  }
}

- (void)setSelectedIndicesWithIntArray:(IOSIntArray *)indices {
  if (selectionModel_ != nil) {
    [selectionModel_ clearAndSelectWithIntArray:indices];
  }
}

- (void)setShowHeaderMarginWithBoolean:(BOOL)showHeaderMargin {
  self->showHeaderMargin_ = showHeaderMargin;
}

- (void)setSortColumnWithInt:(int)sortColumn
                 withBoolean:(BOOL)descending {
  if (sortingAllowed_) {
    if ((self->sortColumn_ != -1) && (self->sortColumn_ != sortColumn) && [self isShowing]) {
      [self repaintColumnWithInt:self->sortColumn_];
    }
    self->sortColumn_ = sortColumn;
    self->descending_ = descending;
    if ((self->sortColumn_ != -1) && [self isShowing]) {
      [self repaintColumnWithInt:self->sortColumn_];
    }
  }
}

- (void)setSortingAllowedWithBoolean:(BOOL)sortingAllowed {
  self->sortingAllowed_ = sortingAllowed;
}

- (BOOL)sizeColumnsToFitTableData {
  int len = (int) [((IOSObjectArray *) nil_chk(columns_)) count];
  if (len == 0) {
    return NO;
  }
  int maxRows = 500;
  JavaLangInteger *max = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getIntegerWithNSString:@"Rare.Table.sizeColumnsToFitMaxRows"];
  if ((max != nil) && ([max intValue] > 0)) {
    maxRows = [max intValue];
  }
  id<RAREiTableModel> tm = [((id<RAREiTableComponent>) nil_chk([self getTableComponent])) getModel];
  RAREColumn *c;
  int width = 0;
  int height = 0;
  RAREUIDimension *size = computeSize_;
  if (size == nil) {
    size = computeSize_ = [[RAREUIDimension alloc] init];
  }
  int w;
  int d = [RAREScreenUtils PLATFORM_PIXELS_1];
  for (int i = 0; i < len; i++) {
    c = IOSObjectArray_Get(columns_, i);
    if ([((RAREColumn *) nil_chk(c)) isVisible]) {
      if (c->sizeFixed_) {
        w = [c calculateMinimumWidthWithRAREiPlatformComponent:self withFloat:100];
      }
      else {
        w = [self calculateColumnWidthWithRAREiTableModel:tm withInt:i withRAREColumn:c withInt:maxRows withRAREUIDimension:size withRAREaTableHeader_SizeTypeEnum:[RAREaTableHeader_SizeTypeEnum FIT]];
      }
      [c setWidthWithInt:w];
      height = [JavaLangMath maxWithInt:[((RAREUIDimension *) nil_chk(size)) intHeight] withInt:height];
      width += w + d;
    }
  }
  autoSizedColumns_ = YES;
  measuredHeight_ = height;
  if (preferredSize_ == nil) {
    preferredSize_ = [[RAREUIDimension alloc] initWithFloat:width withFloat:height];
  }
  else {
    [preferredSize_ setSizeWithInt:width withInt:height];
  }
  return YES;
}

- (void)sortWithRAREColumn:(RAREColumn *)c {
  IOSObjectArray *cols = self->columns_;
  int len = (int) [((IOSObjectArray *) nil_chk(cols)) count];
  for (int i = 0; i < len; i++) {
    if (IOSObjectArray_Get(cols, i) == c) {
      [((id<RAREiTableComponent>) nil_chk([self getTableComponent])) sortWithInt:i];
      break;
    }
  }
}

- (BOOL)wantsLongPress {
  return YES;
}

- (int)calculateMinHeight {
  int h = 0;
  if (headerHeight_ != nil) {
    h = [RAREScreenUtils toPlatformPixelHeightWithNSString:headerHeight_ withRAREiPlatformComponent:self withFloat:100];
  }
  NSString *s = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getStringWithNSString:@"Rare.Table.minimumTouchableHeaderHeight"];
  if (s != nil) {
    int hh = [RAREScreenUtils toPlatformPixelHeightWithNSString:s withRAREiPlatformComponent:self withFloat:100];
    h = [JavaLangMath maxWithInt:hh withInt:h];
  }
  return h;
}

- (void)columnMovedWithInt:(int)from
                   withInt:(int)to {
  if ([RAREUTIntList moveWithIntArray:viewPositions_ withInt:-1 withInt:from withInt:to]) {
    lastVisibleColumn_ = -1;
    firstVisibleColumn_ = -1;
    if ([self hasListenersWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)]]) {
      [RAREUtils fireChangeEventWithRAREEventListenerList:[self getEventListenerList] withRAREChangeEvent:[[RAREColumnChangeEvent alloc] initWithId:self withRAREColumnChangeEvent_ChangeTypeEnum:[RAREColumnChangeEvent_ChangeTypeEnum MOVED] withInt:from withInt:to]];
    }
  }
}

- (void)getMinimumSizeExWithRAREUIDimension:(RAREUIDimension *)size
                                  withFloat:(float)maxWidth {
  [self getSizeWithRAREUIDimension:size withBoolean:YES withFloat:100];
}

- (RAREPaintBucket *)getPressedPainter {
  if (pressedHeaderPainter_ == nil) {
    pressedHeaderPainter_ = [RARETableHelper getPressedPainterWithRAREUIColor:[self getBackground]];
  }
  return pressedHeaderPainter_;
}

- (id<RAREiPlatformIcon>)getSortIconWithBoolean:(BOOL)descending {
  if (RAREaTableHeader_sort_asc_ == nil) {
    RAREaTableHeader_sort_asc_ = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getResourceAsIconWithNSString:@"Rare.icon.sort_asc"];
    RAREaTableHeader_sort_dsc_ = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getResourceAsIconWithNSString:@"Rare.icon.sort_dsc"];
  }
  return descending ? RAREaTableHeader_sort_dsc_ : RAREaTableHeader_sort_asc_;
}

- (id<RAREiPlatformComponent>)getTableComponentEx {
  return [((id<RAREiTableComponent>) nil_chk([self getTableComponent])) getPlatformComponent];
}

- (IOSObjectArray *)getWrappedColumnsWithInt:(int)count {
  RAREColumn *c = IOSObjectArray_Get(nil_chk(columns_), 0);
  IOSObjectArray *list = [IOSObjectArray arrayWithLength:count type:[IOSClass classWithClass:[RAREColumn class]]];
  for (int i = 0; i < count; i++) {
    (void) IOSObjectArray_Set(list, i, c);
  }
  return list;
}

- (BOOL)handleMousePressWithRAREMouseEvent:(RAREMouseEvent *)e {
  return YES;
}

- (void)repaintColumnWithInt:(int)col {
  [self repaint];
}

- (void)resetSelectionPaintColumns {
  IOSObjectArray *cols = columns_;
  RAREColumn *c;
  int len = (int) [((IOSObjectArray *) nil_chk(cols)) count];
  selectionPaintStartCol_ = 0;
  selectionPaintEndCol_ = len - 1;
  for (int i = 0; i < len; i++) {
    c = IOSObjectArray_Get(cols, i);
    if (!((RAREColumn *) nil_chk(c))->overrideSelectionBackground_ && [c isVisible]) {
      break;
    }
    selectionPaintStartCol_++;
  }
  for (int i = len - 1; i > selectionPaintStartCol_; i--) {
    c = IOSObjectArray_Get(cols, i);
    if ([((RAREColumn *) nil_chk(c)) isVisible] && !c->overrideSelectionBackground_) {
      break;
    }
    selectionPaintEndCol_--;
  }
}

- (void)resetTableModelWithRAREUTiFilterableList:(id<RAREUTiFilterableList>)rows {
  [((id<RAREiTableModel>) nil_chk([((id<RAREiTableComponent>) nil_chk([self getTableComponent])) getModel])) resetModelWithJavaUtilList:[JavaUtilArrays asListWithNSObjectArray:columns_] withRAREUTiFilterableList:rows];
}

- (void)setColumnPressedWithInt:(int)col
                    withBoolean:(BOOL)pressed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColumnsEx {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColumnVisibleExWithInt:(int)col
                      withBoolean:(BOOL)visible {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setupDafaultPainter {
  if (headerCellPainter_ == nil) {
    RAREPaintBucket *pb;
    if (propertyTabe_) {
      pb = [[RAREPaintBucket alloc] initWithRAREUIColor:[RAREColorUtils getBackground]];
    }
    else {
      pb = [RARETableHelper getDefaultPainterWithRAREUIColor:[self getBackgroundEx]];
    }
    [self setComponentPainterWithRAREiPlatformComponentPainter:[((RAREPaintBucket *) nil_chk(pb)) getCachedComponentPainter]];
  }
}

- (void)tableHadInteraction {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateGridColumnWidthsWithInt:(int)width {
  {
    IOSObjectArray *a__ = columns_;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      RAREColumn *c = (*b__++);
      [((RAREColumn *) nil_chk(c)) setWidthWithInt:width];
    }
  }
}

- (int)getFirstVisibleColumn {
  if (firstVisibleColumn_ == -1) {
    IOSObjectArray *cols = columns_;
    IOSIntArray *vp = viewPositions_;
    int len = (int) [((IOSObjectArray *) nil_chk(cols)) count];
    for (int i = 0; i < len; i++) {
      if ([((RAREColumn *) IOSObjectArray_Get(cols, IOSIntArray_Get(nil_chk(vp), i))) isVisible]) {
        firstVisibleColumn_ = i;
        break;
      }
    }
  }
  return firstVisibleColumn_;
}

+ (IOSObjectArray *)createGridColumnsWithRAREColumnArray:(IOSObjectArray *)columns
                                        withJavaUtilList:(id<JavaUtilList>)rows {
  IOSObjectArray *a = columns;
  int count = 0;
  int len = [((id<JavaUtilList>) nil_chk(rows)) size];
  for (int i = 0; i < len; i++) {
    int n = [((RARERenderableDataItem *) nil_chk([rows getWithInt:i])) size];
    if (n > count) {
      count = n;
    }
  }
  if ((int) [((IOSObjectArray *) nil_chk(columns)) count] <= count) {
    a = [IOSObjectArray arrayWithLength:count type:[IOSClass classWithClass:[RAREColumn class]]];
    len = (int) [columns count];
    [JavaLangSystem arraycopyWithId:columns withInt:0 withId:a withInt:0 withInt:len];
    RAREColumn *c = IOSObjectArray_Get(columns, len - 1);
    for (int i = len; i < count; i++) {
      (void) IOSObjectArray_Set(a, i, c);
    }
  }
  return a;
}

+ (id<RAREUTiFilterableList>)wrapItemsWithRAREUTiFilterableList:(id<RAREUTiFilterableList>)rows
                                                        withInt:(int)count {
  int len = [((id<RAREUTiFilterableList>) nil_chk(rows)) size];
  if (len == 0) {
    return rows;
  }
  RARERenderableDataItem *row = [[RARERenderableDataItem alloc] init];
  [row ensureCapacityWithInt:count];
  RAREUTFilterableList *nrows = [[RAREUTFilterableList alloc] initWithInt:(len > 5) ? len + 1 : 5];
  int j = 0;
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *orow = [rows getWithInt:i];
    int n = [((RARERenderableDataItem *) nil_chk(orow)) size];
    for (int p = 0; p < n; p++) {
      [row addWithId:[orow getWithInt:p]];
      j++;
      if (j == count) {
        [nrows addWithId:row];
        row = [[RARERenderableDataItem alloc] init];
        [row ensureCapacityWithInt:count];
        j = 0;
      }
    }
  }
  len = [row size];
  if (len > 0) {
    if (len < count) {
      for (int i = len; i < count; i++) {
        RARERenderableDataItem *item = [[RARERenderableDataItem alloc] init];
        [item setSelectableWithBoolean:NO];
        [item setVisibleWithBoolean:NO];
        [row addWithId:item];
      }
    }
    [nrows addWithId:row];
  }
  return nrows;
}

+ (void)initialize {
  if (self == [RAREaTableHeader class]) {
    RAREaTableHeader_columnSizePad_ = [RAREScreenUtils PLATFORM_PIXELS_2];
  }
}

- (void)copyAllFieldsTo:(RAREaTableHeader *)other {
  [super copyAllFieldsTo:other];
  other->autoSizedColumns_ = autoSizedColumns_;
  other->bottomMarginColor_ = bottomMarginColor_;
  other->cellInsets_ = cellInsets_;
  other->chagingColumns_ = chagingColumns_;
  other->columnSelectionAllowed_ = columnSelectionAllowed_;
  other->columns_ = columns_;
  other->computeSize_ = computeSize_;
  other->descending_ = descending_;
  other->firstVisibleColumn_ = firstVisibleColumn_;
  other->flatCount_ = flatCount_;
  other->gridViewMode_ = gridViewMode_;
  other->headerCellPainter_ = headerCellPainter_;
  other->headerHeight_ = headerHeight_;
  other->headerHeightNum_ = headerHeightNum_;
  other->headerPadding_ = headerPadding_;
  other->headerTracksSections_ = headerTracksSections_;
  other->iconPadding_ = iconPadding_;
  other->lastVisibleColumn_ = lastVisibleColumn_;
  other->marginColor_ = marginColor_;
  other->measuredHeight_ = measuredHeight_;
  other->multiTableTableComponent_ = multiTableTableComponent_;
  other->multiTableViewPositions_ = multiTableViewPositions_;
  other->originalItems_ = originalItems_;
  other->paintLeftMargin_ = paintLeftMargin_;
  other->paintRightMargin_ = paintRightMargin_;
  other->preferredSize_ = preferredSize_;
  other->pressedColumn_ = pressedColumn_;
  other->pressedHeaderPainter_ = pressedHeaderPainter_;
  other->propertyTabe_ = propertyTabe_;
  other->propertyTableActions_ = propertyTableActions_;
  other->propertyTableHeaderColumnDescription_ = propertyTableHeaderColumnDescription_;
  other->renderingComponent_ = renderingComponent_;
  other->selectionModel_ = selectionModel_;
  other->selectionPaintEndCol_ = selectionPaintEndCol_;
  other->selectionPaintStartCol_ = selectionPaintStartCol_;
  other->showHeaderMargin_ = showHeaderMargin_;
  other->sortColumn_ = sortColumn_;
  other->sortingAllowed_ = sortingAllowed_;
  other->viewPositions_ = viewPositions_;
  other->wrappRows_ = wrappRows_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x4, NULL },
    { "columnInRowClickedWithInt:withInt:", NULL, "Z", 0x1, NULL },
    { "getBottomMarginColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getColumnAtWithInt:", NULL, "LRAREColumn", 0x1, NULL },
    { "getColumnForViewAtWithInt:", NULL, "LRAREColumn", 0x1, NULL },
    { "getColumnIndexAtWithFloat:withFloat:", NULL, "I", 0x401, NULL },
    { "getColumns", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getGridViewType", NULL, "LRAREiTableComponent_GridViewTypeEnum", 0x1, NULL },
    { "getHotspotPopupLocationWithInt:", NULL, "LRAREUIPoint", 0x1, NULL },
    { "getMarginColor", NULL, "LRAREUIColor", 0x1, NULL },
    { "getMinimumSizeWithRAREUIDimension:", NULL, "LRAREUIDimension", 0x1, NULL },
    { "getMultiTableTableComponent", NULL, "LRAREMultiTableTableComponent", 0x1, NULL },
    { "getPreferredSizeWithRAREUIDimension:", NULL, "LRAREUIDimension", 0x1, NULL },
    { "getPropertyTableActions", NULL, "LJavaUtilList", 0x1, NULL },
    { "getPropertyTableHeaderColumnDescription", NULL, "LRAREColumn", 0x1, NULL },
    { "getSelectedColumnIndices", NULL, "LIOSIntArray", 0x1, NULL },
    { "getTableComponent", NULL, "LRAREiTableComponent", 0x401, NULL },
    { "handleGridViewWithInt:withInt:withInt:withBoolean:", NULL, "Z", 0x1, NULL },
    { "handleMouseReleaseWithRAREMouseEvent:", NULL, "Z", 0x1, NULL },
    { "isAutoSizedColumns", NULL, "Z", 0x1, NULL },
    { "isColumnSelectionAllowed", NULL, "Z", 0x1, NULL },
    { "isColumnVisibleWithInt:", NULL, "Z", 0x1, NULL },
    { "isGridView", NULL, "Z", 0x1, NULL },
    { "isHeaderTracksSections", NULL, "Z", 0x1, NULL },
    { "isPaintLeftMargin", NULL, "Z", 0x1, NULL },
    { "isPaintRightMargin", NULL, "Z", 0x1, NULL },
    { "isPropertyTabe", NULL, "Z", 0x1, NULL },
    { "isShowHeaderMargin", NULL, "Z", 0x1, NULL },
    { "isSortingAllowed", NULL, "Z", 0x1, NULL },
    { "moveColumnWithInt:withInt:", NULL, "V", 0x401, NULL },
    { "paintColumnWithRAREColumn:withRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:", NULL, "Z", 0x1, NULL },
    { "paintColumnWithInt:withRAREiPlatformGraphics:withFloat:withFloat:withFloat:withFloat:", NULL, "Z", 0x1, NULL },
    { "setColumnIconWithInt:withRAREiPlatformIcon:", NULL, "V", 0x401, NULL },
    { "setColumnTitleWithInt:withJavaLangCharSequence:", NULL, "V", 0x401, NULL },
    { "sizeColumnsToFitTableData", NULL, "Z", 0x1, NULL },
    { "wantsLongPress", NULL, "Z", 0x1, NULL },
    { "calculateMinHeight", NULL, "I", 0x4, NULL },
    { "columnMovedWithInt:withInt:", NULL, "V", 0x4, NULL },
    { "getMinimumSizeExWithRAREUIDimension:withFloat:", NULL, "V", 0x4, NULL },
    { "getPressedPainter", NULL, "LRAREPaintBucket", 0x4, NULL },
    { "getSortIconWithBoolean:", NULL, "LRAREiPlatformIcon", 0x4, NULL },
    { "getTableComponentEx", NULL, "LRAREiPlatformComponent", 0x4, NULL },
    { "getWrappedColumnsWithInt:", NULL, "LIOSObjectArray", 0x4, NULL },
    { "handleMousePressWithRAREMouseEvent:", NULL, "Z", 0x4, NULL },
    { "repaintColumnWithInt:", NULL, "V", 0x4, NULL },
    { "resetSelectionPaintColumns", NULL, "V", 0x4, NULL },
    { "resetTableModelWithRAREUTiFilterableList:", NULL, "V", 0x4, NULL },
    { "setColumnPressedWithInt:withBoolean:", NULL, "V", 0x404, NULL },
    { "setColumnsEx", NULL, "V", 0x404, NULL },
    { "setColumnVisibleExWithInt:withBoolean:", NULL, "V", 0x404, NULL },
    { "setupDafaultPainter", NULL, "V", 0x4, NULL },
    { "tableHadInteraction", NULL, "V", 0x404, NULL },
    { "updateGridColumnWidthsWithInt:", NULL, "V", 0x4, NULL },
    { "getFirstVisibleColumn", NULL, "I", 0x2, NULL },
    { "createGridColumnsWithRAREColumnArray:withJavaUtilList:", NULL, "LIOSObjectArray", 0x9, NULL },
    { "wrapItemsWithRAREUTiFilterableList:withInt:", NULL, "LRAREUTiFilterableList", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "columnSizePad_", NULL, 0xc, "I" },
    { "sort_asc_", NULL, 0xc, "LRAREiPlatformIcon" },
    { "sort_dsc_", NULL, 0xc, "LRAREiPlatformIcon" },
    { "columns_", NULL, 0x4, "LIOSObjectArray" },
    { "viewPositions_", NULL, 0x4, "LIOSIntArray" },
    { "multiTableTableComponent_", NULL, 0x4, "LRAREMultiTableTableComponent" },
    { "cellInsets_", NULL, 0x4, "LRAREUIInsets" },
    { "headerPadding_", NULL, 0x4, "LRAREUIInsets" },
    { "pressedColumn_", NULL, 0x4, "I" },
    { "sortColumn_", NULL, 0x4, "I" },
    { "showHeaderMargin_", NULL, 0x4, "Z" },
    { "autoSizedColumns_", NULL, 0x4, "Z" },
    { "bottomMarginColor_", NULL, 0x4, "LRAREUIColor" },
    { "chagingColumns_", NULL, 0x4, "Z" },
    { "columnSelectionAllowed_", NULL, 0x4, "Z" },
    { "descending_", NULL, 0x4, "Z" },
    { "gridViewMode_", NULL, 0x4, "LRAREiTableComponent_GridViewTypeEnum" },
    { "headerCellPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "headerHeight_", NULL, 0x4, "LNSString" },
    { "headerHeightNum_", NULL, 0x4, "I" },
    { "headerTracksSections_", NULL, 0x4, "Z" },
    { "iconPadding_", NULL, 0x4, "I" },
    { "marginColor_", NULL, 0x4, "LRAREUIColor" },
    { "measuredHeight_", NULL, 0x4, "I" },
    { "preferredSize_", NULL, 0x4, "LRAREUIDimension" },
    { "pressedHeaderPainter_", NULL, 0x4, "LRAREPaintBucket" },
    { "propertyTabe_", NULL, 0x4, "Z" },
    { "propertyTableActions_", NULL, 0x4, "LJavaUtilList" },
    { "propertyTableHeaderColumnDescription_", NULL, 0x4, "LRAREColumn" },
    { "renderingComponent_", NULL, 0x4, "LRAREUILabelRenderer" },
    { "selectionModel_", NULL, 0x4, "LRAREBasicSelectionModel" },
    { "selectionPaintEndCol_", NULL, 0x4, "I" },
    { "selectionPaintStartCol_", NULL, 0x4, "I" },
    { "sortingAllowed_", NULL, 0x4, "Z" },
    { "originalItems_", NULL, 0x0, "LRAREUTiFilterableList" },
    { "wrappRows_", NULL, 0x4, "LRAREUTiFilterableList" },
    { "paintLeftMargin_", NULL, 0x4, "Z" },
    { "paintRightMargin_", NULL, 0x4, "Z" },
    { "lastVisibleColumn_", NULL, 0x4, "I" },
    { "firstVisibleColumn_", NULL, 0x4, "I" },
    { "multiTableViewPositions_", NULL, 0x4, "LIOSIntArray" },
  };
  static J2ObjcClassInfo _RAREaTableHeader = { "aTableHeader", "com.appnativa.rare.ui.table", NULL, 0x401, 56, methods, 41, fields, 0, NULL};
  return &_RAREaTableHeader;
}

@end
@implementation RAREaTableHeader_MouseListener

- (id)initWithRAREaTableHeader:(RAREaTableHeader *)outer$ {
  this$0_ = outer$;
  if (self = [super init]) {
    originalPressedColumn_ = -1;
    slop_ = [RAREPlatformHelper getTouchSlop];
  }
  return self;
}

- (void)mouseDraggedWithRAREMouseEvent:(RAREMouseEvent *)e {
  if (downPoint_ != nil) {
    float x = [((RAREMouseEvent *) nil_chk(e)) getX];
    float y = [e getY];
    if (([JavaLangMath absWithFloat:x - downPoint_->x_] > slop_) || ([JavaLangMath absWithFloat:y - downPoint_->y_] > slop_)) {
      [self pressCanceledWithRAREMouseEvent:e];
    }
  }
}

- (void)mouseEnteredWithRAREMouseEvent:(RAREMouseEvent *)e {
  if (originalPressedColumn_ != -1) {
    RAREUIPoint *p = [((RAREMouseEvent *) nil_chk(e)) getPoint];
    int n = [this$0_ getColumnIndexAtWithFloat:(int) ((RAREUIPoint *) nil_chk(p))->x_ withFloat:(int) p->y_];
    if (n == originalPressedColumn_) {
      this$0_->pressedColumn_ = originalPressedColumn_;
      [this$0_ setColumnPressedWithInt:this$0_->pressedColumn_ withBoolean:YES];
      return;
    }
  }
}

- (void)mouseExitedWithRAREMouseEvent:(RAREMouseEvent *)e {
  if (this$0_->pressedColumn_ != -1) {
    [this$0_ setColumnPressedWithInt:this$0_->pressedColumn_ withBoolean:NO];
    this$0_->pressedColumn_ = -1;
  }
}

- (void)mouseMovedWithRAREMouseEvent:(RAREMouseEvent *)e {
}

- (void)mousePressedWithRAREMouseEvent:(RAREMouseEvent *)e {
  if (![this$0_ isEnabled]) {
    return;
  }
  this$0_->pressedColumn_ = -1;
  if (![((id<RAREiPlatformComponent>) nil_chk([this$0_ getTableComponentEx])) hasHadInteraction]) {
    [this$0_ tableHadInteraction];
  }
  if (![this$0_ handleMousePressWithRAREMouseEvent:e]) {
    return;
  }
  RAREUIPoint *p = [((RAREMouseEvent *) nil_chk(e)) getPoint];
  int n = [this$0_ getColumnIndexAtWithFloat:(int) ((RAREUIPoint *) nil_chk(p))->x_ withFloat:(int) p->y_];
  if (n != -1) {
    RAREColumn *c = [this$0_ getColumnAtWithInt:n];
    id<RAREiWidget> w = [RAREPlatform findWidgetForComponentWithId:this$0_];
    if ([e isPopupTrigger]) {
      RAREUIPopupMenu *menu = [((RAREColumn *) nil_chk(c)) getPopupMenuWithRAREiWidget:w];
      if (menu != nil) {
        p = [e getLocationOnScreen];
        [menu showWithRAREiPlatformComponent:this$0_ withInt:(int) ((RAREUIPoint *) nil_chk(p))->x_ withInt:(int) p->y_];
      }
    }
    else if ([((RAREColumn *) nil_chk(c)) isSelectable] && ([this$0_ isSortingAllowed] || ([c getHeaderActionListener] != nil) || ([c getPopupMenuWithRAREiWidget:w] != nil))) {
      this$0_->pressedColumn_ = n;
      downPoint_ = p;
      originalPressedColumn_ = n;
      [this$0_ setColumnPressedWithInt:n withBoolean:YES];
    }
  }
}

- (void)mouseReleasedWithRAREMouseEvent:(RAREMouseEvent *)e {
  if (![this$0_ isEnabled]) {
    return;
  }
  if (![this$0_ handleMouseReleaseWithRAREMouseEvent:e]) {
    return;
  }
  int pc = this$0_->pressedColumn_;
  originalPressedColumn_ = this$0_->pressedColumn_ = -1;
  if (pc != -1) {
    [this$0_ setColumnPressedWithInt:pc withBoolean:NO];
  }
  RAREUIPoint *p = [((RAREMouseEvent *) nil_chk(e)) getPoint];
  int n = [this$0_ getColumnIndexAtWithFloat:(int) ((RAREUIPoint *) nil_chk(p))->x_ withFloat:(int) p->y_];
  if (n == -1) {
    return;
  }
  id<RAREiWidget> w = [RAREPlatform findWidgetForComponentWithId:this$0_];
  RAREColumn *c = [this$0_ getColumnAtWithInt:n];
  if ([e isPopupTrigger]) {
    RAREUIPopupMenu *menu = [((RAREColumn *) nil_chk(c)) getPopupMenuWithRAREiWidget:w];
    if (menu != nil) {
      p = [e getLocationOnScreen];
      [menu showWithRAREiPlatformComponent:this$0_ withInt:(int) ((RAREUIPoint *) nil_chk(p))->x_ withInt:(int) p->y_];
    }
  }
  else if (pc != -1) {
    if ([((RAREColumn *) nil_chk(c)) getHeaderActionListener] != nil) {
      [((id<RAREiActionListener>) nil_chk([c getHeaderActionListener])) actionPerformedWithRAREActionEvent:[[RAREActionEvent alloc] initWithId:c]];
    }
    else if ([this$0_ isSortingAllowed]) {
      [((RARETableViewer *) check_class_cast([this$0_ getWidget], [RARETableViewer class])) sortWithInt:[this$0_ getColumnIndexForClickedColumnWithInt:n] withBoolean:![((RARETableViewer *) check_class_cast([this$0_ getWidget], [RARETableViewer class])) isSortDescending]];
    }
  }
}

- (void)pressCanceledWithRAREMouseEvent:(RAREMouseEvent *)e {
  if (this$0_->pressedColumn_ != -1) {
    [this$0_ setColumnPressedWithInt:this$0_->pressedColumn_ withBoolean:NO];
    originalPressedColumn_ = this$0_->pressedColumn_ = -1;
  }
}

- (BOOL)wantsLongPress {
  return YES;
}

- (BOOL)wantsMouseMovedEvents {
  return NO;
}

- (void)copyAllFieldsTo:(RAREaTableHeader_MouseListener *)other {
  [super copyAllFieldsTo:other];
  other->downPoint_ = downPoint_;
  other->downY_ = downY_;
  other->originalPressedColumn_ = originalPressedColumn_;
  other->slop_ = slop_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "wantsLongPress", NULL, "Z", 0x1, NULL },
    { "wantsMouseMovedEvents", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaTableHeader" },
    { "downPoint_", NULL, 0x0, "LRAREUIPoint" },
    { "downY_", NULL, 0x0, "F" },
  };
  static J2ObjcClassInfo _RAREaTableHeader_MouseListener = { "MouseListener", "com.appnativa.rare.ui.table", "aTableHeader", 0x4, 2, methods, 3, fields, 0, NULL};
  return &_RAREaTableHeader_MouseListener;
}

@end

static RAREaTableHeader_SizeTypeEnum *RAREaTableHeader_SizeTypeEnum_MIN;
static RAREaTableHeader_SizeTypeEnum *RAREaTableHeader_SizeTypeEnum_PREFERRED;
static RAREaTableHeader_SizeTypeEnum *RAREaTableHeader_SizeTypeEnum_FIT;
IOSObjectArray *RAREaTableHeader_SizeTypeEnum_values;

@implementation RAREaTableHeader_SizeTypeEnum

+ (RAREaTableHeader_SizeTypeEnum *)MIN {
  return RAREaTableHeader_SizeTypeEnum_MIN;
}
+ (RAREaTableHeader_SizeTypeEnum *)PREFERRED {
  return RAREaTableHeader_SizeTypeEnum_PREFERRED;
}
+ (RAREaTableHeader_SizeTypeEnum *)FIT {
  return RAREaTableHeader_SizeTypeEnum_FIT;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [RAREaTableHeader_SizeTypeEnum class]) {
    RAREaTableHeader_SizeTypeEnum_MIN = [[RAREaTableHeader_SizeTypeEnum alloc] initWithNSString:@"MIN" withInt:0];
    RAREaTableHeader_SizeTypeEnum_PREFERRED = [[RAREaTableHeader_SizeTypeEnum alloc] initWithNSString:@"PREFERRED" withInt:1];
    RAREaTableHeader_SizeTypeEnum_FIT = [[RAREaTableHeader_SizeTypeEnum alloc] initWithNSString:@"FIT" withInt:2];
    RAREaTableHeader_SizeTypeEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ RAREaTableHeader_SizeTypeEnum_MIN, RAREaTableHeader_SizeTypeEnum_PREFERRED, RAREaTableHeader_SizeTypeEnum_FIT, nil } count:3 type:[IOSClass classWithClass:[RAREaTableHeader_SizeTypeEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:RAREaTableHeader_SizeTypeEnum_values];
}

+ (RAREaTableHeader_SizeTypeEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [RAREaTableHeader_SizeTypeEnum_values count]; i++) {
    RAREaTableHeader_SizeTypeEnum *e = RAREaTableHeader_SizeTypeEnum_values->buffer_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

+ (J2ObjcClassInfo *)__metadata {
  static const char *superclass_type_args[] = {"LRAREaTableHeader_SizeTypeEnum"};
  static J2ObjcClassInfo _RAREaTableHeader_SizeTypeEnum = { "SizeType", "com.appnativa.rare.ui.table", "aTableHeader", 0x4018, 0, NULL, 0, NULL, 1, superclass_type_args};
  return &_RAREaTableHeader_SizeTypeEnum;
}

@end
