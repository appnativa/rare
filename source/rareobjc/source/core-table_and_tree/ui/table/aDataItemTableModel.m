//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-table_and_tree/com/appnativa/rare/ui/table/aDataItemTableModel.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/event/EventListenerList.h"
#include "com/appnativa/rare/ui/event/iDataModelListener.h"
#include "com/appnativa/rare/ui/iListHandler.h"
#include "com/appnativa/rare/ui/iTableModel.h"
#include "com/appnativa/rare/ui/table/TableModelFilterableList.h"
#include "com/appnativa/rare/ui/table/aDataItemTableModel.h"
#include "com/appnativa/rare/util/ItemStringConverter.h"
#include "com/appnativa/rare/util/SubItemComparator.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/CharacterIndex.h"
#include "com/appnativa/util/FilterableList.h"
#include "com/appnativa/util/IntList.h"
#include "com/appnativa/util/iFilter.h"
#include "com/appnativa/util/iFilterableList.h"
#include "com/appnativa/util/iStringConverter.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"

@implementation RAREaDataItemTableModel

- (BOOL)addWithId:(RARERenderableDataItem *)e {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addWithId:e];
  [self updateForInsertionOrDeletion];
  return YES;
}

- (void)addWithInt:(int)i
            withId:(RARERenderableDataItem *)e {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addWithInt:i withId:e];
  if (i == -1) {
    [self updateForInsertionOrDeletion];
  }
  else {
    [self rowsInsertedWithInt:i withInt:i];
  }
  rowCount_ = [rowData_ size];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addAllWithJavaUtilCollection:collection];
  [self updateForInsertionOrDeletion];
  return YES;
}

- (BOOL)addAllWithInt:(int)i
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  int csize = [((id<JavaUtilCollection>) nil_chk(collection)) size];
  if (csize == 0) {
    return NO;
  }
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addAllWithInt:i withJavaUtilCollection:collection];
  if (i == -1) {
    i = rowCount_;
  }
  [self rowsInsertedWithInt:i withInt:i + csize - 1];
  rowCount_ = [rowData_ size];
  return YES;
}

- (void)addDataModelListenerWithRAREiDataModelListener:(id<RAREiDataModelListener>)l {
  if (listenerList_ == nil) {
    listenerList_ = [[RAREEventListenerList alloc] init];
  }
  [((RAREEventListenerList *) nil_chk(listenerList_)) addWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiDataModelListener)] withId:l];
}

- (void)addIndexToFilteredListWithInt:(int)index {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addIndexToFilteredListWithInt:index];
  [self updateForInsertionOrDeletion];
}

- (void)addRowWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addWithId:row];
  [self updateForInsertionOrDeletion];
}

- (void)addRowWithInt:(int)index
withRARERenderableDataItem:(RARERenderableDataItem *)row {
  [self addWithInt:index withId:row];
}

- (void)addRowExWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addWithId:row];
}

- (void)addRowExWithInt:(int)index
withRARERenderableDataItem:(RARERenderableDataItem *)row {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addWithInt:index withId:row];
}

- (void)addRowsWithJavaUtilCollection:(id<JavaUtilCollection>)rows {
  [self addAllWithJavaUtilCollection:rows];
}

- (void)addRowsWithInt:(int)index
withJavaUtilCollection:(id<JavaUtilCollection>)rows {
  [self addAllWithInt:index withJavaUtilCollection:rows];
}

- (void)addRowsExWithJavaUtilCollection:(id<JavaUtilCollection>)rows {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addAllWithJavaUtilCollection:rows];
}

- (void)addRowsExWithInt:(int)index
  withJavaUtilCollection:(id<JavaUtilCollection>)rows {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addAllWithInt:index withJavaUtilCollection:rows];
}

- (void)addToFilteredListWithId:(RARERenderableDataItem *)row {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addToFilteredListWithId:row];
  [self updateForInsertionOrDeletion];
}

- (void)addToFilteredListWithInt:(int)index
                          withId:(RARERenderableDataItem *)row {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addToFilteredListWithInt:index withId:row];
  [self updateForInsertionOrDeletion];
}

- (void)clear {
  if (rowCount_ > 0) {
    [self clearRows];
    [self fireTableDataChanged];
  }
}

- (void)clearEx {
  [self clearRows];
}

- (void)clearTable {
  [((id<JavaUtilList>) nil_chk(columnData_)) clear];
  [self clearRows];
  [self tableChanged];
}

- (void)clearTableData {
  [self clearRows];
  [self tableDataChanged];
}

- (void)clearTableDataEx {
  [self clearRows];
  hasModifiedValues_ = NO;
}

- (id<JavaUtilList>)concatWithJavaUtilListArray:(IOSObjectArray *)e {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) concatWithJavaUtilListArray:e];
}

- (BOOL)containsWithId:(id)o {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) containsWithId:o];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)clctn {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) containsAllWithJavaUtilCollection:clctn];
}

- (void)dispose {
  [self clearRows];
  if (listenerList_ != nil) {
    [listenerList_ clear];
  }
  itemComparator_ = nil;
  columnData_ = nil;
  rowData_ = nil;
  rowCount_ = 0;
  theWidget_ = nil;
  filterableList_ = nil;
  listenerList_ = nil;
  columnConverter_ = nil;
}

- (void)editModeChangeAllMarksWithBoolean:(BOOL)mark {
  if (editingMarks_ != nil) {
    if (mark) {
      int len = [self size];
      [editingMarks_ ensureCapacityWithInt:len];
      IOSIntArray *a = editingMarks_->A_;
      for (int i = 0; i < len; i++) {
        (*IOSIntArray_GetRef(nil_chk(a), i)) = i;
      }
      editingMarks_->_length_ = len;
    }
    else {
      [editingMarks_ clear];
    }
  }
}

- (void)editModeChangeMarkWithInt:(int)index
                      withBoolean:(BOOL)mark {
  if (editingMarks_ != nil) {
    int i = [editingMarks_ indexOfWithInt:index];
    if (mark) {
      if (i == -1) {
        [editingMarks_ addWithInt:index];
      }
    }
    else if (i != -1) {
      [editingMarks_ removeAtWithInt:i];
    }
  }
}

- (void)editModeClearMarks {
  if (editingMarks_ != nil) {
    editingMarks_->_length_ = 0;
  }
}

- (int)editModeGetMarkCount {
  return (editingMarks_ == nil) ? 0 : editingMarks_->_length_;
}

- (IOSIntArray *)editModeGetMarkedIndices {
  if ((editingMarks_ == nil) || (editingMarks_->_length_ == 0)) {
    return nil;
  }
  return [((RAREUTIntList *) nil_chk(editingMarks_)) toArray];
}

- (IOSObjectArray *)editModeGetMarkedItems {
  if ((editingMarks_ == nil) || (editingMarks_->_length_ == 0)) {
    return nil;
  }
  int len = ((RAREUTIntList *) nil_chk(editingMarks_))->_length_;
  IOSIntArray *a = editingMarks_->A_;
  IOSObjectArray *items = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[RARERenderableDataItem class]]];
  for (int i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(items, i, [self getWithInt:IOSIntArray_Get(nil_chk(a), i)]);
  }
  return items;
}

- (BOOL)editModeIsItemMarkedWithInt:(int)index {
  if ((editingMarks_ == nil) || (editingMarks_->_length_ == 0)) {
    return NO;
  }
  return [((RAREUTIntList *) nil_chk(editingMarks_)) indexOfWithInt:index] != -1;
}

- (void)editModeToggleMarkWithInt:(int)index {
  if (editingMarks_ != nil) {
    int i = [editingMarks_ indexOfWithInt:index];
    if (i == -1) {
      [editingMarks_ addWithInt:index];
    }
    else {
      [editingMarks_ removeAtWithInt:i];
    }
  }
}

- (void)ensureCapacityWithInt:(int)capacity {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) ensureCapacityWithInt:capacity];
}

- (BOOL)filterWithRAREUTiFilter:(id<RAREUTiFilter>)filter {
  BOOL changed = NO;
  if (filter == nil) {
    changed = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) unfilter];
  }
  else {
    [((id<RAREUTiFilterableList>) nil_chk(rowData_)) setConverterWithRAREUTiStringConverter:[self getConverter]];
    changed = [rowData_ filterWithRAREUTiFilter:filter];
  }
  if (changed) {
    [self tableDataChanged];
  }
  return changed;
}

- (void)setFilteredListWithJavaUtilList:(id<JavaUtilList>)list
                      withRAREUTiFilter:(id<RAREUTiFilter>)lastFilter {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) setFilteredListWithJavaUtilList:list withRAREUTiFilter:lastFilter];
  hasModifiedValues_ = NO;
  [self tableDataChanged];
}

- (void)filterWithInt:(int)index {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addIndexToFilteredListWithInt:index];
}

- (BOOL)filterWithNSString:(NSString *)filter
               withBoolean:(BOOL)contains {
  return [self filterWithNSString:filter withBoolean:contains withBoolean:NO withBoolean:NO];
}

- (BOOL)filterWithNSString:(NSString *)filter
               withBoolean:(BOOL)contains
               withBoolean:(BOOL)nullPasses
               withBoolean:(BOOL)emptyPasses {
  BOOL changed = NO;
  if ((filter == nil) || ([filter sequenceLength] == 0)) {
    changed = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) unfilter];
  }
  else {
    [((id<RAREUTiFilterableList>) nil_chk(rowData_)) setConverterWithRAREUTiStringConverter:[self getConverter]];
    changed = [rowData_ filterWithNSString:filter withBoolean:contains withBoolean:nullPasses withBoolean:emptyPasses];
  }
  if (changed) {
    [self tableDataChanged];
  }
  return changed;
}

- (int)findWithRAREUTiFilter:(id<RAREUTiFilter>)filter
                     withInt:(int)start {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) setConverterWithRAREUTiStringConverter:[self getConverter]];
  return [rowData_ findWithRAREUTiFilter:filter withInt:start];
}

- (int)findWithNSString:(NSString *)filter
                withInt:(int)start
            withBoolean:(BOOL)contains {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) setConverterWithRAREUTiStringConverter:[self getConverter]];
  return [rowData_ findWithNSString:filter withInt:start withBoolean:contains];
}

- (int)indexForRowWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) indexOfWithId:item];
}

- (int)indexOfWithId:(id)o {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) indexOfWithId:o];
}

- (void)insertRowWithInt:(int)row
withRARERenderableDataItem:(RARERenderableDataItem *)item {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) addWithInt:row withId:item];
  [self rowsInsertedWithInt:row withInt:row];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) iterator];
}

- (NSString *)join {
  return [self joinWithNSString:nil];
}

- (NSString *)joinWithNSString:(NSString *)sep {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) joinWithNSString:sep];
}

- (int)lastIndexOfWithId:(id)o {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) lastIndexOfWithId:o];
}

- (id<JavaUtilListIterator>)listIterator {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) listIterator];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)i {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) listIteratorWithInt:i];
}

- (void)moveWithInt:(int)from
            withInt:(int)to {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) moveWithInt:from withInt:to];
  [self tableDataChanged];
}

- (void)moveRowWithInt:(int)from
               withInt:(int)to {
  if (from != to) {
    RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) getWithInt:from];
    if (di != nil) {
      (void) [rowData_ removeWithInt:from];
      [self rowsDeletedWithInt:from withInt:from];
      if (from < to) {
        to--;
      }
      [rowData_ addWithInt:to withId:di];
      [self rowsInsertedWithInt:to withInt:to];
    }
  }
}

- (RARERenderableDataItem *)pop {
  RARERenderableDataItem *item = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) pop];
  [self updateForInsertionOrDeletion];
  return item;
}

- (void)pushWithNSObjectArray:(IOSObjectArray *)e {
  if (e != nil) {
    {
      IOSObjectArray *a__ = e;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        RARERenderableDataItem *v = (*b__++);
        [self addRowWithRARERenderableDataItem:v];
      }
    }
  }
}

- (BOOL)refilter {
  if ([((id<RAREUTiFilterableList>) nil_chk(rowData_)) refilter]) {
    [self tableDataChanged];
    return YES;
  }
  return NO;
}

- (void)refreshItems {
  [self tableDataChanged];
}

- (RARERenderableDataItem *)removeWithInt:(int)index {
  RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) removeWithInt:index];
  if (di != nil) {
    [self rowsDeletedWithInt:index withInt:index withJavaUtilList:[JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ di } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  return di;
}

- (BOOL)removeWithId:(id)o {
  int n = [self indexOfWithId:o];
  if (n != -1) {
    [self removeRowWithInt:n];
    return YES;
  }
  return NO;
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)clctn {
  int size = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) size];
  [rowData_ removeAllWithJavaUtilCollection:clctn];
  if (size != [rowData_ size]) {
    [self tableDataChanged];
    return YES;
  }
  return NO;
}

- (void)removeDataModelListenerWithRAREiDataModelListener:(id<RAREiDataModelListener>)l {
  if (listenerList_ != nil) {
    [listenerList_ removeWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiDataModelListener)] withId:l];
  }
}

- (void)removeRowWithInt:(int)row {
  RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) removeWithInt:row];
  if (di != nil) {
    [self rowsDeletedWithInt:row withInt:row withJavaUtilList:[JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ di } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
}

- (void)removeRowsWithIntArray:(IOSIntArray *)indexes {
  int size = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) size];
  [rowData_ removeRowsWithIntArray:indexes];
  if (size != [rowData_ size]) {
    [self tableDataChanged];
  }
}

- (void)removeRowsWithInt:(int)firstRow
                  withInt:(int)lastRow {
  if (lastRow == -1) {
    lastRow = rowCount_ - 1;
  }
  int len = lastRow - firstRow + 1;
  if (len < 1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"firstRow=%d, lastRow=%d", firstRow, lastRow]];
  }
  if (len == 1) {
    [self removeRowWithInt:firstRow];
    return;
  }
  id<JavaUtilList> list = [[JavaUtilArrayList alloc] initWithInt:len];
  for (int i = firstRow; i <= lastRow; i++) {
    [list addWithId:[((id<RAREUTiFilterableList>) nil_chk(rowData_)) removeWithInt:i]];
  }
  [self rowsDeletedWithInt:firstRow withInt:lastRow withJavaUtilList:list];
}

- (void)resetModelWithJavaUtilList:(id<JavaUtilList>)columns
         withRAREUTiFilterableList:(id<RAREUTiFilterableList>)rows {
  columnData_ = columns;
  rowData_ = rows;
  hasModifiedValues_ = NO;
  [self tableChanged];
}

- (void)resetModified {
  hasModifiedValues_ = NO;
  int len = (rowData_ == nil) ? 0 : [rowData_ size];
  RARERenderableDataItem *row, *item;
  for (int i = 0; i < len; i++) {
    row = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) getWithInt:i];
    [((RARERenderableDataItem *) nil_chk(row)) setModifiedWithBoolean:NO];
    for (int n = 0; n < columnCount_; n++) {
      item = [row getItemExWithInt:n];
      if (item != nil) {
        [item setModifiedWithBoolean:NO];
      }
    }
  }
}

- (void)resetRowsWithRAREUTiFilterableList:(id<RAREUTiFilterableList>)rows {
  [self clearRows];
  rowData_ = rows;
  hasModifiedValues_ = NO;
  [self tableDataChanged];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)clctn {
  if ([((id<RAREUTiFilterableList>) nil_chk(rowData_)) retainAllWithJavaUtilCollection:clctn]) {
    [self tableDataChanged];
    return YES;
  }
  return NO;
}

- (id<JavaUtilList>)reverse {
  (void) [((id<RAREUTiFilterableList>) nil_chk(rowData_)) reverse];
  [self tableDataChanged];
  return rowData_;
}

- (void)rowChangedWithInt:(int)row {
  [self fireTableRowsUpdatedWithInt:row withInt:row];
}

- (void)rowChangedWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  int n = [self indexForRowWithRARERenderableDataItem:item];
  if (n != -1) {
    [self rowChangedWithInt:n];
  }
}

- (void)rowsChangedWithIntArray:(IOSIntArray *)index {
  {
    IOSIntArray *a__ = index;
    int const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    int const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      int i = (*b__++);
      [self rowChangedWithInt:i];
    }
  }
}

- (void)rowsChangedWithInt:(int)firstRow
                   withInt:(int)lastRow {
  [self fireTableRowsUpdatedWithInt:firstRow withInt:lastRow];
}

- (void)rowsDeletedWithInt:(int)firstRow
                   withInt:(int)lastRow {
  rowCount_ = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) size];
  [self fireTableRowsDeletedWithInt:firstRow withInt:lastRow];
}

- (void)rowsDeletedWithInt:(int)firstRow
                   withInt:(int)lastRow
          withJavaUtilList:(id<JavaUtilList>)removed {
  rowCount_ = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) size];
  [self fireTableRowsDeletedWithInt:firstRow withInt:lastRow withJavaUtilList:removed];
}

- (void)rowsInsertedWithInt:(int)firstRow
                    withInt:(int)lastRow {
  rowCount_ = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) size];
  [self fireTableRowsInsertedWithInt:firstRow withInt:lastRow];
}

- (RARERenderableDataItem *)shift {
  RARERenderableDataItem *item = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) shift];
  [self updateForInsertionOrDeletion];
  return item;
}

- (int)size {
  return (rowData_ == nil) ? 0 : [rowData_ size];
}

- (id<JavaUtilList>)sliceWithInt:(int)start {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) sliceWithInt:start withInt:[self getRowCount]];
}

- (id<JavaUtilList>)sliceWithInt:(int)start
                         withInt:(int)end {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) sliceWithInt:start withInt:end];
}

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) sortWithJavaUtilComparator:comparator];
  [self tableDataChanged];
}

- (void)sortWithInt:(int)col
        withBoolean:(BOOL)desc
        withBoolean:(BOOL)useLinkedData {
  if ((rowData_ != nil) && ![rowData_ isEmpty]) {
    if (itemComparator_ == nil) {
      itemComparator_ = [[RARESubItemComparator alloc] initWithRAREiTableModel:self];
    }
    [((RARESubItemComparator *) nil_chk(itemComparator_)) setOptionsWithInt:col withBoolean:desc];
    [itemComparator_ setUseLinkedDataWithBoolean:useLinkedData];
    [self sortExWithJavaUtilComparator:itemComparator_];
    [self tableDataChanged];
  }
}

- (void)sortExWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) sortWithJavaUtilComparator:comparator];
}

- (void)sortExWithInt:(int)col
          withBoolean:(BOOL)desc
          withBoolean:(BOOL)useLinkedData {
  if ((rowData_ != nil) && ![rowData_ isEmpty]) {
    if (itemComparator_ == nil) {
      itemComparator_ = [[RARESubItemComparator alloc] initWithRAREiTableModel:self];
    }
    [((RARESubItemComparator *) nil_chk(itemComparator_)) setOptionsWithInt:col withBoolean:desc];
    [itemComparator_ setUseLinkedDataWithBoolean:useLinkedData];
    [self sortExWithJavaUtilComparator:itemComparator_];
  }
}

- (id<JavaUtilList>)sortExWithInt:(int)col
                      withBoolean:(BOOL)desc
                      withBoolean:(BOOL)force
                      withBoolean:(BOOL)useLinkedData {
  if ((rowData_ != nil) && ![rowData_ isEmpty]) {
    if (itemComparator_ == nil) {
      itemComparator_ = [[RARESubItemComparator alloc] initWithRAREiTableModel:self];
    }
    if (force || ([((RARESubItemComparator *) nil_chk(itemComparator_)) getSortColumn] != col) || ([itemComparator_ isSortDescending] != desc) || ([itemComparator_ isUseLinkedData] != useLinkedData)) {
      [((RARESubItemComparator *) nil_chk(itemComparator_)) setOptionsWithInt:col withBoolean:desc];
      [itemComparator_ setUseLinkedDataWithBoolean:useLinkedData];
      [self sortExWithJavaUtilComparator:itemComparator_];
    }
  }
  return rowData_;
}

- (id<JavaUtilList>)spliceWithInt:(int)index
                          withInt:(int)howMany {
  return [self spliceWithInt:index withInt:howMany withNSObjectArray:(IOSObjectArray *) check_class_cast(nil, [IOSObjectArray class])];
}

- (id<JavaUtilList>)spliceWithInt:(int)index
                          withInt:(int)howMany
                withNSObjectArray:(IOSObjectArray *)e {
  return [self spliceListWithInt:index withInt:howMany withJavaUtilList:(e == nil) ? nil : [JavaUtilArrays asListWithNSObjectArray:e]];
}

- (id<JavaUtilList>)spliceListWithInt:(int)index
                              withInt:(int)howMany
                     withJavaUtilList:(id<JavaUtilList>)e {
  (void) [((id<RAREUTiFilterableList>) nil_chk(rowData_)) spliceListWithInt:index withInt:howMany withJavaUtilList:e];
  [self tableDataChanged];
  return rowData_;
}

- (id<JavaUtilList>)subListWithInt:(int)i
                           withInt:(int)i1 {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) subListWithInt:i withInt:i1];
}

- (void)swapWithInt:(int)index1
            withInt:(int)index2 {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) swapWithInt:index1 withInt:index2];
  [self rowsChangedWithInt:index1 withInt:index1];
}

- (void)tableChanged {
  columnCount_ = [((id<JavaUtilList>) nil_chk(columnData_)) size];
  rowCount_ = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) size];
  hasModifiedValues_ = NO;
  [self fireTableStructureChanged];
}

- (void)tableDataChanged {
  rowCount_ = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) size];
  [self fireTableDataChanged];
}

- (void)tableItemsModified {
  hasModifiedValues_ = YES;
}

- (IOSObjectArray *)toArray {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) toArray];
}

- (void)trimToSize {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) trimToSize];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)ts {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) toArrayWithNSObjectArray:ts];
}

- (BOOL)unfilter {
  if ([((id<RAREUTiFilterableList>) nil_chk(rowData_)) unfilter]) {
    [self tableDataChanged];
    return YES;
  }
  return NO;
}

- (void)unshiftWithId:(RARERenderableDataItem *)value {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) unshiftWithId:value];
  [self updateForInsertionOrDeletion];
}

- (void)updateForInsertionOrDeletion {
  int start = rowCount_;
  rowCount_ = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) size];
  int end = rowCount_;
  if (end > start) {
    [self rowsInsertedWithInt:start withInt:end - 1];
  }
  else if (start > end) {
    [self rowsDeletedWithInt:end withInt:start - 1];
  }
}

- (RARERenderableDataItem *)setWithInt:(int)row
                                withId:(RARERenderableDataItem *)item {
  RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) setWithInt:row withId:item];
  if (di != item) {
    [self rowChangedWithInt:row];
  }
  return di;
}

- (void)setActiveColumnWithInt:(int)col {
  activeColumn_ = col;
}

- (BOOL)setAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  [self clearRows];
  rowData_ = [[RAREUTFilterableList alloc] initWithJavaUtilCollection:collection];
  [self tableDataChanged];
  return YES;
}

- (void)setAllowSortingWithBoolean:(BOOL)sortingAllowed {
  self->sortingAllowed_ = sortingAllowed;
}

- (void)setConverterWithRAREUTiStringConverter:(id<RAREUTiStringConverter>)converter {
  [((id<RAREUTiFilterableList>) nil_chk(rowData_)) setConverterWithRAREUTiStringConverter:converter];
}

- (void)setEventsEnabledWithBoolean:(BOOL)enabled {
  eventsEnabled_ = enabled;
}

- (void)setExpandableColumnWithInt:(int)col {
  self->expandableColumn_ = col;
}

- (void)setUseIndexForFilteringWithBoolean:(BOOL)booleanValue {
}

- (RAREUTCharacterIndex *)getFilteringIndex {
  return nil;
}

- (void)setItemsWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  [self setAllWithJavaUtilCollection:collection];
}

- (void)setRowWithInt:(int)row
withRARERenderableDataItem:(RARERenderableDataItem *)item {
  (void) [((id<RAREUTiFilterableList>) nil_chk(rowData_)) setWithInt:row withId:item];
  [self rowChangedWithInt:row];
}

- (void)setSelectionTypeWithRAREiListHandler_SelectionTypeEnum:(RAREiListHandler_SelectionTypeEnum *)selectionType {
  self->selectionType_ = selectionType;
}

- (void)setValueAtWithId:(id)value
                 withInt:(int)row
                 withInt:(int)col {
  RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) getWithInt:row];
  RARERenderableDataItem *item = [((RARERenderableDataItem *) nil_chk(di)) getItemExWithInt:col];
  id oldValue = nil;
  if (item == nil) {
    [di setItemCountWithInt:[self getColumnCount]];
    item = [[RARERenderableDataItem alloc] init];
    (void) [di setWithInt:col withId:item];
  }
  else {
    oldValue = [item getValueWithRAREiWidget:[self getWidget]];
  }
  if ([value isKindOfClass:[RARERenderableDataItem class]]) {
    [((RARERenderableDataItem *) nil_chk(item)) copy__WithRARERenderableDataItem:(RARERenderableDataItem *) check_class_cast(value, [RARERenderableDataItem class])];
  }
  else {
    [((RARERenderableDataItem *) nil_chk(item)) setValueWithId:value];
  }
  [self fireTableRowsUpdatedWithInt:row withInt:row];
  value = [((RARERenderableDataItem *) nil_chk(item)) getValueWithRAREiWidget:[self getWidget]];
  if (([@"" isEqual:value]) && (oldValue == nil)) {
    return;
  }
  if ((value != oldValue) && (value != nil) && ![value isEqual:oldValue]) {
    [item setModifiedWithBoolean:YES];
    [di setModifiedWithBoolean:YES];
    hasModifiedValues_ = YES;
  }
}

- (void)setWidgetWithRAREiWidget:(id<RAREiWidget>)w {
  theWidget_ = w;
}

- (RARERenderableDataItem *)getWithInt:(int)index {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) getWithInt:index];
}

- (RAREColumn *)getColumnWithInt:(int)col {
  return [((id<JavaUtilList>) nil_chk(columnData_)) getWithInt:col];
}

- (IOSClass *)getColumnClassWithInt:(int)col {
  return [IOSClass classWithClass:[RARERenderableDataItem class]];
}

- (int)getColumnCount {
  return columnCount_;
}

- (RAREColumn *)getColumnDescription {
  return nil;
}

- (id<JavaUtilList>)getColumns {
  return columnData_;
}

- (id<JavaUtilComparator>)getComparator {
  return itemComparator_;
}

- (id<RAREUTiStringConverter>)getConverter {
  id<RAREUTiStringConverter> cvt = [((id<RAREUTiFilterableList>) nil_chk(rowData_)) getConverter];
  if (cvt == nil) {
    if (columnConverter_ == nil) {
      columnConverter_ = [[RAREaDataItemTableModel_$1 alloc] initWithRAREaDataItemTableModel:self withInt:activeColumn_];
    }
    else {
      [columnConverter_ setColumnWithInt:activeColumn_];
    }
    cvt = columnConverter_;
  }
  else if (cvt == columnConverter_) {
    [((RAREItemStringConverter *) nil_chk(columnConverter_)) setColumnWithInt:activeColumn_];
  }
  return cvt;
}

- (int)getExpandableColumn {
  return expandableColumn_;
}

- (id<RAREUTiFilterableList>)getFilterableList {
  if (filterableList_ == nil) {
    filterableList_ = [[RARETableModelFilterableList alloc] initWithRAREiTableModel:self];
  }
  return filterableList_;
}

- (id<JavaUtilList>)getFilteredList {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) getFilteredList];
}

- (RARERenderableDataItem *)getItemAtWithInt:(int)row
                                     withInt:(int)col {
  RARERenderableDataItem *item = [self getItemAtExWithInt:row withInt:col];
  if (item == nil) {
    RARERenderableDataItem *di = [self getRowWithInt:row];
    [((RARERenderableDataItem *) nil_chk(di)) setItemCountWithInt:columnCount_];
    item = [[RARERenderableDataItem alloc] initWithId:nil withInt:[((RAREColumn *) nil_chk([self getColumnWithInt:col])) getType] withId:nil];
    [item setSelectableWithBoolean:NO];
    (void) [di setWithInt:col withId:item];
  }
  return item;
}

- (RAREColumn *)getItemDescriptionWithInt:(int)row
                                  withInt:(int)col {
  return [((id<JavaUtilList>) nil_chk(columnData_)) getWithInt:col];
}

- (int)getOperatingColumn {
  return activeColumn_;
}

- (id<RAREUTiFilterableList>)getOriginalList {
  return rowData_;
}

- (RARERenderableDataItem *)getRowWithInt:(int)row {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) getWithInt:row];
}

- (int)getRowCount {
  return rowCount_;
}

- (id<RAREUTiFilterableList>)getRowsEx {
  return rowData_;
}

- (RAREiListHandler_SelectionTypeEnum *)getSelectionType {
  return selectionType_;
}

- (int)getSortColumn {
  return [((RARESubItemComparator *) nil_chk(itemComparator_)) getSortColumn];
}

- (id<JavaLangCharSequence>)getTooltipWithInt:(int)row
                                      withInt:(int)col {
  RARERenderableDataItem *item = [self getItemAtExWithInt:row withInt:col];
  return (item == nil) ? nil : [item getTooltip];
}

- (id<JavaUtilList>)getUnfilteredList {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) getUnfilteredList];
}

- (id)getValueAtWithInt:(int)row
                withInt:(int)col {
  RARERenderableDataItem *di = [self getItemExWithInt:row withInt:col];
  if (di == nil) {
    return nil;
  }
  return [((RARERenderableDataItem *) nil_chk(di)) getValueWithRAREiWidget:[self getWidget]];
}

- (id<RAREiWidget>)getWidget {
  return theWidget_;
}

- (BOOL)isAllowSorting {
  return sortingAllowed_;
}

- (BOOL)isCellEditableWithInt:(int)row
                      withInt:(int)col {
  if (![((RAREColumn *) nil_chk([((id<JavaUtilList>) nil_chk(columnData_)) getWithInt:col])) isEditable]) {
    return NO;
  }
  RARERenderableDataItem *item = [self getItemExWithInt:row withInt:col];
  if ((item != nil) && [item isEditableSet] && ![item isEditable]) {
    return NO;
  }
  return YES;
}

- (BOOL)isEmpty {
  return rowCount_ == 0;
}

- (BOOL)isEventsEnabled {
  return eventsEnabled_;
}

- (BOOL)isFiltered {
  return [((id<RAREUTiFilterableList>) nil_chk(rowData_)) isFiltered];
}

- (BOOL)isModified {
  return hasModifiedValues_;
}

- (BOOL)isSortDescending {
  return (itemComparator_ == nil) ? YES : [itemComparator_ isSortDescending];
}

- (void)convertWithRARERenderableDataItem:(RARERenderableDataItem *)di
                                  withInt:(int)col {
  RAREColumn *c = [((id<JavaUtilList>) nil_chk(columnData_)) getWithInt:col];
  id<RAREiDataConverter> cvt = [((RAREColumn *) nil_chk(c)) getDataConverter];
  if (cvt != nil) {
    (void) [((RARERenderableDataItem *) nil_chk(di)) convertWithRAREiWidget:[((id<RAREiWidget>) nil_chk([self getWidget])) getViewer] withInt:[c getType] withRAREiDataConverter:cvt withId:[c getValueContext]];
  }
}

- (void)fireTableDataChanged {
  if (!eventsEnabled_ || (listenerList_ == nil)) {
    return;
  }
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList_)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiDataModelListener)]) {
      [((id<RAREiDataModelListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiDataModelListener))) contentsChangedWithId:self];
    }
  }
}

- (void)fireTableRowsDeletedWithInt:(int)index0
                            withInt:(int)index1 {
  if (!eventsEnabled_ || (listenerList_ == nil)) {
    return;
  }
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList_)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiDataModelListener)]) {
      [((id<RAREiDataModelListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiDataModelListener))) intervalRemovedWithId:self withInt:index0 withInt:index1 withJavaUtilList:nil];
    }
  }
}

- (void)fireTableRowsDeletedWithInt:(int)index0
                            withInt:(int)index1
                   withJavaUtilList:(id<JavaUtilList>)removed {
  if (!eventsEnabled_ || (listenerList_ == nil)) {
    return;
  }
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList_)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiDataModelListener)]) {
      [((id<RAREiDataModelListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiDataModelListener))) intervalRemovedWithId:self withInt:index0 withInt:index1 withJavaUtilList:removed];
    }
  }
}

- (void)fireTableRowsInsertedWithInt:(int)index0
                             withInt:(int)index1 {
  if (!eventsEnabled_ || (listenerList_ == nil)) {
    return;
  }
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList_)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiDataModelListener)]) {
      [((id<RAREiDataModelListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiDataModelListener))) intervalAddedWithId:self withInt:index0 withInt:index1];
    }
  }
}

- (void)fireTableRowsUpdatedWithInt:(int)index0
                            withInt:(int)index1 {
  if (!eventsEnabled_ || (listenerList_ == nil)) {
    return;
  }
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList_)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiDataModelListener)]) {
      [((id<RAREiDataModelListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiDataModelListener))) contentsChangedWithId:self withInt:index0 withInt:index1];
    }
  }
}

- (void)fireTableStructureChanged {
  if (!eventsEnabled_ || (listenerList_ == nil)) {
    return;
  }
  IOSObjectArray *listeners = [((RAREEventListenerList *) nil_chk(listenerList_)) getListenerList];
  for (int i = (int) [((IOSObjectArray *) nil_chk(listeners)) count] - 2; i >= 0; i -= 2) {
    if (IOSObjectArray_Get(listeners, i) == [IOSClass classWithProtocol:@protocol(RAREiDataModelListener)]) {
      [((id<RAREiDataModelListener>) check_protocol_cast(IOSObjectArray_Get(listeners, i + 1), @protocol(RAREiDataModelListener))) structureChangedWithId:self];
    }
  }
}

- (RARERenderableDataItem *)getItemAtExWithInt:(int)row
                                       withInt:(int)col {
  RARERenderableDataItem *di = [((RARERenderableDataItem *) nil_chk([((id<RAREUTiFilterableList>) nil_chk(rowData_)) getWithInt:row])) getItemExWithInt:col];
  if (di == nil) {
    return nil;
  }
  if (![((RARERenderableDataItem *) nil_chk(di)) isConverted]) {
    [self convertWithRARERenderableDataItem:di withInt:col];
  }
  return di;
}

- (RARERenderableDataItem *)getItemExWithInt:(int)row
                                     withInt:(int)col {
  if ((row < 0) || (row >= rowCount_)) {
    return nil;
  }
  return [((RARERenderableDataItem *) nil_chk([((id<RAREUTiFilterableList>) nil_chk(rowData_)) getWithInt:row])) getItemExWithInt:col];
}

- (void)clearRows {
  if (rowData_ != nil) {
    [rowData_ clear];
  }
  rowCount_ = 0;
  if (filterableList_ != nil) {
    [filterableList_ clear];
  }
}

- (id<RAREiTableModel>)createEmptyCopy {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setEditingWithBoolean:(BOOL)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColumnDescriptionWithRAREColumn:(RAREColumn *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<RAREUTiFilter>)getLastFilter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isEqual:(id)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSUInteger)hash {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  if (self = [super init]) {
    activeColumn_ = 0;
    columnCount_ = 0;
    expandableColumn_ = 0;
    rowCount_ = 0;
    sortingAllowed_ = YES;
    selectionType_ = [RAREiListHandler_SelectionTypeEnum ROW_ON_BOTTOM];
    eventsEnabled_ = YES;
  }
  return self;
}

- (void)copyAllFieldsTo:(RAREaDataItemTableModel *)other {
  [super copyAllFieldsTo:other];
  other->activeColumn_ = activeColumn_;
  other->columnConverter_ = columnConverter_;
  other->columnCount_ = columnCount_;
  other->columnData_ = columnData_;
  other->editingMarks_ = editingMarks_;
  other->eventsEnabled_ = eventsEnabled_;
  other->expandableColumn_ = expandableColumn_;
  other->filterableList_ = filterableList_;
  other->hasModifiedValues_ = hasModifiedValues_;
  other->itemComparator_ = itemComparator_;
  other->listenerList_ = listenerList_;
  other->rowCount_ = rowCount_;
  other->rowData_ = rowData_;
  other->selectionType_ = selectionType_;
  other->sortingAllowed_ = sortingAllowed_;
  other->theWidget_ = theWidget_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addWithRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "addAllWithInt:withJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "concatWithJavaUtilListArray:", NULL, "LJavaUtilList", 0x81, NULL },
    { "containsWithId:", NULL, "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "editModeGetMarkedIndices", NULL, "LIOSIntArray", 0x1, NULL },
    { "editModeGetMarkedItems", NULL, "LIOSObjectArray", 0x1, NULL },
    { "editModeIsItemMarkedWithInt:", NULL, "Z", 0x1, NULL },
    { "filterWithRAREUTiFilter:", NULL, "Z", 0x1, NULL },
    { "filterWithNSString:withBoolean:", NULL, "Z", 0x1, NULL },
    { "filterWithNSString:withBoolean:withBoolean:withBoolean:", NULL, "Z", 0x1, NULL },
    { "iterator", NULL, "LJavaUtilIterator", 0x1, NULL },
    { "join", NULL, "LNSString", 0x1, NULL },
    { "joinWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "listIterator", NULL, "LJavaUtilListIterator", 0x1, NULL },
    { "listIteratorWithInt:", NULL, "LJavaUtilListIterator", 0x1, NULL },
    { "pop", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "pushWithRARERenderableDataItemArray:", NULL, "V", 0x81, NULL },
    { "refilter", NULL, "Z", 0x1, NULL },
    { "removeWithInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "removeWithId:", NULL, "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "reverse", NULL, "LJavaUtilList", 0x1, NULL },
    { "rowsChangedWithIntArray:", NULL, "V", 0x81, NULL },
    { "shift", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "sliceWithInt:", NULL, "LJavaUtilList", 0x1, NULL },
    { "sliceWithInt:withInt:", NULL, "LJavaUtilList", 0x1, NULL },
    { "sortExWithInt:withBoolean:withBoolean:withBoolean:", NULL, "LJavaUtilList", 0x1, NULL },
    { "spliceWithInt:withInt:", NULL, "LJavaUtilList", 0x1, NULL },
    { "spliceWithInt:withInt:withRARERenderableDataItemArray:", NULL, "LJavaUtilList", 0x81, NULL },
    { "spliceListWithInt:withInt:withJavaUtilList:", NULL, "LJavaUtilList", 0x1, NULL },
    { "subListWithInt:withInt:", NULL, "LJavaUtilList", 0x1, NULL },
    { "toArray", NULL, "LIOSObjectArray", 0x1, NULL },
    { "toArrayWithNSObjectArray:", NULL, "LIOSObjectArray", 0x1, NULL },
    { "unfilter", NULL, "Z", 0x1, NULL },
    { "setWithInt:withRARERenderableDataItem:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "setAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "getFilteringIndex", NULL, "LRAREUTCharacterIndex", 0x1, NULL },
    { "getWithInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getColumnWithInt:", NULL, "LRAREColumn", 0x1, NULL },
    { "getColumnClassWithInt:", NULL, "LIOSClass", 0x1, NULL },
    { "getColumnDescription", NULL, "LRAREColumn", 0x1, NULL },
    { "getColumns", NULL, "LJavaUtilList", 0x1, NULL },
    { "getComparator", NULL, "LJavaUtilComparator", 0x1, NULL },
    { "getConverter", NULL, "LRAREUTiStringConverter", 0x1, NULL },
    { "getFilterableList", NULL, "LRAREUTiFilterableList", 0x1, NULL },
    { "getFilteredList", NULL, "LJavaUtilList", 0x1, NULL },
    { "getItemAtWithInt:withInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getItemDescriptionWithInt:withInt:", NULL, "LRAREColumn", 0x1, NULL },
    { "getOriginalList", NULL, "LRAREUTiFilterableList", 0x1, NULL },
    { "getRowWithInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getRowsEx", NULL, "LRAREUTiFilterableList", 0x1, NULL },
    { "getSelectionType", NULL, "LRAREiListHandler_SelectionTypeEnum", 0x1, NULL },
    { "getTooltipWithInt:withInt:", NULL, "LJavaLangCharSequence", 0x1, NULL },
    { "getUnfilteredList", NULL, "LJavaUtilList", 0x1, NULL },
    { "getValueAtWithInt:withInt:", NULL, "LNSObject", 0x1, NULL },
    { "getWidget", NULL, "LRAREiWidget", 0x1, NULL },
    { "isAllowSorting", NULL, "Z", 0x1, NULL },
    { "isCellEditableWithInt:withInt:", NULL, "Z", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "isEventsEnabled", NULL, "Z", 0x1, NULL },
    { "isFiltered", NULL, "Z", 0x1, NULL },
    { "isModified", NULL, "Z", 0x1, NULL },
    { "isSortDescending", NULL, "Z", 0x1, NULL },
    { "convertWithRARERenderableDataItem:withInt:", NULL, "V", 0x4, NULL },
    { "fireTableDataChanged", NULL, "V", 0x4, NULL },
    { "fireTableRowsDeletedWithInt:withInt:", NULL, "V", 0x4, NULL },
    { "fireTableRowsDeletedWithInt:withInt:withJavaUtilList:", NULL, "V", 0x4, NULL },
    { "fireTableRowsInsertedWithInt:withInt:", NULL, "V", 0x4, NULL },
    { "fireTableRowsUpdatedWithInt:withInt:", NULL, "V", 0x4, NULL },
    { "fireTableStructureChanged", NULL, "V", 0x4, NULL },
    { "getItemAtExWithInt:withInt:", NULL, "LRARERenderableDataItem", 0x4, NULL },
    { "getItemExWithInt:withInt:", NULL, "LRARERenderableDataItem", 0x4, NULL },
    { "clearRows", NULL, "V", 0x2, NULL },
    { "createEmptyCopy", NULL, "LRAREiTableModel", 0x401, NULL },
    { "setEditingWithBoolean:", NULL, "V", 0x401, NULL },
    { "setColumnDescriptionWithRAREColumn:", NULL, "V", 0x401, NULL },
    { "getLastFilter", NULL, "LRAREUTiFilter", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "columnConverter_", NULL, 0x0, "LRAREItemStringConverter" },
    { "activeColumn_", NULL, 0x4, "I" },
    { "columnCount_", NULL, 0x4, "I" },
    { "expandableColumn_", NULL, 0x4, "I" },
    { "rowCount_", NULL, 0x4, "I" },
    { "sortingAllowed_", NULL, 0x4, "Z" },
    { "selectionType_", NULL, 0x4, "LRAREiListHandler_SelectionTypeEnum" },
    { "columnData_", NULL, 0x4, "LJavaUtilList" },
    { "editingMarks_", NULL, 0x4, "LRAREUTIntList" },
    { "hasModifiedValues_", NULL, 0x4, "Z" },
    { "itemComparator_", NULL, 0x4, "LRARESubItemComparator" },
    { "listenerList_", NULL, 0x4, "LRAREEventListenerList" },
    { "rowData_", NULL, 0x4, "LRAREUTiFilterableList" },
    { "theWidget_", NULL, 0x4, "LRAREiWidget" },
  };
  static J2ObjcClassInfo _RAREaDataItemTableModel = { "aDataItemTableModel", "com.appnativa.rare.ui.table", NULL, 0x401, 80, methods, 14, fields, 0, NULL};
  return &_RAREaDataItemTableModel;
}

@end
@implementation RAREaDataItemTableModel_$1

- (NSString *)toStringWithId:(RARERenderableDataItem *)item {
  if ((item != nil) && ![item isConverted]) {
    [this$0_ convertWithRARERenderableDataItem:item withInt:this$0_->activeColumn_];
  }
  return [super toStringWithId:item];
}

- (id)initWithRAREaDataItemTableModel:(RAREaDataItemTableModel *)outer$
                              withInt:(int)arg$0 {
  this$0_ = outer$;
  return [super initWithInt:arg$0];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "toStringWithRARERenderableDataItem:", NULL, "LNSString", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaDataItemTableModel" },
  };
  static J2ObjcClassInfo _RAREaDataItemTableModel_$1 = { "$1", "com.appnativa.rare.ui.table", "aDataItemTableModel", 0x8000, 1, methods, 1, fields, 0, NULL};
  return &_RAREaDataItemTableModel_$1;
}

@end
