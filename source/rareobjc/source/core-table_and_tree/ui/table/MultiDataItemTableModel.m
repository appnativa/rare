//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-table_and_tree/com/appnativa/rare/ui/table/MultiDataItemTableModel.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/iTableModel.h"
#include "com/appnativa/rare/ui/table/MultiDataItemTableModel.h"
#include "com/appnativa/rare/ui/table/TableHelper.h"
#include "com/appnativa/rare/ui/table/aDataItemTableModel.h"
#include "com/appnativa/util/FilterableList.h"
#include "com/appnativa/util/iFilterableList.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@implementation RAREMultiDataItemTableModel

+ (int)HEADER {
  return RAREMultiDataItemTableModel_HEADER;
}

+ (int)MAIN {
  return RAREMultiDataItemTableModel_MAIN;
}

+ (int)FOOTER {
  return RAREMultiDataItemTableModel_FOOTER;
}

- (id)initWithRAREiTableModel:(id<RAREiTableModel>)main {
  if (self = [super init]) {
    mainModel_ = main;
  }
  return self;
}

- (int)getHeaderColumnCount {
  return headerColumnCount_;
}

- (IOSObjectArray *)getColumnsEx {
  if (columnsArray_ == nil) {
    columnsArray_ = [((id<JavaUtilList>) nil_chk(columnData_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:columnCount_ type:[IOSClass classWithClass:[RAREColumn class]]]];
  }
  return columnsArray_;
}

- (void)resetModelWithJavaUtilList:(id<JavaUtilList>)columns
         withRAREUTiFilterableList:(id<RAREUTiFilterableList>)rows {
  int len = [((id<JavaUtilList>) nil_chk(columns)) size];
  id<JavaUtilList> header = nil;
  id<JavaUtilList> footer = nil;
  id<JavaUtilList> main = [[JavaUtilArrayList alloc] initWithInt:len];
  for (int i = 0; i < len; i++) {
    RAREColumn *c = [columns getWithInt:i];
    if ([((RAREColumn *) nil_chk(c)) isHeaderColumn]) {
      if (header == nil) {
        header = [[JavaUtilArrayList alloc] init];
      }
      [((id<JavaUtilList>) nil_chk(header)) addWithId:c];
    }
    else if ([c isFooterColumn]) {
      if (footer == nil) {
        footer = [[JavaUtilArrayList alloc] init];
      }
      [((id<JavaUtilList>) nil_chk(footer)) addWithId:c];
    }
    else {
      [main addWithId:c];
    }
  }
  columnData_ = [[JavaUtilArrayList alloc] initWithInt:len];
  if (header != nil) {
    [columnData_ addAllWithJavaUtilCollection:header];
  }
  [columnData_ addAllWithJavaUtilCollection:main];
  if (footer != nil) {
    [columnData_ addAllWithJavaUtilCollection:footer];
  }
  columns = columnData_;
  [self setColumnCountsWithInt:len withInt:(header == nil) ? 0 : [header size] withInt:(footer == nil) ? 0 : [footer size]];
  [((id<RAREiTableModel>) nil_chk(mainModel_)) resetModelWithJavaUtilList:main withRAREUTiFilterableList:[[RAREUTFilterableList alloc] init]];
  if (header != nil) {
    [((id<RAREiTableModel>) nil_chk(headerModel_)) resetModelWithJavaUtilList:header withRAREUTiFilterableList:[[RAREUTFilterableList alloc] init]];
  }
  if (footer != nil) {
    [((id<RAREiTableModel>) nil_chk(footerModel_)) resetModelWithJavaUtilList:footer withRAREUTiFilterableList:[[RAREUTFilterableList alloc] init]];
  }
  self->columnsArray_ = nil;
  [super resetModelWithJavaUtilList:columns withRAREUTiFilterableList:rows];
}

- (void)setHeaderColumnCountWithInt:(int)headerColumnCount {
  self->headerColumnCount_ = headerColumnCount;
}

- (int)getFooterColumnStart {
  return footerColumnStart_;
}

- (void)setHeaderModelWithRAREiTableModel:(id<RAREiTableModel>)header {
  headerModel_ = header;
}

- (void)setFooterModelWithRAREiTableModel:(id<RAREiTableModel>)footer {
  footerModel_ = footer;
}

- (void)setColumnCountsWithInt:(int)totalColumns
                       withInt:(int)headerColumns
                       withInt:(int)footerColumns {
  self->totalColumns_ = totalColumns;
  headerColumnCount_ = headerColumns;
  footerColumnStart_ = totalColumns - footerColumns;
}

- (BOOL)addWithId:(RARERenderableDataItem *)e {
  [self addWithInt:-1 withId:e];
  return YES;
}

- (BOOL)isFiltered {
  return YES;
}

- (void)clear {
  if (footerModel_ != nil) {
    [footerModel_ clear];
  }
  if (headerModel_ != nil) {
    [headerModel_ clear];
  }
  if (mainModel_ != nil) {
    [mainModel_ clear];
  }
  [super clear];
}

- (void)swapWithInt:(int)index1
            withInt:(int)index2 {
  [super swapWithInt:index1 withInt:index2];
  if (headerModel_ != nil) {
    [headerModel_ swapWithInt:index1 withInt:index2];
  }
  if (footerModel_ != nil) {
    [footerModel_ swapWithInt:index1 withInt:index2];
  }
  [((id<RAREiTableModel>) nil_chk(mainModel_)) swapWithInt:index1 withInt:index2];
}

- (RARERenderableDataItem *)setWithInt:(int)index
                                withId:(RARERenderableDataItem *)element {
  RARERenderableDataItem *item = [super setWithInt:index withId:element];
  if (headerModel_ != nil) {
    [self setRowWithInt:index withRARERenderableDataItem:element withInt:RAREMultiDataItemTableModel_HEADER];
  }
  if (footerModel_ != nil) {
    [self setRowWithInt:index withRARERenderableDataItem:element withInt:RAREMultiDataItemTableModel_FOOTER];
  }
  [self setRowWithInt:index withRARERenderableDataItem:element withInt:RAREMultiDataItemTableModel_MAIN];
  return item;
}

- (void)removeRowWithInt:(int)row {
  (void) [self removeWithInt:row];
}

- (RARERenderableDataItem *)removeWithInt:(int)index {
  RARERenderableDataItem *item = [super removeWithInt:index];
  if (headerModel_ != nil) {
    (void) [headerModel_ removeWithInt:index];
  }
  if (footerModel_ != nil) {
    (void) [footerModel_ removeWithInt:index];
  }
  (void) [((id<RAREiTableModel>) nil_chk(mainModel_)) removeWithInt:index];
  return item;
}

- (void)removeRowsWithInt:(int)firstRow
                  withInt:(int)lastRow {
  [super removeRowsWithInt:firstRow withInt:lastRow];
  if (headerModel_ != nil) {
    [headerModel_ removeRowsWithInt:firstRow withInt:lastRow];
  }
  if (footerModel_ != nil) {
    [footerModel_ removeRowsWithInt:firstRow withInt:lastRow];
  }
  [((id<RAREiTableModel>) nil_chk(mainModel_)) removeRowsWithInt:firstRow withInt:lastRow];
}

- (void)addWithInt:(int)index
            withId:(RARERenderableDataItem *)element {
  if (index == -1) {
    [super addWithId:element];
  }
  else {
    [super addWithInt:index withId:element];
  }
  if (headerModel_ != nil) {
    [self addRowWithInt:index withRARERenderableDataItem:element withInt:RAREMultiDataItemTableModel_HEADER];
  }
  if (footerModel_ != nil) {
    [self addRowWithInt:index withRARERenderableDataItem:element withInt:RAREMultiDataItemTableModel_FOOTER];
  }
  [self addRowWithInt:index withRARERenderableDataItem:element withInt:RAREMultiDataItemTableModel_MAIN];
}

- (void)addRowWithInt:(int)index
withRARERenderableDataItem:(RARERenderableDataItem *)item
              withInt:(int)type {
  int capacity;
  int start;
  id<RAREUTiFilterableList> list;
  int end;
  switch (type) {
    case RAREMultiDataItemTableModel_HEADER:
    end = headerColumnCount_ - 1;
    capacity = headerColumnCount_;
    start = 0;
    list = headerModel_;
    break;
    case RAREMultiDataItemTableModel_FOOTER:
    end = totalColumns_ - 1;
    capacity = totalColumns_ - footerColumnStart_;
    start = footerColumnStart_;
    list = footerModel_;
    break;
    default:
    end = totalColumns_ - (totalColumns_ - footerColumnStart_);
    start = headerColumnCount_;
    capacity = end - start + 1;
    list = mainModel_;
    break;
  }
  RARERenderableDataItem *row = [[RARERenderableDataItem alloc] init];
  [row ensureCapacityWithInt:capacity];
  for (int i = start; i <= end; i++) {
    [row addWithId:[((RARERenderableDataItem *) nil_chk(item)) getItemExWithInt:i]];
  }
  if (index == -1) {
    [((id<RAREUTiFilterableList>) nil_chk(list)) addWithId:row];
  }
  else {
    [((id<RAREUTiFilterableList>) nil_chk(list)) addWithInt:index withId:row];
  }
}

- (BOOL)setAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  [super setAllWithJavaUtilCollection:collection];
  [self updateModelsWithBoolean:YES];
  return YES;
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  [super addAllWithJavaUtilCollection:collection];
  [self updateModelsWithBoolean:YES];
  return YES;
}

- (void)refreshItems {
  [super refreshItems];
  if (headerModel_ != nil) {
    [headerModel_ refreshItems];
  }
  [((id<RAREiTableModel>) nil_chk(mainModel_)) refreshItems];
  if (footerModel_ != nil) {
    [footerModel_ refreshItems];
  }
}

- (void)tableDataChanged {
  [self updateModelsWithBoolean:NO];
  [super tableDataChanged];
  [((id<RAREiTableModel>) nil_chk(mainModel_)) tableDataChanged];
  if (headerColumnCount_ > 0) {
    [((id<RAREiTableModel>) nil_chk(headerModel_)) tableDataChanged];
  }
  if (footerColumnStart_ < totalColumns_) {
    [((id<RAREiTableModel>) nil_chk(footerModel_)) tableDataChanged];
  }
}

- (BOOL)addAllWithInt:(int)i
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  [super addAllWithInt:i withJavaUtilCollection:collection];
  [self updateModelsWithBoolean:YES];
  return YES;
}

- (void)updateModelsWithBoolean:(BOOL)notify {
  BOOL trim = ([((id<RAREiTableModel>) nil_chk(mainModel_)) size] > 500) && ([self size] < 400);
  if (headerColumnCount_ > 0) {
    [((id<RAREUTiFilterableList>) nil_chk([((id<RAREiTableModel>) nil_chk(headerModel_)) getRowsEx])) clear];
    (void) [RARETableHelper getSubListWithJavaUtilList:[self getRowsEx] withInt:0 withInt:headerColumnCount_ - 1 withRAREUTiFilterableList:[headerModel_ getRowsEx]];
    if (trim) {
      [headerModel_ trimToSize];
    }
  }
  [((id<RAREUTiFilterableList>) nil_chk([mainModel_ getRowsEx])) clear];
  (void) [RARETableHelper getSubListWithJavaUtilList:[self getRowsEx] withInt:headerColumnCount_ withInt:footerColumnStart_ - 1 withRAREUTiFilterableList:[mainModel_ getRowsEx]];
  if (trim) {
    [mainModel_ trimToSize];
  }
  if (footerColumnStart_ < totalColumns_) {
    [((id<RAREUTiFilterableList>) nil_chk([((id<RAREiTableModel>) nil_chk(footerModel_)) getRowsEx])) clear];
    (void) [RARETableHelper getSubListWithJavaUtilList:[self getRowsEx] withInt:footerColumnStart_ withInt:totalColumns_ - 1 withRAREUTiFilterableList:[footerModel_ getRowsEx]];
    if (trim) {
      [footerModel_ trimToSize];
    }
  }
  if (notify) {
    [mainModel_ tableDataChanged];
    if (headerColumnCount_ > 0) {
      [((id<RAREiTableModel>) nil_chk(headerModel_)) tableDataChanged];
    }
    if (footerColumnStart_ < totalColumns_) {
      [((id<RAREiTableModel>) nil_chk(footerModel_)) tableDataChanged];
    }
  }
}

- (void)setRowWithInt:(int)index
withRARERenderableDataItem:(RARERenderableDataItem *)item
              withInt:(int)type {
  int start;
  id<RAREiTableModel> list;
  int end;
  switch (type) {
    case RAREMultiDataItemTableModel_HEADER:
    end = headerColumnCount_ - 1;
    start = 0;
    list = headerModel_;
    break;
    case RAREMultiDataItemTableModel_FOOTER:
    end = totalColumns_ - 1;
    start = footerColumnStart_;
    list = footerModel_;
    break;
    default:
    end = totalColumns_ - (totalColumns_ - footerColumnStart_);
    start = headerColumnCount_;
    list = mainModel_;
    break;
  }
  RARERenderableDataItem *row = [((id<RAREiTableModel>) nil_chk(list)) getWithInt:index];
  [((RARERenderableDataItem *) nil_chk(row)) clearSubItems];
  for (int i = start; i <= end; i++) {
    [row addWithId:[((RARERenderableDataItem *) nil_chk(item)) getItemExWithInt:i]];
  }
}

- (void)copyAllFieldsTo:(RAREMultiDataItemTableModel *)other {
  [super copyAllFieldsTo:other];
  other->columnsArray_ = columnsArray_;
  other->footerColumnStart_ = footerColumnStart_;
  other->footerModel_ = footerModel_;
  other->headerColumnCount_ = headerColumnCount_;
  other->headerModel_ = headerModel_;
  other->mainModel_ = mainModel_;
  other->totalColumns_ = totalColumns_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getColumnsEx", NULL, "LIOSObjectArray", 0x1, NULL },
    { "addWithRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "isFiltered", NULL, "Z", 0x1, NULL },
    { "setWithInt:withRARERenderableDataItem:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "removeWithInt:", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "addRowWithInt:withRARERenderableDataItem:withInt:", NULL, "V", 0x0, NULL },
    { "setAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "addAllWithInt:withJavaUtilCollection:", NULL, "Z", 0x1, NULL },
    { "updateModelsWithBoolean:", NULL, "V", 0x0, NULL },
    { "setRowWithInt:withRARERenderableDataItem:withInt:", NULL, "V", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "headerColumnCount_", NULL, 0x4, "I" },
    { "footerColumnStart_", NULL, 0x4, "I" },
    { "totalColumns_", NULL, 0x4, "I" },
    { "headerModel_", NULL, 0x4, "LRAREiTableModel" },
    { "footerModel_", NULL, 0x4, "LRAREiTableModel" },
    { "mainModel_", NULL, 0x4, "LRAREiTableModel" },
    { "HEADER_", NULL, 0x1c, "I" },
    { "MAIN_", NULL, 0x1c, "I" },
    { "FOOTER_", NULL, 0x1c, "I" },
  };
  static J2ObjcClassInfo _RAREMultiDataItemTableModel = { "MultiDataItemTableModel", "com.appnativa.rare.ui.table", NULL, 0x1, 11, methods, 9, fields, 0, NULL};
  return &_RAREMultiDataItemTableModel;
}

@end
