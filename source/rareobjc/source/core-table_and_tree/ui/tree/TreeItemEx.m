//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-table_and_tree/com/appnativa/rare/ui/tree/TreeItemEx.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/tree/TreeItemEx.h"
#include "com/appnativa/rare/ui/tree/aDataItemTreeModel.h"
#include "com/appnativa/rare/ui/tree/iTreeItem.h"
#include "com/appnativa/util/iFilter.h"
#include "com/appnativa/util/iFilterableList.h"
#include "com/appnativa/util/iStringConverter.h"
#include "java/lang/Throwable.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"

@implementation RARETreeItemEx

- (id)initWithRARERenderableDataItem:(RARERenderableDataItem *)di
          withRAREaDataItemTreeModel:(RAREaDataItemTreeModel *)tm
                  withRARETreeItemEx:(RARETreeItemEx *)parent {
  if (self = [super init]) {
    self->item_ = di;
    self->treeModel_ = tm;
    self->parent_ = parent;
    self->needsFiltering__ = parent != nil;
    self->needsSorting__ = parent != nil;
  }
  return self;
}

- (void)addChildrenWithJavaUtilList:(id<JavaUtilList>)list {
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:YES];
  int len = (items == nil) ? 0 : [items size];
  RAREaDataItemTreeModel *tm = treeModel_;
  BOOL hide = [((RAREaDataItemTreeModel *) nil_chk(tm)) isHideBarenBranchesWhenFiltered];
  for (int i = 0; i < len; i++) {
    RARETreeItemEx *ti;
    RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(items)) getWithInt:i];
    ti = (RARETreeItemEx *) check_class_cast([tm getTreeItemWithRARERenderableDataItem:di withRAREiTreeItem:self withBoolean:YES], [RARETreeItemEx class]);
    [((RARETreeItemEx *) nil_chk(ti)) pefromPendingActions];
    if (hide && [ti isEmptyFilteredBranch]) {
      continue;
    }
    [((id<JavaUtilList>) nil_chk(list)) addWithId:di];
    if (ti->expanded_) {
      [ti addChildrenWithJavaUtilList:list];
    }
  }
}

- (int)addChildrenWithJavaUtilList:(id<JavaUtilList>)list
                           withInt:(int)index {
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:YES];
  int len = (items == nil) ? 0 : [items size];
  RAREaDataItemTreeModel *tm = treeModel_;
  BOOL hide = [((RAREaDataItemTreeModel *) nil_chk(tm)) isHideBarenBranchesWhenFiltered];
  if (expanded_ && (len > 0)) {
    for (int i = 0; i < len; i++) {
      RARETreeItemEx *ti;
      RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(items)) getWithInt:i];
      ti = (RARETreeItemEx *) check_class_cast([tm getTreeItemWithRARERenderableDataItem:di withRAREiTreeItem:self withBoolean:YES], [RARETreeItemEx class]);
      if (hide && [((RARETreeItemEx *) nil_chk(ti)) isEmptyFilteredBranch]) {
        continue;
      }
      [((id<JavaUtilList>) nil_chk(list)) addWithInt:index++ withId:di];
      if (((RARETreeItemEx *) nil_chk(ti))->expanded_) {
        index = [ti addChildrenWithJavaUtilList:list withInt:index];
      }
    }
  }
  return index;
}

- (void)collapseWithJavaUtilList:(id<JavaUtilList>)list
                         withInt:(int)index {
  expanded_ = NO;
  [self removeChildrenWithJavaUtilList:list withInt:index];
}

- (void)collapseAll {
  expanded_ = NO;
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:YES];
  int len = (items == nil) ? 0 : [items size];
  RAREaDataItemTreeModel *tm = treeModel_;
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(items)) getWithInt:i];
    RARETreeItemEx *ti = (RARETreeItemEx *) check_class_cast([((RAREaDataItemTreeModel *) nil_chk(tm)) getTreeItemWithRARERenderableDataItem:di withRAREiTreeItem:self withBoolean:NO], [RARETreeItemEx class]);
    if (ti != nil) {
      [ti collapseAll];
    }
  }
}

- (void)dispose {
  if ((item_ != nil) && (treeModel_ != nil)) {
    @try {
      RAREaDataItemTreeModel *tm = treeModel_;
      id<RAREUTiFilterableList> items = [self getItemsWithBoolean:NO];
      int len = (items == nil) ? 0 : [items size];
      for (int i = 0; i < len; i++) {
        RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(items)) getWithInt:i];
        RARETreeItemEx *ti = (RARETreeItemEx *) check_class_cast([tm getTreeItemWithRARERenderableDataItem:di withRAREiTreeItem:self withBoolean:NO], [RARETreeItemEx class]);
        if (ti != nil) {
          [ti dispose];
        }
      }
    }
    @catch (JavaLangThrowable *e) {
      [RAREPlatform ignoreExceptionWithNSString:@"dispose exception" withJavaLangThrowable:e];
    }
    item_ = nil;
    parent_ = nil;
    treeModel_ = nil;
  }
}

- (int)expandWithJavaUtilList:(id<JavaUtilList>)list
                      withInt:(int)index {
  if (!expanded_) {
    expanded_ = YES;
    index = [self addChildrenWithJavaUtilList:list withInt:index];
  }
  return index;
}

- (void)expandAll {
  expanded_ = YES;
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:YES];
  int len = (items == nil) ? 0 : [items size];
  RAREaDataItemTreeModel *tm = treeModel_;
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(items)) getWithInt:i];
    RARETreeItemEx *ti = (RARETreeItemEx *) check_class_cast([((RAREaDataItemTreeModel *) nil_chk(tm)) getTreeItemWithRARERenderableDataItem:di withRAREiTreeItem:self withBoolean:YES], [RARETreeItemEx class]);
    [((RARETreeItemEx *) nil_chk(ti)) expandAll];
  }
}

- (BOOL)filter {
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:YES];
  needsFiltering__ = NO;
  [((id<RAREUTiFilterableList>) nil_chk(items)) setConverterWithRAREUTiStringConverter:[((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getFilteringConverter]];
  return [items filterWithRAREUTiFilter:[treeModel_ getLastFilter]];
}

- (void)needsFilteringWithBoolean:(BOOL)myself {
  needsFiltering__ = myself;
  if (myself) {
    [self filter];
  }
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:YES];
  int len = (items == nil) ? 0 : [items size];
  RAREaDataItemTreeModel *tm = treeModel_;
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(items)) getWithInt:i];
    RARETreeItemEx *ti = (RARETreeItemEx *) check_class_cast([((RAREaDataItemTreeModel *) nil_chk(tm)) getTreeItemWithRARERenderableDataItem:di withRAREiTreeItem:self withBoolean:NO], [RARETreeItemEx class]);
    if (ti != nil) {
      [ti unfilter];
      if (![ti isLeaf]) {
        [ti needsFilteringWithBoolean:YES];
      }
    }
  }
}

- (void)needsSortingWithBoolean:(BOOL)myself {
  needsSorting__ = myself;
  if (myself && expanded_) {
    [self sort];
  }
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:YES];
  int len = (items == nil) ? 0 : [items size];
  RAREaDataItemTreeModel *tm = treeModel_;
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *di = [((id<RAREUTiFilterableList>) nil_chk(items)) getWithInt:i];
    RARETreeItemEx *ti = (RARETreeItemEx *) check_class_cast([((RAREaDataItemTreeModel *) nil_chk(tm)) getTreeItemWithRARERenderableDataItem:di withRAREiTreeItem:self withBoolean:NO], [RARETreeItemEx class]);
    if ((ti != nil) && ![ti isLeaf]) {
      [ti needsSortingWithBoolean:YES];
    }
  }
}

- (void)removeChildrenWithJavaUtilList:(id<JavaUtilList>)list
                               withInt:(int)index {
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  int i = index;
  RAREaDataItemTreeModel *tm = treeModel_;
  while (i < len) {
    RARERenderableDataItem *di = [list getWithInt:i];
    RARETreeItemEx *ti = (RARETreeItemEx *) check_class_cast([((RAREaDataItemTreeModel *) nil_chk(tm)) getTreeItemWithRARERenderableDataItem:di withRAREiTreeItem:self withBoolean:NO], [RARETreeItemEx class]);
    if (ti != nil) {
      if ([self isMyChildWithRARETreeItemEx:ti]) {
        (void) [list removeWithInt:index];
        len--;
      }
      else {
        break;
      }
    }
  }
}

- (void)sort {
  id<JavaUtilComparator> c = [((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getLastComparator];
  if (c != nil) {
    [((id<RAREUTiFilterableList>) nil_chk([self getItemsWithBoolean:YES])) sortWithJavaUtilComparator:c];
  }
  needsSorting__ = NO;
}

- (BOOL)unfilter {
  needsFiltering__ = NO;
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:NO];
  if (items == nil) {
    return NO;
  }
  BOOL filtered = [((id<RAREUTiFilterableList>) nil_chk(items)) unfilter];
  int len = [items size];
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *di = [items getWithInt:i];
    RARETreeItemEx *ti = (RARETreeItemEx *) check_class_cast([((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getTreeItemWithRARERenderableDataItem:di withRAREiTreeItem:self withBoolean:NO], [RARETreeItemEx class]);
    if (ti != nil) {
      if ([ti unfilter]) {
        filtered = YES;
      }
    }
  }
  return filtered;
}

- (void)setExpandedWithBoolean:(BOOL)expanded {
  self->expanded_ = expanded;
}

- (void)setItemWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  self->item_ = item;
}

- (void)setParentWithRARETreeItemEx:(RARETreeItemEx *)parent {
  self->parent_ = parent;
}

- (int)getChildCount {
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:NO];
  return (items == nil) ? 0 : [items size];
}

- (RARERenderableDataItem *)getData {
  return item_;
}

- (int)getDepth {
  int n = 0;
  RARETreeItemEx *p = parent_;
  while (p != nil) {
    n++;
    p = ((RARETreeItemEx *) nil_chk(p))->parent_;
  }
  return n;
}

- (id<RAREiTreeItem>)getParentItem {
  return parent_;
}

- (BOOL)isEmptyFilteredBranch {
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:NO];
  return (items != nil) && [items isFiltered] && [items isEmpty];
}

- (BOOL)isExpanded {
  return expanded_;
}

- (BOOL)isLeaf {
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:NO];
  return (items == nil) || [items isEmpty];
}

- (BOOL)isMyChildWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  return [self isMyChildWithRARETreeItemEx:(RARETreeItemEx *) check_class_cast([((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getTreeItemWithRARERenderableDataItem:item withRAREiTreeItem:nil withBoolean:NO], [RARETreeItemEx class])];
}

- (BOOL)isMyChildWithRARETreeItemEx:(RARETreeItemEx *)ti {
  RARETreeItemEx *p = (ti == nil) ? nil : ti->parent_;
  while (p != nil) {
    if (p == self) {
      return YES;
    }
    p = p->parent_;
  }
  return NO;
}

- (void)pefromPendingActions {
  id<RAREUTiFilterableList> items = [self getItemsWithBoolean:NO];
  if (items == nil) {
    return;
  }
  if (needsFiltering__) {
    needsFiltering__ = NO;
    id<RAREUTiFilter> f = [((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getLastFilter];
    if (f != nil) {
      [((id<RAREUTiFilterableList>) nil_chk(items)) filterWithRAREUTiFilter:f];
    }
  }
  if (expanded_) {
    if (needsSorting__) {
      needsSorting__ = NO;
      id<JavaUtilComparator> c = [((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getLastComparator];
      if (c != nil) {
        [((id<RAREUTiFilterableList>) nil_chk(items)) sortWithJavaUtilComparator:c];
      }
    }
  }
}

- (id<RAREUTiFilterableList>)getItemsWithBoolean:(BOOL)create {
  int col = [((RAREaDataItemTreeModel *) nil_chk(treeModel_)) getExpandableColumn];
  if (col == -1) {
    return [((RARERenderableDataItem *) nil_chk(item_)) getItems];
  }
  RARERenderableDataItem *di = [((RARERenderableDataItem *) nil_chk(item_)) getItemExWithInt:col];
  if ((di == nil) && create) {
    di = [[RARERenderableDataItem alloc] init];
    if (col <= [item_ size]) {
      [item_ setItemCountWithInt:col + 1];
    }
    (void) [item_ setWithInt:col withId:di];
  }
  return di;
}

- (void)copyAllFieldsTo:(RARETreeItemEx *)other {
  [super copyAllFieldsTo:other];
  other->expanded_ = expanded_;
  other->item_ = item_;
  other->needsFiltering__ = needsFiltering__;
  other->needsSorting__ = needsSorting__;
  other->parent_ = parent_;
  other->treeModel_ = treeModel_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "filter", NULL, "Z", 0x1, NULL },
    { "unfilter", NULL, "Z", 0x1, NULL },
    { "getData", NULL, "LRARERenderableDataItem", 0x1, NULL },
    { "getParentItem", NULL, "LRAREiTreeItem", 0x1, NULL },
    { "isEmptyFilteredBranch", NULL, "Z", 0x1, NULL },
    { "isExpanded", NULL, "Z", 0x1, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL },
    { "isMyChildWithRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "isMyChildWithRARETreeItemEx:", NULL, "Z", 0x1, NULL },
    { "pefromPendingActions", NULL, "V", 0x4, NULL },
    { "getItemsWithBoolean:", NULL, "LRAREUTiFilterableList", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "item_", NULL, 0x4, "LRARERenderableDataItem" },
    { "needsFiltering__", "needsFiltering", 0x4, "Z" },
    { "needsSorting__", "needsSorting", 0x4, "Z" },
    { "parent_", NULL, 0x4, "LRARETreeItemEx" },
  };
  static J2ObjcClassInfo _RARETreeItemEx = { "TreeItemEx", "com.appnativa.rare.ui.tree", NULL, 0x1, 11, methods, 4, fields, 0, NULL};
  return &_RARETreeItemEx;
}

@end
