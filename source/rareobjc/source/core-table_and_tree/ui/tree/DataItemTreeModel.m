//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-table_and_tree/com/appnativa/rare/ui/tree/DataItemTreeModel.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/iPlatformListDataModel.h"
#include "com/appnativa/rare/ui/tree/DataItemTreeModel.h"
#include "com/appnativa/rare/ui/tree/TreeItemEx.h"
#include "com/appnativa/rare/ui/tree/aDataItemTreeModel.h"
#include "com/appnativa/rare/ui/tree/iTree.h"
#include "com/appnativa/rare/ui/tree/iTreeItem.h"
#include "com/appnativa/rare/util/SubItemComparator.h"
#include "com/appnativa/util/iFilterableList.h"
#include "com/appnativa/util/iStringConverter.h"
#include "java/util/Collection.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"

@implementation RAREDataItemTreeModel

- (id)init {
  if (self = [super init]) {
    itemMap_ = [[JavaUtilIdentityHashMap alloc] init];
  }
  return self;
}

- (id)initWithRARERenderableDataItem:(RARERenderableDataItem *)root {
  if (self = [super initWithRARERenderableDataItem:root]) {
    itemMap_ = [[JavaUtilIdentityHashMap alloc] init];
  }
  return self;
}

- (void)clearEx {
  [super clearEx];
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilIdentityHashMap *) nil_chk(itemMap_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [((RARETreeItemEx *) nil_chk([it next])) dispose];
  }
  [itemMap_ clear];
}

- (id)initWithRARERenderableDataItem:(RARERenderableDataItem *)root
                         withBoolean:(BOOL)asksAllowsChildren {
  if (self = [super initWithRARERenderableDataItem:root withBoolean:asksAllowsChildren]) {
    itemMap_ = [[JavaUtilIdentityHashMap alloc] init];
  }
  return self;
}

- (void)collapseAll {
  RARETreeItemEx *root = [self getRootTreeItem];
  [((RARETreeItemEx *) nil_chk(root)) collapseAll];
  if ((theTree_ != nil) && ![theTree_ isRootNodeCollapsible]) {
    [root setExpandedWithBoolean:YES];
  }
  BOOL enabled = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) isEventsEnabled];
  [listModel_ setEventsEnabledWithBoolean:NO];
  [listModel_ clear];
  if ((theTree_ == nil) || [theTree_ isShowRoot]) {
    [listModel_ addWithId:[root getData]];
  }
  [root addChildrenWithJavaUtilList:listModel_];
  [listModel_ setEventsEnabledWithBoolean:enabled];
  if (enabled) {
    [listModel_ refreshItems];
  }
}

- (void)collapseRowWithInt:(int)row {
  RARERenderableDataItem *item = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row];
  if ((item == rootNode_) && (theTree_ != nil) && ![theTree_ isRootNodeCollapsible]) {
    return;
  }
  [self setExpandedWithBoolean:NO withInt:row + 1 withRARERenderableDataItem:item];
}

- (void)collapseRowWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if ((item == rootNode_) && (theTree_ != nil) && ![theTree_ isRootNodeCollapsible]) {
    return;
  }
  int n = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) indexOfWithId:item];
  if (n != -1) {
    [self setExpandedWithBoolean:NO withInt:n + 1 withRARERenderableDataItem:item];
  }
}

- (void)dispose {
  [super dispose];
  if (listModel_ != nil) {
    [listModel_ dispose];
  }
  listModel_ = nil;
  theTree_ = nil;
}

- (id<RAREUTiStringConverter>)getConverter {
  return (listModel_ == nil) ? nil : [listModel_ getConverter];
}

- (void)expandAll {
  RARETreeItemEx *root = [self getRootTreeItem];
  [((RARETreeItemEx *) nil_chk(root)) expandAll];
  BOOL enabled = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) isEventsEnabled];
  [listModel_ setEventsEnabledWithBoolean:NO];
  [listModel_ clear];
  if ((theTree_ == nil) || [theTree_ isShowRoot]) {
    [listModel_ addWithId:[root getData]];
  }
  [root addChildrenWithJavaUtilList:listModel_];
  [listModel_ setEventsEnabledWithBoolean:enabled];
  if (enabled) {
    [listModel_ refreshItems];
  }
}

- (void)expandRowWithInt:(int)row {
  RARERenderableDataItem *item = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row];
  [self setExpandedWithBoolean:YES withInt:row + 1 withRARERenderableDataItem:item];
}

- (void)expandRowWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  int n = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) indexOfWithId:item];
  if (n != -1) {
    [self setExpandedWithBoolean:YES withInt:n + 1 withRARERenderableDataItem:item];
  }
}

- (void)toggleRowWithInt:(int)row {
  RARERenderableDataItem *item = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:row];
  if ((item == rootNode_) && (theTree_ != nil) && ![theTree_ isRootNodeCollapsible]) {
    return;
  }
  [self setExpandedWithBoolean:![((RARETreeItemEx *) nil_chk([self getTreeItemWithRARERenderableDataItem:item])) isExpanded] withInt:row + 1 withRARERenderableDataItem:item];
}

- (void)toggleRowWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if ((item == rootNode_) && (theTree_ != nil) && ![theTree_ isRootNodeCollapsible]) {
    return;
  }
  int n = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) indexOfWithId:item];
  if (n != -1) {
    [self setExpandedWithBoolean:![((RARETreeItemEx *) nil_chk([self getTreeItemWithRARERenderableDataItem:item])) isExpanded] withInt:n + 1 withRARERenderableDataItem:item];
  }
}

- (BOOL)unfilter {
  BOOL filtered = lastFilter_ != nil;
  lastFilter_ = nil;
  RARETreeItemEx *root = [self getRootTreeItem];
  if (root != nil) {
    [root unfilter];
    if (filtered) {
      [self structureChanged];
    }
  }
  return filtered;
}

- (void)setListModelWithRAREiPlatformListDataModel:(id<RAREiPlatformListDataModel>)listModel {
  self->listModel_ = listModel;
  if (rootItem_ == nil) {
    [self setupRootItem];
  }
}

- (void)setTreeWithRAREiTree:(id<RAREiTree>)tree {
  theTree_ = tree;
}

- (id<RAREiPlatformListDataModel>)getListModel {
  return listModel_;
}

- (RARETreeItemEx *)getRootTreeItem {
  return (RARETreeItemEx *) check_class_cast(rootItem_, [RARETreeItemEx class]);
}

- (id<RAREiTreeItem>)getTreeItemWithRARERenderableDataItem:(RARERenderableDataItem *)item
                                         withRAREiTreeItem:(id<RAREiTreeItem>)parent
                                               withBoolean:(BOOL)create {
  RARETreeItemEx *ti = [self getTreeItemWithRARERenderableDataItem:item];
  if ((ti == nil) && create) {
    ti = [[RARETreeItemEx alloc] initWithRARERenderableDataItem:item withRAREaDataItemTreeModel:self withRARETreeItemEx:(RARETreeItemEx *) check_class_cast(parent, [RARETreeItemEx class])];
    (void) [((JavaUtilIdentityHashMap *) nil_chk(itemMap_)) putWithId:item withId:ti];
  }
  return ti;
}

- (id<RAREiTreeItem>)createTreeItemWithRARERenderableDataItem:(RARERenderableDataItem *)item
                                            withRAREiTreeItem:(id<RAREiTreeItem>)parent {
  return [[RARETreeItemEx alloc] initWithRARERenderableDataItem:item withRAREaDataItemTreeModel:self withRARETreeItemEx:(RARETreeItemEx *) check_class_cast(parent, [RARETreeItemEx class])];
}

- (void)fireRootChanged {
  RARETreeItemEx *root = [self getRootTreeItem];
  if (root != nil) {
    BOOL enabled = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) isEventsEnabled];
    [listModel_ setEventsEnabledWithBoolean:NO];
    [listModel_ clear];
    if (expandAll__ && !sorting_) {
      [((RARETreeItemEx *) nil_chk([self getRootTreeItem])) expandAll];
    }
    if ((theTree_ == nil) || [theTree_ isShowRoot]) {
      [listModel_ addWithId:[root getData]];
    }
    [root addChildrenWithJavaUtilList:listModel_];
    if (expandAll__ && !sorting_) {
      [((RARETreeItemEx *) nil_chk([self getRootTreeItem])) expandAll];
    }
    [listModel_ setEventsEnabledWithBoolean:enabled];
    if (enabled) {
      [listModel_ refreshItems];
    }
  }
}

- (void)fireTreeNodesChangedWithRARERenderableDataItem:(RARERenderableDataItem *)parent
                                          withIntArray:(IOSIntArray *)childIndices {
  [self fireTreeStructureChangedWithRARERenderableDataItem:parent];
}

- (void)fireTreeNodesInsertedWithRARERenderableDataItem:(RARERenderableDataItem *)parent
                                           withIntArray:(IOSIntArray *)childIndices {
  [self fireTreeStructureChangedWithRARERenderableDataItem:parent];
}

- (void)fireTreeNodesRemovedWithRARERenderableDataItem:(RARERenderableDataItem *)parent
                                          withIntArray:(IOSIntArray *)childIndices
                                     withNSObjectArray:(IOSObjectArray *)children {
  RARETreeItemEx *pti = [self getTreeItemWithRARERenderableDataItem:parent];
  if (pti != nil) {
    {
      IOSObjectArray *a__ = children;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id o = (*b__++);
        RARETreeItemEx *ti = [((JavaUtilIdentityHashMap *) nil_chk(itemMap_)) removeWithId:o];
        if (ti != nil) {
          [ti dispose];
        }
      }
    }
    [self fireTreeStructureChangedWithRARERenderableDataItem:parent];
  }
}

- (void)fireTreeStructureChangedWithRARERenderableDataItem:(RARERenderableDataItem *)parent {
  if (parent == rootNode_) {
    [self fireRootChanged];
    return;
  }
  RARETreeItemEx *ti = [self getTreeItemWithRARERenderableDataItem:parent];
  if (ti != nil) {
    int n = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) indexOfWithId:parent];
    if (n != -1) {
      BOOL enabled = [listModel_ isEventsEnabled];
      [listModel_ setEventsEnabledWithBoolean:NO];
      n++;
      [ti removeChildrenWithJavaUtilList:listModel_ withInt:n];
      [ti addChildrenWithJavaUtilList:listModel_ withInt:n];
      [listModel_ setEventsEnabledWithBoolean:enabled];
      if (enabled) {
        [listModel_ refreshItems];
      }
    }
  }
}

- (id<RAREUTiStringConverter>)getFilteringConverter {
  return [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getConverter];
}

- (void)needsFiltering {
  [((RARETreeItemEx *) nil_chk([self getRootTreeItem])) needsFilteringWithBoolean:NO];
}

- (void)needsSorting {
  BOOL myself = YES;
  if ([(id) comparator_ isKindOfClass:[RARESubItemComparator class]]) {
    RARESubItemComparator *c = (RARESubItemComparator *) check_class_cast(comparator_, [RARESubItemComparator class]);
    if ([((RARESubItemComparator *) nil_chk(c)) getSortColumn] != expandableColumn_) {
      myself = NO;
    }
  }
  [((RARETreeItemEx *) nil_chk([self getRootTreeItem])) needsSortingWithBoolean:myself];
}

- (void)setExpandedWithBoolean:(BOOL)expanded
                       withInt:(int)n
    withRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (n != -1) {
    RARETreeItemEx *ti = [self getTreeItemWithRARERenderableDataItem:item];
    if (ti != nil) {
      BOOL enabled = [((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) isEventsEnabled];
      [listModel_ setEventsEnabledWithBoolean:NO];
      @try {
        if (expanded) {
          [ti expandWithJavaUtilList:listModel_ withInt:n];
        }
        else {
          [ti collapseWithJavaUtilList:listModel_ withInt:n];
        }
      }
      @finally {
        [listModel_ setEventsEnabledWithBoolean:enabled];
        int p = [((id<RAREUTiFilterableList>) nil_chk([ti getItemsWithBoolean:YES])) size];
        if (p > 0) {
          if (expanded) {
            [listModel_ rowsInsertedWithInt:n withInt:n + p - 1];
          }
          else {
            [listModel_ rowsDeletedWithInt:n withInt:n + p - 1 withJavaUtilList:[ti getItemsWithBoolean:YES]];
          }
        }
      }
    }
  }
}

- (RARETreeItemEx *)getTreeItemWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (item == rootNode_) {
    return (RARETreeItemEx *) check_class_cast(rootItem_, [RARETreeItemEx class]);
  }
  return [((JavaUtilIdentityHashMap *) nil_chk(itemMap_)) getWithId:item];
}

- (void)copyAllFieldsTo:(RAREDataItemTreeModel *)other {
  [super copyAllFieldsTo:other];
  other->itemMap_ = itemMap_;
  other->listModel_ = listModel_;
  other->theTree_ = theTree_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getConverter", NULL, "LRAREUTiStringConverter", 0x1, NULL },
    { "unfilter", NULL, "Z", 0x1, NULL },
    { "getListModel", NULL, "LRAREiPlatformListDataModel", 0x1, NULL },
    { "getRootTreeItem", NULL, "LRARETreeItemEx", 0x1, NULL },
    { "getTreeItemWithRARERenderableDataItem:withRAREiTreeItem:withBoolean:", NULL, "LRAREiTreeItem", 0x1, NULL },
    { "createTreeItemWithRARERenderableDataItem:withRAREiTreeItem:", NULL, "LRAREiTreeItem", 0x4, NULL },
    { "fireRootChanged", NULL, "V", 0x4, NULL },
    { "fireTreeNodesChangedWithRARERenderableDataItem:withIntArray:", NULL, "V", 0x4, NULL },
    { "fireTreeNodesInsertedWithRARERenderableDataItem:withIntArray:", NULL, "V", 0x4, NULL },
    { "fireTreeNodesRemovedWithRARERenderableDataItem:withIntArray:withNSObjectArray:", NULL, "V", 0x4, NULL },
    { "fireTreeStructureChangedWithRARERenderableDataItem:", NULL, "V", 0x4, NULL },
    { "getFilteringConverter", NULL, "LRAREUTiStringConverter", 0x1, NULL },
    { "needsFiltering", NULL, "V", 0x4, NULL },
    { "needsSorting", NULL, "V", 0x4, NULL },
    { "setExpandedWithBoolean:withInt:withRARERenderableDataItem:", NULL, "V", 0x2, NULL },
    { "getTreeItemWithRARERenderableDataItem:", NULL, "LRARETreeItemEx", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "itemMap_", NULL, 0x4, "LJavaUtilIdentityHashMap" },
    { "listModel_", NULL, 0x4, "LRAREiPlatformListDataModel" },
    { "theTree_", NULL, 0x4, "LRAREiTree" },
  };
  static J2ObjcClassInfo _RAREDataItemTreeModel = { "DataItemTreeModel", "com.appnativa.rare.ui.tree", NULL, 0x1, 16, methods, 3, fields, 0, NULL};
  return &_RAREDataItemTreeModel;
}

@end
