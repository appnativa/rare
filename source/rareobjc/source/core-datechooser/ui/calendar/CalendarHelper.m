//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-datechooser/com/appnativa/rare/ui/calendar/CalendarHelper.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSIntArray.h"
#include "com/appnativa/rare/ui/calendar/CalendarHelper.h"
#include "com/appnativa/rare/ui/calendar/DateSelectionModel.h"
#include "com/appnativa/rare/ui/calendar/iDateFilter.h"
#include "com/appnativa/rare/ui/calendar/iDayCell.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"

@implementation RARECalendarHelper

- (id)init {
  if (self = [super init]) {
    [self createModel];
    mToday_ = [JavaUtilCalendar getInstance];
    mCalendar_ = [JavaUtilCalendar getInstance];
    mHelper_ = [[RARECalendarHelper_MonthDisplayHelper alloc] initWithInt:[((JavaUtilCalendar *) nil_chk(mToday_)) getWithInt:JavaUtilCalendar_YEAR] withInt:[mToday_ getWithInt:JavaUtilCalendar_MONTH]];
  }
  return self;
}

- (id<RAREiDayCell>)configureDayCellWithInt:(int)row
                                    withInt:(int)column
                           withRAREiDayCell:(id<RAREiDayCell>)cell {
  int day = [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) getDayAtWithInt:row withInt:column];
  [((id<RAREiDayCell>) nil_chk(cell)) setDayWithInt:day];
  if ([mHelper_ isWithinCurrentMonthWithInt:row withInt:column]) {
    [((JavaUtilCalendar *) nil_chk(mCalendar_)) setWithInt:[mHelper_ getYear] withInt:[mHelper_ getMonth] withInt:day];
    [cell setTodayWithBoolean:[((RAREDateSelectionModel *) nil_chk(selectionModel_)) isSameDayWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(mToday_)) getTime] withJavaUtilDate:[mCalendar_ getTime]]];
    [cell setCurrentMonthWithBoolean:YES];
  }
  else {
    [cell setCurrentMonthWithBoolean:NO];
    if (day > 15) {
      [((JavaUtilCalendar *) nil_chk(mCalendar_)) setWithInt:[mHelper_ getYear] withInt:[mHelper_ getMonth] + 1 withInt:day];
    }
    else {
      [((JavaUtilCalendar *) nil_chk(mCalendar_)) setWithInt:[mHelper_ getYear] withInt:[mHelper_ getMonth] - 1 withInt:day];
    }
    [cell setTodayWithBoolean:[((RAREDateSelectionModel *) nil_chk(selectionModel_)) isSameDayWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(mToday_)) getTime] withJavaUtilDate:[((JavaUtilCalendar *) nil_chk(mCalendar_)) getTime]]];
  }
  [cell setSelectedWithBoolean:[((RAREDateSelectionModel *) nil_chk(selectionModel_)) isSelectedDateWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(mCalendar_)) getTime]]];
  return cell;
}

+ (id<RAREiDateFilter>)createWeekDayOnlyFilterWithJavaUtilCalendar:(JavaUtilCalendar *)max
                                              withJavaUtilCalendar:(JavaUtilCalendar *)min {
  return [[RARECalendarHelper_$1 alloc] initWithJavaUtilCalendar:max withJavaUtilCalendar:min];
}

+ (id<RAREiDateFilter>)createWeekendOnlyFilterWithJavaUtilCalendar:(JavaUtilCalendar *)max
                                              withJavaUtilCalendar:(JavaUtilCalendar *)min {
  return [[RARECalendarHelper_$2 alloc] initWithJavaUtilCalendar:max withJavaUtilCalendar:min];
}

- (JavaUtilDate *)gotoDateAtWithDouble:(double)px
                            withDouble:(double)py
                            withDouble:(double)cw
                            withDouble:(double)ch {
  double x = 0;
  double y = 0;
  double ox = x;
  double ex = x + cw;
  double ey = y + ch;
  int day = -1;
  int row = 0;
  int col = 0;
  for (int r = 0; r < 6; r++) {
    if ((py >= y) && (py <= ey)) {
      for (int c = 0; c < 7; c++) {
        if ((px >= x) && (px <= ex)) {
          day = [self getDayWithInt:r withInt:c];
          row = r;
          col = c;
          break;
        }
        x += cw;
        ex += cw;
      }
    }
    x = ox;
    y += ch;
    ey += ch;
  }
  if (day > -1) {
    if ([((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) isWithinCurrentMonthWithInt:row withInt:col]) {
      [((JavaUtilCalendar *) nil_chk(mCalendar_)) setWithInt:[mHelper_ getYear] withInt:[mHelper_ getMonth] withInt:day];
    }
    else {
      if (day > 15) {
        [((JavaUtilCalendar *) nil_chk(mCalendar_)) setWithInt:[mHelper_ getYear] withInt:[mHelper_ getMonth] + 1 withInt:day];
      }
      else {
        [((JavaUtilCalendar *) nil_chk(mCalendar_)) setWithInt:[mHelper_ getYear] withInt:[mHelper_ getMonth] - 1 withInt:day];
      }
    }
    return [((JavaUtilCalendar *) nil_chk(mCalendar_)) getTime];
  }
  return nil;
}

- (void)nextDay {
  [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) nextDay];
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) setTimeInMillisWithLong:[mHelper_ getTimeInMillis]];
}

- (void)nextMonth {
  [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) nextMonth];
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) setTimeInMillisWithLong:[mHelper_ getTimeInMillis]];
}

- (void)nextWeek {
  [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) nextWeek];
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) setTimeInMillisWithLong:[mHelper_ getTimeInMillis]];
}

- (void)nextYear {
  [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) nextYear];
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) setTimeInMillisWithLong:[mHelper_ getTimeInMillis]];
}

- (void)previousDay {
  [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) previousDay];
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) setTimeInMillisWithLong:[mHelper_ getTimeInMillis]];
}

- (void)previousMonth {
  [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) previousMonth];
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) setTimeInMillisWithLong:[mHelper_ getTimeInMillis]];
}

- (void)previousWeek {
  [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) previousWeek];
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) setTimeInMillisWithLong:[mHelper_ getTimeInMillis]];
}

- (void)previousYear {
  [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) previousYear];
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) setTimeInMillisWithLong:[mHelper_ getTimeInMillis]];
}

- (void)today {
  [((JavaUtilCalendar *) nil_chk(mToday_)) setTimeInMillisWithLong:[JavaLangSystem currentTimeMillis]];
  [self setTimeInMillisWithLong:[JavaLangSystem currentTimeMillis]];
}

- (void)setSelectionModelWithRAREDateSelectionModel:(RAREDateSelectionModel *)selectionModel {
  self->selectionModel_ = selectionModel;
}

- (void)setShowNoneButtonWithBoolean:(BOOL)booleanValue {
}

- (void)setShowOKButtonWithBoolean:(BOOL)booleanValue {
}

- (void)setShowTodayButtonWithBoolean:(BOOL)booleanValue {
}

- (void)setShowWeekNumbersWithBoolean:(BOOL)booleanValue {
}

- (void)setTimeInMillisWithLong:(long long int)milliseconds {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) setTimeInMillisWithLong:milliseconds];
  [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) setTimeInMillisWithLong:milliseconds];
}

- (JavaUtilDate *)getDate {
  return [((JavaUtilCalendar *) nil_chk(mCalendar_)) getTime];
}

- (int)getDayWithInt:(int)row
             withInt:(int)column {
  return [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) getDayAtWithInt:row withInt:column];
}

- (int)getMonth {
  return [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) getMonth];
}

- (RAREDateSelectionModel *)getSelectionModel {
  return selectionModel_;
}

- (int)getYear {
  return [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) getYear];
}

- (BOOL)isLastDayWithInt:(int)day {
  return [((RARECalendarHelper_MonthDisplayHelper *) nil_chk(mHelper_)) getNumberOfDaysInMonth] == day;
}

- (void)createModel {
  selectionModel_ = [[RAREDateSelectionModel alloc] init];
}

- (void)copyAllFieldsTo:(RARECalendarHelper *)other {
  [super copyAllFieldsTo:other];
  other->mCalendar_ = mCalendar_;
  other->mHelper_ = mHelper_;
  other->mToday_ = mToday_;
  other->selectionModel_ = selectionModel_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "configureDayCellWithInt:withInt:withRAREiDayCell:", NULL, "LRAREiDayCell", 0x1, NULL },
    { "createWeekDayOnlyFilterWithJavaUtilCalendar:withJavaUtilCalendar:", NULL, "LRAREiDateFilter", 0x9, NULL },
    { "createWeekendOnlyFilterWithJavaUtilCalendar:withJavaUtilCalendar:", NULL, "LRAREiDateFilter", 0x9, NULL },
    { "gotoDateAtWithDouble:withDouble:withDouble:withDouble:", NULL, "LJavaUtilDate", 0x1, NULL },
    { "getDate", NULL, "LJavaUtilDate", 0x1, NULL },
    { "getSelectionModel", NULL, "LRAREDateSelectionModel", 0x1, NULL },
    { "isLastDayWithInt:", NULL, "Z", 0x1, NULL },
    { "createModel", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "mCalendar_", NULL, 0x4, "LJavaUtilCalendar" },
    { "mHelper_", NULL, 0x4, "LRARECalendarHelper_MonthDisplayHelper" },
    { "mToday_", NULL, 0x4, "LJavaUtilCalendar" },
    { "selectionModel_", NULL, 0x4, "LRAREDateSelectionModel" },
  };
  static J2ObjcClassInfo _RARECalendarHelper = { "CalendarHelper", "com.appnativa.rare.ui.calendar", NULL, 0x1, 8, methods, 4, fields, 0, NULL};
  return &_RARECalendarHelper;
}

@end
@implementation RARECalendarHelper_MonthDisplayHelper

- (id)initWithInt:(int)year
          withInt:(int)month {
  return [self initRARECalendarHelper_MonthDisplayHelperWithInt:year withInt:month withInt:JavaUtilCalendar_SUNDAY];
}

- (id)initRARECalendarHelper_MonthDisplayHelperWithInt:(int)year
                                               withInt:(int)month
                                               withInt:(int)weekStartDay {
  if (self = [super init]) {
    if ((weekStartDay < JavaUtilCalendar_SUNDAY) || (weekStartDay > JavaUtilCalendar_SATURDAY)) {
      @throw [[JavaLangIllegalArgumentException alloc] init];
    }
    mWeekStartDay_ = weekStartDay;
    mCalendar_ = [JavaUtilCalendar getInstance];
    [((JavaUtilCalendar *) nil_chk(mCalendar_)) setWithInt:JavaUtilCalendar_YEAR withInt:year];
    [mCalendar_ setWithInt:JavaUtilCalendar_MONTH withInt:month];
    [mCalendar_ setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:1];
    [mCalendar_ setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:0];
    [mCalendar_ setWithInt:JavaUtilCalendar_MINUTE withInt:0];
    [mCalendar_ setWithInt:JavaUtilCalendar_SECOND withInt:0];
    [mCalendar_ getTimeInMillis];
    [self recalculate];
  }
  return self;
}

- (id)initWithInt:(int)year
          withInt:(int)month
          withInt:(int)weekStartDay {
  return [self initRARECalendarHelper_MonthDisplayHelperWithInt:year withInt:month withInt:weekStartDay];
}

- (void)nextDay {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) addWithInt:JavaUtilCalendar_DAY_OF_YEAR withInt:1];
  [self recalculate];
}

- (void)nextMonth {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) addWithInt:JavaUtilCalendar_MONTH withInt:1];
  [self recalculate];
}

- (void)nextWeek {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) addWithInt:JavaUtilCalendar_WEEK_OF_YEAR withInt:1];
  [self recalculate];
}

- (void)nextYear {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) addWithInt:JavaUtilCalendar_YEAR withInt:1];
  [self recalculate];
}

- (void)previousDay {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) addWithInt:JavaUtilCalendar_DAY_OF_YEAR withInt:-1];
  [self recalculate];
}

- (void)previousMonth {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) addWithInt:JavaUtilCalendar_MONTH withInt:-1];
  [self recalculate];
}

- (void)previousWeek {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) addWithInt:JavaUtilCalendar_WEEK_OF_YEAR withInt:-1];
  [self recalculate];
}

- (void)previousYear {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) addWithInt:JavaUtilCalendar_YEAR withInt:-1];
  [self recalculate];
}

- (void)setTimeInMillisWithLong:(long long int)milliseconds {
  [((JavaUtilCalendar *) nil_chk(mCalendar_)) setTimeInMillisWithLong:milliseconds];
  [self recalculate];
}

- (int)getColumnOfWithInt:(int)day {
  return (day + mOffset_ - 1) % 7;
}

- (int)getDayAtWithInt:(int)row
               withInt:(int)column {
  if ((row == 0) && (column < mOffset_)) {
    return mNumDaysInPrevMonth_ + column - mOffset_ + 1;
  }
  int day = 7 * row + column - mOffset_ + 1;
  return (day > mNumDaysInMonth_) ? day - mNumDaysInMonth_ : day;
}

- (IOSIntArray *)getDigitsForRowWithInt:(int)row {
  if ((row < 0) || (row > 5)) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"row %d out of range (0-5)", row]];
  }
  IOSIntArray *result = [IOSIntArray arrayWithLength:7];
  for (int column = 0; column < 7; column++) {
    (*IOSIntArray_GetRef(result, column)) = [self getDayAtWithInt:row withInt:column];
  }
  return result;
}

- (int)getFirstDayOfMonth {
  return [((JavaUtilCalendar *) nil_chk(mCalendar_)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK];
}

- (int)getMonth {
  return [((JavaUtilCalendar *) nil_chk(mCalendar_)) getWithInt:JavaUtilCalendar_MONTH];
}

- (int)getNumberOfDaysInMonth {
  return mNumDaysInMonth_;
}

- (int)getOffset {
  return mOffset_;
}

- (int)getRowOfWithInt:(int)day {
  return (day + mOffset_ - 1) / 7;
}

- (long long int)getTimeInMillis {
  return [((JavaUtilCalendar *) nil_chk(mCalendar_)) getTimeInMillis];
}

- (int)getWeekStartDay {
  return mWeekStartDay_;
}

- (int)getYear {
  return [((JavaUtilCalendar *) nil_chk(mCalendar_)) getWithInt:JavaUtilCalendar_YEAR];
}

- (BOOL)isWithinCurrentMonthWithInt:(int)row
                            withInt:(int)column {
  if ((row < 0) || (column < 0) || (row > 5) || (column > 6)) {
    return NO;
  }
  if ((row == 0) && (column < mOffset_)) {
    return NO;
  }
  int day = 7 * row + column - mOffset_ + 1;
  if (day > mNumDaysInMonth_) {
    return NO;
  }
  return YES;
}

- (void)recalculate {
  mNumDaysInMonth_ = [((JavaUtilCalendar *) nil_chk(mCalendar_)) getActualMaximumWithInt:JavaUtilCalendar_DAY_OF_MONTH];
  [mCalendar_ addWithInt:JavaUtilCalendar_MONTH withInt:-1];
  mNumDaysInPrevMonth_ = [mCalendar_ getActualMaximumWithInt:JavaUtilCalendar_DAY_OF_MONTH];
  [mCalendar_ addWithInt:JavaUtilCalendar_MONTH withInt:1];
  int firstDayOfMonth = [self getFirstDayOfMonth];
  int offset = firstDayOfMonth - mWeekStartDay_;
  if (offset < 0) {
    offset += 7;
  }
  mOffset_ = offset;
}

- (void)copyAllFieldsTo:(RARECalendarHelper_MonthDisplayHelper *)other {
  [super copyAllFieldsTo:other];
  other->mCalendar_ = mCalendar_;
  other->mNumDaysInMonth_ = mNumDaysInMonth_;
  other->mNumDaysInPrevMonth_ = mNumDaysInPrevMonth_;
  other->mOffset_ = mOffset_;
  other->mWeekStartDay_ = mWeekStartDay_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDigitsForRowWithInt:", NULL, "LIOSIntArray", 0x1, NULL },
    { "isWithinCurrentMonthWithInt:withInt:", NULL, "Z", 0x1, NULL },
    { "recalculate", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "mWeekStartDay_", NULL, 0x12, "I" },
  };
  static J2ObjcClassInfo _RARECalendarHelper_MonthDisplayHelper = { "MonthDisplayHelper", "com.appnativa.rare.ui.calendar", "CalendarHelper", 0x9, 3, methods, 1, fields, 0, NULL};
  return &_RARECalendarHelper_MonthDisplayHelper;
}

@end
@implementation RARECalendarHelper_$1

- (JavaUtilCalendar *)getMaxDate {
  return val$max_;
}

- (JavaUtilCalendar *)getMinDate {
  return val$min_;
}

- (BOOL)isDateValidWithJavaUtilCalendar:(JavaUtilCalendar *)date {
  if (([((JavaUtilCalendar *) nil_chk(date)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK] == JavaUtilCalendar_SATURDAY) || ([date getWithInt:JavaUtilCalendar_DAY_OF_WEEK] == JavaUtilCalendar_SUNDAY)) {
    return NO;
  }
  return YES;
}

- (id)initWithJavaUtilCalendar:(JavaUtilCalendar *)capture$0
          withJavaUtilCalendar:(JavaUtilCalendar *)capture$1 {
  val$max_ = capture$0;
  val$min_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getMaxDate", NULL, "LJavaUtilCalendar", 0x1, NULL },
    { "getMinDate", NULL, "LJavaUtilCalendar", 0x1, NULL },
    { "isDateValidWithJavaUtilCalendar:", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$max_", NULL, 0x1012, "LJavaUtilCalendar" },
    { "val$min_", NULL, 0x1012, "LJavaUtilCalendar" },
  };
  static J2ObjcClassInfo _RARECalendarHelper_$1 = { "$1", "com.appnativa.rare.ui.calendar", "CalendarHelper", 0x8000, 3, methods, 2, fields, 0, NULL};
  return &_RARECalendarHelper_$1;
}

@end
@implementation RARECalendarHelper_$2

- (JavaUtilCalendar *)getMaxDate {
  return val$max_;
}

- (JavaUtilCalendar *)getMinDate {
  return val$min_;
}

- (BOOL)isDateValidWithJavaUtilCalendar:(JavaUtilCalendar *)date {
  if (([((JavaUtilCalendar *) nil_chk(date)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK] == JavaUtilCalendar_SATURDAY) || ([date getWithInt:JavaUtilCalendar_DAY_OF_WEEK] == JavaUtilCalendar_SUNDAY)) {
    return YES;
  }
  return NO;
}

- (id)initWithJavaUtilCalendar:(JavaUtilCalendar *)capture$0
          withJavaUtilCalendar:(JavaUtilCalendar *)capture$1 {
  val$max_ = capture$0;
  val$min_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getMaxDate", NULL, "LJavaUtilCalendar", 0x1, NULL },
    { "getMinDate", NULL, "LJavaUtilCalendar", 0x1, NULL },
    { "isDateValidWithJavaUtilCalendar:", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$max_", NULL, 0x1012, "LJavaUtilCalendar" },
    { "val$min_", NULL, 0x1012, "LJavaUtilCalendar" },
  };
  static J2ObjcClassInfo _RARECalendarHelper_$2 = { "$2", "com.appnativa.rare.ui.calendar", "CalendarHelper", 0x8000, 3, methods, 2, fields, 0, NULL};
  return &_RARECalendarHelper_$2;
}

@end
