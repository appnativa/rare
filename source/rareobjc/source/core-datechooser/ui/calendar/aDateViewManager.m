//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-datechooser/com/appnativa/rare/ui/calendar/aDateViewManager.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/jgoodies/forms/layout/FormLayout.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/DateConverter.h"
#include "com/appnativa/rare/converters/DateTimeConverter.h"
#include "com/appnativa/rare/converters/TimeConverter.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/ui/AlertPanel.h"
#include "com/appnativa/rare/ui/LinearPanel.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIProperties.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/border/UILineBorder.h"
#include "com/appnativa/rare/ui/border/UIMatteBorder.h"
#include "com/appnativa/rare/ui/calendar/aDateViewManager.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/ChangeEvent.h"
#include "com/appnativa/rare/ui/event/EventListenerList.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/event/iChangeListener.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/widget/PushButtonWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/System.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"

@implementation RAREaDateViewManager

- (id)init {
  if (self = [super init]) {
    date_ = [JavaUtilCalendar getInstance];
    endDate_ = [JavaUtilCalendar getInstance];
    listenerList_ = [[RAREEventListenerList alloc] init];
    useAmPmTimeFormat_ = YES;
  }
  return self;
}

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  if ([((RAREActionEvent *) nil_chk(e)) getComponent] == todayButton_) {
    date_ = [JavaUtilCalendar getInstance];
    [self fireEvent];
  }
  else if ([e getComponent] == noneButton_) {
    valueSet_ = NO;
    [self fireEvent];
  }
  else if ([e getComponent] == okButton_) {
    [self fireEvent];
  }
}

- (void)finishedWithBoolean:(BOOL)canceled
                     withId:(id)returnValue {
  dialog_ = nil;
  if (!canceled && returnValue != nil) {
    if ([((JavaLangBoolean *) nil_chk([JavaLangBoolean getFALSE])) isEqual:returnValue]) {
      date_ = [JavaUtilCalendar getInstance];
      [self fireEvent];
    }
    else {
      [self fireEvent];
    }
  }
  else {
    valueSet_ = NO;
    [self fireEvent];
  }
}

- (void)addActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  [((RAREEventListenerList *) nil_chk(listenerList_)) addWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiActionListener)] withId:l];
}

- (void)addChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
  [((RAREEventListenerList *) nil_chk(listenerList_)) addWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)] withId:l];
}

- (void)dispose {
  if (buttonPanel_ != nil) {
    [buttonPanel_ dispose];
  }
  if (listenerList_ != nil) {
    [listenerList_ clear];
  }
  buttonPanel_ = nil;
  listenerList_ = nil;
  dialog_ = nil;
  date_ = nil;
  endDate_ = nil;
  changeEvent_ = nil;
  converterContext_ = nil;
  dateConverter_ = nil;
  maxDate_ = nil;
  minDate_ = nil;
  validationDate_ = nil;
  buttonPanel_ = nil;
  noneButton_ = nil;
  okButton_ = nil;
  todayButton_ = nil;
}

- (void)finishConfiguringWithRAREiWidget:(id<RAREiWidget>)context {
}

- (void)removeActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  [((RAREEventListenerList *) nil_chk(listenerList_)) removeWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiActionListener)] withId:l];
}

- (void)removeChangeListenerWithRAREiChangeListener:(id<RAREiChangeListener>)l {
  [((RAREEventListenerList *) nil_chk(listenerList_)) removeWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)] withId:l];
}

- (void)showDialogWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)owner {
  if (dialog_ != nil) {
    return;
  }
  NSString *title = [self getDialogTitle];
  if (title == nil) {
    if (showTime_) {
      if (showTimeOnly_) {
        title = [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.dateChooser.chooseTime"];
      }
      else {
        title = [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.dateChooser.chooseDateTime"];
      }
    }
    else {
      title = [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.dateChooser.chooseDate"];
    }
  }
  id<RAREiWidget> w = [((id<RAREiPlatformComponent>) nil_chk(owner)) getWidget];
  NSString *none = [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.dateChooser.none"];
  NSString *done = [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.dateChooser.done"];
  NSString *today = [RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.dateChooser.today"];
  RAREAlertPanel *p;
  if (showNoneButton_) {
    if (showTodayButton_) {
      p = [RAREAlertPanel yesNoCancelWithRAREiWidget:w withNSString:title withId:[self getDatePickerComponent] withRAREiPlatformIcon:nil withNSString:done withNSString:today withNSString:none];
    }
    else {
      p = [RAREAlertPanel yesNoWithRAREiWidget:w withNSString:title withId:[self getDatePickerComponent] withRAREiPlatformIcon:nil withNSString:done withNSString:none withBoolean:YES];
    }
  }
  else {
    if (showTodayButton_) {
      p = [RAREAlertPanel yesNoWithRAREiWidget:w withNSString:title withId:[self getDatePickerComponent] withRAREiPlatformIcon:nil withNSString:done withNSString:today withBoolean:YES];
      p = [RAREAlertPanel yesNoCancelWithRAREiWidget:w withNSString:title withId:p withRAREiPlatformIcon:nil withNSString:done withNSString:today withNSString:none];
    }
    else {
      p = [RAREAlertPanel okWithRAREiWidget:w withNSString:title withId:[self getDatePickerComponent] withRAREiPlatformIcon:nil];
      [((RAREPushButtonWidget *) nil_chk([((RAREAlertPanel *) nil_chk(p)) getYesOrOkButton])) setTextWithJavaLangCharSequence:done];
    }
  }
  dialog_ = p;
  [((RAREAlertPanel *) nil_chk(p)) showDialogWithRAREiFunctionCallback:self];
}

- (void)setConverterWithRAREiDataConverter:(id<RAREiDataConverter>)converter {
  dateConverter_ = converter;
}

- (void)setConverterContextWithId:(id)context {
  converterContext_ = context;
}

- (void)setDateWithJavaUtilCalendar:(JavaUtilCalendar *)date {
  if (date == nil) {
    valueSet_ = NO;
    [((JavaUtilCalendar *) nil_chk(self->date_)) setTimeInMillisWithLong:[JavaLangSystem currentTimeMillis]];
    [self setValueExWithJavaUtilCalendar:self->date_];
  }
  else {
    valueSet_ = YES;
    [self setValueExWithJavaUtilCalendar:date];
  }
}

- (void)setDateWithJavaUtilDate:(JavaUtilDate *)date {
  if (date == nil) {
    valueSet_ = NO;
    [((JavaUtilCalendar *) nil_chk(self->date_)) setTimeInMillisWithLong:[JavaLangSystem currentTimeMillis]];
    [self setValueExWithJavaUtilCalendar:self->date_];
  }
  else {
    valueSet_ = YES;
    JavaUtilCalendar *cal = [JavaUtilCalendar getInstance];
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:date];
    [self setValueExWithJavaUtilCalendar:cal];
  }
}

- (void)setDialogTitleWithNSString:(NSString *)dialogTitle {
  self->dialogTitle_ = dialogTitle;
}

- (void)setEndDateWithJavaUtilCalendar:(JavaUtilCalendar *)date {
  endDate_ = date;
}

- (void)setEndDateWithJavaUtilDate:(JavaUtilDate *)date {
  if (date == nil) {
    endDate_ = nil;
  }
  else {
    JavaUtilCalendar *cal = [JavaUtilCalendar getInstance];
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:date];
    endDate_ = cal;
  }
}

- (void)setIgnoreChangeEventWithBoolean:(BOOL)ignoreChangeEvent {
  self->ignoreChangeEvent_ = ignoreChangeEvent;
}

- (void)setMaxDateWithJavaUtilCalendar:(JavaUtilCalendar *)cal {
  maxDate_ = cal;
}

- (void)setMinDateWithJavaUtilCalendar:(JavaUtilCalendar *)cal {
  minDate_ = cal;
}

- (void)setShowCalendarWithBoolean:(BOOL)showCalendar {
  self->showCalendar_ = showCalendar;
}

- (void)setShowNoneButtonWithBoolean:(BOOL)show {
  showNoneButton_ = show;
}

- (void)setShowOKButtonWithBoolean:(BOOL)show {
  showOkButton_ = show;
}

- (void)setShowSpinnersWithBoolean:(BOOL)show {
}

- (void)setShowTimeWithBoolean:(BOOL)show {
  showTime_ = show;
}

- (void)setShowTimeOnlyWithBoolean:(BOOL)showTimeOnly {
  self->showTimeOnly_ = showTimeOnly;
}

- (void)setShowTodayButtonWithBoolean:(BOOL)show {
  showTodayButton_ = show;
}

- (void)setShowWeekNumbersWithBoolean:(BOOL)show {
  showWeekNumbers_ = show;
}

- (void)setUseAmPmTimeFormatWithBoolean:(BOOL)useAmPmTimeFormat {
  self->useAmPmTimeFormat_ = useAmPmTimeFormat;
}

- (id<RAREiPlatformComponent>)getButtonPanelWithRAREiWidget:(id<RAREiWidget>)context {
  if (!showNoneButton_ && !showOkButton_ && !showTodayButton_) {
    return nil;
  }
  if (buttonPanel_ == nil) {
    RARELinearPanel *p = [self createButtonPanelWithRAREiWidget:context];
    id<RAREiPlatformBorder> b = [((RAREUIProperties *) nil_chk([RAREPlatform getUIDefaults])) getBorderWithNSString:@"Rare.DataChooser.buttonPanel.border"];
    if (b == nil) {
      b = [[RAREUIMatteBorder alloc] initWithRAREUIInsets:[[RAREUIInsets alloc] initWithInt:1 withInt:0 withInt:0 withInt:0] withRAREUIColor:[RAREaUILineBorder getDefaultLineColor]];
    }
    [((RARELinearPanel *) nil_chk(p)) setBorderWithRAREiPlatformBorder:b];
    buttonPanel_ = p;
  }
  return buttonPanel_;
}

- (id<RAREiPlatformComponent>)getDatePickerComponent {
  return nil;
}

- (NSString *)getDialogTitle {
  return dialogTitle_;
}

- (JavaUtilDate *)getEndDate {
  if (endDate_ == nil) {
    return nil;
  }
  return valueSet_ ? [((JavaUtilCalendar *) nil_chk(endDate_)) getTime] : nil;
}

- (JavaUtilDate *)getStartValue {
  return valueSet_ ? [((JavaUtilCalendar *) nil_chk(date_)) getTime] : nil;
}

- (JavaUtilDate *)getValue {
  return valueSet_ ? [((JavaUtilCalendar *) nil_chk(date_)) getTime] : nil;
}

- (id<JavaLangCharSequence>)getValueAsString {
  if (stringValue_ == nil) {
    stringValue_ = [((id<RAREiDataConverter>) nil_chk([self getDateConverter])) objectToStringWithRAREiWidget:[RAREPlatform getWindowViewer] withId:date_ withId:converterContext_];
  }
  return stringValue_;
}

- (BOOL)isIgnoreChangeEvent {
  return ignoreChangeEvent_;
}

- (BOOL)isShowCalendar {
  return showCalendar_;
}

- (BOOL)isShowOkButton {
  return showOkButton_;
}

- (BOOL)isShowSpinners {
  return NO;
}

- (BOOL)isShowTimeOnly {
  return showTimeOnly_;
}

- (BOOL)isShowingDialog {
  return dialog_ != nil;
}

- (BOOL)isUseAmPmTimeFormat {
  return useAmPmTimeFormat_;
}

- (RARELinearPanel *)createButtonPanelWithRAREiWidget:(id<RAREiWidget>)context {
  NSString *cspec, *rspec;
  cspec = @"FILL:[20dlu,d]:GROW";
  rspec = @"FILL:[15dlu,d]:GROW";
  RARELinearPanel *p = [[RARELinearPanel alloc] initWithRAREiWidget:context withBoolean:YES withNSString:rspec withNSString:cspec];
  int count = 0;
  RAREPushButtonWidget *w = nil;
  if (showNoneButton_) {
    w = [RAREAlertPanel createButtonWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.dateChooser.none"] withNSString:@"Rare.dateChooser.button" withRAREiActionListener:self];
    noneButton_ = [((RAREPushButtonWidget *) nil_chk(w)) getContainerComponent];
    [p addComponentWithRAREiPlatformComponent:noneButton_];
    count++;
  }
  if (showTodayButton_) {
    NSString *s;
    if (showTimeOnly_) {
      s = @"Rare.runtime.text.dateChooser.now";
    }
    else {
      s = @"Rare.runtime.text.dateChooser.today";
    }
    w = [RAREAlertPanel createButtonWithNSString:[RAREPlatform getResourceAsStringWithNSString:s] withNSString:@"Rare.dateChooser.button" withRAREiActionListener:self];
    todayButton_ = [((RAREPushButtonWidget *) nil_chk(w)) getContainerComponent];
    [p addComponentWithRAREiPlatformComponent:todayButton_];
    count++;
  }
  if (showOkButton_) {
    w = [RAREAlertPanel createButtonWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"Rare.runtime.text.dateChooser.done"] withNSString:@"Rare.dateChooser.button" withRAREiActionListener:self];
    okButton_ = [((RAREPushButtonWidget *) nil_chk(w)) getContainerComponent];
    [p addComponentWithRAREiPlatformComponent:okButton_];
    count++;
  }
  if (w != nil) {
    [w setBorderWithRAREiPlatformBorder:nil];
  }
  IOSIntArray *a = nil;
  if (count == 2) {
    a = [IOSIntArray arrayWithInts:(int[]){ 1, 2 } count:2];
  }
  else if (count == 3) {
    a = [IOSIntArray arrayWithInts:(int[]){ 1, 2, 3 } count:3];
  }
  if (a != nil) {
    [((RAREFormLayout *) nil_chk([p getFormLayout])) setColumnGroupsWithIntArray2:[IOSObjectArray arrayWithObjects:(id[]){ a } count:1 type:[IOSIntArray iosClass]]];
  }
  return p;
}

- (void)fireEvent {
  if (ignoreChangeEvent_) {
    return;
  }
  if ([((RAREEventListenerList *) nil_chk(listenerList_)) getListenerCountWithIOSClass:[IOSClass classWithProtocol:@protocol(RAREiChangeListener)]] > 0) {
    if (changeEvent_ == nil) {
      changeEvent_ = [[RAREChangeEvent alloc] initWithId:self];
    }
    [RAREUtils fireChangeEventWithRAREEventListenerList:listenerList_ withRAREChangeEvent:changeEvent_];
  }
}

- (void)setValueExWithJavaUtilCalendar:(JavaUtilCalendar *)cal {
  date_ = cal;
  stringValue_ = nil;
}

- (id<RAREiDataConverter>)getDateConverter {
  if (dateConverter_ == nil) {
    if (showTime_) {
      if (showTimeOnly_) {
        dateConverter_ = [[RARETimeConverter alloc] init];
      }
      else {
        dateConverter_ = [[RAREDateTimeConverter alloc] init];
      }
    }
    else {
      dateConverter_ = [[RAREDateConverter alloc] init];
    }
  }
  return dateConverter_;
}

- (void)copyAllFieldsTo:(RAREaDateViewManager *)other {
  [super copyAllFieldsTo:other];
  other->buttonPanel_ = buttonPanel_;
  other->changeEvent_ = changeEvent_;
  other->converterContext_ = converterContext_;
  other->date_ = date_;
  other->dateConverter_ = dateConverter_;
  other->dialog_ = dialog_;
  other->dialogTitle_ = dialogTitle_;
  other->endDate_ = endDate_;
  other->ignoreChangeEvent_ = ignoreChangeEvent_;
  other->listenerList_ = listenerList_;
  other->maxDate_ = maxDate_;
  other->minDate_ = minDate_;
  other->noneButton_ = noneButton_;
  other->okButton_ = okButton_;
  other->showCalendar_ = showCalendar_;
  other->showNoneButton_ = showNoneButton_;
  other->showOkButton_ = showOkButton_;
  other->showTime_ = showTime_;
  other->showTimeOnly_ = showTimeOnly_;
  other->showTodayButton_ = showTodayButton_;
  other->showWeekNumbers_ = showWeekNumbers_;
  other->stringValue_ = stringValue_;
  other->todayButton_ = todayButton_;
  other->useAmPmTimeFormat_ = useAmPmTimeFormat_;
  other->validationDate_ = validationDate_;
  other->valueSet_ = valueSet_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getButtonPanelWithRAREiWidget:", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getDatePickerComponent", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getDialogTitle", NULL, "LNSString", 0x1, NULL },
    { "getEndDate", NULL, "LJavaUtilDate", 0x1, NULL },
    { "getStartValue", NULL, "LJavaUtilDate", 0x1, NULL },
    { "getValue", NULL, "LJavaUtilDate", 0x1, NULL },
    { "getValueAsString", NULL, "LJavaLangCharSequence", 0x1, NULL },
    { "isIgnoreChangeEvent", NULL, "Z", 0x1, NULL },
    { "isShowCalendar", NULL, "Z", 0x1, NULL },
    { "isShowOkButton", NULL, "Z", 0x1, NULL },
    { "isShowSpinners", NULL, "Z", 0x1, NULL },
    { "isShowTimeOnly", NULL, "Z", 0x1, NULL },
    { "isShowingDialog", NULL, "Z", 0x1, NULL },
    { "isUseAmPmTimeFormat", NULL, "Z", 0x1, NULL },
    { "createButtonPanelWithRAREiWidget:", NULL, "LRARELinearPanel", 0x4, NULL },
    { "fireEvent", NULL, "V", 0x4, NULL },
    { "setValueExWithJavaUtilCalendar:", NULL, "V", 0x4, NULL },
    { "getDateConverter", NULL, "LRAREiDataConverter", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "date_", NULL, 0x4, "LJavaUtilCalendar" },
    { "endDate_", NULL, 0x4, "LJavaUtilCalendar" },
    { "listenerList_", NULL, 0x4, "LRAREEventListenerList" },
    { "useAmPmTimeFormat_", NULL, 0x4, "Z" },
    { "buttonPanel_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "changeEvent_", NULL, 0x4, "LRAREChangeEvent" },
    { "converterContext_", NULL, 0x4, "LNSObject" },
    { "dateConverter_", NULL, 0x4, "LRAREiDataConverter" },
    { "dialog_", NULL, 0x4, "LRAREAlertPanel" },
    { "dialogTitle_", NULL, 0x4, "LNSString" },
    { "ignoreChangeEvent_", NULL, 0x4, "Z" },
    { "maxDate_", NULL, 0x4, "LJavaUtilCalendar" },
    { "minDate_", NULL, 0x4, "LJavaUtilCalendar" },
    { "noneButton_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "okButton_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "showCalendar_", NULL, 0x4, "Z" },
    { "showNoneButton_", NULL, 0x4, "Z" },
    { "showOkButton_", NULL, 0x4, "Z" },
    { "showTime_", NULL, 0x4, "Z" },
    { "showTimeOnly_", NULL, 0x4, "Z" },
    { "showTodayButton_", NULL, 0x4, "Z" },
    { "showWeekNumbers_", NULL, 0x4, "Z" },
    { "stringValue_", NULL, 0x4, "LJavaLangCharSequence" },
    { "todayButton_", NULL, 0x4, "LRAREiPlatformComponent" },
    { "validationDate_", NULL, 0x4, "LJavaUtilCalendar" },
    { "valueSet_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _RAREaDateViewManager = { "aDateViewManager", "com.appnativa.rare.ui.calendar", NULL, 0x401, 18, methods, 26, fields, 0, NULL};
  return &_RAREaDateViewManager;
}

@end
