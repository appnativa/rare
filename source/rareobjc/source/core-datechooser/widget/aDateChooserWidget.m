//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-datechooser/com/appnativa/rare/widget/aDateChooserWidget.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/DateContext.h"
#include "com/appnativa/rare/converters/DateTimeConverter.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/spot/DateChooser.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/aComboBoxComponent.h"
#include "com/appnativa/rare/ui/aWidgetListener.h"
#include "com/appnativa/rare/ui/calendar/DateButton.h"
#include "com/appnativa/rare/ui/calendar/DateComboBox.h"
#include "com/appnativa/rare/ui/calendar/DatePanel.h"
#include "com/appnativa/rare/ui/calendar/DateViewManager.h"
#include "com/appnativa/rare/ui/calendar/iDateViewManager.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/event/iPopupMenuListener.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/painter/PainterHolder.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/widget/DateChooserWidget.h"
#include "com/appnativa/rare/widget/aDateChooserWidget.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTDateTime.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/util/FormatException.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/SimpleDateFormatEx.h"
#include "java/lang/Character.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"

@implementation RAREaDateChooserWidget

- (id)initWithRAREiContainer:(id<RAREiContainer>)parent {
  if (self = [super initWithRAREiContainer:parent]) {
    widgetType_ = [RAREiWidget_WidgetTypeEnum DateChooser];
  }
  return self;
}

- (void)addActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  [((id<RAREiDateViewManager>) nil_chk(dateViewManager_)) addActionListenerWithRAREiActionListener:l];
}

- (void)addPopupMenuListenerWithRAREiPopupMenuListener:(id<RAREiPopupMenuListener>)l {
  if ([(id) dataComponent_ isKindOfClass:[RAREDateComboBox class]]) {
    [((RAREDateComboBox *) check_class_cast(dataComponent_, [RAREDateComboBox class])) addPopupMenuListenerWithRAREiPopupMenuListener:l];
  }
}

- (void)clearContents {
  [super clearContents];
  [self setValueWithId:(JavaUtilDate *) check_class_cast(nil, [JavaUtilDate class])];
}

- (void)configureWithRARESPOTDateChooser:(RARESPOTDateChooser *)cfg {
  id<RAREiPlatformComponent> comp = nil;
  switch ([((RARESPOTDateChooser_CDisplayType *) nil_chk(((RARESPOTDateChooser *) nil_chk(cfg))->displayType_)) intValue]) {
    case RARESPOTDateChooser_CDisplayType_single_calendar:
    comp = [self createSinglePanelWithRARESPOTDateChooser:cfg];
    break;
    case RARESPOTDateChooser_CDisplayType_multiple_calendar:
    comp = [self createMultiPanelWithRARESPOTDateChooser:cfg];
    break;
    case RARESPOTDateChooser_CDisplayType_button:
    comp = [self createButtonWithRARESPOTDateChooser:cfg];
    break;
    default:
    comp = [self createComboBoxWithRARESPOTDateChooser:cfg];
    break;
  }
  dataComponent_ = formComponent_ = comp;
  if (![RAREPlatform isTouchDevice]) {
    if (![((SPOTBoolean *) nil_chk(cfg->focusPainted_)) spot_valueWasSet] || [cfg->focusPainted_ booleanValue]) {
      [self setFocusPaintedWithBoolean:YES];
    }
  }
  [self configureWithRARESPOTWidget:cfg withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:YES];
  if ([(id) comp isKindOfClass:[RAREaComboBoxComponent class]]) {
    [((RAREaComboBoxComponent *) check_class_cast(comp, [RAREaComboBoxComponent class])) configurationCompletedWithRAREaWidget:self withRARESPOTWidget:cfg];
  }
  [self fireConfigureEventWithRARESPOTWidget:cfg withNSString:[RAREiConstants EVENT_CONFIGURE]];
}

- (void)configureWithRARESPOTWidget:(RARESPOTWidget *)cfg {
  [self configureWithRARESPOTDateChooser:(RARESPOTDateChooser *) check_class_cast(cfg, [RARESPOTDateChooser class])];
}

+ (RAREDateChooserWidget *)createWithRAREiContainer:(id<RAREiContainer>)parent
                            withRARESPOTDateChooser:(RARESPOTDateChooser *)cfg {
  RAREDateChooserWidget *dc = [[RAREDateChooserWidget alloc] initWithRAREiContainer:parent];
  [dc configureWithRARESPOTDateChooser:cfg];
  return dc;
}

- (void)dispose {
  [super dispose];
  if (dateViewManager_ != nil) {
    [dateViewManager_ dispose];
    dateViewManager_ = nil;
  }
}

- (void)removeActionListenerWithRAREiActionListener:(id<RAREiActionListener>)l {
  [((id<RAREiDateViewManager>) nil_chk(dateViewManager_)) removeActionListenerWithRAREiActionListener:l];
}

- (void)removePopupMenuListenerWithRAREiPopupMenuListener:(id<RAREiPopupMenuListener>)l {
  if ([(id) dataComponent_ isKindOfClass:[RAREDateComboBox class]]) {
    [((RAREDateComboBox *) check_class_cast(dataComponent_, [RAREDateComboBox class])) removePopupMenuListenerWithRAREiPopupMenuListener:l];
  }
}

- (void)setDateWithJavaUtilDate:(JavaUtilDate *)date {
  [((id<RAREiDateViewManager>) nil_chk(dateViewManager_)) setDateWithJavaUtilDate:date];
}

- (BOOL)setDisplayedMonthWithInt:(int)year
                         withInt:(int)month
                         withInt:(int)index {
  return NO;
}

- (void)setMaxDateWithJavaUtilCalendar:(JavaUtilCalendar *)date {
  [self setMinMaxDateWithJavaUtilCalendar:date withBoolean:NO];
}

- (void)setMaxDateWithJavaUtilDate:(JavaUtilDate *)date {
  if (date == nil) {
    [self setMinDateWithJavaUtilCalendar:(JavaUtilCalendar *) check_class_cast(nil, [JavaUtilCalendar class])];
  }
  else {
    JavaUtilCalendar *cal = [JavaUtilCalendar getInstance];
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:date];
    [self setMaxDateWithJavaUtilCalendar:cal];
  }
}

- (void)setMinDateWithJavaUtilCalendar:(JavaUtilCalendar *)date {
  [self setMinMaxDateWithJavaUtilCalendar:date withBoolean:YES];
}

- (void)setMinDateWithJavaUtilDate:(JavaUtilDate *)date {
  if (date == nil) {
    [self setMinDateWithJavaUtilCalendar:(JavaUtilCalendar *) check_class_cast(nil, [JavaUtilCalendar class])];
  }
  else {
    JavaUtilCalendar *cal = [JavaUtilCalendar getInstance];
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:date];
    [self setMinDateWithJavaUtilCalendar:cal];
  }
}

- (void)setValueWithId:(id)value {
  if ([value isKindOfClass:[RARERenderableDataItem class]]) {
    value = [((RARERenderableDataItem *) check_class_cast(value, [RARERenderableDataItem class])) getValue];
  }
  if ([value isKindOfClass:[JavaUtilDate class]]) {
    [self setDateWithJavaUtilDate:(JavaUtilDate *) check_class_cast(value, [JavaUtilDate class])];
  }
  else if ([value isKindOfClass:[JavaUtilCalendar class]]) {
    [self setDateWithJavaUtilDate:[((JavaUtilCalendar *) check_class_cast(value, [JavaUtilCalendar class])) getTime]];
  }
  else if (value != nil) {
    [self setValueAsStringWithNSString:[value description]];
  }
}

- (void)setValueAsStringWithNSString:(NSString *)value {
  if ((value == nil) || ([value sequenceLength] == 0)) {
    return;
  }
  JavaUtilDate *date;
  if (![JavaLangCharacter isDigitWithChar:[((NSString *) nil_chk(value)) charAtWithInt:0]]) {
    date = [RAREUTHelper createDateWithNSString:value];
  }
  else {
    @try {
      date = [((JavaTextDateFormat *) nil_chk([((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultDateContext])) getItemFormat])) parseWithNSString:value];
    }
    @catch (JavaTextParseException *ex) {
      @throw [[RAREUTFormatException alloc] initWithJavaLangException:ex];
    }
  }
  [self setValueWithId:date];
}

- (JavaUtilCalendar *)getCalendar {
  id o = [self getSelection];
  if (([o isKindOfClass:[JavaUtilCalendar class]]) || (o == nil)) {
    return (JavaUtilCalendar *) check_class_cast(o, [JavaUtilCalendar class]);
  }
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[JavaUtilDate class]]] isInstance:o]) {
    o = IOSObjectArray_Get(nil_chk(o), 0);
  }
  if ([o isKindOfClass:[JavaUtilDate class]]) {
    JavaUtilCalendar *c = [JavaUtilCalendar getInstance];
    [((JavaUtilCalendar *) nil_chk(c)) setTimeWithJavaUtilDate:(JavaUtilDate *) check_class_cast(o, [JavaUtilDate class])];
    return c;
  }
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[JavaUtilCalendar class]]] isInstance:o]) {
    return IOSObjectArray_Get(nil_chk(o), 0);
  }
  return (JavaUtilCalendar *) check_class_cast(o, [JavaUtilCalendar class]);
}

- (JavaUtilDate *)getDate {
  id o = [self getSelection];
  if ((o == nil) || ([o isKindOfClass:[JavaUtilDate class]])) {
    return (JavaUtilDate *) check_class_cast(o, [JavaUtilDate class]);
  }
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[JavaUtilDate class]]] isInstance:o]) {
    o = IOSObjectArray_Get(nil_chk(o), 0);
  }
  if ([o isKindOfClass:[JavaUtilCalendar class]]) {
    return [((JavaUtilCalendar *) check_class_cast(o, [JavaUtilCalendar class])) getTime];
  }
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[JavaUtilCalendar class]]] isInstance:o]) {
    return [((JavaUtilCalendar *) IOSObjectArray_Get(nil_chk(o), 0)) getTime];
  }
  return (JavaUtilDate *) check_class_cast(o, [JavaUtilDate class]);
}

- (id)getHTTPFormValue {
  id o = [self getSelection];
  if ([o isKindOfClass:[JavaUtilDate class]]) {
    return [((JavaTextDateFormat *) nil_chk([((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultDateContext])) getItemFormat])) formatWithJavaUtilDate:(JavaUtilDate *) check_class_cast(o, [JavaUtilDate class])];
  }
  else if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[JavaUtilDate class]]] isInstance:o]) {
    return [self toStringArrayWithJavaUtilDateArray:(IOSObjectArray *) check_class_cast(o, [IOSObjectArray class])];
  }
  return nil;
}

- (id)getSelection {
  return [((id<RAREiDateViewManager>) nil_chk(dateViewManager_)) getValue];
}

- (NSString *)getSelectionAsString {
  id o = [self getSelection];
  if ([o isKindOfClass:[JavaUtilDate class]]) {
    return [((JavaTextDateFormat *) nil_chk([((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultDateContext])) getItemFormat])) formatWithJavaUtilDate:(JavaUtilDate *) check_class_cast(o, [JavaUtilDate class])];
  }
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[JavaUtilDate class]]] isInstance:o]) {
    JavaTextDateFormat *f = [((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultDateContext])) getItemFormat];
    IOSObjectArray *a = (IOSObjectArray *) check_class_cast(o, [IOSObjectArray class]);
    int len = (int) [((IOSObjectArray *) nil_chk(a)) count];
    JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
    if (len == 0) {
      return @"";
    }
    else if (len == 1) {
      return [NSString stringWithFormat:@"%@\x0d\n", [((JavaTextDateFormat *) nil_chk(f)) formatWithJavaUtilDate:IOSObjectArray_Get(a, 0)]];
    }
    else {
      for (int i = 0; i < len; i++) {
        (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[((JavaTextDateFormat *) nil_chk(f)) formatWithJavaUtilDate:IOSObjectArray_Get(a, i)]])) appendWithNSString:@"\x0d\n"];
      }
      return [sb description];
    }
  }
  return nil;
}

- (IOSObjectArray *)getSelectionsAsStrings {
  id o = [self getSelection];
  if ([o isKindOfClass:[JavaUtilDate class]]) {
    return [IOSObjectArray arrayWithObjects:(id[]){ [((JavaTextDateFormat *) nil_chk([((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultDateContext])) getItemFormat])) formatWithJavaUtilDate:(JavaUtilDate *) check_class_cast(o, [JavaUtilDate class])] } count:1 type:[IOSClass classWithClass:[NSString class]]];
  }
  if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[JavaUtilDate class]]] isInstance:o]) {
    return [self toStringArrayWithJavaUtilDateArray:(IOSObjectArray *) check_class_cast(o, [IOSObjectArray class])];
  }
  return nil;
}

- (NSString *)getValueAsString {
  return [self getSelectionAsString];
}

- (void)configureWithRAREiDateViewManager:(id<RAREiDateViewManager>)dvm
                  withRARESPOTDateChooser:(RARESPOTDateChooser *)cfg {
  JavaUtilCalendar *cal = [((SPOTDateTime *) nil_chk(((RARESPOTDateChooser *) nil_chk(cfg))->minValue_)) getCalendar];
  if (cal != nil) {
    [((id<RAREiDateViewManager>) nil_chk(dvm)) setMinDateWithJavaUtilCalendar:cal];
  }
  cal = [((SPOTDateTime *) nil_chk(cfg->maxValue_)) getCalendar];
  if (cal != nil) {
    [((id<RAREiDateViewManager>) nil_chk(dvm)) setMaxDateWithJavaUtilCalendar:cal];
  }
  cal = [((SPOTDateTime *) nil_chk(cfg->value_)) getCalendar];
  RAREUTSimpleDateFormatEx *idf = nil;
  RAREUTSimpleDateFormatEx *df = nil;
  NSString *s = [((SPOTPrintableString *) nil_chk(cfg->format_)) getValue];
  if (s != nil) {
    @try {
      int n = [s indexOf:'|'];
      if (n == -1) {
        df = idf = [[RAREUTSimpleDateFormatEx alloc] initWithNSString:s];
      }
      else {
        idf = [[RAREUTSimpleDateFormatEx alloc] initWithNSString:[s substring:0 endIndex:n]];
        df = [[RAREUTSimpleDateFormatEx alloc] initWithNSString:[s substring:n + 1]];
      }
      RAREDateContext *ctx = [[RAREDateContext alloc] initWithJavaTextDateFormat:idf withJavaTextDateFormat:df];
      [((id<RAREiDateViewManager>) nil_chk(dvm)) setConverterWithRAREiDataConverter:[[RAREDateTimeConverter alloc] init]];
      [dvm setConverterContextWithId:ctx];
    }
    @catch (JavaLangException *e) {
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    }
  }
  if (cal != nil) {
    [((id<RAREiDateViewManager>) nil_chk(dvm)) setDateWithJavaUtilDate:[cal getTime]];
  }
  [((id<RAREiDateViewManager>) nil_chk(dvm)) setShowTodayButtonWithBoolean:[((SPOTBoolean *) nil_chk(cfg->showTodayButton_)) booleanValue]];
  [dvm setShowOKButtonWithBoolean:[((SPOTBoolean *) nil_chk(cfg->showOkButton_)) booleanValue]];
  [dvm setShowNoneButtonWithBoolean:[((SPOTBoolean *) nil_chk(cfg->showNoneButton_)) booleanValue]];
  [dvm setShowTimeWithBoolean:[((SPOTBoolean *) nil_chk(cfg->showTime_)) booleanValue]];
  [dvm setUseAmPmTimeFormatWithBoolean:[@"true" isEqual:[cfg->showTime_ spot_getAttributeWithNSString:@"ampmFormat"]]];
  [dvm setShowTimeOnlyWithBoolean:[@"true" isEqual:[cfg->showTime_ spot_getAttributeWithNSString:@"timeOnlyChooser"]]];
  if ((df != nil) && ([((SPOTPrintableString *) nil_chk(cfg->valueContext_)) getValue] != nil)) {
    if ([((SPOTPrintableString *) nil_chk(cfg->converterClass_)) spot_getValue] != nil) {
      id<RAREiDataConverter> cvt;
      @try {
        cvt = [((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDataConverterWithIOSClass:[((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDataConverterClassWithNSString:[cfg->converterClass_ getValue]]];
      }
      @catch (JavaLangClassNotFoundException *e) {
        @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
      }
      [dvm setConverterWithRAREiDataConverter:cvt];
      if ([cfg->valueContext_ getValue] != nil) {
        [dvm setConverterContextWithId:[((id<RAREiDataConverter>) nil_chk(cvt)) createContextWithRAREiWidget:self withNSString:[cfg->valueContext_ getValue]]];
      }
    }
    else {
      RAREDateTimeConverter *converter = [[RAREDateTimeConverter alloc] init];
      @try {
        [dvm setConverterWithRAREiDataConverter:converter];
        [dvm setConverterContextWithId:[[RAREUTSimpleDateFormatEx alloc] initWithNSString:[cfg->valueContext_ getValue]]];
      }
      @catch (JavaLangException *e) {
        [self handleExceptionWithJavaLangThrowable:e];
      }
    }
  }
  [dvm finishConfiguringWithRAREiWidget:self];
}

- (void)configurePopupButtonWithRAREiActionComponent:(id<RAREiActionComponent>)ac
                             withRARESPOTDateChooser:(RARESPOTDateChooser *)cfg {
  RAREPainterHolder *p = [RAREPainterHolder createWithRAREiWidget:self withISPOTElement:((RARESPOTDateChooser *) nil_chk(cfg))->showPopupButton_];
  if (p != nil) {
    if ([p isBackgroundPaintEnabled]) {
      id<RAREiPlatformComponentPainter> cp = [((id<RAREiActionComponent>) nil_chk(ac)) getComponentPainter];
      if (cp == nil) {
        cp = [[RAREUIComponentPainter alloc] init];
      }
      [((id<RAREiPlatformComponentPainter>) nil_chk(cp)) setPainterHolderWithRAREPainterHolder:p];
      [ac setComponentPainterWithRAREiPlatformComponentPainter:cp];
    }
    if ([p getNormalIcon] != nil) {
      [((id<RAREiActionComponent>) nil_chk(ac)) setIconWithRAREiPlatformIcon:[p getNormalIcon]];
    }
    if ([p getDisabledIcon] != nil) {
      [((id<RAREiActionComponent>) nil_chk(ac)) setDisabledIconWithRAREiPlatformIcon:[p getDisabledIcon]];
    }
    if ([p getPressedIcon] != nil) {
      [((id<RAREiActionComponent>) nil_chk(ac)) setPressedIconWithRAREiPlatformIcon:[p getPressedIcon]];
    }
  }
}

- (id<RAREiActionComponent>)createButtonWithRARESPOTDateChooser:(RARESPOTDateChooser *)cfg {
  dateViewManager_ = [[RAREDateViewManager alloc] init];
  [self configureWithRAREiDateViewManager:dateViewManager_ withRARESPOTDateChooser:cfg];
  return [[RAREDateButton alloc] initWithRAREaDateViewManager:(RAREDateViewManager *) check_class_cast(dateViewManager_, [RAREDateViewManager class])];
}

- (id<RAREiPlatformComponent>)createComboBoxWithRARESPOTDateChooser:(RARESPOTDateChooser *)cfg {
  RAREDateComboBox *comp = [[RAREDateComboBox alloc] initWithRAREiWidget:self];
  dateViewManager_ = [comp getDateViewManager];
  [comp setUseDialogButtonWithBoolean:[((SPOTBoolean *) nil_chk(((RARESPOTDateChooser *) nil_chk(cfg))->showPopupAsDialog_)) booleanValue]];
  [comp setShowPopupAsDialogWithBoolean:[cfg->showPopupAsDialog_ booleanValue]];
  [comp setEditableWithBoolean:[((SPOTBoolean *) nil_chk(cfg->editable_)) booleanValue]];
  if (![((SPOTBoolean *) nil_chk(cfg->showPopupButton_)) booleanValue]) {
    [comp setButtonVisibleWithBoolean:NO];
  }
  else {
    RAREPainterHolder *p = [RAREPainterHolder createWithRAREiWidget:self withISPOTElement:cfg->showPopupButton_];
    [comp setButtonPainterHolderWithRAREPainterHolder:p];
  }
  [self configureWithRAREiDateViewManager:dateViewManager_ withRARESPOTDateChooser:cfg];
  [comp setContent];
  return comp;
}

- (id<RAREiPlatformComponent>)createMultiPanelWithRARESPOTDateChooser:(RARESPOTDateChooser *)cfg {
  return [self createSinglePanelWithRARESPOTDateChooser:cfg];
}

- (id<RAREiPlatformComponent>)createSinglePanelWithRARESPOTDateChooser:(RARESPOTDateChooser *)cfg {
  dateViewManager_ = [[RAREDateViewManager alloc] init];
  [self configureWithRAREiDateViewManager:dateViewManager_ withRARESPOTDateChooser:cfg];
  RAREDatePanel *comp = [[RAREDatePanel alloc] initWithRAREiWidget:self withRAREaDateViewManager:(RAREDateViewManager *) check_class_cast(dateViewManager_, [RAREDateViewManager class])];
  [comp setContent];
  return comp;
}

- (void)initializeListenersWithRAREaWidgetListener:(RAREaWidgetListener *)l {
  [super initializeListenersWithRAREaWidgetListener:l];
  if (l != nil) {
    if ([l isChangeEventEnabled]) {
      [((id<RAREiDateViewManager>) nil_chk(dateViewManager_)) addChangeListenerWithRAREiChangeListener:l];
    }
    if ([l isExpansionEventsEnabled]) {
      [self addPopupMenuListenerWithRAREiPopupMenuListener:l];
    }
  }
}

- (void)uninitializeListenersWithRAREaWidgetListener:(RAREaWidgetListener *)l {
  [super uninitializeListenersWithRAREaWidgetListener:l];
  if (l != nil) {
    if (l != nil) {
      [((id<RAREiDateViewManager>) nil_chk(dateViewManager_)) removeChangeListenerWithRAREiChangeListener:l];
    }
    [self removeActionListenerWithRAREiActionListener:l];
    [self removePopupMenuListenerWithRAREiPopupMenuListener:l];
  }
}

- (void)setMinMaxDateWithJavaUtilCalendar:(JavaUtilCalendar *)date
                              withBoolean:(BOOL)min {
  if (min) {
    [((id<RAREiDateViewManager>) nil_chk(dateViewManager_)) setMinDateWithJavaUtilCalendar:date];
  }
  else {
    [((id<RAREiDateViewManager>) nil_chk(dateViewManager_)) setMaxDateWithJavaUtilCalendar:date];
  }
}

- (IOSObjectArray *)toStringArrayWithJavaUtilDateArray:(IOSObjectArray *)a {
  if (a == nil) {
    return nil;
  }
  JavaTextDateFormat *f = [((RAREDateContext *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([self getAppContext])) getDefaultDateContext])) getItemFormat];
  int len = (int) [((IOSObjectArray *) nil_chk(a)) count];
  IOSObjectArray *s = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[NSString class]]];
  for (int i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(s, i, [((JavaTextDateFormat *) nil_chk(f)) formatWithJavaUtilDate:IOSObjectArray_Get(a, i)]);
  }
  return s;
}

- (void)copyAllFieldsTo:(RAREaDateChooserWidget *)other {
  [super copyAllFieldsTo:other];
  other->dateViewManager_ = dateViewManager_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "createWithRAREiContainer:withRARESPOTDateChooser:", NULL, "LRAREDateChooserWidget", 0x9, NULL },
    { "setDisplayedMonthWithInt:withInt:withInt:", NULL, "Z", 0x1, NULL },
    { "getCalendar", NULL, "LJavaUtilCalendar", 0x1, NULL },
    { "getDate", NULL, "LJavaUtilDate", 0x1, NULL },
    { "getHTTPFormValue", NULL, "LNSObject", 0x1, NULL },
    { "getSelection", NULL, "LNSObject", 0x1, NULL },
    { "getSelectionAsString", NULL, "LNSString", 0x1, NULL },
    { "getSelectionsAsStrings", NULL, "LIOSObjectArray", 0x1, NULL },
    { "getValueAsString", NULL, "LNSString", 0x1, NULL },
    { "configureWithRAREiDateViewManager:withRARESPOTDateChooser:", NULL, "V", 0x4, NULL },
    { "configurePopupButtonWithRAREiActionComponent:withRARESPOTDateChooser:", NULL, "V", 0x4, NULL },
    { "createButtonWithRARESPOTDateChooser:", NULL, "LRAREiActionComponent", 0x4, NULL },
    { "createComboBoxWithRARESPOTDateChooser:", NULL, "LRAREiPlatformComponent", 0x4, NULL },
    { "createMultiPanelWithRARESPOTDateChooser:", NULL, "LRAREiPlatformComponent", 0x4, NULL },
    { "createSinglePanelWithRARESPOTDateChooser:", NULL, "LRAREiPlatformComponent", 0x4, NULL },
    { "initializeListenersWithRAREaWidgetListener:", NULL, "V", 0x4, NULL },
    { "uninitializeListenersWithRAREaWidgetListener:", NULL, "V", 0x4, NULL },
    { "setMinMaxDateWithJavaUtilCalendar:withBoolean:", NULL, "V", 0x4, NULL },
    { "toStringArrayWithJavaUtilDateArray:", NULL, "LIOSObjectArray", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "dateViewManager_", NULL, 0x4, "LRAREiDateViewManager" },
  };
  static J2ObjcClassInfo _RAREaDateChooserWidget = { "aDateChooserWidget", "com.appnativa.rare.widget", NULL, 0x401, 19, methods, 1, fields, 0, NULL};
  return &_RAREaDateChooserWidget;
}

@end
