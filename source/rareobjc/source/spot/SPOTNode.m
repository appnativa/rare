//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../spot/src/com/appnativa/spot/SPOTNode.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/spot/SPOTException.h"
#include "com/appnativa/spot/SPOTNode.h"
#include "com/appnativa/spot/iSPOTConstants.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/IntList.h"
#include "com/appnativa/util/SNumber.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@implementation SPOTNode

static NSString * SPOTNode_keywordDefault_ = @"Default";
static NSString * SPOTNode_keywordDefinedBy_ = @"DefinedBy";
static NSString * SPOTNode_keywordManditory_ = @"Manditory";
static NSString * SPOTNode_keywordOptional_ = @"Optional";
static NSString * SPOTNode_keywordRange_ = @"Range";
static NSString * SPOTNode_keywordReference_ = @"Reference";
static NSString * SPOTNode_keyworkValue_ = @"Value";
static NSString * SPOTNode_lineSeparator_ = @"\n";
static IOSObjectArray * SPOTNode_theTypes_;
static NSString * SPOTNode_typeAny_ = @"Any";
static NSString * SPOTNode_typeBoolean_ = @"Boolean";
static NSString * SPOTNode_typeByteString_ = @"ByteString";
static NSString * SPOTNode_typeDate_ = @"Date";
static NSString * SPOTNode_typeDateTime_ = @"DateTime";
static NSString * SPOTNode_typeEnum_ = @"Enumerated";
static NSString * SPOTNode_typeExtends_ = @"Extends";
static NSString * SPOTNode_typeInteger_ = @"Integer";
static NSString * SPOTNode_typeOctetString_ = @"OctetString";
static NSString * SPOTNode_typePrintableString_ = @"PrintableString";
static NSString * SPOTNode_typeReal_ = @"Real";
static NSString * SPOTNode_typeRefine_ = @"Refine";
static NSString * SPOTNode_typeSequence_ = @"Sequence";
static NSString * SPOTNode_typeSet_ = @"Set";
static NSString * SPOTNode_typeTime_ = @"Time";
static NSString * SPOTNode_errAlreadyDefined_ = @"The element [%s] has been previously defined";
static NSString * SPOTNode_errInvalid_ = @"Invalid SPOT document";
static NSString * SPOTNode_errInvalidName_ = @"The [%s] is an invalid element name/type";
static NSString * SPOTNode_errInvalidSize_ = @"The format of the 'Range' modifier is invalid for [%s]";
static NSString * SPOTNode_errMissingBy_ = @"The 'BY' is required after 'DEFINED' for [%s]";
static NSString * SPOTNode_errMissingCurlyEnd_ = @"The closing '}' for [%s] is missing";
static NSString * SPOTNode_errMissingCurlyStart_ = @"The opening '{' for [%s] is missing";
static NSString * SPOTNode_errMissingType_ = @"The type being extended/refined is missing for [%s]";
static NSString * SPOTNode_errMissingValue_ = @"The value for the [%s] attriobute is missing";
static NSString * SPOTNode_errWrongEndTag_ = @"The tag </%s> was found when the tag </%s> was expected";
static IOSCharArray * SPOTNode_padding_;
static NSString * SPOTNode_spanCode_ = @"code";
static NSString * SPOTNode_spanComment_ = @"comment";
static NSString * SPOTNode_spanDescription_ = @"description";
static NSString * SPOTNode_spanType_ = @"keywordtype";
static NSString * SPOTNode_spanUserType_ = @"keyword";
static IOSCharArray * SPOTNode_quoteChar_;
static id<JavaUtilList> SPOTNode_lcTypes_;
static IOSCharArray * SPOTNode_colonColonEq_;
static IOSCharArray * SPOTNode_badChars_;

+ (NSString *)keywordDefault {
  return SPOTNode_keywordDefault_;
}

+ (NSString *)keywordDefinedBy {
  return SPOTNode_keywordDefinedBy_;
}

+ (NSString *)keywordManditory {
  return SPOTNode_keywordManditory_;
}

+ (NSString *)keywordOptional {
  return SPOTNode_keywordOptional_;
}

+ (NSString *)keywordRange {
  return SPOTNode_keywordRange_;
}

+ (NSString *)keywordReference {
  return SPOTNode_keywordReference_;
}

+ (NSString *)keyworkValue {
  return SPOTNode_keyworkValue_;
}

+ (NSString *)lineSeparator {
  return SPOTNode_lineSeparator_;
}

+ (IOSObjectArray *)theTypes {
  return SPOTNode_theTypes_;
}

+ (NSString *)typeAny {
  return SPOTNode_typeAny_;
}

+ (NSString *)typeBoolean {
  return SPOTNode_typeBoolean_;
}

+ (NSString *)typeByteString {
  return SPOTNode_typeByteString_;
}

+ (NSString *)typeDate {
  return SPOTNode_typeDate_;
}

+ (NSString *)typeDateTime {
  return SPOTNode_typeDateTime_;
}

+ (NSString *)typeEnum {
  return SPOTNode_typeEnum_;
}

+ (NSString *)typeExtends {
  return SPOTNode_typeExtends_;
}

+ (NSString *)typeInteger {
  return SPOTNode_typeInteger_;
}

+ (NSString *)typeOctetString {
  return SPOTNode_typeOctetString_;
}

+ (NSString *)typePrintableString {
  return SPOTNode_typePrintableString_;
}

+ (NSString *)typeReal {
  return SPOTNode_typeReal_;
}

+ (NSString *)typeRefine {
  return SPOTNode_typeRefine_;
}

+ (NSString *)typeSequence {
  return SPOTNode_typeSequence_;
}

+ (NSString *)typeSet {
  return SPOTNode_typeSet_;
}

+ (NSString *)typeTime {
  return SPOTNode_typeTime_;
}

+ (NSString *)errAlreadyDefined {
  return SPOTNode_errAlreadyDefined_;
}

+ (NSString *)errInvalid {
  return SPOTNode_errInvalid_;
}

+ (NSString *)errInvalidName {
  return SPOTNode_errInvalidName_;
}

+ (NSString *)errInvalidSize {
  return SPOTNode_errInvalidSize_;
}

+ (NSString *)errMissingBy {
  return SPOTNode_errMissingBy_;
}

+ (NSString *)errMissingCurlyEnd {
  return SPOTNode_errMissingCurlyEnd_;
}

+ (NSString *)errMissingCurlyStart {
  return SPOTNode_errMissingCurlyStart_;
}

+ (NSString *)errMissingType {
  return SPOTNode_errMissingType_;
}

+ (NSString *)errMissingValue {
  return SPOTNode_errMissingValue_;
}

+ (NSString *)errWrongEndTag {
  return SPOTNode_errWrongEndTag_;
}

+ (IOSCharArray *)padding {
  return SPOTNode_padding_;
}

+ (int)readBufferLen {
  return SPOTNode_readBufferLen;
}

+ (NSString *)spanCode {
  return SPOTNode_spanCode_;
}

+ (void)setSpanCode:(NSString *)spanCode {
  SPOTNode_spanCode_ = spanCode;
}

+ (NSString *)spanComment {
  return SPOTNode_spanComment_;
}

+ (void)setSpanComment:(NSString *)spanComment {
  SPOTNode_spanComment_ = spanComment;
}

+ (NSString *)spanDescription {
  return SPOTNode_spanDescription_;
}

+ (void)setSpanDescription:(NSString *)spanDescription {
  SPOTNode_spanDescription_ = spanDescription;
}

+ (NSString *)spanType {
  return SPOTNode_spanType_;
}

+ (void)setSpanType:(NSString *)spanType {
  SPOTNode_spanType_ = spanType;
}

+ (NSString *)spanUserType {
  return SPOTNode_spanUserType_;
}

+ (void)setSpanUserType:(NSString *)spanUserType {
  SPOTNode_spanUserType_ = spanUserType;
}

+ (IOSCharArray *)quoteChar {
  return SPOTNode_quoteChar_;
}

+ (id<JavaUtilList>)lcTypes {
  return SPOTNode_lcTypes_;
}

+ (void)setLcTypes:(id<JavaUtilList>)lcTypes {
  SPOTNode_lcTypes_ = lcTypes;
}

+ (IOSCharArray *)colonColonEq {
  return SPOTNode_colonColonEq_;
}

+ (IOSCharArray *)badChars {
  return SPOTNode_badChars_;
}

- (id)init {
  if (self = [super init]) {
    isOptional_ = NO;
    isRefine_ = NO;
    isReference_ = NO;
    isReadOnly_ = NO;
    isProtected_ = NO;
    theDepth_ = 0;
    userMap_ = nil;
    writeXpos_ = 0;
    treePrefix_ = @"<p><img src=\"ftv2vertline.png\" alt=\"|\" width=16 height=22 /><img src=\"ftv2node.png\" alt=\"o\" width=16 height=22 /><img src=\"ftv2doc.png\" alt=\"*\" width=24 height=22 /><a class=\"el\" href=\"";
  }
  return self;
}

- (id)initWithJavaIoReader:(JavaIoReader *)inArg {
  if (self = [super init]) {
    isOptional_ = NO;
    isRefine_ = NO;
    isReference_ = NO;
    isReadOnly_ = NO;
    isProtected_ = NO;
    theDepth_ = 0;
    userMap_ = nil;
    writeXpos_ = 0;
    treePrefix_ = @"<p><img src=\"ftv2vertline.png\" alt=\"|\" width=16 height=22 /><img src=\"ftv2node.png\" alt=\"o\" width=16 height=22 /><img src=\"ftv2doc.png\" alt=\"*\" width=24 height=22 /><a class=\"el\" href=\"";
    [self readWithJavaIoReader:inArg];
  }
  return self;
}

- (id)initWithNSString:(NSString *)name {
  if (self = [super init]) {
    isOptional_ = NO;
    isRefine_ = NO;
    isReference_ = NO;
    isReadOnly_ = NO;
    isProtected_ = NO;
    theDepth_ = 0;
    userMap_ = nil;
    writeXpos_ = 0;
    treePrefix_ = @"<p><img src=\"ftv2vertline.png\" alt=\"|\" width=16 height=22 /><img src=\"ftv2node.png\" alt=\"o\" width=16 height=22 /><img src=\"ftv2doc.png\" alt=\"*\" width=24 height=22 /><a class=\"el\" href=\"";
    elementName_ = name;
  }
  return self;
}

- (id)initWithNSString:(NSString *)name
          withNSString:(NSString *)type {
  if (self = [super init]) {
    isOptional_ = NO;
    isRefine_ = NO;
    isReference_ = NO;
    isReadOnly_ = NO;
    isProtected_ = NO;
    theDepth_ = 0;
    userMap_ = nil;
    writeXpos_ = 0;
    treePrefix_ = @"<p><img src=\"ftv2vertline.png\" alt=\"|\" width=16 height=22 /><img src=\"ftv2node.png\" alt=\"o\" width=16 height=22 /><img src=\"ftv2doc.png\" alt=\"*\" width=24 height=22 /><a class=\"el\" href=\"";
    elementName_ = name;
    elementType_ = type;
    if (type != nil) {
      elementTypeAsInt_ = [SPOTNode typeToIntWithNSString:elementType_];
    }
  }
  return self;
}

- (void)addElementWithSPOTNode:(SPOTNode *)element {
  if (childNodes_ == nil) {
    childNodes_ = [[JavaUtilArrayList alloc] initWithInt:50];
  }
  if (nameMap_ == nil) {
    nameMap_ = [[JavaUtilHashMap alloc] init];
  }
  if ([((JavaUtilHashMap *) nil_chk(nameMap_)) putWithId:((SPOTNode *) nil_chk(element))->elementName_ withId:element] != nil) {
    @throw [[SPOTException alloc] initWithNSString:SPOTNode_errAlreadyDefined_ withNSString:element->elementName_];
  }
  element->rootNode_ = rootNode_;
  element->theDepth_ = theDepth_ + 1;
  [((id<JavaUtilList>) nil_chk(childNodes_)) addWithId:element];
}

- (SPOTNode *)addElementWithNSString:(NSString *)name {
  SPOTNode *element = [[SPOTNode alloc] initWithNSString:name];
  element->theDepth_ = theDepth_ + 1;
  [self addElementWithSPOTNode:element];
  return element;
}

- (SPOTNode *)addElementWithNSString:(NSString *)name
                        withNSString:(NSString *)type {
  SPOTNode *element = [[SPOTNode alloc] initWithNSString:name withNSString:type];
  element->theDepth_ = theDepth_ + 1;
  [self addElementWithSPOTNode:element];
  return element;
}

- (BOOL)checkChoicesDefaultWithNSString:(NSString *)val {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(theChoices_)) count]; i++) {
    if ([((NSString *) IOSObjectArray_Get(theChoices_, i)) isEqual:val]) {
      return YES;
    }
  }
  return NO;
}

- (BOOL)checkEnumDefaultWithNSString:(NSString *)val {
  RAREUTSNumber *num = [[RAREUTSNumber alloc] init];
  if (![num setValueExWithNSString:val withBoolean:YES withBoolean:NO]) {
    return [self checkChoicesDefaultWithNSString:val];
  }
  if (![num isInteger]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(theChoices_)) count]; i++) {
    if (IOSIntArray_Get(nil_chk(theNumChoices_), i) == [num intValue]) {
      return YES;
    }
  }
  return NO;
}

- (void)dumpSyntaxExWithJavaUtilMap:(id<JavaUtilMap>)identifiers
                    withJavaUtilMap:(id<JavaUtilMap>)enums
                    withJavaUtilMap:(id<JavaUtilMap>)attributes {
  SPOTNode *x;
  NSString *name;
  SPOTNode *subtype;
  int len = (childNodes_ == nil) ? 0 : [childNodes_ size];
  for (int i = 0; i < len; i++) {
    x = [((id<JavaUtilList>) nil_chk(childNodes_)) getWithInt:i];
    name = ((SPOTNode *) nil_chk(x))->elementName_;
    if ((name != nil) && ([name sequenceLength] > 0)) {
      (void) [((id<JavaUtilMap>) nil_chk(identifiers)) putWithId:name withId:nil];
      subtype = [((SPOTNode *) nil_chk(x->rootNode_)) elementForWithNSString:x->elementType_];
      if (subtype != nil) {
        [self dumpPathNamesWithJavaUtilMap:identifiers withNSString:name withSPOTNode:subtype];
      }
    }
    if ([x hasAttributes]) {
      [((id<JavaUtilMap>) nil_chk(attributes)) putAllWithJavaUtilMap:x->theAttributes_];
    }
    if ([x isContainer]) {
      [x dumpSyntaxExWithJavaUtilMap:identifiers withJavaUtilMap:enums withJavaUtilMap:attributes];
    }
    else {
      if ([((NSString *) nil_chk(SPOTNode_typeEnum_)) equalsIgnoreCase:x->elementType_]) {
        for (int n = 0; n < (int) [((IOSObjectArray *) nil_chk(x->theChoices_)) count]; n++) {
          (void) [((id<JavaUtilMap>) nil_chk(enums)) putWithId:IOSObjectArray_Get(x->theChoices_, n) withId:nil];
        }
      }
    }
  }
}

- (SPOTNode *)elementAtWithInt:(int)pos {
  if ((childNodes_ == nil) || (pos < 0) || (pos > [childNodes_ size])) {
    return nil;
  }
  return [((id<JavaUtilList>) nil_chk(childNodes_)) getWithInt:pos];
}

- (SPOTNode *)elementForWithNSString:(NSString *)name {
  if ((nameMap_ == nil) || (name == nil)) {
    return nil;
  }
  return (SPOTNode *) check_class_cast([((JavaUtilHashMap *) nil_chk(nameMap_)) getWithId:name], [SPOTNode class]);
}

+ (int)findTypeWithNSString:(NSString *)type {
  return (type == nil) ? -1 : [((id<JavaUtilList>) nil_chk(SPOTNode_lcTypes_)) indexOfWithId:[type lowercaseString]];
}

- (void)fixReferences {
  SPOTNode *x;
  if ([self isContainer]) {
    for (int i = 0; i < [((id<JavaUtilList>) nil_chk(childNodes_)) size]; i++) {
      x = [childNodes_ getWithInt:i];
      if (!((SPOTNode *) nil_chk(x))->isReference_) {
        x->isReference_ = [self isAutoReferenceWithSPOTNode:x];
      }
      else {
        SPOTNode *xx = x->parentNode_;
        if ((xx != nil) && (xx->elementType_ != nil) && [xx->elementType_ equalsIgnoreCase:SPOTNode_typeSet_]) {
          x->isReference_ = NO;
        }
      }
      if ([x isContainer]) {
        [x fixReferences];
      }
    }
  }
}

- (int)indexOfWithNSString:(NSString *)name {
  return [self indexOfWithNSString:name withInt:0];
}

- (int)indexOfWithNSString:(NSString *)name
                   withInt:(int)start {
  int pos = -1;
  if (childNodes_ != nil) {
    long long int len = [childNodes_ size];
    SPOTNode *x = nil;
    if (start < 0) {
      start = 0;
    }
    for (int i = start; i < len; i++) {
      x = [childNodes_ getWithInt:i];
      if ([((NSString *) nil_chk(((SPOTNode *) nil_chk(x))->elementName_)) equalsIgnoreCase:name]) {
        pos = i;
        break;
      }
    }
  }
  return pos;
}

+ (NSString *)leftJustifyWithInt:(int)width
                    withNSString:(NSString *)s {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] initWithNSString:s];
  int lastspace = -1;
  int linestart = 0;
  int i = 0;
  while (i < [buf sequenceLength]) {
    if ([buf charAtWithInt:i] == ' ') {
      lastspace = i;
    }
    if ([buf charAtWithInt:i] == 0x000a) {
      lastspace = -1;
      linestart = i + 1;
    }
    if (i > ((linestart + width) - 1)) {
      if (lastspace != -1) {
        [buf setCharAtWithInt:lastspace withChar:0x000a];
        linestart = lastspace + 1;
        lastspace = -1;
      }
      else {
        (void) [buf insertWithInt:i withChar:'-'];
        (void) [buf insertWithInt:i withChar:0x000a];
        linestart = i + 2;
      }
    }
    i++;
  }
  return [buf description];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  BOOL html = NO;
  BOOL syntax = NO;
  BOOL index = NO;
  if ((int) [((IOSObjectArray *) nil_chk(args)) count] < 1) {
    args = [IOSObjectArray arrayWithLength:1 type:[IOSClass classWithClass:[NSString class]]];
    (void) IOSObjectArray_Set(args, 0, @"example.spot");
  }
  if ((int) [args count] > 1) {
    html = [@"-html" equalsIgnoreCase:IOSObjectArray_Get(args, 1)];
    syntax = [@"-syntax" equalsIgnoreCase:IOSObjectArray_Get(args, 1)];
    index = [@"-htmlindex" equalsIgnoreCase:IOSObjectArray_Get(args, 1)];
  }
  NSString *title = @"SPOT Document";
  if ((int) [args count] > 2) {
    title = IOSObjectArray_Get(args, 2);
  }
  SPOTNode *x = nil;
  @try {
    JavaIoFileReader *in = [[JavaIoFileReader alloc] initWithNSString:IOSObjectArray_Get(args, 0)];
    JavaIoOutputStreamWriter *out = [[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:[JavaLangSystem out]];
    x = [[SPOTNode alloc] init];
    [x readWithJavaIoReader:in];
    if (syntax) {
      [x dumpSyntax];
    }
    else if (index) {
      NSString *file = ((int) [args count] > 2) ? IOSObjectArray_Get(args, 2) : @"";
      title = ((int) [args count] > 3) ? IOSObjectArray_Get(args, 3) : nil;
      if (title == nil) {
        [x dumpIndexTreeWithNSString:file];
      }
      else {
        [x dumpIndexWithNSString:file withNSString:title];
      }
    }
    else {
      [x toStringWithJavaIoWriter:out withBoolean:html withNSString:title];
    }
    [out flush];
    [JavaLangSystem exitWithInt:0];
  }
  @catch (JavaLangException *ex) {
    @try {
      if (x != nil) {
        [((JavaIoPrintStream *) nil_chk([JavaLangSystem err])) printlnWithNSString:@"Parsed so far:"];
        [[JavaLangSystem err] printlnWithNSString:[x description]];
      }
    }
    @catch (JavaLangException *ex1) {
      [((JavaLangException *) nil_chk(ex1)) printStackTrace];
    }
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
    [JavaLangSystem exitWithInt:1];
  }
}

+ (void)newLineWithJavaIoWriter:(JavaIoWriter *)outArg {
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:SPOTNode_lineSeparator_];
}

- (void)readWithJavaIoReader:(JavaIoReader *)inArg {
  rootNode_ = self;
  [self readExWithJavaIoReader:inArg];
  [self fixReferences];
}

- (int)size {
  return (childNodes_ == nil) ? 0 : [childNodes_ size];
}

- (NSString *)description {
  JavaIoStringWriter *out = [[JavaIoStringWriter alloc] init];
  @try {
    [self toStringWithJavaIoWriter:out withBoolean:NO withNSString:@"SPOT Document"];
    [out flush];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [out description];
}

- (void)toStringWithJavaIoWriter:(JavaIoWriter *)outArg
                     withBoolean:(BOOL)html
                    withNSString:(NSString *)title {
  SPOTNode *x;
  if (html) {
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"<html><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\"/>"];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:[NSString stringWithFormat:@"<title>%@</title>", title]];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"<link href=\"doxygen.css\" rel=\"stylesheet\" type=\"text/css\"/>"];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"</head><body>"];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"<div class=\"maindox\">"];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
  }
  @try {
    if ([self isContainer]) {
      for (int i = 0; i < [((id<JavaUtilList>) nil_chk(childNodes_)) size]; i++) {
        x = [childNodes_ getWithInt:i];
        [self writeHeadingWithJavaIoWriter:outArg withNSString:((SPOTNode *) nil_chk(x))->elementName_ withBoolean:html];
        if (x->theDescription_ != nil) {
          [self writeDescriptionWithJavaIoWriter:outArg withNSString:x->theDescription_ withBoolean:html];
          [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
        }
        if (html) {
          [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"<pre>"];
        }
        [x toStringExWithJavaIoWriter:outArg withBoolean:html];
        writeXpos_ = x->writeXpos_;
        [self writeCommentWithJavaIoWriter:outArg withNSString:x->theComment_ withBoolean:html];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
        if (html) {
          [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"</pre>"];
        }
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
      }
    }
    else {
      if (theDescription_ != nil) {
        [self writeDescriptionWithJavaIoWriter:outArg withNSString:theDescription_ withBoolean:html];
        if (html) {
          [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"<pre>"];
        }
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
        [self toStringExWithJavaIoWriter:outArg withBoolean:html];
        if (html) {
          [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
          [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"</pre>"];
        }
      }
    }
    if (html) {
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"</div>"];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"</body>"];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"</html>"];
    }
  }
  @catch (JavaLangException *ex) {
  }
}

+ (int)typeToIntWithNSString:(NSString *)type {
  if ([((NSString *) nil_chk(type)) equalsIgnoreCase:@"PrintableString"]) {
    return iSPOTConstants_SPOT_TYPE_PRINTABLESTRING;
  }
  if ([type equalsIgnoreCase:@"OctetString"]) {
    return iSPOTConstants_SPOT_TYPE_OCTETSTRING;
  }
  if ([type equalsIgnoreCase:@"Set"]) {
    return iSPOTConstants_SPOT_TYPE_SET;
  }
  if ([type equalsIgnoreCase:@"Sequence"]) {
    return iSPOTConstants_SPOT_TYPE_SEQUENCE;
  }
  if ([type equalsIgnoreCase:@"Any"]) {
    return iSPOTConstants_SPOT_TYPE_ANY;
  }
  if ([type equalsIgnoreCase:@"DateTime"]) {
    return iSPOTConstants_SPOT_TYPE_DATETIME;
  }
  if ([type equalsIgnoreCase:@"Date"]) {
    return iSPOTConstants_SPOT_TYPE_DATE;
  }
  if ([type equalsIgnoreCase:@"Time"]) {
    return iSPOTConstants_SPOT_TYPE_TIME;
  }
  if ([type equalsIgnoreCase:@"Integer"]) {
    return iSPOTConstants_SPOT_TYPE_INTEGER;
  }
  if ([type equalsIgnoreCase:@"Real"]) {
    return iSPOTConstants_SPOT_TYPE_REAL;
  }
  if ([type equalsIgnoreCase:@"Enumerated"]) {
    return iSPOTConstants_SPOT_TYPE_ENUMERATED;
  }
  if ([type equalsIgnoreCase:@"Boolean"]) {
    return iSPOTConstants_SPOT_TYPE_BOOLEAN;
  }
  if ([type equalsIgnoreCase:@"ByteString"]) {
    return iSPOTConstants_SPOT_TYPE_BYTESTRING;
  }
  if ([type equalsIgnoreCase:@"Extends"]) {
    return iSPOTConstants_SPOT_TYPE_EXTENDS;
  }
  if ([type equalsIgnoreCase:@"Refine"]) {
    return iSPOTConstants_SPOT_TYPE_REFINE;
  }
  return iSPOTConstants_SPOT_TYPE_USERCLASS;
}

- (void)writePaddingWithJavaIoWriter:(JavaIoWriter *)outArg
                             withInt:(int)depth {
  if (depth == 0) {
    return;
  }
  int len = (int) [((IOSCharArray *) nil_chk(SPOTNode_padding_)) count];
  depth *= 2;
  writeXpos_ += depth;
  while (depth > len) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:SPOTNode_padding_ withInt:0 withInt:len];
    depth -= len;
  }
  if (depth > 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:SPOTNode_padding_ withInt:0 withInt:depth];
  }
}

- (BOOL)hasAttributes {
  return ((theAttributes_ != nil) && ([theAttributes_ size] > 0));
}

- (BOOL)isBooleanType {
  return elementType_ == SPOTNode_typeBoolean_;
}

- (BOOL)isNumericType {
  return elementType_ == SPOTNode_typeInteger_ || elementType_ == SPOTNode_typeReal_;
}

- (BOOL)isContainer {
  return ((childNodes_ != nil) && ([childNodes_ size] > 0));
}

- (BOOL)isEnumType {
  return elementType_ == SPOTNode_typeEnum_;
}

- (BOOL)isSetType {
  return elementType_ == SPOTNode_typeSet_;
}

- (int)getElementTypeAsInt {
  if (elementTypeAsInt_ == 0) {
    elementTypeAsInt_ = [SPOTNode typeToIntWithNSString:elementType_];
  }
  return elementTypeAsInt_;
}

- (void)checkDefaults {
  if (defaultValue_ == nil) {
    return;
  }
  if (theChoices_ != nil) {
    if ([((NSString *) nil_chk(elementType_)) isEqual:SPOTNode_typeEnum_]) {
      if (![self checkEnumDefaultWithNSString:defaultValue_]) {
        @throw [[SPOTException alloc] initWithNSString:@"The 'Default' value of '%s' for element %s is not a valid choice" withNSString:defaultValue_ withNSString:elementName_];
      }
    }
    else if (![self checkChoicesDefaultWithNSString:defaultValue_]) {
      @throw [[SPOTException alloc] initWithNSString:@"The 'Default' value of '%s' for element %s is not a valid choice" withNSString:defaultValue_ withNSString:elementName_];
    }
    return;
  }
  if ([((NSString *) nil_chk(elementType_)) isEqual:SPOTNode_typeBoolean_]) {
    if ([((NSString *) nil_chk(defaultValue_)) equalsIgnoreCase:@"true"]) {
      defaultValue_ = @"true";
    }
    else if ([defaultValue_ equalsIgnoreCase:@"false"]) {
      defaultValue_ = @"false";
    }
    else {
      @throw [[SPOTException alloc] initWithNSString:@"The 'Default' value of '%s' for element %s is not a valid choice" withNSString:defaultValue_ withNSString:elementName_];
    }
  }
  else if ([elementType_ isEqual:SPOTNode_typeReal_] || [elementType_ isEqual:SPOTNode_typeInteger_]) {
    @try {
      RAREUTSNumber *num = [[RAREUTSNumber alloc] initWithNSString:defaultValue_ withBoolean:YES];
      if (theRange_ != nil) {
        RAREUTSNumber *m;
        int i = [theRange_ indexOfString:@".."];
        if (i > 0) {
          m = [[RAREUTSNumber alloc] initWithNSString:theRange_];
          if ([num ltWithRAREUTSNumber:m]) {
            @throw [[SPOTException alloc] initWithNSString:@"The 'Default' value of '%s' for element %s is not in Range(%s)" withNSString:defaultValue_ withNSString:elementName_ withNSString:theRange_];
          }
        }
        if ((i > -1) && ([theRange_ sequenceLength] > (i + 2))) {
          m = [[RAREUTSNumber alloc] initWithNSString:[theRange_ substring:i + 2]];
          if ([num gtWithRAREUTSNumber:m]) {
            @throw [[SPOTException alloc] initWithNSString:@"The 'Default' value of '%s' for element %s is not in Range(%s)" withNSString:defaultValue_ withNSString:elementName_ withNSString:theRange_];
          }
        }
      }
      defaultValue_ = [num description];
    }
    @catch (JavaLangNumberFormatException *ex) {
      @throw [[SPOTException alloc] initWithNSString:@"The 'Default' value of '%s' for element %s is not a valid choice" withNSString:defaultValue_ withNSString:elementName_];
    }
  }
  else if ([elementType_ isEqual:SPOTNode_typePrintableString_] && (theRange_ != nil)) {
    int len = [((NSString *) nil_chk(defaultValue_)) sequenceLength];
    if (![defaultValue_ hasPrefix:@"\""] && ![defaultValue_ hasSuffix:@"\""]) {
      @throw [[SPOTException alloc] initWithNSString:@"The 'Default' value of '%s' for element %s is needs to be quoted" withNSString:defaultValue_ withNSString:elementName_];
    }
    int i = [theRange_ indexOfString:@".."];
    if (i > 0) {
      if (len < [RAREUTSNumber intValueWithNSString:theRange_]) {
        @throw [[SPOTException alloc] initWithNSString:@"The 'Default' value of '%s' for element %s is not in Range(%s)" withNSString:defaultValue_ withNSString:elementName_ withNSString:theRange_];
      }
    }
    if ((i > -1) && ([theRange_ sequenceLength] > (i + 2))) {
      if (len > [RAREUTSNumber intValueWithNSString:[theRange_ substring:i + 2]]) {
        @throw [[SPOTException alloc] initWithNSString:@"The 'Default' value of '%s' for element %s is not in Range(%s)" withNSString:defaultValue_ withNSString:elementName_ withNSString:theRange_];
      }
    }
  }
}

- (id<JavaUtilList>)cleanListWithJavaUtilList:(id<JavaUtilList>)list {
  id<JavaUtilList> cl = [[JavaUtilArrayList alloc] init];
  NSString *s;
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  for (int i = 0; i < len; i++) {
    s = [((NSString *) check_class_cast([list getWithInt:i], [NSString class])) trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
      continue;
    }
    [cl addWithId:s];
  }
  return cl;
}

- (void)dumpIndexWithNSString:(NSString *)file
                 withNSString:(NSString *)title {
  SPOTNode *x;
  NSString *name;
  JavaUtilTreeMap *classes = [[JavaUtilTreeMap alloc] init];
  int len = (childNodes_ == nil) ? 0 : [childNodes_ size];
  for (int i = 0; i < len; i++) {
    x = [((id<JavaUtilList>) nil_chk(childNodes_)) getWithInt:i];
    name = ((SPOTNode *) nil_chk(x))->elementName_;
    if ((name != nil) && ([name sequenceLength] > 0)) {
      (void) [classes putWithId:name withId:nil];
    }
  }
  id<JavaUtilIterator> it;
  it = [((id<JavaUtilSet>) nil_chk([classes keySet])) iterator];
  [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:@"<html><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\"/>"];
  [[JavaLangSystem out] println];
  [[JavaLangSystem out] printlnWithNSString:@"<link href=\"doxygen.css\" rel=\"stylesheet\" type=\"text/css\"/>"];
  [[JavaLangSystem out] printlnWithNSString:@"</head><body>"];
  [[JavaLangSystem out] println];
  [[JavaLangSystem out] printlnWithNSString:@"<div class=\"maindox\">"];
  [[JavaLangSystem out] println];
  if (title != nil) {
    [[JavaLangSystem out] printlnWithNSString:[NSString stringWithFormat:@"<h3>%@</h3>", title]];
  }
  [[JavaLangSystem out] printlnWithNSString:@"<ul>"];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [[JavaLangSystem out] printlnWithNSString:[self makeHTMLIndexEntryWithNSString:(NSString *) check_class_cast([it next], [NSString class]) withNSString:file]];
  }
  [[JavaLangSystem out] printlnWithNSString:@"</ul>"];
  [[JavaLangSystem out] printlnWithNSString:@"</div>"];
  [[JavaLangSystem out] printlnWithNSString:@"</body>"];
  [[JavaLangSystem out] printlnWithNSString:@"</html>"];
}

- (void)dumpIndexTreeWithNSString:(NSString *)file {
  SPOTNode *x;
  NSString *name;
  JavaUtilTreeMap *classes = [[JavaUtilTreeMap alloc] init];
  int len = (childNodes_ == nil) ? 0 : [childNodes_ size];
  for (int i = 0; i < len; i++) {
    x = [((id<JavaUtilList>) nil_chk(childNodes_)) getWithInt:i];
    name = ((SPOTNode *) nil_chk(x))->elementName_;
    if ((name != nil) && ([name sequenceLength] > 0)) {
      (void) [classes putWithId:name withId:nil];
    }
  }
  id<JavaUtilIterator> it;
  it = [((id<JavaUtilSet>) nil_chk([classes keySet])) iterator];
  [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:@"<p><img src=\"ftv2pnode.png\" alt=\"o\" width=16 height=22 onclick=\"toggleFolder('objects', this)\"/><img src=\"ftv2folderclosed.png\" alt=\"+\" width=24 height=22 onclick=\"toggleFolder('objects', this)\"/><a class=\"el\" href=\"annotated.html\" target=\"basefrm\">Configuration Objects</a></p>"];
  [[JavaLangSystem out] printlnWithNSString:@"<div id=\"objects\">"];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [[JavaLangSystem out] printlnWithNSString:[self makeHTMLIndexTreeEntryWithNSString:(NSString *) check_class_cast([it next], [NSString class]) withNSString:file]];
  }
  [[JavaLangSystem out] printlnWithNSString:@"</div>"];
}

- (void)dumpPathNamesWithJavaUtilMap:(id<JavaUtilMap>)identifiers
                        withNSString:(NSString *)parent
                        withSPOTNode:(SPOTNode *)type {
  int len = (((SPOTNode *) nil_chk(type))->childNodes_ == nil) ? 0 : [type->childNodes_ size];
  SPOTNode *x;
  NSString *name;
  SPOTNode *subtype;
  for (int i = 0; i < len; i++) {
    x = [((id<JavaUtilList>) nil_chk(type->childNodes_)) getWithInt:i];
    name = ((SPOTNode *) nil_chk(x))->elementName_;
    if ((name != nil) && ([name sequenceLength] > 0)) {
      name = [NSString stringWithFormat:@"%@-%@", parent, name];
      (void) [((id<JavaUtilMap>) nil_chk(identifiers)) putWithId:name withId:nil];
      subtype = [((SPOTNode *) nil_chk(x->rootNode_)) elementForWithNSString:x->elementType_];
      if (subtype != nil) {
        [self dumpPathNamesWithJavaUtilMap:identifiers withNSString:name withSPOTNode:subtype];
      }
    }
  }
}

- (void)dumpSyntax {
  SPOTNode *x;
  NSString *name;
  JavaUtilTreeMap *classes = [[JavaUtilTreeMap alloc] init];
  JavaUtilTreeMap *identifiers = [[JavaUtilTreeMap alloc] init];
  JavaUtilTreeMap *enums = [[JavaUtilTreeMap alloc] init];
  JavaUtilTreeMap *attributes = [[JavaUtilTreeMap alloc] init];
  int len = (childNodes_ == nil) ? 0 : [childNodes_ size];
  for (int i = 0; i < len; i++) {
    x = [((id<JavaUtilList>) nil_chk(childNodes_)) getWithInt:i];
    name = ((SPOTNode *) nil_chk(x))->elementName_;
    if ((name != nil) && ([name sequenceLength] > 0)) {
      (void) [classes putWithId:name withId:nil];
    }
    if ([x hasAttributes]) {
      [attributes putAllWithJavaUtilMap:x->theAttributes_];
    }
    if ([x isContainer]) {
      [x dumpSyntaxExWithJavaUtilMap:identifiers withJavaUtilMap:enums withJavaUtilMap:attributes];
    }
  }
  id<JavaUtilIterator> it;
  NSString *s;
  it = [((id<JavaUtilSet>) nil_chk([classes keySet])) iterator];
  [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:@"[keywords]"];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    s = [nil_chk([it next]) description];
    [[JavaLangSystem out] printlnWithNSString:s];
  }
  [[JavaLangSystem out] println];
  [[JavaLangSystem out] printlnWithNSString:@"[identifiers]"];
  it = [((id<JavaUtilSet>) nil_chk([identifiers keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    s = [nil_chk([it next]) description];
    [[JavaLangSystem out] printlnWithNSString:s];
  }
  [[JavaLangSystem out] println];
  [[JavaLangSystem out] printlnWithNSString:@"[enums]"];
  it = [((id<JavaUtilSet>) nil_chk([enums keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    s = [nil_chk([it next]) description];
    [[JavaLangSystem out] printlnWithNSString:s];
  }
  [[JavaLangSystem out] println];
  [[JavaLangSystem out] printlnWithNSString:@"[attributes]"];
  it = [((id<JavaUtilSet>) nil_chk([attributes keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    s = [nil_chk([it next]) description];
    [[JavaLangSystem out] printlnWithNSString:s];
  }
}

- (BOOL)findTokenWithSPOTNode_MyReader:(SPOTNode_MyReader *)reader
                              withChar:(unichar)c
                   withRAREUTCharArray:(RAREUTCharArray *)outArg {
  int d = 0;
  BOOL bInQuote = NO;
  int ft = 0;
  [((RAREUTCharArray *) nil_chk(outArg)) clear];
  @try {
    while (YES) {
      d = [((SPOTNode_MyReader *) nil_chk(reader)) read];
      if (d == -1) {
        break;
      }
      if ((d == c) && !bInQuote) {
        ft = d;
        break;
      }
      (void) [outArg appendWithChar:(unichar) d];
      if (d == '"') {
        if (!bInQuote) {
          bInQuote = YES;
        }
        else {
          reader->nextChar_ = [reader read];
          if (reader->nextChar_ > 0) {
            if (reader->nextChar_ == '"') {
              reader->nextChar_ = 0;
            }
            else {
              bInQuote = NO;
            }
          }
        }
      }
    }
  }
  @catch (JavaIoIOException *ex) {
  }
  return ft != 0;
}

- (void)handleAttributesWithJavaUtilList:(id<JavaUtilList>)toks
                                 withInt:(int)pos
                                 withInt:(int)len
                            withNSString:(NSString *)element {
  int ipos = pos + 1;
  len += pos;
  if (theAttributes_ == nil) {
    theAttributes_ = [[JavaUtilLinkedHashMap alloc] init];
  }
  int n;
  NSString *s;
  while (pos < len) {
    s = (NSString *) check_class_cast([((id<JavaUtilList>) nil_chk(toks)) getWithInt:pos++], [NSString class]);
    if ([((NSString *) nil_chk(s)) hasPrefix:@"["]) {
      if (pos != ipos) {
        @throw [[SPOTException alloc] initWithNSString:@"Invalid attribute specification in element %s" withNSString:s withNSString:element];
      }
      n = [s sequenceLength];
      if (n == 1) {
        continue;
      }
      if ([s charAtWithInt:n - 1] == ']') {
        if (n == 2) {
          break;
        }
        s = [s substring:1 endIndex:n - 1];
      }
      else {
        s = [s substring:1];
      }
    }
    else if ([s hasSuffix:@"]"]) {
      n = [s sequenceLength];
      if (n == 1) {
        break;
      }
      s = [s substring:0 endIndex:n - 1];
    }
    else if ([s isEqual:@","]) {
      continue;
    }
    @try {
      (void) [RAREUTCharScanner parseOptionStringWithNSString:s withJavaUtilMap:theAttributes_ withChar:',' withBoolean:YES];
    }
    @catch (JavaLangException *ex) {
      @throw [[SPOTException alloc] initWithNSString:@"Missing quote for attribute '%s' in element %s" withNSString:s withNSString:elementName_];
    }
  }
}

+ (int)indexOfWithCharArray:(IOSCharArray *)chars
                    withInt:(int)pos
                    withInt:(int)len
                   withChar:(unichar)c {
  unichar d = 0;
  BOOL bInQuote = NO;
  int i = pos;
  int n = pos + len;
  if (pos >= n) {
    return -1;
  }
  while (i < n) {
    d = IOSCharArray_Get(nil_chk(chars), i);
    if ((d == c) && !bInQuote) {
      return i;
    }
    if (d == '"') {
      if (!bInQuote) {
        bInQuote = YES;
      }
      else {
        if ((i + 1) < n) {
          if (IOSCharArray_Get(chars, i + 1) == '"') {
            i++;
          }
          else {
            bInQuote = NO;
          }
        }
      }
    }
    i++;
  }
  return -1;
}

- (NSString *)parameterWithNSString:(NSString *)at
                            withInt:(int)pos
                   withJavaUtilList:(id<JavaUtilList>)list {
  if (pos >= [((id<JavaUtilList>) nil_chk(list)) size]) {
    @throw [[SPOTException alloc] initWithNSString:SPOTNode_errMissingValue_ withNSString:at];
  }
  NSString *v = [((NSString *) check_class_cast([list getWithInt:pos], [NSString class])) trim];
  if ([((NSString *) nil_chk(v)) sequenceLength] == 0) {
    @throw [[SPOTException alloc] initWithNSString:SPOTNode_errMissingValue_ withNSString:at];
  }
  return v;
}

- (void)parseChoicesWithSPOTNode_MyReader:(SPOTNode_MyReader *)reader {
  if (commentList_ == nil) {
    commentList_ = [[JavaUtilArrayList alloc] init];
  }
  if (choiceList_ == nil) {
    choiceList_ = [[JavaUtilArrayList alloc] init];
  }
  if (modLine_ == nil) {
    modLine_ = [[RAREUTCharArray alloc] init];
  }
  if (modScanner_ == nil) {
    modScanner_ = [[RAREUTCharScanner alloc] init];
    [modScanner_ setTrimCharsWithCharArray:SPOTNode_badChars_];
  }
  NSString *comment;
  [((id<JavaUtilList>) nil_chk(choiceList_)) clear];
  [((id<JavaUtilList>) nil_chk(commentList_)) clear];
  [((RAREUTCharArray *) nil_chk(modLine_)) clear];
  while ([self findTokenWithSPOTNode_MyReader:reader withChar:0x000a withRAREUTCharArray:modLine_]) {
    [((RAREUTCharScanner *) nil_chk(modScanner_)) resetWithCharArray:modLine_->A_ withInt:0 withInt:modLine_->_length_ withBoolean:NO];
    (void) [modScanner_ trim];
    if ([modScanner_ getCurrentChar] == '}') {
      [modScanner_ read];
      (void) [modScanner_ trim];
      [self parseModifiersWithSPOTNode_MyReader:reader withCharArray:[modScanner_ getContent] withInt:[modScanner_ getPosition] withInt:[modScanner_ getLength]];
      theChoices_ = (IOSObjectArray *) check_class_cast([choiceList_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[choiceList_ size] type:[IOSClass classWithClass:[NSString class]]]], [IOSObjectArray class]);
      theChoicesComments_ = (IOSObjectArray *) check_class_cast([commentList_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[commentList_ size] type:[IOSClass classWithClass:[NSString class]]]], [IOSObjectArray class]);
      return;
    }
    if ([modScanner_ getLength] > 0) {
      comment = [self parseCommentWithRAREUTCharScanner:modScanner_];
      [commentList_ addWithId:comment];
      [choiceList_ addWithId:[modScanner_ getLeftOver]];
    }
  }
  @throw [[SPOTException alloc] initWithNSString:@"The 'CHOICE' modifier for '%s' must be terminated by a '}'" withNSString:elementName_];
}

- (NSString *)parseCommentWithRAREUTCharScanner:(RAREUTCharScanner *)sc {
  BOOL pound = NO;
  int n = [((RAREUTCharScanner *) nil_chk(sc)) indexOfWithChar:'#' withBoolean:YES withBoolean:YES];
  if (n == -1) {
    n = [sc indexOfWithChar:'/' withBoolean:YES withBoolean:YES];
  }
  else {
    pound = YES;
  }
  do {
    if (n == -1) {
      break;
    }
    if (!pound && ([sc getCharWithInt:n + 1] != '/')) {
      break;
    }
    int pos = [sc getPosition];
    int len = [sc getLength] - (n - pos);
    NSString *comment;
    if (pound) {
      comment = [NSString stringWithCharacters:[sc getContent] offset:n + 1 length:len - 1];
    }
    else {
      comment = [NSString stringWithCharacters:[sc getContent] offset:n + 2 length:len - 2];
    }
    if (comment != nil) {
      comment = [comment trim];
    }
    [sc chopWithInt:len];
    (void) [sc trim];
    return comment;
  }
  while (NO);
  return nil;
}

- (void)parseEnumerationsWithSPOTNode_MyReader:(SPOTNode_MyReader *)reader {
  RAREUTSNumber *num;
  NSString *s;
  IOSIntArray *tok;
  if (choiceList_ == nil) {
    choiceList_ = [[JavaUtilArrayList alloc] init];
  }
  if (numList_ == nil) {
    numList_ = [[RAREUTIntList alloc] init];
  }
  if (commentList_ == nil) {
    commentList_ = [[JavaUtilArrayList alloc] init];
  }
  if (modLine_ == nil) {
    modLine_ = [[RAREUTCharArray alloc] init];
  }
  if (modScanner_ == nil) {
    modScanner_ = [[RAREUTCharScanner alloc] init];
    [modScanner_ setTrimCharsWithCharArray:SPOTNode_badChars_];
  }
  [((id<JavaUtilList>) nil_chk(choiceList_)) clear];
  [((RAREUTCharArray *) nil_chk(modLine_)) clear];
  [((id<JavaUtilList>) nil_chk(commentList_)) clear];
  [((RAREUTIntList *) nil_chk(numList_)) clear];
  while ([self findTokenWithSPOTNode_MyReader:reader withChar:0x000a withRAREUTCharArray:modLine_]) {
    [((RAREUTCharScanner *) nil_chk(modScanner_)) resetWithCharArray:modLine_->A_ withInt:0 withInt:modLine_->_length_ withBoolean:NO];
    (void) [modScanner_ trim];
    if ([modScanner_ getCurrentChar] == '}') {
      [modScanner_ read];
      (void) [modScanner_ trim];
      theNumChoices_ = [numList_ toArray];
      theChoices_ = (IOSObjectArray *) check_class_cast([choiceList_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[choiceList_ size] type:[IOSClass classWithClass:[NSString class]]]], [IOSObjectArray class]);
      theChoicesComments_ = (IOSObjectArray *) check_class_cast([commentList_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[commentList_ size] type:[IOSClass classWithClass:[NSString class]]]], [IOSObjectArray class]);
      [self parseModifiersWithSPOTNode_MyReader:reader withCharArray:[modScanner_ getContent] withInt:[modScanner_ getPosition] withInt:[modScanner_ getLength]];
      return;
    }
    if ([modScanner_ getLength] > 0) {
      s = [self parseCommentWithRAREUTCharScanner:modScanner_];
      [commentList_ addWithId:s];
      tok = [modScanner_ findTokenWithChar:'(' withBoolean:YES withBoolean:NO];
      tok = [modScanner_ stripWithIntArray:tok withCharArray:SPOTNode_quoteChar_];
      if (IOSIntArray_Get(nil_chk(tok), 1) == 0) {
        @throw [[SPOTException alloc] initWithNSString:[NSString stringWithFormat:@"Missing string enumeration part for '%%s' in choice #%d", [choiceList_ size]] withNSString:elementName_];
      }
      if (![self isValidNameWithCharArray:[modScanner_ getContent] withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1)]) {
        @throw [[SPOTException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid enumeration name for '%%s' in choice #%d", [choiceList_ size]] withNSString:elementName_];
      }
      s = [modScanner_ getTokenWithIntArray:tok];
      [choiceList_ addWithId:s];
      (void) [modScanner_ trim];
      if ([modScanner_ getLength] == 0) {
        @throw [[SPOTException alloc] initWithNSString:[NSString stringWithFormat:@"Missing numeric enumeration part for '%%s' in choice #%d", [choiceList_ size]] withNSString:elementName_];
      }
      if ([modScanner_ getLastChar] != ')') {
        @throw [[SPOTException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid numeric enumeration part for '%%s' in choice #%d", [choiceList_ size]] withNSString:elementName_];
      }
      [modScanner_ chopWithInt:1];
      (void) [modScanner_ trim];
      @try {
        num = [[RAREUTSNumber alloc] initWithNSString:[modScanner_ getLeftOver] withBoolean:YES];
        if (![num isInteger]) {
          @throw [[SPOTException alloc] initWithNSString:[NSString stringWithFormat:@"No integer numeric enumeration part for '%%s' in choice#%d", [choiceList_ size]] withNSString:elementName_];
        }
      }
      @catch (JavaLangException *ex) {
        @throw [[SPOTException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid numeric enumeration part for '%%s' in choice#%d", [choiceList_ size]] withNSString:elementName_];
      }
      [numList_ addWithInt:[((RAREUTSNumber *) nil_chk(num)) intValue]];
    }
  }
  @throw [[SPOTException alloc] initWithNSString:@"The 'Choice' modifier for '%s' must be terminated by a '}'" withNSString:elementName_];
}

- (void)parseModifiersWithSPOTNode_MyReader:(SPOTNode_MyReader *)reader
                              withCharArray:(IOSCharArray *)chars
                                    withInt:(int)pos
                                    withInt:(int)len {
  int i;
  int n;
  NSString *s;
  BOOL att;
  if (len > 1) {
    if ((IOSCharArray_Get(nil_chk(chars), pos) == '/') && (IOSCharArray_Get(chars, pos + 1) == '/')) {
      theComment_ = [NSString stringWithCharacters:chars offset:pos + 2 length:len - 2];
      theComment_ = [theComment_ trim];
      return;
    }
    if ((IOSCharArray_Get(chars, pos) == '#')) {
      theComment_ = [NSString stringWithCharacters:chars offset:pos + 1 length:len - 1];
      theComment_ = [theComment_ trim];
      return;
    }
  }
  if (modScanner_ == nil) {
    modScanner_ = [[RAREUTCharScanner alloc] init];
    [modScanner_ setTrimCharsWithCharArray:SPOTNode_badChars_];
  }
  if (modList_ == nil) {
    modList_ = [[JavaUtilArrayList alloc] init];
  }
  if (modLine_ == nil) {
    modLine_ = [[RAREUTCharArray alloc] init];
  }
  [((RAREUTCharScanner *) nil_chk(modScanner_)) resetWithCharArray:chars withInt:pos withInt:len withBoolean:NO];
  (void) [modScanner_ trim];
  [((id<JavaUtilList>) nil_chk(modList_)) clear];
  [((RAREUTCharArray *) nil_chk(modLine_)) clear];
  (void) [modScanner_ getTokensWithChar:' ' withBoolean:YES withBoolean:YES withBoolean:NO withJavaUtilList:modList_];
  id<JavaUtilList> toks = [self cleanListWithJavaUtilList:modList_];
  NSString *us;
  int toksLength = [((id<JavaUtilList>) nil_chk(toks)) size];
  for (i = 0; i < toksLength; i++) {
    s = [((NSString *) check_class_cast([toks getWithInt:i], [NSString class])) trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
      continue;
    }
    if ((n = [s indexOfString:@"//"]) != -1 || (n = [s indexOfString:@"#"]) != -1) {
      JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
      if ([s charAtWithInt:n] == '#') {
        (void) [buf appendWithNSString:[((NSString *) nil_chk([s substring:n + 1])) trim]];
      }
      else {
        (void) [buf appendWithNSString:[((NSString *) nil_chk([s substring:n + 2])) trim]];
      }
      if ((n > 0) && ([s charAtWithInt:n - 1] == ',')) {
        n--;
      }
      s = [s substring:0 endIndex:n];
      s = [((NSString *) nil_chk(s)) trim];
      for (n = i + 1; n < toksLength; n++) {
        (void) [buf appendWithChar:' '];
        (void) [buf appendWithNSString:(NSString *) check_class_cast([toks getWithInt:n], [NSString class])];
      }
      theComment_ = [((NSString *) nil_chk([buf description])) trim];
      i = toksLength - 1;
      if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
        break;
      }
    }
    if ([((NSString *) nil_chk(s)) hasPrefix:@"["]) {
      att = NO;
      for (n = i; n < toksLength; n++) {
        if ([((NSString *) check_class_cast([toks getWithInt:n], [NSString class])) hasSuffix:@"]"]) {
          [self handleAttributesWithJavaUtilList:toks withInt:i withInt:n - i + 1 withNSString:elementName_];
          i = n;
          att = YES;
        }
      }
      if (!att) {
        @throw [[SPOTException alloc] initWithNSString:@"Invalid attribute specification for element %s" withNSString:elementName_];
      }
      continue;
    }
    us = [s uppercaseStringWithJRELocale:[JavaUtilLocale ENGLISH]];
    if ([((NSString *) nil_chk(us)) isEqual:@"DEFAULT"]) {
      defaultValue_ = [self parameterWithNSString:s withInt:i + 1 withJavaUtilList:toks];
      i++;
    }
    else if ([us isEqual:@"OPTIONAL"]) {
      isOptional_ = YES;
    }
    else if ([us isEqual:@"REFERENCE"]) {
      isOptional_ = YES;
      isReference_ = YES;
    }
    else if ([us hasPrefix:@"RANGE("]) {
      s = [s substring:6];
      n = [((NSString *) nil_chk(s)) sequenceLength];
      if ((n < 2) || ([s charAtWithInt:n - 1] != ')') || (([s indexOf:'.'] != -1) && ([s indexOfString:@".."] == -1))) {
        @throw [[SPOTException alloc] initWithNSString:[RAREUTHelper expandStringWithNSString:SPOTNode_errInvalidSize_ withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString stringWithCharacters:chars offset:pos length:len] } count:1 type:[IOSClass classWithClass:[NSString class]]]]];
      }
      theRange_ = [s substring:0 endIndex:n - 1];
    }
    else if ([us isEqual:@"VALUE"]) {
      fixedValue_ = [self parameterWithNSString:s withInt:i + 1 withJavaUtilList:toks];
      i++;
    }
    else if ([us isEqual:@"DEFINEDBY"]) {
      definedBy_ = [self parameterWithNSString:s withInt:i + 1 withJavaUtilList:toks];
      i++;
    }
    else if ([us isEqual:@"MANDITORY"]) {
      isOptional_ = NO;
      manditoryModifier_ = YES;
    }
    else if ([us isEqual:@"CHOICE"]) {
      if ((i + 1) == toksLength) {
        if (![self findTokenWithSPOTNode_MyReader:reader withChar:'{' withRAREUTCharArray:modLine_]) {
          @throw [[SPOTException alloc] initWithNSString:@"The 'Choice modified must be followed by a '{'"];
        }
      }
      else {
        if (![nil_chk([toks getWithInt:i + 1]) isEqual:@"{"]) {
          @throw [[SPOTException alloc] initWithNSString:@"The 'Choice' modified must be followed by a '{'"];
        }
      }
      [self parseChoicesWithSPOTNode_MyReader:reader];
      i++;
    }
    else if ([us isEqual:@"CHOICE{"]) {
      [self parseChoicesWithSPOTNode_MyReader:reader];
    }
    else {
      @throw [[SPOTException alloc] initWithNSString:@"Unknown modifier '%s' in element %s" withNSString:s withNSString:elementName_];
    }
  }
  [self checkDefaults];
}

- (IOSIntArray *)trimWithCharArray:(IOSCharArray *)chars
                           withInt:(int)pos
                           withInt:(int)len
                      withIntArray:(IOSIntArray *)tok {
  int n = pos + len;
  if (tok == nil) {
    tok = [IOSIntArray arrayWithLength:2];
  }
  (*IOSIntArray_GetRef(nil_chk(tok), 0)) = n - 1;
  if (IOSIntArray_Get(tok, 0) < 0) {
    (*IOSIntArray_GetRef(tok, 0)) = pos;
    (*IOSIntArray_GetRef(tok, 1)) = len;
    return tok;
  }
  while ((pos < n) && (IOSCharArray_Get(nil_chk(chars), pos) < 33)) {
    pos++;
    len--;
  }
  while ((n > pos) && (IOSCharArray_Get(nil_chk(chars), --n) < 33)) {
    len--;
  }
  (*IOSIntArray_GetRef(tok, 1)) = len;
  if (len != 0) {
    (*IOSIntArray_GetRef(tok, 0)) = pos;
  }
  return tok;
}

- (void)writeWithJavaIoWriter:(JavaIoWriter *)outArg
                  withBoolean:(BOOL)html
                     withChar:(unichar)s {
  if (!html) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:s];
    return;
  }
  if (s == 0x000a) {
    writeXpos_ = 0;
  }
  else {
    writeXpos_++;
  }
  [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:s];
}

- (void)writeWithJavaIoWriter:(JavaIoWriter *)outArg
                  withBoolean:(BOOL)html
                 withNSString:(NSString *)s {
  if (!html) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:s];
    return;
  }
  if (s != nil) {
    IOSCharArray *b = [s toCharArray];
    [self writeWithJavaIoWriter:outArg withBoolean:html withCharArray:b withInt:0 withInt:(int) [((IOSCharArray *) nil_chk(b)) count]];
  }
}

- (void)writeWithJavaIoWriter:(JavaIoWriter *)outArg
                  withBoolean:(BOOL)html
                withCharArray:(IOSCharArray *)s
                      withInt:(int)pos
                      withInt:(int)len {
  if (!html) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:s withInt:pos withInt:len];
    return;
  }
  len += pos;
  for (int i = pos; i < len; i++) {
    if (IOSCharArray_Get(nil_chk(s), i) == 0x000a) {
      writeXpos_ = 0;
      continue;
    }
    writeXpos_++;
  }
  [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:s withInt:pos withInt:len];
}

- (void)writeAttributesWithJavaIoWriter:(JavaIoWriter *)outArg
                            withBoolean:(BOOL)html {
  if ((theAttributes_ == nil) || ([theAttributes_ size] == 0)) {
    return;
  }
  @try {
    if (html) {
      [self writeSpanWithJavaIoWriter:outArg withNSString:SPOTNode_spanType_];
    }
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(theAttributes_)) entrySet])) iterator];
    JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
    id<JavaUtilMap_Entry> me;
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@" [ "];
    NSString *val;
    BOOL first = YES;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      me = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
      [sb setLengthWithInt:0];
      if (!first) {
        (void) [sb appendWithNSString:@", "];
      }
      else {
        first = NO;
      }
      (void) [sb appendWithNSString:(NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(me)) getKey], [NSString class])];
      val = (NSString *) check_class_cast([me getValue], [NSString class]);
      if (val != nil) {
        (void) [sb appendWithNSString:@"=\""];
        (void) [sb appendWithNSString:val];
        (void) [sb appendWithChar:'"'];
      }
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:[sb description]];
    }
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@" ]"];
    if (html) {
      [self writeSpanWithJavaIoWriter:outArg withNSString:nil];
    }
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)writeCommentWithJavaIoWriter:(JavaIoWriter *)outArg
                        withNSString:(NSString *)comment
                         withBoolean:(BOOL)html {
  if (comment == nil) {
    return;
  }
  @try {
    if (html) {
      [self writeSpanWithJavaIoWriter:outArg withNSString:SPOTNode_spanComment_];
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@" // "];
      [outArg writeWithNSString:comment];
      [self writeSpanWithJavaIoWriter:outArg withNSString:nil];
    }
    else {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@" // "];
      [outArg writeWithNSString:comment];
    }
    return;
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)writeDescriptionWithJavaIoWriter:(JavaIoWriter *)outArg
                            withNSString:(NSString *)comment
                             withBoolean:(BOOL)html {
  @try {
    if (comment != nil) {
      if (html) {
        [self writeSpanWithJavaIoWriter:outArg withNSString:SPOTNode_spanDescription_];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:comment];
        [self writeSpanWithJavaIoWriter:outArg withNSString:nil];
      }
      else {
        id<JavaUtilList> ln = [RAREUTCharScanner getTokensWithNSString:comment withChar:0x000a withBoolean:NO];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"/**\n"];
        int len = [((id<JavaUtilList>) nil_chk(ln)) size];
        for (int i = 0; i < len; i++) {
          [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@" * "];
          [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:(NSString *) check_class_cast([ln getWithInt:i], [NSString class])];
          [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
        }
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@" */"];
      }
    }
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)writeHeadingWithJavaIoWriter:(JavaIoWriter *)outArg
                        withNSString:(NSString *)head
                         withBoolean:(BOOL)html {
  @try {
    if (head != nil) {
      if (html) {
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:[NSString stringWithFormat:@"<h2><a name=\"%@\">", head]];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:head];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"</a></h2>"];
      }
    }
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)writeModifierWithJavaIoWriter:(JavaIoWriter *)outArg
                         withNSString:(NSString *)mod
                          withBoolean:(BOOL)html {
  @try {
    if (html) {
      [self writeSpanWithJavaIoWriter:outArg withNSString:SPOTNode_spanType_];
    }
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:mod];
    if (html) {
      [self writeSpanWithJavaIoWriter:outArg withNSString:nil];
    }
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)writePaddingWithJavaIoWriter:(JavaIoWriter *)outArg {
  int depth = theDepth_;
  if (depth == 0) {
    return;
  }
  int len = (int) [((IOSCharArray *) nil_chk(SPOTNode_padding_)) count];
  depth *= 2;
  writeXpos_ += depth;
  while (depth > len) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:SPOTNode_padding_ withInt:0 withInt:len];
    depth -= len;
  }
  if (depth > 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:SPOTNode_padding_ withInt:0 withInt:depth];
  }
}

+ (void)writePaddingWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                      withInt:(int)depth {
  if (depth == 0) {
    return;
  }
  int len = (int) [((IOSCharArray *) nil_chk(SPOTNode_padding_)) count];
  depth *= 2;
  while (depth > len) {
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithCharArray:SPOTNode_padding_ withInt:0 withInt:len];
    depth -= len;
  }
  if (depth > 0) {
    (void) [((JavaLangStringBuilder *) nil_chk(outArg)) appendWithCharArray:SPOTNode_padding_ withInt:0 withInt:depth];
  }
}

- (void)writeSpaceWithJavaIoWriter:(JavaIoWriter *)outArg
                           withInt:(int)num {
  if (num == 0) {
    return;
  }
  writeXpos_ += num;
  int len = (int) [((IOSCharArray *) nil_chk(SPOTNode_padding_)) count];
  while (num > len) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:SPOTNode_padding_ withInt:0 withInt:len];
    num -= len;
  }
  if (num > 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:SPOTNode_padding_ withInt:0 withInt:num];
  }
}

- (void)writeSpanWithJavaIoWriter:(JavaIoWriter *)outArg
                     withNSString:(NSString *)classname {
  @try {
    if (classname == nil) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"</span>"];
    }
    else {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"<span class=\""];
      [outArg writeWithNSString:classname];
      [outArg writeWithNSString:@"\">"];
    }
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (void)writeTypeWithJavaIoWriter:(JavaIoWriter *)outArg
                     withNSString:(NSString *)type
                      withBoolean:(BOOL)html
                      withBoolean:(BOOL)link {
  @try {
    BOOL makelink = NO;
    BOOL user = [SPOTNode findTypeWithNSString:type] == -1;
    if (html) {
      if (link && user && (rootNode_ != nil) && ([rootNode_ elementForWithNSString:type] != nil)) {
        makelink = YES;
        [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[NSString stringWithFormat:@"<a href=\"#%@\">", type]];
      }
      [self writeSpanWithJavaIoWriter:outArg withNSString:user ? SPOTNode_spanUserType_ : SPOTNode_spanType_];
    }
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:type];
    if (html) {
      [self writeSpanWithJavaIoWriter:outArg withNSString:nil];
      if (makelink) {
        [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"</a>"];
      }
    }
  }
  @catch (JavaIoIOException *ex) {
  }
}

- (NSString *)getNameTokenWithRAREUTCharScanner:(RAREUTCharScanner *)scanner
                                       withChar:(unichar)c {
  NSString *s = nil;
  IOSIntArray *tok = [((RAREUTCharScanner *) nil_chk(scanner)) findTokenWithChar:c];
  tok = [scanner trimWithIntArray:tok];
  if ((tok != nil) && (IOSIntArray_Get(tok, 1) != 0)) {
    s = [scanner getTokenWithIntArray:tok];
    if (![self isValidNameWithCharArray:[scanner getContent] withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1)]) {
      @throw [[SPOTException alloc] initWithNSString:SPOTNode_errInvalidName_ withNSString:s];
    }
  }
  return s;
}

- (NSString *)getNameTokenWithRAREUTCharScanner:(RAREUTCharScanner *)scanner
                                   withIntArray:(IOSIntArray *)tok {
  NSString *s = nil;
  tok = [((RAREUTCharScanner *) nil_chk(scanner)) trimWithIntArray:tok];
  if ((tok != nil) && (IOSIntArray_Get(tok, 1) != 0)) {
    s = [scanner getTokenWithIntArray:tok];
    if (![self isValidNameWithCharArray:[scanner getContent] withInt:IOSIntArray_Get(tok, 0) withInt:IOSIntArray_Get(tok, 1)]) {
      @throw [[SPOTException alloc] initWithNSString:SPOTNode_errInvalidName_ withNSString:s];
    }
  }
  return s;
}

- (BOOL)isAutoReferenceWithSPOTNode:(SPOTNode *)x {
  NSString *type = ((SPOTNode *) nil_chk(x))->elementType_;
  if (type == nil) {
    return NO;
  }
  while ((x = x->parentNode_) != nil) {
    if (((SPOTNode *) nil_chk(x))->elementType_ == nil) {
      continue;
    }
    if ([((NSString *) nil_chk(x->elementType_)) isEqual:SPOTNode_typeSet_]) {
      return NO;
    }
    if ((x->elementName_ != nil) && [x->elementName_ isEqual:type]) {
      return YES;
    }
  }
  return NO;
}

- (void)childrenToStringWithJavaIoWriter:(JavaIoWriter *)outArg
                             withBoolean:(BOOL)html {
  int i = 0;
  SPOTNode *x = nil;
  if (![self isContainer]) {
    return;
  }
  long long int len = [((id<JavaUtilList>) nil_chk(childNodes_)) size];
  for (i = 0; i < (len - 1); i++) {
    x = [childNodes_ getWithInt:i];
    [((SPOTNode *) nil_chk(x)) toStringExWithJavaIoWriter:outArg withBoolean:html];
    [self writeWithJavaIoWriter:outArg withBoolean:html withChar:','];
    writeXpos_ = x->writeXpos_;
    [self writeCommentWithJavaIoWriter:outArg withNSString:x->theComment_ withBoolean:html];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
  }
  x = [childNodes_ getWithInt:i];
  [((SPOTNode *) nil_chk(x)) toStringExWithJavaIoWriter:outArg withBoolean:html];
  if (x->theComment_ != nil) {
    [self writeWithJavaIoWriter:outArg withBoolean:html withChar:' '];
  }
  [self writeCommentWithJavaIoWriter:outArg withNSString:x->theComment_ withBoolean:html];
  [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
}

- (void)clean {
  if (numList_ != nil) {
    [numList_ clear];
    numList_ = nil;
  }
  if (modList_ != nil) {
    [modList_ clear];
    modList_ = nil;
  }
  if (commentList_ != nil) {
    [commentList_ clear];
    commentList_ = nil;
  }
  if (choiceList_ != nil) {
    [choiceList_ clear];
    choiceList_ = nil;
  }
  modScanner_ = nil;
  modLine_ = nil;
}

- (void)toStringExWithJavaIoWriter:(JavaIoWriter *)outArg
                       withBoolean:(BOOL)html {
  int i = 0;
  [self writePaddingWithJavaIoWriter:outArg withInt:theDepth_];
  if (theDepth_ == 0) {
    [self writeTypeWithJavaIoWriter:outArg withNSString:elementName_ withBoolean:html withBoolean:NO];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@" ::= "];
  }
  else {
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:elementName_];
    [self writeWithJavaIoWriter:outArg withBoolean:html withChar:' '];
  }
  [self writeTypeWithJavaIoWriter:outArg withNSString:elementType_ withBoolean:html withBoolean:YES];
  if ([((NSString *) nil_chk(elementType_)) isEqual:SPOTNode_typeExtends_]) {
    [self writeWithJavaIoWriter:outArg withBoolean:html withChar:' '];
    [self writeTypeWithJavaIoWriter:outArg withNSString:extendsType_ withBoolean:html withBoolean:YES];
  }
  if (theChoices_ != nil) {
    if (theNumChoices_ != nil) {
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@" {"];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
      int len = 0;
      int n;
      for (i = 0; i < (int) [theChoices_ count]; i++) {
        n = [((NSString *) IOSObjectArray_Get(theChoices_, i)) sequenceLength];
        if (n > len) {
          len = n;
        }
      }
      len++;
      for (i = 0; i < ((int) [theChoices_ count] - 1); i++) {
        if (html) {
          [self writeSpanWithJavaIoWriter:outArg withNSString:SPOTNode_spanCode_];
        }
        [self writePaddingWithJavaIoWriter:outArg withInt:theDepth_ + 1];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:IOSObjectArray_Get(theChoices_, i)];
        n = len - [((NSString *) IOSObjectArray_Get(theChoices_, i)) sequenceLength];
        if (n > 0) {
          [self writeSpaceWithJavaIoWriter:outArg withInt:n];
        }
        [self writeWithJavaIoWriter:outArg withBoolean:html withChar:'('];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:[NSString valueOfInt:IOSIntArray_Get(theNumChoices_, i)]];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@")"];
        if (html) {
          [self writeSpanWithJavaIoWriter:outArg withNSString:nil];
        }
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@","];
        [self writeCommentWithJavaIoWriter:outArg withNSString:IOSObjectArray_Get(nil_chk(theChoicesComments_), i) withBoolean:html];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
      }
      if (html) {
        [self writeSpanWithJavaIoWriter:outArg withNSString:SPOTNode_spanCode_];
      }
      [self writePaddingWithJavaIoWriter:outArg withInt:theDepth_ + 1];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:IOSObjectArray_Get(theChoices_, i)];
      n = len - [((NSString *) IOSObjectArray_Get(theChoices_, i)) sequenceLength];
      if (n > 0) {
        [self writeSpaceWithJavaIoWriter:outArg withInt:n];
      }
      [self writeWithJavaIoWriter:outArg withBoolean:html withChar:'('];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:[NSString valueOfInt:IOSIntArray_Get(theNumChoices_, i)]];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@")"];
      if (html) {
        [self writeSpanWithJavaIoWriter:outArg withNSString:nil];
      }
      if (IOSObjectArray_Get(nil_chk(theChoicesComments_), i) != nil) {
        [self writeWithJavaIoWriter:outArg withBoolean:html withChar:' '];
      }
      [self writeCommentWithJavaIoWriter:outArg withNSString:IOSObjectArray_Get(theChoicesComments_, i) withBoolean:html];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
      [self writePaddingWithJavaIoWriter:outArg withInt:theDepth_];
      [self writeWithJavaIoWriter:outArg withBoolean:html withChar:'}'];
    }
    else {
      [self writeModifierWithJavaIoWriter:outArg withNSString:@" Choice" withBoolean:html];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@" {"];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
      for (i = 0; i < ((int) [theChoices_ count] - 1); i++) {
        if (html) {
          [self writeSpanWithJavaIoWriter:outArg withNSString:SPOTNode_spanCode_];
        }
        [self writePaddingWithJavaIoWriter:outArg withInt:theDepth_ + 1];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:IOSObjectArray_Get(theChoices_, i)];
        if (html) {
          [self writeSpanWithJavaIoWriter:outArg withNSString:nil];
        }
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@","];
        [self writeCommentWithJavaIoWriter:outArg withNSString:IOSObjectArray_Get(nil_chk(theChoicesComments_), i) withBoolean:html];
        [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
      }
      if (html) {
        [self writeSpanWithJavaIoWriter:outArg withNSString:SPOTNode_spanCode_];
      }
      [self writePaddingWithJavaIoWriter:outArg withInt:theDepth_ + 1];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:IOSObjectArray_Get(theChoices_, i)];
      if (IOSObjectArray_Get(nil_chk(theChoicesComments_), i) != nil) {
        [self writeWithJavaIoWriter:outArg withBoolean:html withChar:' '];
      }
      if (html) {
        [self writeSpanWithJavaIoWriter:outArg withNSString:nil];
      }
      [self writeCommentWithJavaIoWriter:outArg withNSString:IOSObjectArray_Get(theChoicesComments_, i) withBoolean:html];
      [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
      [self writePaddingWithJavaIoWriter:outArg withInt:theDepth_];
      [self writeWithJavaIoWriter:outArg withBoolean:html withChar:'}'];
    }
  }
  else if ([self isContainer] || [elementType_ isEqual:SPOTNode_typeExtends_]) {
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@" {"];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:SPOTNode_lineSeparator_];
    [self childrenToStringWithJavaIoWriter:outArg withBoolean:html];
    writeXpos_ = 0;
    [self writePaddingWithJavaIoWriter:outArg withInt:theDepth_];
    [self writeWithJavaIoWriter:outArg withBoolean:html withChar:'}'];
  }
  if (theRange_ != nil) {
    [self writeModifierWithJavaIoWriter:outArg withNSString:@" Range" withBoolean:html];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:@"("];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:theRange_];
    [self writeWithJavaIoWriter:outArg withBoolean:html withChar:')'];
  }
  if (self->definedBy_ != nil) {
    [self writeModifierWithJavaIoWriter:outArg withNSString:@" DefinedBy " withBoolean:html];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:definedBy_];
  }
  if (self->defaultValue_ != nil) {
    [self writeModifierWithJavaIoWriter:outArg withNSString:@" Default " withBoolean:html];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:defaultValue_];
  }
  if (self->fixedValue_ != nil) {
    [self writeModifierWithJavaIoWriter:outArg withNSString:@" Value " withBoolean:html];
    [self writeWithJavaIoWriter:outArg withBoolean:html withNSString:fixedValue_];
  }
  if (isReference_) {
    [self writeModifierWithJavaIoWriter:outArg withNSString:@" Reference" withBoolean:html];
  }
  else if (isOptional_) {
    [self writeModifierWithJavaIoWriter:outArg withNSString:@" Optional" withBoolean:html];
  }
  else if (self->manditoryModifier_) {
    [self writeModifierWithJavaIoWriter:outArg withNSString:@" Manditory" withBoolean:html];
  }
  [self writeAttributesWithJavaIoWriter:outArg withBoolean:html];
}

- (NSString *)makeHTMLIndexEntryWithNSString:(NSString *)name
                                withNSString:(NSString *)file {
  return [NSString stringWithFormat:@"<li><a href=\"%@#%@\" target=\"definitions\">%@</a></li>", file, name, name];
}

- (NSString *)makeHTMLIndexTreeEntryWithNSString:(NSString *)name
                                    withNSString:(NSString *)file {
  return [NSString stringWithFormat:@"<p><img src=\"ftv2vertline.png\" alt=\"|\" width=16 height=22 /><img src=\"ftv2node.png\" alt=\"o\" width=16 height=22 /><img src=\"ftv2doc.png\" alt=\"*\" width=24 height=22 /><a class=\"el\" href=\"%@#%@\" target=\"basefrm\">%@</a></p>", file, name, name];
}

- (void)readBodyWithSPOTNode_MyReader:(SPOTNode_MyReader *)reader {
  NSString *s;
  SPOTNode *x = nil;
  IOSIntArray *thistok = [IOSIntArray arrayWithLength:2];
  IOSIntArray *tok;
  int n;
  RAREUTCharArray *line = [[RAREUTCharArray alloc] init];
  RAREUTCharScanner *scanner = [[RAREUTCharScanner alloc] init];
  [scanner setTrimCharsWithCharArray:SPOTNode_badChars_];
  BOOL curlystartfound;
  do {
    curlystartfound = NO;
    while ([self findTokenWithSPOTNode_MyReader:reader withChar:0x000a withRAREUTCharArray:line]) {
      (void) [self trimWithCharArray:line->A_ withInt:0 withInt:line->_length_ withIntArray:thistok];
      if (IOSIntArray_Get(thistok, 1) != 0) {
        break;
      }
    }
    (void) [line replaceWithChar:0x0009 withChar:' '];
    (void) [line replaceWithChar:0x000d withChar:' '];
    (void) [self trimWithCharArray:line->A_ withInt:0 withInt:line->_length_ withIntArray:thistok];
    if ((IOSIntArray_Get(thistok, 1) == 0) || (line->_length_ == 0) || ((IOSIntArray_Get(thistok, 1) == 1) && (IOSCharArray_Get(nil_chk(line->A_), IOSIntArray_Get(thistok, 0)) == '}'))) {
      break;
    }
    [scanner resetWithCharArray:line->A_ withInt:IOSIntArray_Get(thistok, 0) withInt:IOSIntArray_Get(thistok, 1) withBoolean:NO];
    tok = [scanner findTokenWithChar:' '];
    tok = [scanner trimWithIntArray:tok];
    if ((tok == nil) || (IOSIntArray_Get(tok, 1) == 0)) {
      continue;
    }
    if ((IOSIntArray_Get(nil_chk(tok), 1) == 1) && (IOSCharArray_Get(nil_chk(line->A_), IOSIntArray_Get(tok, 0)) == '}')) {
      (void) [scanner trim];
      line->_length_ = 0;
      [scanner getLeftOverCBWithRAREUTCharArray:line];
      if (line->_length_ > 0) {
        [self parseModifiersWithSPOTNode_MyReader:reader withCharArray:line->A_ withInt:0 withInt:line->_length_];
      }
      break;
    }
    x = [[SPOTNode alloc] initWithNSString:[self getNameTokenWithRAREUTCharScanner:scanner withIntArray:tok]];
    x->parentNode_ = self;
    (void) [scanner trim];
    tok = [scanner findTokenWithChar:' '];
    tok = [scanner stripWithIntArray:tok withCharArray:SPOTNode_badChars_];
    if ((tok == nil) || (IOSIntArray_Get(tok, 1) == 0)) {
      @throw [[SPOTException alloc] initWithNSString:@"Missing type for '%s' element" withNSString:x->elementName_];
    }
    if ([scanner getLastCharWithIntArray:tok] == '{') {
      curlystartfound = YES;
      (*IOSIntArray_GetRef(nil_chk(tok), 1))--;
      if (IOSIntArray_Get(tok, 1) == 0) {
        @throw [[SPOTException alloc] initWithNSString:@"Missing type for '%s' element" withNSString:x->elementName_];
      }
    }
    s = [self getNameTokenWithRAREUTCharScanner:scanner withIntArray:tok];
    n = [SPOTNode findTypeWithNSString:s];
    if (n != -1) {
      s = IOSObjectArray_Get(nil_chk(SPOTNode_theTypes_), n);
    }
    x->elementType_ = s;
    [self addElementWithSPOTNode:x];
    (void) [scanner trim];
    if ([((NSString *) nil_chk(x->elementType_)) equalsIgnoreCase:SPOTNode_typeExtends_]) {
      if (curlystartfound) {
        @throw [[SPOTException alloc] initWithNSString:SPOTNode_errMissingType_ withNSString:x->elementName_];
      }
      tok = [scanner findTokenWithChar:' '];
      if ((tok == nil) || (IOSIntArray_Get(tok, 1) == 0)) {
        continue;
      }
      x->extendsType_ = [self getNameTokenWithRAREUTCharScanner:scanner withIntArray:tok];
      (void) [scanner trim];
    }
    if ([x->elementType_ isEqual:SPOTNode_typeSequence_] || [x->elementType_ isEqual:SPOTNode_typeEnum_] || [x->elementType_ isEqual:SPOTNode_typeExtends_] || [x->elementType_ isEqual:SPOTNode_typeSet_]) {
      if (!!curlystartfound) {
        s = [scanner getLeftOver];
        if ((s == nil) || ([s sequenceLength] == 0)) {
          if (![self findTokenWithSPOTNode_MyReader:reader withChar:'{' withRAREUTCharArray:line]) {
            @throw [[SPOTException alloc] initWithNSString:SPOTNode_errMissingCurlyStart_ withNSString:x->elementName_];
          }
          (void) [self trimWithCharArray:line->A_ withInt:0 withInt:line->_length_ withIntArray:thistok];
          if (IOSIntArray_Get(thistok, 1) != 0) {
            @throw [[SPOTException alloc] initWithNSString:SPOTNode_errMissingCurlyStart_ withNSString:x->elementName_];
          }
        }
        else if (![s isEqual:@"{"]) {
          @throw [[SPOTException alloc] initWithNSString:SPOTNode_errMissingCurlyStart_ withNSString:x->elementName_];
        }
      }
      if ([x->elementType_ isEqual:SPOTNode_typeEnum_]) {
        [x parseEnumerationsWithSPOTNode_MyReader:reader];
      }
      else {
        [x readBodyWithSPOTNode_MyReader:reader];
      }
    }
    else {
      line->_length_ = 0;
      [scanner getLeftOverCBWithRAREUTCharArray:line];
      if (line->_length_ > 0) {
        [x parseModifiersWithSPOTNode_MyReader:reader withCharArray:line->A_ withInt:0 withInt:line->_length_];
      }
    }
  }
  while (YES);
  [self clean];
}

- (void)readExWithJavaIoReader:(JavaIoReader *)inArg {
  RAREUTCharArray *line = [[RAREUTCharArray alloc] init];
  RAREUTCharScanner *scanner = [[RAREUTCharScanner alloc] init];
  SPOTNode *x = nil;
  RAREUTCharArray *desc = [[RAREUTCharArray alloc] init];
  NSString *s;
  BOOL found;
  theDepth_ = -1;
  int i = -1;
  IOSIntArray *thistok;
  if (theReader_ == nil) {
    theReader_ = [[SPOTNode_MyReader alloc] initWithJavaIoReader:inArg];
  }
  do {
    i = -1;
    (void) [desc setLengthWithInt:0];
    while ([self findTokenWithSPOTNode_MyReader:theReader_ withChar:0x000a withRAREUTCharArray:line]) {
      s = [((NSString *) nil_chk([line description])) trim];
      if ([line startsWithWithNSString:@"#"]) {
        s = [((NSString *) nil_chk([((NSString *) nil_chk(s)) substring:1])) trim];
      }
      else if ([((NSString *) nil_chk(s)) hasPrefix:@"/**"]) {
        s = [((NSString *) nil_chk([s substring:3])) trim];
        if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
          continue;
        }
      }
      else if ([s hasPrefix:@"/*"]) {
        s = [((NSString *) nil_chk([s substring:2])) trim];
        if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
          continue;
        }
      }
      else if ([s hasPrefix:@"//"]) {
        s = [((NSString *) nil_chk([s substring:2])) trim];
        if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
          continue;
        }
      }
      else if ([s hasPrefix:@"*/"]) {
        continue;
      }
      else if ([s hasPrefix:@"*"]) {
        s = [((NSString *) nil_chk([s substring:1])) trim];
      }
      else if ((i = [line indexOfWithCharArray:SPOTNode_colonColonEq_ withInt:0]) != -1) {
        break;
      }
      if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
        continue;
      }
      (void) [desc appendWithNSString:s];
      (void) [desc appendWithNSString:SPOTNode_lineSeparator_];
    }
    if (i == -1) {
      break;
    }
    (void) [line replaceWithChar:0x0009 withChar:' '];
    (void) [line replaceWithChar:0x000d withChar:' '];
    [scanner resetWithCharArray:line->A_ withInt:0 withInt:line->_length_ withBoolean:NO];
    (void) [scanner trim];
    s = [self getNameTokenWithRAREUTCharScanner:scanner withChar:':'];
    if (s != nil) {
      s = [s trim];
      if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
        s = nil;
      }
    }
    if ((s == nil) || (([scanner read] != ':') || ([scanner read] != '='))) {
      continue;
    }
    x = [[SPOTNode alloc] initWithNSString:s];
    desc = [desc trim];
    if ([((RAREUTCharArray *) nil_chk(desc)) sequenceLength] != 0) {
      x->theDescription_ = [desc description];
    }
    (void) [scanner trim];
    thistok = [scanner findTokenWithChar:'{'];
    found = IOSIntArray_Get(nil_chk(thistok), 2) == '{';
    (void) [scanner trimWithIntArray:thistok];
    [scanner setPosAndLengthWithInt:IOSIntArray_Get(thistok, 0) withInt:IOSIntArray_Get(thistok, 1)];
    s = [self getNameTokenWithRAREUTCharScanner:scanner withChar:' '];
    if ((s == nil) || ([s sequenceLength] == 0)) {
      @throw [[SPOTException alloc] initWithNSString:SPOTNode_errInvalid_];
    }
    i = [SPOTNode findTypeWithNSString:s];
    if (i != -1) {
      s = IOSObjectArray_Get(nil_chk(SPOTNode_theTypes_), i);
    }
    x->elementType_ = s;
    x->parentNode_ = self;
    [self addElementWithSPOTNode:x];
    if ([((NSString *) nil_chk(s)) isEqual:SPOTNode_typeExtends_]) {
      s = [self getNameTokenWithRAREUTCharScanner:scanner withChar:' '];
      if ((s == nil) || ([s sequenceLength] == 0)) {
        @throw [[SPOTException alloc] initWithNSString:SPOTNode_errMissingType_ withNSString:x->elementName_];
      }
      x->extendsType_ = s;
    }
    else if ([s isEqual:SPOTNode_typeRefine_]) {
      s = [self getNameTokenWithRAREUTCharScanner:scanner withChar:' '];
      if ((s == nil) || ([s sequenceLength] == 0)) {
        @throw [[SPOTException alloc] initWithNSString:SPOTNode_errMissingType_ withNSString:x->elementName_];
      }
      x->isRefine_ = YES;
      x->extendsType_ = s;
    }
    (void) [scanner trim];
    int c = [scanner read];
    if (c == '#') {
      x->theComment_ = [scanner getLeftOver];
    }
    else if (c == '/') {
      if ([scanner read] == '/') {
        x->theComment_ = [scanner getLeftOver];
      }
    }
    if ([scanner getLength] != 0) {
      @throw [[SPOTException alloc] initWithNSString:SPOTNode_errInvalid_];
    }
    if (found) {
      [x readBodyWithSPOTNode_MyReader:theReader_];
    }
    else {
      if ((x->extendsType_ != nil) || [((NSString *) nil_chk(x->elementType_)) isEqual:SPOTNode_typeSequence_]) {
        while ([self findTokenWithSPOTNode_MyReader:theReader_ withChar:0x000a withRAREUTCharArray:line]) {
          (void) [self trimWithCharArray:line->A_ withInt:0 withInt:line->_length_ withIntArray:thistok];
          if (IOSIntArray_Get(thistok, 1) != 0) {
            break;
          }
          (*IOSIntArray_GetRef(thistok, 1)) = 0;
        }
      }
      if ((IOSIntArray_Get(thistok, 1) != 1) || (IOSCharArray_Get(nil_chk(line->A_), IOSIntArray_Get(thistok, 0)) != '{')) {
        @throw [[SPOTException alloc] initWithNSString:SPOTNode_errMissingCurlyStart_ withNSString:x->elementName_];
      }
      [x readBodyWithSPOTNode_MyReader:theReader_];
    }
  }
  while (YES);
}

- (BOOL)isValidNameWithCharArray:(IOSCharArray *)b
                         withInt:(int)pos
                         withInt:(int)len {
  if (![JavaLangCharacter isJavaIdentifierStartWithChar:IOSCharArray_Get(nil_chk(b), pos)]) {
    return NO;
  }
  for (int i = 1; i < len; i++) {
    if (![JavaLangCharacter isJavaIdentifierPartWithChar:IOSCharArray_Get(b, pos + i)]) {
      return NO;
    }
  }
  return YES;
}

+ (void)initialize {
  if (self == [SPOTNode class]) {
    SPOTNode_theTypes_ = [IOSObjectArray arrayWithObjects:(id[]){ @"PrintableString", @"OctetString", @"Set", @"Sequence", @"Any", @"UTCTime", @"Date", @"Time", @"Integer", @"Real", @"Enumerated", @"Extends", @"DateTime", @"Boolean", @"ByteString", @"Refine" } count:16 type:[IOSClass classWithClass:[NSString class]]];
    SPOTNode_padding_ = [IOSCharArray arrayWithLength:256];
    SPOTNode_quoteChar_ = [@"\"" toCharArray];
    SPOTNode_lcTypes_ = [[JavaUtilArrayList alloc] init];
    SPOTNode_colonColonEq_ = [@"::=" toCharArray];
    SPOTNode_badChars_ = [@"," toCharArray];
    {
      for (int i = 0; i < (int) [SPOTNode_theTypes_ count]; i++) {
        [SPOTNode_lcTypes_ addWithId:[((NSString *) IOSObjectArray_Get(SPOTNode_theTypes_, i)) lowercaseString]];
      }
      int len = (int) [SPOTNode_padding_ count];
      for (int i = 0; i < len; i++) {
        (*IOSCharArray_GetRef(SPOTNode_padding_, i)) = ' ';
      }
    }
  }
}

- (void)copyAllFieldsTo:(SPOTNode *)other {
  [super copyAllFieldsTo:other];
  other->childNodes_ = childNodes_;
  other->choiceList_ = choiceList_;
  other->commentList_ = commentList_;
  other->defaultValue_ = defaultValue_;
  other->definedBy_ = definedBy_;
  other->elementName_ = elementName_;
  other->elementType_ = elementType_;
  other->elementTypeAsInt_ = elementTypeAsInt_;
  other->extendsType_ = extendsType_;
  other->fixedValue_ = fixedValue_;
  other->isOptional_ = isOptional_;
  other->isProtected_ = isProtected_;
  other->isReadOnly_ = isReadOnly_;
  other->isReference_ = isReference_;
  other->isRefine_ = isRefine_;
  other->linkedData_ = linkedData_;
  other->manditoryModifier_ = manditoryModifier_;
  other->modLine_ = modLine_;
  other->modList_ = modList_;
  other->modScanner_ = modScanner_;
  other->nameMap_ = nameMap_;
  other->numList_ = numList_;
  other->parentNode_ = parentNode_;
  other->rootNode_ = rootNode_;
  other->theAttributes_ = theAttributes_;
  other->theChoices_ = theChoices_;
  other->theChoicesComments_ = theChoicesComments_;
  other->theComment_ = theComment_;
  other->theDepth_ = theDepth_;
  other->theDescription_ = theDescription_;
  other->theNumChoices_ = theNumChoices_;
  other->theRange_ = theRange_;
  other->theReader_ = theReader_;
  other->treePrefix_ = treePrefix_;
  other->userMap_ = userMap_;
  other->writeXpos_ = writeXpos_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoReader:", NULL, NULL, 0x1, "SPOTException" },
    { "addElementWithNSString:", NULL, "LSPOTNode", 0x1, NULL },
    { "addElementWithNSString:withNSString:", NULL, "LSPOTNode", 0x1, NULL },
    { "checkChoicesDefaultWithNSString:", NULL, "Z", 0x1, NULL },
    { "checkEnumDefaultWithNSString:", NULL, "Z", 0x1, NULL },
    { "elementAtWithInt:", NULL, "LSPOTNode", 0x1, NULL },
    { "elementForWithNSString:", NULL, "LSPOTNode", 0x1, NULL },
    { "leftJustifyWithInt:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "newLineWithJavaIoWriter:", NULL, "V", 0x9, "JavaIoIOException" },
    { "readWithJavaIoReader:", NULL, "V", 0x1, "SPOTException" },
    { "toStringWithJavaIoWriter:withBoolean:withNSString:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writePaddingWithJavaIoWriter:withInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "hasAttributes", NULL, "Z", 0x1, NULL },
    { "isBooleanType", NULL, "Z", 0x1, NULL },
    { "isNumericType", NULL, "Z", 0x1, NULL },
    { "isContainer", NULL, "Z", 0x1, NULL },
    { "isEnumType", NULL, "Z", 0x1, NULL },
    { "isSetType", NULL, "Z", 0x1, NULL },
    { "checkDefaults", NULL, "V", 0x0, NULL },
    { "cleanListWithJavaUtilList:", NULL, "LJavaUtilList", 0x0, NULL },
    { "dumpIndexWithNSString:withNSString:", NULL, "V", 0x0, NULL },
    { "dumpIndexTreeWithNSString:", NULL, "V", 0x0, NULL },
    { "dumpPathNamesWithJavaUtilMap:withNSString:withSPOTNode:", NULL, "V", 0x0, NULL },
    { "dumpSyntax", NULL, "V", 0x0, NULL },
    { "findTokenWithSPOTNode_MyReader:withChar:withRAREUTCharArray:", NULL, "Z", 0x10, NULL },
    { "handleAttributesWithJavaUtilList:withInt:withInt:withNSString:", NULL, "V", 0x0, NULL },
    { "indexOfWithCharArray:withInt:withInt:withChar:", NULL, "I", 0x8, NULL },
    { "parameterWithNSString:withInt:withJavaUtilList:", NULL, "LNSString", 0x0, NULL },
    { "parseChoicesWithSPOTNode_MyReader:", NULL, "V", 0x0, NULL },
    { "parseCommentWithRAREUTCharScanner:", NULL, "LNSString", 0x0, NULL },
    { "parseEnumerationsWithSPOTNode_MyReader:", NULL, "V", 0x0, NULL },
    { "parseModifiersWithSPOTNode_MyReader:withCharArray:withInt:withInt:", NULL, "V", 0x0, NULL },
    { "trimWithCharArray:withInt:withInt:withIntArray:", NULL, "LIOSIntArray", 0x0, NULL },
    { "writeWithJavaIoWriter:withBoolean:withChar:", NULL, "V", 0x0, "JavaIoIOException" },
    { "writeWithJavaIoWriter:withBoolean:withNSString:", NULL, "V", 0x0, "JavaIoIOException" },
    { "writeWithJavaIoWriter:withBoolean:withCharArray:withInt:withInt:", NULL, "V", 0x0, "JavaIoIOException" },
    { "writeAttributesWithJavaIoWriter:withBoolean:", NULL, "V", 0x0, NULL },
    { "writeCommentWithJavaIoWriter:withNSString:withBoolean:", NULL, "V", 0x0, NULL },
    { "writeDescriptionWithJavaIoWriter:withNSString:withBoolean:", NULL, "V", 0x0, NULL },
    { "writeHeadingWithJavaIoWriter:withNSString:withBoolean:", NULL, "V", 0x0, NULL },
    { "writeModifierWithJavaIoWriter:withNSString:withBoolean:", NULL, "V", 0x0, NULL },
    { "writePaddingWithJavaIoWriter:", NULL, "V", 0x0, "JavaIoIOException" },
    { "writePaddingWithJavaLangStringBuilder:withInt:", NULL, "V", 0x8, NULL },
    { "writeSpaceWithJavaIoWriter:withInt:", NULL, "V", 0x0, "JavaIoIOException" },
    { "writeSpanWithJavaIoWriter:withNSString:", NULL, "V", 0x0, NULL },
    { "writeTypeWithJavaIoWriter:withNSString:withBoolean:withBoolean:", NULL, "V", 0x0, NULL },
    { "getNameTokenWithRAREUTCharScanner:withChar:", NULL, "LNSString", 0x0, NULL },
    { "getNameTokenWithRAREUTCharScanner:withIntArray:", NULL, "LNSString", 0x0, NULL },
    { "isAutoReferenceWithSPOTNode:", NULL, "Z", 0x0, NULL },
    { "childrenToStringWithJavaIoWriter:withBoolean:", NULL, "V", 0x4, "JavaIoIOException" },
    { "clean", NULL, "V", 0x4, NULL },
    { "toStringExWithJavaIoWriter:withBoolean:", NULL, "V", 0x4, "JavaIoIOException" },
    { "makeHTMLIndexEntryWithNSString:withNSString:", NULL, "LNSString", 0x2, NULL },
    { "makeHTMLIndexTreeEntryWithNSString:withNSString:", NULL, "LNSString", 0x2, NULL },
    { "readBodyWithSPOTNode_MyReader:", NULL, "V", 0x2, "SPOTException" },
    { "readExWithJavaIoReader:", NULL, "V", 0x2, "SPOTException" },
    { "isValidNameWithCharArray:withInt:withInt:", NULL, "Z", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "keywordDefault_", NULL, 0x19, "LNSString" },
    { "keywordDefinedBy_", NULL, 0x19, "LNSString" },
    { "keywordManditory_", NULL, 0x19, "LNSString" },
    { "keywordOptional_", NULL, 0x19, "LNSString" },
    { "keywordRange_", NULL, 0x19, "LNSString" },
    { "keywordReference_", NULL, 0x19, "LNSString" },
    { "keyworkValue_", NULL, 0x19, "LNSString" },
    { "lineSeparator_", NULL, 0x19, "LNSString" },
    { "theTypes_", NULL, 0x19, "LIOSObjectArray" },
    { "typeAny_", NULL, 0x19, "LNSString" },
    { "typeBoolean_", NULL, 0x19, "LNSString" },
    { "typeByteString_", NULL, 0x19, "LNSString" },
    { "typeDate_", NULL, 0x19, "LNSString" },
    { "typeDateTime_", NULL, 0x19, "LNSString" },
    { "typeEnum_", NULL, 0x19, "LNSString" },
    { "typeExtends_", NULL, 0x19, "LNSString" },
    { "typeInteger_", NULL, 0x19, "LNSString" },
    { "typeOctetString_", NULL, 0x19, "LNSString" },
    { "typePrintableString_", NULL, 0x19, "LNSString" },
    { "typeReal_", NULL, 0x19, "LNSString" },
    { "typeRefine_", NULL, 0x19, "LNSString" },
    { "typeSequence_", NULL, 0x19, "LNSString" },
    { "typeSet_", NULL, 0x19, "LNSString" },
    { "typeTime_", NULL, 0x19, "LNSString" },
    { "errAlreadyDefined_", NULL, 0x18, "LNSString" },
    { "errInvalid_", NULL, 0x18, "LNSString" },
    { "errInvalidName_", NULL, 0x18, "LNSString" },
    { "errInvalidSize_", NULL, 0x18, "LNSString" },
    { "errMissingBy_", NULL, 0x18, "LNSString" },
    { "errMissingCurlyEnd_", NULL, 0x18, "LNSString" },
    { "errMissingCurlyStart_", NULL, 0x18, "LNSString" },
    { "errMissingType_", NULL, 0x18, "LNSString" },
    { "errMissingValue_", NULL, 0x18, "LNSString" },
    { "errWrongEndTag_", NULL, 0x18, "LNSString" },
    { "padding_", NULL, 0x18, "LIOSCharArray" },
    { "readBufferLen_", NULL, 0x18, "I" },
    { "spanCode_", NULL, 0x8, "LNSString" },
    { "spanComment_", NULL, 0x8, "LNSString" },
    { "spanDescription_", NULL, 0x8, "LNSString" },
    { "spanType_", NULL, 0x8, "LNSString" },
    { "spanUserType_", NULL, 0x8, "LNSString" },
    { "quoteChar_", NULL, 0x18, "LIOSCharArray" },
    { "lcTypes_", NULL, 0x8, "LJavaUtilList" },
    { "colonColonEq_", NULL, 0x18, "LIOSCharArray" },
    { "badChars_", NULL, 0x18, "LIOSCharArray" },
    { "isOptional_", NULL, 0x1, "Z" },
    { "isRefine_", NULL, 0x1, "Z" },
    { "isReference_", NULL, 0x1, "Z" },
    { "isReadOnly_", NULL, 0x1, "Z" },
    { "isProtected_", NULL, 0x1, "Z" },
    { "theDepth_", NULL, 0x1, "I" },
    { "userMap_", NULL, 0x1, "LJavaUtilHashMap" },
    { "childNodes_", NULL, 0x1, "LJavaUtilList" },
    { "defaultValue_", NULL, 0x1, "LNSString" },
    { "definedBy_", NULL, 0x1, "LNSString" },
    { "elementName_", NULL, 0x1, "LNSString" },
    { "elementType_", NULL, 0x1, "LNSString" },
    { "elementTypeAsInt_", NULL, 0x1, "I" },
    { "extendsType_", NULL, 0x1, "LNSString" },
    { "fixedValue_", NULL, 0x1, "LNSString" },
    { "parentNode_", NULL, 0x1, "LSPOTNode" },
    { "theAttributes_", NULL, 0x1, "LJavaUtilLinkedHashMap" },
    { "theChoices_", NULL, 0x1, "LIOSObjectArray" },
    { "theChoicesComments_", NULL, 0x1, "LIOSObjectArray" },
    { "theComment_", NULL, 0x1, "LNSString" },
    { "theDescription_", NULL, 0x1, "LNSString" },
    { "theNumChoices_", NULL, 0x1, "LIOSIntArray" },
    { "theRange_", NULL, 0x1, "LNSString" },
    { "linkedData_", NULL, 0x1, "LNSObject" },
    { "writeXpos_", NULL, 0x0, "I" },
    { "choiceList_", NULL, 0x0, "LJavaUtilList" },
    { "commentList_", NULL, 0x0, "LJavaUtilList" },
    { "manditoryModifier_", NULL, 0x0, "Z" },
    { "modLine_", NULL, 0x0, "LRAREUTCharArray" },
    { "modList_", NULL, 0x0, "LJavaUtilList" },
    { "modScanner_", NULL, 0x0, "LRAREUTCharScanner" },
    { "nameMap_", NULL, 0x0, "LJavaUtilHashMap" },
    { "numList_", NULL, 0x0, "LRAREUTIntList" },
    { "rootNode_", NULL, 0x0, "LSPOTNode" },
    { "theReader_", NULL, 0x0, "LSPOTNode_MyReader" },
    { "treePrefix_", NULL, 0x12, "LNSString" },
  };
  static J2ObjcClassInfo _SPOTNode = { "SPOTNode", "com.appnativa.spot", NULL, 0x1, 57, methods, 81, fields, 0, NULL};
  return &_SPOTNode;
}

@end
@implementation SPOTNode_MyReader

- (id)initWithJavaIoReader:(JavaIoReader *)inArg {
  if (self = [super init]) {
    nextChar_ = 0;
    self->in_ = inArg;
  }
  return self;
}

- (void)clear {
  nextChar_ = 0;
}

- (int)read {
  if (nextChar_ == 0) {
    return [((JavaIoReader *) nil_chk(in_)) read];
  }
  int c = nextChar_;
  nextChar_ = 0;
  return c;
}

- (void)copyAllFieldsTo:(SPOTNode_MyReader *)other {
  [super copyAllFieldsTo:other];
  other->in_ = in_;
  other->nextChar_ = nextChar_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoReader:", NULL, NULL, 0x0, NULL },
    { "clear", NULL, "V", 0x0, NULL },
    { "read", NULL, "I", 0x0, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "nextChar_", NULL, 0x0, "I" },
    { "in_", NULL, 0x0, "LJavaIoReader" },
  };
  static J2ObjcClassInfo _SPOTNode_MyReader = { "MyReader", "com.appnativa.spot", "SPOTNode", 0x8, 3, methods, 2, fields, 0, NULL};
  return &_SPOTNode_MyReader;
}

@end
