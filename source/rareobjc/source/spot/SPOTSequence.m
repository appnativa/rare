//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../spot/src/com/appnativa/spot/SPOTSequence.java
//
//  Created by decoteaud on 7/29/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/spot/NoNullLinkedHashMap.h"
#include "com/appnativa/spot/SDFNode.h"
#include "com/appnativa/spot/SPOTException.h"
#include "com/appnativa/spot/SPOTHelper.h"
#include "com/appnativa/spot/SPOTSequence.h"
#include "com/appnativa/spot/aSPOTElement.h"
#include "com/appnativa/spot/iSPOTConstants.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/spot/iSPOTTemplateHandler.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/appnativa/util/aStreamer.h"
#include "com/appnativa/util/iStructuredNode.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation SPOTSequence

static JavaUtilHashMap * SPOTSequence_EMPTY_MAP_;
static BOOL SPOTSequence_OPTIMIZE_RUNTIME_;

+ (JavaUtilHashMap *)EMPTY_MAP {
  return SPOTSequence_EMPTY_MAP_;
}

+ (void)setEMPTY_MAP:(JavaUtilHashMap *)EMPTY_MAP {
  SPOTSequence_EMPTY_MAP_ = EMPTY_MAP;
}

+ (BOOL)OPTIMIZE_RUNTIME {
  return SPOTSequence_OPTIMIZE_RUNTIME_;
}

- (id)init {
  return [self initSPOTSequenceWithBoolean:YES];
}

- (id)initSPOTSequenceWithBoolean:(BOOL)optional {
  if (self = [super init]) {
    _theElements_ = [[RAREUTIdentityArrayList alloc] init];
    _outputEmptyXML_ = NO;
    _nameMap_ = SPOTSequence_EMPTY_MAP_;
    attributeSizeHint_ = 0;
    elementsSizeHint_ = 0;
    _isOptional_ = optional;
  }
  return self;
}

- (id)initWithBoolean:(BOOL)optional {
  return [self initSPOTSequenceWithBoolean:optional];
}

- (id)initWithBoolean:(BOOL)optional
          withBoolean:(BOOL)setelements {
  if (self = [super init]) {
    _theElements_ = [[RAREUTIdentityArrayList alloc] init];
    _outputEmptyXML_ = NO;
    _nameMap_ = SPOTSequence_EMPTY_MAP_;
    attributeSizeHint_ = 0;
    elementsSizeHint_ = 0;
    _isOptional_ = optional;
  }
  return self;
}

- (id)clone {
  @try {
    SPOTSequence *e = (SPOTSequence *) check_class_cast([[self getClass] newInstance], [SPOTSequence class]);
    ((SPOTSequence *) nil_chk(e))->_isReadOnly_ = NO;
    e->_isOptional_ = _isOptional_;
    e->_theName_ = _theName_;
    e->_footerComment_ = _footerComment_;
    e->_headerComment_ = _headerComment_;
    e->_allowInvalidAttributes_ = _allowInvalidAttributes_;
    e->_outputEmptyXML_ = _outputEmptyXML_;
    if (_refClassMap_ != nil) {
      e->_refClassMap_ = (JavaUtilHashMap *) check_class_cast([_refClassMap_ clone], [JavaUtilHashMap class]);
    }
    if (_attributes_ != nil) {
      e->_attributes_ = [[NoNullLinkedHashMap alloc] initWithJavaUtilMap:_attributes_];
    }
    if (_defAttributes_ != nil) {
      e->_defAttributes_ = [[JavaUtilLinkedHashMap alloc] initWithJavaUtilMap:_defAttributes_];
    }
    e->_attributeSet_ = self->_attributeSet_;
    [e spot_copySharedMemberValuesWithSPOTSequence:self];
    return e;
  }
  @catch (JavaLangException *ex) {
    if ([ex isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) check_class_cast(ex, [JavaLangRuntimeException class]);
    }
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:ex];
  }
}

- (BOOL)isEqual:(id)element {
  if (element == self) {
    return YES;
  }
  if (!([element isKindOfClass:[SPOTSequence class]])) {
    return NO;
  }
  SPOTSequence *seq = (SPOTSequence *) check_class_cast(element, [SPOTSequence class]);
  if (![((NSString *) nil_chk([((SPOTSequence *) nil_chk(seq)) spot_getClassName])) isEqual:[self spot_getClassName]]) {
    return NO;
  }
  RAREUTIdentityArrayList *elements = ((SPOTSequence *) nil_chk(element))->_theElements_;
  int len = [((RAREUTIdentityArrayList *) nil_chk(elements)) size];
  if (len != [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size]) {
    return NO;
  }
  if (![aSPOTElement spot_attributesEqualWithISPOTElement:self withISPOTElement:(id<iSPOTElement>) check_protocol_cast(element, @protocol(iSPOTElement))]) {
    return NO;
  }
  for (int i = 0; i < len; i++) {
    id<iSPOTElement> o1 = (id<iSPOTElement>) check_protocol_cast([elements getWithInt:i], @protocol(iSPOTElement));
    id<iSPOTElement> o2 = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:i], @protocol(iSPOTElement));
    if ((o1 == nil) || (o2 == nil)) {
      if (o1 != o2) {
        return NO;
      }
    }
    else {
      if (([o2 spot_valueWasSet] || [o1 spot_valueWasSet]) && ![o1 isEqual:o2]) {
        return NO;
      }
    }
  }
  return YES;
}

- (BOOL)fromSDFWithSDFNode:(SDFNode *)node {
  if (node == nil) {
    return NO;
  }
  if (!SPOTSequence_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  _linkedData_ = [((SDFNode *) nil_chk(node)) getLinkedData];
  _footerComment_ = node->nodeComment_;
  id<iSPOTTemplateHandler> th = [self spot_getTemplateHandler];
  if (th != nil) {
    [th applyTemplateWithSPOTSequence:self withRAREUTiStructuredNode:node];
  }
  @try {
    if ([node hasAttributes]) {
      if (_attributes_ == nil) {
        [self createAttributesMap];
      }
      [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putAllWithJavaUtilMap:[node getNodeAttributes]];
      _attributeSet_ = YES;
    }
    if ([node hasChildren]) {
      NSString *name;
      id<iSPOTElement> ti = nil;
      id<JavaUtilList> nodes = [node getChildNodes];
      int len = [((id<JavaUtilList>) nil_chk(nodes)) size];
      int n;
      NSString *subname = nil;
      id<JavaUtilList> list = nil;
      for (int i = 0; i < len; i++) {
        node = (SDFNode *) check_class_cast([nodes getWithInt:i], [SDFNode class]);
        if ([((SDFNode *) nil_chk(node)) getNodeType] == SDFNode_NODETYPE_COMMENT) {
          if (list == nil) {
            list = [[JavaUtilArrayList alloc] init];
          }
          [((id<JavaUtilList>) nil_chk(list)) addWithId:[node getNodeName]];
          continue;
        }
        name = [node getNodeName];
        n = (name == nil) ? -1 : [name indexOf:'-'];
        if (n != -1) {
          subname = [((NSString *) nil_chk(name)) substring:n + 1];
          name = [name substring:0 endIndex:n];
        }
        ti = [self spot_elementFromNameWithNSString:name];
        if (n != -1) {
          node = [node createBlockFromThisWithNSString:name withNSString:subname];
        }
        if (ti != nil) {
          if (![ti fromSDFWithSDFNode:node]) {
            return NO;
          }
          if ((list != nil) && ([list size] > 0)) {
            [ti spot_setHeaderCommentsWithNSStringArray:(IOSObjectArray *) check_class_cast([list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:[IOSClass classWithClass:[NSString class]]]], [IOSObjectArray class])];
            [list clear];
          }
        }
      }
    }
    return YES;
  }
  @finally {
    if (th != nil) {
      [th popContextTemplateWithSPOTSequence:self];
    }
  }
}

- (void)fromStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if (!SPOTSequence_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  int n = [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size];
  id<iSPOTElement> ti = nil;
  if (n > 0) {
    for (int i = 0; i < n; i++) {
      if ([RAREUTaStreamer readBooleanWithJavaIoInputStream:inArg]) {
        ti = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:i], @protocol(iSPOTElement));
        [((id<iSPOTElement>) nil_chk(ti)) fromStreamWithJavaIoInputStream:inArg];
      }
    }
  }
}

- (BOOL)fromStructuredNodeWithRAREUTiStructuredNode:(id<RAREUTiStructuredNode>)node {
  if (node == nil) {
    return NO;
  }
  if (!SPOTSequence_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  _linkedData_ = [((id<RAREUTiStructuredNode>) nil_chk(node)) getLinkedData];
  _footerComment_ = [node getComment];
  id<iSPOTTemplateHandler> th = [self spot_getTemplateHandler];
  if (th != nil) {
    [th applyTemplateWithSPOTSequence:self withRAREUTiStructuredNode:node];
  }
  @try {
    if ([node hasAttributes]) {
      if (_attributes_ == nil) {
        [self createAttributesMap];
      }
      [node copyAttributesWithJavaUtilMap:_attributes_];
      _attributeSet_ = YES;
    }
    _theName_ = [node getName];
    NSString *name = nil;
    id<iSPOTElement> ti = nil;
    node = [node getFirstSignificantChild];
    if (node != nil) {
      do {
        name = [node getName];
        ti = [self spot_elementFromNameWithNSString:name];
        if (ti != nil) {
          if (![ti fromStructuredNodeWithRAREUTiStructuredNode:node]) {
            return NO;
          }
        }
      }
      while ((node = [node getNextSibling]) != nil);
    }
    return YES;
  }
  @finally {
    if (th != nil) {
      [th popContextTemplateWithSPOTSequence:self];
    }
  }
}

- (NSUInteger)hash {
  return [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) hash];
}

- (void)spot_addAttributesWithJavaUtilMap:(id<JavaUtilMap>)map {
  if ((map != nil) && ([map size] > 0)) {
    if (_attributes_ == nil) {
      [self createAttributesMap];
    }
    [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putAllWithJavaUtilMap:map];
    _attributeSet_ = YES;
  }
}

- (void)spot_addElementWithNSString:(NSString *)name
                   withISPOTElement:(id<iSPOTElement>)element {
  if (!SPOTSequence_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  if (_nameMap_ == SPOTSequence_EMPTY_MAP_) {
    _nameMap_ = [[JavaUtilHashMap alloc] initWithInt:(elementsSizeHint_ > 5) ? elementsSizeHint_ * 2 : 10 withFloat:1];
  }
  if (element == nil) {
    JavaLangInteger *in = [JavaLangInteger valueOfWithInt:[((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size]];
    (void) [((JavaUtilHashMap *) nil_chk(_nameMap_)) putWithId:name withId:in];
    [_theElements_ addWithId:nil];
    if (_nullMap_ == nil) {
      _nullMap_ = [[JavaUtilHashMap alloc] init];
    }
    (void) [((JavaUtilHashMap *) nil_chk(_nullMap_)) putWithId:in withId:name];
  }
  else {
    [element spot_setParentWithISPOTElement:self];
    if ([((JavaUtilHashMap *) nil_chk(_nameMap_)) putWithId:name withId:element] != element) {
      [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) addWithId:element];
      [element spot_setNameWithNSString:name];
    }
  }
}

- (void)spot_applyTemplateWithSPOTSequence:(SPOTSequence *)seq {
  if (!SPOTSequence_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  int n = [((RAREUTIdentityArrayList *) nil_chk(((SPOTSequence *) nil_chk(seq))->_theElements_)) size];
  NSString *name = nil;
  id<iSPOTElement> ti = nil;
  id<iSPOTElement> ti2 = nil;
  for (int i = 0; i < n; i++) {
    ti = (id<iSPOTElement>) check_protocol_cast([seq->_theElements_ getWithInt:i], @protocol(iSPOTElement));
    if (ti != nil) {
      name = [ti spot_getName];
      ti2 = [self spot_elementForWithNSString:name];
      if (ti2 != nil) {
        [ti2 spot_copyWithISPOTElement:ti withBoolean:YES];
      }
      else if ([((JavaUtilHashMap *) nil_chk(_nameMap_)) containsKeyWithId:name]) {
        [self spot_setReferenceVariableWithNSString:name withISPOTElement:(id<iSPOTElement>) check_protocol_cast([ti clone], @protocol(iSPOTElement))];
      }
    }
  }
}

- (BOOL)spot_attributesWereSet {
  return _attributeSet_;
}

- (int)spot_checkRangeValidity {
  int n = [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size];
  int ret = 0;
  id<iSPOTElement> ti;
  BOOL hasNonOptionNull = NO;
  BOOL hasFieldSet = NO;
  RAREUTIdentityArrayList *refs = _references_;
  BOOL reference;
  for (int i = 0; i < n; i++) {
    ti = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:i], @protocol(iSPOTElement));
    reference = (ti != nil) && (refs != nil) && [refs containsWithId:ti];
    ret = (ti == nil) ? iSPOTConstants_VALUE_NULL_AND_OPTIONAL : [ti spot_checkRangeValidity];
    switch (ret) {
      case iSPOTConstants_VALUE_TO_BIG:
      case iSPOTConstants_VALUE_TO_SMALL:
      case iSPOTConstants_VALUE_INVALID_CHILD:
      case iSPOTConstants_VALUE_MISSING_REQUIRED_ATTTRIBUTES:
      return ret;
      case iSPOTConstants_VALUE_NULL:
      if (!reference) {
        if (hasFieldSet) {
          return iSPOTConstants_VALUE_NULL;
        }
        hasNonOptionNull = YES;
        break;
      }
      case iSPOTConstants_VALUE_NULL_AND_OPTIONAL:
      case iSPOTConstants_VALUE_NULL_WITH_DEFAULT:
      if (!reference) {
        continue;
      }
      default:
      if (hasNonOptionNull) {
        return iSPOTConstants_VALUE_NULL;
      }
      hasFieldSet = YES;
      break;
    }
  }
  if ([self spot_attributesWereSet]) {
    hasFieldSet = YES;
  }
  if (_isOptional_ && !hasFieldSet) {
    return iSPOTConstants_VALUE_NULL_AND_OPTIONAL;
  }
  return (!hasFieldSet) ? iSPOTConstants_VALUE_NULL : iSPOTConstants_VALUE_OK;
}

- (NSString *)spot_checkRangeValidityStr {
  if (![aSPOTElement spot_requiredAttributesWereSetWithJavaUtilMap:_attributes_ withJavaUtilSet:_requiredAttributes_]) {
    return [RAREUTHelper expandStringWithNSString:[iSPOTConstants STR_MISSING_ATTRIBUTES] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [self spot_getName], [aSPOTElement spot_getMissingReqiredAttributesWithJavaUtilMap:_attributes_ withJavaUtilSet:_requiredAttributes_] } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  }
  int n = [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size];
  int ret = 0;
  id<iSPOTElement> ti;
  BOOL hasNonOptionalNull = NO;
  BOOL hasFieldSet = NO;
  int hasNonOptionalNullIndex = -1;
  for (int i = 0; i < n; i++) {
    ti = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:i], @protocol(iSPOTElement));
    ret = (ti == nil) ? iSPOTConstants_VALUE_NULL_AND_OPTIONAL : [ti spot_checkRangeValidity];
    switch (ret) {
      case iSPOTConstants_VALUE_TO_SMALL:
      case iSPOTConstants_VALUE_TO_BIG:
      case iSPOTConstants_VALUE_INVALID_CHILD:
      case iSPOTConstants_VALUE_MISSING_REQUIRED_ATTTRIBUTES:
      return [((id<iSPOTElement>) nil_chk(ti)) spot_checkRangeValidityStr];
      case iSPOTConstants_VALUE_NULL:
      if (hasFieldSet) {
        if (hasNonOptionalNullIndex == -1) {
          hasNonOptionalNullIndex = i;
        }
        ti = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:hasNonOptionalNullIndex], @protocol(iSPOTElement));
        return [((id<iSPOTElement>) nil_chk(ti)) spot_checkRangeValidityStr];
      }
      hasNonOptionalNull = YES;
      hasNonOptionalNullIndex = i;
      break;
      case iSPOTConstants_VALUE_NULL_AND_OPTIONAL:
      case iSPOTConstants_VALUE_NULL_WITH_DEFAULT:
      continue;
      default:
      if (hasNonOptionalNull) {
        ti = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:hasNonOptionalNullIndex], @protocol(iSPOTElement));
        return [((id<iSPOTElement>) nil_chk(ti)) spot_checkRangeValidityStr];
      }
      hasFieldSet = YES;
      break;
    }
  }
  if (_isOptional_ && !hasFieldSet) {
    return nil;
  }
  return (!hasFieldSet) ? [RAREUTHelper expandStringWithNSString:[iSPOTConstants STR_NULL] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [self spot_getName] } count:1 type:[IOSClass classWithClass:[NSString class]]]] : nil;
}

- (void)spot_cleanAttributes {
  if (_attributes_ != nil) {
    if ([RAREUTHelper valuesEqualsWithJavaUtilMap:_attributes_ withJavaUtilMap:_defAttributes_]) {
      _attributeSet_ = NO;
    }
  }
}

- (void)spot_clear {
  id<iSPOTElement> ti = nil;
  if ((_references_ != nil) && ([_references_ size] > 0)) {
    int len = [_references_ size] - 1;
    for (int i = len; i >= 0; i--) {
      id<iSPOTElement> e = (id<iSPOTElement>) check_protocol_cast([_references_ getWithInt:i], @protocol(iSPOTElement));
      [self spot_setReferenceVariableWithNSString:[((id<iSPOTElement>) nil_chk(e)) spot_getName] withISPOTElement:nil];
    }
  }
  int len = [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size];
  for (int i = 0; i < len; i++) {
    ti = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:i], @protocol(iSPOTElement));
    if (ti != nil) {
      [ti spot_clear];
    }
  }
  [self spot_resetAttributes];
}

- (void)spot_clearAttributes {
  if (_attributes_ != nil) {
    [_attributes_ clear];
  }
  _attributes_ = nil;
  _attributeSet_ = NO;
}

- (void)spot_clearReferenceVariableWithISPOTElement:(id<iSPOTElement>)e {
  if ((e == nil) || (_references_ == nil) || [_references_ isEmpty]) {
    return;
  }
  int n = [((RAREUTIdentityArrayList *) nil_chk(_references_)) indexOfWithId:e];
  if (n != -1) {
    [self spot_setReferenceVariableWithNSString:[((id<iSPOTElement>) nil_chk(e)) spot_getName] withISPOTElement:nil];
  }
}

- (void)spot_copyWithISPOTElement:(id<iSPOTElement>)element {
  [self spot_copyWithISPOTElement:element withBoolean:NO];
}

- (void)spot_copyWithISPOTElement:(id<iSPOTElement>)element
                      withBoolean:(BOOL)newinstance {
  if (!([(id) element isKindOfClass:[SPOTSequence class]])) {
    return;
  }
  if (!newinstance) {
    if (!SPOTSequence_OPTIMIZE_RUNTIME_) {
      [self checkReadOnly];
    }
    [self spot_clear];
  }
  SPOTSequence *e = (SPOTSequence *) check_class_cast(element, [SPOTSequence class]);
  [self spot_copySharedMemberValuesExWithSPOTSequence:e];
  self->_isReadOnly_ = NO;
  self->_isOptional_ = ((SPOTSequence *) nil_chk(e))->_isOptional_;
  self->_theName_ = e->_theName_;
  self->_footerComment_ = e->_footerComment_;
  self->_headerComment_ = e->_headerComment_;
  self->_linkedData_ = e->_linkedData_;
  self->_allowInvalidAttributes_ = e->_allowInvalidAttributes_;
  self->_outputEmptyXML_ = e->_outputEmptyXML_;
  if (e->_attributes_ != nil) {
    self->_attributes_ = [[NoNullLinkedHashMap alloc] initWithJavaUtilMap:e->_attributes_];
  }
  if (!newinstance && (e->_defAttributes_ != nil)) {
    self->_defAttributes_ = [[JavaUtilLinkedHashMap alloc] initWithJavaUtilMap:e->_defAttributes_];
  }
  self->_attributeSet_ = e->_attributeSet_;
}

- (void)spot_copySharedMemberValuesWithJavaUtilList:(id<JavaUtilList>)list {
  if (!SPOTSequence_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  int n = (list == nil) ? 0 : [list size];
  NSString *name = nil;
  id<iSPOTElement> ti = nil;
  id<iSPOTElement> ti2 = nil;
  for (int i = 0; i < n; i++) {
    ti = (id<iSPOTElement>) check_protocol_cast([((id<JavaUtilList>) nil_chk(list)) getWithInt:i], @protocol(iSPOTElement));
    if (ti != nil) {
      name = [ti spot_getName];
      ti2 = [self spot_elementForWithNSString:name];
      if (ti2 != nil) {
        [ti2 spot_copyWithISPOTElement:ti withBoolean:YES];
      }
      else if ([((JavaUtilHashMap *) nil_chk(_nameMap_)) containsKeyWithId:name]) {
        [self spot_setReferenceVariableWithNSString:name withISPOTElement:(id<iSPOTElement>) check_protocol_cast([ti clone], @protocol(iSPOTElement))];
      }
    }
  }
}

- (void)spot_copySharedMemberValuesWithSPOTSequence:(SPOTSequence *)seq {
  [self spot_copySharedMemberValuesWithJavaUtilList:((SPOTSequence *) nil_chk(seq))->_theElements_];
}

- (void)spot_copySharedMemberValuesExWithJavaUtilList:(id<JavaUtilList>)list {
  if (!SPOTSequence_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  int n = (list == nil) ? 0 : [list size];
  NSString *name = nil;
  id<iSPOTElement> ti = nil;
  id<iSPOTElement> ti2 = nil;
  for (int i = 0; i < n; i++) {
    ti = (id<iSPOTElement>) check_protocol_cast([((id<JavaUtilList>) nil_chk(list)) getWithInt:i], @protocol(iSPOTElement));
    if ((ti != nil) && [ti spot_valueWasSet]) {
      name = [ti spot_getName];
      ti2 = [self spot_elementForWithNSString:name];
      if (ti2 != nil) {
        [ti2 spot_copyWithISPOTElement:ti withBoolean:YES];
      }
      else if ([((JavaUtilHashMap *) nil_chk(_nameMap_)) containsKeyWithId:name]) {
        [self spot_setReferenceVariableWithNSString:name withISPOTElement:(id<iSPOTElement>) check_protocol_cast([ti clone], @protocol(iSPOTElement))];
      }
    }
  }
}

- (void)spot_copySharedMemberValuesExWithSPOTSequence:(SPOTSequence *)seq {
  [self spot_copySharedMemberValuesExWithJavaUtilList:((SPOTSequence *) nil_chk(seq))->_theElements_];
}

- (void)spot_defineAttributesWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  if (!SPOTSequence_OPTIMIZE_RUNTIME_) {
    if (_defAttributes_ == nil) {
      _defAttributes_ = [[NoNullLinkedHashMap alloc] initWithInt:(attributeSizeHint_ > 5) ? attributeSizeHint_ : 10];
    }
  }
  if (_attributes_ == nil) {
    _attributes_ = [[NoNullLinkedHashMap alloc] init];
  }
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> e = [it next];
    id key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
    id value = [e getValue];
    if (_defAttributes_ != nil) {
      (void) [_defAttributes_ putWithId:key withId:value];
    }
    if (value != nil) {
      (void) [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putWithId:key withId:value];
    }
  }
}

- (void)spot_defineAttributeWithNSString:(NSString *)name
                            withNSString:(NSString *)defaultValue {
  if (!SPOTSequence_OPTIMIZE_RUNTIME_ || (defaultValue != nil)) {
    if (_defAttributes_ == nil) {
      _defAttributes_ = [[JavaUtilLinkedHashMap alloc] initWithInt:(attributeSizeHint_ > 5) ? attributeSizeHint_ : 10];
    }
    name = [self spot_handleRequiredAttributeWithNSString:name];
    (void) [((JavaUtilLinkedHashMap *) nil_chk(_defAttributes_)) putWithId:name withId:defaultValue];
  }
  if (defaultValue != nil) {
    if (_attributes_ == nil) {
      _attributes_ = [[NoNullLinkedHashMap alloc] init];
    }
    (void) [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putWithId:name withId:defaultValue];
  }
}

- (id<iSPOTElement>)spot_elementAtWithInt:(int)pos {
  return (id<iSPOTElement>) check_protocol_cast([((RAREUTIdentityArrayList *) nil_chk(_theElements_)) getWithInt:pos], @protocol(iSPOTElement));
}

- (id<iSPOTElement>)spot_elementForWithNSString:(NSString *)name {
  id o = [((JavaUtilHashMap *) nil_chk(_nameMap_)) getWithId:name];
  if ((o == nil) || ([o isKindOfClass:[JavaLangInteger class]])) {
    return nil;
  }
  return (id<iSPOTElement>) check_protocol_cast(o, @protocol(iSPOTElement));
}

- (id<iSPOTElement>)spot_elementForExWithNSString:(NSString *)name {
  return [self spot_elementFromNameWithNSString:name];
}

- (id<iSPOTElement>)spot_elementValue {
  return self;
}

- (BOOL)spot_equalsWithISPOTElement:(id<iSPOTElement>)e {
  return e == self;
}

- (NSString *)spot_getAttributeWithNSString:(NSString *)attribute {
  if (_attributes_ == nil) {
    return nil;
  }
  return (NSString *) check_class_cast([((NoNullLinkedHashMap *) nil_chk(_attributes_)) getWithId:attribute], [NSString class]);
}

- (int)spot_getAttributeCount {
  return (_attributes_ == nil) ? 0 : [_attributes_ size];
}

- (NSString *)spot_getAttributeDefaultValueWithNSString:(NSString *)name {
  return (NSString *) check_class_cast(((_defAttributes_ == nil) ? nil : [_defAttributes_ getWithId:name]), [NSString class]);
}

- (id<JavaUtilMap>)spot_getAttributes {
  return (_attributes_ == nil) ? nil : [JavaUtilCollections unmodifiableMapWithJavaUtilMap:_attributes_];
}

- (id<JavaUtilMap>)spot_getAttributesEx {
  return _attributes_;
}

- (NSString *)spot_getClassName {
  return [[self getClass] getName];
}

- (NSString *)spot_getClassShortName {
  return [aSPOTElement spot_getClassShortNameWithIOSClass:[self getClass]];
}

- (int)spot_getCount {
  return [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size];
}

- (NSString *)spot_getFooterComment {
  return _footerComment_;
}

- (IOSObjectArray *)spot_getHeaderComments {
  return _headerComment_;
}

- (id)spot_getLinkedData {
  return _linkedData_;
}

- (NSString *)spot_getName {
  if (_theName_ == nil) {
    _theName_ = [[self getClass] getName];
    int i = [((NSString *) nil_chk(_theName_)) lastIndexOf:'.'];
    if (i != -1) {
      JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] initWithNSString:_theName_];
      [buf setCharAtWithInt:i withChar:':'];
      _theName_ = [buf description];
    }
  }
  return _theName_;
}

- (NSString *)spot_getNameAtWithInt:(int)pos {
  id<iSPOTElement> x = (id<iSPOTElement>) check_protocol_cast([((RAREUTIdentityArrayList *) nil_chk(_theElements_)) getWithInt:pos], @protocol(iSPOTElement));
  if (x != nil) {
    return [x spot_getName];
  }
  id<JavaUtilMap_Entry> e;
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(_nameMap_)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    e = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
    if ([[((id<JavaUtilMap_Entry>) nil_chk(e)) getValue] isKindOfClass:[JavaLangInteger class]]) {
      if (([(JavaLangInteger *) check_class_cast([e getValue], [JavaLangInteger class]) intValue] == pos)) {
        return (NSString *) check_class_cast([e getKey], [NSString class]);
      }
    }
  }
  return nil;
}

- (NSString *)spot_getPackageName {
  if (_thePackageName_ == nil) {
    _thePackageName_ = [SPOTHelper getPackageNameWithIOSClass:[self getClass]];
  }
  return _thePackageName_;
}

- (id<iSPOTElement>)spot_getParent {
  return _parentElement_;
}

- (IOSObjectArray *)spot_getRange {
  return nil;
}

- (id<JavaUtilList>)spot_getSortedElements {
  RAREUTIdentityArrayList *list = [[RAREUTIdentityArrayList alloc] initWithJavaUtilCollection:_theElements_];
  id<JavaUtilComparator> c = [[SPOTSequence_$1 alloc] init];
  [JavaUtilCollections sortWithJavaUtilList:list withJavaUtilComparator:c];
  return list;
}

- (id<JavaUtilMap>)spot_getSupportedAttributes {
  return (_defAttributes_ == nil) ? nil : [JavaUtilCollections unmodifiableMapWithJavaUtilMap:_defAttributes_];
}

- (id<iSPOTTemplateHandler>)spot_getTemplateHandler {
  if (_templateHandler_ != nil) {
    return _templateHandler_;
  }
  return (_parentElement_ == nil) ? nil : [_parentElement_ spot_getTemplateHandler];
}

- (int)spot_getType {
  return iSPOTConstants_SPOT_TYPE_SEQUENCE;
}

- (NSString *)spot_getValidityRange {
  return @"";
}

- (id)spot_getValue {
  return nil;
}

- (id)spot_getValueWithNSString:(NSString *)name {
  id<iSPOTElement> e = [self spot_elementForWithNSString:name];
  return (e == nil) ? nil : [e spot_getValue];
}

- (void)spot_getValuesThatWereSetWithJavaUtilList:(id<JavaUtilList>)list {
  int n = [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size];
  id<iSPOTElement> ti = nil;
  for (int i = 0; i < n; i++) {
    ti = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:i], @protocol(iSPOTElement));
    if ((ti != nil) && [ti spot_valueWasSet]) {
      [((id<JavaUtilList>) nil_chk(list)) addWithId:ti];
    }
  }
}

- (BOOL)spot_hasAttributes {
  return ((_attributes_ != nil) && ([_attributes_ size] > 0));
}

- (BOOL)spot_hasDefinedAttributes {
  return ((_defAttributes_ != nil) && ([_defAttributes_ size] > 0));
}

- (BOOL)spot_hasNamedElementWithNSString:(NSString *)name {
  return [((JavaUtilHashMap *) nil_chk(_nameMap_)) containsKeyWithId:name];
}

- (BOOL)spot_hasValue {
  int n = [self spot_checkRangeValidity];
  return (n == iSPOTConstants_VALUE_NULL_WITH_DEFAULT) || (n == iSPOTConstants_VALUE_OK);
}

- (BOOL)spot_isAllowInvalidAttributes {
  return _allowInvalidAttributes_;
}

- (BOOL)spot_isAttributeSupportedWithNSString:(NSString *)name {
  return ((_defAttributes_ == nil) || [_defAttributes_ containsKeyWithId:name]);
}

- (BOOL)spot_isContainer {
  return YES;
}

- (BOOL)spot_isOptional {
  return _isOptional_;
}

- (BOOL)spot_isReadOnly {
  return _isReadOnly_;
}

- (BOOL)spot_isRequiredAttributeWithNSString:(NSString *)name {
  return (_requiredAttributes_ == nil) ? NO : [_requiredAttributes_ containsWithId:name];
}

- (void)spot_makeReadOnly {
  if (_canMakeReadOnly_ && !_isReadOnly_) {
    _isReadOnly_ = YES;
    int n = [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size];
    id<iSPOTElement> ti = nil;
    for (int i = 0; i < n; i++) {
      ti = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:i], @protocol(iSPOTElement));
      if (ti != nil) {
        [ti spot_makeReadOnly];
      }
    }
  }
}

- (NSString *)spot_nameAtWithInt:(int)pos {
  id<iSPOTElement> lasn = (id<iSPOTElement>) check_protocol_cast([((RAREUTIdentityArrayList *) nil_chk(_theElements_)) getWithInt:pos], @protocol(iSPOTElement));
  if (lasn == nil) {
    return ((_nullMap_ == nil) || (pos >= [self spot_getCount])) ? nil : (NSString *) check_class_cast([_nullMap_ getWithId:[JavaLangInteger valueOfWithInt:pos]], [NSString class]);
  }
  return [((id<iSPOTElement>) nil_chk(lasn)) spot_getName];
}

- (void)spot_removeAttributeWithNSString:(NSString *)name {
  if (_attributes_ != nil) {
    (void) [_attributes_ removeWithId:name];
  }
}

- (void)spot_resetAttributeWithNSString:(NSString *)name
                            withBoolean:(BOOL)clean {
  if (_attributes_ != nil) {
    if (_defAttributes_ != nil) {
      (void) [_attributes_ putWithId:name withId:[_defAttributes_ getWithId:name]];
      if (clean && [RAREUTHelper valuesEqualsWithJavaUtilMap:_attributes_ withJavaUtilMap:_defAttributes_]) {
        _attributeSet_ = NO;
      }
    }
  }
}

- (void)spot_resetAttributes {
  if (_attributes_ != nil) {
    [_attributes_ clear];
    if (_defAttributes_ != nil) {
      [_attributes_ putAllWithJavaUtilMap:_defAttributes_];
    }
  }
  _attributeSet_ = NO;
}

- (SPOTSequence *)spot_sequenceForWithNSString:(NSString *)name {
  return (SPOTSequence *) check_class_cast([self spot_elementForWithNSString:name], [SPOTSequence class]);
}

- (void)spot_setAllowInvalidAttributesWithBoolean:(BOOL)allow {
  self->_allowInvalidAttributes_ = allow;
}

- (void)spot_setAttributeWithNSString:(NSString *)name
                         withNSString:(NSString *)value {
  if (!SPOTSequence_OPTIMIZE_RUNTIME_ && !_allowInvalidAttributes_ && (_defAttributes_ != nil) && ![_defAttributes_ containsKeyWithId:name]) {
    @throw [[SPOTException alloc] initWithInt:iSPOTConstants_INVALID_ELEMENT withNSString:[iSPOTConstants STR_INVALID_ATTRIBUTE] withNSString:(_theName_ == nil) ? [[self getClass] getName] : _theName_ withNSString:name];
  }
  if (_attributes_ == nil) {
    [self createAttributesMap];
  }
  _attributeSet_ = YES;
  (void) [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putWithId:name withId:value];
}

- (void)spot_setEmptyXMLOutputWithBoolean:(BOOL)flag {
  _outputEmptyXML_ = flag;
}

- (void)spot_setFooterCommentWithNSString:(NSString *)comment {
  _footerComment_ = comment;
}

- (void)spot_setHeaderCommentsWithNSStringArray:(IOSObjectArray *)comments {
  _headerComment_ = comments;
}

- (id)spot_setLinkedDataWithId:(id)data {
  id o = _linkedData_;
  _linkedData_ = data;
  return o;
}

- (void)spot_setNameWithNSString:(NSString *)name {
  _theName_ = name;
}

- (void)spot_setOptionalWithBoolean:(BOOL)b {
}

- (void)spot_setPackageNameWithNSString:(NSString *)name {
  _thePackageName_ = name;
}

- (void)spot_setParentWithISPOTElement:(id<iSPOTElement>)element {
  _parentElement_ = element;
}

- (void)spot_setReferenceVariableWithNSString:(NSString *)name
                             withISPOTElement:(id<iSPOTElement>)element {
  [SPOTHelper setReferenceVariableWithISPOTElement:self withNSString:name withISPOTElement:element];
}

- (void)spot_setTemplateHandlerWithISPOTTemplateHandler:(id<iSPOTTemplateHandler>)templateHandler {
  self->_templateHandler_ = templateHandler;
}

- (void)spot_setValueWithNSString:(NSString *)val {
}

- (NSString *)spot_stringValue {
  @throw [[SPOTException alloc] initWithInt:iSPOTConstants_NOT_SUPPORTED withNSString:[iSPOTConstants STR_NOT_SUPPORTED] withNSString:@"Sequence"];
}

- (NSString *)spot_stringValueEx {
  @throw [[SPOTException alloc] initWithInt:iSPOTConstants_NOT_SUPPORTED withNSString:[iSPOTConstants STR_NOT_SUPPORTED] withNSString:@"Sequence"];
}

- (BOOL)spot_valueWasSet {
  int n = [self spot_checkRangeValidity];
  return (n == iSPOTConstants_VALUE_OK);
}

- (NSString *)toSDF {
  return [self toStringWithNSString:nil];
}

- (BOOL)toSDFWithJavaIoWriter:(JavaIoWriter *)outArg {
  return [self toSDFWithJavaIoWriter:outArg withNSString:[[self getClass] getName] withInt:0 withBoolean:YES withBoolean:NO withBoolean:YES];
}

- (BOOL)toSDFWithJavaIoWriter:(JavaIoWriter *)outArg
                 withNSString:(NSString *)tag {
  return [self toSDFWithJavaIoWriter:outArg withNSString:tag withInt:0 withBoolean:YES withBoolean:NO withBoolean:YES];
}

- (BOOL)toSDFWithJavaIoWriter:(JavaIoWriter *)outArg
                 withNSString:(NSString *)tag
                      withInt:(int)depth
                  withBoolean:(BOOL)outputempty
                  withBoolean:(BOOL)outputComments {
  return [self toSDFWithJavaIoWriter:outArg withNSString:tag withInt:depth withBoolean:YES withBoolean:outputempty withBoolean:outputComments];
}

- (BOOL)toSDFWithJavaIoWriter:(JavaIoWriter *)outArg
                 withNSString:(NSString *)classname
                      withInt:(int)depth
                  withBoolean:(BOOL)validate
                  withBoolean:(BOOL)outputempty
                  withBoolean:(BOOL)outputComments {
  if ((_headerComment_ != nil) && outputComments) {
    int len = (int) [_headerComment_ count];
    for (int i = 0; i < len; i++) {
      [aSPOTElement writeSDFNameWithJavaIoWriter:outArg withNSString:IOSObjectArray_Get(_headerComment_, i) withInt:depth];
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"\n"];
    }
  }
  int n = [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size];
  if ((n == 0) && !outputempty && !_attributeSet_) {
    if ((depth == 0) && (classname != nil)) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:classname];
      [outArg writeWithNSString:@"{}\n"];
    }
    return YES;
  }
  NSString *name = nil;
  id<iSPOTElement> ti = nil;
  if (outputempty) {
    validate = NO;
  }
  int check = validate ? [self spot_checkRangeValidity] : 0;
  if ((check < iSPOTConstants_VALUE_NULL) && (check != iSPOTConstants_VALUE_INVALID_CHILD)) {
    if ((depth == 0) && (classname != nil)) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:classname];
      [outArg writeWithNSString:@"{}\n"];
      return YES;
    }
    return NO;
  }
  if (classname == nil) {
    classname = @"{\n";
  }
  else {
    classname = [NSString stringWithFormat:@"%@ {\n", classname];
  }
  if (check != 0) {
    [aSPOTElement writeSDFNameWithJavaIoWriter:outArg withNSString:classname withInt:depth];
    [RAREUTHelper writePaddingWithJavaIoWriter:outArg withInt:depth + 1];
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[self spot_checkRangeValidityStr]];
    [outArg writeWithNSString:@"\n"];
    [RAREUTHelper writePaddingWithJavaIoWriter:outArg withInt:depth];
    [outArg writeWithNSString:@"}\n"];
    return YES;
  }
  [aSPOTElement writeSDFNameWithJavaIoWriter:outArg withNSString:classname withInt:depth];
  for (int i = 0; i < n; i++) {
    ti = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:i], @protocol(iSPOTElement));
    if (ti == nil) {
      continue;
    }
    name = [((id<iSPOTElement>) nil_chk(ti)) spot_getName];
    if (![ti toSDFWithJavaIoWriter:outArg withNSString:name withInt:depth + 1 withBoolean:outputempty withBoolean:outputComments] && (_references_ != nil) && [_references_ containsWithId:ti]) {
      [RAREUTHelper writePaddingWithJavaIoWriter:outArg withInt:depth + 1];
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:name];
      [outArg writeWithNSString:@"{}\n"];
    }
  }
  [RAREUTHelper writePaddingWithJavaIoWriter:outArg withInt:depth];
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"}"];
  [aSPOTElement writeAttributesWithJavaIoWriter:outArg withJavaUtilMap:_attributes_ withJavaUtilMap:_defAttributes_ withInt:depth];
  if ((_footerComment_ != nil) && outputComments) {
    [outArg writeWithNSString:@" "];
    [outArg writeWithNSString:_footerComment_];
  }
  [outArg writeWithNSString:@"\n"];
  return YES;
}

- (void)toStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  int n = [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) size];
  id<iSPOTElement> ti = nil;
  int check = [self spot_checkRangeValidity];
  if (check == iSPOTConstants_VALUE_NULL_AND_OPTIONAL) {
    return;
  }
  if (check != 0) {
    @throw [[JavaIoIOException alloc] initWithNSString:[self spot_checkRangeValidityStr]];
  }
  if (n > 0) {
    for (int i = 0; i < n; i++) {
      ti = (id<iSPOTElement>) check_protocol_cast([_theElements_ getWithInt:i], @protocol(iSPOTElement));
      check = (ti == nil) ? iSPOTConstants_VALUE_NULL_AND_OPTIONAL : [ti spot_checkRangeValidity];
      if (check == iSPOTConstants_VALUE_NULL_AND_OPTIONAL) {
        [RAREUTaStreamer toStreamWithBoolean:NO withJavaIoOutputStream:outArg];
      }
      else {
        [RAREUTaStreamer toStreamWithBoolean:YES withJavaIoOutputStream:outArg];
        [((id<iSPOTElement>) nil_chk(ti)) toStreamWithJavaIoOutputStream:outArg];
      }
    }
  }
}

- (NSString *)description {
  return [self toStringWithNSString:nil];
}

- (NSString *)toStringWithNSString:(NSString *)classname {
  JavaIoStringWriter *sw = [[JavaIoStringWriter alloc] init];
  @try {
    if (classname == nil) {
      classname = [aSPOTElement spot_getClassShortNameWithIOSClass:[self getClass]];
      int n = [((NSString *) nil_chk(classname)) lastIndexOf:'.'];
      if (n != -1) {
        classname = [classname substring:n + 1];
      }
    }
    [self toSDFWithJavaIoWriter:sw withNSString:classname withInt:0 withBoolean:NO withBoolean:YES];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [sw description];
}

- (NSString *)spot_makeInvalidMessageWithNSString:(NSString *)element
                                     withNSString:(NSString *)value
                                     withNSString:(NSString *)range
                                     withNSString:(NSString *)type {
  IOSObjectArray *s = [IOSObjectArray arrayWithObjects:(id[]){ element, value, type, range } count:4 type:[IOSClass classWithClass:[NSString class]]];
  return [RAREUTHelper expandStringWithNSString:[iSPOTConstants STR_INVALID] withNSStringArray:s];
}

- (void)checkReadOnly {
  if (_isReadOnly_) {
    @throw [[SPOTException alloc] initWithInt:iSPOTConstants_READ_ONLY withNSString:[iSPOTConstants STR_READ_ONLY] withNSString:(_theName_ == nil) ? [[self getClass] getName] : _theName_];
  }
}

- (id<iSPOTElement>)spot_elementFromNameWithNSString:(NSString *)name {
  id o = [((JavaUtilHashMap *) nil_chk(_nameMap_)) getWithId:name];
  if (o == nil) {
    return nil;
  }
  if ([o conformsToProtocol: @protocol(iSPOTElement)]) {
    return (id<iSPOTElement>) check_protocol_cast(o, @protocol(iSPOTElement));
  }
  if (_refClassMap_ == nil) {
    _refClassMap_ = [[JavaUtilHashMap alloc] init];
  }
  return [SPOTHelper elementFromNameWithJavaUtilMap:_refClassMap_ withISPOTElement:self withNSString:name];
}

- (NSString *)spot_handleRequiredAttributeWithNSString:(NSString *)name {
  if ((name != nil) && [name hasSuffix:@"!"]) {
    name = [name substring:0 endIndex:[name sequenceLength] - 1];
    if (_requiredAttributes_ == nil) {
      _requiredAttributes_ = [[JavaUtilHashSet alloc] init];
    }
  }
  return name;
}

- (void)spot_initialize {
}

- (void)spot_setElements {
}

- (id<iSPOTElement>)spot_setReferenceWithNSString:(NSString *)name
                                 withISPOTElement:(id<iSPOTElement>)element {
  if (!SPOTSequence_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  id<iSPOTElement> x = nil;
  id o = [((JavaUtilHashMap *) nil_chk(_nameMap_)) getWithId:name];
  if (o == nil) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Setting a reference for an element that has not yet been defined"];
  }
  if ([o conformsToProtocol: @protocol(iSPOTElement)]) {
    x = (id<iSPOTElement>) check_protocol_cast(o, @protocol(iSPOTElement));
    if (element == nil) {
      JavaLangInteger *in = [JavaLangInteger valueOfWithInt:[((RAREUTIdentityArrayList *) nil_chk(_theElements_)) indexOfWithId:x]];
      if ([in intValue] == -1) {
        @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"The names map is out of sync with the elements list"];
      }
      [((id<iSPOTElement>) nil_chk(x)) spot_setParentWithISPOTElement:nil];
      (void) [_nameMap_ putWithId:name withId:in];
      (void) [_theElements_ setWithInt:[in intValue] withId:nil];
      if (_references_ != nil) {
        [_references_ removeWithId:x];
      }
    }
    else {
      (void) [_nameMap_ putWithId:name withId:element];
      [element spot_setNameWithNSString:name];
      [element spot_setParentWithISPOTElement:self];
    }
  }
  else {
    if (element != nil) {
      JavaLangInteger *in = (JavaLangInteger *) check_class_cast(o, [JavaLangInteger class]);
      (void) [_nameMap_ putWithId:name withId:element];
      [element spot_setNameWithNSString:name];
      [element spot_setParentWithISPOTElement:self];
      (void) [((RAREUTIdentityArrayList *) nil_chk(_theElements_)) setWithInt:[((JavaLangInteger *) nil_chk(in)) intValue] withId:element];
    }
  }
  if (element != nil) {
    if (_references_ == nil) {
      _references_ = [[RAREUTIdentityArrayList alloc] init];
    }
    if (![((RAREUTIdentityArrayList *) nil_chk(_references_)) containsWithId:element]) {
      [_references_ addWithId:element];
    }
  }
  return x;
}

- (void)createAttributesMap {
  if (_defAttributes_ != nil) {
    _attributes_ = [[NoNullLinkedHashMap alloc] initWithInt:[_defAttributes_ size]];
    [_attributes_ putAllWithJavaUtilMap:_defAttributes_];
  }
  else {
    _attributes_ = [[NoNullLinkedHashMap alloc] init];
  }
}

+ (void)initialize {
  if (self == [SPOTSequence class]) {
    SPOTSequence_EMPTY_MAP_ = [[JavaUtilHashMap alloc] initWithInt:1];
    {
      BOOL opt = NO;
      @try {
        NSString *s = [JavaLangSystem getPropertyWithNSString:@"spot.optimize" withNSString:nil];
        if (s == nil) {
          s = [JavaLangSystem getPropertyWithNSString:@"jnlp.spot.optimize" withNSString:nil];
        }
        if (s != nil) {
          opt = [@"true" isEqual:s];
        }
      }
      @catch (JavaLangThrowable *e) {
      }
      SPOTSequence_OPTIMIZE_RUNTIME_ = opt;
    }
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(SPOTSequence *)other {
  [super copyAllFieldsTo:other];
  other->_allowInvalidAttributes_ = _allowInvalidAttributes_;
  other->_attributeSet_ = _attributeSet_;
  other->_attributes_ = _attributes_;
  other->_canMakeReadOnly_ = _canMakeReadOnly_;
  other->_defAttributes_ = _defAttributes_;
  other->_footerComment_ = _footerComment_;
  other->_headerComment_ = _headerComment_;
  other->_isOptional_ = _isOptional_;
  other->_isReadOnly_ = _isReadOnly_;
  other->_linkedData_ = _linkedData_;
  other->_nameMap_ = _nameMap_;
  other->_nullMap_ = _nullMap_;
  other->_outputEmptyXML_ = _outputEmptyXML_;
  other->_parentElement_ = _parentElement_;
  other->_refClassMap_ = _refClassMap_;
  other->_references_ = _references_;
  other->_requiredAttributes_ = _requiredAttributes_;
  other->_templateHandler_ = _templateHandler_;
  other->_theElements_ = _theElements_;
  other->_theName_ = _theName_;
  other->_thePackageName_ = _thePackageName_;
  other->attributeSizeHint_ = attributeSizeHint_;
  other->elementsSizeHint_ = elementsSizeHint_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withBoolean:", NULL, NULL, 0x4, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "fromSDFWithSDFNode:", NULL, "Z", 0x1, "SPOTException" },
    { "fromStreamWithJavaIoInputStream:", NULL, "V", 0x1, "JavaIoIOException" },
    { "fromStructuredNodeWithRAREUTiStructuredNode:", NULL, "Z", 0x1, "SPOTException" },
    { "spot_attributesWereSet", NULL, "Z", 0x11, NULL },
    { "spot_checkRangeValidityStr", NULL, "LNSString", 0x1, NULL },
    { "spot_elementAtWithInt:", NULL, "LiSPOTElement", 0x1, NULL },
    { "spot_elementForWithNSString:", NULL, "LiSPOTElement", 0x1, NULL },
    { "spot_elementForExWithNSString:", NULL, "LiSPOTElement", 0x1, NULL },
    { "spot_elementValue", NULL, "LiSPOTElement", 0x1, NULL },
    { "spot_equalsWithISPOTElement:", NULL, "Z", 0x1, NULL },
    { "spot_getAttributeWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "spot_getAttributeDefaultValueWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "spot_getAttributes", NULL, "LJavaUtilMap", 0x1, NULL },
    { "spot_getAttributesEx", NULL, "LJavaUtilMap", 0x1, NULL },
    { "spot_getClassName", NULL, "LNSString", 0x1, NULL },
    { "spot_getClassShortName", NULL, "LNSString", 0x1, NULL },
    { "spot_getFooterComment", NULL, "LNSString", 0x1, NULL },
    { "spot_getHeaderComments", NULL, "LIOSObjectArray", 0x1, NULL },
    { "spot_getLinkedData", NULL, "LNSObject", 0x1, NULL },
    { "spot_getName", NULL, "LNSString", 0x1, NULL },
    { "spot_getNameAtWithInt:", NULL, "LNSString", 0x1, NULL },
    { "spot_getPackageName", NULL, "LNSString", 0x1, NULL },
    { "spot_getParent", NULL, "LiSPOTElement", 0x1, NULL },
    { "spot_getRange", NULL, "LIOSObjectArray", 0x1, NULL },
    { "spot_getSortedElements", NULL, "LJavaUtilList", 0x1, NULL },
    { "spot_getSupportedAttributes", NULL, "LJavaUtilMap", 0x1, NULL },
    { "spot_getTemplateHandler", NULL, "LiSPOTTemplateHandler", 0x1, NULL },
    { "spot_getType", NULL, "I", 0x11, NULL },
    { "spot_getValidityRange", NULL, "LNSString", 0x1, NULL },
    { "spot_getValue", NULL, "LNSObject", 0x1, NULL },
    { "spot_getValueWithNSString:", NULL, "LNSObject", 0x1, NULL },
    { "spot_hasAttributes", NULL, "Z", 0x1, NULL },
    { "spot_hasDefinedAttributes", NULL, "Z", 0x1, NULL },
    { "spot_hasNamedElementWithNSString:", NULL, "Z", 0x1, NULL },
    { "spot_hasValue", NULL, "Z", 0x1, NULL },
    { "spot_isAllowInvalidAttributes", NULL, "Z", 0x1, NULL },
    { "spot_isAttributeSupportedWithNSString:", NULL, "Z", 0x1, NULL },
    { "spot_isContainer", NULL, "Z", 0x1, NULL },
    { "spot_isOptional", NULL, "Z", 0x1, NULL },
    { "spot_isReadOnly", NULL, "Z", 0x1, NULL },
    { "spot_isRequiredAttributeWithNSString:", NULL, "Z", 0x1, NULL },
    { "spot_nameAtWithInt:", NULL, "LNSString", 0x1, NULL },
    { "spot_sequenceForWithNSString:", NULL, "LSPOTSequence", 0x1, NULL },
    { "spot_setLinkedDataWithId:", NULL, "LNSObject", 0x1, NULL },
    { "spot_stringValue", NULL, "LNSString", 0x1, NULL },
    { "spot_stringValueEx", NULL, "LNSString", 0x1, NULL },
    { "spot_valueWasSet", NULL, "Z", 0x1, NULL },
    { "toSDF", NULL, "LNSString", 0x1, NULL },
    { "toSDFWithJavaIoWriter:", NULL, "Z", 0x1, "JavaIoIOException" },
    { "toSDFWithJavaIoWriter:withNSString:", NULL, "Z", 0x1, "JavaIoIOException" },
    { "toSDFWithJavaIoWriter:withNSString:withInt:withBoolean:withBoolean:", NULL, "Z", 0x1, "JavaIoIOException" },
    { "toSDFWithJavaIoWriter:withNSString:withInt:withBoolean:withBoolean:withBoolean:", NULL, "Z", 0x1, "JavaIoIOException" },
    { "toStreamWithJavaIoOutputStream:", NULL, "V", 0x1, "JavaIoIOException" },
    { "toStringWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "spot_makeInvalidMessageWithNSString:withNSString:withNSString:withNSString:", NULL, "LNSString", 0x0, NULL },
    { "checkReadOnly", NULL, "V", 0x4, "SPOTException" },
    { "spot_elementFromNameWithNSString:", NULL, "LiSPOTElement", 0x4, NULL },
    { "spot_handleRequiredAttributeWithNSString:", NULL, "LNSString", 0x4, NULL },
    { "spot_initialize", NULL, "V", 0x4, NULL },
    { "spot_setElements", NULL, "V", 0x4, NULL },
    { "spot_setReferenceWithNSString:withISPOTElement:", NULL, "LiSPOTElement", 0x4, NULL },
    { "createAttributesMap", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "EMPTY_MAP_", NULL, 0xa, "LJavaUtilHashMap" },
    { "OPTIMIZE_RUNTIME_", NULL, 0x1a, "Z" },
    { "_nullMap_", NULL, 0x0, "LJavaUtilHashMap" },
    { "_refClassMap_", NULL, 0x0, "LJavaUtilHashMap" },
    { "_theElements_", NULL, 0x4, "LRAREUTIdentityArrayList" },
    { "_outputEmptyXML_", NULL, 0x4, "Z" },
    { "_nameMap_", NULL, 0x4, "LJavaUtilHashMap" },
    { "attributeSizeHint_", NULL, 0x4, "I" },
    { "elementsSizeHint_", NULL, 0x4, "I" },
    { "_attributes_", NULL, 0x4, "LNoNullLinkedHashMap" },
    { "_canMakeReadOnly_", NULL, 0x4, "Z" },
    { "_defAttributes_", NULL, 0x4, "LJavaUtilLinkedHashMap" },
    { "_footerComment_", NULL, 0x4, "LNSString" },
    { "_headerComment_", NULL, 0x4, "LIOSObjectArray" },
    { "_isOptional_", NULL, 0x4, "Z" },
    { "_isReadOnly_", NULL, 0x4, "Z" },
    { "_parentElement_", NULL, 0x4, "LiSPOTElement" },
    { "_requiredAttributes_", NULL, 0x4, "LJavaUtilSet" },
    { "_theName_", NULL, 0x4, "LNSString" },
    { "_thePackageName_", NULL, 0x4, "LNSString" },
  };
  static J2ObjcClassInfo _SPOTSequence = { "SPOTSequence", "com.appnativa.spot", NULL, 0x1, 64, methods, 20, fields, 0, NULL};
  return &_SPOTSequence;
}

@end
@implementation SPOTSequence_$1

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  id<iSPOTElement> e1 = (id<iSPOTElement>) check_protocol_cast(o1, @protocol(iSPOTElement));
  id<iSPOTElement> e2 = (id<iSPOTElement>) check_protocol_cast(o2, @protocol(iSPOTElement));
  NSString *s1 = (e1 == nil) ? nil : [e1 spot_getName];
  NSString *s2 = (e2 == nil) ? nil : [e2 spot_getName];
  if ((s1 == nil) || (s2 == nil)) {
    if (s1 == s2) {
      return 0;
    }
    return (s1 == nil) ? -1 : 1;
  }
  return [s1 compareToWithId:s2];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _SPOTSequence_$1 = { "$1", "com.appnativa.spot", "SPOTSequence", 0x8000, 0, NULL, 0, NULL, 0, NULL};
  return &_SPOTSequence_$1;
}

@end
