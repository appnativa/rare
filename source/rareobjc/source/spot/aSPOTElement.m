//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../spot/src/com/appnativa/spot/aSPOTElement.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/spot/NoNullLinkedHashMap.h"
#include "com/appnativa/spot/SDFNode.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTDateTime.h"
#include "com/appnativa/spot/SPOTException.h"
#include "com/appnativa/spot/SPOTHelper.h"
#include "com/appnativa/spot/SPOTInteger.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTReal.h"
#include "com/appnativa/spot/SPOTSequence.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/spot/aSPOTElement.h"
#include "com/appnativa/spot/iSPOTConstants.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/spot/iSPOTTemplateHandler.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/aStreamer.h"
#include "com/appnativa/util/iStructuredNode.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/InternalError.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/util/Arrays.h"
#include "java/util/Calendar.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation aSPOTElement

static JavaLangThreadLocal * aSPOTElement_perThreadNumber_;
static JavaLangThreadLocal * aSPOTElement_perThreadCharArray_;
static BOOL aSPOTElement_OPTIMIZE_RUNTIME_;

+ (JavaLangThreadLocal *)perThreadNumber {
  return aSPOTElement_perThreadNumber_;
}

+ (JavaLangThreadLocal *)perThreadCharArray {
  return aSPOTElement_perThreadCharArray_;
}

+ (BOOL)OPTIMIZE_RUNTIME {
  return aSPOTElement_OPTIMIZE_RUNTIME_;
}

- (BOOL)booleanValue {
  NSString *s = [self spot_stringValue];
  if (s == nil) {
    @throw [[JavaLangNumberFormatException alloc] initWithNSString:[iSPOTConstants STR_NULL_VALUE]];
  }
  if ([((NSString *) nil_chk(s)) equalsIgnoreCase:@"true"]) {
    return YES;
  }
  if ([s equalsIgnoreCase:@"false"]) {
    return NO;
  }
  return ([RAREUTSNumber longValueWithNSString:s withBoolean:YES] != 0);
}

- (IOSByteArray *)byteArrayValue {
  NSString *s = [self spot_stringValue];
  return (s == nil) ? nil : [s getBytes];
}

- (id)clone {
  @try {
    aSPOTElement *e = (aSPOTElement *) check_class_cast([super clone], [aSPOTElement class]);
    ((aSPOTElement *) nil_chk(e))->_linkedData_ = nil;
    e->_isReadOnly_ = NO;
    if (_attributes_ != nil) {
      e->_attributes_ = [[NoNullLinkedHashMap alloc] initWithJavaUtilMap:_attributes_];
    }
    if (_defAttributes_ != nil) {
      e->_defAttributes_ = [[JavaUtilLinkedHashMap alloc] initWithJavaUtilMap:_defAttributes_];
    }
    if (_requiredAttributes_ != nil) {
      e->_requiredAttributes_ = [[JavaUtilHashSet alloc] initWithJavaUtilCollection:_requiredAttributes_];
    }
    if (_numValue_ != nil) {
      _numValue_ = [[RAREUTSNumber alloc] initWithRAREUTSNumber:_numValue_];
    }
    return e;
  }
  @catch (JavaLangCloneNotSupportedException *ex) {
    @throw [[JavaLangInternalError alloc] init];
  }
}

- (double)doubleValue {
  NSString *s = [self spot_stringValue];
  if (s == nil) {
    @throw [[JavaLangNumberFormatException alloc] initWithNSString:[iSPOTConstants STR_NULL_VALUE]];
  }
  return [RAREUTSNumber doubleValueWithNSString:s withBoolean:YES];
}

- (BOOL)equalsWithASPOTElement:(aSPOTElement *)e {
  if (e == self) {
    return YES;
  }
  if (e == nil) {
    return NO;
  }
  if ([((aSPOTElement *) nil_chk(e)) spot_getType] != [self spot_getType]) {
    return NO;
  }
  NSString *s1 = [self spot_stringValue];
  NSString *s2 = [e spot_stringValue];
  if ((s2 == nil) || (s1 == nil)) {
    if (s1 != s2) {
      return NO;
    }
  }
  else if (![s1 isEqual:s2]) {
    return NO;
  }
  return [aSPOTElement spot_attributesEqualWithISPOTElement:self withISPOTElement:e];
}

- (BOOL)isEqual:(id)o {
  if (self == o) {
    return YES;
  }
  if (!([o isKindOfClass:[aSPOTElement class]])) {
    return NO;
  }
  return [self equalsWithASPOTElement:(aSPOTElement *) check_class_cast(o, [aSPOTElement class])];
}

- (float)floatValue {
  NSString *s = [self spot_stringValue];
  if (s == nil) {
    @throw [[JavaLangNumberFormatException alloc] initWithNSString:[iSPOTConstants STR_NULL_VALUE]];
  }
  return [RAREUTSNumber floatValueWithNSString:s withBoolean:YES];
}

- (BOOL)fromSDFWithSDFNode:(SDFNode *)node {
  if (node == nil) {
    return NO;
  }
  if (!aSPOTElement_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  if ([((SDFNode *) nil_chk(node)) hasAttributes]) {
    if (_attributes_ == nil) {
      [self createAttributesMap];
    }
    [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putAllWithJavaUtilMap:[node getNodeAttributes]];
    self->_attributeSet_ = YES;
  }
  NSString *value = node->nodeValue_;
  self->_valuePreformatted_ = node->valuePreformatted_;
  self->_preformattedTag_ = node->preformattedTag_;
  if ((value == nil) && ([node getChildCount] == 1)) {
    node = [node getFirstDataNode];
    if (node != nil) {
      value = node->nodeValue_;
      if (_attributes_ == nil) {
        [self createAttributesMap];
      }
      if ([node hasAttributes]) {
        [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putAllWithJavaUtilMap:[node getNodeAttributes]];
      }
      if (node->valuePreformatted_) {
        self->_valuePreformatted_ = node->valuePreformatted_;
      }
    }
  }
  _footerComment_ = ((SDFNode *) nil_chk(node))->nodeComment_;
  [self setValueWithNSString:value];
  (void) [self spot_setLinkedDataWithId:[node getLinkedData]];
  return YES;
}

- (void)fromStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if (!aSPOTElement_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  [self setValueWithNSString:[RAREUTaStreamer readStringWithJavaIoInputStream:inArg]];
}

- (BOOL)fromStructuredNodeWithRAREUTiStructuredNode:(id<RAREUTiStructuredNode>)node {
  if (node == nil) {
    return NO;
  }
  if (!aSPOTElement_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  if ([((id<RAREUTiStructuredNode>) nil_chk(node)) hasAttributes]) {
    if (_attributes_ == nil) {
      [self createAttributesMap];
    }
    [node copyAttributesWithJavaUtilMap:_attributes_];
    self->_attributeSet_ = YES;
  }
  NSString *value = [node getValueAsString];
  self->_valuePreformatted_ = [node isPreformattedData];
  self->_preformattedTag_ = [node getPreformattedTag];
  if ((value == nil) && ([node getChildCount] == 1)) {
    node = [node getChildWithInt:0];
    value = [((id<RAREUTiStructuredNode>) nil_chk(node)) getValueAsString];
    if (_attributes_ == nil) {
      [self createAttributesMap];
    }
    if ([node hasAttributes]) {
      [node copyAttributesWithJavaUtilMap:_attributes_];
    }
    self->_valuePreformatted_ = [node isPreformattedData];
    self->_preformattedTag_ = [node getPreformattedTag];
  }
  _footerComment_ = [((id<RAREUTiStructuredNode>) nil_chk(node)) getComment];
  [self setValueWithNSString:value];
  (void) [self spot_setLinkedDataWithId:[node getLinkedData]];
  return YES;
}

- (NSUInteger)hash {
  NSString *s = [self spot_stringValue];
  int h = (s == nil) ? 0 : (int) [s hash];
  if (_attributes_ != nil) {
    h += (int) [_attributes_ hash];
  }
  return h;
}

- (int)intValue {
  return (int) [self longValue];
}

- (long long int)longValue {
  NSString *s = [self spot_stringValue];
  if (s == nil) {
    @throw [[JavaLangNumberFormatException alloc] initWithNSString:[iSPOTConstants STR_NULL_VALUE]];
  }
  return [RAREUTSNumber longValueWithNSString:s withBoolean:YES];
}

- (RAREUTSNumber *)numberValue {
  NSString *s = [self spot_stringValue];
  return (s == nil) ? nil : [((RAREUTSNumber *) nil_chk([self numValueNumber])) setValueWithNSString:s withBoolean:NO];
}

- (void)spot_addAttributesWithJavaUtilMap:(id<JavaUtilMap>)map {
  if ((map != nil) && ([map size] > 0)) {
    if (_attributes_ == nil) {
      [self createAttributesMap];
    }
    [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putAllWithJavaUtilMap:map];
    _attributeSet_ = YES;
  }
}

+ (BOOL)spot_attributesEqualWithISPOTElement:(id<iSPOTElement>)e1
                            withISPOTElement:(id<iSPOTElement>)e2 {
  if (((e1 == nil) && (e2 == nil))) {
    return YES;
  }
  id<JavaUtilMap> m1 = (e1 == nil) ? nil : [e1 spot_getAttributesEx];
  id<JavaUtilMap> m2 = (e2 == nil) ? nil : [e2 spot_getAttributesEx];
  if ((m1 == nil) || (m2 == nil)) {
    return m1 == m2;
  }
  return [m1 isEqual:m2];
}

- (BOOL)spot_attributesWereSet {
  return _attributeSet_;
}

- (int)spot_checkRangeValidity {
  if (![aSPOTElement spot_requiredAttributesWereSetWithJavaUtilMap:_attributes_ withJavaUtilSet:_requiredAttributes_]) {
    return iSPOTConstants_VALUE_MISSING_REQUIRED_ATTTRIBUTES;
  }
  int ret = [self spot_checkRangeValidityEx];
  if ((ret == iSPOTConstants_VALUE_NULL_AND_OPTIONAL) || (ret == iSPOTConstants_VALUE_NULL_WITH_DEFAULT)) {
    if (_attributeSet_) {
      ret = iSPOTConstants_VALUE_OK;
    }
  }
  return ret;
}

- (NSString *)spot_checkRangeValidityStr {
  int ret = [self spot_checkRangeValidity];
  NSString *s = nil;
  switch (ret) {
    case iSPOTConstants_VALUE_TO_BIG:
    s = [RAREUTHelper expandStringWithNSString:[iSPOTConstants STR_INVALID] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [self spot_getName], [self spot_stringValue], [iSPOTConstants STR_GREATER_THAN], [self spot_getValidityRange] } count:4 type:[IOSClass classWithClass:[NSString class]]]];
    break;
    case iSPOTConstants_VALUE_TO_SMALL:
    s = [RAREUTHelper expandStringWithNSString:[iSPOTConstants STR_INVALID] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [self spot_getName], [self spot_stringValue], [iSPOTConstants STR_LESS_THAN], [self spot_getValidityRange] } count:4 type:[IOSClass classWithClass:[NSString class]]]];
    break;
    case iSPOTConstants_VALUE_NULL:
    s = [RAREUTHelper expandStringWithNSString:[iSPOTConstants STR_NULL] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [self spot_getName] } count:1 type:[IOSClass classWithClass:[NSString class]]]];
    break;
    case iSPOTConstants_VALUE_MISSING_REQUIRED_ATTTRIBUTES:
    s = [RAREUTHelper expandStringWithNSString:[iSPOTConstants STR_MISSING_ATTRIBUTES] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [self spot_getName], [aSPOTElement spot_getMissingReqiredAttributesWithJavaUtilMap:_attributes_ withJavaUtilSet:_requiredAttributes_] } count:2 type:[IOSClass classWithClass:[NSString class]]]];
    break;
    case iSPOTConstants_VALUE_NULL_AND_OPTIONAL:
    case iSPOTConstants_VALUE_NULL_WITH_DEFAULT:
    default:
    break;
  }
  return s;
}

- (void)spot_cleanAttributes {
  if (_attributes_ != nil) {
    if ([RAREUTHelper valuesEqualsWithJavaUtilMap:_attributes_ withJavaUtilMap:_defAttributes_]) {
      _attributeSet_ = NO;
    }
  }
}

- (void)spot_clear {
  if (!aSPOTElement_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  self->_valuePreformatted_ = NO;
  self->_preformattedTag_ = nil;
  _numValue_ = nil;
  if (_attributes_ != nil) {
    [_attributes_ clear];
  }
  if (_defAttributes_ != nil) {
    if (_attributes_ == nil) {
      [self createAttributesMap];
    }
    else {
      [_attributes_ putAllWithJavaUtilMap:_defAttributes_];
    }
  }
  _attributeSet_ = NO;
}

- (void)spot_clearAttributes {
  if (_attributes_ != nil) {
    [_attributes_ clear];
  }
  _attributes_ = nil;
  _attributeSet_ = NO;
}

- (void)spot_copyWithISPOTElement:(id<iSPOTElement>)element {
  if (element == nil) {
    return;
  }
  [self spot_copyWithISPOTElement:element withBoolean:NO];
}

- (void)spot_copyWithISPOTElement:(id<iSPOTElement>)element
                      withBoolean:(BOOL)newinstance {
  if (element == nil) {
    return;
  }
  if (!newinstance) {
    if (!aSPOTElement_OPTIMIZE_RUNTIME_) {
      [self checkReadOnly];
    }
    [self spot_clear];
  }
  [self spot_copyExWithISPOTElement:element];
  if ([((id<iSPOTElement>) nil_chk(element)) spot_valueWasSet]) {
    [self setValueWithNSString:[element spot_stringValue]];
  }
}

- (void)spot_defineAttributeWithNSString:(NSString *)name
                            withNSString:(NSString *)defaultValue {
  if (!aSPOTElement_OPTIMIZE_RUNTIME_ || (defaultValue != nil)) {
    if (_defAttributes_ == nil) {
      _defAttributes_ = [[JavaUtilLinkedHashMap alloc] initWithInt:(attributeSizeHint_ > 5) ? attributeSizeHint_ : 10];
    }
    name = [self spot_handleRequiredAttributeWithNSString:name];
    (void) [((JavaUtilLinkedHashMap *) nil_chk(_defAttributes_)) putWithId:name withId:defaultValue];
  }
  if (defaultValue != nil) {
    if (_attributes_ == nil) {
      _attributes_ = [[NoNullLinkedHashMap alloc] init];
    }
    (void) [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putWithId:name withId:defaultValue];
  }
}

- (void)spot_defineAttributesWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> e = [it next];
    id key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
    id value = [e getValue];
    if (!aSPOTElement_OPTIMIZE_RUNTIME_ && (_defAttributes_ == nil)) {
      _defAttributes_ = [[JavaUtilLinkedHashMap alloc] initWithInt:(attributeSizeHint_ > 5) ? attributeSizeHint_ : 10];
    }
    if (_defAttributes_ != nil) {
      (void) [_defAttributes_ putWithId:key withId:value];
    }
    if (_attributes_ == nil) {
      _attributes_ = [[NoNullLinkedHashMap alloc] init];
    }
    if (value != nil) {
      (void) [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putWithId:key withId:value];
    }
  }
}

+ (id<iSPOTElement>)spot_elementForObjectWithId:(id)val
                                    withBoolean:(BOOL)parseForAttributes {
  id<iSPOTElement> el = nil;
  if ([val isKindOfClass:[NSNumber class]]) {
    if (([val isKindOfClass:[JavaLangDouble class]]) || ([val isKindOfClass:[JavaLangFloat class]])) {
      el = [[SPOTReal alloc] initWithDouble:[((NSNumber *) check_class_cast(val, [NSNumber class])) doubleValue] withBoolean:YES];
    }
    else {
      el = [[SPOTInteger alloc] initWithLong:[((NSNumber *) check_class_cast(val, [NSNumber class])) longLongValue] withBoolean:YES];
    }
  }
  else if (([val isKindOfClass:[JavaUtilDate class]]) || ([val isKindOfClass:[JavaUtilCalendar class]])) {
    JavaUtilCalendar *cal;
    if ([val isKindOfClass:[JavaUtilCalendar class]]) {
      cal = (JavaUtilCalendar *) check_class_cast(val, [JavaUtilCalendar class]);
    }
    else {
      cal = [JavaUtilCalendar getInstance];
      [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:(JavaUtilDate *) check_class_cast(val, [JavaUtilDate class])];
    }
    el = [[SPOTDateTime alloc] initWithJavaUtilCalendar:cal withBoolean:YES];
  }
  else if ([val isKindOfClass:[JavaLangBoolean class]]) {
    el = [[SPOTBoolean alloc] initWithBoolean:[((JavaLangBoolean *) check_class_cast(val, [JavaLangBoolean class])) booleanValue] withBoolean:YES];
  }
  else if ([val conformsToProtocol: @protocol(JavaUtilMap)]) {
    el = [aSPOTElement spot_sequenceForMapWithJavaUtilMap:(id<JavaUtilMap>) check_protocol_cast(val, @protocol(JavaUtilMap)) withBoolean:parseForAttributes];
  }
  else if ([val conformsToProtocol: @protocol(JavaUtilList)]) {
    el = [aSPOTElement spot_setForListWithJavaUtilList:(id<JavaUtilList>) check_protocol_cast(val, @protocol(JavaUtilList)) withBoolean:parseForAttributes];
  }
  else if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:val]) {
    el = [aSPOTElement spot_setForListWithJavaUtilList:[JavaUtilArrays asListWithNSObjectArray:(IOSObjectArray *) check_class_cast(val, [IOSObjectArray class])] withBoolean:parseForAttributes];
  }
  if (el == nil) {
    el = [[SPOTPrintableString alloc] initWithBoolean:YES];
    if (val != nil) {
      NSString *s = [val description];
      if (parseForAttributes) {
        [aSPOTElement spot_populatePrimitaveElementFromStringWithISPOTElement:el withNSString:s];
      }
      [el spot_setValueWithNSString:s];
    }
  }
  return el;
}

- (id<iSPOTElement>)spot_elementValue {
  return self;
}

- (BOOL)spot_equalsWithISPOTElement:(id<iSPOTElement>)e {
  if ([self isEqual:e]) {
    return [aSPOTElement attributeValueEqualsWithISPOTElement:self withISPOTElement:e];
  }
  return NO;
}

- (NSString *)spot_getAttributeWithNSString:(NSString *)attribute {
  if (_attributes_ == nil) {
    return nil;
  }
  return (NSString *) check_class_cast([((NoNullLinkedHashMap *) nil_chk(_attributes_)) getWithId:attribute], [NSString class]);
}

- (int)spot_getAttributeCount {
  return (_attributes_ == nil) ? 0 : [_attributes_ size];
}

- (NSString *)spot_getAttributeDefaultValueWithNSString:(NSString *)name {
  return (NSString *) check_class_cast(((_defAttributes_ == nil) ? nil : [_defAttributes_ getWithId:name]), [NSString class]);
}

- (id<JavaUtilMap>)spot_getAttributes {
  return (_attributes_ == nil) ? nil : [JavaUtilCollections unmodifiableMapWithJavaUtilMap:_attributes_];
}

- (id<JavaUtilMap>)spot_getAttributesEx {
  return _attributes_;
}

- (NSString *)spot_getClassName {
  return [[self getClass] getName];
}

- (NSString *)spot_getClassShortName {
  return [aSPOTElement spot_getClassShortNameWithIOSClass:[self getClass]];
}

+ (NSString *)spot_getClassShortNameWithIOSClass:(IOSClass *)cls {
  NSString *s = [((IOSClass *) nil_chk(cls)) getName];
  int i = [((NSString *) nil_chk(s)) lastIndexOf:'.'];
  if (i != -1) {
    s = [s substring:i + 1];
  }
  if ([((NSString *) nil_chk(s)) hasPrefix:@"SPOT"]) {
    return [s substring:4];
  }
  return s;
}

- (NSString *)spot_getFooterComment {
  return _footerComment_;
}

- (IOSObjectArray *)spot_getHeaderComments {
  return _headerComment_;
}

- (id)spot_getLinkedData {
  return _linkedData_;
}

- (NSString *)spot_getName {
  if (_theName_ == nil) {
    _theName_ = [[self getClass] getName];
    int i = [((NSString *) nil_chk(_theName_)) lastIndexOf:'.'];
    if (i != -1) {
      JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] initWithNSString:_theName_];
      [buf setCharAtWithInt:i withChar:':'];
      _theName_ = [buf description];
    }
  }
  return _theName_;
}

+ (NSString *)spot_getNameWithIOSClass:(IOSClass *)cls {
  NSString *s = [((IOSClass *) nil_chk(cls)) getName];
  int i = [((NSString *) nil_chk(s)) lastIndexOf:'.'];
  if (i != -1) {
    JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] initWithNSString:s];
    [buf setCharAtWithInt:i withChar:':'];
    s = [buf description];
  }
  return s;
}

- (id<iSPOTElement>)spot_getParent {
  return _parentElement_;
}

- (IOSObjectArray *)spot_getRange {
  return nil;
}

+ (NSString *)spot_getRelativeClassNameWithISPOTElement:(id<iSPOTElement>)obj {
  return [SPOTHelper getRelativeClassNameWithISPOTElement:obj];
}

+ (NSString *)spot_getRelativeShortNameWithIOSClass:(IOSClass *)caller
                                       withIOSClass:(IOSClass *)cls {
  return [SPOTHelper getRelativeShortNameWithIOSClass:caller withIOSClass:cls];
}

- (id<JavaUtilMap>)spot_getSupportedAttributes {
  return (_defAttributes_ == nil) ? nil : [JavaUtilCollections unmodifiableMapWithJavaUtilMap:_defAttributes_];
}

- (id<iSPOTTemplateHandler>)spot_getTemplateHandler {
  return (_parentElement_ == nil) ? nil : [_parentElement_ spot_getTemplateHandler];
}

- (BOOL)spot_hasAttributes {
  return ((_attributes_ != nil) && ([_attributes_ size] > 0));
}

- (BOOL)spot_hasDefinedAttributes {
  return ((_defAttributes_ != nil) && ([_defAttributes_ size] > 0));
}

- (BOOL)spot_hasValue {
  int n = [self spot_checkRangeValidity];
  return (n == iSPOTConstants_VALUE_NULL_WITH_DEFAULT) || (n == iSPOTConstants_VALUE_OK);
}

- (BOOL)spot_isAllowInvalidAttributes {
  return _allowInvalidAttributes_;
}

- (BOOL)spot_isAttributeSupportedWithNSString:(NSString *)name {
  return ((_defAttributes_ == nil) || [_defAttributes_ containsKeyWithId:name]);
}

- (BOOL)spot_isContainer {
  return NO;
}

- (BOOL)spot_isOptional {
  return _isOptional_;
}

- (BOOL)spot_isReadOnly {
  return _isReadOnly_;
}

- (BOOL)spot_isRequiredAttributeWithNSString:(NSString *)name {
  return (_requiredAttributes_ == nil) ? NO : [_requiredAttributes_ containsWithId:name];
}

- (BOOL)spot_isValuePreformatted {
  return _valuePreformatted_;
}

- (void)spot_makeReadOnly {
  if (_canMakeReadOnly_) {
    _isReadOnly_ = YES;
  }
}

+ (void)spot_populatePrimitaveElementFromStringWithISPOTElement:(id<iSPOTElement>)e
                                                   withNSString:(NSString *)string {
  if (string != nil) {
    id<JavaUtilMap> map = nil;
    int n = [string indexOf:'['];
    if (n != -1) {
      string = [string trim];
      int p = [((NSString *) nil_chk(string)) lastIndexOf:']'];
      if ((p > n) && ([string indexOf:'"' fromIndex:p] == -1)) {
        NSString *s = [string substring:n + 1 endIndex:p];
        string = [string substring:0 endIndex:n];
        map = [RAREUTCharScanner parseOptionStringExWithNSString:s withChar:','];
      }
    }
    [((id<iSPOTElement>) nil_chk(e)) spot_setValueWithNSString:[((NSString *) nil_chk(string)) trim]];
    [e spot_clearAttributes];
    if ((map != nil) && ([map size] > 0)) {
      [e spot_addAttributesWithJavaUtilMap:map];
    }
  }
}

- (void)spot_removeAttributeWithNSString:(NSString *)name {
  if (_attributes_ != nil) {
    (void) [_attributes_ removeWithId:name];
  }
}

- (void)spot_resetAttributeWithNSString:(NSString *)name
                            withBoolean:(BOOL)clean {
  if (_attributes_ != nil) {
    if (_defAttributes_ != nil) {
      (void) [_attributes_ putWithId:name withId:[_defAttributes_ getWithId:name]];
      if (clean && [RAREUTHelper valuesEqualsWithJavaUtilMap:_attributes_ withJavaUtilMap:_defAttributes_]) {
        _attributeSet_ = NO;
      }
    }
  }
}

- (void)spot_resetAttributes {
  if (_attributes_ != nil) {
    [_attributes_ clear];
    if (_defAttributes_ != nil) {
      [_attributes_ putAllWithJavaUtilMap:_defAttributes_];
    }
  }
  _attributeSet_ = NO;
}

+ (NSString *)spot_resolveClassNameWithISPOTElement:(id<iSPOTElement>)obj
                                       withNSString:(NSString *)type {
  return [SPOTHelper resolveClassNameWithISPOTElement:obj withNSString:type];
}

+ (SPOTSequence *)spot_sequenceForMapWithJavaUtilMap:(id<JavaUtilMap>)map
                                         withBoolean:(BOOL)parseForAttributes {
  SPOTSequence *seq = [[SPOTSequence alloc] initWithBoolean:YES];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> e = [it next];
    NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
    id val = [e getValue];
    [seq spot_addElementWithNSString:name withISPOTElement:[aSPOTElement spot_elementForObjectWithId:val withBoolean:parseForAttributes]];
  }
  return seq;
}

- (void)spot_setAllowInvalidAttributesWithBoolean:(BOOL)allow {
  self->_allowInvalidAttributes_ = allow;
}

- (void)spot_setAttributeWithNSString:(NSString *)name
                         withNSString:(NSString *)value {
  if (!aSPOTElement_OPTIMIZE_RUNTIME_ && !_allowInvalidAttributes_ && (_defAttributes_ != nil) && ![_defAttributes_ containsKeyWithId:name]) {
    @throw [[SPOTException alloc] initWithInt:iSPOTConstants_INVALID_ELEMENT withNSString:[iSPOTConstants STR_INVALID_ATTRIBUTE] withNSString:(_theName_ == nil) ? [[self getClass] getName] : _theName_ withNSString:name];
  }
  if (_attributes_ == nil) {
    [self createAttributesMap];
  }
  (void) [((NoNullLinkedHashMap *) nil_chk(_attributes_)) putWithId:name withId:value];
  _attributeSet_ = YES;
}

- (void)spot_setFooterCommentWithNSString:(NSString *)comment {
  _footerComment_ = comment;
}

+ (SPOTSet *)spot_setForListWithJavaUtilList:(id<JavaUtilList>)list
                                 withBoolean:(BOOL)parseForAttributes {
  SPOTSet *set = [[SPOTSet alloc] initWithBoolean:YES];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  if (len > 0) {
    id<iSPOTElement> e = [aSPOTElement spot_elementForObjectWithId:[list getWithInt:0] withBoolean:parseForAttributes];
    [set setTypeWithNSString:[((id<iSPOTElement>) nil_chk(e)) spot_getClassShortName] withNSString:[[e getClass] getName]];
    [set addWithISPOTElement:e];
    for (int i = 1; i < len; i++) {
      [set addWithISPOTElement:[aSPOTElement spot_elementForObjectWithId:[list getWithInt:i] withBoolean:parseForAttributes]];
    }
  }
  return set;
}

- (void)spot_setHeaderCommentsWithNSStringArray:(IOSObjectArray *)comments {
  _headerComment_ = comments;
}

- (id)spot_setLinkedDataWithId:(id)data {
  id o = _linkedData_;
  _linkedData_ = data;
  return o;
}

- (void)spot_setNameWithNSString:(NSString *)name {
  if (!aSPOTElement_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  _theName_ = name;
}

- (void)spot_setOptionalWithBoolean:(BOOL)optional {
  if (!aSPOTElement_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  _isOptional_ = optional;
}

- (void)spot_setParentWithISPOTElement:(id<iSPOTElement>)element {
  _parentElement_ = element;
}

- (void)spot_setRangeWithLong:(long long int)min
                     withLong:(long long int)max {
  @throw [[SPOTException alloc] initWithInt:iSPOTConstants_NOT_SUPPORTED withNSString:[iSPOTConstants STR_NOT_SUPPORTED] withNSString:[[self getClass] getName]];
}

- (void)spot_setRangeWithNSString:(NSString *)min
                     withNSString:(NSString *)max {
  @throw [[SPOTException alloc] initWithInt:iSPOTConstants_NOT_SUPPORTED withNSString:[iSPOTConstants STR_NOT_SUPPORTED] withNSString:[[self getClass] getName]];
}

- (void)spot_setValueWithNSString:(NSString *)val {
  [self setValueWithNSString:val];
}

- (void)spot_setValuePreformattedWithBoolean:(BOOL)valuePreformatted {
  [self spot_setValuePreformattedWithBoolean:valuePreformatted withNSString:nil];
}

- (void)spot_setValuePreformattedWithBoolean:(BOOL)valuePreformatted
                                withNSString:(NSString *)preformattedTag {
  self->_valuePreformatted_ = valuePreformatted;
  self->_preformattedTag_ = preformattedTag;
}

- (NSString *)spot_stringValueEx {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)spot_valueWasSet {
  int n = [self spot_checkRangeValidity];
  return ((n == iSPOTConstants_VALUE_OK) || (n == iSPOTConstants_VALUE_TO_SMALL) || (n == iSPOTConstants_VALUE_TO_BIG));
}

- (NSString *)stringValue {
  return [self spot_stringValue];
}

- (NSString *)toSDF {
  JavaIoStringWriter *sw = [[JavaIoStringWriter alloc] init];
  @try {
    [self toSDFWithJavaIoWriter:sw withNSString:nil withInt:0 withBoolean:NO withBoolean:YES];
  }
  @catch (JavaIoIOException *ignore) {
  }
  return [sw description];
}

- (BOOL)toSDFWithJavaIoWriter:(JavaIoWriter *)outArg {
  return [self toSDFWithJavaIoWriter:outArg withNSString:nil withInt:0 withBoolean:NO withBoolean:YES];
}

- (BOOL)toSDFWithJavaIoWriter:(JavaIoWriter *)outArg
                 withNSString:(NSString *)tag
                      withInt:(int)depth
                  withBoolean:(BOOL)outputempty
                  withBoolean:(BOOL)outputComments {
  return [self toSDFWithJavaIoWriter:outArg withNSString:tag withInt:depth withBoolean:outputempty withNSString:[self spot_stringValueEx] withBoolean:outputComments];
}

- (void)toStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [RAREUTaStreamer toStreamWithNSString:[self spot_stringValue] withJavaIoOutputStream:outArg];
}

- (NSString *)description {
  NSString *s = [self spot_stringValue];
  return (s == nil) ? @"" : s;
}

+ (void)writeSDFNameWithJavaIoWriter:(JavaIoWriter *)outArg
                        withNSString:(NSString *)name
                             withInt:(int)depth {
  [RAREUTHelper writePaddingWithJavaIoWriter:outArg withInt:depth];
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:name];
}

- (void)setValueWithBoolean:(BOOL)val {
  [self setValueWithNSString:val ? @"true" : @"false"];
}

- (void)setValueWithDouble:(double)val {
  [self setValueWithNSString:[RAREUTSNumber toStringWithDouble:val]];
}

- (void)setValueWithLong:(long long int)val {
  [self setValueWithNSString:[RAREUTSNumber toStringWithLong:val]];
}

- (void)setValueWithRAREUTSNumber:(RAREUTSNumber *)val {
  [self setValueWithNSString:[((RAREUTSNumber *) nil_chk(val)) description]];
}

- (void)setValueWithNSString:(NSString *)val {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (BOOL)attributeValueEqualsWithISPOTElement:(id<iSPOTElement>)e1
                            withISPOTElement:(id<iSPOTElement>)e2 {
  if (![((id<iSPOTElement>) nil_chk(e1)) spot_hasAttributes]) {
    return ![((id<iSPOTElement>) nil_chk(e2)) spot_hasAttributes];
  }
  if (![((id<iSPOTElement>) nil_chk(e2)) spot_hasAttributes]) {
    return ![e1 spot_hasAttributes];
  }
  id<JavaUtilMap> attributes = [e1 spot_getSupportedAttributes];
  if (attributes == nil) {
    return NO;
  }
  id<JavaUtilMap> map1 = [e1 spot_getAttributesEx];
  id<JavaUtilMap> map2 = [e2 spot_getAttributesEx];
  if ((map1 == nil) || (map2 == nil)) {
    return NO;
  }
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) keySet])) iterator];
  NSString *key, *value, *value2;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    key = (NSString *) check_class_cast([it next], [NSString class]);
    value = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(map1)) getWithId:key], [NSString class]);
    value2 = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(map2)) getWithId:key], [NSString class]);
    if (value == nil) {
      if ((value2 != nil) && ([value2 sequenceLength] > 0)) {
        return NO;
      }
    }
    else {
      if ((value2 == nil) && ([value sequenceLength] == 0)) {
        continue;
      }
      if (![value isEqual:value2]) {
        return NO;
      }
    }
  }
  return YES;
}

+ (void)writeAttributesWithJavaIoWriter:(JavaIoWriter *)outArg
                        withJavaUtilMap:(id<JavaUtilMap>)attributes
                        withJavaUtilMap:(id<JavaUtilMap>)def
                                withInt:(int)depth {
  if ((attributes == nil) || ([attributes size] == 0)) {
    return;
  }
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) entrySet])) iterator];
  RAREUTCharArray *sb = [[RAREUTCharArray alloc] init];
  id<JavaUtilMap_Entry> me;
  NSString *val;
  NSString *name;
  BOOL first = YES;
  int count = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    me = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
    name = (NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(me)) getKey], [NSString class]);
    if ([((NSString *) nil_chk(name)) hasPrefix:@"xml"] || [name hasPrefix:@"xsi:"] || [name hasPrefix:@"xsd"]) {
      continue;
    }
    val = (NSString *) check_class_cast([me getValue], [NSString class]);
    if (def != nil) {
      NSString *v = (NSString *) check_class_cast([def getWithId:name], [NSString class]);
      if ((v != nil) && [v isEqual:val]) {
        continue;
      }
      if ((v == nil) && (val == nil)) {
        continue;
      }
    }
    count += [sb sequenceLength];
    (void) [sb setLengthWithInt:0];
    if (!first) {
      (void) [sb appendWithNSString:@", "];
      if (count > 80) {
        [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@","];
        [outArg writeWithNSString:@"\n"];
        [RAREUTHelper writePaddingWithJavaIoWriter:outArg withInt:depth + 2];
        (void) [sb setLengthWithInt:0];
        count = 0;
      }
    }
    else {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@" [ "];
      first = NO;
    }
    (void) [sb appendWithNSString:name];
    if (val != nil) {
      (void) [sb appendWithNSString:@"=\""];
      int n = [val indexOf:'"'];
      if (n != -1) {
        (void) [RAREUTCharScanner escapeWithNSString:val withBoolean:YES withRAREUTCharArray:sb];
      }
      else {
        (void) [sb appendWithNSString:val];
      }
      (void) [sb appendWithChar:'"'];
    }
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:[sb description]];
  }
  if (!first) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@" ]"];
  }
}

- (void)checkReadOnly {
  if (_isReadOnly_) {
    @throw [[SPOTException alloc] initWithInt:iSPOTConstants_READ_ONLY withNSString:[iSPOTConstants STR_READ_ONLY] withNSString:(_theName_ == nil) ? [[self getClass] getName] : _theName_];
  }
}

- (RAREUTSNumber *)numValueNumber {
  if (_numValue_ == nil) {
    _numValue_ = [[RAREUTSNumber alloc] initWithInt:0];
  }
  return _numValue_;
}

- (RAREUTSNumber *)numValueNumberWithNSString:(NSString *)val {
  if (_numValue_ == nil) {
    _numValue_ = [[RAREUTSNumber alloc] initWithInt:0];
  }
  _numValue_ = [((RAREUTSNumber *) nil_chk(_numValue_)) setValueWithNSString:val];
  return _numValue_;
}

- (int)spot_checkRangeValidityEx {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)spot_copyExWithISPOTElement:(id<iSPOTElement>)element {
  id<JavaUtilMap> a = [((id<iSPOTElement>) nil_chk(element)) spot_getAttributesEx];
  if (a != nil) {
    _attributes_ = [[NoNullLinkedHashMap alloc] initWithJavaUtilMap:a];
  }
  if ([(id) element isKindOfClass:[aSPOTElement class]]) {
    aSPOTElement *ae = (aSPOTElement *) check_class_cast(element, [aSPOTElement class]);
    self->_footerComment_ = ae->_footerComment_;
    self->_headerComment_ = ae->_headerComment_;
    self->_preformattedTag_ = ae->_preformattedTag_;
    self->_valuePreformatted_ = ae->_valuePreformatted_;
    self->_linkedData_ = ae->_linkedData_;
    self->_attributeSet_ = ae->_attributeSet_;
  }
  else {
    self->_attributeSet_ = [RAREUTHelper valuesEqualsWithJavaUtilMap:_attributes_ withJavaUtilMap:_defAttributes_];
  }
}

+ (NSString *)spot_getMissingReqiredAttributesWithJavaUtilMap:(id<JavaUtilMap>)_attributes
                                              withJavaUtilSet:(id<JavaUtilSet>)_requiredAttributes {
  if (_requiredAttributes == nil) {
    return @"";
  }
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(_requiredAttributes)) iterator];
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithNSString:@"{missing required attributes: "];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *s = (NSString *) check_class_cast([it next], [NSString class]);
    if ((_attributes == nil) || ([_attributes getWithId:s] == nil)) {
      (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:s])) appendWithChar:','];
    }
  }
  [sb setLengthWithInt:[sb sequenceLength] - 1];
  (void) [sb appendWithNSString:@"}"];
  return [sb description];
}

- (NSString *)spot_handleRequiredAttributeWithNSString:(NSString *)name {
  if ((name != nil) && [name hasSuffix:@"!"]) {
    name = [name substring:0 endIndex:[name sequenceLength] - 1];
    if (_requiredAttributes_ == nil) {
      _requiredAttributes_ = [[JavaUtilHashSet alloc] init];
    }
  }
  return name;
}

+ (BOOL)spot_requiredAttributesWereSetWithJavaUtilMap:(id<JavaUtilMap>)_attributes
                                      withJavaUtilSet:(id<JavaUtilSet>)_requiredAttributes {
  if (_requiredAttributes == nil) {
    return YES;
  }
  if (_attributes == nil) {
    return NO;
  }
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(_requiredAttributes)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if ([((id<JavaUtilMap>) nil_chk(_attributes)) getWithId:[it next]] == nil) {
      return NO;
    }
  }
  return YES;
}

- (void)spot_setCanMakeReadOnlyWithBoolean:(BOOL)canmakero {
  if (!aSPOTElement_OPTIMIZE_RUNTIME_) {
    [self checkReadOnly];
  }
  _canMakeReadOnly_ = canmakero;
}

- (BOOL)toSDFWithJavaIoWriter:(JavaIoWriter *)outArg
                 withNSString:(NSString *)tag
                      withInt:(int)depth
                  withBoolean:(BOOL)outputempty
                 withNSString:(NSString *)value
                  withBoolean:(BOOL)outputComments {
  if ((value == nil) && !outputempty) {
    if ([self spot_attributesWereSet]) {
      value = @"";
    }
    else {
      return NO;
    }
  }
  if ((_headerComment_ != nil) && outputComments) {
    int len = (int) [_headerComment_ count];
    if ((len > 0) && [((NSString *) IOSObjectArray_Get(_headerComment_, 0)) hasPrefix:@"/**"]) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"\n"];
    }
    for (int i = 0; i < len; i++) {
      [aSPOTElement writeSDFNameWithJavaIoWriter:outArg withNSString:IOSObjectArray_Get(_headerComment_, i) withInt:depth];
      [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"\n"];
    }
  }
  if (_valuePreformatted_) {
    if (tag == nil) {
      tag = @"";
    }
    if (_preformattedTag_ != nil) {
      [aSPOTElement writeSDFNameWithJavaIoWriter:outArg withNSString:[NSString stringWithFormat:@"%@:<<%@\n", tag, _preformattedTag_] withInt:depth];
    }
    else {
      [aSPOTElement writeSDFNameWithJavaIoWriter:outArg withNSString:[NSString stringWithFormat:@"%@:<< ", tag] withInt:depth];
    }
  }
  else {
    if (tag != nil) {
      [aSPOTElement writeSDFNameWithJavaIoWriter:outArg withNSString:[NSString stringWithFormat:@"%@: ", tag] withInt:depth];
    }
    else {
      [RAREUTHelper writePaddingWithJavaIoWriter:outArg withInt:depth];
    }
  }
  if (value != nil) {
    BOOL pre = _valuePreformatted_;
    BOOL mline = NO;
    if (!pre) {
      switch ([self spot_getType]) {
        case iSPOTConstants_SPOT_TYPE_BOOLEAN:
        case iSPOTConstants_SPOT_TYPE_INTEGER:
        case iSPOTConstants_SPOT_TYPE_REAL:
        case iSPOTConstants_SPOT_TYPE_ENUMERATED:
        pre = YES;
        break;
        default:
        break;
      }
    }
    else {
      mline = [value indexOf:0x000a] != -1;
    }
    if (mline && ([value charAtWithInt:0] > 13)) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:0x000a];
    }
    BOOL lf = YES;
    int n = [value lastIndexOf:0x000a];
    if (n != -1) {
      lf = NO;
      int len = [value sequenceLength];
      for (int i = n; i < len; i++) {
        if (![JavaLangCharacter isWhitespaceWithChar:[value charAtWithInt:i]]) {
          lf = YES;
          break;
        }
      }
    }
    [SDFNode writeValueWithJavaIoWriter:outArg withNSString:value withBoolean:pre withInt:depth];
    if ((_preformattedTag_ == nil) && mline && lf) {
      [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:0x000a];
    }
  }
  if (_valuePreformatted_) {
    if (depth > 1) {
      [RAREUTHelper writePaddingWithJavaIoWriter:outArg withInt:depth - 1];
    }
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:(_preformattedTag_ == nil) ? @">>" : _preformattedTag_];
  }
  [aSPOTElement writeAttributesWithJavaIoWriter:outArg withJavaUtilMap:self->_attributes_ withJavaUtilMap:self->_defAttributes_ withInt:depth];
  if ((_footerComment_ != nil) && outputComments) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@" "];
    [outArg writeWithNSString:_footerComment_];
  }
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"\n"];
  return YES;
}

- (void)createAttributesMap {
  if (_defAttributes_ != nil) {
    _attributes_ = [[NoNullLinkedHashMap alloc] initWithInt:[_defAttributes_ size]];
    [_attributes_ putAllWithJavaUtilMap:_defAttributes_];
  }
  else {
    _attributes_ = [[NoNullLinkedHashMap alloc] init];
  }
}

- (int)spot_getType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)spot_getValidityRange {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)spot_getValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)spot_stringValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  if (self = [super init]) {
    attributeSizeHint_ = 0;
  }
  return self;
}

+ (void)initialize {
  if (self == [aSPOTElement class]) {
    aSPOTElement_perThreadNumber_ = [[aSPOTElement_$1 alloc] init];
    aSPOTElement_perThreadCharArray_ = [[aSPOTElement_$2 alloc] init];
    {
      BOOL opt = YES;
      @try {
        NSString *s = [JavaLangSystem getPropertyWithNSString:@"spot.optimize" withNSString:nil];
        if (s == nil) {
          s = [JavaLangSystem getPropertyWithNSString:@"jnlp.spot.optimize" withNSString:nil];
        }
        if (s != nil) {
          opt = [@"true" isEqual:s];
        }
      }
      @catch (JavaLangThrowable *e) {
      }
      aSPOTElement_OPTIMIZE_RUNTIME_ = opt;
    }
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(aSPOTElement *)other {
  [super copyAllFieldsTo:other];
  other->_allowInvalidAttributes_ = _allowInvalidAttributes_;
  other->_attributeSet_ = _attributeSet_;
  other->_attributes_ = _attributes_;
  other->_canMakeReadOnly_ = _canMakeReadOnly_;
  other->_defAttributes_ = _defAttributes_;
  other->_footerComment_ = _footerComment_;
  other->_headerComment_ = _headerComment_;
  other->_isOptional_ = _isOptional_;
  other->_isReadOnly_ = _isReadOnly_;
  other->_linkedData_ = _linkedData_;
  other->_numValue_ = _numValue_;
  other->_parentElement_ = _parentElement_;
  other->_preformattedTag_ = _preformattedTag_;
  other->_requiredAttributes_ = _requiredAttributes_;
  other->_theName_ = _theName_;
  other->_valuePreformatted_ = _valuePreformatted_;
  other->attributeSizeHint_ = attributeSizeHint_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "booleanValue", NULL, "Z", 0x1, NULL },
    { "byteArrayValue", NULL, "LIOSByteArray", 0x1, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "equalsWithASPOTElement:", NULL, "Z", 0x1, NULL },
    { "fromSDFWithSDFNode:", NULL, "Z", 0x1, "SPOTException" },
    { "fromStreamWithJavaIoInputStream:", NULL, "V", 0x1, "JavaIoIOException" },
    { "fromStructuredNodeWithRAREUTiStructuredNode:", NULL, "Z", 0x1, "SPOTException" },
    { "numberValue", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "spot_attributesEqualWithISPOTElement:withISPOTElement:", NULL, "Z", 0x9, NULL },
    { "spot_attributesWereSet", NULL, "Z", 0x11, NULL },
    { "spot_checkRangeValidityStr", NULL, "LNSString", 0x1, NULL },
    { "spot_elementForObjectWithId:withBoolean:", NULL, "LiSPOTElement", 0x9, NULL },
    { "spot_elementValue", NULL, "LiSPOTElement", 0x1, NULL },
    { "spot_equalsWithISPOTElement:", NULL, "Z", 0x1, NULL },
    { "spot_getAttributeWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "spot_getAttributeDefaultValueWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "spot_getAttributes", NULL, "LJavaUtilMap", 0x1, NULL },
    { "spot_getAttributesEx", NULL, "LJavaUtilMap", 0x1, NULL },
    { "spot_getClassName", NULL, "LNSString", 0x1, NULL },
    { "spot_getClassShortName", NULL, "LNSString", 0x1, NULL },
    { "spot_getClassShortNameWithIOSClass:", NULL, "LNSString", 0x9, NULL },
    { "spot_getFooterComment", NULL, "LNSString", 0x1, NULL },
    { "spot_getHeaderComments", NULL, "LIOSObjectArray", 0x1, NULL },
    { "spot_getLinkedData", NULL, "LNSObject", 0x1, NULL },
    { "spot_getName", NULL, "LNSString", 0x1, NULL },
    { "spot_getNameWithIOSClass:", NULL, "LNSString", 0x9, NULL },
    { "spot_getParent", NULL, "LiSPOTElement", 0x1, NULL },
    { "spot_getRange", NULL, "LIOSObjectArray", 0x1, NULL },
    { "spot_getRelativeClassNameWithISPOTElement:", NULL, "LNSString", 0x9, NULL },
    { "spot_getRelativeShortNameWithIOSClass:withIOSClass:", NULL, "LNSString", 0x9, NULL },
    { "spot_getSupportedAttributes", NULL, "LJavaUtilMap", 0x1, NULL },
    { "spot_getTemplateHandler", NULL, "LiSPOTTemplateHandler", 0x1, NULL },
    { "spot_hasAttributes", NULL, "Z", 0x1, NULL },
    { "spot_hasDefinedAttributes", NULL, "Z", 0x1, NULL },
    { "spot_hasValue", NULL, "Z", 0x1, NULL },
    { "spot_isAllowInvalidAttributes", NULL, "Z", 0x1, NULL },
    { "spot_isAttributeSupportedWithNSString:", NULL, "Z", 0x1, NULL },
    { "spot_isContainer", NULL, "Z", 0x1, NULL },
    { "spot_isOptional", NULL, "Z", 0x1, NULL },
    { "spot_isReadOnly", NULL, "Z", 0x1, NULL },
    { "spot_isRequiredAttributeWithNSString:", NULL, "Z", 0x1, NULL },
    { "spot_isValuePreformatted", NULL, "Z", 0x1, NULL },
    { "spot_resolveClassNameWithISPOTElement:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "spot_sequenceForMapWithJavaUtilMap:withBoolean:", NULL, "LSPOTSequence", 0x9, NULL },
    { "spot_setForListWithJavaUtilList:withBoolean:", NULL, "LSPOTSet", 0x9, NULL },
    { "spot_setLinkedDataWithId:", NULL, "LNSObject", 0x1, NULL },
    { "spot_stringValueEx", NULL, "LNSString", 0x401, NULL },
    { "spot_valueWasSet", NULL, "Z", 0x1, NULL },
    { "stringValue", NULL, "LNSString", 0x1, NULL },
    { "toSDF", NULL, "LNSString", 0x1, NULL },
    { "toSDFWithJavaIoWriter:", NULL, "Z", 0x1, "JavaIoIOException" },
    { "toSDFWithJavaIoWriter:withNSString:withInt:withBoolean:withBoolean:", NULL, "Z", 0x1, "JavaIoIOException" },
    { "toStreamWithJavaIoOutputStream:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeSDFNameWithJavaIoWriter:withNSString:withInt:", NULL, "V", 0x9, "JavaIoIOException" },
    { "setValueWithNSString:", NULL, "V", 0x401, NULL },
    { "attributeValueEqualsWithISPOTElement:withISPOTElement:", NULL, "Z", 0x8, NULL },
    { "writeAttributesWithJavaIoWriter:withJavaUtilMap:withJavaUtilMap:withInt:", NULL, "V", 0x8, "JavaIoIOException" },
    { "checkReadOnly", NULL, "V", 0x4, "SPOTException" },
    { "numValueNumber", NULL, "LRAREUTSNumber", 0x4, NULL },
    { "numValueNumberWithNSString:", NULL, "LRAREUTSNumber", 0x4, NULL },
    { "spot_checkRangeValidityEx", NULL, "I", 0x404, NULL },
    { "spot_copyExWithISPOTElement:", NULL, "V", 0x4, NULL },
    { "spot_getMissingReqiredAttributesWithJavaUtilMap:withJavaUtilSet:", NULL, "LNSString", 0xc, NULL },
    { "spot_handleRequiredAttributeWithNSString:", NULL, "LNSString", 0x4, NULL },
    { "spot_requiredAttributesWereSetWithJavaUtilMap:withJavaUtilSet:", NULL, "Z", 0xc, NULL },
    { "spot_setCanMakeReadOnlyWithBoolean:", NULL, "V", 0x4, NULL },
    { "toSDFWithJavaIoWriter:withNSString:withInt:withBoolean:withNSString:withBoolean:", NULL, "Z", 0x4, "JavaIoIOException" },
    { "createAttributesMap", NULL, "V", 0x2, NULL },
    { "spot_getType", NULL, "I", 0x401, NULL },
    { "spot_getValidityRange", NULL, "LNSString", 0x401, NULL },
    { "spot_getValue", NULL, "LNSObject", 0x401, NULL },
    { "spot_stringValue", NULL, "LNSString", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "perThreadNumber_", NULL, 0x1c, "LJavaLangThreadLocal" },
    { "perThreadCharArray_", NULL, 0x1c, "LJavaLangThreadLocal" },
    { "OPTIMIZE_RUNTIME_", NULL, 0x1c, "Z" },
    { "attributeSizeHint_", NULL, 0x4, "I" },
    { "_attributeSet_", NULL, 0x4, "Z" },
    { "_attributes_", NULL, 0x4, "LNoNullLinkedHashMap" },
    { "_canMakeReadOnly_", NULL, 0x4, "Z" },
    { "_defAttributes_", NULL, 0x4, "LJavaUtilLinkedHashMap" },
    { "_footerComment_", NULL, 0x4, "LNSString" },
    { "_headerComment_", NULL, 0x4, "LIOSObjectArray" },
    { "_isOptional_", NULL, 0x4, "Z" },
    { "_isReadOnly_", NULL, 0x4, "Z" },
    { "_parentElement_", NULL, 0x4, "LiSPOTElement" },
    { "_preformattedTag_", NULL, 0x4, "LNSString" },
    { "_requiredAttributes_", NULL, 0x4, "LJavaUtilSet" },
    { "_theName_", NULL, 0x4, "LNSString" },
    { "_valuePreformatted_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _aSPOTElement = { "aSPOTElement", "com.appnativa.spot", NULL, 0x401, 72, methods, 17, fields, 0, NULL};
  return &_aSPOTElement;
}

@end
@implementation aSPOTElement_$1

- (id)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTSNumber alloc] initWithInt:0];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LNSObject", 0x24, NULL },
  };
  static J2ObjcClassInfo _aSPOTElement_$1 = { "$1", "com.appnativa.spot", "aSPOTElement", 0x8000, 1, methods, 0, NULL, 0, NULL};
  return &_aSPOTElement_$1;
}

@end
@implementation aSPOTElement_$2

- (RAREUTCharArray *)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTCharArray alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LRAREUTCharArray", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LRAREUTCharArray"};
  static J2ObjcClassInfo _aSPOTElement_$2 = { "$2", "com.appnativa.spot", "aSPOTElement", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_aSPOTElement_$2;
}

@end
