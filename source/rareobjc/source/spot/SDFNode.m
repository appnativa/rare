//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../spot/src/com/appnativa/spot/SDFNode.java
//
//  Created by decoteaud on 9/15/15.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/spot/SDFNode.h"
#include "com/appnativa/spot/SDFParser.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/FileResolver.h"
#include "com/appnativa/util/iFileResolver.h"
#include "com/appnativa/util/iStructuredNode.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation SDFNode

static NSString * SDFNode_lineSeparator_;
static IOSCharArray * SDFNode_padding_;

+ (int)NODETYPE_BLOCK {
  return SDFNode_NODETYPE_BLOCK;
}

+ (int)NODETYPE_COMMAND {
  return SDFNode_NODETYPE_COMMAND;
}

+ (int)NODETYPE_COMMENT {
  return SDFNode_NODETYPE_COMMENT;
}

+ (int)NODETYPE_NORMAL {
  return SDFNode_NODETYPE_NORMAL;
}

+ (int)NODETYPE_ROOT {
  return SDFNode_NODETYPE_ROOT;
}

+ (NSString *)lineSeparator {
  return SDFNode_lineSeparator_;
}

+ (IOSCharArray *)padding {
  return SDFNode_padding_;
}

+ (void)setPadding:(IOSCharArray *)padding {
  SDFNode_padding_ = padding;
}

- (id)initWithNSString:(NSString *)name {
  if (self = [super init]) {
    nodeType_ = SDFNode_NODETYPE_NORMAL;
    childNodes_ = nil;
    isACopy_ = NO;
    linkedData_ = nil;
    nameMap_ = nil;
    nodeAttributes_ = nil;
    nodeComment_ = nil;
    parentNode_ = nil;
    preformattedTag_ = nil;
    valuePreformatted_ = NO;
    nodeValue_ = nil;
    nodeName_ = name;
  }
  return self;
}

- (id)initWithNSString:(NSString *)name
          withNSString:(NSString *)value {
  if (self = [super init]) {
    nodeType_ = SDFNode_NODETYPE_NORMAL;
    childNodes_ = nil;
    isACopy_ = NO;
    linkedData_ = nil;
    nameMap_ = nil;
    nodeAttributes_ = nil;
    nodeComment_ = nil;
    parentNode_ = nil;
    preformattedTag_ = nil;
    valuePreformatted_ = NO;
    nodeName_ = name;
    nodeValue_ = value;
  }
  return self;
}

- (void)addAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  if (nodeAttributes_ == nil) {
    nodeAttributes_ = [[JavaUtilLinkedHashMap alloc] init];
  }
  (void) [((id<JavaUtilMap>) nil_chk(nodeAttributes_)) putWithId:name withId:value];
}

- (void)addAttributesWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  int len = (attributes == nil) ? 0 : [attributes size];
  if (len == 0) {
    return;
  }
  if (nodeAttributes_ == nil) {
    nodeAttributes_ = [[JavaUtilLinkedHashMap alloc] init];
  }
  [((id<JavaUtilMap>) nil_chk(nodeAttributes_)) putAllWithJavaUtilMap:attributes];
}

- (void)addChildrenWithJavaUtilList:(id<JavaUtilList>)children {
  int len = (children == nil) ? 0 : [children size];
  if (len == 0) {
    return;
  }
  if (childNodes_ == nil) {
    childNodes_ = [[JavaUtilArrayList alloc] init];
  }
  [((JavaUtilArrayList *) nil_chk(childNodes_)) addAllWithJavaUtilCollection:children];
}

- (void)addNodeWithSDFNode:(SDFNode *)node {
  if (childNodes_ == nil) {
    childNodes_ = [[JavaUtilArrayList alloc] init];
  }
  [((JavaUtilArrayList *) nil_chk(childNodes_)) addWithId:node];
  ((SDFNode *) nil_chk(node))->parentNode_ = self;
  if ([node getNodeName] != nil) {
    if (nameMap_ == nil) {
      nameMap_ = [[JavaUtilHashMap alloc] init];
    }
    (void) [((id<JavaUtilMap>) nil_chk(nameMap_)) putWithId:[node getNodeName] withId:node];
  }
}

- (id)clone {
  return [self copy__];
}

- (SDFNode *)copy__ {
  SDFNode *node = [[SDFNode alloc] initWithNSString:nodeName_ withNSString:nodeValue_];
  node->nodeType_ = nodeType_;
  node->valuePreformatted_ = valuePreformatted_;
  if (nodeAttributes_ != nil) {
    node->nodeAttributes_ = [[JavaUtilLinkedHashMap alloc] initWithJavaUtilMap:nodeAttributes_];
  }
  if (childNodes_ != nil) {
    JavaUtilArrayList *list = childNodes_;
    int len = [list size];
    int i = 0;
    while (i < len) {
      [node addNodeWithSDFNode:[((SDFNode *) check_class_cast([list getWithInt:i++], [SDFNode class])) copy__]];
    }
  }
  node->isACopy_ = YES;
  return node;
}

- (void)copyAttributesWithJavaUtilMap:(id<JavaUtilMap>)destination {
  if (nodeAttributes_ != nil) {
    [((id<JavaUtilMap>) nil_chk(destination)) putAllWithJavaUtilMap:nodeAttributes_];
  }
}

- (SDFNode *)createBlockFromThisWithNSString:(NSString *)name
                                withNSString:(NSString *)subname {
  SDFNode *node = [[SDFNode alloc] initWithNSString:name];
  SDFNode *c = [self copy__];
  node->nodeType_ = SDFNode_NODETYPE_BLOCK;
  ((SDFNode *) nil_chk(c))->nodeName_ = subname;
  [node addNodeWithSDFNode:c];
  return node;
}

+ (SDFNode *)createRootNode {
  SDFNode *node = [[SDFNode alloc] initWithNSString:nil];
  [node setNodeTypeWithInt:SDFNode_NODETYPE_ROOT];
  return node;
}

+ (SDFNode *)parseWithJavaIoReader:(JavaIoReader *)r {
  SDFNode *node = [[SDFNode alloc] initWithNSString:nil];
  id<RAREUTiFileResolver> urlResolver = [[RAREUTFileResolver alloc] initWithJavaIoFile:[[JavaIoFile alloc] initWithNSString:@"/"]];
  [node setNodeTypeWithInt:SDFNode_NODETYPE_ROOT];
  SDFNode_ParserCallback *pc = [[SDFNode_ParserCallback alloc] initWithSDFNode:node withRAREUTiFileResolver:urlResolver];
  SDFParser *p = [[SDFParser alloc] initWithJavaIoReader:r];
  [p parseWithSDFParser_iCallback:pc];
  return node;
}

+ (void)parseWithJavaIoReader:(JavaIoReader *)r
      withSDFParser_iCallback:(id<SDFParser_iCallback>)pc {
  SDFParser *p = [[SDFParser alloc] initWithJavaIoReader:r];
  [p parseWithSDFParser_iCallback:pc];
}

+ (SDFNode *)parseWithJavaIoReader:(JavaIoReader *)r
           withRAREUTiFileResolver:(id<RAREUTiFileResolver>)urlResolver
                      withNSString:(NSString *)fileName
                       withBoolean:(BOOL)keepComments {
  SDFNode *node = [[SDFNode alloc] initWithNSString:nil];
  [node setNodeTypeWithInt:SDFNode_NODETYPE_ROOT];
  SDFNode_ParserCallback *pc = [[SDFNode_ParserCallback alloc] initWithSDFNode:node withRAREUTiFileResolver:urlResolver];
  SDFParser *p = [[SDFParser alloc] initWithJavaIoReader:r];
  [p setFileNameWithNSString:fileName];
  if (keepComments) {
    [p setIgnoreCommentsWithBoolean:NO];
  }
  [p parseWithSDFParser_iCallback:pc];
  return node;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  @try {
    int len = (args == nil) ? 0 : (int) [args count];
    NSString *file = (len == 0) ? nil : IOSObjectArray_Get(nil_chk(args), 0);
    if (file == nil) {
      file = @"/Code/Dev/appNativa/applications/BellaVista/BellaVista-android/assets/careteam.rml";
    }
    JavaIoFile *f = [[JavaIoFile alloc] initWithNSString:file];
    JavaIoFileReader *r = [[JavaIoFileReader alloc] initWithJavaIoFile:f];
    SDFNode *node = [SDFNode parseForReformatWithJavaIoReader:[[JavaIoBufferedReader alloc] initWithJavaIoReader:r] withRAREUTiFileResolver:[[RAREUTFileResolver alloc] initWithJavaIoFile:f] withNSString:file];
    [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithId:node];
  }
  @catch (JavaLangException *ex) {
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
  }
}

+ (SDFNode *)parseForReformatWithJavaIoReader:(JavaIoReader *)r
                      withRAREUTiFileResolver:(id<RAREUTiFileResolver>)urlResolver
                                 withNSString:(NSString *)fileName {
  SDFNode *node = [[SDFNode alloc] initWithNSString:nil];
  [node setNodeTypeWithInt:SDFNode_NODETYPE_ROOT];
  SDFNode_FormattingCallback *pc = [[SDFNode_FormattingCallback alloc] initWithSDFNode:node withRAREUTiFileResolver:urlResolver];
  [pc setIgnoreImportsWithBoolean:YES];
  [pc setIgnoreReferencesWithBoolean:YES];
  SDFParser *p = [[SDFParser alloc] initWithJavaIoReader:r];
  [p setFileNameWithNSString:fileName];
  [p setIgnoreCommentsWithBoolean:NO];
  [p parseWithSDFParser_iCallback:pc];
  return node;
}

- (NSString *)description {
  JavaIoStringWriter *sw = [[JavaIoStringWriter alloc] init];
  @try {
    [self toStringWithJavaIoWriter:sw withInt:0];
  }
  @catch (JavaIoIOException *ex) {
  }
  return [sw description];
}

- (void)toStringWithJavaIoWriter:(JavaIoWriter *)w
                         withInt:(int)depth {
  int len;
  NSString *name = [self getNodeName];
  {
    int size;
    switch ([self getNodeType]) {
      case SDFNode_NODETYPE_ROOT:
      len = (childNodes_ == nil) ? 0 : [childNodes_ size];
      for (int i = 0; i < len; i++) {
        [((SDFNode *) check_class_cast([((JavaUtilArrayList *) nil_chk(childNodes_)) getWithInt:i], [SDFNode class])) toStringWithJavaIoWriter:w withInt:depth];
      }
      break;
      case SDFNode_NODETYPE_BLOCK:
      size = [self getPackedSize] + (depth * 2);
      if ((size > 0) && (size < 80)) {
        [self toPackedStringWithJavaIoWriter:w withInt:depth];
        return;
      }
      else {
        if ((name == nil) || ([name sequenceLength] == 0)) {
          name = @"{";
        }
        else {
          name = [NSString stringWithFormat:@"%@ {", name];
        }
        [SDFNode writeNameWithJavaIoWriter:w withNSString:name withInt:depth];
        len = (childNodes_ == nil) ? 0 : [childNodes_ size];
        if (len == 0) {
          [((JavaIoWriter *) nil_chk(w)) writeWithNSString:@"}"];
        }
        else {
          [((JavaIoWriter *) nil_chk(w)) writeWithNSString:SDFNode_lineSeparator_];
          for (int i = 0; i < len; i++) {
            [((SDFNode *) check_class_cast([((JavaUtilArrayList *) nil_chk(childNodes_)) getWithInt:i], [SDFNode class])) toStringWithJavaIoWriter:w withInt:depth + 1];
          }
          [SDFNode writeNameWithJavaIoWriter:w withNSString:@"}" withInt:depth];
        }
      }
      break;
      case SDFNode_NODETYPE_COMMAND:
      if ([self getNodeValue] == nil) {
        [SDFNode writeNameWithJavaIoWriter:w withNSString:[NSString stringWithFormat:@"@%@", name] withInt:depth];
      }
      else {
        [SDFNode writeNameWithJavaIoWriter:w withNSString:[NSString stringWithFormat:@"@%@ %@", name, [self getNodeValue]] withInt:depth];
      }
      break;
      case SDFNode_NODETYPE_COMMENT:
      [SDFNode writeNameWithJavaIoWriter:w withNSString:name withInt:depth];
      break;
      default:
      if ([self isValuePreformatted]) {
        if (name == nil) {
          name = @"";
        }
        if ([self getNodeValue] != nil) {
          if (preformattedTag_ == nil) {
            [SDFNode writeNameWithJavaIoWriter:w withNSString:[NSString stringWithFormat:@"%@:<<\n", name] withInt:depth];
          }
          else {
            [SDFNode writeNameWithJavaIoWriter:w withNSString:[NSString stringWithFormat:@"%@:<<%@\n", name, preformattedTag_] withInt:depth];
          }
        }
        else {
          [SDFNode writeNameWithJavaIoWriter:w withNSString:[NSString stringWithFormat:@"%@: ", name] withInt:depth];
        }
      }
      else {
        if (name == nil) {
          [SDFNode writePaddingWithJavaIoWriter:w withInt:depth];
        }
        else {
          [SDFNode writeNameWithJavaIoWriter:w withNSString:[NSString stringWithFormat:@"%@: ", name] withInt:depth];
        }
      }
      if ([self getNodeValue] != nil) {
        [SDFNode writeValueWithJavaIoWriter:w withNSString:[self getNodeValue] withBoolean:[self isValuePreformatted] withInt:depth];
        if ([self isValuePreformatted]) {
          [((JavaIoWriter *) nil_chk(w)) writeWithNSString:(preformattedTag_ == nil) ? @">>" : preformattedTag_];
        }
      }
    }
  }
  [SDFNode writeAttributesWithJavaIoWriter:w withInt:depth withJavaUtilMap:nodeAttributes_];
  if (nodeComment_ != nil) {
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:@" "];
    [w writeWithNSString:self->nodeComment_];
  }
  [((JavaIoWriter *) nil_chk(w)) writeWithNSString:SDFNode_lineSeparator_];
}

+ (void)writeAttributesWithJavaIoWriter:(JavaIoWriter *)outArg
                                withInt:(int)depth
                        withJavaUtilMap:(id<JavaUtilMap>)attributes {
  if ((attributes == nil) || ([attributes size] == 0)) {
    return;
  }
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) entrySet])) iterator];
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  id<JavaUtilMap_Entry> me;
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@" [ "];
  NSString *val;
  BOOL first = YES;
  int count = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    me = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
    count += [sb sequenceLength];
    [sb setLengthWithInt:0];
    if (!first) {
      (void) [sb appendWithNSString:@", "];
      if (count > 80) {
        [outArg writeWithNSString:@","];
        [outArg writeWithNSString:SDFNode_lineSeparator_];
        [SDFNode writePaddingWithJavaIoWriter:outArg withInt:depth + 2];
        [sb setLengthWithInt:0];
        count = 0;
      }
    }
    else {
      first = NO;
    }
    (void) [sb appendWithNSString:(NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(me)) getKey], [NSString class])];
    val = (NSString *) check_class_cast([me getValue], [NSString class]);
    if (val != nil) {
      (void) [sb appendWithNSString:@"=\""];
      (void) [sb appendWithNSString:val];
      (void) [sb appendWithChar:'"'];
    }
    [outArg writeWithNSString:[sb description]];
  }
  [outArg writeWithNSString:@" ]"];
}

+ (void)writeNameWithJavaIoWriter:(JavaIoWriter *)w
                     withNSString:(NSString *)name
                          withInt:(int)depth {
  [SDFNode writePaddingWithJavaIoWriter:w withInt:depth];
  [((JavaIoWriter *) nil_chk(w)) writeWithNSString:name];
}

+ (void)writePaddingWithJavaIoWriter:(JavaIoWriter *)outArg
                             withInt:(int)depth {
  if (depth == 0) {
    return;
  }
  if (SDFNode_padding_ == nil) {
    SDFNode_padding_ = [IOSCharArray arrayWithLength:255];
    int len = (int) [SDFNode_padding_ count];
    for (int i = 0; i < len; i++) {
      (*IOSCharArray_GetRef(SDFNode_padding_, i)) = ' ';
    }
  }
  int len = (int) [((IOSCharArray *) nil_chk(SDFNode_padding_)) count];
  depth *= 2;
  while (depth > len) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:SDFNode_padding_ withInt:0 withInt:len];
    depth -= len;
  }
  if (depth > 0) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithCharArray:SDFNode_padding_ withInt:0 withInt:depth];
  }
}

+ (void)writeValueWithJavaIoWriter:(JavaIoWriter *)w
                      withNSString:(NSString *)value
                       withBoolean:(BOOL)pre
                           withInt:(int)depth {
  if (pre) {
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:value];
  }
  else {
    RAREUTCharArray *ca = [SDFNode requoteWithNSString:value];
    int n = [((RAREUTCharArray *) nil_chk(ca)) indexOfWithChar:0x000a];
    if (n == -1) {
      [((JavaIoWriter *) nil_chk(w)) writeWithCharArray:ca->A_ withInt:0 withInt:ca->_length_];
    }
    else {
      RAREUTCharScanner *sc = [[RAREUTCharScanner alloc] initWithCharArray:ca->A_ withInt:0 withInt:ca->_length_ withBoolean:NO];
      NSString *s;
      s = [sc nextTokenWithChar:0x000a];
      [((JavaIoWriter *) nil_chk(w)) writeWithNSString:s];
      while ((s = [sc nextTokenWithChar:0x000a]) != nil) {
        [w writeWithInt:0x000a];
        [SDFNode writePaddingWithJavaIoWriter:w withInt:depth];
        [w writeWithNSString:s];
      }
    }
  }
}

- (void)setLinkedDataWithId:(id)linkedData {
  self->linkedData_ = linkedData;
}

- (void)setNodeAttributesWithJavaUtilMap:(id<JavaUtilMap>)nodeAttributes {
  self->nodeAttributes_ = nodeAttributes;
}

- (void)setNodeCommentWithNSString:(NSString *)comment {
  nodeComment_ = comment;
}

- (void)setNodeNameWithNSString:(NSString *)nodeName {
  self->nodeName_ = nodeName;
}

- (void)setNodeTypeWithInt:(int)nodeType {
  self->nodeType_ = nodeType;
}

- (void)setNodeValueWithNSString:(NSString *)nodeValue {
  self->nodeValue_ = nodeValue;
}

- (void)setPreformattedTagWithNSString:(NSString *)preformattedTag {
  self->preformattedTag_ = preformattedTag;
}

- (void)setValuePreformattedWithBoolean:(BOOL)valuePreformatted
                           withNSString:(NSString *)preformattedTag {
  self->valuePreformatted_ = valuePreformatted;
  if (valuePreformatted) {
    self->preformattedTag_ = preformattedTag;
  }
}

- (id)getAttributeWithNSString:(NSString *)name {
  return (nodeAttributes_ == nil) ? nil : (NSString *) check_class_cast([nodeAttributes_ getWithId:name], [NSString class]);
}

- (id<JavaUtilMap>)getAttributes {
  return nodeAttributes_;
}

- (id<RAREUTiStructuredNode>)getChildWithInt:(int)index {
  return (id<RAREUTiStructuredNode>) check_protocol_cast([((JavaUtilArrayList *) nil_chk(childNodes_)) getWithInt:index], @protocol(RAREUTiStructuredNode));
}

- (int)getChildCount {
  return (self->childNodes_ == nil) ? 0 : [childNodes_ size];
}

- (SDFNode *)getChildNodeWithInt:(int)index {
  return (SDFNode *) check_class_cast([((JavaUtilArrayList *) nil_chk(childNodes_)) getWithInt:index], [SDFNode class]);
}

- (id<JavaUtilList>)getChildNodes {
  return childNodes_;
}

- (NSString *)getComment {
  if (nodeType_ == SDFNode_NODETYPE_COMMENT) {
    return nodeName_;
  }
  return nodeComment_;
}

- (SDFNode *)getFirstNode {
  int len = (childNodes_ == nil) ? 0 : [childNodes_ size];
  return (len > 0) ? (SDFNode *) check_class_cast([((JavaUtilArrayList *) nil_chk(childNodes_)) getWithInt:0], [SDFNode class]) : nil;
}

- (SDFNode *)getFirstBlockNode {
  int len = (childNodes_ == nil) ? 0 : [childNodes_ size];
  for (int i = 0; i < len; i++) {
    SDFNode *node = (SDFNode *) check_class_cast([((JavaUtilArrayList *) nil_chk(childNodes_)) getWithInt:i], [SDFNode class]);
    if (((SDFNode *) nil_chk(node))->nodeType_ == SDFNode_NODETYPE_BLOCK) {
      return node;
    }
  }
  return nil;
}

- (SDFNode *)getFirstDataNode {
  int len = (childNodes_ == nil) ? 0 : [childNodes_ size];
  for (int i = 0; i < len; i++) {
    SDFNode *node = (SDFNode *) check_class_cast([((JavaUtilArrayList *) nil_chk(childNodes_)) getWithInt:i], [SDFNode class]);
    if ((((SDFNode *) nil_chk(node))->nodeType_ != SDFNode_NODETYPE_COMMENT) && (node->nodeType_ != SDFNode_NODETYPE_COMMAND)) {
      return node;
    }
  }
  return nil;
}

- (id<RAREUTiStructuredNode>)getFirstSignificantChild {
  return [self getFirstDataNode];
}

- (SDFNode *)getLastNode {
  int len = (childNodes_ == nil) ? 0 : [childNodes_ size];
  return (len > 0) ? (SDFNode *) check_class_cast([((JavaUtilArrayList *) nil_chk(childNodes_)) getWithInt:len - 1], [SDFNode class]) : nil;
}

- (id)getLinkedData {
  return linkedData_;
}

- (NSString *)getName {
  return nodeName_;
}

- (id<RAREUTiStructuredNode>)getNextSibling {
  if (parentNode_ != nil) {
    int len = [((JavaUtilArrayList *) nil_chk(parentNode_->childNodes_)) size];
    int n = [parentNode_->childNodes_ indexOfWithId:self];
    return (id<RAREUTiStructuredNode>) check_protocol_cast((((n == -1) || (n + 1 == len)) ? nil : [parentNode_->childNodes_ getWithInt:n + 1]), @protocol(RAREUTiStructuredNode));
  }
  return nil;
}

- (id<RAREUTiStructuredNode>)getChildWithNSString:(NSString *)name {
  return [self getNodeWithNSString:name];
}

- (SDFNode *)getNodeWithNSString:(NSString *)name {
  return (nameMap_ == nil) ? nil : (SDFNode *) check_class_cast([nameMap_ getWithId:name], [SDFNode class]);
}

- (NSString *)getNodeAttributeWithNSString:(NSString *)name {
  return (nodeAttributes_ == nil) ? nil : (NSString *) check_class_cast([nodeAttributes_ getWithId:name], [NSString class]);
}

- (id<JavaUtilMap>)getNodeAttributes {
  return nodeAttributes_;
}

- (NSString *)getNodeComment {
  if (nodeType_ == SDFNode_NODETYPE_COMMENT) {
    return nodeName_;
  }
  return nodeComment_;
}

- (NSString *)getNodeName {
  return nodeName_;
}

- (int)getNodeType {
  return nodeType_;
}

- (NSString *)getNodeValue {
  return nodeValue_;
}

- (NSString *)getNodeValueWithNSString:(NSString *)name {
  SDFNode *node = [self getNodeWithNSString:name];
  return (node == nil) ? nil : node->nodeValue_;
}

- (SDFNode *)getParentNode {
  return parentNode_;
}

- (NSString *)getPreformattedTag {
  return preformattedTag_;
}

- (id)getValue {
  return nodeValue_;
}

- (NSString *)getValueAsString {
  return nodeValue_;
}

- (BOOL)hasAttributeWithNSString:(NSString *)name {
  return (nodeAttributes_ == nil) ? NO : [nodeAttributes_ containsKeyWithId:name];
}

- (BOOL)hasAttributes {
  return (self->nodeAttributes_ == nil) ? NO : [nodeAttributes_ size] > 0;
}

- (BOOL)hasChildren {
  return (self->childNodes_ == nil) ? NO : [childNodes_ size] > 0;
}

- (BOOL)isPreformattedData {
  return valuePreformatted_;
}

- (BOOL)isValuePreformatted {
  return valuePreformatted_;
}

+ (RAREUTCharArray *)requoteWithNSString:(NSString *)s {
  RAREUTCharArray *ca = [[RAREUTCharArray alloc] initWithInt:[((NSString *) nil_chk(s)) sequenceLength] + 2];
  if (([s indexOf:'"'] != -1) && ([s indexOf:'\''] == -1)) {
    (void) [ca appendWithChar:'\''];
    (void) [RAREUTCharScanner escapeWithNSString:s withBoolean:NO withRAREUTCharArray:ca];
    (void) [ca appendWithChar:'\''];
  }
  else {
    (void) [ca appendWithChar:'"'];
    (void) [RAREUTCharScanner escapeWithNSString:s withBoolean:YES withRAREUTCharArray:ca];
    (void) [ca appendWithChar:'"'];
  }
  return ca;
}

+ (int)getUnitLenWithRAREUTCharArray:(RAREUTCharArray *)ca
                             withInt:(int)len {
  int cnt = 0;
  BOOL bang = NO;
  do {
    if (len == 0) {
      break;
    }
    unichar lc = IOSCharArray_Get(nil_chk(((RAREUTCharArray *) nil_chk(ca))->A_), len - 1);
    if (lc == '!') {
      len--;
      if (len == 0) {
        break;
      }
      lc = IOSCharArray_Get(ca->A_, len - 1);
      bang = YES;
    }
    if (lc == '%') {
      cnt = 1;
      break;
    }
    if (len == 1) {
      break;
    }
    switch (IOSCharArray_Get(ca->A_, len - 2)) {
      case 'c':
      if (lc == 'h') {
      }
      else if (lc == 'm') {
        cnt = 2;
      }
      break;
      case 'i':
      if (lc == 'n') {
        cnt = 2;
      }
      break;
      case 'p':
      if (lc == 'x') {
        cnt = 2;
      }
      else if (lc == 't') {
        cnt = 2;
      }
      else if (lc == 'c') {
        cnt = 2;
      }
      break;
      case 'l':
      if (lc == 'n') {
        cnt = 2;
      }
      break;
      default:
      break;
    }
  }
  while (NO);
  if (bang) {
    cnt++;
  }
  return cnt;
}

- (void)toPackedStringWithJavaIoWriter:(JavaIoWriter *)w
                               withInt:(int)depth {
  int len;
  id<JavaUtilList> list = childNodes_;
  len = (list == nil) ? 0 : [list size];
  NSString *name = [self getNodeName];
  if (len == 0) {
    if ((name == nil) || ([name sequenceLength] == 0)) {
      [SDFNode writeNameWithJavaIoWriter:w withNSString:@"{}" withInt:depth];
    }
    else {
      [SDFNode writeNameWithJavaIoWriter:w withNSString:name withInt:depth];
      [((JavaIoWriter *) nil_chk(w)) writeWithNSString:@" {}"];
    }
  }
  else {
    if ((name != nil) && ([name sequenceLength] > 0)) {
      [SDFNode writeNameWithJavaIoWriter:w withNSString:name withInt:depth];
      [((JavaIoWriter *) nil_chk(w)) writeWithNSString:@" { "];
    }
    else {
      [SDFNode writeNameWithJavaIoWriter:w withNSString:@"{" withInt:depth];
    }
    SDFNode *node;
    int n = len - 1;
    for (int i = 0; i < len; i++) {
      node = (SDFNode *) check_class_cast([((id<JavaUtilList>) nil_chk(list)) getWithInt:i], [SDFNode class]);
      name = [((SDFNode *) nil_chk(node)) getNodeName];
      if ((name != nil) && ([name sequenceLength] > 0)) {
        [((JavaIoWriter *) nil_chk(w)) writeWithNSString:name];
        [w writeWithNSString:@": "];
      }
      name = [node getNodeValue];
      if ((name != nil) && ([name sequenceLength] > 0)) {
        RAREUTCharArray *ca = [SDFNode requoteWithNSString:name];
        [((JavaIoWriter *) nil_chk(w)) writeWithCharArray:((RAREUTCharArray *) nil_chk(ca))->A_ withInt:0 withInt:ca->_length_];
      }
      if (i != n) {
        [((JavaIoWriter *) nil_chk(w)) writeWithNSString:@"; "];
      }
    }
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:@" }"];
  }
  [((JavaIoWriter *) nil_chk(w)) writeWithNSString:SDFNode_lineSeparator_];
}

- (int)getPackedSize {
  if ([self hasAttributes]) {
    return JavaLangInteger_MAX_VALUE;
  }
  int size = 0;
  id<JavaUtilList> list = childNodes_;
  NSString *name = [self getNodeName];
  int n;
  if (name == nil) {
    size += 2;
  }
  else {
    size += [name sequenceLength] + 2;
  }
  int len = (list == nil) ? 0 : [list size];
  size += 2;
  SDFNode *node;
  for (int i = 0; i < len; i++) {
    node = (SDFNode *) check_class_cast([((id<JavaUtilList>) nil_chk(list)) getWithInt:i], [SDFNode class]);
    if (([((SDFNode *) nil_chk(node)) getNodeType] == SDFNode_NODETYPE_BLOCK) || [node isValuePreformatted] || [node hasChildren] || [node hasAttributes]) {
      return JavaLangInteger_MAX_VALUE;
    }
    name = [node getNodeName];
    if (name != nil) {
      n = [name sequenceLength];
      if (n > 0) {
        size += n;
        size += 2;
      }
    }
    name = [node getNodeValue];
    if (name != nil) {
      if ([name indexOf:0x000a] != -1) {
        return JavaLangInteger_MAX_VALUE;
      }
      size += [name sequenceLength];
    }
    size += 2;
  }
  return size;
}

+ (NSString *)exceptionStringWithJavaLangException:(JavaLangException *)e {
  NSString *s = [((JavaLangException *) nil_chk(e)) getMessage];
  if ((s == nil) || ([s sequenceLength] == 0)) {
    s = [e description];
  }
  return s;
}

- (BOOL)isComment {
  return nodeType_ == SDFNode_NODETYPE_COMMENT;
}

+ (void)initialize {
  if (self == [SDFNode class]) {
    SDFNode_lineSeparator_ = [JavaLangSystem getPropertyWithNSString:@"line.separator"];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllFieldsTo:(SDFNode *)other {
  [super copyAllFieldsTo:other];
  other->childNodes_ = childNodes_;
  other->isACopy_ = isACopy_;
  other->linkedData_ = linkedData_;
  other->nameMap_ = nameMap_;
  other->nodeAttributes_ = nodeAttributes_;
  other->nodeComment_ = nodeComment_;
  other->nodeName_ = nodeName_;
  other->nodeType_ = nodeType_;
  other->nodeValue_ = nodeValue_;
  other->parentNode_ = parentNode_;
  other->preformattedTag_ = preformattedTag_;
  other->valuePreformatted_ = valuePreformatted_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "copy__", NULL, "LSDFNode", 0x1, NULL },
    { "createBlockFromThisWithNSString:withNSString:", NULL, "LSDFNode", 0x1, NULL },
    { "createRootNode", NULL, "LSDFNode", 0x9, NULL },
    { "parseWithJavaIoReader:", NULL, "LSDFNode", 0x9, "JavaIoIOException" },
    { "parseWithJavaIoReader:withSDFParser_iCallback:", NULL, "V", 0x9, "JavaIoIOException" },
    { "parseWithJavaIoReader:withRAREUTiFileResolver:withNSString:withBoolean:", NULL, "LSDFNode", 0x9, "JavaIoIOException" },
    { "parseForReformatWithJavaIoReader:withRAREUTiFileResolver:withNSString:", NULL, "LSDFNode", 0x9, "JavaIoIOException" },
    { "toStringWithJavaIoWriter:withInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeAttributesWithJavaIoWriter:withInt:withJavaUtilMap:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeNameWithJavaIoWriter:withNSString:withInt:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writePaddingWithJavaIoWriter:withInt:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeValueWithJavaIoWriter:withNSString:withBoolean:withInt:", NULL, "V", 0x9, "JavaIoIOException" },
    { "getAttributeWithNSString:", NULL, "LNSObject", 0x1, NULL },
    { "getAttributes", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getChildWithInt:", NULL, "LRAREUTiStructuredNode", 0x1, NULL },
    { "getChildNodeWithInt:", NULL, "LSDFNode", 0x1, NULL },
    { "getChildNodes", NULL, "LJavaUtilList", 0x1, NULL },
    { "getComment", NULL, "LNSString", 0x1, NULL },
    { "getFirstNode", NULL, "LSDFNode", 0x1, NULL },
    { "getFirstBlockNode", NULL, "LSDFNode", 0x1, NULL },
    { "getFirstDataNode", NULL, "LSDFNode", 0x1, NULL },
    { "getFirstSignificantChild", NULL, "LRAREUTiStructuredNode", 0x1, NULL },
    { "getLastNode", NULL, "LSDFNode", 0x1, NULL },
    { "getLinkedData", NULL, "LNSObject", 0x1, NULL },
    { "getName", NULL, "LNSString", 0x1, NULL },
    { "getNextSibling", NULL, "LRAREUTiStructuredNode", 0x1, NULL },
    { "getChildWithNSString:", NULL, "LRAREUTiStructuredNode", 0x1, NULL },
    { "getNodeWithNSString:", NULL, "LSDFNode", 0x1, NULL },
    { "getNodeAttributeWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getNodeAttributes", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getNodeComment", NULL, "LNSString", 0x1, NULL },
    { "getNodeName", NULL, "LNSString", 0x1, NULL },
    { "getNodeValue", NULL, "LNSString", 0x1, NULL },
    { "getNodeValueWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getParentNode", NULL, "LSDFNode", 0x1, NULL },
    { "getPreformattedTag", NULL, "LNSString", 0x1, NULL },
    { "getValue", NULL, "LNSObject", 0x1, NULL },
    { "getValueAsString", NULL, "LNSString", 0x1, NULL },
    { "hasAttributeWithNSString:", NULL, "Z", 0x1, NULL },
    { "hasAttributes", NULL, "Z", 0x1, NULL },
    { "hasChildren", NULL, "Z", 0x1, NULL },
    { "isPreformattedData", NULL, "Z", 0x1, NULL },
    { "isValuePreformatted", NULL, "Z", 0x1, NULL },
    { "requoteWithNSString:", NULL, "LRAREUTCharArray", 0x8, NULL },
    { "getUnitLenWithRAREUTCharArray:withInt:", NULL, "I", 0x8, NULL },
    { "toPackedStringWithJavaIoWriter:withInt:", NULL, "V", 0x4, "JavaIoIOException" },
    { "getPackedSize", NULL, "I", 0x4, NULL },
    { "exceptionStringWithJavaLangException:", NULL, "LNSString", 0xa, NULL },
    { "isComment", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "NODETYPE_BLOCK_", NULL, 0x19, "I" },
    { "NODETYPE_COMMAND_", NULL, 0x19, "I" },
    { "NODETYPE_COMMENT_", NULL, 0x19, "I" },
    { "NODETYPE_NORMAL_", NULL, 0x19, "I" },
    { "NODETYPE_ROOT_", NULL, 0x19, "I" },
    { "lineSeparator_", NULL, 0x19, "LNSString" },
    { "padding_", NULL, 0xa, "LIOSCharArray" },
    { "childNodes_", NULL, 0x4, "LJavaUtilArrayList" },
    { "isACopy_", NULL, 0x4, "Z" },
    { "linkedData_", NULL, 0x4, "LNSObject" },
    { "nameMap_", NULL, 0x4, "LJavaUtilMap" },
    { "nodeAttributes_", NULL, 0x4, "LJavaUtilMap" },
    { "nodeComment_", NULL, 0x4, "LNSString" },
    { "nodeName_", NULL, 0x4, "LNSString" },
    { "nodeType_", NULL, 0x4, "I" },
    { "nodeValue_", NULL, 0x4, "LNSString" },
    { "parentNode_", NULL, 0x4, "LSDFNode" },
    { "preformattedTag_", NULL, 0x4, "LNSString" },
    { "valuePreformatted_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _SDFNode = { "SDFNode", "com.appnativa.spot", NULL, 0x1, 50, methods, 19, fields, 0, NULL};
  return &_SDFNode;
}

@end
@implementation SDFNode_ParserCallback

- (id)initWithSDFNode:(SDFNode *)root
withRAREUTiFileResolver:(id<RAREUTiFileResolver>)urlResolver {
  if (self = [super init]) {
    self->urlResolver_ = urlResolver;
    currentNode_ = root;
    rootNode_ = root;
    nodeStack_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)addCommentWithNSString:(NSString *)comment {
  SDFNode *node = [[SDFNode alloc] initWithNSString:comment];
  node->nodeType_ = SDFNode_NODETYPE_COMMENT;
  [((SDFNode *) nil_chk(currentNode_)) addNodeWithSDFNode:node];
}

- (SDFNode *)addValueWithNSString:(NSString *)name
                     withNSString:(NSString *)value
                      withBoolean:(BOOL)preformatted
                     withNSString:(NSString *)pretag
                  withJavaUtilMap:(id<JavaUtilMap>)attributes {
  SDFNode *node;
  if ((name != nil) && ((SDFNode *) nil_chk(currentNode_))->isACopy_) {
    node = [currentNode_ getNodeWithNSString:name];
    if (node != nil) {
      if (value != nil) {
        node->nodeValue_ = value;
        [node setValuePreformattedWithBoolean:preformatted withNSString:pretag];
      }
      if (attributes != nil) {
        if (node->nodeAttributes_ == nil) {
          node->nodeAttributes_ = attributes;
        }
        else {
          [node->nodeAttributes_ putAllWithJavaUtilMap:attributes];
        }
      }
      [node setValuePreformattedWithBoolean:preformatted withNSString:pretag];
    }
    if (node != nil) {
      return nil;
    }
  }
  [((SDFNode *) nil_chk(currentNode_)) addNodeWithSDFNode:node = [[SDFNode alloc] initWithNSString:name withNSString:value]];
  [node setValuePreformattedWithBoolean:preformatted withNSString:pretag];
  node->nodeAttributes_ = attributes;
  return node;
}

- (SDFNode *)endBlockWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  if (attributes != nil) {
    if (((SDFNode *) nil_chk(currentNode_))->nodeAttributes_ == nil) {
      currentNode_->nodeAttributes_ = attributes;
    }
    else {
      [currentNode_->nodeAttributes_ putAllWithJavaUtilMap:attributes];
    }
  }
  SDFNode *node = currentNode_;
  currentNode_ = [((JavaUtilArrayList *) nil_chk(nodeStack_)) isEmpty] ? nil : (SDFNode *) check_class_cast([nodeStack_ removeWithInt:0], [SDFNode class]);
  if (currentNode_ == nil) {
    currentNode_ = rootNode_;
  }
  return node;
}

- (void)handleCommandWithNSString:(NSString *)cmd
                     withNSString:(NSString *)params {
  [self handleCommandExWithNSString:cmd withNSString:params];
}

- (BOOL)handleCommandExWithNSString:(NSString *)cmd
                       withNSString:(NSString *)params {
  int len;
  if ((urlResolver_ != nil) && [((NSString *) nil_chk(cmd)) equalsIgnoreCase:@"import"] && (params != nil) && ((len = [params sequenceLength]) > 0)) {
    @try {
      unichar c = [params charAtWithInt:0];
      if ((c == '\'') || ((c == '"') && (len > 1))) {
        if ([params charAtWithInt:len - 1] == c) {
          params = [params substring:1 endIndex:len - 1];
        }
        else {
          params = [params substring:1];
        }
      }
      if ((urlPrefix_ != nil) && ![((NSString *) nil_chk(params)) hasPrefix:@"/"]) {
        params = [NSString stringWithFormat:@"%@%@", urlPrefix_, params];
      }
      JavaIoReader *r = [urlResolver_ getReaderWithNSString:params];
      SDFNode *node = [[SDFNode alloc] initWithNSString:nil];
      [node setNodeTypeWithInt:SDFNode_NODETYPE_ROOT];
      SDFNode_ParserCallback *pc = [[SDFNode_ParserCallback alloc] initWithSDFNode:node withRAREUTiFileResolver:urlResolver_];
      if ([self isIgnoreMissingReferences]) {
        [pc setIgnoreMissingReferencesWithBoolean:YES];
      }
      int n = [((NSString *) nil_chk(params)) lastIndexOf:'/'];
      if (n != -1) {
        pc->urlPrefix_ = [params substring:0 endIndex:n + 1];
      }
      if (referenceMap_ == nil) {
        referenceMap_ = [[JavaUtilHashMap alloc] init];
      }
      pc->referenceMap_ = referenceMap_;
      SDFParser *p = [[SDFParser alloc] initWithJavaIoReader:r];
      [p parseWithSDFParser_iCallback:pc];
      return YES;
    }
    @catch (JavaLangException *ex) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Error occurred parsing import file (%@)\x0d\n%@", params, [SDFNode exceptionStringWithJavaLangException:ex]]];
    }
  }
  if ([((NSString *) nil_chk(cmd)) equalsIgnoreCase:@"ignoreMissingReferences"]) {
    [self setIgnoreMissingReferencesWithBoolean:YES];
  }
  return NO;
}

- (SDFNode *)startBlockWithNSString:(NSString *)name
                       withNSString:(NSString *)refName
                       withNSString:(NSString *)refValue {
  SDFNode *node = nil;
  BOOL addnode = YES;
  if (refValue != nil) {
    node = [self getReferenceWithNSString:refValue withBoolean:!ignoreMissingReferences_];
    if (node == nil) {
      refValue = nil;
    }
    else {
      node->nodeName_ = name;
      if ((name != nil) && ((SDFNode *) nil_chk(currentNode_))->isACopy_) {
        SDFNode *node2 = [currentNode_ getNodeWithNSString:name];
        if (node2 != nil) {
          node = [self mergeWithSDFNode:node2 withSDFNode:node];
          addnode = NO;
        }
      }
    }
  }
  if (refValue == nil) {
    if ((name != nil) && ((SDFNode *) nil_chk(currentNode_))->isACopy_ && ([name sequenceLength] > 0)) {
      node = [currentNode_ getNodeWithNSString:name];
    }
    if (node == nil) {
      node = [[SDFNode alloc] initWithNSString:name];
    }
    else {
      addnode = NO;
    }
  }
  [((SDFNode *) nil_chk(node)) setNodeTypeWithInt:SDFNode_NODETYPE_BLOCK];
  [((JavaUtilArrayList *) nil_chk(nodeStack_)) addWithInt:0 withId:currentNode_];
  if (addnode) {
    [((SDFNode *) nil_chk(currentNode_)) addNodeWithSDFNode:node];
  }
  currentNode_ = node;
  if (refName != nil) {
    if (referenceMap_ == nil) {
      referenceMap_ = [[JavaUtilHashMap alloc] init];
    }
    (void) [((JavaUtilHashMap *) nil_chk(referenceMap_)) putWithId:refName withId:node];
  }
  return node;
}

- (void)setIgnoreMissingReferencesWithBoolean:(BOOL)ignoreMissingReferences {
  self->ignoreMissingReferences_ = ignoreMissingReferences;
}

- (void)setRootNodeWithSDFNode:(SDFNode *)root {
  self->rootNode_ = root;
  currentNode_ = root;
}

- (SDFNode *)getRootNode {
  return rootNode_;
}

- (BOOL)isIgnoreMissingReferences {
  return ignoreMissingReferences_;
}

- (SDFNode *)loadNodeWithNSString:(NSString *)url {
  int len;
  if ((urlResolver_ != nil) && (url != nil) && ((len = [url sequenceLength]) > 0)) {
    @try {
      unichar c = [url charAtWithInt:0];
      if ((c == '\'') || ((c == '"') && (len > 1))) {
        if ([url charAtWithInt:len - 1] == c) {
          url = [url substring:1 endIndex:len - 1];
        }
        else {
          url = [url substring:1];
        }
      }
      JavaIoReader *r = [urlResolver_ getReaderWithNSString:url];
      SDFNode *node = [[SDFNode alloc] initWithNSString:nil];
      [node setNodeTypeWithInt:SDFNode_NODETYPE_ROOT];
      SDFNode_ParserCallback *pc = [[SDFNode_ParserCallback alloc] initWithSDFNode:node withRAREUTiFileResolver:urlResolver_];
      [pc setIgnoreMissingReferencesWithBoolean:[self isIgnoreMissingReferences]];
      SDFParser *p = [[SDFParser alloc] initWithJavaIoReader:r];
      [p parseWithSDFParser_iCallback:pc];
      return [node getFirstNode];
    }
    @catch (JavaLangException *ex) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Error occurred parsing referenced file (%@)\x0d\n%@", url, [SDFNode exceptionStringWithJavaLangException:ex]]];
    }
  }
  return nil;
}

- (SDFNode *)mergeWithSDFNode:(SDFNode *)node
                  withSDFNode:(SDFNode *)withNode {
  if ([((SDFNode *) nil_chk(withNode)) hasAttributes]) {
    [((SDFNode *) nil_chk(node)) addAttributesWithJavaUtilMap:withNode->nodeAttributes_];
  }
  if ([withNode hasChildren]) {
    [((SDFNode *) nil_chk(node)) addChildrenWithJavaUtilList:withNode->childNodes_];
  }
  return node;
}

- (SDFNode *)getReferenceWithNSString:(NSString *)name
                          withBoolean:(BOOL)throwException {
  SDFNode *node = nil;
  NSString *oname = name;
  if (name != nil) {
    if ([name hasPrefix:@"'"]) {
      node = [self loadNodeWithNSString:name];
    }
    else if (referenceMap_ != nil) {
      node = (SDFNode *) check_class_cast([referenceMap_ getWithId:name], [SDFNode class]);
    }
  }
  if (node == nil) {
    if (!throwException) {
      return nil;
    }
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"the referenced name '%@' does not exist", oname]];
  }
  return [((SDFNode *) nil_chk(node)) copy__];
}

- (void)copyAllFieldsTo:(SDFNode_ParserCallback *)other {
  [super copyAllFieldsTo:other];
  other->currentNode_ = currentNode_;
  other->ignoreMissingReferences_ = ignoreMissingReferences_;
  other->nodeStack_ = nodeStack_;
  other->referenceMap_ = referenceMap_;
  other->rootNode_ = rootNode_;
  other->urlPrefix_ = urlPrefix_;
  other->urlResolver_ = urlResolver_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addValueWithNSString:withNSString:withBoolean:withNSString:withJavaUtilMap:", NULL, "LSDFNode", 0x1, NULL },
    { "endBlockWithJavaUtilMap:", NULL, "LSDFNode", 0x1, NULL },
    { "handleCommandExWithNSString:withNSString:", NULL, "Z", 0x1, NULL },
    { "startBlockWithNSString:withNSString:withNSString:", NULL, "LSDFNode", 0x1, NULL },
    { "getRootNode", NULL, "LSDFNode", 0x1, NULL },
    { "isIgnoreMissingReferences", NULL, "Z", 0x1, NULL },
    { "loadNodeWithNSString:", NULL, "LSDFNode", 0x0, NULL },
    { "mergeWithSDFNode:withSDFNode:", NULL, "LSDFNode", 0x0, NULL },
    { "getReferenceWithNSString:withBoolean:", NULL, "LSDFNode", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "urlPrefix_", NULL, 0x0, "LNSString" },
    { "currentNode_", NULL, 0x4, "LSDFNode" },
    { "nodeStack_", NULL, 0x4, "LJavaUtilArrayList" },
    { "referenceMap_", NULL, 0x4, "LJavaUtilHashMap" },
    { "urlResolver_", NULL, 0x4, "LRAREUTiFileResolver" },
  };
  static J2ObjcClassInfo _SDFNode_ParserCallback = { "ParserCallback", "com.appnativa.spot", "SDFNode", 0x9, 9, methods, 5, fields, 0, NULL};
  return &_SDFNode_ParserCallback;
}

@end
@implementation SDFNode_FormattingCallback

- (id)initWithSDFNode:(SDFNode *)root
withRAREUTiFileResolver:(id<RAREUTiFileResolver>)urlResolver {
  if (self = [super initWithSDFNode:root withRAREUTiFileResolver:urlResolver]) {
    [self setIgnoreMissingReferencesWithBoolean:YES];
  }
  return self;
}

- (void)handleCommandWithNSString:(NSString *)cmd
                     withNSString:(NSString *)params {
  if (ignoreImports_ || ![self handleCommandExWithNSString:cmd withNSString:params]) {
    params = ((params == nil) || ([params sequenceLength] == 0)) ? nil : params;
    SDFNode *node = [[SDFNode alloc] initWithNSString:cmd];
    node->nodeType_ = SDFNode_NODETYPE_COMMAND;
    node->nodeValue_ = params;
    [((SDFNode *) nil_chk(currentNode_)) addNodeWithSDFNode:node];
  }
}

- (SDFNode *)startBlockWithNSString:(NSString *)name
                       withNSString:(NSString *)refName
                       withNSString:(NSString *)refValue {
  BOOL addnode = YES;
  SDFNode *node = nil;
  if ((refValue != nil) && !ignoreReferences_) {
    node = [self getReferenceWithNSString:refValue withBoolean:NO];
    if (node != nil) {
      refValue = nil;
      node->nodeName_ = name;
      if ((name != nil) && ((SDFNode *) nil_chk(currentNode_))->isACopy_ && ([name sequenceLength] > 0)) {
        SDFNode *node2 = [currentNode_ getNodeWithNSString:name];
        if (node2 != nil) {
          node = [self mergeWithSDFNode:node2 withSDFNode:node];
          addnode = NO;
        }
      }
    }
  }
  if (node == nil) {
    if ((name != nil) && ((SDFNode *) nil_chk(currentNode_))->isACopy_ && ([name sequenceLength] > 0)) {
      node = [currentNode_ getNodeWithNSString:name];
    }
    if (node == nil) {
      node = [[SDFNode alloc] initWithNSString:name];
    }
    else {
      addnode = NO;
    }
  }
  [((SDFNode *) nil_chk(node)) setNodeTypeWithInt:SDFNode_NODETYPE_BLOCK];
  [((JavaUtilArrayList *) nil_chk(nodeStack_)) addWithInt:0 withId:currentNode_];
  if (addnode) {
    [((SDFNode *) nil_chk(currentNode_)) addNodeWithSDFNode:node];
  }
  currentNode_ = node;
  if (refName != nil) {
    if (referenceMap_ == nil) {
      referenceMap_ = [[JavaUtilHashMap alloc] init];
    }
    (void) [((JavaUtilHashMap *) nil_chk(referenceMap_)) putWithId:refName withId:node];
  }
  [self rebuildNameWithSDFNode:node withNSString:name withNSString:refValue withNSString:refName];
  return node;
}

- (void)setIgnoreImportsWithBoolean:(BOOL)ignoreImports {
  self->ignoreImports_ = ignoreImports;
}

- (void)setIgnoreReferencesWithBoolean:(BOOL)ignoreReferences {
  self->ignoreReferences_ = ignoreReferences;
}

- (BOOL)isIgnoreImports {
  return ignoreImports_;
}

- (BOOL)isIgnoreReferences {
  return ignoreReferences_;
}

- (void)rebuildNameWithSDFNode:(SDFNode *)node
                  withNSString:(NSString *)name
                  withNSString:(NSString *)refValue
                  withNSString:(NSString *)refName {
  if ((refValue != nil) || (refName != nil)) {
    JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithNSString:name];
    if (refValue != nil) {
      (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@":$"])) appendWithNSString:refValue];
    }
    if (refName != nil) {
      (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@":@"])) appendWithNSString:refName];
    }
    name = [sb description];
  }
  ((SDFNode *) nil_chk(node))->nodeName_ = name;
}

- (void)copyAllFieldsTo:(SDFNode_FormattingCallback *)other {
  [super copyAllFieldsTo:other];
  other->ignoreImports_ = ignoreImports_;
  other->ignoreReferences_ = ignoreReferences_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "startBlockWithNSString:withNSString:withNSString:", NULL, "LSDFNode", 0x1, NULL },
    { "isIgnoreImports", NULL, "Z", 0x1, NULL },
    { "isIgnoreReferences", NULL, "Z", 0x1, NULL },
    { "rebuildNameWithSDFNode:withNSString:withNSString:withNSString:", NULL, "V", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "ignoreImports_", NULL, 0x1, "Z" },
    { "ignoreReferences_", NULL, 0x1, "Z" },
  };
  static J2ObjcClassInfo _SDFNode_FormattingCallback = { "FormattingCallback", "com.appnativa.spot", "SDFNode", 0x9, 4, methods, 2, fields, 0, NULL};
  return &_SDFNode_FormattingCallback;
}

@end
