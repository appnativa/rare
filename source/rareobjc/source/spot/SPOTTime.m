//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../spot/src/com/appnativa/spot/SPOTTime.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "com/appnativa/spot/SPOTDateTime.h"
#include "com/appnativa/spot/SPOTException.h"
#include "com/appnativa/spot/SPOTTime.h"
#include "com/appnativa/spot/aSPOTElement.h"
#include "com/appnativa/spot/iSPOTConstants.h"
#include "com/appnativa/util/SNumber.h"
#include "java/lang/Exception.h"
#include "java/lang/NumberFormatException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/TimeZone.h"

@implementation SPOTTime

- (id)init {
  return [self initSPOTTimeWithBoolean:YES];
}

- (id)initSPOTTimeWithBoolean:(BOOL)optional {
  if (self = [super init]) {
    _isOptional_ = optional;
  }
  return self;
}

- (id)initWithBoolean:(BOOL)optional {
  return [self initSPOTTimeWithBoolean:optional];
}

- (id)initWithJavaUtilCalendar:(JavaUtilCalendar *)val {
  if (self = [super init]) {
    _isOptional_ = NO;
    [self setValueWithJavaUtilCalendar:val];
  }
  return self;
}

- (id)initWithRAREUTSNumber:(RAREUTSNumber *)val {
  if (self = [super init]) {
    _isOptional_ = NO;
    [self setValueWithRAREUTSNumber:val];
  }
  return self;
}

- (id)initWithNSString:(NSString *)val {
  if (self = [super init]) {
    [self setValuesWithNSString:val withNSString:nil withNSString:nil withBoolean:NO];
  }
  return self;
}

- (id)initWithNSString:(NSString *)val
          withNSString:(NSString *)max {
  if (self = [super init]) {
    [self setValuesWithNSString:val withNSString:nil withNSString:max withBoolean:NO];
  }
  return self;
}

- (id)initWithNSString:(NSString *)val
          withNSString:(NSString *)defaultval
           withBoolean:(BOOL)optional {
  if (self = [super init]) {
    [self setValuesWithNSString:val withNSString:nil withNSString:nil withBoolean:optional];
    [self setDefaultValueWithNSString:defaultval];
  }
  return self;
}

- (id)initWithNSString:(NSString *)val
          withNSString:(NSString *)min
          withNSString:(NSString *)max {
  if (self = [super init]) {
    [self setValuesWithNSString:val withNSString:min withNSString:max withBoolean:NO];
  }
  return self;
}

- (id)initWithNSString:(NSString *)val
          withNSString:(NSString *)min
          withNSString:(NSString *)max
           withBoolean:(BOOL)optional {
  if (self = [super init]) {
    [self setValuesWithNSString:val withNSString:min withNSString:max withBoolean:optional];
  }
  return self;
}

- (id)initWithNSString:(NSString *)val
          withNSString:(NSString *)min
          withNSString:(NSString *)max
          withNSString:(NSString *)defaultval
           withBoolean:(BOOL)optional {
  if (self = [super init]) {
    [self setValuesWithNSString:val withNSString:min withNSString:max withBoolean:optional];
    [self setDefaultValueWithNSString:defaultval];
  }
  return self;
}

- (int)compareToWithId:(id)o {
  return [self compareToWithSPOTDateTime:(SPOTDateTime *) check_class_cast(o, [SPOTDateTime class])];
}

- (int)compareToWithSPOTDateTime:(SPOTDateTime *)o {
  if (o == nil) {
    return 1;
  }
  JavaUtilCalendar *t1 = (_cValue_ != nil) ? _cValue_ : _cDefValue_;
  JavaUtilCalendar *t2 = (((SPOTDateTime *) nil_chk(o))->_cValue_ != nil) ? o->_cValue_ : o->_cDefValue_;
  if ((t1 == nil) || (t2 == nil)) {
    return (t1 == t2) ? 0 : ((t1 != nil) ? 1 : -1);
  }
  return (int) ([self longValue] - [o longValue]);
}

- (BOOL)equalsWithASPOTElement:(aSPOTElement *)element {
  if ([element isKindOfClass:[SPOTTime class]]) {
    return [super equalsWithASPOTElement:element];
  }
  return NO;
}

- (long long int)longValue {
  JavaUtilCalendar *t1 = (_cValue_ != nil) ? _cValue_ : _cDefValue_;
  if (t1 == nil) {
    @throw [[JavaLangNumberFormatException alloc] initWithNSString:[iSPOTConstants STR_NULL_VALUE]];
  }
  long long int time = ([t1 getWithInt:JavaUtilCalendar_HOUR_OF_DAY]);
  time = time * 10000;
  time += ([t1 getWithInt:JavaUtilCalendar_MINUTE] * 100);
  time += [t1 getWithInt:JavaUtilCalendar_SECOND];
  return time;
}

+ (NSString *)now {
  return [((SPOTTime *) [[SPOTTime alloc] init]) description];
}

+ (SPOTTime *)nowTime {
  SPOTTime *d = [[SPOTTime alloc] init];
  [d setToCurrentTime];
  return d;
}

- (RAREUTSNumber *)numberValue {
  JavaUtilCalendar *t1 = (_cValue_ != nil) ? _cValue_ : _cDefValue_;
  if (t1 == nil) {
    return nil;
  }
  long long int time = ([t1 getWithInt:JavaUtilCalendar_HOUR_OF_DAY]);
  time = time * 10000;
  time += ([t1 getWithInt:JavaUtilCalendar_MINUTE] * 100);
  time += [t1 getWithInt:JavaUtilCalendar_SECOND];
  return [((RAREUTSNumber *) nil_chk([self numValueNumber])) setValueWithLong:time];
}

+ (RAREUTSNumber *)numberValueWithJavaUtilCalendar:(JavaUtilCalendar *)val
                                 withRAREUTSNumber:(RAREUTSNumber *)num {
  long long int time = ([((JavaUtilCalendar *) nil_chk(val)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY]);
  time = time * 10000;
  time += ([val getWithInt:JavaUtilCalendar_MINUTE] * 100);
  time += [val getWithInt:JavaUtilCalendar_SECOND];
  num = (num == nil) ? [[RAREUTSNumber alloc] initWithLong:time] : [num setValueWithLong:time];
  return num;
}

- (int)spot_getType {
  return iSPOTConstants_SPOT_TYPE_TIME;
}

- (NSString *)spot_stringValue {
  return (_cValue_ == nil) ? nil : [SPOTDateTime toStringWithJavaUtilCalendar:_cValue_ withBoolean:NO withBoolean:YES];
}

- (NSString *)description {
  return (_cValue_ == nil) ? @"" : [SPOTDateTime toStringWithJavaUtilCalendar:_cValue_ withBoolean:NO withBoolean:YES];
}

- (NSString *)toStringEx {
  JavaUtilCalendar *date = _cValue_;
  if (_cDefValue_ != nil) {
    date = _cDefValue_;
  }
  JavaTextSimpleDateFormat *df = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"hh:mm:ss a"];
  return [df formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(date)) getTime]];
}

- (void)setValueWithDouble:(double)val {
  [self setValueWithLong:(long long int) val];
}

- (void)setValueWithLong:(long long int)val {
  if (![aSPOTElement OPTIMIZE_RUNTIME]) {
    [self checkReadOnly];
  }
  int hm = (int) ((val >> 16) & SPOTDateTime_HHMM_MASK);
  int s = (int) ((val >> 10) & SPOTDateTime_SEC_MASK);
  int mil = (int) (val & SPOTDateTime_MILL_MASK);
  if (_cValue_ == nil) {
    _cValue_ = [JavaUtilCalendar getInstance];
  }
  [((JavaUtilCalendar *) nil_chk(_cValue_)) setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:hm / 100];
  [_cValue_ setWithInt:JavaUtilCalendar_MINUTE withInt:hm % 100];
  [_cValue_ setWithInt:JavaUtilCalendar_SECOND withInt:s];
  [_cValue_ setWithInt:JavaUtilCalendar_MILLISECOND withInt:mil];
}

- (void)setValueWithRAREUTSNumber:(RAREUTSNumber *)val {
  if (![aSPOTElement OPTIMIZE_RUNTIME]) {
    [self checkReadOnly];
  }
  long long int time = [((RAREUTSNumber *) nil_chk(val)) fractionalPart];
  if (time == 0) {
    time = [val longLongValue];
  }
  [self setValueWithLong:time];
}

+ (void)setValueWithNSString:(NSString *)val
        withJavaUtilCalendar:(JavaUtilCalendar *)cal {
  int i = 0;
  IOSCharArray *data = [((NSString *) nil_chk(val)) toCharArray];
  if ((int) [((IOSCharArray *) nil_chk(data)) count] != 5) {
    @throw [[SPOTException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: %@", val]];
  }
  @try {
    i = 0;
    int h = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
    i += 3;
    int mm = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
    i += 3;
    int sec = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
    i += 2;
    int tzOffset = 0;
    int mil = 0;
    if ((i < (int) [data count]) && (IOSCharArray_Get(data, i) == '.')) {
      i++;
      mil = ((IOSCharArray_Get(data, i) - '0') * 100) + ((IOSCharArray_Get(data, i + 1) - '0') * 10) + (IOSCharArray_Get(data, i + 2) - '0');
      i += 3;
    }
    if ((i < (int) [data count]) && (IOSCharArray_Get(data, i) != 'Z')) {
      tzOffset = 1;
      if (IOSCharArray_Get(data, i++) == '-') {
        tzOffset = -1;
      }
      int hrOff = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
      i += 3;
      int minOff = ((IOSCharArray_Get(data, i) - '0') * 10) + (IOSCharArray_Get(data, i + 1) - '0');
      tzOffset *= (((hrOff * 60) + minOff) * 60 * 1000);
    }
    JavaUtilTimeZone *tz = (JavaUtilTimeZone *) check_class_cast([((JavaUtilTimeZone *) nil_chk([JavaUtilTimeZone getDefault])) clone], [JavaUtilTimeZone class]);
    [((JavaUtilTimeZone *) nil_chk(tz)) setRawOffsetWithInt:tzOffset];
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:tz];
    [cal setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:h];
    [cal setWithInt:JavaUtilCalendar_MINUTE withInt:mm];
    [cal setWithInt:JavaUtilCalendar_SECOND withInt:sec];
    [cal setWithInt:JavaUtilCalendar_MILLISECOND withInt:mil];
  }
  @catch (JavaLangException *e) {
    @throw [[SPOTException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: %@", val]];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilCalendar:", NULL, NULL, 0x1, "SPOTException" },
    { "initWithRAREUTSNumber:", NULL, NULL, 0x1, "SPOTException" },
    { "initWithNSString:", NULL, NULL, 0x1, "SPOTException" },
    { "initWithNSString:withNSString:", NULL, NULL, 0x1, "SPOTException" },
    { "initWithNSString:withNSString:withBoolean:", NULL, NULL, 0x1, "SPOTException" },
    { "initWithNSString:withNSString:withNSString:", NULL, NULL, 0x1, "SPOTException" },
    { "initWithNSString:withNSString:withNSString:withBoolean:", NULL, NULL, 0x1, "SPOTException" },
    { "initWithNSString:withNSString:withNSString:withNSString:withBoolean:", NULL, NULL, 0x1, "SPOTException" },
    { "equalsWithASPOTElement:", NULL, "Z", 0x1, NULL },
    { "now", NULL, "LNSString", 0x9, NULL },
    { "nowTime", NULL, "LSPOTTime", 0x9, NULL },
    { "numberValue", NULL, "LRAREUTSNumber", 0x1, NULL },
    { "numberValueWithJavaUtilCalendar:withRAREUTSNumber:", NULL, "LRAREUTSNumber", 0x9, NULL },
    { "spot_getType", NULL, "I", 0x11, NULL },
    { "spot_stringValue", NULL, "LNSString", 0x1, NULL },
    { "toStringEx", NULL, "LNSString", 0x1, NULL },
  };
  static J2ObjcClassInfo _SPOTTime = { "SPOTTime", "com.appnativa.spot", NULL, 0x1, 16, methods, 0, NULL, 0, NULL};
  return &_SPOTTime;
}

@end
