//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/Projects/rare/core-apple/javax/script/ScriptEngineManager.java
//
//  Created by decoteaud on 6/13/14.
//

#include "com/appnativa/util/IdentityArrayList.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "javax/script/Bindings.h"
#include "javax/script/ScriptContext.h"
#include "javax/script/ScriptEngine.h"
#include "javax/script/ScriptEngineFactory.h"
#include "javax/script/ScriptEngineManager.h"
#include "javax/script/SimpleBindings.h"

@implementation JavaxScriptScriptEngineManager

- (id)init {
  if (self = [super init]) {
    engineSpis_ = [[RAREUTIdentityArrayList alloc] init];
    nameAssociations_ = [[JavaUtilHashMap alloc] init];
    extensionAssociations_ = [[JavaUtilHashMap alloc] init];
    mimeTypeAssociations_ = [[JavaUtilHashMap alloc] init];
    globalscope_ = [[JavaxScriptSimpleBindings alloc] init];
  }
  return self;
}

- (id)getWithNSString:(NSString *)key {
  return [((id<JavaxScriptBindings>) nil_chk(globalscope_)) getWithId:key];
}

- (id<JavaxScriptScriptEngine>)getEngineByExtensionWithNSString:(NSString *)extension {
  if (extension == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"extension must not be null"];
  }
  id<JavaxScriptScriptEngine> engine = nil;
  id<JavaxScriptScriptEngineFactory> factory = (id<JavaxScriptScriptEngineFactory>) check_protocol_cast([((JavaUtilHashMap *) nil_chk(extensionAssociations_)) getWithId:extension], @protocol(JavaxScriptScriptEngineFactory));
  if (factory != nil) {
    engine = [factory getScriptEngine];
    [((id<JavaxScriptScriptEngine>) nil_chk(engine)) setBindingsWithJavaxScriptBindings:globalscope_ withInt:JavaxScriptScriptContext_GLOBAL_SCOPE];
  }
  return engine;
}

- (id<JavaxScriptScriptEngine>)getEngineByMimeTypeWithNSString:(NSString *)mimeType {
  if (mimeType == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"mimeType must not be null"];
  }
  id<JavaxScriptScriptEngine> engine = nil;
  id<JavaxScriptScriptEngineFactory> factory = (id<JavaxScriptScriptEngineFactory>) check_protocol_cast([((JavaUtilHashMap *) nil_chk(mimeTypeAssociations_)) getWithId:mimeType], @protocol(JavaxScriptScriptEngineFactory));
  if (factory != nil) {
    engine = [factory getScriptEngine];
    [((id<JavaxScriptScriptEngine>) nil_chk(engine)) setBindingsWithJavaxScriptBindings:globalscope_ withInt:JavaxScriptScriptContext_GLOBAL_SCOPE];
  }
  return engine;
}

- (id<JavaxScriptScriptEngine>)getEngineByNameWithNSString:(NSString *)shortName {
  if (shortName == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"shortName must not be null"];
  }
  id<JavaxScriptScriptEngine> engine = nil;
  id<JavaxScriptScriptEngineFactory> factory = (id<JavaxScriptScriptEngineFactory>) check_protocol_cast([((JavaUtilHashMap *) nil_chk(nameAssociations_)) getWithId:shortName], @protocol(JavaxScriptScriptEngineFactory));
  if (factory != nil) {
    engine = [factory getScriptEngine];
    [((id<JavaxScriptScriptEngine>) nil_chk(engine)) setBindingsWithJavaxScriptBindings:globalscope_ withInt:JavaxScriptScriptContext_GLOBAL_SCOPE];
  }
  return engine;
}

- (id<JavaUtilList>)getEngineFactories {
  JavaUtilArrayList *factories = [[JavaUtilArrayList alloc] init];
  id<JavaUtilIterator> iter = [((RAREUTIdentityArrayList *) nil_chk(engineSpis_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    [factories addWithId:[iter next]];
  }
  return factories;
}

- (id<JavaxScriptBindings>)getBindings {
  return globalscope_;
}

- (void)putWithNSString:(NSString *)key
                 withId:(id)value {
  if (key == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"key must not be null"];
  }
  if ([((NSString *) nil_chk(key)) sequenceLength] == 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"key must not be the empty string"];
  }
  (void) [((id<JavaxScriptBindings>) nil_chk(globalscope_)) putWithId:key withId:value];
}

- (void)registerEngineExtensionWithNSString:(NSString *)extension
         withJavaxScriptScriptEngineFactory:(id<JavaxScriptScriptEngineFactory>)factory {
  if (extension == nil || factory == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"parameters must be non-null"];
  }
  (void) [((JavaUtilHashMap *) nil_chk(extensionAssociations_)) putWithId:extension withId:factory];
  [((RAREUTIdentityArrayList *) nil_chk(engineSpis_)) addIfNotPresentWithId:factory];
}

- (void)registerEngineNameWithNSString:(NSString *)name
    withJavaxScriptScriptEngineFactory:(id<JavaxScriptScriptEngineFactory>)factory {
  if (name == nil || factory == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"parameters must be non-null"];
  }
  (void) [((JavaUtilHashMap *) nil_chk(nameAssociations_)) putWithId:name withId:factory];
  [((RAREUTIdentityArrayList *) nil_chk(engineSpis_)) addIfNotPresentWithId:factory];
}

- (void)registerEngineMimeTypeWithNSString:(NSString *)mimeType
        withJavaxScriptScriptEngineFactory:(id<JavaxScriptScriptEngineFactory>)factory {
  if (mimeType == nil || factory == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"parameters must be non-null"];
  }
  (void) [((JavaUtilHashMap *) nil_chk(mimeTypeAssociations_)) putWithId:mimeType withId:factory];
  [((RAREUTIdentityArrayList *) nil_chk(engineSpis_)) addIfNotPresentWithId:factory];
}

- (void)setBindingsWithJavaxScriptBindings:(id<JavaxScriptBindings>)bindings {
  if (bindings == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"bindings must not be null"];
  }
  globalscope_ = bindings;
}

- (void)copyAllFieldsTo:(JavaxScriptScriptEngineManager *)other {
  [super copyAllFieldsTo:other];
  other->engineSpis_ = engineSpis_;
  other->extensionAssociations_ = extensionAssociations_;
  other->globalscope_ = globalscope_;
  other->mimeTypeAssociations_ = mimeTypeAssociations_;
  other->nameAssociations_ = nameAssociations_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getWithNSString:", NULL, "LNSObject", 0x1, NULL },
    { "getEngineByExtensionWithNSString:", NULL, "LJavaxScriptScriptEngine", 0x1, NULL },
    { "getEngineByMimeTypeWithNSString:", NULL, "LJavaxScriptScriptEngine", 0x1, NULL },
    { "getEngineByNameWithNSString:", NULL, "LJavaxScriptScriptEngine", 0x1, NULL },
    { "getEngineFactories", NULL, "LJavaUtilList", 0x1, NULL },
    { "getBindings", NULL, "LJavaxScriptBindings", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "engineSpis_", NULL, 0x12, "LRAREUTIdentityArrayList" },
    { "nameAssociations_", NULL, 0x12, "LJavaUtilHashMap" },
    { "extensionAssociations_", NULL, 0x12, "LJavaUtilHashMap" },
    { "mimeTypeAssociations_", NULL, 0x12, "LJavaUtilHashMap" },
  };
  static J2ObjcClassInfo _JavaxScriptScriptEngineManager = { "ScriptEngineManager", "javax.script", NULL, 0x1, 6, methods, 4, fields, 0, NULL};
  return &_JavaxScriptScriptEngineManager;
}

@end
