//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-java/com/appnativa/rare/ExecutionHandler.java
//
//  Created by decoteaud on 9/15/14.
//

#include "com/appnativa/rare/CancelableFutureWrapper.h"
#include "com/appnativa/rare/CancelableWorker.h"
#include "com/appnativa/rare/ExecutionHandler.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iWorkerTask.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "java/lang/Runnable.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"

@implementation RAREExecutionHandler

static RAREUTIdentityArrayList * RAREExecutionHandler_handlers_;

+ (RAREUTIdentityArrayList *)handlers {
  return RAREExecutionHandler_handlers_;
}

+ (void)setHandlers:(RAREUTIdentityArrayList *)handlers {
  RAREExecutionHandler_handlers_ = handlers;
}

- (id)initWithInt:(int)max {
  if (self = [super init]) {
    executorService_ = [[JavaUtilConcurrentThreadPoolExecutor alloc] initWithInt:(max > 5) ? 5 : max withInt:max withLong:60LL withJavaUtilConcurrentTimeUnitEnum:[JavaUtilConcurrentTimeUnitEnum SECONDS] withJavaUtilConcurrentBlockingQueue:[[JavaUtilConcurrentLinkedBlockingQueue alloc] init]];
    [((RAREUTIdentityArrayList *) nil_chk(RAREExecutionHandler_handlers_)) addWithId:executorService_];
  }
  return self;
}

- (id<RAREiCancelableFuture>)executeBackgroundTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  if ([((id<JavaUtilConcurrentExecutorService>) nil_chk(executorService_)) isShutdown]) {
    return [RARECancelableFutureWrapper NULL_CANCELABLE_FUTURE];
  }
  return [[RARECancelableFutureWrapper alloc] initWithJavaUtilConcurrentFuture:[executorService_ submitWithJavaUtilConcurrentCallable:callable]];
}

- (id<RAREiCancelableFuture>)executeBackgroundTaskWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  if ([((id<JavaUtilConcurrentExecutorService>) nil_chk(executorService_)) isShutdown]) {
    return [RARECancelableFutureWrapper NULL_CANCELABLE_FUTURE];
  }
  return [[RARECancelableFutureWrapper alloc] initWithJavaUtilConcurrentFuture:[executorService_ submitWithJavaLangRunnable:runnable]];
}

- (id<RAREiCancelableFuture>)executeWorkerTaskWithRAREiWorkerTask:(id<RAREiWorkerTask>)task {
  if ([((id<JavaUtilConcurrentExecutorService>) nil_chk(executorService_)) isShutdown]) {
    return [RARECancelableFutureWrapper NULL_CANCELABLE_FUTURE];
  }
  return [[RARECancelableFutureWrapper alloc] initWithJavaUtilConcurrentFuture:[executorService_ submitWithJavaLangRunnable:[[RARECancelableWorker alloc] initWithRAREiWorkerTask:task]]];
}

+ (void)shutdownHandlers {
  for (id<JavaUtilConcurrentExecutorService> __strong service in nil_chk(RAREExecutionHandler_handlers_)) {
    (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(service)) shutdownNow];
  }
}

+ (void)initialize {
  if (self == [RAREExecutionHandler class]) {
    RAREExecutionHandler_handlers_ = [[RAREUTIdentityArrayList alloc] initWithInt:2];
  }
}

- (void)copyAllFieldsTo:(RAREExecutionHandler *)other {
  [super copyAllFieldsTo:other];
  other->executorService_ = executorService_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "executeBackgroundTaskWithJavaUtilConcurrentCallable:", NULL, "LRAREiCancelableFuture", 0x1, NULL },
    { "executeBackgroundTaskWithJavaLangRunnable:", NULL, "LRAREiCancelableFuture", 0x1, NULL },
    { "executeWorkerTaskWithRAREiWorkerTask:", NULL, "LRAREiCancelableFuture", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "handlers_", NULL, 0x8, "LRAREUTIdentityArrayList" },
    { "executorService_", NULL, 0x0, "LJavaUtilConcurrentExecutorService" },
  };
  static J2ObjcClassInfo _RAREExecutionHandler = { "ExecutionHandler", "com.appnativa.rare", NULL, 0x1, 3, methods, 2, fields, 0, NULL};
  return &_RAREExecutionHandler;
}

@end
