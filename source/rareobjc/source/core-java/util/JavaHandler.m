//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-java/com/appnativa/rare/util/JavaHandler.java
//
//  Created by decoteaud on 9/15/14.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iFunctionHandler.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/scripting/iScriptHandler.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/iPlatformWindowManager.h"
#include "com/appnativa/rare/util/JavaHandler.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/IntList.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchMethodError.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@implementation RAREJavaHandler

static id<JavaUtilMap> RAREJavaHandler_methods_;
static JavaLangThreadLocal * RAREJavaHandler_perThreadMethodList_;
static JavaLangThreadLocal * RAREJavaHandler_perThreadIntList_;

+ (id<JavaUtilMap>)methods {
  return RAREJavaHandler_methods_;
}

+ (JavaLangThreadLocal *)perThreadMethodList {
  return RAREJavaHandler_perThreadMethodList_;
}

+ (JavaLangThreadLocal *)perThreadIntList {
  return RAREJavaHandler_perThreadIntList_;
}

+ (id)allocateWithIOSClass:(IOSClass *)cls
         withNSObjectArray:(IOSObjectArray *)params {
  if ((params == nil) || ((int) [params count] == 0)) {
    return [((IOSClass *) nil_chk(cls)) newInstance];
  }
  int len = (params == nil) ? 0 : (int) [params count];
  IOSObjectArray *types = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[IOSClass class]]];
  id o;
  for (int i = 0; i < len; i++) {
    o = IOSObjectArray_Get(nil_chk(params), i);
    (void) IOSObjectArray_Set(types, i, (o == nil) ? nil : [o getClass]);
  }
  JavaLangReflectConstructor *m = [RAREJavaHandler findConstructorWithIOSClass:cls withIOSClassArray:types];
  if (m != nil) {
    @try {
      types = [m getParameterTypes];
      return [m newInstanceWithNSObjectArray:[RAREJavaHandler coerceParamsWithIOSClassArray:types withNSObjectArray:params]];
    }
    @catch (JavaLangThrowable *e) {
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
    }
  }
  @throw [[JavaLangNoSuchMethodException alloc] initWithNSString:[NSString stringWithFormat:@"Constructor for %@", [((IOSClass *) nil_chk(cls)) getName]]];
}

+ (id)setFunctionValueWithId:(id)obj
                withNSString:(NSString *)name
           withNSObjectArray:(IOSObjectArray *)params {
  int len = (params == nil) ? 0 : (int) [params count];
  IOSObjectArray *types = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[IOSClass class]]];
  id o;
  for (int i = 0; i < len; i++) {
    o = IOSObjectArray_Get(nil_chk(params), i);
    (void) IOSObjectArray_Set(types, i, (o == nil) ? nil : [o getClass]);
  }
  JavaLangReflectMethod *m = [RAREJavaHandler findMethodWithIOSClass:([obj isKindOfClass:[IOSClass class]]) ? (IOSClass *) check_class_cast(obj, [IOSClass class]) : [nil_chk(obj) getClass] withNSString:name withIOSClassArray:types];
  if (m != nil) {
    @try {
      return [m invokeWithId:([obj isKindOfClass:[IOSClass class]]) ? nil : obj withNSObjectArray:[RAREJavaHandler coerceParamsWithIOSClassArray:[m getParameterTypes] withNSObjectArray:params]];
    }
    @catch (JavaLangThrowable *e) {
      @throw [[RAREApplicationException alloc] initWithNSString:name withJavaLangThrowable:e];
    }
  }
  @throw [[JavaLangNoSuchMethodError alloc] initWithNSString:name];
}

+ (BOOL)setFunctionValueExWithId:(id)obj
                    withNSString:(NSString *)name
               withNSObjectArray:(IOSObjectArray *)params {
  int len = (params == nil) ? 0 : (int) [params count];
  IOSObjectArray *types = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[IOSClass class]]];
  id o;
  for (int i = 0; i < len; i++) {
    o = IOSObjectArray_Get(nil_chk(params), i);
    (void) IOSObjectArray_Set(types, i, (o == nil) ? nil : [o getClass]);
  }
  JavaLangReflectMethod *m = [RAREJavaHandler findMethodWithIOSClass:([obj isKindOfClass:[IOSClass class]]) ? (IOSClass *) check_class_cast(obj, [IOSClass class]) : [nil_chk(obj) getClass] withNSString:name withIOSClassArray:types];
  if (m != nil) {
    @try {
      (void) [m invokeWithId:([obj isKindOfClass:[IOSClass class]]) ? nil : obj withNSObjectArray:[RAREJavaHandler coerceParamsWithIOSClassArray:[m getParameterTypes] withNSObjectArray:params]];
      return YES;
    }
    @catch (JavaLangThrowable *e) {
    }
  }
  return NO;
}

+ (id)getFunctionValueWithId:(id)obj
                withNSString:(NSString *)name
           withNSObjectArray:(IOSObjectArray *)params {
  int len = (params == nil) ? 0 : (int) [params count];
  IOSObjectArray *types = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[IOSClass class]]];
  id o;
  for (int i = 0; i < len; i++) {
    o = IOSObjectArray_Get(nil_chk(params), i);
    (void) IOSObjectArray_Set(types, i, (o == nil) ? nil : [o getClass]);
  }
  JavaLangReflectMethod *m = [RAREJavaHandler findMethodWithIOSClass:([obj isKindOfClass:[IOSClass class]]) ? (IOSClass *) check_class_cast(obj, [IOSClass class]) : [nil_chk(obj) getClass] withNSString:name withIOSClassArray:types];
  if (m != nil) {
    @try {
      return [m invokeWithId:([obj isKindOfClass:[IOSClass class]]) ? nil : obj withNSObjectArray:[RAREJavaHandler coerceParamsWithIOSClassArray:[m getParameterTypes] withNSObjectArray:params]];
    }
    @catch (JavaLangThrowable *e) {
      @throw [[RAREApplicationException alloc] initWithNSString:name withJavaLangThrowable:e];
    }
  }
  @throw [[JavaLangNoSuchMethodError alloc] initWithNSString:name];
}

+ (id)getObjectWithRAREiWidget:(id<RAREiWidget>)context
                  withNSString:(NSString *)name {
  if ([((NSString *) nil_chk(name)) isEqual:@"widget"]) {
    return context;
  }
  if ([name isEqual:@"form"]) {
    return [((id<RAREiWidget>) nil_chk(context)) getFormViewer];
  }
  if ([name isEqual:@"window"]) {
    return [((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getWindowViewer];
  }
  if ([name isEqual:@"rare"]) {
    return [RAREPlatform getFunctionHandler];
  }
  if ([name isEqual:@"_top"]) {
    return [((id<RAREiPlatformWindowManager>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getAppContext])) getWindowManager])) getRootViewer];
  }
  id o = [((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getFormViewer])) getWidgetWithNSString:name];
  if (o != nil) {
    return o;
  }
  o = [((RAREWindowViewer *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([context getAppContext])) getWindowViewer])) getViewerWithNSString:name];
  if (o != nil) {
    return o;
  }
  return [((id<RAREiScriptHandler>) nil_chk([context getScriptHandler])) getScriptingVariableWithRAREWidgetContext:nil withNSString:name];
}

+ (id)getStaticValueWithIOSClass:(IOSClass *)cls
                    withNSString:(NSString *)name {
  @try {
    JavaLangReflectField *f = [((IOSClass *) nil_chk(cls)) getField:name];
    return [((JavaLangReflectField *) nil_chk(f)) getWithId:cls];
  }
  @catch (JavaLangException *ex) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:ex];
  }
}

+ (id)getStaticValueWithNSString:(NSString *)cls
                    withNSString:(NSString *)name {
  @try {
    return [RAREJavaHandler getStaticValueWithIOSClass:[IOSClass forName:cls] withNSString:name];
  }
  @catch (JavaLangClassNotFoundException *ex) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:ex];
  }
}

+ (int)canInvokeWithIOSClassArray:(IOSObjectArray *)types
                withIOSClassArray:(IOSObjectArray *)params {
  int len = (params == nil) ? 0 : (int) [params count];
  if (((int) [((IOSObjectArray *) nil_chk(types)) count] == 1) && ((IOSObjectArray_Get(types, 0) == [IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]]) || (IOSObjectArray_Get(types, 0) == [IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]))) {
    return len;
  }
  if ((int) [types count] != len) {
    return -1;
  }
  if (len == 0) {
    return 0;
  }
  int n = 0;
  IOSClass *o, *cls;
  for (int i = 0; i < len; i++) {
    o = IOSObjectArray_Get(nil_chk(params), i);
    cls = IOSObjectArray_Get(types, i);
    if ((cls == [IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]]) || ((cls == [IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]) && (i + 1 == len))) {
      n++;
      continue;
    }
    if ((o == nil) || [cls isAssignableFrom:o]) {
      n++;
      continue;
    }
    if ([[IOSClass classWithClass:[NSNumber class]] isAssignableFrom:o]) {
      if ((cls == [IOSClass intClass]) || (cls == [IOSClass longClass]) || (cls == [IOSClass doubleClass]) || (cls == [IOSClass floatClass])) {
        n++;
        continue;
      }
    }
    if ([[IOSClass classWithClass:[JavaLangBoolean class]] isAssignableFrom:o] && (cls == [IOSClass booleanClass])) {
      n++;
      continue;
    }
    if (cls != [IOSClass classWithClass:[NSString class]]) {
      return -1;
    }
  }
  return n;
}

+ (int)canInvokeWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)m
                             withIOSClassArray:(IOSObjectArray *)params {
  return [RAREJavaHandler canInvokeWithIOSClassArray:[((JavaLangReflectConstructor *) nil_chk(m)) getParameterTypes] withIOSClassArray:params];
}

+ (int)canInvokeWithJavaLangReflectMethod:(JavaLangReflectMethod *)m
                        withIOSClassArray:(IOSObjectArray *)params {
  return [RAREJavaHandler canInvokeWithIOSClassArray:[((JavaLangReflectMethod *) nil_chk(m)) getParameterTypes] withIOSClassArray:params];
}

+ (IOSObjectArray *)coerceParamsWithIOSClassArray:(IOSObjectArray *)types
                                withNSObjectArray:(IOSObjectArray *)params {
  int len = (types == nil) ? 0 : (int) [types count];
  IOSClass *cls;
  id o;
  for (int i = 0; i < len; i++) {
    cls = IOSObjectArray_Get(nil_chk(types), i);
    if (i + 1 == len) {
      if (cls == [IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]]) {
        IOSObjectArray *a = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(params)) count] - i type:[IOSClass classWithClass:[NSObject class]]];
        [JavaLangSystem arraycopyWithId:params withInt:i withId:a withInt:0 withInt:(int) [params count] - i];
        IOSObjectArray *b = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[NSObject class]]];
        [JavaLangSystem arraycopyWithId:params withInt:0 withId:b withInt:0 withInt:len - 1];
        (void) IOSObjectArray_Set(b, i, a);
        return b;
      }
      if (cls == [IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]) {
        IOSObjectArray *a = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(params)) count] - i type:[IOSClass classWithClass:[NSString class]]];
        IOSObjectArray *b = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithClass:[NSObject class]]];
        [JavaLangSystem arraycopyWithId:params withInt:0 withId:b withInt:0 withInt:len - 1];
        (void) IOSObjectArray_Set(b, i, a);
        int n = 0;
        for (; i < (int) [params count]; i++) {
          o = IOSObjectArray_Get(params, i);
          if (o == nil) {
            continue;
          }
          (void) IOSObjectArray_Set(a, n++, [nil_chk(o) description]);
        }
        return b;
      }
    }
    o = IOSObjectArray_Get(nil_chk(params), i);
    if (o == nil) {
      continue;
    }
    if ((cls == [IOSClass classWithClass:[NSString class]]) && ([nil_chk(o) getClass] != [IOSClass classWithClass:[NSString class]])) {
      (void) IOSObjectArray_Set(params, i, [o description]);
    }
    else if ((cls == [IOSClass classWithClass:[JavaLangInteger class]]) || (cls == [IOSClass intClass])) {
      if ([o isKindOfClass:[NSNumber class]]) {
        (void) IOSObjectArray_Set(params, i, [JavaLangInteger valueOfWithInt:[((NSNumber *) check_class_cast(o, [NSNumber class])) intValue]]);
      }
    }
    else if (((cls == [IOSClass classWithClass:[JavaLangFloat class]]) || (cls == [IOSClass floatClass]))) {
      if ([o isKindOfClass:[NSNumber class]]) {
        (void) IOSObjectArray_Set(params, i, [JavaLangFloat valueOfWithFloat:[((NSNumber *) check_class_cast(o, [NSNumber class])) floatValue]]);
      }
    }
    else if (((cls == [IOSClass classWithClass:[JavaLangDouble class]]) || (cls == [IOSClass doubleClass]))) {
      if ([o isKindOfClass:[NSNumber class]]) {
        (void) IOSObjectArray_Set(params, i, [JavaLangDouble valueOfWithDouble:[((NSNumber *) check_class_cast(o, [NSNumber class])) doubleValue]]);
      }
    }
    else if ((cls == [IOSClass classWithClass:[JavaLangLong class]]) || (cls == [IOSClass longClass])) {
      if ([o isKindOfClass:[NSNumber class]]) {
        (void) IOSObjectArray_Set(params, i, [JavaLangLong valueOfWithLong:[((NSNumber *) check_class_cast(o, [NSNumber class])) longLongValue]]);
      }
    }
  }
  return params;
}

+ (JavaLangReflectConstructor *)findConstructorWithIOSClass:(IOSClass *)cls
                                          withIOSClassArray:(IOSObjectArray *)params {
  IOSObjectArray *a = [((IOSClass *) nil_chk(cls)) getConstructors];
  int ci = 0;
  JavaUtilArrayList *matches = [((JavaLangThreadLocal *) nil_chk(RAREJavaHandler_perThreadMethodList_)) get];
  RAREUTIntList *pmatches = [((JavaLangThreadLocal *) nil_chk(RAREJavaHandler_perThreadIntList_)) get];
  [((JavaUtilArrayList *) nil_chk(matches)) clear];
  ((RAREUTIntList *) nil_chk(pmatches))->_length_ = 0;
  int plen = (params == nil) ? 0 : (int) [params count];
  {
    IOSObjectArray *a__ = a;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectConstructor *m = (*b__++);
      if ((ci = [RAREJavaHandler canInvokeWithJavaLangReflectConstructor:m withIOSClassArray:params]) > -1) {
        if (ci == plen) {
          return m;
        }
        [matches addWithId:m];
        [pmatches addWithInt:ci];
      }
    }
  }
  if (pmatches->_length_ == 0) {
    return nil;
  }
  int len = pmatches->_length_;
  ci = 0;
  int n = 0;
  for (int i = 0; i < len; i++) {
    if (IOSIntArray_Get(nil_chk(pmatches->A_), i) > ci) {
      n = 0;
      ci = IOSIntArray_Get(pmatches->A_, i);
    }
  }
  return (JavaLangReflectConstructor *) check_class_cast([matches getWithInt:n], [JavaLangReflectConstructor class]);
}

+ (JavaLangReflectMethod *)findMethodWithIOSClass:(IOSClass *)cls
                                     withNSString:(NSString *)name
                                withIOSClassArray:(IOSObjectArray *)params {
  IOSObjectArray *a = [RAREJavaHandler getMethodsWithIOSClass:cls];
  int ci = 0;
  JavaUtilArrayList *matches = [((JavaLangThreadLocal *) nil_chk(RAREJavaHandler_perThreadMethodList_)) get];
  RAREUTIntList *pmatches = [((JavaLangThreadLocal *) nil_chk(RAREJavaHandler_perThreadIntList_)) get];
  [((JavaUtilArrayList *) nil_chk(matches)) clear];
  ((RAREUTIntList *) nil_chk(pmatches))->_length_ = 0;
  int plen = (params == nil) ? 0 : (int) [params count];
  {
    IOSObjectArray *a__ = a;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *m = (*b__++);
      if ([((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(m)) getName])) isEqual:name] && (ci = [RAREJavaHandler canInvokeWithJavaLangReflectMethod:m withIOSClassArray:params]) > -1) {
        if (ci == plen) {
          return m;
        }
        [matches addWithId:m];
        [pmatches addWithInt:ci];
      }
    }
  }
  if (pmatches->_length_ == 0) {
    return nil;
  }
  int len = pmatches->_length_;
  ci = 0;
  int n = 0;
  for (int i = 0; i < len; i++) {
    if (IOSIntArray_Get(nil_chk(pmatches->A_), i) > ci) {
      n = 0;
      ci = IOSIntArray_Get(pmatches->A_, i);
    }
  }
  return (JavaLangReflectMethod *) check_class_cast([matches getWithInt:n], [JavaLangReflectMethod class]);
}

+ (IOSObjectArray *)getMethodsWithIOSClass:(IOSClass *)cls {
  IOSObjectArray *m = (IOSObjectArray *) check_class_cast([((id<JavaUtilMap>) nil_chk(RAREJavaHandler_methods_)) getWithId:cls], [IOSObjectArray class]);
  if (m == nil) {
    m = [((IOSClass *) nil_chk(cls)) getMethods];
    if ([[IOSClass classWithClass:[RARERenderableDataItem class]] isAssignableFrom:cls]) {
      (void) [RAREJavaHandler_methods_ putWithId:cls withId:m];
    }
  }
  return m;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [RAREJavaHandler class]) {
    RAREJavaHandler_methods_ = [[JavaUtilHashMap alloc] init];
    RAREJavaHandler_perThreadMethodList_ = [[RAREJavaHandler_$1 alloc] init];
    RAREJavaHandler_perThreadIntList_ = [[RAREJavaHandler_$2 alloc] init];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "allocateWithIOSClass:withNSObjectArray:", NULL, "LNSObject", 0x9, "JavaLangException" },
    { "setFunctionValueWithId:withNSString:withNSObjectArray:", NULL, "LNSObject", 0x89, NULL },
    { "setFunctionValueExWithId:withNSString:withNSObjectArray:", NULL, "Z", 0x89, NULL },
    { "getFunctionValueWithId:withNSString:withNSObjectArray:", NULL, "LNSObject", 0x89, NULL },
    { "getObjectWithRAREiWidget:withNSString:", NULL, "LNSObject", 0x9, NULL },
    { "getStaticValueWithIOSClass:withNSString:", NULL, "LNSObject", 0x9, NULL },
    { "getStaticValueWithNSString:withNSString:", NULL, "LNSObject", 0x9, NULL },
    { "canInvokeWithIOSClassArray:withIOSClassArray:", NULL, "I", 0x88, NULL },
    { "canInvokeWithJavaLangReflectConstructor:withIOSClassArray:", NULL, "I", 0x88, NULL },
    { "canInvokeWithJavaLangReflectMethod:withIOSClassArray:", NULL, "I", 0x88, NULL },
    { "coerceParamsWithIOSClassArray:withNSObjectArray:", NULL, "LIOSObjectArray", 0x88, NULL },
    { "findConstructorWithIOSClass:withIOSClassArray:", NULL, "LJavaLangReflectConstructor", 0x88, NULL },
    { "findMethodWithIOSClass:withNSString:withIOSClassArray:", NULL, "LJavaLangReflectMethod", 0x88, NULL },
    { "getMethodsWithIOSClass:", NULL, "LIOSObjectArray", 0x8, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "methods_", NULL, 0x1a, "LJavaUtilMap" },
    { "perThreadMethodList_", NULL, 0x1a, "LJavaLangThreadLocal" },
    { "perThreadIntList_", NULL, 0x1a, "LJavaLangThreadLocal" },
  };
  static J2ObjcClassInfo _RAREJavaHandler = { "JavaHandler", "com.appnativa.rare.util", NULL, 0x1, 14, methods, 3, fields, 0, NULL};
  return &_RAREJavaHandler;
}

@end
@implementation RAREJavaHandler_$1

- (JavaUtilArrayList *)initialValue {
  @synchronized(self) {
    {
      return [[JavaUtilArrayList alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LJavaUtilArrayList", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LJavaUtilArrayList"};
  static J2ObjcClassInfo _RAREJavaHandler_$1 = { "$1", "com.appnativa.rare.util", "JavaHandler", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREJavaHandler_$1;
}

@end
@implementation RAREJavaHandler_$2

- (RAREUTIntList *)initialValue {
  @synchronized(self) {
    {
      return [[RAREUTIntList alloc] init];
    }
  }
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LRAREUTIntList", 0x24, NULL },
  };
  static const char *superclass_type_args[] = {"LRAREUTIntList"};
  static J2ObjcClassInfo _RAREJavaHandler_$2 = { "$2", "com.appnativa.rare.util", "JavaHandler", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_RAREJavaHandler_$2;
}

@end
