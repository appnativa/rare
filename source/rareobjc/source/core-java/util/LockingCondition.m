//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/core-java/com/appnativa/rare/util/LockingCondition.java
//
//  Created by decoteaud on 9/15/14.
//

#include "IOSClass.h"
#include "com/appnativa/rare/util/LockingCondition.h"
#include "java/lang/InterruptedException.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/locks/Condition.h"
#include "java/util/concurrent/locks/Lock.h"
#include "java/util/concurrent/locks/ReentrantLock.h"

@implementation RARELockingCondition

- (id)init {
  if (self = [super init]) {
    lock__ = [[JavaUtilConcurrentLocksReentrantLock alloc] init];
    condition_ = [lock__ newCondition];
  }
  return self;
}

- (void)lock {
  [((id<JavaUtilConcurrentLocksLock>) nil_chk(lock__)) lock];
}

- (void)unlock {
  [((id<JavaUtilConcurrentLocksLock>) nil_chk(lock__)) unlock];
}

- (void)awaitSignal {
  [((id<JavaUtilConcurrentLocksCondition>) nil_chk(condition_)) await];
}

- (void)awaitSignalWithLong:(long long int)milliseconds {
  [((id<JavaUtilConcurrentLocksCondition>) nil_chk(condition_)) awaitWithLong:milliseconds withJavaUtilConcurrentTimeUnitEnum:[JavaUtilConcurrentTimeUnitEnum MILLISECONDS]];
}

- (void)signal {
  [((id<JavaUtilConcurrentLocksCondition>) nil_chk(condition_)) signal];
}

- (void)signalAll {
  [((id<JavaUtilConcurrentLocksCondition>) nil_chk(condition_)) signalAll];
}

- (void)copyAllFieldsTo:(RARELockingCondition *)other {
  [super copyAllFieldsTo:other];
  other->condition_ = condition_;
  other->lock__ = lock__;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "awaitSignal", NULL, "V", 0x1, "JavaLangInterruptedException" },
    { "awaitSignalWithLong:", NULL, "V", 0x1, "JavaLangInterruptedException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "lock__", "lock", 0x12, "LJavaUtilConcurrentLocksLock" },
    { "condition_", NULL, 0x12, "LJavaUtilConcurrentLocksCondition" },
  };
  static J2ObjcClassInfo _RARELockingCondition = { "LockingCondition", "com.appnativa.rare.util", NULL, 0x1, 2, methods, 2, fields, 0, NULL};
  return &_RARELockingCondition;
}

@end
