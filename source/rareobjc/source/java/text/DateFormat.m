//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: mods/java/text/DateFormat.java
//
//  Created by decoteaud on 11/13/15.
//

#include "IOSClass.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/text/DateFormat.h"
#include "java/text/FieldPosition.h"
#include "java/text/Format.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/Hashtable.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#import "AppleHelper.h"
#import "APView+Component.h"

@implementation JavaTextDateFormat

+ (int)AM_PM_FIELD {
  return JavaTextDateFormat_AM_PM_FIELD;
}

+ (int)DATE_FIELD {
  return JavaTextDateFormat_DATE_FIELD;
}

+ (int)DAY_OF_WEEK_FIELD {
  return JavaTextDateFormat_DAY_OF_WEEK_FIELD;
}

+ (int)DAY_OF_WEEK_IN_MONTH_FIELD {
  return JavaTextDateFormat_DAY_OF_WEEK_IN_MONTH_FIELD;
}

+ (int)DAY_OF_YEAR_FIELD {
  return JavaTextDateFormat_DAY_OF_YEAR_FIELD;
}

+ (int)DEFAULT {
  return JavaTextDateFormat_DEFAULT;
}

+ (int)ERA_FIELD {
  return JavaTextDateFormat_ERA_FIELD;
}

+ (int)FULL {
  return JavaTextDateFormat_FULL;
}

+ (int)HOUR0_FIELD {
  return JavaTextDateFormat_HOUR0_FIELD;
}

+ (int)HOUR1_FIELD {
  return JavaTextDateFormat_HOUR1_FIELD;
}

+ (int)HOUR_OF_DAY0_FIELD {
  return JavaTextDateFormat_HOUR_OF_DAY0_FIELD;
}

+ (int)HOUR_OF_DAY1_FIELD {
  return JavaTextDateFormat_HOUR_OF_DAY1_FIELD;
}

+ (int)LONG {
  return JavaTextDateFormat_LONG;
}

+ (int)MEDIUM {
  return JavaTextDateFormat_MEDIUM;
}

+ (int)MILLISECOND_FIELD {
  return JavaTextDateFormat_MILLISECOND_FIELD;
}

+ (int)MINUTE_FIELD {
  return JavaTextDateFormat_MINUTE_FIELD;
}

+ (int)MONTH_FIELD {
  return JavaTextDateFormat_MONTH_FIELD;
}

+ (int)SECOND_FIELD {
  return JavaTextDateFormat_SECOND_FIELD;
}

+ (int)SHORT {
  return JavaTextDateFormat_SHORT;
}

+ (int)TIMEZONE_FIELD {
  return JavaTextDateFormat_TIMEZONE_FIELD;
}

+ (int)WEEK_OF_MONTH_FIELD {
  return JavaTextDateFormat_WEEK_OF_MONTH_FIELD;
}

+ (int)WEEK_OF_YEAR_FIELD {
  return JavaTextDateFormat_WEEK_OF_YEAR_FIELD;
}

+ (int)YEAR_FIELD {
  return JavaTextDateFormat_YEAR_FIELD;
}

- (id)init {
  return [super init];
}

- (id)clone {
  return [super clone];
}

- (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date {
  NSDate* ndate=[NSDate fromJavaDate:date];
  return [((NSDateFormatter*)proxy_) stringFromDate: ndate];
}

- (JavaLangStringBuffer *)formatWithId:(id)obj
              withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
             withJavaTextFieldPosition:(JavaTextFieldPosition *)pos {
  if ([obj isKindOfClass:[JavaUtilDate class]]) {
    return [self formatWithJavaUtilDate:(JavaUtilDate *) check_class_cast(obj, [JavaUtilDate class]) withJavaLangStringBuffer:toAppendTo withJavaTextFieldPosition:pos];
  }
  else if ([obj isKindOfClass:[NSNumber class]]) {
    return [self formatWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:[((NSNumber *) check_class_cast(obj, [NSNumber class])) longLongValue]] withJavaLangStringBuffer:toAppendTo withJavaTextFieldPosition:pos];
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Cannot format given Object as a Date"];
  }
}

- (JavaLangStringBuffer *)formatWithJavaUtilDate:(JavaUtilDate *)date
                        withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
                       withJavaTextFieldPosition:(JavaTextFieldPosition *)fieldPosition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaUtilDate *)parseWithNSString:(NSString *)source {
  JavaTextParsePosition *p = [[JavaTextParsePosition alloc] initWithInt:0];
  JavaUtilDate *date = [self parseWithNSString:source withJavaTextParsePosition:p];
  if ([p getIndex] == 0) {
    int ei = [p getErrorIndex];
    @throw [[JavaTextParseException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: \"%@\"", source] withInt:ei];
  }
  return date;
}

- (JavaUtilDate *)parseWithNSString:(NSString *)source
          withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setLenientWithBoolean:(BOOL)value {
  [((NSDateFormatter*)proxy_) setLenient: value];
}

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  if(timezone_!=tz) {
    timezone_=tz;
    [((NSDateFormatter*)proxy_) setTimeZone:((NSTimeZone*)tz->nativeTimeZone_)];
  }
}

+ (NSString *)getDateFormatWithInt:(int)dateStyle
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaTextDateFormat getDefaultPatternWithNSString:(dateStyle == JavaTextDateFormat_SHORT) ? @"yMd" : @"yMMMMdd" withJavaUtilLocale:locale];
}

+ (JavaTextDateFormat *)getDateInstance {
  return [JavaTextDateFormat getDateInstanceWithInt:JavaTextDateFormat_DEFAULT];
}

+ (JavaTextDateFormat *)getDateInstanceWithInt:(int)style {
  [JavaTextDateFormat checkDateStyleWithInt:style];
  return [JavaTextDateFormat getDateInstanceWithInt:style withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDateFormat *)getDateInstanceWithInt:(int)style
                            withJavaUtilLocale:(JavaUtilLocale *)locale {
  [JavaTextDateFormat checkDateStyleWithInt:style];
  return [[JavaTextSimpleDateFormat alloc] initWithNSString:[JavaTextDateFormat getDateFormatWithInt:style withJavaUtilLocale:locale] withJavaUtilLocale:locale];
}

+ (JavaTextDateFormat *)getDateTimeInstance {
  return [JavaTextDateFormat getDateTimeInstanceWithInt:JavaTextDateFormat_DEFAULT withInt:JavaTextDateFormat_DEFAULT];
}

+ (JavaTextDateFormat *)getDateTimeInstanceWithInt:(int)dateStyle
                                           withInt:(int)timeStyle {
  [JavaTextDateFormat checkTimeStyleWithInt:timeStyle];
  [JavaTextDateFormat checkDateStyleWithInt:dateStyle];
  return [JavaTextDateFormat getDateTimeInstanceWithInt:dateStyle withInt:timeStyle withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDateFormat *)getDateTimeInstanceWithInt:(int)dateStyle
                                           withInt:(int)timeStyle
                                withJavaUtilLocale:(JavaUtilLocale *)locale {
  [JavaTextDateFormat checkTimeStyleWithInt:timeStyle];
  [JavaTextDateFormat checkDateStyleWithInt:dateStyle];
  NSString *pattern = [NSString stringWithFormat:@"%@ %@", [JavaTextDateFormat getDateFormatWithInt:dateStyle withJavaUtilLocale:locale], [JavaTextDateFormat getTimeFormatWithInt:timeStyle withJavaUtilLocale:locale]];
  return [[JavaTextSimpleDateFormat alloc] initWithNSString:pattern withJavaUtilLocale:locale];
}

+ (JavaTextDateFormat *)getInstance {
  return [JavaTextDateFormat getDateTimeInstanceWithInt:JavaTextDateFormat_SHORT withInt:JavaTextDateFormat_SHORT];
}

+ (NSString *)getTimeFormatWithInt:(int)timeStyle
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaTextDateFormat getDefaultPatternWithNSString:(timeStyle == JavaTextDateFormat_SHORT) ? @"hmma" : @"hmmssa" withJavaUtilLocale:locale];
}

+ (JavaTextDateFormat *)getTimeInstance {
  return [JavaTextDateFormat getTimeInstanceWithInt:JavaTextDateFormat_DEFAULT];
}

+ (JavaTextDateFormat *)getTimeInstanceWithInt:(int)style {
  [JavaTextDateFormat checkTimeStyleWithInt:style];
  return [JavaTextDateFormat getTimeInstanceWithInt:style withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDateFormat *)getTimeInstanceWithInt:(int)style
                            withJavaUtilLocale:(JavaUtilLocale *)locale {
  [JavaTextDateFormat checkTimeStyleWithInt:style];
  return [[JavaTextSimpleDateFormat alloc] initWithNSString:[JavaTextDateFormat getTimeFormatWithInt:style withJavaUtilLocale:locale] withJavaUtilLocale:locale];
}

- (JavaUtilTimeZone *)getTimeZone {
  if (timezone_ == nil) {
    timezone_ = [JavaUtilTimeZone getDefault];
  }
  return timezone_;
}

- (BOOL)isLenient {
  return [((NSDateFormatter*)proxy_) isLenient];
}

+ (void)checkDateStyleWithInt:(int)style {
  if (!((style == JavaTextDateFormat_SHORT) || (style == JavaTextDateFormat_MEDIUM) || (style == JavaTextDateFormat_LONG) || (style == JavaTextDateFormat_FULL) || (style == JavaTextDateFormat_DEFAULT))) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal date style %d", style]];
  }
}

+ (void)checkTimeStyleWithInt:(int)style {
  if (!((style == JavaTextDateFormat_SHORT) || (style == JavaTextDateFormat_MEDIUM) || (style == JavaTextDateFormat_LONG) || (style == JavaTextDateFormat_FULL) || (style == JavaTextDateFormat_DEFAULT))) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal time style %d", style]];
  }
}

+ (NSString *)getDefaultPatternWithNSString:(NSString *)components
                         withJavaUtilLocale:(JavaUtilLocale *)locale {
  NSLocale* l=[AppleHelper toNSLocale:locale];
  return [NSDateFormatter dateFormatFromTemplate:components options:0 locale:l];
}

- (void)copyAllFieldsTo:(JavaTextDateFormat *)other {
  [super copyAllFieldsTo:other];
  other->proxy_ = proxy_;
  other->timezone_ = timezone_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x4, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "formatWithJavaUtilDate:", NULL, "LNSString", 0x111, NULL },
    { "formatWithId:withJavaLangStringBuffer:withJavaTextFieldPosition:", NULL, "LJavaLangStringBuffer", 0x1, NULL },
    { "formatWithJavaUtilDate:withJavaLangStringBuffer:withJavaTextFieldPosition:", NULL, "LJavaLangStringBuffer", 0x401, NULL },
    { "parseWithNSString:", NULL, "LJavaUtilDate", 0x1, "JavaTextParseException" },
    { "parseWithNSString:withJavaTextParsePosition:", NULL, "LJavaUtilDate", 0x401, NULL },
    { "setLenientWithBoolean:", NULL, "V", 0x101, NULL },
    { "setTimeZoneWithJavaUtilTimeZone:", NULL, "V", 0x101, NULL },
    { "getDateFormatWithInt:withJavaUtilLocale:", NULL, "LNSString", 0x9, NULL },
    { "getDateInstance", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getDateInstanceWithInt:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getDateInstanceWithInt:withJavaUtilLocale:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getDateTimeInstance", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getDateTimeInstanceWithInt:withInt:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getDateTimeInstanceWithInt:withInt:withJavaUtilLocale:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getInstance", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getTimeFormatWithInt:withJavaUtilLocale:", NULL, "LNSString", 0x9, NULL },
    { "getTimeInstance", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getTimeInstanceWithInt:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getTimeInstanceWithInt:withJavaUtilLocale:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getTimeZone", NULL, "LJavaUtilTimeZone", 0x1, NULL },
    { "isLenient", NULL, "Z", 0x101, NULL },
    { "checkDateStyleWithInt:", NULL, "V", 0xa, NULL },
    { "checkTimeStyleWithInt:", NULL, "V", 0xa, NULL },
    { "getDefaultPatternWithNSString:withJavaUtilLocale:", NULL, "LNSString", 0x10a, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "AM_PM_FIELD_", NULL, 0x19, "I" },
    { "DATE_FIELD_", NULL, 0x19, "I" },
    { "DAY_OF_WEEK_FIELD_", NULL, 0x19, "I" },
    { "DAY_OF_WEEK_IN_MONTH_FIELD_", NULL, 0x19, "I" },
    { "DAY_OF_YEAR_FIELD_", NULL, 0x19, "I" },
    { "DEFAULT_", NULL, 0x19, "I" },
    { "ERA_FIELD_", NULL, 0x19, "I" },
    { "FULL_", NULL, 0x19, "I" },
    { "HOUR0_FIELD_", NULL, 0x19, "I" },
    { "HOUR1_FIELD_", NULL, 0x19, "I" },
    { "HOUR_OF_DAY0_FIELD_", NULL, 0x19, "I" },
    { "HOUR_OF_DAY1_FIELD_", NULL, 0x19, "I" },
    { "LONG_", NULL, 0x19, "I" },
    { "MEDIUM_", NULL, 0x19, "I" },
    { "MILLISECOND_FIELD_", NULL, 0x19, "I" },
    { "MINUTE_FIELD_", NULL, 0x19, "I" },
    { "MONTH_FIELD_", NULL, 0x19, "I" },
    { "SECOND_FIELD_", NULL, 0x19, "I" },
    { "SHORT_", NULL, 0x19, "I" },
    { "TIMEZONE_FIELD_", NULL, 0x19, "I" },
    { "WEEK_OF_MONTH_FIELD_", NULL, 0x19, "I" },
    { "WEEK_OF_YEAR_FIELD_", NULL, 0x19, "I" },
    { "YEAR_FIELD_", NULL, 0x19, "I" },
    { "timezone_", NULL, 0x0, "LJavaUtilTimeZone" },
    { "proxy_", NULL, 0x4, "LNSObject" },
  };
  static J2ObjcClassInfo _JavaTextDateFormat = { "DateFormat", "java.text", NULL, 0x401, 26, methods, 25, fields, 0, NULL};
  return &_JavaTextDateFormat;
}

@end
@implementation JavaTextDateFormat_Field

static JavaUtilHashtable * JavaTextDateFormat_Field_table_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_ERA_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_YEAR_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_MONTH_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_HOUR_OF_DAY0_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_HOUR_OF_DAY1_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_MINUTE_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_SECOND_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_MILLISECOND_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_DAY_OF_WEEK_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_DAY_OF_MONTH_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_DAY_OF_YEAR_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_DAY_OF_WEEK_IN_MONTH_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_WEEK_OF_YEAR_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_WEEK_OF_MONTH_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_AM_PM_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_HOUR0_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_HOUR1_;
static JavaTextDateFormat_Field * JavaTextDateFormat_Field_TIME_ZONE_;

+ (JavaUtilHashtable *)table {
  return JavaTextDateFormat_Field_table_;
}

+ (void)setTable:(JavaUtilHashtable *)table {
  JavaTextDateFormat_Field_table_ = table;
}

+ (JavaTextDateFormat_Field *)ERA {
  return JavaTextDateFormat_Field_ERA_;
}

+ (JavaTextDateFormat_Field *)YEAR {
  return JavaTextDateFormat_Field_YEAR_;
}

+ (JavaTextDateFormat_Field *)MONTH {
  return JavaTextDateFormat_Field_MONTH_;
}

+ (JavaTextDateFormat_Field *)HOUR_OF_DAY0 {
  return JavaTextDateFormat_Field_HOUR_OF_DAY0_;
}

+ (JavaTextDateFormat_Field *)HOUR_OF_DAY1 {
  return JavaTextDateFormat_Field_HOUR_OF_DAY1_;
}

+ (JavaTextDateFormat_Field *)MINUTE {
  return JavaTextDateFormat_Field_MINUTE_;
}

+ (JavaTextDateFormat_Field *)SECOND {
  return JavaTextDateFormat_Field_SECOND_;
}

+ (JavaTextDateFormat_Field *)MILLISECOND {
  return JavaTextDateFormat_Field_MILLISECOND_;
}

+ (JavaTextDateFormat_Field *)DAY_OF_WEEK {
  return JavaTextDateFormat_Field_DAY_OF_WEEK_;
}

+ (JavaTextDateFormat_Field *)DAY_OF_MONTH {
  return JavaTextDateFormat_Field_DAY_OF_MONTH_;
}

+ (JavaTextDateFormat_Field *)DAY_OF_YEAR {
  return JavaTextDateFormat_Field_DAY_OF_YEAR_;
}

+ (JavaTextDateFormat_Field *)DAY_OF_WEEK_IN_MONTH {
  return JavaTextDateFormat_Field_DAY_OF_WEEK_IN_MONTH_;
}

+ (JavaTextDateFormat_Field *)WEEK_OF_YEAR {
  return JavaTextDateFormat_Field_WEEK_OF_YEAR_;
}

+ (JavaTextDateFormat_Field *)WEEK_OF_MONTH {
  return JavaTextDateFormat_Field_WEEK_OF_MONTH_;
}

+ (JavaTextDateFormat_Field *)AM_PM {
  return JavaTextDateFormat_Field_AM_PM_;
}

+ (JavaTextDateFormat_Field *)HOUR0 {
  return JavaTextDateFormat_Field_HOUR0_;
}

+ (JavaTextDateFormat_Field *)HOUR1 {
  return JavaTextDateFormat_Field_HOUR1_;
}

+ (JavaTextDateFormat_Field *)TIME_ZONE {
  return JavaTextDateFormat_Field_TIME_ZONE_;
}

- (id)initWithNSString:(NSString *)fieldName
               withInt:(int)calendarField {
  if (self = [super initWithNSString:fieldName]) {
    calendarField_ = -1;
    self->calendarField_ = calendarField;
    if ((calendarField != -1) && ([((JavaUtilHashtable *) nil_chk(JavaTextDateFormat_Field_table_)) getWithId:[JavaLangInteger valueOfWithInt:calendarField]] == nil)) {
      (void) [JavaTextDateFormat_Field_table_ putWithId:[JavaLangInteger valueOfWithInt:calendarField] withId:self];
    }
  }
  return self;
}

- (int)getCalendarField {
  return calendarField_;
}

+ (JavaTextDateFormat_Field *)ofCalendarFieldWithInt:(int)calendarField {
  if ((calendarField < 0) || (calendarField >= JavaUtilCalendar_FIELD_COUNT)) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Field out of range: %d", calendarField]];
  }
  return [((JavaUtilHashtable *) nil_chk(JavaTextDateFormat_Field_table_)) getWithId:[JavaLangInteger valueOfWithInt:calendarField]];
}

+ (void)initialize {
  if (self == [JavaTextDateFormat_Field class]) {
    JavaTextDateFormat_Field_table_ = [[JavaUtilHashtable alloc] init];
    JavaTextDateFormat_Field_ERA_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"era" withInt:JavaUtilCalendar_ERA];
    JavaTextDateFormat_Field_YEAR_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"year" withInt:JavaUtilCalendar_YEAR];
    JavaTextDateFormat_Field_MONTH_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"month" withInt:JavaUtilCalendar_MONTH];
    JavaTextDateFormat_Field_HOUR_OF_DAY0_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"hour of day" withInt:JavaUtilCalendar_HOUR_OF_DAY];
    JavaTextDateFormat_Field_HOUR_OF_DAY1_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"hour of day 1" withInt:-1];
    JavaTextDateFormat_Field_MINUTE_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"minute" withInt:JavaUtilCalendar_MINUTE];
    JavaTextDateFormat_Field_SECOND_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"second" withInt:JavaUtilCalendar_SECOND];
    JavaTextDateFormat_Field_MILLISECOND_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"millisecond" withInt:JavaUtilCalendar_MILLISECOND];
    JavaTextDateFormat_Field_DAY_OF_WEEK_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"day of week" withInt:JavaUtilCalendar_DAY_OF_WEEK];
    JavaTextDateFormat_Field_DAY_OF_MONTH_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"day of month" withInt:JavaUtilCalendar_DAY_OF_MONTH];
    JavaTextDateFormat_Field_DAY_OF_YEAR_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"day of year" withInt:JavaUtilCalendar_DAY_OF_YEAR];
    JavaTextDateFormat_Field_DAY_OF_WEEK_IN_MONTH_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"day of week in month" withInt:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH];
    JavaTextDateFormat_Field_WEEK_OF_YEAR_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"week of year" withInt:JavaUtilCalendar_WEEK_OF_YEAR];
    JavaTextDateFormat_Field_WEEK_OF_MONTH_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"week of month" withInt:JavaUtilCalendar_WEEK_OF_MONTH];
    JavaTextDateFormat_Field_AM_PM_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"am pm" withInt:JavaUtilCalendar_AM_PM];
    JavaTextDateFormat_Field_HOUR0_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"hour" withInt:JavaUtilCalendar_HOUR];
    JavaTextDateFormat_Field_HOUR1_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"hour 1" withInt:-1];
    JavaTextDateFormat_Field_TIME_ZONE_ = [[JavaTextDateFormat_Field alloc] initWithNSString:@"time zone" withInt:-1];
  }
}

- (void)copyAllFieldsTo:(JavaTextDateFormat_Field *)other {
  [super copyAllFieldsTo:other];
  other->calendarField_ = calendarField_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", NULL, NULL, 0x4, NULL },
    { "ofCalendarFieldWithInt:", NULL, "LJavaTextDateFormat_Field", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "table_", NULL, 0xa, "LJavaUtilHashtable" },
    { "ERA_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "YEAR_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "MONTH_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "HOUR_OF_DAY0_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "HOUR_OF_DAY1_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "MINUTE_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "SECOND_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "MILLISECOND_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "DAY_OF_WEEK_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "DAY_OF_MONTH_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "DAY_OF_YEAR_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "DAY_OF_WEEK_IN_MONTH_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "WEEK_OF_YEAR_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "WEEK_OF_MONTH_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "AM_PM_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "HOUR0_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "HOUR1_", NULL, 0x19, "LJavaTextDateFormat_Field" },
    { "TIME_ZONE_", NULL, 0x19, "LJavaTextDateFormat_Field" },
  };
  static J2ObjcClassInfo _JavaTextDateFormat_Field = { "Field", "java.text", "DateFormat", 0x9, 2, methods, 19, fields, 0, NULL};
  return &_JavaTextDateFormat_Field;
}

@end
