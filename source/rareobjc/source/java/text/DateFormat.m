//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/Projects/porting/src/java/text/DateFormat.java
//
//  Created by decoteaud on 2/17/14.
//

#include "IOSClass.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#import "AppleHelper.h"
#import "APView+Component.h"

@implementation JavaTextDateFormat

+ (int)AM_PM_FIELD {
  return JavaTextDateFormat_AM_PM_FIELD;
}

+ (int)DATE_FIELD {
  return JavaTextDateFormat_DATE_FIELD;
}

+ (int)DAY_OF_WEEK_FIELD {
  return JavaTextDateFormat_DAY_OF_WEEK_FIELD;
}

+ (int)DAY_OF_WEEK_IN_MONTH_FIELD {
  return JavaTextDateFormat_DAY_OF_WEEK_IN_MONTH_FIELD;
}

+ (int)DAY_OF_YEAR_FIELD {
  return JavaTextDateFormat_DAY_OF_YEAR_FIELD;
}

+ (int)DEFAULT {
  return JavaTextDateFormat_DEFAULT;
}

+ (int)ERA_FIELD {
  return JavaTextDateFormat_ERA_FIELD;
}

+ (int)FULL {
  return JavaTextDateFormat_FULL;
}

+ (int)HOUR0_FIELD {
  return JavaTextDateFormat_HOUR0_FIELD;
}

+ (int)HOUR1_FIELD {
  return JavaTextDateFormat_HOUR1_FIELD;
}

+ (int)HOUR_OF_DAY0_FIELD {
  return JavaTextDateFormat_HOUR_OF_DAY0_FIELD;
}

+ (int)HOUR_OF_DAY1_FIELD {
  return JavaTextDateFormat_HOUR_OF_DAY1_FIELD;
}

+ (int)LONG {
  return JavaTextDateFormat_LONG;
}

+ (int)MEDIUM {
  return JavaTextDateFormat_MEDIUM;
}

+ (int)MILLISECOND_FIELD {
  return JavaTextDateFormat_MILLISECOND_FIELD;
}

+ (int)MINUTE_FIELD {
  return JavaTextDateFormat_MINUTE_FIELD;
}

+ (int)MONTH_FIELD {
  return JavaTextDateFormat_MONTH_FIELD;
}

+ (int)SECOND_FIELD {
  return JavaTextDateFormat_SECOND_FIELD;
}

+ (int)SHORT {
  return JavaTextDateFormat_SHORT;
}

+ (int)TIMEZONE_FIELD {
  return JavaTextDateFormat_TIMEZONE_FIELD;
}

+ (int)WEEK_OF_MONTH_FIELD {
  return JavaTextDateFormat_WEEK_OF_MONTH_FIELD;
}

+ (int)WEEK_OF_YEAR_FIELD {
  return JavaTextDateFormat_WEEK_OF_YEAR_FIELD;
}

+ (int)YEAR_FIELD {
  return JavaTextDateFormat_YEAR_FIELD;
}

- (id)init {
  return [super init];
}

- (id)clone {
  return [super clone];
}

- (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date {
  NSDate* ndate=[NSDate fromJavaDate:date];
  return [((NSDateFormatter*)proxy_) stringFromDate: ndate];
}

- (NSString *)formatWithId:(id)object {
  if (!([object isKindOfClass:[JavaUtilDate class]])) {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported yet."];
  }
  return [self formatWithJavaUtilDate:(JavaUtilDate *) check_class_cast(object, [JavaUtilDate class])];
}

- (JavaUtilDate *)parseWithNSString:(NSString *)source {
  JavaTextParsePosition *p = [[JavaTextParsePosition alloc] initWithInt:0];
  JavaUtilDate *date = [self parseWithNSString:source withJavaTextParsePosition:p];
  if ([p getIndex] == 0) {
    int ei=[p getErrorIndex];
    p=nil;
    @throw [[JavaTextParseException alloc] initWithNSString:[NSString stringWithFormat:@"Unparseable date: \"%@\"", source] withInt:ei];
  }
  return date;
}

- (id)parseObjectWithNSString:(NSString *)string {
  return [self parseWithNSString:string];
}

- (id)parseObjectWithNSString:(NSString *)source
    withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  return [self parseWithNSString:source withJavaTextParsePosition:pos];
}

- (JavaUtilDate *)parseWithNSString:(NSString *)source
          withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setLenientWithBoolean:(BOOL)value {
  [((NSDateFormatter*)proxy_) setLenient: value];
}

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  if(timezone_!=tz) {
    timezone_=tz;
    [((NSDateFormatter*)proxy_) setTimeZone:((NSTimeZone*)tz->nativeTimeZone_)];
  }
}

+ (NSString *)getDateFormatWithInt:(int)dateStyle
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaTextDateFormat getDefaultPatternWithNSString:dateStyle == JavaTextDateFormat_SHORT ? @"yMd" : @"yMMMMdd" withJavaUtilLocale:locale];
}

+ (JavaTextDateFormat *)getDateInstance {
  return [JavaTextDateFormat getDateInstanceWithInt:JavaTextDateFormat_DEFAULT];
}

+ (JavaTextDateFormat *)getDateInstanceWithInt:(int)style {
  [JavaTextDateFormat checkDateStyleWithInt:style];
  return [JavaTextDateFormat getDateInstanceWithInt:style withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDateFormat *)getDateInstanceWithInt:(int)style
                            withJavaUtilLocale:(JavaUtilLocale *)locale {
  [JavaTextDateFormat checkDateStyleWithInt:style];
  return [[JavaTextSimpleDateFormat alloc] initWithNSString:[JavaTextDateFormat getDateFormatWithInt:style withJavaUtilLocale:locale] withJavaUtilLocale:locale];
}

+ (JavaTextDateFormat *)getDateTimeInstance {
  return [JavaTextDateFormat getDateTimeInstanceWithInt:JavaTextDateFormat_DEFAULT withInt:JavaTextDateFormat_DEFAULT];
}

+ (JavaTextDateFormat *)getDateTimeInstanceWithInt:(int)dateStyle
                                           withInt:(int)timeStyle {
  [JavaTextDateFormat checkTimeStyleWithInt:timeStyle];
  [JavaTextDateFormat checkDateStyleWithInt:dateStyle];
  return [JavaTextDateFormat getDateTimeInstanceWithInt:dateStyle withInt:timeStyle withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDateFormat *)getDateTimeInstanceWithInt:(int)dateStyle
                                           withInt:(int)timeStyle
                                withJavaUtilLocale:(JavaUtilLocale *)locale {
  [JavaTextDateFormat checkTimeStyleWithInt:timeStyle];
  [JavaTextDateFormat checkDateStyleWithInt:dateStyle];
  NSString *pattern = [NSString stringWithFormat:@"%@ %@", [JavaTextDateFormat getDateFormatWithInt:dateStyle withJavaUtilLocale:locale], [JavaTextDateFormat getTimeFormatWithInt:timeStyle withJavaUtilLocale:locale]];
  return [[JavaTextSimpleDateFormat alloc] initWithNSString:pattern withJavaUtilLocale:locale];
}

+ (JavaTextDateFormat *)getInstance {
  return [JavaTextDateFormat getDateTimeInstanceWithInt:JavaTextDateFormat_SHORT withInt:JavaTextDateFormat_SHORT];
}

+ (NSString *)getTimeFormatWithInt:(int)timeStyle
                withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [JavaTextDateFormat getDefaultPatternWithNSString:timeStyle == JavaTextDateFormat_SHORT ? @"hmma" : @"hmmssa" withJavaUtilLocale:locale];
}

+ (JavaTextDateFormat *)getTimeInstance {
  return [JavaTextDateFormat getTimeInstanceWithInt:JavaTextDateFormat_DEFAULT];
}

+ (JavaTextDateFormat *)getTimeInstanceWithInt:(int)style {
  [JavaTextDateFormat checkTimeStyleWithInt:style];
  return [JavaTextDateFormat getTimeInstanceWithInt:style withJavaUtilLocale:[JavaUtilLocale getDefault]];
}

+ (JavaTextDateFormat *)getTimeInstanceWithInt:(int)style
                            withJavaUtilLocale:(JavaUtilLocale *)locale {
  [JavaTextDateFormat checkTimeStyleWithInt:style];
  return [[JavaTextSimpleDateFormat alloc] initWithNSString:[JavaTextDateFormat getTimeFormatWithInt:style withJavaUtilLocale:locale] withJavaUtilLocale:locale];
}

- (JavaUtilTimeZone *)getTimeZone {
  if(timezone_==nil) {
    timezone_=[[JavaUtilTimeZone alloc] initWithId: [((NSDateFormatter*)proxy_) timeZone]];
  }
  return timezone_;
}

- (BOOL)isLenient {
  return [((NSDateFormatter*)proxy_) isLenient];
}

+ (void)checkDateStyleWithInt:(int)style {
  if (!((style == JavaTextDateFormat_SHORT) || (style == JavaTextDateFormat_MEDIUM) || (style == JavaTextDateFormat_LONG) || (style == JavaTextDateFormat_FULL) || (style == JavaTextDateFormat_DEFAULT))) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal date style %d", style]];
  }
}

+ (void)checkTimeStyleWithInt:(int)style {
  if (!((style == JavaTextDateFormat_SHORT) || (style == JavaTextDateFormat_MEDIUM) || (style == JavaTextDateFormat_LONG) || (style == JavaTextDateFormat_FULL) || (style == JavaTextDateFormat_DEFAULT))) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal time style %d", style]];
  }
}

+ (NSString *)getDefaultPatternWithNSString:(NSString *)components
                         withJavaUtilLocale:(JavaUtilLocale *)locale {
  NSLocale* l=[AppleHelper toNSLocale:locale];
  return [NSDateFormatter dateFormatFromTemplate:components options:0 locale:l];
}

- (void)copyAllFieldsTo:(JavaTextDateFormat *)other {
  [super copyAllFieldsTo:other];
  other->proxy_ = proxy_;
  other->timezone_ = timezone_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x4, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "formatWithJavaUtilDate:", NULL, "LNSString", 0x111, NULL },
    { "formatWithId:", NULL, "LNSString", 0x1, NULL },
    { "parseWithNSString:", NULL, "LJavaUtilDate", 0x1, "JavaTextParseException" },
    { "parseObjectWithNSString:", NULL, "LNSObject", 0x1, "JavaTextParseException" },
    { "parseObjectWithNSString:withJavaTextParsePosition:", NULL, "LNSObject", 0x1, NULL },
    { "parseWithNSString:withJavaTextParsePosition:", NULL, "LJavaUtilDate", 0x401, NULL },
    { "setLenientWithBoolean:", NULL, "V", 0x101, NULL },
    { "setTimeZoneWithJavaUtilTimeZone:", NULL, "V", 0x101, NULL },
    { "getDateFormatWithInt:withJavaUtilLocale:", NULL, "LNSString", 0x9, NULL },
    { "getDateInstance", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getDateInstanceWithInt:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getDateInstanceWithInt:withJavaUtilLocale:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getDateTimeInstance", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getDateTimeInstanceWithInt:withInt:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getDateTimeInstanceWithInt:withInt:withJavaUtilLocale:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getInstance", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getTimeFormatWithInt:withJavaUtilLocale:", NULL, "LNSString", 0x9, NULL },
    { "getTimeInstance", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getTimeInstanceWithInt:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getTimeInstanceWithInt:withJavaUtilLocale:", NULL, "LJavaTextDateFormat", 0x9, NULL },
    { "getTimeZone", NULL, "LJavaUtilTimeZone", 0x101, NULL },
    { "isLenient", NULL, "Z", 0x101, NULL },
    { "checkDateStyleWithInt:", NULL, "V", 0xa, NULL },
    { "checkTimeStyleWithInt:", NULL, "V", 0xa, NULL },
    { "getDefaultPatternWithNSString:withJavaUtilLocale:", NULL, "LNSString", 0x10a, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "AM_PM_FIELD_", NULL, 0x19, "I" },
    { "DATE_FIELD_", NULL, 0x19, "I" },
    { "DAY_OF_WEEK_FIELD_", NULL, 0x19, "I" },
    { "DAY_OF_WEEK_IN_MONTH_FIELD_", NULL, 0x19, "I" },
    { "DAY_OF_YEAR_FIELD_", NULL, 0x19, "I" },
    { "DEFAULT_", NULL, 0x19, "I" },
    { "ERA_FIELD_", NULL, 0x19, "I" },
    { "FULL_", NULL, 0x19, "I" },
    { "HOUR0_FIELD_", NULL, 0x19, "I" },
    { "HOUR1_FIELD_", NULL, 0x19, "I" },
    { "HOUR_OF_DAY0_FIELD_", NULL, 0x19, "I" },
    { "HOUR_OF_DAY1_FIELD_", NULL, 0x19, "I" },
    { "LONG_", NULL, 0x19, "I" },
    { "MEDIUM_", NULL, 0x19, "I" },
    { "MILLISECOND_FIELD_", NULL, 0x19, "I" },
    { "MINUTE_FIELD_", NULL, 0x19, "I" },
    { "MONTH_FIELD_", NULL, 0x19, "I" },
    { "SECOND_FIELD_", NULL, 0x19, "I" },
    { "SHORT_", NULL, 0x19, "I" },
    { "TIMEZONE_FIELD_", NULL, 0x19, "I" },
    { "WEEK_OF_MONTH_FIELD_", NULL, 0x19, "I" },
    { "WEEK_OF_YEAR_FIELD_", NULL, 0x19, "I" },
    { "YEAR_FIELD_", NULL, 0x19, "I" },
    { "timezone_", NULL, 0x0, "LJavaUtilTimeZone" },
    { "proxy_", NULL, 0x4, "LNSObject" },
  };
  static J2ObjcClassInfo _JavaTextDateFormat = { "DateFormat", "java.text", NULL, 0x401, 27, methods, 25, fields, 0, NULL};
  return &_JavaTextDateFormat;
}

@end
