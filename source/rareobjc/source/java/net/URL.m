//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: java/net/URL.java
//
//  Created by decoteaud on 1/20/16.
//

#include "IOSClass.h"
#include "com/appnativa/rare/net/iStreamHandler.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Error.h"
#include "java/lang/StringBuilder.h"
#include "java/net/FileURLConnection.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/net/URLStreamHandler.h"
#include "java/net/URLStreamHandlerFactory.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@implementation JavaNetURL

static id JavaNetURL_streamHandlerLock_;
static id<JavaNetURLStreamHandlerFactory> JavaNetURL_factory_;
static JavaUtilConcurrentConcurrentHashMap * JavaNetURL_handlers_;

+ (id)streamHandlerLock {
  return JavaNetURL_streamHandlerLock_;
}

+ (id<JavaNetURLStreamHandlerFactory>)factory {
  return JavaNetURL_factory_;
}

+ (void)setFactory:(id<JavaNetURLStreamHandlerFactory>)factory {
  JavaNetURL_factory_ = factory;
}

+ (JavaUtilConcurrentConcurrentHashMap *)handlers {
  return JavaNetURL_handlers_;
}

+ (void)setHandlers:(JavaUtilConcurrentConcurrentHashMap *)handlers {
  JavaNetURL_handlers_ = handlers;
}

- (id)initWithId:(id)nsurl {
  if (self = [super init]) {
    proxy_ = nsurl;
    [self resolveStreamHandler];
  }
  return self;
}

- (id)initWithNSString:(NSString *)str {
  if (self = [super init]) {
    [self initialize__WithNSString:str];
    [self resolveStreamHandler];
  }
  return self;
}

- (id)initWithJavaNetURL:(JavaNetURL *)baseURL
            withNSString:(NSString *)relativeStr {
  if (self = [super init]) {
    [self initialize__WithJavaNetURL:baseURL withNSString:relativeStr];
    [self resolveStreamHandler];
  }
  return self;
}

- (id)initWithNSString:(NSString *)protocol
          withNSString:(NSString *)host
               withInt:(int)port
          withNSString:(NSString *)file {
  return [self initJavaNetURLWithNSString:protocol withNSString:host withInt:port withNSString:file withJavaNetURLStreamHandler:nil];
}

- (id)initWithNSString:(NSString *)protocol
          withNSString:(NSString *)host
          withNSString:(NSString *)file {
  return [self initJavaNetURLWithNSString:protocol withNSString:host withInt:0 withNSString:file withJavaNetURLStreamHandler:nil];
}

- (id)initJavaNetURLWithNSString:(NSString *)protocol
                    withNSString:(NSString *)host
                         withInt:(int)port
                    withNSString:(NSString *)file
     withJavaNetURLStreamHandler:(JavaNetURLStreamHandler *)sh {
  if (self = [super init]) {
    if ((sh == nil) && (JavaNetURL_factory_ != nil)) {
      sh = [JavaNetURL getURLStreamHandlerWithNSString:protocol];
    }
    if ([sh conformsToProtocol: @protocol(RAREiStreamHandler)]) {
      streamHandler_ = (id<RAREiStreamHandler>) check_protocol_cast(sh, @protocol(RAREiStreamHandler));
    }
    if (sh == nil) {
      JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:protocol])) appendWithNSString:@"://"])) appendWithNSString:host];
      if (([((NSString *) nil_chk(protocol)) isEqual:@"http"] && (port == 80)) || ([protocol isEqual:@"https"] && (port == 443))) {
      }
      else if (port > 0) {
        (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@":"])) appendWithInt:port];
      }
      if (![((NSString *) nil_chk(file)) hasPrefix:@"/"]) {
        (void) [sb appendWithNSString:@"/"];
      }
      (void) [sb appendWithNSString:file];
      [self initialize__WithNSString:[sb description]];
    }
  }
  return self;
}

- (id)initWithNSString:(NSString *)protocol
          withNSString:(NSString *)host
               withInt:(int)port
          withNSString:(NSString *)file
withJavaNetURLStreamHandler:(JavaNetURLStreamHandler *)sh {
  return [self initJavaNetURLWithNSString:protocol withNSString:host withInt:port withNSString:file withJavaNetURLStreamHandler:sh];
}

- (JavaNetURLConnection *)openConnection {
  if (streamHandler_ != nil) {
    return [streamHandler_ openConnectionWithJavaNetURL:self];
  }
  if (urlStreamHandler_ != nil) {
    return [urlStreamHandler_ openConnectionWithJavaNetURL:self];
  }
  NSString *protocol = [self getProtocol];
  if ([((NSString *) nil_chk(protocol)) hasPrefix:@"http"]) {
    return [[JavaNetHttpURLConnection alloc] initWithJavaNetURL:self];
  }
  if ([protocol hasPrefix:@"file"]) {
    return [[JavaNetFileURLConnection alloc] initWithJavaNetURL:self];
  }
  @throw [[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported protocol:%@", protocol]];
}

- (int)getDefaultPort {
  NSString *protocol = [self getProtocol];
  if ([((NSString *) nil_chk(protocol)) isEqual:@"http"]) {
    return 80;
  }
  if ([protocol isEqual:@"https"]) {
    return 443;
  }
  if ([protocol isEqual:@"ftp"]) {
    return 21;
  }
  return -1;
}

- (JavaIoInputStream *)openStream {
  return [((JavaNetURLConnection *) nil_chk([self openConnection])) getInputStream];
}

- (BOOL)sameFileWithJavaNetURL:(JavaNetURL *)other {
  if (self == other) {
    return YES;
  }
  if (streamHandler_ != nil) {
    if (((JavaNetURL *) nil_chk(other))->streamHandler_ == nil) {
      return NO;
    }
    if ([streamHandler_ getClass] != [other->streamHandler_ getClass]) {
      return NO;
    }
    return [streamHandler_ sameFileWithJavaNetURL:self withJavaNetURL:other];
  }
  return [self sameFileExWithJavaNetURL:other];
}

- (BOOL)sameFileExWithJavaNetURL:(JavaNetURL *)other {
  return [((NSURL*)proxy_) isEqual:other];
}

- (NSString *)toExternalForm {
  if (streamHandler_ != nil) {
    return [streamHandler_ toExternalFormWithJavaNetURL:self];
  }
  return [self toExternalFormEx];
}

- (NSString *)toExternalFormEx {
  return [((NSURL*)proxy_) absoluteString];
}

- (NSString *)description {
  if (streamHandler_ != nil) {
    return [streamHandler_ toStringWithJavaNetURL:self];
  }
  return [self toExternalFormEx];
}

- (NSString *)getAuthority {
  return [((NSURL*)proxy_) host];
}

- (id)getContent {
  return nil;
}

- (NSString *)getFile {
  if (streamHandler_ != nil) {
    return [streamHandler_ getFileWithJavaNetURL:self];
  }
  return [self getFileEx];
}

- (NSString *)getFileEx {
  NSString* s= [((NSURL*)proxy_) path];
  if(s==nil) {
    return @"";
  }
  NSString* q= [((NSURL*)proxy_) query];
  if(q==nil) {
    return s;
  }
  return [NSString stringWithFormat:@"%@/%@/%@", s, @"?", q];
}

- (NSString *)getHost {
  if (streamHandler_ != nil) {
    return [streamHandler_ getHostWithJavaNetURL:self];
  }
  return [self getHosEx];
}

- (NSString *)getHosEx {
  return [((NSURL*)proxy_) host];
}

- (NSString *)getPath {
  if (streamHandler_ != nil) {
    return [streamHandler_ getPathWithJavaNetURL:self];
  }
  return [self getPathEx];
}

- (NSString *)getPathEx {
  NSString* s= [((NSURL*)proxy_) path];
  return s==nil ? @"" : s;
}

- (id)getNSURL {
  return proxy_;
}

- (int)getPort {
  if(proxy_==nil) {
    return 0;
  }
  NSNumber* port=[((NSURL*)proxy_) port];
  return port==nil ? 0 : [port intValue];
}

- (NSString *)getProtocol {
  if (streamHandler_ != nil) {
    return [streamHandler_ getProtocolWithJavaNetURL:self];
  }
  return [self getProtocolEx];
}

- (NSString *)getProtocolEx {
  return [((NSURL*)proxy_) scheme];
}

- (NSString *)getQuery {
  if (streamHandler_ != nil) {
    return [streamHandler_ getQueryWithJavaNetURL:self];
  }
  return [self getQueryEx];
}

- (NSString *)getQueryEx {
  NSString* s= [((NSURL*)proxy_) query];
  return s==nil ? @"" : s;
}

- (NSString *)getRef {
  if (streamHandler_ != nil) {
    return [streamHandler_ getRefWithJavaNetURL:self];
  }
  return [self getRefEx];
}

+ (void)setURLStreamHandlerFactoryWithJavaNetURLStreamHandlerFactory:(id<JavaNetURLStreamHandlerFactory>)fac {
  @synchronized (JavaNetURL_streamHandlerLock_) {
    if (JavaNetURL_factory_ != nil) {
      @throw [[JavaLangError alloc] initWithNSString:@"factory already defined"];
    }
    JavaNetURL_handlers_ = [[JavaUtilConcurrentConcurrentHashMap alloc] initWithInt:2];
    JavaNetURL_factory_ = fac;
  }
}

+ (JavaNetURLStreamHandler *)getURLStreamHandlerWithNSString:(NSString *)protocol {
  JavaNetURLStreamHandler *handler = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(JavaNetURL_handlers_)) getWithId:protocol];
  if (handler == nil) {
    if (JavaNetURL_factory_ != nil) {
      handler = [JavaNetURL_factory_ createURLStreamHandlerWithNSString:protocol];
    }
  }
  return handler;
}

- (void)resolveStreamHandler {
  if (JavaNetURL_factory_ != nil) {
    JavaNetURLStreamHandler *sh = [JavaNetURL getURLStreamHandlerWithNSString:[self getProtocolEx]];
    if ([sh conformsToProtocol: @protocol(RAREiStreamHandler)]) {
      streamHandler_ = (id<RAREiStreamHandler>) check_protocol_cast(sh, @protocol(RAREiStreamHandler));
    }
    else {
      urlStreamHandler_ = sh;
    }
  }
}

- (NSString *)getRefEx {
  NSString* s= [((NSURL*)proxy_) fragment];
  return s==nil ? @"" : s;
}

- (NSString *)getUserInfo {
  if(proxy_==nil) {
    return nil;
  }
  NSString* s= [((NSURL*)proxy_) user];
  if(s==nil) {
    return nil;
  }
  NSString* p= [((NSURL*)proxy_) password];
  if(p==nil) {
    return s;
  }
  return [NSString stringWithFormat:@"%@/%@/%@", s, @":", p];
}

- (void)initialize__WithNSString:(NSString *)str {
  proxy_ = [NSURL URLWithString:str];
}

- (BOOL)isSimulator {
#if TARGET_IPHONE_SIMULATOR
  return NO;
#else
  return NO;
#endif
}

- (void)initialize__WithJavaNetURL:(JavaNetURL *)url
                      withNSString:(NSString *)str {
#if !TARGET_IPHONE_SIMULATOR
  if([@"file" isEqualToString:[url getProtocol]]) {
    if([str indexOfString:@"/var/"]==0) {
      str=[NSString stringWithFormat:@"file://localhost%@",str];
      proxy_ = [NSURL URLWithString:str];
      return;
    }
  }
#endif
  proxy_ = [NSURL URLWithString:str relativeToURL:url->proxy_];
}

+ (void)initialize {
  if (self == [JavaNetURL class]) {
    JavaNetURL_streamHandlerLock_ = [[NSObject alloc] init];
  }
}

- (void)copyAllFieldsTo:(JavaNetURL *)other {
  [super copyAllFieldsTo:other];
  other->proxy_ = proxy_;
  other->streamHandler_ = streamHandler_;
  other->urlStreamHandler_ = urlStreamHandler_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", NULL, NULL, 0x1, "JavaNetMalformedURLException" },
    { "initWithNSString:withNSString:withInt:withNSString:", NULL, NULL, 0x1, "JavaNetMalformedURLException" },
    { "initWithNSString:withNSString:withNSString:", NULL, NULL, 0x1, "JavaNetMalformedURLException" },
    { "initWithNSString:withNSString:withInt:withNSString:withJavaNetURLStreamHandler:", NULL, NULL, 0x1, "JavaNetMalformedURLException" },
    { "openConnection", NULL, "LJavaNetURLConnection", 0x1, "JavaIoIOException" },
    { "openStream", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "sameFileWithJavaNetURL:", NULL, "Z", 0x1, NULL },
    { "sameFileExWithJavaNetURL:", NULL, "Z", 0x101, NULL },
    { "toExternalForm", NULL, "LNSString", 0x1, NULL },
    { "toExternalFormEx", NULL, "LNSString", 0x101, NULL },
    { "getAuthority", NULL, "LNSString", 0x101, NULL },
    { "getContent", NULL, "LNSObject", 0x101, "JavaIoIOException" },
    { "getFile", NULL, "LNSString", 0x1, NULL },
    { "getFileEx", NULL, "LNSString", 0x101, NULL },
    { "getHost", NULL, "LNSString", 0x1, NULL },
    { "getHosEx", NULL, "LNSString", 0x101, NULL },
    { "getPath", NULL, "LNSString", 0x1, NULL },
    { "getPathEx", NULL, "LNSString", 0x101, NULL },
    { "getNSURL", NULL, "LNSObject", 0x1, NULL },
    { "getPort", NULL, "I", 0x101, NULL },
    { "getProtocol", NULL, "LNSString", 0x1, NULL },
    { "getProtocolEx", NULL, "LNSString", 0x101, NULL },
    { "getQuery", NULL, "LNSString", 0x1, NULL },
    { "getQueryEx", NULL, "LNSString", 0x101, NULL },
    { "getRef", NULL, "LNSString", 0x1, NULL },
    { "getURLStreamHandlerWithNSString:", NULL, "LJavaNetURLStreamHandler", 0x8, NULL },
    { "resolveStreamHandler", NULL, "V", 0x2, NULL },
    { "getRefEx", NULL, "LNSString", 0x101, NULL },
    { "getUserInfo", NULL, "LNSString", 0x101, NULL },
    { "initialize__WithNSString:", NULL, "V", 0x102, NULL },
    { "isSimulator", NULL, "Z", 0x101, NULL },
    { "initialize__WithJavaNetURL:withNSString:", NULL, "V", 0x102, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "streamHandlerLock_", NULL, 0x1a, "LNSObject" },
    { "factory_", NULL, 0xa, "LJavaNetURLStreamHandlerFactory" },
    { "handlers_", NULL, 0xa, "LJavaUtilConcurrentConcurrentHashMap" },
    { "proxy_", NULL, 0x0, "LNSObject" },
    { "streamHandler_", NULL, 0x0, "LRAREiStreamHandler" },
    { "urlStreamHandler_", NULL, 0x0, "LJavaNetURLStreamHandler" },
  };
  static J2ObjcClassInfo _JavaNetURL = { "URL", "java.net", NULL, 0x1, 32, methods, 6, fields, 0, NULL};
  return &_JavaNetURL;
}

@end
