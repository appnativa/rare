//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/Projects/porting/src/java/net/FileURLConnection.java
//
//  Created by decoteaud on 4/16/14.
//

#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/net/ContentHandler.h"
#include "java/net/DefaultContentHandler.h"
#include "java/net/DefaultFileNameMap.h"
#include "java/net/FileURLConnection.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#import "AppleHelper.h"
#import "com/appnativa/rare/net/NSInputStreamInputStream.h"
#import "java/io/IOException.h"
#import <com/appnativa/rare/util/MIMEMap.h>

@implementation JavaNetFileURLConnection

- (id)initWithJavaNetURL:(JavaNetURL *)url {
  if (self = [super initWithJavaNetURL:url]) {
    contentType_ = [JavaNetDefaultFileNameMap DEFAULT_MIME_TYPE];
    lastModified_FileURLConnection_ = 0;
  }
  return self;
}

- (void)connect {
  if (connected_) {
    return;
  }
  [self connectEx];
  connected_ = YES;
}

- (void)disconnect {
  if (connected_) {
    @try {
      if (inputStream_ != nil) {
        [inputStream_ close];
      }
    }
    @catch (JavaLangException *ignore) {
    }
    inputStream_ = nil;
    connected_ = NO;
  }
}

- (NSString *)getContentEncoding {
  return contentEncoding_;
}

- (int)getContentLength {
  return (int) contentLength_;
}

- (NSString *)getContentType {
  return contentType_;
}

- (NSString *)getHeaderFieldWithNSString:(NSString *)key {
  if (key == nil) {
    return @"";
  }
  if ([((NSString *) nil_chk(key)) equalsIgnoreCase:@"Content-type"]) {
    return [self getContentType];
  }
  if ([key equalsIgnoreCase:@"Content-Length"]) {
    return [NSString valueOfInt:[self getContentLength]];
  }
  if ([key equalsIgnoreCase:@"Content-Encoding"]) {
    return [NSString valueOf:[self getContentEncoding]];
  }
  return [super getHeaderFieldWithNSString:key];
}

- (JavaIoInputStream *)getInputStream {
  if(inputStream_==nil) {
    NSString* file=[[self getURL] getFile];
    NSInputStream *stream=[NSInputStream inputStreamWithFileAtPath:file];
    if(stream==nil) {
      @throw [[JavaIoIOException alloc] initWithNSString:@"file not found"];
    }
    [stream open];
    inputStream_=[[RARENSInputStreamInputStream alloc] initWithId: stream];
  }
  return inputStream_;
}

- (long long int)getLastModified {
  return lastModified_FileURLConnection_;
}

- (JavaNetContentHandler *)getContentHandlerWithNSString:(NSString *)contentType {
  if ([JavaNetURLConnection defaultContentHandler] == nil) {
    (void) [JavaNetURLConnection setDefaultContentHandler:[[JavaNetDefaultContentHandler alloc] init]];
    textContentHandler_ = [[JavaNetFileURLConnection_TextContentHandler alloc] init];
  }
  JavaNetContentHandler *ch = [super getContentHandlerWithNSString:contentType];
  if ((ch == [JavaNetURLConnection defaultContentHandler]) && [((NSString *) nil_chk(contentType)) hasPrefix:@"text/"]) {
    if (textContentHandler_ == nil) {
      textContentHandler_ = [[JavaNetFileURLConnection_TextContentHandler alloc] init];
    }
    return textContentHandler_;
  }
  return ch;
}

- (void)connectEx {
  NSURL* url=(NSURL*)([self getURL]->proxy_);
  NSString* value;
  NSDate* date;
  NSNumber* num;
  if([url getResourceValue:&value forKey:NSURLNameKey error:nil]) {
    contentType_=value;
    contentType_=[RAREMIMEMap typeFromFileWithNSString: value];
  }
  if([url getResourceValue:&num forKey:NSURLFileSizeKey error:nil]) {
    contentLength_=[num longLongValue];
  }
  if([url getResourceValue:&date forKey:NSURLContentModificationDateKey error:nil]) {
    lastModified_=[date timeIntervalSince1970]*1000;
  }
  contentEncoding_=(NSString*)CFStringConvertEncodingToIANACharSetName(CFStringConvertNSStringEncodingToEncoding([NSString defaultCStringEncoding]));
}

- (void)copyAllFieldsTo:(JavaNetFileURLConnection *)other {
  [super copyAllFieldsTo:other];
  other->contentEncoding_ = contentEncoding_;
  other->contentLength_ = contentLength_;
  other->contentType_ = contentType_;
  other->inputStream_ = inputStream_;
  other->lastModified_FileURLConnection_ = lastModified_FileURLConnection_;
  other->textContentHandler_ = textContentHandler_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "connect", NULL, "V", 0x1, "JavaIoIOException" },
    { "getContentEncoding", NULL, "LNSString", 0x1, NULL },
    { "getContentType", NULL, "LNSString", 0x1, NULL },
    { "getHeaderFieldWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getInputStream", NULL, "LJavaIoInputStream", 0x101, "JavaIoIOException" },
    { "getContentHandlerWithNSString:", NULL, "LJavaNetContentHandler", 0x4, NULL },
    { "connectEx", NULL, "V", 0x102, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "contentType_", NULL, 0x0, "LNSString" },
    { "lastModified_FileURLConnection_", "lastModified", 0x0, "J" },
    { "contentEncoding_", NULL, 0x0, "LNSString" },
    { "contentLength_", NULL, 0x0, "J" },
    { "inputStream_", NULL, 0x0, "LJavaIoInputStream" },
    { "textContentHandler_", NULL, 0x0, "LJavaNetFileURLConnection_TextContentHandler" },
  };
  static J2ObjcClassInfo _JavaNetFileURLConnection = { "FileURLConnection", "java.net", NULL, 0x1, 7, methods, 6, fields, 0, NULL};
  return &_JavaNetFileURLConnection;
}

@end
@implementation JavaNetFileURLConnection_TextContentHandler

- (id)getContentWithJavaNetURLConnection:(JavaNetURLConnection *)u {
  NSStringEncoding enc;
  NSError* error;
  NSString* data=[NSString stringWithContentsOfURL: (NSURL*)[u getURL]->proxy_ usedEncoding:&enc error:&error];
  if(error!=nil) {
    @throw [[JavaIoIOException alloc] initWithNSString:[AppleHelper toErrorString: error]];
  }
  return data;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getContentWithJavaNetURLConnection:", NULL, "LNSObject", 0x101, "JavaIoIOException" },
  };
  static J2ObjcClassInfo _JavaNetFileURLConnection_TextContentHandler = { "TextContentHandler", "java.net", "FileURLConnection", 0x8, 1, methods, 0, NULL, 0, NULL};
  return &_JavaNetFileURLConnection_TextContentHandler;
}

@end
