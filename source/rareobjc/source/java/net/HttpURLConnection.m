//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/Projects/porting/src/java/net/HttpURLConnection.java
//
//  Created by decoteaud on 2/17/14.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/net/NSURLRequestOutputStream.h"
#include "com/appnativa/rare/net/NSDataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/net/ConnectException.h"
#include "java/lang/Exception.h"
#include "java/net/ContentHandler.h"
#include "java/net/DefaultContentHandler.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/ProtocolException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#import "AppleHelper.h"
#import "RAREURLConnectionHandler.h"

@implementation JavaNetHttpURLConnection {
  RAREURLConnectionHandler* connectionHandler_;
}

static JavaNetContentHandler * JavaNetHttpURLConnection_textContentHandler_;
static IOSObjectArray * JavaNetHttpURLConnection_PERMITTED_USER_METHODS_;
static BOOL JavaNetHttpURLConnection_followRedirects_ = YES;

+ (int)HTTP_ACCEPTED {
  return JavaNetHttpURLConnection_HTTP_ACCEPTED;
}

+ (int)HTTP_BAD_GATEWAY {
  return JavaNetHttpURLConnection_HTTP_BAD_GATEWAY;
}

+ (int)HTTP_BAD_METHOD {
  return JavaNetHttpURLConnection_HTTP_BAD_METHOD;
}

+ (int)HTTP_BAD_REQUEST {
  return JavaNetHttpURLConnection_HTTP_BAD_REQUEST;
}

+ (int)HTTP_CLIENT_TIMEOUT {
  return JavaNetHttpURLConnection_HTTP_CLIENT_TIMEOUT;
}

+ (int)HTTP_CONFLICT {
  return JavaNetHttpURLConnection_HTTP_CONFLICT;
}

+ (int)HTTP_CREATED {
  return JavaNetHttpURLConnection_HTTP_CREATED;
}

+ (int)HTTP_ENTITY_TOO_LARGE {
  return JavaNetHttpURLConnection_HTTP_ENTITY_TOO_LARGE;
}

+ (int)HTTP_FORBIDDEN {
  return JavaNetHttpURLConnection_HTTP_FORBIDDEN;
}

+ (int)HTTP_GATEWAY_TIMEOUT {
  return JavaNetHttpURLConnection_HTTP_GATEWAY_TIMEOUT;
}

+ (int)HTTP_GONE {
  return JavaNetHttpURLConnection_HTTP_GONE;
}

+ (int)HTTP_INTERNAL_ERROR {
  return JavaNetHttpURLConnection_HTTP_INTERNAL_ERROR;
}

+ (int)HTTP_LENGTH_REQUIRED {
  return JavaNetHttpURLConnection_HTTP_LENGTH_REQUIRED;
}

+ (int)HTTP_MOVED_PERM {
  return JavaNetHttpURLConnection_HTTP_MOVED_PERM;
}

+ (int)HTTP_MOVED_TEMP {
  return JavaNetHttpURLConnection_HTTP_MOVED_TEMP;
}

+ (int)HTTP_MULT_CHOICE {
  return JavaNetHttpURLConnection_HTTP_MULT_CHOICE;
}

+ (int)HTTP_NOT_ACCEPTABLE {
  return JavaNetHttpURLConnection_HTTP_NOT_ACCEPTABLE;
}

+ (int)HTTP_NOT_AUTHORITATIVE {
  return JavaNetHttpURLConnection_HTTP_NOT_AUTHORITATIVE;
}

+ (int)HTTP_NOT_FOUND {
  return JavaNetHttpURLConnection_HTTP_NOT_FOUND;
}

+ (int)HTTP_NOT_IMPLEMENTED {
  return JavaNetHttpURLConnection_HTTP_NOT_IMPLEMENTED;
}

+ (int)HTTP_NOT_MODIFIED {
  return JavaNetHttpURLConnection_HTTP_NOT_MODIFIED;
}

+ (int)HTTP_NO_CONTENT {
  return JavaNetHttpURLConnection_HTTP_NO_CONTENT;
}

+ (int)HTTP_OK {
  return JavaNetHttpURLConnection_HTTP_OK;
}

+ (int)HTTP_PARTIAL {
  return JavaNetHttpURLConnection_HTTP_PARTIAL;
}

+ (int)HTTP_PAYMENT_REQUIRED {
  return JavaNetHttpURLConnection_HTTP_PAYMENT_REQUIRED;
}

+ (int)HTTP_PRECON_FAILED {
  return JavaNetHttpURLConnection_HTTP_PRECON_FAILED;
}

+ (int)HTTP_PROXY_AUTH {
  return JavaNetHttpURLConnection_HTTP_PROXY_AUTH;
}

+ (int)HTTP_REQ_TOO_LONG {
  return JavaNetHttpURLConnection_HTTP_REQ_TOO_LONG;
}

+ (int)HTTP_RESET {
  return JavaNetHttpURLConnection_HTTP_RESET;
}

+ (int)HTTP_SEE_OTHER {
  return JavaNetHttpURLConnection_HTTP_SEE_OTHER;
}

+ (int)HTTP_UNAUTHORIZED {
  return JavaNetHttpURLConnection_HTTP_UNAUTHORIZED;
}

+ (int)HTTP_UNAVAILABLE {
  return JavaNetHttpURLConnection_HTTP_UNAVAILABLE;
}

+ (int)HTTP_UNSUPPORTED_TYPE {
  return JavaNetHttpURLConnection_HTTP_UNSUPPORTED_TYPE;
}

+ (int)HTTP_USE_PROXY {
  return JavaNetHttpURLConnection_HTTP_USE_PROXY;
}

+ (int)HTTP_VERSION {
  return JavaNetHttpURLConnection_HTTP_VERSION;
}

+ (JavaNetContentHandler *)textContentHandler {
  return JavaNetHttpURLConnection_textContentHandler_;
}

+ (void)setTextContentHandler:(JavaNetContentHandler *)textContentHandler {
  JavaNetHttpURLConnection_textContentHandler_ = textContentHandler;
}

+ (IOSObjectArray *)PERMITTED_USER_METHODS {
  return JavaNetHttpURLConnection_PERMITTED_USER_METHODS_;
}

+ (BOOL)followRedirects {
  return JavaNetHttpURLConnection_followRedirects_;
}

+ (BOOL *)followRedirectsRef {
  return &JavaNetHttpURLConnection_followRedirects_;
}

- (id)initWithJavaNetURL:(JavaNetURL *)url {
  if (self = [super initWithJavaNetURL:url]) {
    method_ = @"GET";
    responseCode_ = -1;
    instanceFollowRedirects_ = JavaNetHttpURLConnection_followRedirects_;
  }
  return self;
}

- (NSString *)getResponseCharsetName {
  return charset_;
}

- (void)connect {
  if (connected_) {
    return;
  }
  connected_ = YES;
}

- (void)disconnect {
  RAREURLConnectionHandler* h=connectionHandler_;
  connectionHandler_=nil;
  if(h) {
    [h dispose];
  }
  if (connected_) {
    @try {
      if (outputStream_ != nil) {
        [outputStream_ close];
      }
    }
    @catch (JavaLangException *ignore) {
    }
    @try {
      if (errorStream_ != nil) {
        [errorStream_ close];
      }
      if (inputStream_ != nil) {
        [inputStream_ close];
      }
    }
    @catch (JavaLangException *ignore) {
    }
    errorStream_ = nil;
    inputStream_ = nil;
    outputStream_ = nil;
    connected_ = NO;
    proxyResponse_ = nil;
    responseCode_ = -1;
  }
}

- (id<JavaUtilMap>)getHeaderFields {
  if (headerFields_ == nil) {
    headerFields_ = [[JavaUtilHashMap alloc] init];
    [self createHeaderFieldsWithJavaUtilHashMap:headerFields_];
  }
  return [super getHeaderFields];
}

+ (void)setFollowRedirectsWithBoolean:(BOOL)auto_ {
  JavaNetHttpURLConnection_followRedirects_ = auto_;
}

- (void)setInstanceFollowRedirectsWithBoolean:(BOOL)followRedirects {
  instanceFollowRedirects_ = followRedirects;
}
- (void)setRequestPropertyExWithNSString:(NSString *)field
                          withNSString:(NSString *)newValue {
  [((NSMutableURLRequest*)proxy_) setValue: newValue forHTTPHeaderField: field];
}
- (void)setRequestMethodWithNSString:(NSString *)method {
  if (connected_) {
    @throw [[JavaNetProtocolException alloc] initWithNSString:@"Connection already established"];
  }
  {
    IOSObjectArray *a__ = JavaNetHttpURLConnection_PERMITTED_USER_METHODS_;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *permittedUserMethod = (*b__++);
      if ([((NSString *) nil_chk(permittedUserMethod)) isEqual:method]) {
        self->method_ = permittedUserMethod;
        return;
      }
    }
  }
  @throw [[JavaNetProtocolException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown method '%@'; must be one of %@", method, [JavaUtilArrays toStringWithNSObjectArray:JavaNetHttpURLConnection_PERMITTED_USER_METHODS_]]];
}

- (JavaIoInputStream *)getErrorStream {
  if (!connected_) {
    [self connect];
  }
  return errorStream_;
}

+ (BOOL)getFollowRedirects {
  return JavaNetHttpURLConnection_followRedirects_;
}

- (NSString *)getHeaderFieldWithNSString:(NSString *)key {
  [self getInputStream];
  NSHTTPURLResponse* response = (NSHTTPURLResponse*)proxyResponse_;
  if(response==nil) { return nil; }
  return (NSString*) [[response allHeaderFields] valueForKey: key];
}

- (JavaIoInputStream *)getInputStream {
  if(inputStream_==nil) {
    responseCode_=-1;
    connected_=false;
    NSMutableURLRequest* req=(NSMutableURLRequest*)proxy_;
    [req setHTTPMethod: method_];
    if(outputStream_!=nil) {
      [outputStream_ close];
      outputStream_=nil;
    }
    NSError* error=nil;
    NSURLResponse* response = nil;
    NSData* data;
    
    RAREURLConnectionHandler *h=[RAREURLConnectionHandler new];
    connectionHandler_=h;
    [h sendRequest:req callback:nil manualStart:NO];
    data=[h getData];
    error=[h getError];
    response=[h getResponse];
    responseCode_=(int)[((NSHTTPURLResponse*)response) statusCode];
    if(!data && !error) {
      if(!connectionHandler_) {
        @throw [[JavaIoIOException alloc] initWithNSString:@"Stream closed by another thread"];
      }
      //try one more time
      [connectionHandler_ dispose];
      h=[RAREURLConnectionHandler new];
      connectionHandler_=h;
      [h sendRequest:req callback:nil manualStart:NO];
      data=[h getData];
      error=[h getError];
      response=[h getResponse];
      responseCode_=(int)[((NSHTTPURLResponse*)response) statusCode];
      if(!data && !error) {
        if(responseCode_>100) {
          data=[NSData data];
        }
        else {
          if(!connectionHandler_) {
            @throw [[JavaIoIOException alloc] initWithNSString:@"Stream closed by another thread"];
          }
          [connectionHandler_ dispose];
          @throw [[JavaIoIOException alloc] initWithNSString:@"Connection failure"];
        }
      }
    }
     if(error!=nil) {
       @throw [[JavaNetConnectException alloc] initWithNSString:[AppleHelper toErrorString: error]];
     }
    connected_=true;
    inputStream_=[[RARENSDataInputStream alloc] initWithId: data];
    if (responseCode_>=400) {
      errorStream_=inputStream_;
    }
    charset_=[response textEncodingName];
    proxyResponse_=response;
  }
  return inputStream_;
}

- (BOOL)getInstanceFollowRedirects {
  return instanceFollowRedirects_;
}

- (JavaIoOutputStream *)getOutputStream {
  return [self getOutputStreamWithInt:0];
}

- (JavaIoOutputStream *)getOutputStreamWithInt:(int)bufferSize {
  if (bufferSize < 1) {
    bufferSize = 8192;
  }
  if (outputStream_ == nil) {
    if (inputStream_ != nil) {
      @throw [[JavaIoIOException alloc] initWithNSString:@"Cant call getOutStream after getting input"];
    }
    if (![((NSString *) nil_chk(method_)) equalsIgnoreCase:@"POST"] || ![method_ equalsIgnoreCase:@"POST"]) {
      if (doOutput_) {
        method_ = @"POST";
      }
      else {
        return [super getOutputStream];
      }
    }
    outputStream_ = [[RARENSURLRequestOutputStream alloc] initWithId:proxy_ withInt:bufferSize];
  }
  return outputStream_;
}

- (NSString *)getRequestMethod {
  return method_;
}

- (int)getResponseCode {
  if(responseCode_==-1) {
    [self getInputStream ];
    responseCode_=(int)[((NSHTTPURLResponse*)proxyResponse_) statusCode];
    responseMessage_= [NSHTTPURLResponse localizedStringForStatusCode: responseCode_];
  }
  return responseCode_;
}

- (NSString *)getResponseMessage {
  if (responseMessage_ != nil) {
    return responseMessage_;
  }
  [self getResponseCode];
  return responseMessage_;
}

- (JavaNetContentHandler *)getContentHandlerWithNSString:(NSString *)contentType {
  if ([JavaNetURLConnection defaultContentHandler] == nil) {
    (void) [JavaNetURLConnection setDefaultContentHandler:[[JavaNetDefaultContentHandler alloc] init]];
    JavaNetHttpURLConnection_textContentHandler_ = [[JavaNetHttpURLConnection_TextContentHandler alloc] init];
  }
  JavaNetContentHandler *ch = [super getContentHandlerWithNSString:contentType];
  if ((ch == [JavaNetURLConnection defaultContentHandler]) && [((NSString *) nil_chk(contentType)) hasPrefix:@"text/"]) {
    if (JavaNetHttpURLConnection_textContentHandler_ == nil) {
      JavaNetHttpURLConnection_textContentHandler_ = [[JavaNetHttpURLConnection_TextContentHandler alloc] init];
    }
    return JavaNetHttpURLConnection_textContentHandler_;
  }
  return ch;
}

- (void)createHeaderFieldsWithJavaUtilHashMap:(JavaUtilHashMap *)headerFields {
  [self getInputStream];
  NSHTTPURLResponse* response = (NSHTTPURLResponse*)proxyResponse_;
  if(response==nil) { return; }
  NSDictionary* fields=[response allHeaderFields];
  if(fields!=nil) {
    [AppleHelper setHTTPHeaders:fields :headerFields];
  }
}

+ (void)initialize {
  if (self == [JavaNetHttpURLConnection class]) {
    JavaNetHttpURLConnection_PERMITTED_USER_METHODS_ = [IOSObjectArray arrayWithObjects:(id[]){ @"OPTIONS", @"GET", @"HEAD", @"POST", @"PUT", @"DELETE", @"TRACE" } count:7 type:[IOSClass classWithClass:[NSString class]]];
  }
}

- (void)copyAllFieldsTo:(JavaNetHttpURLConnection *)other {
  [super copyAllFieldsTo:other];
  other->charset_ = charset_;
  other->errorStream_ = errorStream_;
  other->headerFields_ = headerFields_;
  other->inputStream_ = inputStream_;
  other->instanceFollowRedirects_ = instanceFollowRedirects_;
  other->method_ = method_;
  other->outputStream_ = outputStream_;
  other->proxyResponse_ = proxyResponse_;
  other->responseCode_ = responseCode_;
  other->responseMessage_ = responseMessage_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getResponseCharsetName", NULL, "LNSString", 0x1, NULL },
    { "connect", NULL, "V", 0x1, "JavaIoIOException" },
    { "getHeaderFields", NULL, "LJavaUtilMap", 0x1, NULL },
    { "setRequestMethodWithNSString:", NULL, "V", 0x1, "JavaNetProtocolException" },
    { "getErrorStream", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "getFollowRedirects", NULL, "Z", 0x9, NULL },
    { "getHeaderFieldWithNSString:", NULL, "LNSString", 0x101, NULL },
    { "getInputStream", NULL, "LJavaIoInputStream", 0x101, "JavaIoIOException" },
    { "getNSData", NULL, "LNSObject", 0x101, "JavaIoIOException" },
    { "getInstanceFollowRedirects", NULL, "Z", 0x1, NULL },
    { "getOutputStream", NULL, "LJavaIoOutputStream", 0x1, "JavaIoIOException" },
    { "getOutputStreamWithInt:", NULL, "LJavaIoOutputStream", 0x1, "JavaIoIOException" },
    { "getRequestMethod", NULL, "LNSString", 0x1, NULL },
    { "getResponseCode", NULL, "I", 0x101, "JavaIoIOException" },
    { "getResponseMessage", NULL, "LNSString", 0x1, "JavaIoIOException" },
    { "setRequestPropertyExWithNSString:withNSString:", NULL, "V", 0x104, NULL },
    { "getContentHandlerWithNSString:", NULL, "LJavaNetContentHandler", 0x4, NULL },
    { "createHeaderFieldsWithJavaUtilHashMap:", NULL, "V", 0x102, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "HTTP_ACCEPTED_", NULL, 0x19, "I" },
    { "HTTP_BAD_GATEWAY_", NULL, 0x19, "I" },
    { "HTTP_BAD_METHOD_", NULL, 0x19, "I" },
    { "HTTP_BAD_REQUEST_", NULL, 0x19, "I" },
    { "HTTP_CLIENT_TIMEOUT_", NULL, 0x19, "I" },
    { "HTTP_CONFLICT_", NULL, 0x19, "I" },
    { "HTTP_CREATED_", NULL, 0x19, "I" },
    { "HTTP_ENTITY_TOO_LARGE_", NULL, 0x19, "I" },
    { "HTTP_FORBIDDEN_", NULL, 0x19, "I" },
    { "HTTP_GATEWAY_TIMEOUT_", NULL, 0x19, "I" },
    { "HTTP_GONE_", NULL, 0x19, "I" },
    { "HTTP_INTERNAL_ERROR_", NULL, 0x19, "I" },
    { "HTTP_LENGTH_REQUIRED_", NULL, 0x19, "I" },
    { "HTTP_MOVED_PERM_", NULL, 0x19, "I" },
    { "HTTP_MOVED_TEMP_", NULL, 0x19, "I" },
    { "HTTP_MULT_CHOICE_", NULL, 0x19, "I" },
    { "HTTP_NOT_ACCEPTABLE_", NULL, 0x19, "I" },
    { "HTTP_NOT_AUTHORITATIVE_", NULL, 0x19, "I" },
    { "HTTP_NOT_FOUND_", NULL, 0x19, "I" },
    { "HTTP_NOT_IMPLEMENTED_", NULL, 0x19, "I" },
    { "HTTP_NOT_MODIFIED_", NULL, 0x19, "I" },
    { "HTTP_NO_CONTENT_", NULL, 0x19, "I" },
    { "HTTP_OK_", NULL, 0x19, "I" },
    { "HTTP_PARTIAL_", NULL, 0x19, "I" },
    { "HTTP_PAYMENT_REQUIRED_", NULL, 0x19, "I" },
    { "HTTP_PRECON_FAILED_", NULL, 0x19, "I" },
    { "HTTP_PROXY_AUTH_", NULL, 0x19, "I" },
    { "HTTP_REQ_TOO_LONG_", NULL, 0x19, "I" },
    { "HTTP_RESET_", NULL, 0x19, "I" },
    { "HTTP_SEE_OTHER_", NULL, 0x19, "I" },
    { "HTTP_UNAUTHORIZED_", NULL, 0x19, "I" },
    { "HTTP_UNAVAILABLE_", NULL, 0x19, "I" },
    { "HTTP_UNSUPPORTED_TYPE_", NULL, 0x19, "I" },
    { "HTTP_USE_PROXY_", NULL, 0x19, "I" },
    { "HTTP_VERSION_", NULL, 0x19, "I" },
    { "textContentHandler_", NULL, 0x8, "LJavaNetContentHandler" },
    { "PERMITTED_USER_METHODS_", NULL, 0x1a, "LIOSObjectArray" },
    { "followRedirects_", NULL, 0xa, "Z" },
    { "errorStream_", NULL, 0x0, "LJavaIoInputStream" },
    { "inputStream_", NULL, 0x0, "LJavaIoInputStream" },
    { "outputStream_", NULL, 0x0, "LJavaIoOutputStream" },
    { "headerFields_", NULL, 0x0, "LJavaUtilHashMap" },
    { "method_", NULL, 0x4, "LNSString" },
    { "responseCode_", NULL, 0x4, "I" },
    { "instanceFollowRedirects_", NULL, 0x4, "Z" },
    { "proxyRequest_", NULL, 0x4, "LNSObject" },
    { "proxyResponse_", NULL, 0x4, "LNSObject" },
    { "responseMessage_", NULL, 0x4, "LNSString" },
    { "charset_", NULL, 0x4, "LNSString" },
  };
  static J2ObjcClassInfo _JavaNetHttpURLConnection = { "HttpURLConnection", "java.net", NULL, 0x1, 18, methods, 49, fields, 0, NULL};
  return &_JavaNetHttpURLConnection;
}

@end
@implementation JavaNetHttpURLConnection_TextContentHandler

- (id)getContentWithJavaNetURLConnection:(JavaNetURLConnection *)u {
  NSString* enc=((JavaNetHttpURLConnection*)u).getResponseCharsetName;
  return [((RARENSDataInputStream*)u.getInputStream) getStringWithNSString: enc];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getContentWithJavaNetURLConnection:", NULL, "LNSObject", 0x101, "JavaIoIOException" },
  };
  static J2ObjcClassInfo _JavaNetHttpURLConnection_TextContentHandler = { "TextContentHandler", "java.net", "HttpURLConnection", 0x8, 1, methods, 0, NULL, 0, NULL};
  return &_JavaNetHttpURLConnection_TextContentHandler;
}

@end
