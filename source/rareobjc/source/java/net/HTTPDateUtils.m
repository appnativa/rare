//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/Projects/porting/src/java/net/HTTPDateUtils.java
//
//  Created by decoteaud on 6/12/14.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/ThreadLocal.h"
#include "java/net/HTTPDateUtils.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"

@implementation JavaNetHTTPDateUtils

static NSString * JavaNetHTTPDateUtils_PATTERN_ASCTIME_ = @"EEE MMM d HH:mm:ss yyyy";
static NSString * JavaNetHTTPDateUtils_PATTERN_RFC1036_ = @"EEEE, dd-MMM-yy HH:mm:ss zzz";
static NSString * JavaNetHTTPDateUtils_PATTERN_RFC1123_ = @"EEE, dd MMM yyyy HH:mm:ss zzz";
static IOSObjectArray * JavaNetHTTPDateUtils_DEFAULT_PATTERNS_;
static JavaUtilTimeZone * JavaNetHTTPDateUtils_GMT_;
static JavaUtilDate * JavaNetHTTPDateUtils_DEFAULT_TWO_DIGIT_YEAR_START_;

+ (NSString *)PATTERN_ASCTIME {
  return JavaNetHTTPDateUtils_PATTERN_ASCTIME_;
}

+ (NSString *)PATTERN_RFC1036 {
  return JavaNetHTTPDateUtils_PATTERN_RFC1036_;
}

+ (NSString *)PATTERN_RFC1123 {
  return JavaNetHTTPDateUtils_PATTERN_RFC1123_;
}

+ (IOSObjectArray *)DEFAULT_PATTERNS {
  return JavaNetHTTPDateUtils_DEFAULT_PATTERNS_;
}

+ (JavaUtilTimeZone *)GMT {
  return JavaNetHTTPDateUtils_GMT_;
}

+ (JavaUtilDate *)DEFAULT_TWO_DIGIT_YEAR_START {
  return JavaNetHTTPDateUtils_DEFAULT_TWO_DIGIT_YEAR_START_;
}

- (id)init {
  return [super init];
}

+ (NSString *)formatDateWithJavaUtilDate:(JavaUtilDate *)date {
  return [JavaNetHTTPDateUtils formatDateWithJavaUtilDate:date withNSString:JavaNetHTTPDateUtils_PATTERN_RFC1123_];
}

+ (NSString *)formatDateWithJavaUtilDate:(JavaUtilDate *)date
                            withNSString:(NSString *)pattern {
  if (date == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"date is null"];
  }
  if (pattern == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"pattern is null"];
  }
  JavaTextSimpleDateFormat *formatter = [JavaNetHTTPDateUtils_DateFormatHolder formatForWithNSString:pattern];
  return [((JavaTextSimpleDateFormat *) nil_chk(formatter)) formatWithJavaUtilDate:date];
}

+ (JavaUtilDate *)parseDateWithNSString:(NSString *)dateValue {
  return [JavaNetHTTPDateUtils parseDateWithNSString:dateValue withNSStringArray:nil withJavaUtilDate:nil];
}

+ (JavaUtilDate *)parseDateWithNSString:(NSString *)dateValue
                      withNSStringArray:(IOSObjectArray *)dateFormats {
  return [JavaNetHTTPDateUtils parseDateWithNSString:dateValue withNSStringArray:dateFormats withJavaUtilDate:nil];
}

+ (JavaUtilDate *)parseDateWithNSString:(NSString *)dateValue
                      withNSStringArray:(IOSObjectArray *)dateFormats
                       withJavaUtilDate:(JavaUtilDate *)startDate {
  if (dateValue == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"dateValue is null"];
  }
  if (dateFormats == nil) {
    dateFormats = JavaNetHTTPDateUtils_DEFAULT_PATTERNS_;
  }
  if (startDate == nil) {
    startDate = JavaNetHTTPDateUtils_DEFAULT_TWO_DIGIT_YEAR_START_;
  }
  if (([((NSString *) nil_chk(dateValue)) length] > 1) && [dateValue hasPrefix:@"'"] && [dateValue hasSuffix:@"'"]) {
    dateValue = [dateValue substring:1 endIndex:(int) [dateValue length] - 1];
  }
  JavaTextParsePosition *p = [[JavaTextParsePosition alloc] initWithInt:0];
  {
    IOSObjectArray *a__ = dateFormats;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *dateFormat = (*b__++);
      JavaTextSimpleDateFormat *dateParser = [JavaNetHTTPDateUtils_DateFormatHolder formatForWithNSString:dateFormat];
      [((JavaTextSimpleDateFormat *) nil_chk(dateParser)) set2DigitYearStartWithJavaUtilDate:startDate];
      [p setIndexWithInt:0];
      [p setErrorIndexWithInt:-1];
      JavaUtilDate *date = [dateParser parseWithNSString:dateValue withJavaTextParsePosition:p];
      if ([p getIndex] != 0) {
        return date;
      }
    }
  }
  p = nil;
  @throw [[JavaTextParseException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to parse the date %@", dateValue] withInt:0];
}

+ (void)initialize {
  if (self == [JavaNetHTTPDateUtils class]) {
    JavaNetHTTPDateUtils_DEFAULT_PATTERNS_ = [IOSObjectArray arrayWithObjects:(id[]){ JavaNetHTTPDateUtils_PATTERN_RFC1036_, JavaNetHTTPDateUtils_PATTERN_RFC1123_, JavaNetHTTPDateUtils_PATTERN_ASCTIME_ } count:3 type:[IOSClass classWithClass:[NSString class]]];
    JavaNetHTTPDateUtils_GMT_ = [JavaUtilTimeZone getTimeZoneWithNSString:@"GMT"];
    {
      JavaUtilCalendar *calendar = [JavaUtilCalendar getInstance];
      [((JavaUtilCalendar *) nil_chk(calendar)) setTimeZoneWithJavaUtilTimeZone:JavaNetHTTPDateUtils_GMT_];
      [calendar setWithInt:2000 withInt:JavaUtilCalendar_JANUARY withInt:1 withInt:0 withInt:0 withInt:0];
      [calendar setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
      JavaNetHTTPDateUtils_DEFAULT_TWO_DIGIT_YEAR_START_ = [calendar getTime];
    }
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL },
    { "formatDateWithJavaUtilDate:", NULL, "LNSString", 0x9, NULL },
    { "formatDateWithJavaUtilDate:withNSString:", NULL, "LNSString", 0x9, NULL },
    { "parseDateWithNSString:", NULL, "LJavaUtilDate", 0x9, "JavaTextParseException" },
    { "parseDateWithNSString:withNSStringArray:", NULL, "LJavaUtilDate", 0x9, "JavaTextParseException" },
    { "parseDateWithNSString:withNSStringArray:withJavaUtilDate:", NULL, "LJavaUtilDate", 0x9, "JavaTextParseException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "PATTERN_ASCTIME_", NULL, 0x19, "LNSString" },
    { "PATTERN_RFC1036_", NULL, 0x19, "LNSString" },
    { "PATTERN_RFC1123_", NULL, 0x19, "LNSString" },
    { "DEFAULT_PATTERNS_", NULL, 0x1a, "LIOSObjectArray" },
    { "GMT_", NULL, 0x19, "LJavaUtilTimeZone" },
    { "DEFAULT_TWO_DIGIT_YEAR_START_", NULL, 0x1a, "LJavaUtilDate" },
  };
  static J2ObjcClassInfo _JavaNetHTTPDateUtils = { "HTTPDateUtils", "java.net", NULL, 0x11, 6, methods, 6, fields, 0, NULL};
  return &_JavaNetHTTPDateUtils;
}

@end
@implementation JavaNetHTTPDateUtils_DateFormatHolder

static JavaLangThreadLocal * JavaNetHTTPDateUtils_DateFormatHolder_THREADLOCAL_FORMATS_;

+ (JavaLangThreadLocal *)THREADLOCAL_FORMATS {
  return JavaNetHTTPDateUtils_DateFormatHolder_THREADLOCAL_FORMATS_;
}

+ (JavaTextSimpleDateFormat *)formatForWithNSString:(NSString *)pattern {
  JavaUtilHashMap *formats = [((JavaLangThreadLocal *) nil_chk(JavaNetHTTPDateUtils_DateFormatHolder_THREADLOCAL_FORMATS_)) get];
  JavaTextSimpleDateFormat *format = [((JavaUtilHashMap *) nil_chk(formats)) getWithId:pattern];
  if (format == nil) {
    format = [[JavaTextSimpleDateFormat alloc] initWithNSString:pattern withJavaUtilLocale:[JavaUtilLocale US]];
    [format setTimeZoneWithJavaUtilTimeZone:[JavaUtilTimeZone getTimeZoneWithNSString:@"GMT"]];
    (void) [formats putWithId:pattern withId:format];
  }
  return format;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [JavaNetHTTPDateUtils_DateFormatHolder class]) {
    JavaNetHTTPDateUtils_DateFormatHolder_THREADLOCAL_FORMATS_ = [[JavaNetHTTPDateUtils_DateFormatHolder_$1 alloc] init];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "formatForWithNSString:", NULL, "LJavaTextSimpleDateFormat", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "THREADLOCAL_FORMATS_", NULL, 0x1a, "LJavaLangThreadLocal" },
  };
  static J2ObjcClassInfo _JavaNetHTTPDateUtils_DateFormatHolder = { "DateFormatHolder", "java.net", "HTTPDateUtils", 0x18, 1, methods, 1, fields, 0, NULL};
  return &_JavaNetHTTPDateUtils_DateFormatHolder;
}

@end
@implementation JavaNetHTTPDateUtils_DateFormatHolder_$1

- (JavaUtilHashMap *)initialValue {
  return [[JavaUtilHashMap alloc] init];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialValue", NULL, "LJavaUtilHashMap", 0x4, NULL },
  };
  static const char *superclass_type_args[] = {"LJavaUtilHashMap"};
  static J2ObjcClassInfo _JavaNetHTTPDateUtils_DateFormatHolder_$1 = { "$1", "java.net", "HTTPDateUtils$DateFormatHolder", 0x8000, 1, methods, 0, NULL, 1, superclass_type_args};
  return &_JavaNetHTTPDateUtils_DateFormatHolder_$1;
}

@end
