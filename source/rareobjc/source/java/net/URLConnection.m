//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/Projects/porting/src/java/net/URLConnection.java
//
//  Created by decoteaud on 4/16/14.
//

#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/net/ContentHandler.h"
#include "java/net/DefaultContentHandler.h"
#include "java/net/DefaultFileNameMap.h"
#include "java/net/FileNameMap.h"
#include "java/net/HTTPDateUtils.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@implementation JavaNetURLConnection

static JavaUtilHashMap * JavaNetURLConnection_contentHandlers_;
static JavaNetContentHandler * JavaNetURLConnection_defaultContentHandler_;
static BOOL JavaNetURLConnection_defaultUseCaches_ = YES;
static BOOL JavaNetURLConnection_defaultAllowUserInteraction_;
static id<JavaNetFileNameMap> JavaNetURLConnection_fileNameMap_;

+ (JavaUtilHashMap *)contentHandlers {
  return JavaNetURLConnection_contentHandlers_;
}

+ (void)setContentHandlers:(JavaUtilHashMap *)contentHandlers {
  JavaNetURLConnection_contentHandlers_ = contentHandlers;
}

+ (JavaNetContentHandler *)defaultContentHandler {
  return JavaNetURLConnection_defaultContentHandler_;
}

+ (void)setDefaultContentHandler:(JavaNetContentHandler *)defaultContentHandler {
  JavaNetURLConnection_defaultContentHandler_ = defaultContentHandler;
}

+ (BOOL)defaultUseCaches {
  return JavaNetURLConnection_defaultUseCaches_;
}

+ (BOOL *)defaultUseCachesRef {
  return &JavaNetURLConnection_defaultUseCaches_;
}

+ (BOOL)defaultAllowUserInteraction {
  return JavaNetURLConnection_defaultAllowUserInteraction_;
}

+ (BOOL *)defaultAllowUserInteractionRef {
  return &JavaNetURLConnection_defaultAllowUserInteraction_;
}

+ (id<JavaNetFileNameMap>)fileNameMap {
  return JavaNetURLConnection_fileNameMap_;
}

+ (void)setFileNameMap:(id<JavaNetFileNameMap>)fileNameMap {
  JavaNetURLConnection_fileNameMap_ = fileNameMap;
}

- (id)initWithJavaNetURL:(JavaNetURL *)url {
  if (self = [super init]) {
    connectTimeout_ = 0;
    lastModified_ = -1;
    useCaches_ = JavaNetURLConnection_defaultUseCaches_;
    doInput_ = YES;
    allowUserInteraction_ = JavaNetURLConnection_defaultAllowUserInteraction_;
    readTimeout_ = 0;
    self->url_ = url;
    [self initialize__WithJavaNetURL:url];
  }
  return self;
}

- (void)addRequestPropertyWithNSString:(NSString *)field
                          withNSString:(NSString *)newValue {
  [self checkNotConnected];
  if (field == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"field == null"];
  }
}

- (void)connect {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (NSString *)guessContentTypeFromNameWithNSString:(NSString *)url {
  return [((id<JavaNetFileNameMap>) nil_chk([JavaNetURLConnection getFileNameMap])) getContentTypeForWithNSString:url];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@:%@", [[self getClass] getName], [((JavaNetURL *) nil_chk(url_)) description]];
}

- (void)setAllowUserInteractionWithBoolean:(BOOL)newValue {
  [self checkNotConnected];
  self->allowUserInteraction_ = newValue;
}

- (void)setConnectTimeoutWithInt:(int)timeout {
  if (timeout < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"timeout < 0"];
  }
  self->connectTimeout_ = timeout;
}

+ (void)setContentHandlersWithJavaUtilMap:(id<JavaUtilMap>)map {
  if (JavaNetURLConnection_contentHandlers_ != nil) {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Handlers are already set and cannot be reset"];
  }
  JavaNetURLConnection_contentHandlers_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:map];
}

+ (void)setDefaultAllowUserInteractionWithBoolean:(BOOL)allows {
  JavaNetURLConnection_defaultAllowUserInteraction_ = allows;
}

- (void)setDefaultUseCachesWithBoolean:(BOOL)newValue {
  JavaNetURLConnection_defaultUseCaches_ = newValue;
}

- (void)setDoInputWithBoolean:(BOOL)newValue {
  [self checkNotConnected];
  self->doInput_ = newValue;
}

- (void)setDoOutputWithBoolean:(BOOL)newValue {
  [self checkNotConnected];
  self->doOutput_ = newValue;
}

+ (void)setFileNameMapWithJavaNetFileNameMap:(id<JavaNetFileNameMap>)map {
  @synchronized ([IOSClass classWithClass:[JavaNetURLConnection class]]) {
    JavaNetURLConnection_fileNameMap_ = map;
  }
}

- (void)setReadTimeoutWithInt:(int)timeout {
  if (timeout < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"timeout < 0"];
  }
  self->readTimeout_ = timeout;
  [self setTimeoutExWithDouble:timeout / 1000.0];
}

- (void)setRequestPropertyWithNSString:(NSString *)field
                          withNSString:(NSString *)newValue {
  [self checkNotConnected];
  [self setRequestPropertyExWithNSString:field withNSString:newValue];
}

- (void)setUseCachesWithBoolean:(BOOL)newValue {
  [self checkNotConnected];
  self->useCaches_ = newValue;
}

- (BOOL)getAllowUserInteraction {
  return allowUserInteraction_;
}

- (int)getConnectTimeout {
  return connectTimeout_;
}

- (id)getContent {
  if (!connected_) {
    [self connect];
  }
  NSString *contentType = nil;
  if ((contentType = [self getContentType]) == nil) {
    contentType = [JavaNetURLConnection guessContentTypeFromNameWithNSString:[((JavaNetURL *) nil_chk(url_)) getFile]];
  }
  if (contentType != nil) {
    return [((JavaNetContentHandler *) nil_chk([self getContentHandlerWithNSString:contentType])) getContentWithJavaNetURLConnection:self];
  }
  return nil;
}

- (NSString *)getContentEncoding {
  return [self getHeaderFieldWithNSString:@"Content-Encoding"];
}

- (int)getContentLength {
  return [self getHeaderFieldIntWithNSString:@"Content-Length" withInt:-1];
}

- (NSString *)getContentType {
  return [self getHeaderFieldWithNSString:@"Content-Type"];
}

- (long long int)getDate {
  return [self getHeaderFieldDateWithNSString:@"Date" withLong:0];
}

+ (BOOL)getDefaultAllowUserInteraction {
  return JavaNetURLConnection_defaultAllowUserInteraction_;
}

- (BOOL)getDefaultUseCaches {
  return JavaNetURLConnection_defaultUseCaches_;
}

- (BOOL)getDoInput {
  return doInput_;
}

- (BOOL)getDoOutput {
  return doOutput_;
}

- (long long int)getExpiration {
  return [self getHeaderFieldDateWithNSString:@"Expires" withLong:0];
}

+ (id<JavaNetFileNameMap>)getFileNameMap {
  @synchronized ([IOSClass classWithClass:[JavaNetURLConnection class]]) {
    if (JavaNetURLConnection_fileNameMap_ == nil) {
      JavaNetURLConnection_fileNameMap_ = [[JavaNetDefaultFileNameMap alloc] init];
    }
    return JavaNetURLConnection_fileNameMap_;
  }
}

- (NSString *)getHeaderFieldWithInt:(int)pos {
  return nil;
}

- (NSString *)getHeaderFieldWithNSString:(NSString *)key {
  return nil;
}

- (long long int)getHeaderFieldDateWithNSString:(NSString *)field
                                       withLong:(long long int)defaultValue {
  NSString *date = [self getHeaderFieldWithNSString:field];
  if (date == nil) {
    return defaultValue;
  }
  @try {
    return [((JavaUtilDate *) nil_chk([JavaNetHTTPDateUtils parseDateWithNSString:date])) getTime];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (int)getHeaderFieldIntWithNSString:(NSString *)field
                             withInt:(int)defaultValue {
  @try {
    NSString* value=[self getHeaderFieldWithNSString:field];
    return value ? [JavaLangInteger parseIntWithNSString:value] : defaultValue;
  }
  @catch (JavaLangNumberFormatException *e) {
    return defaultValue;
  }
}

- (NSString *)getHeaderFieldKeyWithInt:(int)posn {
  return nil;
}

- (id<JavaUtilMap>)getHeaderFields {
  return [JavaUtilCollections emptyMap];
}

- (long long int)getIfModifiedSince {
  return ifModifiedSince_;
}

- (JavaIoInputStream *)getInputStream {
  @throw [[JavaIoIOException alloc] initWithNSString:@"Does not support reading from the input stream"];
}

- (long long int)getLastModified {
  if (lastModified_ != -1) {
    return lastModified_;
  }
  return lastModified_ = [self getHeaderFieldDateWithNSString:@"Last-Modified" withLong:0];
}

- (JavaIoOutputStream *)getOutputStream {
  @throw [[JavaIoIOException alloc] initWithNSString:@"Does not support writing to the output stream"];
}

- (int)getReadTimeout {
  return readTimeout_;
}

- (id<JavaUtilMap>)getRequestProperties {
  [self checkNotConnected];
  return [JavaUtilCollections emptyMap];
}

- (NSString *)getRequestPropertyWithNSString:(NSString *)field {
  [self checkNotConnected];
  return nil;
}

- (JavaNetURL *)getURL {
  return url_;
}

- (BOOL)getUseCaches {
  return useCaches_;
}

- (void)setRequestPropertyExWithNSString:(NSString *)field
                            withNSString:(NSString *)value {
}

- (JavaNetContentHandler *)getContentHandlerWithNSString:(NSString *)contentType {
  if (JavaNetURLConnection_defaultContentHandler_ == nil) {
    JavaNetURLConnection_defaultContentHandler_ = [[JavaNetDefaultContentHandler alloc] init];
  }
  JavaNetContentHandler *ch = (JavaNetURLConnection_contentHandlers_ == nil) ? nil : [JavaNetURLConnection_contentHandlers_ getWithId:contentType];
  return (ch == nil) ? JavaNetURLConnection_defaultContentHandler_ : ch;
}

- (void)checkNotConnected {
  if (connected_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Already connected"];
  }
}

- (void)setTimeoutExWithDouble:(double)timeout {
  [((NSMutableURLRequest*)proxy_) setTimeoutInterval: timeout];
}

- (void)initialize__WithJavaNetURL:(JavaNetURL *)url {
  NSMutableURLRequest* r=[NSMutableURLRequest requestWithURL: (NSURL*)url->proxy_];
  [r setCachePolicy:NSURLRequestReloadRevalidatingCacheData];
  int to=MAX(readTimeout_,connectTimeout_);
  if(to>0) {
    [r setTimeoutInterval:to];
  }
  proxy_=r;
}

- (NSString *)parseTypeStringWithNSString:(NSString *)typeString {
  JavaLangStringBuilder *result = [[JavaLangStringBuilder alloc] initWithNSString:typeString];
  for (int i = 0; i < [result sequenceLength]; i++) {
    unichar c = [result charAtWithInt:i];
    if (!([JavaLangCharacter isLetterWithChar:c] || [JavaLangCharacter isDigitWithChar:c] || (c == '.'))) {
      [result setCharAtWithInt:i withChar:'_'];
    }
  }
  return [result description];
}

- (void)copyAllFieldsTo:(JavaNetURLConnection *)other {
  [super copyAllFieldsTo:other];
  other->allowUserInteraction_ = allowUserInteraction_;
  other->connectTimeout_ = connectTimeout_;
  other->connected_ = connected_;
  other->doInput_ = doInput_;
  other->doOutput_ = doOutput_;
  other->ifModifiedSince_ = ifModifiedSince_;
  other->lastModified_ = lastModified_;
  other->proxy_ = proxy_;
  other->readTimeout_ = readTimeout_;
  other->url_ = url_;
  other->useCaches_ = useCaches_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaNetURL:", NULL, NULL, 0x4, NULL },
    { "connect", NULL, "V", 0x401, "JavaIoIOException" },
    { "guessContentTypeFromNameWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "getAllowUserInteraction", NULL, "Z", 0x1, NULL },
    { "getContent", NULL, "LNSObject", 0x1, "JavaIoIOException" },
    { "getContentEncoding", NULL, "LNSString", 0x1, NULL },
    { "getContentType", NULL, "LNSString", 0x1, NULL },
    { "getDefaultAllowUserInteraction", NULL, "Z", 0x9, NULL },
    { "getDefaultUseCaches", NULL, "Z", 0x1, NULL },
    { "getDoInput", NULL, "Z", 0x1, NULL },
    { "getDoOutput", NULL, "Z", 0x1, NULL },
    { "getFileNameMap", NULL, "LJavaNetFileNameMap", 0x9, NULL },
    { "getHeaderFieldWithInt:", NULL, "LNSString", 0x1, NULL },
    { "getHeaderFieldWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getHeaderFieldKeyWithInt:", NULL, "LNSString", 0x1, NULL },
    { "getHeaderFields", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getInputStream", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "getOutputStream", NULL, "LJavaIoOutputStream", 0x1, "JavaIoIOException" },
    { "getRequestProperties", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getRequestPropertyWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getURL", NULL, "LJavaNetURL", 0x1, NULL },
    { "getUseCaches", NULL, "Z", 0x1, NULL },
    { "setRequestPropertyExWithNSString:withNSString:", NULL, "V", 0x4, NULL },
    { "getContentHandlerWithNSString:", NULL, "LJavaNetContentHandler", 0x4, NULL },
    { "checkNotConnected", NULL, "V", 0x2, NULL },
    { "setTimeoutExWithDouble:", NULL, "V", 0x102, NULL },
    { "initialize__WithJavaNetURL:", NULL, "V", 0x102, NULL },
    { "parseTypeStringWithNSString:", NULL, "LNSString", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "contentHandlers_", NULL, 0xc, "LJavaUtilHashMap" },
    { "defaultContentHandler_", NULL, 0xc, "LJavaNetContentHandler" },
    { "defaultUseCaches_", NULL, 0xa, "Z" },
    { "defaultAllowUserInteraction_", NULL, 0xa, "Z" },
    { "fileNameMap_", NULL, 0xa, "LJavaNetFileNameMap" },
    { "connected_", NULL, 0x4, "Z" },
    { "doOutput_", NULL, 0x4, "Z" },
    { "ifModifiedSince_", NULL, 0x4, "J" },
    { "proxy_", NULL, 0x4, "LNSObject" },
    { "url_", NULL, 0x4, "LJavaNetURL" },
    { "useCaches_", NULL, 0x4, "Z" },
    { "doInput_", NULL, 0x4, "Z" },
    { "allowUserInteraction_", NULL, 0x4, "Z" },
  };
  static J2ObjcClassInfo _JavaNetURLConnection = { "URLConnection", "java.net", NULL, 0x401, 28, methods, 13, fields, 0, NULL};
  return &_JavaNetURLConnection;
}

@end
