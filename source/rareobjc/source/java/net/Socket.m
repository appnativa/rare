//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/Projects/porting/src/java/net/Socket.java
//
//  Created by decoteaud on 4/16/14.
//

#include "IOSClass.h"
#include "com/appnativa/rare/net/NSInputStreamInputStream.h"
#include "com/appnativa/rare/net/NSOutputStreamOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/net/Socket.h"
#import "RARESocket.h"

@implementation JavaNetSocket

- (id)initWithNSString:(NSString *)host
               withInt:(int)port {
  if (self = [super init]) {
    self->host_ = host;
    self->port_ = port;
    proxy_ = [JavaNetSocket createProxyWithNSString:host withInt:port];
    if (proxy_ != nil) {
      @throw [[JavaIoIOException alloc] initWithNSString:@"Could not connecte to host"];
    }
  }
  return self;
}

- (NSString *)getHost {
  return host_;
}

- (int)getPort {
  return port_;
}

- (JavaIoInputStream *)getInputStream {
  if ([self isConnected]) {
    if (inStream_ == nil) {
      inStream_ = [[RARENSInputStreamInputStream alloc] initWithId:[self getNSInputStream]];
    }
    return inStream_;
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"not connected"];
  }
}

- (void)connectWithNSString:(NSString *)host
                    withInt:(int)port {
  [self close];
  proxy_ = [JavaNetSocket createProxyWithNSString:host withInt:port];
  if (proxy_ != nil) {
    @throw [[JavaIoIOException alloc] initWithNSString:@"Could not connecte to host"];
  }
}

- (JavaIoOutputStream *)getOutputStream {
  if ([self isConnected]) {
    if (outStream_ == nil) {
      outStream_ = [[RARENSOutputStreamOutputStream alloc] initWithId:[self getNSOutputStream]];
    }
    return outStream_;
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"not connected"];
  }
}

- (BOOL)isClosed {
  return ![self isConnected];
}

- (void)shutdownInput {
}

- (void)shutdownOutput {
}

- (BOOL)isConnected {
  return proxy_ != nil;
}

- (void)close {
  if (proxy_ != nil) {
    @try {
      [self closeEx];
    }
    @catch (JavaLangException *ignore) {
    }
    inStream_ = nil;
    outStream_ = nil;
    proxy_ = nil;
  }
}

- (id)getNSInputStream {
  return ((RARESocket*)proxy_).inputStream;
}

- (id)getNSOutputStream {
  return ((RARESocket*)proxy_).outputStream;
}

+ (id)createProxyWithNSString:(NSString *)host
                      withInt:(int)port {
  RARESocket* s=[RARESocket new];
  if([s openWithHost: host andPort: port]) {
    return s;
  }
  return nil;
}

- (void)closeEx {
  [((RARESocket*)proxy_) close];
}

- (void)copyAllFieldsTo:(JavaNetSocket *)other {
  [super copyAllFieldsTo:other];
  other->host_ = host_;
  other->inStream_ = inStream_;
  other->outStream_ = outStream_;
  other->port_ = port_;
  other->proxy_ = proxy_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", NULL, NULL, 0x1, "JavaIoIOException" },
    { "getHost", NULL, "LNSString", 0x1, NULL },
    { "getInputStream", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "connectWithNSString:withInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "getOutputStream", NULL, "LJavaIoOutputStream", 0x1, "JavaIoIOException" },
    { "isClosed", NULL, "Z", 0x1, NULL },
    { "isConnected", NULL, "Z", 0x1, NULL },
    { "getNSInputStream", NULL, "LNSObject", 0x100, NULL },
    { "getNSOutputStream", NULL, "LNSObject", 0x100, NULL },
    { "createProxyWithNSString:withInt:", NULL, "LNSObject", 0x108, NULL },
    { "closeEx", NULL, "V", 0x104, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "inStream_", NULL, 0x0, "LJavaIoInputStream" },
    { "outStream_", NULL, 0x0, "LJavaIoOutputStream" },
    { "host_", NULL, 0x0, "LNSString" },
    { "proxy_", NULL, 0x0, "LNSObject" },
    { "port_", NULL, 0x0, "I" },
  };
  static J2ObjcClassInfo _JavaNetSocket = { "Socket", "java.net", NULL, 0x1, 11, methods, 5, fields, 0, NULL};
  return &_JavaNetSocket;
}

@end
