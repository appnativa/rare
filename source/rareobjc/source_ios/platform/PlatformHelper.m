//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/ios/com/appnativa/rare/platform/PlatformHelper.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/platform/PlatformHelper.h"
#include "com/appnativa/rare/platform/aPlatformHelper.h"
#include "com/appnativa/rare/platform/apple/aAppContextImpl.h"
#include "com/appnativa/rare/platform/apple/ui/view/CustomButtonView.h"
#include "com/appnativa/rare/platform/apple/ui/view/TextFieldView.h"
#include "com/appnativa/rare/platform/apple/ui/view/View.h"
#include "com/appnativa/rare/platform/apple/ui/view/Window.h"
#include "com/appnativa/rare/spot/MainWindow.h"
#include "com/appnativa/rare/ui/ActionComponent.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/SimpleColorStateList.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorShade.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIMenuItem.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/UISound.h"
#include "com/appnativa/rare/ui/WindowDeviceConfiguration.h"
#include "com/appnativa/rare/ui/event/iActionListener.h"
#include "com/appnativa/rare/ui/iActionComponent.h"
#include "com/appnativa/rare/ui/iParentComponent.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTHelper.h"
#include "java/lang/Boolean.h"
#include "java/net/URL.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#import <UIKit/UIKit.h>
 #import <CoreText/CoreText.h>
 #import "CoreText/CTFontManager.h"
 #import "java/lang/reflect/Field.h"
 #import "AppleHelper.h"
 #import "java/lang/NoSuchMethodException.h"
 #import "APView+Component.h"
 #import "RAREAPApplication.h"
 #import "com/appnativa/rare/viewer/WindowViewer.h"
 #import "com/appnativa/rare/exception/ApplicationException.h"
 #import "RAREUIViewController.h"
 #import <AudioToolbox/AudioToolbox.h>
 #import <AVFoundation/AVFoundation.h>
 #import "com/appnativa/rare/platform/apple/ui/util/aAppleGraphics.h"

@implementation RAREPlatformHelper

static float RAREPlatformHelper_density_ = 1;
static RAREUIColor * RAREPlatformHelper_background_;
static RAREUIColor * RAREPlatformHelper_foreground_;
static RAREUIFont * RAREPlatformHelper_systemFont_;

+ (float)screenDpi {
  return RAREPlatformHelper_screenDpi;
}

+ (float)density {
  return RAREPlatformHelper_density_;
}

+ (float *)densityRef {
  return &RAREPlatformHelper_density_;
}

+ (RAREUIColor *)background {
  return RAREPlatformHelper_background_;
}

+ (void)setBackground:(RAREUIColor *)background {
  RAREPlatformHelper_background_ = background;
}

+ (RAREUIColor *)foreground {
  return RAREPlatformHelper_foreground_;
}

+ (void)setForeground:(RAREUIColor *)foreground {
  RAREPlatformHelper_foreground_ = foreground;
}

+ (RAREUIFont *)systemFont {
  return RAREPlatformHelper_systemFont_;
}

+ (void)setSystemFont:(RAREUIFont *)systemFont {
  RAREPlatformHelper_systemFont_ = systemFont;
}

- (id)init {
  return [super init];
}

+ (void)clearSessionCookies {
}

+ (RAREView *)createDateButtonView {
  return [RAREPlatformHelper createNakedButtonViewWithBoolean:NO];
}

+ (RAREWindow *)createWindowWithBoolean:(BOOL)modal
                            withBoolean:(BOOL)transparent
                            withBoolean:(BOOL)decorated {
  RAREWindow *w = [[RAREWindow alloc] init];
  [w setDecoratedWithBoolean:decorated];
  [w setModalWithBoolean:modal];
  return w;
}

+ (id<RAREiActionComponent>)createNakedButtonWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)context
                                                            withBoolean:(BOOL)parentPaints
                                                                withInt:(int)autoRepeatDelay {
  RARECustomButtonView *b = [[RARECustomButtonView alloc] init];
  [b setCallNeedsDisplayOnSuperWithBoolean:parentPaints];
  [b setPaintHandlerEnabledWithBoolean:YES];
  if (autoRepeatDelay > 0) {
    [b setAutoRepeatsWithInt:autoRepeatDelay];
  }
  return [[RAREActionComponent alloc] initWithRAREView:b];
}

+ (RAREView *)createNakedButtonViewWithBoolean:(BOOL)parentPaints {
  RARECustomButtonView *v = [[RARECustomButtonView alloc] init];
  [v setCallNeedsDisplayOnSuperWithBoolean:parentPaints];
  return v;
}

+ (void)handleCustomPropertiesWithRARESPOTMainWindow:(RARESPOTMainWindow *)cfg
                                     withJavaUtilMap:(id<JavaUtilMap>)properties {
  [RAREPlatformHelper setThemeWithBoolean:[((RAREUIColor *) nil_chk([RAREColorUtils getBackground])) isDarkColor]];
}

+ (void)hideVirtualKeyboardWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  RAREView *v = c == nil ? nil : [c getView];
  [RAREPlatformHelper hideVirtualKeyboardExWithId:v == nil ? nil : [v getProxy]];
}

+ (void)hideVirtualKeyboardExWithId:(id)proxy {
  [RAREAPApplication hideKeyboard:(UIView*)proxy];
}

+ (void)hideVirtualKeyboardWithRAREiWidget:(id<RAREiWidget>)context {
  [RAREPlatformHelper hideVirtualKeyboardWithRAREiPlatformComponent:context == nil ? nil : [context getDataComponent]];
}

+ (void)setup {
  [RAREPlatformHelper initializeUIDefaults];
  [RAREFontUtils setSystemFontWithRAREUIFont:RAREPlatformHelper_systemFont_];
  [RAREScreenUtils initilizeWithFloat:RAREPlatformHelper_density_ withFloat:1 withFloat:72 withFloat:72 withFloat:72 withFloat:1];
  (void) [RAREaPlatformHelper setPackageHelper:[[RAREaPlatformHelper_PackageHelper alloc] init]];
  [SPOTHelper setPackageHelperWithRAREUTiPackageHelper:[RAREaPlatformHelper packageHelper]];
}

+ (void)loadFontWithNSString:(NSString *)name
              withJavaNetURL:(JavaNetURL *)location
                withNSString:(NSString *)type {
  NSURL* fonturl=((NSURL*)location->proxy_);
  CTFontManagerRegisterFontsForURL((__bridge CFURLRef)(fonturl), kCTFontManagerScopeProcess,nil);
}

+ (void)performHapticFeedbackWithId:(id)view {
  AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);
}

+ (void)showVirtualKeyboardWithRAREiWidget:(id<RAREiWidget>)context {
  RAREView *v = [((id<RAREiPlatformComponent>) nil_chk([((id<RAREiWidget>) nil_chk(context)) getDataComponent])) getView];
  if ([v isKindOfClass:[RARETextFieldView class]]) {
    [((RARETextFieldView *) check_class_cast(v, [RARETextFieldView class])) setShowKeyBoardWithBoolean:YES];
  }
}

+ (RAREUIDimension *)stringSizeWithRAREUIFont:(RAREUIFont *)font
                                 withNSString:(NSString *)text
                          withRAREUIDimension:(RAREUIDimension *)size {
  if(size==nil)  {
    size=[[RAREUIDimension alloc]init];
  }
  if(text==nil) {
    size->width_=0;
    size->height_=0;
  }
  else {
    NSMutableDictionary* att=[RAREaAppleGraphics addDictionaryAttributeWithNSString:NSFontAttributeName withId:[font getIOSProxy] withBoolean:YES];
    CGSize ss=[text sizeWithAttributes:att];
    size->width_ = (int)ceil(ss.width);
    size->height_ = (int)ceil(ss.height);
  }
  return size;
}

+ (int)stringWidthWithRAREUIFont:(RAREUIFont *)font
                    withNSString:(NSString *)text {
  NSMutableDictionary* att=[RAREaAppleGraphics addDictionaryAttributeWithNSString:NSFontAttributeName withId:[font getIOSProxy] withBoolean:YES];
  CGSize ss=[text sizeWithAttributes:att];
  return (int)ceil(ss.width);
}

+ (void)systemAlertWithRAREiWidget:(id<RAREiWidget>)context
                            withId:(id)message
           withRAREiActionListener:(id<RAREiActionListener>)listener {
  [[UIApplication sharedApplication] cancelAllLocalNotifications];
  
  UILocalNotification *localNotification = [[UILocalNotification alloc] init];
  
  NSDate *now = [NSDate date];
  NSDate *dateToFire = [now dateByAddingTimeInterval:1];
  
  localNotification.fireDate = dateToFire;
  localNotification.alertBody = [message description];
  localNotification.soundName = UILocalNotificationDefaultSoundName;
  
  NSDictionary *infoDict = [NSMutableDictionary dictionaryWithObjectsAndKeys:listener, @"listener",nil];
  localNotification.userInfo = infoDict;
  
  [[UIApplication sharedApplication] scheduleLocalNotification:localNotification];
}

+ (void)setScreenOrientationWithId:(id)orientation {
  if([orientation isKindOfClass:[NSNumber class]]) {
    NSUInteger o= [((NSNumber *) orientation) unsignedIntegerValue];
    UIWindow* window=[[RAREAPApplication getInstance] getMainWindow];
    [((RAREUIViewController*)window.rootViewController) setOrientationEx:o];
  }
}

+ (void)setShortcutWithRAREUIMenuItem:(RAREUIMenuItem *)mi
                         withNSString:(NSString *)keystroke {
}

+ (void)setThemeWithBoolean:(BOOL)dark {
  [UIApplication sharedApplication].statusBarStyle=dark ? UIStatusBarStyleLightContent : UIStatusBarStyleDefault;
}

+ (id<JavaUtilList>)getAvailableFontNames {
  NSArray* names=[UIFont familyNames];
  return [AppleHelper toArrayList:names];
}

+ (id<JavaUtilList>)getAvailableFonts {
  RAREUIFont* font;
  NSArray* names=[UIFont familyNames];
  int len=(int)[names count];
  int size=[UIFont systemFontSize];
  JavaUtilArrayList* list=[[JavaUtilArrayList alloc] initWithInt:len];
  for(int i=0;i<len;i++) {
    font=[[RAREUIFont alloc]initWithNSString:[names objectAtIndex:i] withInt:0 withInt:size];
    [list addWithId:font];
  }
  return list;
}

+ (int)getCharacterWidthWithRAREUIFont:(RAREUIFont *)font {
  return [RAREPlatformHelper stringWidthWithRAREUIFont:font withNSString:@"m"];
}

+ (id)getDeviceConfiguration {
  return [RAREPlatformHelper getScreenOrientation];
}

+ (float)getFontHeightWithRAREUIFont:(RAREUIFont *)font
                         withBoolean:(BOOL)full {
  UIFont *f=(UIFont*)[font getIOSProxy];
  return full ? f.lineHeight-f.descender : f.lineHeight;
}

+ (int)getFormsDefaultScreenResolution {
  return 72;
}

+ (RAREUIImage *)getImageFromResourceFileNameWithNSString:(NSString *)name {
  UIImage* img=[UIImage imageNamed: name];
  return img ? [[RAREUIImage alloc] initWithId: img] : nil;
}

+ (int)getScreenWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  return (c == nil) ? -1 : [RAREPlatformHelper getScreenExWithId:[c getProxy]];
}

+ (RAREUIRectangle *)getScreenBounds {
  UIScreen* s=[UIScreen mainScreen];
  return [RAREUIRectangle fromRect:[s orientedBounds]];
}

+ (RAREUIRectangle *)getScreenBoundsWithInt:(int)screen {
  if(screen==-1) {
    return nil;
  }
  UIScreen* s=[UIScreen screens][screen];
  return [RAREUIRectangle fromRect:[s orientedBounds]];
}

+ (int)getScreenCount {
  return (int)[[UIScreen screens] count];
}

+ (NSString *)getScreenDensityName {
  return ([RAREScreenUtils getDensity] > 1) ? @"xhdpi" : @"mdpi";
}

+ (int)getScreenHeight {
  return (int)[UIScreen currentSize].height;
}

+ (int)getScreenHeightWithInt:(int)screen {
  if(screen==-1) {
    return 0;
  }
  UIScreen* s=[UIScreen screens][screen];
  return [s orientedBounds].size.height;
}

+ (id)getScreenOrientation {
  UIWindow* window=[[RAREAPApplication getInstance] getMainWindow];
  NSUInteger o=[(RAREUIViewController*)window.rootViewController getOrientationEx];
  return [NSNumber numberWithUnsignedInteger:o];
}

+ (int)getScreenRotation {
  int rotationAngle = 0;
  UIInterfaceOrientation orientation = [UIApplication sharedApplication].statusBarOrientation;
  if (orientation == UIDeviceOrientationPortraitUpsideDown) rotationAngle = 180;
  else if (orientation == UIDeviceOrientationLandscapeLeft) rotationAngle = 90;
  else if (orientation == UIDeviceOrientationLandscapeRight) rotationAngle = -90;
  return rotationAngle;
}

+ (int)getScreenRotationWithId:(id)orientation {
  if([orientation isKindOfClass:[NSNumber class]]) {
    int o=[((NSNumber*)orientation) intValue];
    if (o == UIDeviceOrientationPortraitUpsideDown) return 180;
    else if (o == UIDeviceOrientationLandscapeLeft) return 90;
    else if (o == UIDeviceOrientationLandscapeRight) return -90;
  }
  return 0;
}

+ (int)getScreenRotationForConfigurationWithId:(id)configuration {
  if (configuration == nil) {
    return [RAREPlatformHelper getScreenRotation];
  }
  if ([configuration isKindOfClass:[RAREWindowDeviceConfiguration class]]) {
    RAREWindowDeviceConfiguration *cfg = (RAREWindowDeviceConfiguration *) check_class_cast(configuration, [RAREWindowDeviceConfiguration class]);
    return (((RAREWindowDeviceConfiguration *) nil_chk(cfg))->width_ > cfg->height_) ? 90 : 0;
  }
  return [RAREPlatformHelper getScreenRotationWithId:configuration];
}

+ (RAREUIDimension *)getScreenSize {
  UIScreen* screen=[UIScreen mainScreen];
  CGSize size=[screen orientedBounds].size;
  return [[RAREUIDimension alloc] initWithFloat:size.width withFloat:size.height];
}

+ (RAREUIDimension *)getScreenSizeWithInt:(int)screen {
  if(screen==-1) {
    return nil;
  }
  UIScreen* s=[UIScreen screens][screen];
  CGSize size=[s orientedBounds].size;
  return [[RAREUIDimension alloc] initWithFloat:size.width withFloat:size.height];
}

+ (RAREUIDimension *)getScreenSizeForConfigurationWithId:(id)configuration {
  if ([configuration isKindOfClass:[RAREWindowDeviceConfiguration class]]) {
    RAREWindowDeviceConfiguration *cfg = (RAREWindowDeviceConfiguration *) check_class_cast(configuration, [RAREWindowDeviceConfiguration class]);
    return [((RAREWindowDeviceConfiguration *) nil_chk(cfg)) getSize];
  }
  return [RAREPlatformHelper getScreenSizeForConfigurationExWithId:configuration];
}

+ (RAREUIDimension *)getScreenSizeForConfigurationExWithId:(id)configuration {
  UIScreen* screen=[UIScreen mainScreen];
  CGSize size;
  if([configuration isKindOfClass:[NSNumber class]]) {
    if([screen respondsToSelector:@selector(nativeBounds)]) {
      size=screen.nativeBounds.size;
    }
    else {
      size=[screen bounds].size;
    }
    int o=[((NSNumber*)configuration) intValue];
    if(o == UIDeviceOrientationLandscapeLeft || o==UIDeviceOrientationLandscapeRight) {
      CGFloat w=size.width;
      size.width=size.height;
      size.height=w;
    }
  }
  else {
    size=[screen orientedBounds].size;
  }
  return [[RAREUIDimension alloc] initWithFloat:size.width withFloat:size.height];
}

+ (int)getScreenWidth {
  return (int)[UIScreen currentSize].width;
}

+ (int)getScreenWidthWithInt:(int)screen {
  if(screen==-1) {
    return 0;
  }
  UIScreen* s=[UIScreen screens][screen];
  return [s orientedBounds].size.width;
}

+ (RAREUIColor *)getSystemBackground {
  return RAREPlatformHelper_background_;
}

+ (RAREUIFont *)getSystemFont {
  return RAREPlatformHelper_systemFont_;
}

+ (RAREUIColor *)getSystemForeground {
  return RAREPlatformHelper_foreground_;
}

+ (float)getTouchSlop {
  return 10;
}

+ (RAREUIRectangle *)getUsableScreenBounds {
  return [RAREPlatformHelper getUsableScreenBoundsWithInt:0];
}

+ (RAREUIRectangle *)getUsableScreenBoundsWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)c {
  int n = (c == nil) ? -1 : [RAREPlatformHelper getScreenWithRAREiPlatformComponent:c];
  if (n == -1) {
    n = 0;
  }
  return [RAREPlatformHelper getUsableScreenBoundsWithInt:n];
}

+ (RAREUIRectangle *)getUsableScreenBoundsWithInt:(int)screen {
  if(screen==-1) {
    return 0;
  }
  UIScreen* s=[UIScreen screens][screen];
  return [RAREUIRectangle fromRect:[s orientedFrame]];
}

+ (BOOL)hasEscapeButton {
  return NO;
}

+ (BOOL)hasPhysicalKeyboard {
  return NO;
}

+ (BOOL)hasPointingDevice {
  return NO;
}

+ (BOOL)isHighDensity {
  return RAREPlatformHelper_density_ > 1.5f;
}

+ (BOOL)isLandscapeOrientationWithId:(id)orientation {
  if ([orientation isKindOfClass:[RAREWindowDeviceConfiguration class]]) {
    RAREWindowDeviceConfiguration *cfg = (RAREWindowDeviceConfiguration *) check_class_cast(orientation, [RAREWindowDeviceConfiguration class]);
    return ((RAREWindowDeviceConfiguration *) nil_chk(cfg))->width_ > cfg->height_;
  }
  return [RAREPlatformHelper isLandscapeOrientationExWithId:orientation];
}

+ (BOOL)isLandscapeOrientationExWithId:(id)orientation {
  if([orientation isKindOfClass:[NSNumber class]]) {
    int o=[((NSNumber*)orientation) intValue];
    return (o == UIDeviceOrientationLandscapeLeft || o==UIDeviceOrientationLandscapeRight);
  }
  return NO;
}

+ (BOOL)isLeftToRightOrientationWithRAREiParentComponent:(id<RAREiParentComponent>)target {
  return YES;
}

+ (BOOL)isLowDensity {
  return RAREPlatformHelper_density_ == 1.0f;
}

+ (BOOL)isMediumDensity {
  return (RAREPlatformHelper_density_ > 1) && (RAREPlatformHelper_density_ < 2);
}

+ (int)getScreenExWithId:(id)nsview {
  UIWindow* window;
  if([nsview isKindOfClass:[UIWindow class]]) {
    window=(UIWindow*)nsview;
  }
  else {
    UIView *view=(UIView*)nsview;
    window=[view window];
  }
  if(window==nil) {
    return -1;
  }
  UIScreen* screen=[window screen];
  if(screen==nil) {
    return -1;
  }
  return (int)[[UIScreen screens] indexOfObject:screen];
}

+ (void)initializeUIDefaults {
  RAREPlatformHelper_foreground_=[RAREUIColor BLACK];
  RAREPlatformHelper_background_=[RAREUIColor WHITE];
  UIFont* font=[UIFont systemFontOfSize:[UIFont systemFontSize]];
  RAREPlatformHelper_systemFont_=[[RAREUIFont alloc]initWithId:font];
  RAREPlatformHelper_density_=[UIScreen mainScreen].scale;
}

+ (int)getMonitorWithRAREView:(RAREView *)view {
  UIView* v=((UIView*)view->proxy_);
  if(!v.window) {
    return -1;
  }
  UIScreen* s=[[v window] screen];
  return (int)[[UIScreen screens] indexOfObject: s];
}

+ (BOOL)lockOrientationWithJavaLangBoolean:(JavaLangBoolean *)landscape {
  [RAREPlatformHelper lockOrientationExWithBoolean:(landscape == nil) ? [RAREPlatformHelper isLandscapeOrientationWithId:nil] : [landscape booleanValue]];
  return YES;
}

+ (void)lockOrientationExWithBoolean:(BOOL)landscape {
  UIWindow* window=[[RAREAPApplication getInstance] getMainWindow];
  [(RAREUIViewController*)window.rootViewController lockOrientation: landscape];
}

+ (void)unlockOrientation {
  UIWindow* window=[[RAREAPApplication getInstance] getMainWindow];
  [(RAREUIViewController*)window.rootViewController unlockOrientation];
}

+ (id)createColorWheelWithRAREiWidget:(id<RAREiWidget>)context {
  return nil;
}

+ (void)setUseDarkStatusBarTextWithBoolean:(BOOL)dark {
  UIWindow* window=[[RAREAPApplication getInstance] getMainWindow];
  [((RAREUIViewController*)window.rootViewController) setUseDarkStatusBarText: dark];
}

+ (id)getConfigurationWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)comp {
  return [RAREPlatformHelper getDeviceConfiguration];
}

+ (void)setOptimizationEnabledWithBoolean:(BOOL)enabled {
}

+ (RAREUISound *)getSoundResourceWithNSString:(NSString *)sound {
  int n = [((NSString *) nil_chk(sound)) indexOf:'.'];
  NSString *ext = @"mp3";
  if (n != -1) {
    ext = [sound substring:n + 1];
    sound = [sound substring:0 endIndex:n];
  }
  sound = [RAREaAppContextImpl makeResourcePathWithNSString:@"raw" withNSString:sound withNSString:ext];
  return [RAREPlatformHelper getSoundWithJavaNetURL:[RAREaPlatformHelper fileToURLWithNSString:sound]];
}

+ (RAREUISound *)getSoundWithJavaNetURL:(JavaNetURL *)resourceURL {
  NSError* error=nil;
  NSURL* url=[resourceURL getNSURL];
  AVAudioPlayer* p = [[AVAudioPlayer alloc] initWithContentsOfURL:url error:&error];
  if(error) {
    @throw [[RAREApplicationException alloc] initWithNSString:[AppleHelper toErrorString:error]];
  }
  return [[RAREUISound alloc] initWithId: p];
}

+ (void)stopSoundWithId:(id)platformSound {
  AVAudioPlayer* p=(AVAudioPlayer*) platformSound;
  [p stop];
}

+ (void)disposeOfSoundWithId:(id)platformSound {
}

+ (void)playSoundWithId:(id)platformSound {
  AVAudioPlayer* p=(AVAudioPlayer*) platformSound;
  [p play];
}

+ (void)pauseSoundWithId:(id)platformSound {
  AVAudioPlayer* p=(AVAudioPlayer*) platformSound;
  [p pause];
}

+ (void)resumeSoundWithId:(id)platformSound {
  AVAudioPlayer* p=(AVAudioPlayer*) platformSound;
  [p play];
}

+ (id)setVolumeWithId:(id)platformSound
              withInt:(int)percent {
  AVAudioPlayer* p=(AVAudioPlayer*) platformSound;
  if(percent>100) {
    percent=100;
  }
  p.volume=(CGFloat)percent/100;
  return p;
}

+ (void)beep {
  #if TARGET_OS_IPHONE
  AudioServicesPlaySystemSound (kSystemSoundID_Vibrate);
  #else
  NSBeep();
  #endif
}

+ (RAREUIColorShade *)getColorStateListWithRAREUIColor:(RAREUIColor *)fg
                                       withRAREUIColor:(RAREUIColor *)disabled {
  return [[RAREUIColorShade alloc] initWithRARESimpleColorStateList:[[RARESimpleColorStateList alloc] initWithRAREUIColor:fg withRAREUIColor:disabled]];
}

+ (RAREUIColorShade *)getColorStateListWithRAREUIColor:(RAREUIColor *)fg
                                       withRAREUIColor:(RAREUIColor *)disabled
                                       withRAREUIColor:(RAREUIColor *)pressed {
  RARESimpleColorStateList *csl = [[RARESimpleColorStateList alloc] initWithRAREUIColor:fg withRAREUIColor:disabled];
  [csl setSelectedPressedColorWithRAREUIColor:pressed];
  return [[RAREUIColorShade alloc] initWithRARESimpleColorStateList:csl];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL },
    { "createDateButtonView", NULL, "LRAREView", 0x9, NULL },
    { "createWindowWithBoolean:withBoolean:withBoolean:", NULL, "LRAREWindow", 0x9, NULL },
    { "createNakedButtonWithRAREiPlatformComponent:withBoolean:withInt:", NULL, "LRAREiActionComponent", 0x9, NULL },
    { "createNakedButtonViewWithBoolean:", NULL, "LRAREView", 0x9, NULL },
    { "hideVirtualKeyboardExWithId:", NULL, "V", 0x10a, NULL },
    { "loadFontWithNSString:withJavaNetURL:withNSString:", NULL, "V", 0x109, NULL },
    { "performHapticFeedbackWithId:", NULL, "V", 0x109, NULL },
    { "stringSizeWithRAREUIFont:withNSString:withRAREUIDimension:", NULL, "LRAREUIDimension", 0x109, NULL },
    { "stringWidthWithRAREUIFont:withNSString:", NULL, "I", 0x109, NULL },
    { "systemAlertWithRAREiWidget:withId:withRAREiActionListener:", NULL, "V", 0x109, NULL },
    { "setScreenOrientationWithId:", NULL, "V", 0x109, NULL },
    { "setThemeWithBoolean:", NULL, "V", 0x109, NULL },
    { "getAvailableFontNames", NULL, "LJavaUtilList", 0x109, NULL },
    { "getAvailableFonts", NULL, "LJavaUtilList", 0x109, NULL },
    { "getDeviceConfiguration", NULL, "LNSObject", 0x9, NULL },
    { "getFontHeightWithRAREUIFont:withBoolean:", NULL, "F", 0x109, NULL },
    { "getImageFromResourceFileNameWithNSString:", NULL, "LRAREUIImage", 0x109, NULL },
    { "getScreenBounds", NULL, "LRAREUIRectangle", 0x109, NULL },
    { "getScreenBoundsWithInt:", NULL, "LRAREUIRectangle", 0x109, NULL },
    { "getScreenCount", NULL, "I", 0x109, NULL },
    { "getScreenDensityName", NULL, "LNSString", 0x9, NULL },
    { "getScreenHeight", NULL, "I", 0x109, NULL },
    { "getScreenHeightWithInt:", NULL, "I", 0x109, NULL },
    { "getScreenOrientation", NULL, "LNSObject", 0x109, NULL },
    { "getScreenRotation", NULL, "I", 0x109, NULL },
    { "getScreenRotationWithId:", NULL, "I", 0x109, NULL },
    { "getScreenSize", NULL, "LRAREUIDimension", 0x109, NULL },
    { "getScreenSizeWithInt:", NULL, "LRAREUIDimension", 0x109, NULL },
    { "getScreenSizeForConfigurationWithId:", NULL, "LRAREUIDimension", 0x9, NULL },
    { "getScreenSizeForConfigurationExWithId:", NULL, "LRAREUIDimension", 0x108, NULL },
    { "getScreenWidth", NULL, "I", 0x109, NULL },
    { "getScreenWidthWithInt:", NULL, "I", 0x109, NULL },
    { "getSystemBackground", NULL, "LRAREUIColor", 0x9, NULL },
    { "getSystemFont", NULL, "LRAREUIFont", 0x9, NULL },
    { "getSystemForeground", NULL, "LRAREUIColor", 0x9, NULL },
    { "getUsableScreenBounds", NULL, "LRAREUIRectangle", 0x9, NULL },
    { "getUsableScreenBoundsWithRAREiPlatformComponent:", NULL, "LRAREUIRectangle", 0x9, NULL },
    { "getUsableScreenBoundsWithInt:", NULL, "LRAREUIRectangle", 0x109, NULL },
    { "hasEscapeButton", NULL, "Z", 0x9, NULL },
    { "hasPhysicalKeyboard", NULL, "Z", 0x9, NULL },
    { "hasPointingDevice", NULL, "Z", 0x9, NULL },
    { "isHighDensity", NULL, "Z", 0x9, NULL },
    { "isLandscapeOrientationWithId:", NULL, "Z", 0x9, NULL },
    { "isLandscapeOrientationExWithId:", NULL, "Z", 0x108, NULL },
    { "isLeftToRightOrientationWithRAREiParentComponent:", NULL, "Z", 0x9, NULL },
    { "isLowDensity", NULL, "Z", 0x9, NULL },
    { "isMediumDensity", NULL, "Z", 0x9, NULL },
    { "getScreenExWithId:", NULL, "I", 0x108, NULL },
    { "initializeUIDefaults", NULL, "V", 0x10a, NULL },
    { "getMonitorWithRAREView:", NULL, "I", 0x10a, NULL },
    { "lockOrientationWithJavaLangBoolean:", NULL, "Z", 0x9, NULL },
    { "lockOrientationExWithBoolean:", NULL, "V", 0x109, NULL },
    { "unlockOrientation", NULL, "V", 0x109, NULL },
    { "createColorWheelWithRAREiWidget:", NULL, "LNSObject", 0x9, NULL },
    { "setUseDarkStatusBarTextWithBoolean:", NULL, "V", 0x109, NULL },
    { "getConfigurationWithRAREiPlatformComponent:", NULL, "LNSObject", 0x9, NULL },
    { "getSoundResourceWithNSString:", NULL, "LRAREUISound", 0x9, NULL },
    { "getSoundWithJavaNetURL:", NULL, "LRAREUISound", 0x109, NULL },
    { "stopSoundWithId:", NULL, "V", 0x109, NULL },
    { "playSoundWithId:", NULL, "V", 0x109, NULL },
    { "pauseSoundWithId:", NULL, "V", 0x109, NULL },
    { "resumeSoundWithId:", NULL, "V", 0x109, NULL },
    { "setVolumeWithId:withInt:", NULL, "LNSObject", 0x109, NULL },
    { "beep", NULL, "V", 0x109, NULL },
    { "getColorStateListWithRAREUIColor:withRAREUIColor:", NULL, "LRAREUIColorShade", 0x9, NULL },
    { "getColorStateListWithRAREUIColor:withRAREUIColor:withRAREUIColor:", NULL, "LRAREUIColorShade", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "screenDpi_", NULL, 0x19, "F" },
    { "density_", NULL, 0x8, "F" },
    { "background_", NULL, 0x8, "LRAREUIColor" },
    { "foreground_", NULL, 0x8, "LRAREUIColor" },
    { "systemFont_", NULL, 0x8, "LRAREUIFont" },
  };
  static J2ObjcClassInfo _RAREPlatformHelper = { "PlatformHelper", "com.appnativa.rare.platform", NULL, 0x1, 67, methods, 5, fields, 0, NULL};
  return &_RAREPlatformHelper;
}

@end
