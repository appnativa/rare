//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/ios/com/appnativa/rare/platform/apple/ui/view/ScrollView.java
//
//  Created by decoteaud on 12/8/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/platform/apple/ui/view/ParentView.h"
#include "com/appnativa/rare/platform/apple/ui/view/ScrollBarView.h"
#include "com/appnativa/rare/platform/apple/ui/view/ScrollView.h"
#include "com/appnativa/rare/platform/apple/ui/view/View.h"
#include "com/appnativa/rare/platform/apple/ui/view/aPlatformTableBasedView.h"
#include "com/appnativa/rare/platform/apple/ui/view/aView.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/Container.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIPoint.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iScrollerSupport.h"
#include "com/appnativa/rare/ui/painter/UIScrollingEdgePainter.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "java/lang/IllegalArgumentException.h"
#import "RAREAPScrollView.h"

@implementation RAREScrollView

- (id)init {
  if (self = [super initWithId:[RAREScrollView createProxy]]) {
    hasVerticalScrollbar_ = YES;
    hasHorizontalScrollbar_ = YES;
    measureSize_ = [[RAREUIDimension alloc] init];
  }
  return self;
}

- (id)initWithId:(id)uiview {
  if (self = [super initWithId:uiview]) {
    hasVerticalScrollbar_ = YES;
    hasHorizontalScrollbar_ = YES;
    measureSize_ = [[RAREUIDimension alloc] init];
  }
  return self;
}

- (void)addWithInt:(int)position
      withRAREView:(RAREView *)view {
  [self setContentViewWithRAREView:view];
}

- (void)setHeaderViewWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)ss {
  [self turnOffScrollBarVisibilityWithRAREiScrollerSupport:ss withBoolean:YES];
  [self syncScrollingWithRAREiScrollerSupport:ss withBoolean:NO];
}

- (void)setFooterViewWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)ss {
  [self setShowsHorizontalScrollIndicatorWithBoolean:NO];
  [self syncScrollingWithRAREiScrollerSupport:ss withBoolean:NO];
}

- (void)setRowHeaderViewWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)ss {
  [self turnOffScrollBarVisibilityWithRAREiScrollerSupport:ss withBoolean:NO];
  [self syncScrollingWithRAREiScrollerSupport:ss withBoolean:YES];
}

- (void)setRowFooterViewWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)rowFooterView {
  [self setShowsVerticalScrollIndicatorWithBoolean:NO];
  [self syncScrollingWithRAREiScrollerSupport:rowFooterView withBoolean:YES];
}

- (void)layoutWithRAREParentView:(RAREParentView *)view
                       withFloat:(float)width
                       withFloat:(float)height {
  if (!([component_ isKindOfClass:[RAREContainer class]])) {
    return;
  }
  RAREContainer *parent = (RAREContainer *) check_class_cast(component_, [RAREContainer class]);
  if ([((RAREContainer *) nil_chk(parent)) getComponentCount] == 0) {
    return;
  }
  RAREComponent *c = (RAREComponent *) check_class_cast([parent getComponentAtWithInt:0], [RAREComponent class]);
  (void) [((RAREComponent *) nil_chk(c)) getPreferredSizeWithRAREUIDimension:measureSize_ withFloat:(int) width];
  float w = ((RAREUIDimension *) nil_chk(measureSize_))->width_;
  float h = measureSize_->height_;
  if (w < width) {
    w = width;
  }
  if (h < height) {
    h = height;
  }
  if (!hasHorizontalScrollbar_) {
    w = width;
  }
  if (!hasVerticalScrollbar_) {
    h = height;
  }
  [c setSizeWithFloat:w withFloat:h];
  [self setContentSizeWithFloat:w withFloat:h];
}

- (void)syncScrollingWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)ss
                                  withBoolean:(BOOL)vertical {
  if (vertical) {
    if (vScrollSynchronizer_ == nil) {
      vScrollSynchronizer_ = [[RAREUTIdentityArrayList alloc] initWithInt:2];
    }
    [((RAREUTIdentityArrayList *) nil_chk(vScrollSynchronizer_)) addIfNotPresentWithId:ss];
  }
  else {
    if (hScrollSynchronizer_ == nil) {
      hScrollSynchronizer_ = [[RAREUTIdentityArrayList alloc] initWithInt:2];
    }
    [((RAREUTIdentityArrayList *) nil_chk(hScrollSynchronizer_)) addIfNotPresentWithId:ss];
  }
}

- (BOOL)isAtBottomEdge {
  if(!hasVerticalScrollbar_) {
    return YES;
  }
  UIScrollView* sv=(UIScrollView*)proxy_;
  CGPoint p=sv.contentOffset;
  CGSize size=sv.contentSize;
  return size.height-p.y<=sv.frame.size.height;
}

- (void)scrollToLeftEdge {
  UIScrollView* sv=(UIScrollView*)proxy_;
  CGPoint p=sv.contentOffset;
  if(p.x!=0) {
    p.x=0;
    sv.contentOffset=p;
  }
}

- (void)scrollToTopEdge {
  UIScrollView* sv=(UIScrollView*)proxy_;
  CGPoint p=sv.contentOffset;
  if(p.y!=0) {
    p.y=0;
    sv.contentOffset=p;
  }
}

- (void)scrollToRightEdge {
  UIScrollView* sv=(UIScrollView*)proxy_;
  CGPoint p=sv.contentOffset;
  CGSize size=sv.contentSize;
  CGFloat x=MAX(size.width-sv.frame.size.width,0);
  if(p.x!=x) {
    p.x=x;
    sv.contentOffset=p;
  }
}

- (void)scrollToBottomEdge {
  UIScrollView* sv=(UIScrollView*)proxy_;
  CGPoint p=sv.contentOffset;
  CGSize size=sv.contentSize;
  CGFloat y=MAX(size.height-sv.frame.size.height,0);
  if(p.y!=y) {
    p.y=y;
    sv.contentOffset=p;
  }
}

- (BOOL)isAtLeftEdge {
  if(!hasHorizontalScrollbar_) {
    return YES;
  }
  return ((UIScrollView*)proxy_).contentOffset.x==0;
}

- (BOOL)isAtRightEdge {
  if(!hasHorizontalScrollbar_) {
    return YES;
  }
  UIScrollView* sv=(UIScrollView*)proxy_;
  CGPoint p=sv.contentOffset;
  CGSize size=sv.contentSize;
  return size.width-p.x<=sv.frame.size.width;
}

- (BOOL)isAtTopEdge {
  if(!hasVerticalScrollbar_) {
    return YES;
  }
  return ((UIScrollView*)proxy_).contentOffset.y==0;
}

- (void)removeChildren {
}

- (void)setScrollBarListenersWithRAREaPlatformTableBasedView:(RAREaPlatformTableBasedView *)view {
  RAREScrollBarView *h = nil;
  RAREScrollBarView *v = nil;
  if ((hsb_ != nil) && [hsb_ hasListener]) {
    h = hsb_;
    hsb_ = nil;
  }
  if ((vsb_ != nil) && [vsb_ hasListener]) {
    v = vsb_;
    vsb_ = nil;
  }
  [((RAREaPlatformTableBasedView *) nil_chk(view)) setScrollBarViewsWithRAREScrollBarView:h withRAREScrollBarView:v];
}

- (void)unwrap {
  if (hsb_ != nil) {
    [hsb_ dispose];
  }
  if (vsb_ != nil) {
    [vsb_ dispose];
  }
  proxy_ = nil;
  hsb_ = nil;
  vsb_ = nil;
}

+ (RAREScrollView *)wrapWithId:(id)uiview {
  RAREScrollView *sv = [[RAREScrollView alloc] init];
  sv->proxy_ = uiview;
  return sv;
}

- (void)setAutoHideScrollbarsWithBoolean:(BOOL)autoHide {
}

- (void)setComponentWithRAREComponent:(RAREComponent *)component {
  if (!([component isKindOfClass:[RAREContainer class]])) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"must be a Container"];
  }
  [super setComponentWithRAREComponent:component];
}

- (void)setContentViewWithRAREView:(RAREView *)view {
  [((UIScrollView*)proxy_) addSubview: (UIView*)view->proxy_];
}

- (void)setShowsHorizontalScrollIndicatorWithBoolean:(BOOL)show {
  hasVerticalScrollbar_=show;
  UIScrollView* sv=(UIScrollView*)proxy_;
  [sv setShowsHorizontalScrollIndicator: show];
}

- (void)setShowsVerticalScrollIndicatorWithBoolean:(BOOL)show {
  hasVerticalScrollbar_=show;
  UIScrollView* sv=(UIScrollView*)proxy_;
  [sv setShowsVerticalScrollIndicator: show];
}

- (void)setScrollEnabledWithBoolean:(BOOL)enabled {
  UIScrollView* sv=(UIScrollView*)proxy_;
  sv.scrollEnabled=enabled;
}

- (RAREScrollBarView *)getHorizontalScrollBar {
  if (hsb_ == nil) {
    hsb_ = [[RAREScrollBarView alloc] initWithRAREScrollView:self withBoolean:YES];
  }
  return hsb_;
}

- (void)getMinimumSizeWithRAREUIDimension:(RAREUIDimension *)size
                                withFloat:(float)maxWidth {
  ((RAREUIDimension *) nil_chk(size))->width_ = size->height_ = [RAREUIScreen PLATFORM_PIXELS_16] * 2;
  id<RAREiPlatformBorder> border = [((RAREComponent *) nil_chk(component_)) getBorder];
  RAREUIInsets *insets = (border == nil) ? nil : [border getBorderInsetsWithRAREUIInsets:nil];
  if (insets != nil) {
    size->width_ += insets->left_ + insets->right_;
    size->height_ += insets->top_ + insets->bottom_;
  }
}

- (RAREUIDimension *)getPreferredSizeWithRAREParentView:(RAREParentView *)view {
  RAREUIDimension *size = [[RAREUIDimension alloc] initWithFloat:0 withFloat:0];
  [self getPreferredSizeWithRAREUIDimension:size withFloat:0];
  return size;
}

- (void)getPreferredSizeWithRAREUIDimension:(RAREUIDimension *)size
                                  withFloat:(float)maxWidth {
  RAREContainer *container = (RAREContainer *) check_class_cast(component_, [RAREContainer class]);
  RAREComponent *child = nil;
  if ([((RAREContainer *) nil_chk(container)) getComponentCount] > 0) {
    child = (RAREComponent *) check_class_cast([container getComponentAtWithInt:0], [RAREComponent class]);
    (void) [((RAREComponent *) nil_chk(child)) getPreferredSizeWithRAREUIDimension:size withFloat:maxWidth];
  }
  id<RAREiPlatformBorder> border = [container getBorder];
  RAREUIInsets *insets = (border == nil) ? nil : [border getBorderInsetsWithRAREUIInsets:nil];
  if (insets != nil) {
    ((RAREUIDimension *) nil_chk(size))->width_ += insets->left_ + insets->right_;
    size->height_ += insets->top_ + insets->bottom_;
  }
}

- (RAREScrollBarView *)getVerticalScrollBar {
  if (vsb_ == nil) {
    vsb_ = [[RAREScrollBarView alloc] initWithRAREScrollView:self withBoolean:NO];
  }
  return vsb_;
}

- (BOOL)hasHorizontalScrollBar {
  return hasHorizontalScrollbar_;
}

- (BOOL)hasVerticalScrollBar {
  return hasVerticalScrollbar_;
}

- (BOOL)isScrollView {
  return YES;
}

- (BOOL)isScrolling {
  return ((UIScrollView*)proxy_).dragging;
}

+ (id)createProxy {
  return [[RAREAPScrollView alloc]init];
}

- (void)createOverlayViewWithBoolean:(BOOL)wi {
  [((RAREAPScrollView*)proxy_) createOverlayView: wi];
}

- (void)disposeEx {
  [super disposeEx];
  if (hScrollSynchronizer_ != nil) {
    [hScrollSynchronizer_ clear];
  }
  if (vScrollSynchronizer_ != nil) {
    [vScrollSynchronizer_ clear];
  }
  if (hsb_ != nil) {
    [hsb_ dispose];
  }
  if (vsb_ != nil) {
    [vsb_ dispose];
  }
  vScrollSynchronizer_ = nil;
  hScrollSynchronizer_ = nil;
  hsb_ = nil;
  vsb_ = nil;
  scrollingEdgePainter_ = nil;
}

- (void)removeOverlayView {
  [((RAREAPScrollView*)proxy_) removeOverlayView];
}

- (RAREUIPoint *)getContentOffset {
  CGPoint p=((RAREAPScrollView*)proxy_).contentOffset;
  return [[RAREUIPoint alloc] initWithFloat:p.x withFloat:p.y];
}

- (void)setContentSizeWithFloat:(float)w
                      withFloat:(float)h {
  ((UIScrollView*)proxy_).contentSize=CGSizeMake(w,h);
}

- (void)setContentOffsetWithFloat:(float)x
                        withFloat:(float)y {
  if(!inOnScrollChanged_) {
    ((RAREAPScrollView*)proxy_).contentOffset=CGPointMake(x,y);
  }
}

- (void)setScrollingEdgePainterWithRAREUIScrollingEdgePainter:(RAREUIScrollingEdgePainter *)painter {
  scrollingEdgePainter_ = painter;
  [self setPaintHandlerEnabledWithBoolean:YES];
  [self setSystemOverlayPainterExWithRAREiPlatformPainter:painter];
}

- (RAREUIScrollingEdgePainter *)getScrollingEdgePainter {
  return scrollingEdgePainter_;
}

- (void)moveUpDownWithBoolean:(BOOL)up
                  withBoolean:(BOOL)block {
  RAREAPScrollView* sv=(RAREAPScrollView*)proxy_;
  int increment=0;
  if(vsb_) {
    increment=block ? [vsb_ getBlockIncrement] : [vsb_ getUnitIncrement];
  }
  if(increment>0) {
    [sv moveUpDown:up increment:increment];
  }
  else {
    [sv moveUpDown:up block:block];
  }
}

- (void)moveLeftRightWithBoolean:(BOOL)left
                     withBoolean:(BOOL)block {
  RAREAPScrollView* sv=(RAREAPScrollView*)proxy_;
  int increment=0;
  if(hsb_) {
    increment=block ? [hsb_ getBlockIncrement] : [hsb_ getUnitIncrement];
  }
  if(increment>0) {
    [sv moveLeftRight:left increment:increment];
  }
  else {
    [sv moveLeftRight:left block:block];
  }
}

- (void)viewDidScrollWithFloat:(float)x
                     withFloat:(float)y {
  inOnScrollChanged_ = YES;
  if (vScrollSynchronizer_ != nil) {
    for (id<RAREiScrollerSupport> __strong ss in vScrollSynchronizer_) {
      [((id<RAREiScrollerSupport>) nil_chk(ss)) setContentOffsetWithFloat:0 withFloat:y];
    }
  }
  if (hScrollSynchronizer_ != nil) {
    for (id<RAREiScrollerSupport> __strong ss in hScrollSynchronizer_) {
      [((id<RAREiScrollerSupport>) nil_chk(ss)) setContentOffsetWithFloat:x withFloat:0];
    }
  }
  int xx = (int) x;
  int yy = (int) y;
  if (hsb_ != nil) {
    if (xx != offsetX_) {
      [hsb_ notifyChangeListeners];
    }
  }
  if (vsb_ != nil) {
    if (yy != offsetY_) {
      [vsb_ notifyChangeListeners];
    }
  }
  offsetX_ = xx;
  offsetY_ = yy;
  inOnScrollChanged_ = NO;
}

- (void)turnOffScrollBarVisibilityWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)ss
                                               withBoolean:(BOOL)horizontal {
  if ([(id) ss isKindOfClass:[RAREScrollView class]]) {
    if (horizontal) {
      [((RAREScrollView *) check_class_cast(ss, [RAREScrollView class])) setShowsHorizontalScrollIndicatorWithBoolean:NO];
    }
    else {
      [((RAREScrollView *) check_class_cast(ss, [RAREScrollView class])) setShowsVerticalScrollIndicatorWithBoolean:NO];
    }
  }
  else if ([(id) ss isKindOfClass:[RAREaPlatformTableBasedView class]]) {
    if (horizontal) {
      [((RAREaPlatformTableBasedView *) check_class_cast(ss, [RAREaPlatformTableBasedView class])) setShowsHorizontalScrollIndicatorWithBoolean:NO];
    }
    else {
      [((RAREaPlatformTableBasedView *) check_class_cast(ss, [RAREaPlatformTableBasedView class])) setShowsVerticalScrollIndicatorWithBoolean:NO];
    }
  }
}

- (void)copyAllFieldsTo:(RAREScrollView *)other {
  [super copyAllFieldsTo:other];
  other->hScrollSynchronizer_ = hScrollSynchronizer_;
  other->hasHorizontalScrollbar_ = hasHorizontalScrollbar_;
  other->hasVerticalScrollbar_ = hasVerticalScrollbar_;
  other->hsb_ = hsb_;
  other->inOnScrollChanged_ = inOnScrollChanged_;
  other->measureSize_ = measureSize_;
  other->offsetX_ = offsetX_;
  other->offsetY_ = offsetY_;
  other->scrollingEdgePainter_ = scrollingEdgePainter_;
  other->vScrollSynchronizer_ = vScrollSynchronizer_;
  other->vsb_ = vsb_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithId:", NULL, NULL, 0x4, NULL },
    { "isAtBottomEdge", NULL, "Z", 0x101, NULL },
    { "scrollToLeftEdge", NULL, "V", 0x101, NULL },
    { "scrollToTopEdge", NULL, "V", 0x101, NULL },
    { "scrollToRightEdge", NULL, "V", 0x101, NULL },
    { "scrollToBottomEdge", NULL, "V", 0x101, NULL },
    { "isAtLeftEdge", NULL, "Z", 0x101, NULL },
    { "isAtRightEdge", NULL, "Z", 0x101, NULL },
    { "isAtTopEdge", NULL, "Z", 0x101, NULL },
    { "wrapWithId:", NULL, "LRAREScrollView", 0x9, NULL },
    { "setAutoHideScrollbarsWithBoolean:", NULL, "V", 0x101, NULL },
    { "setContentViewWithRAREView:", NULL, "V", 0x101, NULL },
    { "setShowsHorizontalScrollIndicatorWithBoolean:", NULL, "V", 0x101, NULL },
    { "setShowsVerticalScrollIndicatorWithBoolean:", NULL, "V", 0x101, NULL },
    { "setScrollEnabledWithBoolean:", NULL, "V", 0x101, NULL },
    { "getHorizontalScrollBar", NULL, "LRAREScrollBarView", 0x1, NULL },
    { "getPreferredSizeWithRAREParentView:", NULL, "LRAREUIDimension", 0x1, NULL },
    { "getVerticalScrollBar", NULL, "LRAREScrollBarView", 0x1, NULL },
    { "hasHorizontalScrollBar", NULL, "Z", 0x1, NULL },
    { "hasVerticalScrollBar", NULL, "Z", 0x1, NULL },
    { "isScrollView", NULL, "Z", 0x1, NULL },
    { "isScrolling", NULL, "Z", 0x101, NULL },
    { "createProxy", NULL, "LNSObject", 0x108, NULL },
    { "createOverlayViewWithBoolean:", NULL, "V", 0x104, NULL },
    { "disposeEx", NULL, "V", 0x4, NULL },
    { "removeOverlayView", NULL, "V", 0x104, NULL },
    { "getContentOffset", NULL, "LRAREUIPoint", 0x101, NULL },
    { "setContentSizeWithFloat:withFloat:", NULL, "V", 0x102, NULL },
    { "setContentOffsetWithFloat:withFloat:", NULL, "V", 0x101, NULL },
    { "getScrollingEdgePainter", NULL, "LRAREUIScrollingEdgePainter", 0x1, NULL },
    { "moveUpDownWithBoolean:withBoolean:", NULL, "V", 0x101, NULL },
    { "moveLeftRightWithBoolean:withBoolean:", NULL, "V", 0x101, NULL },
    { "viewDidScrollWithFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "turnOffScrollBarVisibilityWithRAREiScrollerSupport:withBoolean:", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "hsb_", NULL, 0x4, "LRAREScrollBarView" },
    { "vsb_", NULL, 0x4, "LRAREScrollBarView" },
    { "hasVerticalScrollbar_", NULL, 0x4, "Z" },
    { "hasHorizontalScrollbar_", NULL, 0x4, "Z" },
    { "measureSize_", NULL, 0x4, "LRAREUIDimension" },
    { "scrollingEdgePainter_", NULL, 0x4, "LRAREUIScrollingEdgePainter" },
    { "offsetX_", NULL, 0x4, "I" },
    { "offsetY_", NULL, 0x4, "I" },
    { "hScrollSynchronizer_", NULL, 0x4, "LRAREUTIdentityArrayList" },
    { "vScrollSynchronizer_", NULL, 0x4, "LRAREUTIdentityArrayList" },
  };
  static J2ObjcClassInfo _RAREScrollView = { "ScrollView", "com.appnativa.rare.platform.apple.ui.view", NULL, 0x1, 34, methods, 10, fields, 0, NULL};
  return &_RAREScrollView;
}

@end
