//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/ios/com/appnativa/rare/platform/apple/ui/view/aPlatformTableBasedView.java
//
//  Created by decoteaud on 3/11/16.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/platform/apple/ui/ListSynchronizer.h"
#include "com/appnativa/rare/platform/apple/ui/util/AppleGraphics.h"
#include "com/appnativa/rare/platform/apple/ui/view/ScrollBarView.h"
#include "com/appnativa/rare/platform/apple/ui/view/ScrollView.h"
#include "com/appnativa/rare/platform/apple/ui/view/View.h"
#include "com/appnativa/rare/platform/apple/ui/view/aPlatformTableBasedView.h"
#include "com/appnativa/rare/platform/apple/ui/view/aTableBasedView.h"
#include "com/appnativa/rare/platform/apple/ui/view/aView.h"
#include "com/appnativa/rare/ui/ActionComponent.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/Component.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImage.h"
#include "com/appnativa/rare/ui/UIInsets.h"
#include "com/appnativa/rare/ui/UIPoint.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/Utils.h"
#include "com/appnativa/rare/ui/dnd/DnDConstants.h"
#include "com/appnativa/rare/ui/dnd/DropInformation.h"
#include "com/appnativa/rare/ui/dnd/RenderableDataItemTransferable.h"
#include "com/appnativa/rare/ui/event/ItemChangeEvent.h"
#include "com/appnativa/rare/ui/event/iItemChangeListener.h"
#include "com/appnativa/rare/ui/iListHandler.h"
#include "com/appnativa/rare/ui/iListView.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/iPlatformComponent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformListDataModel.h"
#include "com/appnativa/rare/ui/iPlatformRenderingComponent.h"
#include "com/appnativa/rare/ui/iScrollerSupport.h"
#include "com/appnativa/rare/ui/painter/PaintBucket.h"
#include "com/appnativa/rare/ui/painter/UIComponentPainter.h"
#include "com/appnativa/rare/ui/painter/UIScrollingEdgePainter.h"
#include "com/appnativa/rare/ui/painter/iPainter.h"
#include "com/appnativa/rare/ui/painter/iPlatformComponentPainter.h"
#include "com/appnativa/rare/ui/renderer/ListItemRenderer.h"
#include "com/appnativa/rare/ui/renderer/Renderers.h"
#include "com/appnativa/rare/ui/renderer/UILabelRenderer.h"
#include "com/appnativa/rare/ui/renderer/aListItemRenderer.h"
#include "com/appnativa/rare/ui/table/TableHelper.h"
#include "com/appnativa/rare/ui/tree/iTree.h"
#include "com/appnativa/rare/ui/tree/iTreeItem.h"
#include "com/appnativa/rare/viewer/aListViewer.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/appnativa/util/IntList.h"
#include "com/appnativa/util/SNumber.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"
#import "AppleHelper.h"
 #import "RAREUITableViewCell.h"
 #import "RAREUITableContentView.h"
 #import "RAREAPListView.h"
 #import "RAREImageWrapper.h"
 #import "APView+Component.h"
 #import <com/appnativa/rare/ui/text/HTMLCharSequence.h>

@implementation RAREaPlatformTableBasedView

static RARERenderableDataItem * RAREaPlatformTableBasedView_NULL_ITEM_;

+ (RARERenderableDataItem *)NULL_ITEM {
  return RAREaPlatformTableBasedView_NULL_ITEM_;
}

- (id)initWithId:(id)nsview {
  if (self = [super initWithId:nsview]) {
    dataOffset_ = 0;
    rows_ = [[JavaUtilArrayList alloc] init];
    useEditingAnimation_ = YES;
  }
  return self;
}

- (id<RAREiScrollerSupport>)getScrollerSupport {
  return self;
}

- (BOOL)isAtBottomEdge {
  UIScrollView* sv=(UIScrollView*)proxy_;
  CGPoint p=sv.contentOffset;
  CGSize size=sv.contentSize;
  return size.height-p.y<=sv.frame.size.height;
}

- (BOOL)isAtLeftEdge {
  return ((UIScrollView*)proxy_).contentOffset.x==0;
}

- (BOOL)isAtRightEdge {
  UIScrollView* sv=(UIScrollView*)proxy_;
  CGPoint p=sv.contentOffset;
  CGSize size=sv.contentSize;
  return size.width-p.x<=sv.frame.size.width;
}

- (BOOL)isAtTopEdge {
  return ((UIScrollView*)proxy_).contentOffset.y==0;
}

- (void)addSelectionIndexWithInt:(int)index {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  if(![table isRowSelected: index]) {
    if(!table.allowsMultipleSelection) {
      [self clearSelectionsWithBoolean:YES];
    }
    NSIndexPath* p=[table pathFromRow:index];
    [table selectRowAtIndexPath: p  animated: NO scrollPosition: UITableViewScrollPositionNone];
    [table repaintRow:index indexPath:p];
    [self itemSelectedWithInt: index];
  }
}

- (void)clearSelections {
  [self clearSelectionsWithBoolean:NO];
}

- (void)clearSelectionsWithBoolean:(BOOL)notify {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  NSIndexPath* p;
  if(table.allowsMultipleSelection) {
    NSArray* array=[table indexPathsForSelectedRows];
    int len=array ? (int)array.count : 0;
    for(int i=0;i<len;i++ ){
      p=[array objectAtIndex: i];
      [table deselectRowAtIndexPath:p animated:NO];
      [table repaintRow:i indexPath:p];
      if(notify) {
        [self itemDeselectedWithInt:[table rowFromPath: p]];
      }
    }
  }
  else {
    p=[table indexPathForSelectedRow];
    if(p) {
      [table deselectRowAtIndexPath:p animated:NO];
      [table repaintRow: [table rowFromPath: p] indexPath: p];
      if(notify) {
        [self itemDeselectedWithInt:[table rowFromPath: p]];
      }
    }
  }
}

- (void)setScrollingEdgePainterWithRAREUIScrollingEdgePainter:(RAREUIScrollingEdgePainter *)painter {
  scrollingEdgePainter_ = painter;
  [self setSystemOverlayPainterExWithRAREiPlatformPainter:painter];
}

- (RAREUIScrollingEdgePainter *)getScrollingEdgePainter {
  return scrollingEdgePainter_;
}

- (void)columnSelectedWithInt:(int)row
                      withInt:(int)column {
  [self itemSelectedWithInt:row];
}

+ (id)createUITableCellView {
  return [[RAREUITableViewCell alloc] init];
}

- (void)editCellWithInt:(int)row
                withInt:(int)col {
}

- (void)editRowExWithInt:(int)index {
  if(index==-1) {
    [((RAREAPListView*)proxy_) setEditing:YES animated:useEditingAnimation_];
  }
  else {
    RAREAPListView* table=(RAREAPListView*)proxy_;
    NSIndexPath* p=[table pathFromRow:index];
    [table selectRowAtIndexPath: p  animated: NO scrollPosition: UITableViewScrollPositionNone];
    UITableViewCell* cell=[((UITableView*)proxy_)  cellForRowAtIndexPath: p];
    if(cell) {
      [cell setEditing:YES animated:useEditingAnimation_];
    }
  }
}

- (void)refreshItems {
  if(listModel_) {
    [((UITableView*)proxy_) reloadData];
    [((UITableView*)proxy_) setNeedsDisplay];
  }
}

- (void)removeSelectionWithInt:(int)index {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  if(![table isRowSelected: index]) {
    NSIndexPath* p=[table pathFromRow:index];
    [table deselectRowAtIndexPath: p  animated: NO];
  }
}

- (RAREUIRectangle *)getCellRectWithInt:(int)row
                                withInt:(int)col
                            withBoolean:(BOOL)includeMargin {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  return [table getCellRect: row column: col  includeMargin: includeMargin];
}

- (void)renderItemWithInt:(int)row
withRARERenderableDataItem:(RARERenderableDataItem *)item
withRAREaTableBasedView_RowView:(RAREaTableBasedView_RowView *)view
              withBoolean:(BOOL)isSelected
              withBoolean:(BOOL)isPressed
        withRAREiTreeItem:(id<RAREiTreeItem>)ti {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)clickRowWithInt:(int)index {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  [table clickRow:index];
}

- (void)repaintRowWithInt:(int)index {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  [table repaintRow:  index indexPath: nil];
}

- (void)repaintVisibleRows {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  [table repaintVisibleRows];
}

- (void)removePressedHilightWithInt:(int)index {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  [table removePressedHilight:  index ];
}

- (void)repaintRowsWithInt:(int)row0
                   withInt:(int)row1 {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  row1++;
  while(row0<row1) {
    [table repaintRow:  row0++ indexPath: nil];
  }
}

- (int)rowAtPointWithFloat:(float)x
                 withFloat:(float)y {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  NSIndexPath* p=[table indexPathForRowAtPoint: CGPointMake(x,y)];
  return p ? [table rowFromPath: p] : -1 ;
}

- (void)rowChangedWithInt:(int)index {
  [self repaintRowWithInt:index];
}

- (void)rowsChangedWithIntArray:(IOSIntArray *)index {
  {
    IOSIntArray *a__ = index;
    int const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    int const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      int i = (*b__++);
      [self repaintRowWithInt:i];
    }
  }
}

- (void)rowsChangedWithInt:(int)firstRow
                   withInt:(int)lastRow {
  int len = lastRow - firstRow;
  if (len < 0) {
    int start = lastRow;
    lastRow = firstRow;
    firstRow = start;
  }
  while (firstRow <= lastRow) {
    [self repaintRowWithInt:firstRow++];
  }
}

- (void)scrollToLeftEdge {
}

- (void)scrollToRightEdge {
}

- (void)scrollToTopEdge {
  int count = [self getRowCount];
  if (count > 0) {
    [self scrollRowToTopWithInt:0];
  }
}

- (void)scrollToBottomEdge {
  int count = [self getRowCount];
  if (count > 0) {
    [self scrollRowToBottomWithInt:count - 1];
  }
}

- (void)moveLeftRightWithBoolean:(BOOL)left
                     withBoolean:(BOOL)block {
}

- (void)moveUpDownWithBoolean:(BOOL)up
                  withBoolean:(BOOL)block {
  if (up) {
    int row = block ? [self getLastVisibleIndex] : [self getFirstVisibleIndex] + 1;
    if (row < [self getRowCount]) {
      [self scrollRowToTopWithInt:row];
    }
  }
  else {
    if (block) {
      int row = [self getFirstVisibleIndex];
      if (row > 0) {
        [self scrollRowToBottomWithInt:row];
      }
    }
    else {
      int row = [self getFirstVisibleIndex] - 1;
      if (row >= 0) {
        [self scrollRowToTopWithInt:row];
      }
    }
  }
}

- (void)scrollRowToTopWithInt:(int)index {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  NSIndexPath* p=[table pathFromRow:index];
  [table scrollToRowAtIndexPath: p atScrollPosition: UITableViewScrollPositionTop animated: NO];
}

- (void)scrollRowToBottomWithInt:(int)index {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  NSIndexPath* p=[table pathFromRow:index];
  [table scrollToRowAtIndexPath: p atScrollPosition: UITableViewScrollPositionBottom animated: NO];
}

- (void)setContentOffsetWithFloat:(float)x
                        withFloat:(float)y {
  if(!inOnScrollChanged_) {
    ((RAREAPListView*)proxy_).contentOffset=CGPointMake(x,y);
  }
}

- (void)scrollRowToVisibleWithInt:(int)index {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  NSIndexPath* p=[table pathFromRow:index];
  [table scrollToRowAtIndexPath: p atScrollPosition: UITableViewScrollPositionNone animated: NO];
}

- (void)selectAll {
  if ([self isMultipleSelectionAllowed]) {
    int len = [self getRowCount];
    for (int i = 0; i < len; i++) {
      [self addSelectionIndexWithInt:i];
    }
  }
}

- (void)setAccessoryTypeWithNSString:(NSString *)style
                         withBoolean:(BOOL)editing {
  if(!style) return;
  RAREAPListView* table=(RAREAPListView*)proxy_;
  if([style caseInsensitiveCompare:@"DisclosureIndicator"]==NSOrderedSame) {
    [table setCellAccessoryType: UITableViewCellAccessoryDisclosureIndicator editing: editing];
  }
  else if([style caseInsensitiveCompare:@"DisclosureButton"]==NSOrderedSame) {
    [table setCellAccessoryType: UITableViewCellAccessoryDetailDisclosureButton editing: editing];
  }
  else if([style caseInsensitiveCompare:@"Checkmark"]==NSOrderedSame) {
    [table setCellAccessoryType: UITableViewCellAccessoryCheckmark editing: editing];
  }
  else if([style caseInsensitiveCompare:@"DetailButton"]==NSOrderedSame) {
    [table setCellAccessoryType: UITableViewCellAccessoryDetailButton editing: editing ];
  }
}

- (void)setAutoSizeRowsWithBoolean:(BOOL)autoSizeRows {
  fixedRowSize_=!autoSizeRows;
  [((RAREAPListView*)proxy_) setAutoSizeRowsToFit: autoSizeRows];
}

- (void)setCellStyleWithNSString:(NSString *)style {
  if(!style) return;
  RAREAPListView* table=(RAREAPListView*)proxy_;
  if([style caseInsensitiveCompare:@"Subtitle"]==NSOrderedSame) {
    [table setCellStyle: UITableViewCellStyleSubtitle];
  }
  else if([style caseInsensitiveCompare:@"Value1"]==NSOrderedSame) {
    [table setCellStyle: UITableViewCellStyleValue1];
  }
  else if([style caseInsensitiveCompare:@"Value2"]==NSOrderedSame) {
    [table setCellStyle: UITableViewCellStyleValue2];
  }
}

- (void)setEditingWithBoolean:(BOOL)edit
                  withBoolean:(BOOL)animated {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  [table setEditing: edit animated: animated];
}

- (void)setEditingModeWithRAREiListView_EditingModeEnum:(RAREiListView_EditingModeEnum *)mode {
  [super setEditingModeWithRAREiListView_EditingModeEnum:mode];
  if (editingSelectionAllowed_) {
    uncheckedImage_ = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getResourceAsImageWithNSString:@"Rare.icon.list.editorUncheckedIcon"];
    checkedImage_ = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getResourceAsImageWithNSString:@"Rare.icon.list.editorCheckedIcon"];
  }
}

- (void)setSelectableWithBoolean:(BOOL)selectable {
  selectable_=selectable;
  ((UITableView*)proxy_).allowsSelection =selectable;
}

- (void)setSelectedIndexWithInt:(int)index {
  if(index>-1) {
    RAREAPListView* table=(RAREAPListView*)proxy_;
    if(![table isRowSelected: index]) {
      [self clearSelectionsWithBoolean: YES];
      NSIndexPath* p=[table pathFromRow: index];
      [table selectRowAtIndexPath: p  animated: NO scrollPosition: UITableViewScrollPositionNone];
      [table repaintRow:index indexPath:p];
      [self itemSelectedWithInt: index];
    }
  }
  else {
    [self clearSelectionsWithBoolean: YES];
  }
}

- (void)setSelectedIndexesWithIntArray:(IOSIntArray *)indices {
  [self clearSelections];
  if (indices != nil) {
    {
      IOSIntArray *a__ = indices;
      int const *b__ = a__->buffer_;
      int const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        int i = (*b__++);
        [self addSelectionIndexWithInt:i];
      }
    }
  }
}

- (void)setSeparatorStyleWithNSString:(NSString *)style {
  if(!style) return;
  RAREAPListView* table=(RAREAPListView*)proxy_;
  if([style caseInsensitiveCompare:@"StyleSingleLine"]==NSOrderedSame) {
    table.separatorStyle= UITableViewCellSeparatorStyleSingleLine;
  }
  else if([style caseInsensitiveCompare:@"SingleLineEtched"]==NSOrderedSame) {
    table.separatorStyle= UITableViewCellSeparatorStyleSingleLineEtched;
  }
}

- (void)setShowVertivalGridLinesWithBoolean:(BOOL)showVertivalGridLines {
  self->showVertivalGridLines_ = showVertivalGridLines;
}

- (void)setShowsHorizontalScrollIndicatorWithBoolean:(BOOL)show {
  UIScrollView* sv=(UIScrollView*)proxy_;
  [sv setShowsHorizontalScrollIndicator: show];
}

- (void)setShowsVerticalScrollIndicatorWithBoolean:(BOOL)show {
  UIScrollView* sv=(UIScrollView*)proxy_;
  [sv setShowsVerticalScrollIndicator: show];
}

- (void)setUseEditingAnimationWithBoolean:(BOOL)useEditingAnimation {
  self->useEditingAnimation_ = useEditingAnimation;
}

- (RAREUIRectangle *)getCellBoundsWithInt:(int)row0
                                  withInt:(int)row1 {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  NSIndexPath* r0=[table pathFromRow:row0];
  NSIndexPath* r1=[table pathFromRow:row1];
  CGRect rect1=[table rectForRowAtIndexPath: r0];
  CGRect rect2=[table rectForRowAtIndexPath: r1];
  CGRect rect=CGRectUnion(rect1,rect2);
  return [RAREUIRectangle fromRect:rect];
}

- (int)getFirstVisibleIndex {
  return [((RAREAPListView*)proxy_) firstVisiblePosition];
}

- (int)getLastVisibleIndex {
  return [((RAREAPListView*)proxy_) lastVisiblePosition];
}

- (int)getRowHeight {
  return [((UITableView*)proxy_) rowHeight];
}

- (int)getSelectedColumn {
  return -1;
}

- (int)getSelectedIndex {
  int n=[self getRowCount];
  if(n==0) return -1;
  RAREAPListView* table=(RAREAPListView*)proxy_;
  NSIndexPath* p=[table indexPathForSelectedRow];
  return p ? [table rowFromPath: p] : -1;
}

- (RAREUIPoint *)getContentOffset {
  CGPoint p=((UITableView*)proxy_).contentOffset;
  return [[RAREUIPoint alloc] initWithFloat:p.x withFloat:p.y];
}

- (RAREUIDimension *)getContentSize {
  CGSize size=((UITableView*)proxy_).contentSize;
  return [[RAREUIDimension alloc] initWithFloat:size.width withFloat:size.height];
}

- (int)getSelectedIndexCount {
  int n=[self getRowCount];
  if(n==0) return -0;
  UITableView* table=(UITableView*)proxy_;
  NSArray* array=[table indexPathsForSelectedRows];
  return array ? (int)array.count : 0;
}

- (IOSIntArray *)getSelectedIndexes {
  int n=[self getRowCount];
  if(n==0) return nil;
  RAREAPListView* table=(RAREAPListView*)proxy_;
  NSArray* array=[table indexPathsForSelectedRows];
  int len=array ? (int)array.count : 0;
  if(len==0) {
    return nil;
  }
  IOSIntArray* a=[[IOSIntArray alloc] initWithLength: len];
  NSIndexPath* p;
  for(int i=0;i<len;i++ ){
    p=[array objectAtIndex: i];
    [a replaceIntAtIndex: i withInt:[table rowFromPath: p]];
  }
  return a;
}

- (BOOL)isColumnSelectedWithInt:(int)col {
  return NO;
}

- (BOOL)isColumnSelectionAllowed {
  return NO;
}

- (BOOL)isEditing {
  return ((RAREAPListView*)proxy_).editing;
}

- (BOOL)isMultipleSelectionAllowed {
  return ((UITableView*)proxy_).allowsMultipleSelection;
}

- (BOOL)isRowSelectedWithInt:(int)index {
  return [((UITableView*)proxy_) isRowSelected: index];
}

- (BOOL)isScrollView {
  return YES;
}

- (BOOL)isScrolling {
  return ((UITableView*)proxy_).dragging;
}

- (BOOL)isShowVertivalGridLines {
  return showVertivalGridLines_;
}

- (BOOL)isUseEditingAnimation {
  return useEditingAnimation_;
}

- (void)structureChangedWithId:(id)source {
  for (id<RAREiPlatformRenderingComponent> __strong row in nil_chk(rows_)) {
    if ([(id) row isKindOfClass:[RAREaPlatformTableBasedView_UITableCellViewRenderingComponent class]]) {
      [((RAREaPlatformTableBasedView_UITableCellViewRenderingComponent *) check_class_cast(row, [RAREaPlatformTableBasedView_UITableCellViewRenderingComponent class])) disposeOfRenderers];
    }
  }
  [super structureChangedWithId:source];
}

+ (id)createContentViewProxy {
  return [[RAREUITableContentView alloc] init];
}

- (void)disposeEx {
  [super disposeEx];
  for (id<RAREiPlatformRenderingComponent> __strong row in nil_chk(rows_)) {
    [((id<RAREiPlatformRenderingComponent>) nil_chk(row)) dispose];
  }
  if (vsb_ != nil) {
    [vsb_ dispose];
  }
  if (hsb_ != nil) {
    [hsb_ dispose];
  }
  [rows_ clear];
  if (hScrollSynchronizer_ != nil) {
    [hScrollSynchronizer_ clear];
  }
  if (vScrollSynchronizer_ != nil) {
    [vScrollSynchronizer_ clear];
  }
  vScrollSynchronizer_ = nil;
  hScrollSynchronizer_ = nil;
  scrollingEdgePainter_ = nil;
  vsb_ = nil;
  hsb_ = nil;
}

- (void)viewDidScrollWithFloat:(float)x
                     withFloat:(float)y {
  inOnScrollChanged_ = YES;
  if (listSynchronizer_ != nil) {
    [listSynchronizer_ sychronizePositionWithRAREaPlatformTableBasedView:self];
  }
  if (vScrollSynchronizer_ != nil) {
    for (id<RAREiScrollerSupport> __strong ss in vScrollSynchronizer_) {
      [((id<RAREiScrollerSupport>) nil_chk(ss)) setContentOffsetWithFloat:0 withFloat:y];
    }
  }
  if (hScrollSynchronizer_ != nil) {
    for (id<RAREiScrollerSupport> __strong ss in hScrollSynchronizer_) {
      [((id<RAREiScrollerSupport>) nil_chk(ss)) setContentOffsetWithFloat:x withFloat:0];
    }
  }
  int xx = (int) x;
  int yy = (int) y;
  if (hsb_ != nil) {
    if (xx != offsetX_) {
      [hsb_ notifyChangeListeners];
    }
  }
  if (vsb_ != nil) {
    if (yy != offsetY_) {
      [vsb_ notifyChangeListeners];
    }
  }
  offsetX_ = xx;
  offsetY_ = yy;
  inOnScrollChanged_ = NO;
}

+ (void)disposeOfRenderersWithId:(id)renderers {
  IOSObjectArray *a = (IOSObjectArray *) check_class_cast(renderers, [IOSObjectArray class]);
  {
    IOSObjectArray *a__ = a;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<RAREiPlatformRenderingComponent> rc = (*b__++);
      if (rc != nil) {
        [rc dispose];
      }
    }
  }
}

- (int)getPressedColumn {
  return [(RAREAPListView*)proxy_ getPressedColumn];
}

- (void)someDataChanged {
  [super someDataChanged];
  [self refreshItems];
}

- (void)itemDeselectedWithInt:(int)index {
  if (listSynchronizer_ != nil) {
    [listSynchronizer_ setSelectedIndexWithRAREaPlatformTableBasedView:self withInt:index withBoolean:NO withBoolean:NO];
  }
  if (changeListener_ != nil) {
    RAREItemChangeEvent *e = [[RAREItemChangeEvent alloc] initWithId:self withId:[JavaLangInteger valueOfWithInt:index] withId:nil];
    [changeListener_ itemChangedWithRAREItemChangeEvent:e];
  }
}

- (void)itemSelectedWithInt:(int)index {
  if (listSynchronizer_ != nil) {
    [listSynchronizer_ setSelectedIndexWithRAREaPlatformTableBasedView:self withInt:index withBoolean:YES withBoolean:NO];
  }
  if (changeListener_ != nil) {
    RAREItemChangeEvent *e = [[RAREItemChangeEvent alloc] initWithId:self withId:nil withId:[JavaLangInteger valueOfWithInt:index]];
    [changeListener_ itemChangedWithRAREItemChangeEvent:e];
  }
}

- (void)layoutItemViewWithId:(id)parentUIView
                     withInt:(int)viewIndex
                     withInt:(int)x
                     withInt:(int)width
                     withInt:(int)height {
  UIView* parent=(UIView*) parentUIView;
  if(parent.subviews.count>viewIndex) {
    UIView* v=[((UIView*) parentUIView).subviews objectAtIndex: viewIndex];
    v.frame=CGRectMake(x,0,width,height);
    if(v.hidden) v.hidden=NO;
  }
}

- (void)moveWithInt:(int)from
            withInt:(int)to {
  id<RAREiWidget> w = [((id<RAREiPlatformComponent>) nil_chk([self getComponent])) getWidget];
  RAREDropInformation *di = [[RAREDropInformation alloc] initWithRAREiWidget:w];
  [di setTargetWidgetWithRAREiWidget:w];
  [di setDropIndexWithInt:to];
  [di setDropActionWithInt:RAREDnDConstants_ACTION_MOVE];
  [((id<RAREiWidget>) nil_chk(w)) importDataWithRAREiTransferable:[[RARERenderableDataItemTransferable alloc] initWithRARERenderableDataItem:[((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:from]] withRAREDropInformation:di];
}

- (void)moveWithRAREUTIntList:(RAREUTIntList *)from
                      withInt:(int)to {
  id<RAREiWidget> w = [((id<RAREiPlatformComponent>) nil_chk([self getComponent])) getWidget];
  RAREDropInformation *di = [[RAREDropInformation alloc] initWithRAREiWidget:w];
  [di setTargetWidgetWithRAREiWidget:w];
  [di setDropIndexWithInt:to];
  [di setDropActionWithInt:RAREDnDConstants_ACTION_MOVE];
  int len = [((RAREUTIntList *) nil_chk(from)) size];
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] initWithInt:len];
  for (int i = 0; i < len; i++) {
    [list addWithId:[((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:[from getWithInt:i]]];
  }
  [((id<RAREiWidget>) nil_chk(w)) importDataWithRAREiTransferable:[[RARERenderableDataItemTransferable alloc] initWithJavaUtilList:list] withRAREDropInformation:di];
}

- (void)reloadVisibleRows {
  RAREAPListView* table=(RAREAPListView*)proxy_;
  [table reloadVisibleRows];
}

- (void)removeWithInt:(int)index {
  RAREaListViewer *w = (RAREaListViewer *) check_class_cast([((id<RAREiPlatformComponent>) nil_chk([self getComponent])) getWidget], [RAREaListViewer class]);
  [((RAREaListViewer *) nil_chk(w)) removeDataWithRAREiTransferable:[[RARERenderableDataItemTransferable alloc] initWithRARERenderableDataItem:[((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:index]]];
}

- (void)removeWithRAREUTIntList:(RAREUTIntList *)indexes {
  RAREaListViewer *w = (RAREaListViewer *) check_class_cast([((id<RAREiPlatformComponent>) nil_chk([self getComponent])) getWidget], [RAREaListViewer class]);
  int len = [((RAREUTIntList *) nil_chk(indexes)) size];
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] initWithInt:len];
  for (int i = 0; i < len; i++) {
    [list addWithId:[((id<RAREiPlatformListDataModel>) nil_chk(listModel_)) getWithInt:[indexes getWithInt:i]]];
  }
  [((RAREaListViewer *) nil_chk(w)) removeDataWithRAREiTransferable:[[RARERenderableDataItemTransferable alloc] initWithJavaUtilList:list]];
}

- (void)setupNewRenderingCellWithId:(id)nativeView {
  RAREaPlatformTableBasedView_RowViewEx *row;
  if ([self isTable]) {
    row = [[RAREaPlatformTableBasedView_TableRowView alloc] initWithRAREaPlatformTableBasedView:self withId:nativeView];
  }
  else {
    row = [[RAREaPlatformTableBasedView_RowViewEx alloc] initWithRAREaPlatformTableBasedView:self withId:nativeView];
  }
  BOOL needsCopy = YES;
  RAREColumn *c = [((RAREListItemRenderer *) nil_chk(itemRenderer_)) getItemDescription];
  id<RAREiPlatformRenderingComponent> rc = nil;
  if (c != nil) {
    rc = [c getCellRenderer];
  }
  if ((rc == nil) && needsContentView_) {
    rc = [[RAREUILabelRenderer alloc] init];
    needsCopy = NO;
  }
  if (rc != nil) {
    [((RAREaPlatformTableBasedView_RowViewEx *) nil_chk(row)) setCustomRenderingComponentWithRAREiPlatformRenderingComponent:needsCopy ? [rc newCopy] : rc];
  }
  if (rc == nil) {
    rc = [[RAREaPlatformTableBasedView_UITableCellViewRenderingComponent alloc] initWithRAREaPlatformTableBasedView:self withRAREaPlatformTableBasedView_RowViewEx:row];
  }
  [((JavaUtilArrayList *) nil_chk(rows_)) addWithId:rc];
}

- (RAREPaintBucket *)getSelectionPainter {
  if (![self isEditing]) {
    return [((RAREListItemRenderer *) nil_chk(itemRenderer_)) getSelectionPaintForExternalPainterWithBoolean:NO];
  }
  return nil;
}

- (void)setMultipleSelectionWithBoolean:(BOOL)multiple {
  ((UITableView*)proxy_).allowsMultipleSelection= multiple;
}

- (void)setRowHeightExWithInt:(int)height {
  rowHeight_=height;
  ((UITableView*)proxy_).rowHeight= height;
}

- (RAREaTableBasedView_RowView *)getViewForRowWithInt:(int)index {
  if(index>-1) {
    RAREAPListView* table=(RAREAPListView*)proxy_;
    NSIndexPath* p=[table pathFromRow:index];
    UITableViewCell* cell=[table  cellForRowAtIndexPath: p];
    if(cell) {
      return (RAREaTableBasedView_RowView*)cell.sparView;
    }
  }
  return nil;
}

- (BOOL)isTable {
  return NO;
}

- (RAREListSynchronizer *)getListSynchronizer {
  return listSynchronizer_;
}

- (void)setListSynchronizerWithRAREListSynchronizer:(RAREListSynchronizer *)listSynchronizer {
  self->listSynchronizer_ = listSynchronizer;
}

- (void)setScrollBarViewsWithRAREScrollBarView:(RAREScrollBarView *)hsb
                         withRAREScrollBarView:(RAREScrollBarView *)vsb {
  self->hsb_ = hsb;
  self->vsb_ = vsb;
}

- (void)setHeaderViewWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)ss {
  [self turnOffScrollBarVisibilityWithRAREiScrollerSupport:ss withBoolean:YES];
  [self syncScrollingWithRAREiScrollerSupport:ss withBoolean:NO];
}

- (void)setFooterViewWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)ss {
  [self setShowsHorizontalScrollIndicatorWithBoolean:NO];
  [self syncScrollingWithRAREiScrollerSupport:ss withBoolean:NO];
}

- (void)setRowHeaderViewWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)ss {
  [self turnOffScrollBarVisibilityWithRAREiScrollerSupport:ss withBoolean:NO];
  [self syncScrollingWithRAREiScrollerSupport:ss withBoolean:YES];
}

- (void)setRowFooterViewWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)rowFooterView {
  [self setShowsVerticalScrollIndicatorWithBoolean:NO];
  [self syncScrollingWithRAREiScrollerSupport:rowFooterView withBoolean:YES];
}

- (void)syncScrollingWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)ss
                                  withBoolean:(BOOL)vertical {
  if (vertical) {
    if (vScrollSynchronizer_ == nil) {
      vScrollSynchronizer_ = [[RAREUTIdentityArrayList alloc] initWithInt:2];
    }
    [((RAREUTIdentityArrayList *) nil_chk(vScrollSynchronizer_)) addIfNotPresentWithId:ss];
  }
  else {
    if (hScrollSynchronizer_ == nil) {
      hScrollSynchronizer_ = [[RAREUTIdentityArrayList alloc] initWithInt:2];
    }
    [((RAREUTIdentityArrayList *) nil_chk(hScrollSynchronizer_)) addIfNotPresentWithId:ss];
  }
}

- (void)turnOffScrollBarVisibilityWithRAREiScrollerSupport:(id<RAREiScrollerSupport>)ss
                                               withBoolean:(BOOL)horizontal {
  if ([(id) ss isKindOfClass:[RAREScrollView class]]) {
    if (horizontal) {
      [((RAREScrollView *) check_class_cast(ss, [RAREScrollView class])) setShowsHorizontalScrollIndicatorWithBoolean:NO];
    }
    else {
      [((RAREScrollView *) check_class_cast(ss, [RAREScrollView class])) setShowsVerticalScrollIndicatorWithBoolean:NO];
    }
  }
  else if ([(id) ss isKindOfClass:[RAREaPlatformTableBasedView class]]) {
    if (horizontal) {
      [((RAREaPlatformTableBasedView *) check_class_cast(ss, [RAREaPlatformTableBasedView class])) setShowsHorizontalScrollIndicatorWithBoolean:NO];
    }
    else {
      [((RAREaPlatformTableBasedView *) check_class_cast(ss, [RAREaPlatformTableBasedView class])) setShowsVerticalScrollIndicatorWithBoolean:NO];
    }
  }
}

+ (void)initialize {
  if (self == [RAREaPlatformTableBasedView class]) {
    RAREaPlatformTableBasedView_NULL_ITEM_ = [[RARERenderableDataItem alloc] initWithId:@""];
  }
}

- (void)copyAllFieldsTo:(RAREaPlatformTableBasedView *)other {
  [super copyAllFieldsTo:other];
  other->checkedImage_ = checkedImage_;
  other->dataOffset_ = dataOffset_;
  other->hScrollSynchronizer_ = hScrollSynchronizer_;
  other->hsb_ = hsb_;
  other->inOnScrollChanged_ = inOnScrollChanged_;
  other->listSynchronizer_ = listSynchronizer_;
  other->needsContentView_ = needsContentView_;
  other->offsetX_ = offsetX_;
  other->offsetY_ = offsetY_;
  other->rows_ = rows_;
  other->scrollingEdgePainter_ = scrollingEdgePainter_;
  other->showHorizontalGridLines_ = showHorizontalGridLines_;
  other->showVertivalGridLines_ = showVertivalGridLines_;
  other->uncheckedImage_ = uncheckedImage_;
  other->useEditingAnimation_ = useEditingAnimation_;
  other->vScrollSynchronizer_ = vScrollSynchronizer_;
  other->vsb_ = vsb_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithId:", NULL, NULL, 0x4, NULL },
    { "getScrollerSupport", NULL, "LRAREiScrollerSupport", 0x1, NULL },
    { "isAtBottomEdge", NULL, "Z", 0x101, NULL },
    { "isAtLeftEdge", NULL, "Z", 0x101, NULL },
    { "isAtRightEdge", NULL, "Z", 0x101, NULL },
    { "isAtTopEdge", NULL, "Z", 0x101, NULL },
    { "addSelectionIndexWithInt:", NULL, "V", 0x101, NULL },
    { "clearSelectionsWithBoolean:", NULL, "V", 0x101, NULL },
    { "getScrollingEdgePainter", NULL, "LRAREUIScrollingEdgePainter", 0x1, NULL },
    { "createUITableCellView", NULL, "LNSObject", 0x109, NULL },
    { "editRowExWithInt:", NULL, "V", 0x101, NULL },
    { "refreshItems", NULL, "V", 0x101, NULL },
    { "removeSelectionWithInt:", NULL, "V", 0x101, NULL },
    { "getCellRectWithInt:withInt:withBoolean:", NULL, "LRAREUIRectangle", 0x101, NULL },
    { "renderItemWithInt:withRARERenderableDataItem:withRAREaTableBasedView_RowView:withBoolean:withBoolean:withRAREiTreeItem:", NULL, "V", 0x401, NULL },
    { "clickRowWithInt:", NULL, "V", 0x101, NULL },
    { "repaintRowWithInt:", NULL, "V", 0x101, NULL },
    { "repaintVisibleRows", NULL, "V", 0x101, NULL },
    { "removePressedHilightWithInt:", NULL, "V", 0x104, NULL },
    { "repaintRowsWithInt:withInt:", NULL, "V", 0x101, NULL },
    { "rowAtPointWithFloat:withFloat:", NULL, "I", 0x101, NULL },
    { "rowsChangedWithIntArray:", NULL, "V", 0x81, NULL },
    { "scrollRowToTopWithInt:", NULL, "V", 0x101, NULL },
    { "scrollRowToBottomWithInt:", NULL, "V", 0x101, NULL },
    { "setContentOffsetWithFloat:withFloat:", NULL, "V", 0x101, NULL },
    { "scrollRowToVisibleWithInt:", NULL, "V", 0x101, NULL },
    { "setAccessoryTypeWithNSString:withBoolean:", NULL, "V", 0x101, NULL },
    { "setAllowsSelectionDuringEditingWithBoolean:", NULL, "V", 0x101, NULL },
    { "setAutoSizeRowsWithBoolean:", NULL, "V", 0x101, NULL },
    { "setCellStyleWithNSString:", NULL, "V", 0x101, NULL },
    { "setEditingWithBoolean:withBoolean:", NULL, "V", 0x101, NULL },
    { "setSelectableWithBoolean:", NULL, "V", 0x101, NULL },
    { "setSelectedIndexWithInt:", NULL, "V", 0x101, NULL },
    { "setSeparatorStyleWithNSString:", NULL, "V", 0x101, NULL },
    { "setShowsHorizontalScrollIndicatorWithBoolean:", NULL, "V", 0x101, NULL },
    { "setShowsVerticalScrollIndicatorWithBoolean:", NULL, "V", 0x101, NULL },
    { "getCellBoundsWithInt:withInt:", NULL, "LRAREUIRectangle", 0x101, NULL },
    { "getFirstVisibleIndex", NULL, "I", 0x101, NULL },
    { "getLastVisibleIndex", NULL, "I", 0x101, NULL },
    { "getRowHeight", NULL, "I", 0x101, NULL },
    { "getSelectedIndex", NULL, "I", 0x101, NULL },
    { "getContentOffset", NULL, "LRAREUIPoint", 0x101, NULL },
    { "getContentSize", NULL, "LRAREUIDimension", 0x101, NULL },
    { "getSelectedIndexCount", NULL, "I", 0x101, NULL },
    { "getSelectedIndexes", NULL, "LIOSIntArray", 0x101, NULL },
    { "isColumnSelectedWithInt:", NULL, "Z", 0x1, NULL },
    { "isColumnSelectionAllowed", NULL, "Z", 0x1, NULL },
    { "isEditing", NULL, "Z", 0x101, NULL },
    { "isMultipleSelectionAllowed", NULL, "Z", 0x101, NULL },
    { "isRowSelectedWithInt:", NULL, "Z", 0x101, NULL },
    { "isScrollView", NULL, "Z", 0x1, NULL },
    { "isScrolling", NULL, "Z", 0x101, NULL },
    { "isShowVertivalGridLines", NULL, "Z", 0x1, NULL },
    { "isUseEditingAnimation", NULL, "Z", 0x1, NULL },
    { "createContentViewProxy", NULL, "LNSObject", 0x108, NULL },
    { "disposeEx", NULL, "V", 0x4, NULL },
    { "viewDidScrollWithFloat:withFloat:", NULL, "V", 0x4, NULL },
    { "disposeOfRenderersWithId:", NULL, "V", 0xc, NULL },
    { "getPressedColumn", NULL, "I", 0x104, NULL },
    { "someDataChanged", NULL, "V", 0x4, NULL },
    { "itemDeselectedWithInt:", NULL, "V", 0x4, NULL },
    { "itemSelectedWithInt:", NULL, "V", 0x4, NULL },
    { "layoutItemViewWithId:withInt:withInt:withInt:withInt:", NULL, "V", 0x104, NULL },
    { "moveWithInt:withInt:", NULL, "V", 0x4, NULL },
    { "moveWithRAREUTIntList:withInt:", NULL, "V", 0x4, NULL },
    { "reloadVisibleRows", NULL, "V", 0x104, NULL },
    { "removeWithInt:", NULL, "V", 0x4, NULL },
    { "removeWithRAREUTIntList:", NULL, "V", 0x4, NULL },
    { "setupNewRenderingCellWithId:", NULL, "V", 0x4, NULL },
    { "getSelectionPainter", NULL, "LRAREPaintBucket", 0x4, NULL },
    { "setMultipleSelectionWithBoolean:", NULL, "V", 0x104, NULL },
    { "setRowHeightExWithInt:", NULL, "V", 0x104, NULL },
    { "getViewForRowWithInt:", NULL, "LRAREaTableBasedView_RowView", 0x104, NULL },
    { "isTable", NULL, "Z", 0x4, NULL },
    { "getListSynchronizer", NULL, "LRAREListSynchronizer", 0x1, NULL },
    { "turnOffScrollBarVisibilityWithRAREiScrollerSupport:withBoolean:", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "NULL_ITEM_", NULL, 0x19, "LRARERenderableDataItem" },
    { "dataOffset_", NULL, 0x4, "I" },
    { "rows_", NULL, 0x4, "LJavaUtilArrayList" },
    { "useEditingAnimation_", NULL, 0x4, "Z" },
    { "checkedImage_", NULL, 0x4, "LRAREUIImage" },
    { "needsContentView_", NULL, 0x4, "Z" },
    { "showHorizontalGridLines_", NULL, 0x4, "Z" },
    { "showVertivalGridLines_", NULL, 0x4, "Z" },
    { "uncheckedImage_", NULL, 0x4, "LRAREUIImage" },
    { "listSynchronizer_", NULL, 0x4, "LRAREListSynchronizer" },
    { "hScrollSynchronizer_", NULL, 0x4, "LRAREUTIdentityArrayList" },
    { "vScrollSynchronizer_", NULL, 0x4, "LRAREUTIdentityArrayList" },
  };
  static J2ObjcClassInfo _RAREaPlatformTableBasedView = { "aPlatformTableBasedView", "com.appnativa.rare.platform.apple.ui.view", NULL, 0x401, 76, methods, 12, fields, 0, NULL};
  return &_RAREaPlatformTableBasedView;
}

@end
@implementation RAREaPlatformTableBasedView_RowViewEx

- (id)initWithRAREaPlatformTableBasedView:(RAREaPlatformTableBasedView *)outer$ {
  return [self initRAREaPlatformTableBasedView_RowViewExWithRAREaPlatformTableBasedView:outer$ withId:[[RAREaPlatformTableBasedView_RowViewEx alloc] initWithRAREaPlatformTableBasedView:outer$ withId:[RAREaPlatformTableBasedView createUITableCellView]]];
}

- (id)initRAREaPlatformTableBasedView_RowViewExWithRAREaPlatformTableBasedView:(RAREaPlatformTableBasedView *)outer$
                                                                        withId:(id)proxy {
  this$1_ = outer$;
  if (self = [super initWithRAREaTableBasedView:outer$ withId:proxy]) {
    [self setWordWrapWithBoolean:YES];
  }
  return self;
}

- (id)initWithRAREaPlatformTableBasedView:(RAREaPlatformTableBasedView *)outer$
                                   withId:(id)proxy {
  return [self initRAREaPlatformTableBasedView_RowViewExWithRAREaPlatformTableBasedView:outer$ withId:proxy];
}

- (void)hideRowEditingComponentWithBoolean:(BOOL)animate {
  RAREUITableViewCell* cell=(RAREUITableViewCell*)proxy_;
  [cell hideRowEditingView: animate];
}

- (void)showRowEditingComponentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)component
                                              withBoolean:(BOOL)animate {
  RAREUIDimension *size = [component getPreferredSize];
  [component setBoundsWithFloat:0 withFloat:0 withFloat:((RAREUIDimension *) nil_chk(size))->width_ withFloat:size->height_];
  UIView* v=(UIView*)[[component getView] getProxy];
  RAREUITableViewCell* cell=(RAREUITableViewCell*)proxy_;
  [cell showRowEditingView: v animate: animate centerVertically: this$0_->centerEditingComponentVertically_];
}

- (void)setAccessoryTypeWithNSString:(NSString *)style {
  if(!style) return;
  if([style caseInsensitiveCompare:@"DisclosureIndicator"]==NSOrderedSame) {
    ((RAREUITableViewCell*)proxy_).accessoryType=UITableViewCellAccessoryDisclosureIndicator;
  }
  else if([style caseInsensitiveCompare:@"DisclosureButton"]==NSOrderedSame) {
    ((RAREUITableViewCell*)proxy_).accessoryType=UITableViewCellAccessoryDetailDisclosureButton;
  }
  else if([style caseInsensitiveCompare:@"Checkmark"]==NSOrderedSame) {
    ((RAREUITableViewCell*)proxy_).accessoryType=UITableViewCellAccessoryCheckmark;
  }
  else if([style caseInsensitiveCompare:@"DetailButton"]==NSOrderedSame) {
    ((RAREUITableViewCell*)proxy_).accessoryType=UITableViewCellAccessoryDetailButton;
  }
}

- (void)setAccessoryViewWithId:(id)view {
  ((RAREUITableViewCell*)proxy_).accessoryView=(UIView*)view;
}

- (void)setBackgroundViewWithId:(id)view {
  ((RAREUITableViewCell*)proxy_).backgroundView=(UIView*)view;
}

- (void)setCustomPropertiesWithRARERenderableDataItem:(RARERenderableDataItem *)item {
  id<JavaLangCharSequence> s;
  id<RAREiPlatformComponent> c = (id<RAREiPlatformComponent>) check_protocol_cast([((RARERenderableDataItem *) nil_chk(item)) getCustomPropertyWithId:@"rare.accessoryView"], @protocol(RAREiPlatformComponent));
  if (c != nil) {
    [self setAccessoryViewWithId:[c getProxy]];
  }
  else {
    s = (id<JavaLangCharSequence>) check_protocol_cast([item getCustomPropertyWithId:@"rare.accessoryType"], @protocol(JavaLangCharSequence));
    if (s != nil) {
      [self setAccessoryTypeWithNSString:[s sequenceDescription]];
    }
  }
  c = (id<RAREiPlatformComponent>) check_protocol_cast([item getCustomPropertyWithId:@"rare.editingAccessoryView"], @protocol(RAREiPlatformComponent));
  if (c != nil) {
    [self setEditingAccessoryViewWithId:[c getProxy]];
  }
  else {
    s = (id<JavaLangCharSequence>) check_protocol_cast([item getCustomPropertyWithId:@"rare.editingAccessoryType"], @protocol(JavaLangCharSequence));
    if (s != nil) {
      [self setEditingAccessoryTypeWithNSString:[s sequenceDescription]];
    }
  }
  c = (id<RAREiPlatformComponent>) check_protocol_cast([item getCustomPropertyWithId:@"rare.backgroundView"], @protocol(RAREiPlatformComponent));
  if (c != nil) {
    [self setBackgroundViewWithId:[c getProxy]];
  }
  c = (id<RAREiPlatformComponent>) check_protocol_cast([item getCustomPropertyWithId:@"rare.selectedBackgroundView"], @protocol(RAREiPlatformComponent));
  if (c != nil) {
    [self setSelectedBackgroundViewWithId:[c getProxy]];
  }
  s = (id<JavaLangCharSequence>) check_protocol_cast([item getCustomPropertyWithId:@"rare.detailText"], @protocol(JavaLangCharSequence));
  if (s != nil) {
    [self setDetailTextLabelWithJavaLangCharSequence:s];
  }
}

- (void)setCustomRenderingComponentWithRAREiPlatformRenderingComponent:(id<RAREiPlatformRenderingComponent>)renderingComponent {
  self->renderingComponent_ = renderingComponent;
  if (renderingComponent != nil) {
    [self setRenderingViewWithRAREView:[((id<RAREiPlatformComponent>) nil_chk([renderingComponent getComponent])) getView]];
  }
}

- (void)setDetailTextLabelWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  [((RAREUITableViewCell*)proxy_).detailTextLabel setCharSequence: [RAREHTMLCharSequence checkSequenceWithJavaLangCharSequence:text withRAREUIFont:[self getFontAlways]]];
}

- (void)setEditingWithBoolean:(BOOL)editing {
  [super setEditingWithBoolean:editing];
  RAREUIImage *img = nil;
  if (editing) {
    img = checkedInEditMode_ ? this$1_->checkedImage_ : this$1_->uncheckedImage_;
  }
  [self setEditingImageWithRAREUIImage:img];
}

- (void)setEditingAccessoryTypeWithNSString:(NSString *)style {
  if(!style) return;
  if([style caseInsensitiveCompare:@"DisclosureIndicator"]==NSOrderedSame) {
    ((RAREUITableViewCell*)proxy_).editingAccessoryType=UITableViewCellAccessoryDisclosureIndicator;
  }
  else if([style caseInsensitiveCompare:@"DisclosureButton"]==NSOrderedSame) {
    ((RAREUITableViewCell*)proxy_).editingAccessoryType=UITableViewCellAccessoryDetailDisclosureButton;
  }
  else if([style caseInsensitiveCompare:@"Checkmark"]==NSOrderedSame) {
    ((RAREUITableViewCell*)proxy_).editingAccessoryType=UITableViewCellAccessoryCheckmark;
  }
  else if([style caseInsensitiveCompare:@"DetailButton"]==NSOrderedSame) {
    ((RAREUITableViewCell*)proxy_).editingAccessoryType=UITableViewCellAccessoryDetailButton;
  }
}

- (void)setEditingAccessoryViewWithId:(id)view {
  ((RAREUITableViewCell*)proxy_).editingAccessoryView=(UIView*)view;
}

- (void)setEditingImageWithRAREUIImage:(RAREUIImage *)image {
  UIImage* img=nil;
  if(image) {
    img=[(RAREImageWrapper*)[image getProxy] getImage];
  }
  [((RAREUITableViewCell*)proxy_) setEditingImage: img];
}

- (void)setFontWithRAREUIFont:(RAREUIFont *)font {
  font_ = font;
  if(font!=nil) {
    [((RAREUITableViewCell*)proxy_).textLabel setFont: (UIFont*)[font getIOSProxy]];
  }
}

- (void)setIconWithRAREiPlatformIcon:(id<RAREiPlatformIcon>)icon {
  [((RAREUITableViewCell*)proxy_) setIcon: icon];
}

- (void)setIconGapWithInt:(int)iconGap {
  ((RAREUITableViewCell*)proxy_).iconGap=iconGap;
}

- (void)setIconPositionWithRARERenderableDataItem_IconPositionEnum:(RARERenderableDataItem_IconPositionEnum *)iconPosition {
  if (iconPosition == nil) {
    iconPosition = [RARERenderableDataItem_IconPositionEnum LEADING];
  }
  ((RAREUITableViewCell*)proxy_).iconPosition=iconPosition.ordinal;
}

- (void)setImageWithRAREUIImage:(RAREUIImage *)image {
  ((RAREUITableViewCell*)proxy_).imageView.image=[(RAREImageWrapper*)[image getProxy] getImage];
}

- (void)setMarginWithFloat:(float)top
                 withFloat:(float)right
                 withFloat:(float)bottom
                 withFloat:(float)left {
  [((RAREUITableViewCell*)proxy_) setInsetsWithTop: top right: right bottom: bottom left: left];
}

- (void)setRenderingViewWithRAREView:(RAREView *)view {
  RAREUITableViewCell* cell=(RAREUITableViewCell*)proxy_;
  UIView* v=(UIView*)view->proxy_;
  [v removeFromSuperview];
  [cell setListContent: v];
}

- (void)setSelectedBackgroundViewWithId:(id)view {
  ((RAREUITableViewCell*)proxy_).selectedBackgroundView=(UIView*)view;
}

- (void)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  [((RAREUITableViewCell*)proxy_) setCharSequence: [RAREHTMLCharSequence checkSequenceWithJavaLangCharSequence:text withRAREUIFont:[self getFontAlways]]];
}

- (void)setTextAlignmentWithRARERenderableDataItem_HorizontalAlignEnum:(RARERenderableDataItem_HorizontalAlignEnum *)hal
                          withRARERenderableDataItem_VerticalAlignEnum:(RARERenderableDataItem_VerticalAlignEnum *)val {
  RAREUITableViewCell* label=(RAREUITableViewCell*)proxy_;
  [label setTextHorizontalAlignment: hal.ordinal];
  [label setTextVerticalAlignment: val.ordinal];
}

- (void)setWordWrapWithBoolean:(BOOL)wrap {
  [((RAREUITableViewCell*)proxy_).textLabel setWrapText: wrap];
}

- (void)getMinimumSizeWithRAREUIDimension:(RAREUIDimension *)size
                                withFloat:(float)maxWidth {
  CGSize s= [((RAREUITableViewCell*)proxy_) intrinsicContentSize];
  size->width_=s.width;
  size->height_=s.height;
}

- (BOOL)isPressed {
  return [((RAREUITableViewCell*)proxy_) isPressed];
}

- (BOOL)isSelected {
  return [((RAREUITableViewCell*)proxy_) isSelected];
}

- (BOOL)isWordWrap {
  return [((RAREUITableViewCell*)proxy_).textLabel isWrapText];
}

- (void)setForegroundColorExWithRAREUIColor:(RAREUIColor *)fg {
  if(fg!=nil) {
    [((RAREUITableViewCell*)proxy_).textLabel setTextColor: fg.getAPColor];
    [((UITableView*)proxy_) setNeedsDisplay];
  }
}

- (id)getContentView {
  return [((RAREUITableViewCell*)proxy_) getTableContentHolder];
}

- (void)copyAllFieldsTo:(RAREaPlatformTableBasedView_RowViewEx *)other {
  [super copyAllFieldsTo:other];
  other->contentView_ = contentView_;
  other->renderingComponent_ = renderingComponent_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "hideRowEditingComponentWithBoolean:", NULL, "V", 0x101, NULL },
    { "showRowEditingComponentWithRAREiPlatformComponent:withBoolean:", NULL, "V", 0x101, NULL },
    { "setAccessoryTypeWithNSString:", NULL, "V", 0x101, NULL },
    { "setAccessoryViewWithId:", NULL, "V", 0x101, NULL },
    { "setBackgroundViewWithId:", NULL, "V", 0x101, NULL },
    { "setDetailTextLabelWithJavaLangCharSequence:", NULL, "V", 0x101, NULL },
    { "setEditingAccessoryTypeWithNSString:", NULL, "V", 0x101, NULL },
    { "setEditingAccessoryViewWithId:", NULL, "V", 0x101, NULL },
    { "setEditingImageWithRAREUIImage:", NULL, "V", 0x101, NULL },
    { "setFontWithRAREUIFont:", NULL, "V", 0x101, NULL },
    { "setIconWithRAREiPlatformIcon:", NULL, "V", 0x101, NULL },
    { "setIconGapWithInt:", NULL, "V", 0x101, NULL },
    { "setIconPositionWithRARERenderableDataItem_IconPositionEnum:", NULL, "V", 0x101, NULL },
    { "setImageWithRAREUIImage:", NULL, "V", 0x101, NULL },
    { "setMarginWithFloat:withFloat:withFloat:withFloat:", NULL, "V", 0x101, NULL },
    { "setRenderingViewWithRAREView:", NULL, "V", 0x101, NULL },
    { "setSelectedBackgroundViewWithId:", NULL, "V", 0x101, NULL },
    { "setTextWithJavaLangCharSequence:", NULL, "V", 0x101, NULL },
    { "setTextAlignmentWithRARERenderableDataItem_HorizontalAlignEnum:withRARERenderableDataItem_VerticalAlignEnum:", NULL, "V", 0x101, NULL },
    { "setWordWrapWithBoolean:", NULL, "V", 0x101, NULL },
    { "getMinimumSizeWithRAREUIDimension:withFloat:", NULL, "V", 0x101, NULL },
    { "isPressed", NULL, "Z", 0x101, NULL },
    { "isSelected", NULL, "Z", 0x101, NULL },
    { "isWordWrap", NULL, "Z", 0x101, NULL },
    { "setForegroundColorExWithRAREUIColor:", NULL, "V", 0x104, NULL },
    { "getContentView", NULL, "LNSObject", 0x104, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$1_", NULL, 0x1012, "LRAREaPlatformTableBasedView" },
    { "renderingComponent_", NULL, 0x1, "LRAREiPlatformRenderingComponent" },
    { "contentView_", NULL, 0x0, "LRAREaPlatformTableBasedView_ContentView" },
  };
  static J2ObjcClassInfo _RAREaPlatformTableBasedView_RowViewEx = { "RowViewEx", "com.appnativa.rare.platform.apple.ui.view", "aPlatformTableBasedView", 0x1, 26, methods, 3, fields, 0, NULL};
  return &_RAREaPlatformTableBasedView_RowViewEx;
}

@end
@implementation RAREaPlatformTableBasedView_TableRowView

- (id)initWithRAREaPlatformTableBasedView:(RAREaPlatformTableBasedView *)outer$ {
  return [self initRAREaPlatformTableBasedView_TableRowViewWithRAREaPlatformTableBasedView:outer$ withId:[RAREaPlatformTableBasedView createUITableCellView]];
}

- (id)initRAREaPlatformTableBasedView_TableRowViewWithRAREaPlatformTableBasedView:(RAREaPlatformTableBasedView *)outer$
                                                                           withId:(id)proxy {
  this$2_ = outer$;
  if (self = [super initWithRAREaPlatformTableBasedView:outer$ withId:proxy]) {
    prefSize_ = nil;
  }
  return self;
}

- (id)initWithRAREaPlatformTableBasedView:(RAREaPlatformTableBasedView *)outer$
                                   withId:(id)proxy {
  return [self initRAREaPlatformTableBasedView_TableRowViewWithRAREaPlatformTableBasedView:outer$ withId:proxy];
}

- (void)paintBackgroundWithRAREAppleGraphics:(RAREAppleGraphics *)g
                                withRAREView:(RAREView *)v
                         withRAREUIRectangle:(RAREUIRectangle *)rect {
  if (contentView_ == nil) {
    [super paintBackgroundWithRAREAppleGraphics:g withRAREView:v withRAREUIRectangle:rect];
    return;
  }
  float height = ((RAREUIRectangle *) nil_chk(rect))->height_;
  if (this$2_->showDivider_) {
    height--;
  }
  if (componentPainter_ != nil) {
    [componentPainter_ paintWithRAREiPlatformGraphics:g withFloat:rect->x_ withFloat:rect->y_ withFloat:rect->width_ withFloat:height withInt:RAREiPainter_UNKNOWN];
  }
  BOOL pressed = (this$2_->popupMenuIndex_ == -1) ? [self isPressed] : NO;
  BOOL selected = [self isSelected];
  RAREPaintBucket *pb = [self getBackgroundPaintWithBoolean:pressed withBoolean:selected];
  if (pressed || (pb != nil)) {
    float sx = 0;
    float ex = 0;
    if ([this$2_ isColumnSelectionAllowed]) {
      int n = pressed ? [this$2_ getPressedColumn] : [this$2_ getSelectedColumn];
      if (n > -1) {
        id pv = [((RAREaPlatformTableBasedView_ContentView *) nil_chk(contentView_)) getViewAtWithInt:n];
        sx = [contentView_ getViewXWithId:pv];
        ex = sx + [contentView_ getViewWidthWithId:pv];
      }
      else {
        pb = nil;
      }
    }
    if ((ex == 0) && (sx == 0)) {
      sx = [this$2_ getSelectionPaintStartXWithFloat:rect->x_];
      ex = [this$2_ getSelectionPaintEndXWithFloat:rect->x_ + rect->width_];
    }
    if (![RAREUTSNumber isEqualWithFloat:sx withFloat:ex]) {
      if (pb != nil) {
        [RAREaUIComponentPainter paintWithRAREiPlatformGraphics:g withFloat:sx withFloat:rect->y_ withFloat:ex - sx withFloat:height withRAREPaintBucket:pb];
      }
    }
  }
}

- (void)renderWithRAREView:(RAREView *)parent
withRAREiPlatformComponent:(id<RAREiPlatformComponent>)list
 withRAREaListItemRenderer:(RAREaListItemRenderer *)lr
                   withInt:(int)row
withRARERenderableDataItem:(RARERenderableDataItem *)rowItem
       withRAREColumnArray:(IOSObjectArray *)columns
               withBoolean:(BOOL)isSelected
               withBoolean:(BOOL)isPressed
         withRAREiTreeItem:(id<RAREiTreeItem>)ti
              withIntArray:(IOSIntArray *)viewPositions {
  id<RAREiPlatformRenderingComponent> rc;
  BOOL empty = (rowItem == nil) || (rowItem == [RAREaPlatformTableBasedView NULL_ITEM]);
  self->row_ = row;
  if (empty) {
    rowItem = [RAREaPlatformTableBasedView NULL_ITEM];
  }
  if (contentView_ == nil) {
    contentView_ = [[RAREaPlatformTableBasedView_ContentView alloc] initWithId:[self getContentView]];
  }
  else {
    [contentView_ setProxyWithId:[self getContentView]];
  }
  BOOL autoSize = !this$2_->fixedRowSize_;
  if (autoSize) {
    if (prefSize_ == nil) {
      prefSize_ = [[RAREUIDimension alloc] init];
    }
  }
  RAREUIDimension *size = prefSize_;
  BOOL hasFocus = NO;
  id<JavaLangCharSequence> text;
  int span;
  int len = (int) [((IOSObjectArray *) nil_chk(columns)) count];
  IOSObjectArray *renderers = (IOSObjectArray *) check_class_cast([((RAREaPlatformTableBasedView_ContentView *) nil_chk(contentView_)) getCellRenderers], [IOSObjectArray class]);
  if ((renderers == nil) || ((int) [renderers count] != len)) {
    IOSObjectArray *a = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithProtocol:@protocol(RAREiPlatformRenderingComponent)]];
    if (renderers != nil) {
      if ((int) [renderers count] > (int) [a count]) {
        [JavaLangSystem arraycopyWithId:renderers withInt:0 withId:a withInt:0 withInt:(int) [a count]];
        for (int i = (int) [a count]; i < (int) [renderers count]; i++) {
          [((id<RAREiPlatformRenderingComponent>) IOSObjectArray_Get(renderers, i)) dispose];
          (void) IOSObjectArray_Set(renderers, i, nil);
        }
      }
      else {
        [JavaLangSystem arraycopyWithId:renderers withInt:0 withId:a withInt:0 withInt:(int) [renderers count]];
      }
    }
    renderers = a;
    [contentView_ setCellRenderersWithId:a];
  }
  float height = 0;
  int d = [RAREScreenUtils PLATFORM_PIXELS_1];
  indent_ = 0;
  int loffset = RAREaTableBasedView_PAD_SIZE;
  int roffset = 0;
  if (this$2_->checkboxWidth_ > 0) {
    if (this$2_->selectionType_ == [RAREiListHandler_SelectionTypeEnum CHECKED_LEFT]) {
      loffset += this$2_->checkboxWidth_ + [RAREaTableBasedView ICON_GAP];
    }
    else {
      loffset += this$2_->checkboxWidth_ + RAREaTableBasedView_PAD_SIZE;
    }
  }
  if (!empty && ([parent conformsToProtocol: @protocol(RAREiTree)])) {
    id<RAREiTree> tv = (id<RAREiTree>) check_protocol_cast(parent, @protocol(RAREiTree));
    if (ti == nil) {
      [RAREPlatform ignoreExceptionWithNSString:@"TreeHandler disposed before table model" withJavaLangThrowable:nil];
      return;
    }
    if (![((id<RAREiTreeItem>) nil_chk(ti)) isLeaf]) {
      indent_ = ([ti getDepth] - 1) * [((id<RAREiTree>) nil_chk(tv)) getIndentBy];
      if (indent_ < 0) {
        indent_ = 0;
      }
      indent_ += [tv getIndicatorWidth];
    }
  }
  RAREColumn *c;
  RAREView *v;
  RARERenderableDataItem *item;
  id<RAREiWidget> w = [((id<RAREiPlatformComponent>) nil_chk(list)) getWidget];
  RAREUIInsets *in = [((RAREaListItemRenderer *) nil_chk(lr)) getInsets];
  BOOL canselcol = [this$2_ isColumnSelectionAllowed];
  for (int i = 0; i < len; i++) {
    c = IOSObjectArray_Get(columns, IOSIntArray_Get(nil_chk(viewPositions), i));
    if (![((RAREColumn *) nil_chk(c)) isVisible]) {
      continue;
    }
    item = [((RARERenderableDataItem *) nil_chk(rowItem)) getItemExWithInt:i + this$2_->dataOffset_];
    if (item == nil) {
      item = [RAREaPlatformTableBasedView NULL_ITEM];
    }
    else {
      if (![item isConverted]) {
        id<RAREiDataConverter> cvt = [c getDataConverter];
        if (cvt != nil) {
          (void) [item convertWithRAREiWidget:w withInt:[c getType] withRAREiDataConverter:cvt withId:[c getValueContext]];
        }
      }
    }
    id<RAREiPlatformComponent> comp = [((RARERenderableDataItem *) nil_chk(item)) getRenderingComponent];
    if (comp == nil) {
      rc = IOSObjectArray_Get(nil_chk(renderers), i);
      if (rc == nil) {
        rc = [c getCellRenderer];
        if (rc != nil) {
          rc = [rc newCopy];
        }
        else {
          rc = [[RAREUILabelRenderer alloc] init];
        }
        (void) IOSObjectArray_Set(renderers, i, rc);
      }
      if ([item isVisible]) {
        [((id<RAREiPlatformRenderingComponent>) nil_chk(rc)) prepareForReuseWithInt:row withInt:i];
        [rc setColumnWidthWithInt:[c getWidth]];
        BOOL selected = isSelected;
        if (canselcol && ![this$2_ isColumnSelectedWithInt:i]) {
          selected = NO;
        }
        text = [lr configureRenderingComponentWithRAREiPlatformComponent:list withRAREiPlatformRenderingComponent:rc withRARERenderableDataItem:item withInt:row withBoolean:selected withBoolean:hasFocus withRAREColumn:c withRARERenderableDataItem:rowItem];
        comp = [rc getComponentWithJavaLangCharSequence:text withRARERenderableDataItem:item];
      }
      else {
        [((id<RAREiPlatformRenderingComponent>) nil_chk(rc)) clearRenderer];
        comp = [rc getComponent];
        [((id<RAREiPlatformComponent>) nil_chk(comp)) setBackgroundWithRAREUIColor:[RAREUIColor TRANSPARENT]];
      }
    }
    v = [((id<RAREiPlatformComponent>) nil_chk(comp)) getView];
    if (!empty) {
      if ((indent_ != 0) || (this$2_->checkboxWidth_ != 0)) {
        if (i == 0) {
          [((RAREView *) nil_chk(v)) setMarginWithFloat:((RAREUIInsets *) nil_chk(in))->top_ withFloat:in->right_ withFloat:in->bottom_ withFloat:in->left_ + indent_ + loffset];
        }
        else if ((roffset != 0) && (i == len - 1)) {
          [((RAREView *) nil_chk(v)) setMarginWithFloat:((RAREUIInsets *) nil_chk(in))->top_ withFloat:in->right_ + roffset withFloat:in->bottom_ withFloat:in->left_];
        }
      }
      if (autoSize) {
        span = [item getColumnSpan];
        int width = (span == 1) ? [c getWidth] : [RARETableHelper getSpanWidthWithInt:i withInt:span withRAREColumnArray:columns withIntArray:viewPositions];
        (void) [comp getPreferredSizeWithRAREUIDimension:size withFloat:width];
        height = [JavaLangMath maxWithFloat:height withFloat:((RAREUIDimension *) nil_chk(size))->height_];
      }
    }
    [contentView_ addWithInt:-1 withRAREView:v];
  }
  if (this$2_->showHorizontalGridLines_) {
    height += d;
  }
  [((RARERenderableDataItem *) nil_chk(rowItem)) setHeightWithInt:[JavaLangMath maxWithInt:(int) [JavaLangMath ceilWithDouble:height] withInt:this$2_->rowHeight_]];
}

- (void)disposeEx {
  if (renderingComponent_ != nil) {
    [renderingComponent_ dispose];
  }
  if (contentView_ != nil) {
    [contentView_ dispose];
  }
  [super disposeEx];
}

- (void)dealloc {
  if (proxy_ != nil) {
    [self dispose];
  }
  prefSize_ = nil;
}

- (void)copyAllFieldsTo:(RAREaPlatformTableBasedView_TableRowView *)other {
  [super copyAllFieldsTo:other];
  other->prefSize_ = prefSize_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "disposeEx", NULL, "V", 0x4, NULL },
    { "dealloc", NULL, "V", 0x4, "JavaLangThrowable" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$2_", NULL, 0x1012, "LRAREaPlatformTableBasedView" },
    { "prefSize_", NULL, 0x0, "LRAREUIDimension" },
  };
  static J2ObjcClassInfo _RAREaPlatformTableBasedView_TableRowView = { "TableRowView", "com.appnativa.rare.platform.apple.ui.view", "aPlatformTableBasedView", 0x1, 2, methods, 2, fields, 0, NULL};
  return &_RAREaPlatformTableBasedView_TableRowView;
}

@end
@implementation RAREaPlatformTableBasedView_ContentView

- (id)initWithId:(id)proxy {
  return [super initWithId:proxy];
}

- (BOOL)isMouseTransparent {
  return YES;
}

- (void)setCellRenderersWithId:(id)renderers {
  ((RAREUITableContentView*)proxy_).cellRenderers=renderers;
}

- (id)getCellRenderers {
  return ((RAREUITableContentView*)proxy_).cellRenderers;
}

- (id)getViewAtWithInt:(int)index {
  return [[(RAREUITableContentView*)proxy_ subviews] objectAtIndex:index];
}

- (float)getViewWidthWithId:(id)proxy {
  return ((RAREUITableContentView*)proxy).frame.size.width;
}

- (float)getViewXWithId:(id)proxy {
  return ((RAREUITableContentView*)proxy).frame.origin.x;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "isMouseTransparent", NULL, "Z", 0x1, NULL },
    { "setCellRenderersWithId:", NULL, "V", 0x101, NULL },
    { "getCellRenderers", NULL, "LNSObject", 0x101, NULL },
    { "getViewAtWithInt:", NULL, "LNSObject", 0x101, NULL },
    { "getViewWidthWithId:", NULL, "F", 0x101, NULL },
    { "getViewXWithId:", NULL, "F", 0x101, NULL },
  };
  static J2ObjcClassInfo _RAREaPlatformTableBasedView_ContentView = { "ContentView", "com.appnativa.rare.platform.apple.ui.view", "aPlatformTableBasedView", 0x8, 6, methods, 0, NULL, 0, NULL};
  return &_RAREaPlatformTableBasedView_ContentView;
}

@end
@implementation RAREaPlatformTableBasedView_UITableCellViewRenderingComponent

- (id)initWithRAREaPlatformTableBasedView:(RAREaPlatformTableBasedView *)outer$ {
  this$0_ = outer$;
  return [super initWithRAREView:[[RAREaPlatformTableBasedView_RowViewEx alloc] initWithRAREaPlatformTableBasedView:outer$ withId:[RAREaPlatformTableBasedView createUITableCellView]]];
}

- (void)columnMovedWithInt:(int)from
                   withInt:(int)to {
  if ([view_ isKindOfClass:[RAREaPlatformTableBasedView_TableRowView class]]) {
    RAREaPlatformTableBasedView_ContentView *cv = ((RAREaPlatformTableBasedView_TableRowView *) nil_chk(view_))->contentView_;
    if (cv != nil) {
      IOSObjectArray *renderers = (IOSObjectArray *) check_class_cast([cv getCellRenderers], [IOSObjectArray class]);
      if (renderers != nil) {
        [RAREUTHelper moveWithNSObjectArray:renderers withInt:-1 withInt:from withInt:to];
      }
    }
  }
}

- (void)disposeOfRenderers {
  if ([view_ isKindOfClass:[RAREaPlatformTableBasedView_TableRowView class]]) {
    RAREaPlatformTableBasedView_ContentView *cv = ((RAREaPlatformTableBasedView_TableRowView *) nil_chk(view_))->contentView_;
    if (cv != nil) {
      id a = [cv getCellRenderers];
      if (a != nil) {
        [cv setCellRenderersWithId:nil];
        [RAREaPlatformTableBasedView disposeOfRenderersWithId:a];
      }
    }
  }
}

- (void)clearRenderer {
  [self setComponentPainterWithRAREiPlatformComponentPainter:nil];
  [self setBackgroundWithRAREUIColor:nil];
  [self setBorderWithRAREiPlatformBorder:nil];
  [self setIconWithRAREiPlatformIcon:nil];
  [self setTextWithJavaLangCharSequence:@""];
}

- (id)initWithRAREaPlatformTableBasedView:(RAREaPlatformTableBasedView *)outer$
withRAREaPlatformTableBasedView_RowViewEx:(RAREaPlatformTableBasedView_RowViewEx *)view {
  this$0_ = outer$;
  return [super initWithRAREView:view];
}

- (id)createNewNativeView {
  return [[RAREUITableViewCell alloc] init];
}

- (id<RAREiPlatformRenderingComponent>)newCopy {
  RAREaPlatformTableBasedView_UITableCellViewRenderingComponent *r;
  if ([this$0_ isTable]) {
    r = [[RAREaPlatformTableBasedView_UITableCellViewRenderingComponent alloc] initWithRAREaPlatformTableBasedView:this$0_ withRAREaPlatformTableBasedView_RowViewEx:[[RAREaPlatformTableBasedView_TableRowView alloc] initWithRAREaPlatformTableBasedView:this$0_]];
  }
  else {
    r = [[RAREaPlatformTableBasedView_UITableCellViewRenderingComponent alloc] initWithRAREaPlatformTableBasedView:this$0_];
  }
  return [RARERenderers setupNewCopyWithRAREiPlatformRenderingComponent:self withRAREiPlatformRenderingComponent:r];
}

- (void)prepareForReuseWithInt:(int)row
                       withInt:(int)col {
  [((RAREView *) nil_chk(view_)) clearVisualState];
}

- (void)setBoundsWithInt:(int)x
                 withInt:(int)y
                 withInt:(int)w
                 withInt:(int)h {
  [self setSizeWithInt:w withInt:h];
}

- (void)setColumnWidthWithInt:(int)width {
}

- (void)setNativeViewWithId:(id)proxy {
  [((RAREView *) nil_chk(view_)) setProxyWithId:proxy];
}

- (void)setOptionsWithJavaUtilMap:(id<JavaUtilMap>)options {
}

- (void)setOrientationWithRARERenderableDataItem_OrientationEnum:(RARERenderableDataItem_OrientationEnum *)o {
}

- (void)setRenderingViewWithRAREView:(RAREView *)view {
  [self setViewWithRAREView:view];
}

- (void)setRowViewWithRAREaTableBasedView_RowView:(RAREaTableBasedView_RowView *)view {
  [self setViewWithRAREView:view];
}

- (void)setViewWithRAREView:(RAREView *)view {
  self->view_ = view;
}

- (id<RAREiPlatformComponent>)getComponent {
  return self;
}

- (id<RAREiPlatformComponent>)getComponentWithJavaLangCharSequence:(id<JavaLangCharSequence>)value
                                        withRARERenderableDataItem:(RARERenderableDataItem *)item {
  if (![this$0_ isTable]) {
    RAREaTableBasedView_RowView *tv = (RAREaTableBasedView_RowView *) check_class_cast(view_, [RAREaTableBasedView_RowView class]);
    [((RAREaTableBasedView_RowView *) nil_chk(tv)) setTextWithJavaLangCharSequence:(value == nil) ? @"" : ((id) value)];
  }
  return self;
}

- (id<RAREiPlatformComponent>)getComponentWithRAREiPlatformComponent:(id<RAREiPlatformComponent>)list
                                                              withId:(id)value
                                          withRARERenderableDataItem:(RARERenderableDataItem *)item
                                                             withInt:(int)row
                                                         withBoolean:(BOOL)isSelected
                                                         withBoolean:(BOOL)hasFocus
                                                      withRAREColumn:(RAREColumn *)col
                                          withRARERenderableDataItem:(RARERenderableDataItem *)rowItem
                                                         withBoolean:(BOOL)handleAll {
  if (handleAll) {
    [RAREUtils setIconAndAlignmentWithRAREiPlatformRenderingComponent:self withRARERenderableDataItem:item withRARERenderableDataItem:nil withRAREColumn:nil withBoolean:isSelected withBoolean:NO withBoolean:NO withBoolean:YES withRAREiPlatformIcon:nil];
    [self setBorderWithRAREiPlatformBorder:[((RARERenderableDataItem *) nil_chk(item)) getBorder]];
    RAREUIFont *f = [item getFont];
    if (f == nil) {
      f = [((id<RAREiPlatformComponent>) nil_chk(list)) getFont];
    }
    [self setFontWithRAREUIFont:f];
    RAREUIColor *fg = [item getForeground];
    if (fg == nil) {
      fg = [((id<RAREiPlatformComponent>) nil_chk(list)) getForeground];
    }
    [self setForegroundWithRAREUIColor:fg];
  }
  id<JavaLangCharSequence> cs;
  if ([value conformsToProtocol: @protocol(JavaLangCharSequence)]) {
    cs = (id<JavaLangCharSequence>) check_protocol_cast(value, @protocol(JavaLangCharSequence));
  }
  else {
    cs = (value == nil) ? @"" : [value description];
  }
  return [self getComponentWithJavaLangCharSequence:cs withRARERenderableDataItem:item];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithRAREaPlatformTableBasedView:withRAREaPlatformTableBasedView_RowViewEx:", NULL, NULL, 0x4, NULL },
    { "createNewNativeView", NULL, "LNSObject", 0x101, NULL },
    { "newCopy", NULL, "LRAREiPlatformRenderingComponent", 0x1, NULL },
    { "getComponent", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getComponentWithJavaLangCharSequence:withRARERenderableDataItem:", NULL, "LRAREiPlatformComponent", 0x1, NULL },
    { "getComponentWithRAREiPlatformComponent:withId:withRARERenderableDataItem:withInt:withBoolean:withBoolean:withRAREColumn:withRARERenderableDataItem:withBoolean:", NULL, "LRAREiPlatformComponent", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LRAREaPlatformTableBasedView" },
  };
  static J2ObjcClassInfo _RAREaPlatformTableBasedView_UITableCellViewRenderingComponent = { "UITableCellViewRenderingComponent", "com.appnativa.rare.platform.apple.ui.view", "aPlatformTableBasedView", 0x4, 6, methods, 1, fields, 0, NULL};
  return &_RAREaPlatformTableBasedView_UITableCellViewRenderingComponent;
}

@end
