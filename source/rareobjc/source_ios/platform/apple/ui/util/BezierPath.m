//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../rare/ios/com/appnativa/rare/platform/apple/ui/util/BezierPath.java
//
//  Created by decoteaud on 3/11/16.
//

#include "com/appnativa/rare/platform/apple/ui/util/BezierPath.h"
#include "com/appnativa/rare/ui/UIRectangle.h"
#include "com/appnativa/rare/ui/iPath.h"
#include "com/appnativa/rare/ui/iPlatformPath.h"
#import "AppleHelper.h"

@implementation RAREBezierPath

- (id)init {
  return [self initRAREBezierPathWithId:[RAREBezierPath createProxy]];
}

- (id)initRAREBezierPathWithId:(id)proxy {
  if (self = [super init]) {
    self->proxy_ = proxy;
  }
  return self;
}

- (id)initWithId:(id)proxy {
  return [self initRAREBezierPathWithId:proxy];
}

- (RAREUIRectangle *)getBounds {
  CGRect rect=[((UIBezierPath*)proxy_) bounds];
  return [RAREUIRectangle fromRect: rect];
}

- (id<RAREiPath>)arcWithFloat:(float)x
                    withFloat:(float)y
                    withFloat:(float)radius
                    withFloat:(float)startAngle
                    withFloat:(float)endAngle
                  withBoolean:(BOOL)counterClockwise {
  [((UIBezierPath*)proxy_) addArcWithCenter: CGPointMake(x,y)
  radius: radius
  startAngle: startAngle
  endAngle: endAngle
  clockwise: !counterClockwise];
  return self;
}

- (id<RAREiPath>)arcToWithFloat:(float)x1
                      withFloat:(float)y1
                      withFloat:(float)x2
                      withFloat:(float)y2
                      withFloat:(float)radius {
  UIBezierPath* path=(UIBezierPath*)proxy_;
  CGMutablePathRef ref=CGPathCreateMutableCopy(path.CGPath);
  CGPathAddArcToPoint(ref, NULL, x1, y1, x2, y2, radius);
  path.CGPath=ref;
  CGPathRelease(ref);
  return self;
}

- (void)close {
  if(!((UIBezierPath*)proxy_).empty) {
    [((UIBezierPath*)proxy_) closePath];
  }
}

- (id<RAREiPlatformPath>)copy__ {
  RAREBezierPath *p = [self copyEx];
  ((RAREBezierPath *) nil_chk(p))->x_ = x_;
  p->y_ = y_;
  return p;
}

- (RAREBezierPath *)copyEx {
  UIBezierPath* p=[UIBezierPath bezierPath];
  [p appendPath: (UIBezierPath*)proxy_] ;
  return [[RAREBezierPath alloc] initWithId: p];
}

- (id<RAREiPath>)cubicToWithFloat:(float)x1
                        withFloat:(float)y1
                        withFloat:(float)x2
                        withFloat:(float)y2
                        withFloat:(float)x3
                        withFloat:(float)y3 {
  [((UIBezierPath*)proxy_) addCurveToPoint: CGPointMake(x3,y3)
  controlPoint1: CGPointMake(x1,y1)
  controlPoint2: CGPointMake(x2,y2)];
  return self;
}

- (void)drawLineWithFloat:(float)x1
                withFloat:(float)y1
                withFloat:(float)x2
                withFloat:(float)y2 {
  UIBezierPath* path=(UIBezierPath*)proxy_;
  if ((x1 != x_) || (y1 != y_)) {
    [path  moveToPoint:CGPointMake(x1,y1)];
  }
  
  [path  addLineToPoint:CGPointMake(y1,y1)];
  
  x_ = x2;
  y_ = y2;
  
}

- (void)drawRectWithFloat:(float)x
                withFloat:(float)y
                withFloat:(float)width
                withFloat:(float)height {
  UIBezierPath *p=[UIBezierPath bezierPathWithRect:CGRectMake(x,y,width,height)];
  [((UIBezierPath*)proxy_) appendPath: p];
}

- (void)drawRoundedRectWithFloat:(float)x
                       withFloat:(float)y
                       withFloat:(float)width
                       withFloat:(float)height
                       withFloat:(float)arcWidth
                       withFloat:(float)arcHeight {
  CGFloat radius=(arcHeight/2)+((arcWidth*arcWidth)/(8*arcHeight));
  UIBezierPath *p=[UIBezierPath bezierPathWithRoundedRect:CGRectMake(x,y,width,height) cornerRadius:radius];
  [((UIBezierPath*)proxy_) appendPath: p];
}

- (id<RAREiPath>)lineToWithFloat:(float)x
                       withFloat:(float)y {
  [((UIBezierPath*)proxy_) addLineToPoint:CGPointMake(x,y)];
  return self;
}

- (id<RAREiPath>)moveToWithFloat:(float)x
                       withFloat:(float)y {
  [((UIBezierPath*)proxy_) moveToPoint:CGPointMake(x,y)];
  return self;
}

- (id<RAREiPath>)quadToWithFloat:(float)x1
                       withFloat:(float)y1
                       withFloat:(float)x2
                       withFloat:(float)y2 {
  CGPoint p1=CGPointMake(x1,y1);
  CGPoint p2=CGPointMake(x2,y2);
  [((UIBezierPath*)proxy_) addQuadCurveToPoint:p2 controlPoint: p1];
  return self;
}

- (void)reset {
  [((UIBezierPath*)proxy_) removeAllPoints];
}

- (void)rewind {
  [((UIBezierPath*)proxy_) removeAllPoints];
}

- (id<RAREiPath>)startLineDrawingWithFloat:(float)x
                                 withFloat:(float)y
                               withBoolean:(BOOL)move {
  x_ = x;
  y_ = y;
  
  if (move) {
    [((UIBezierPath*)proxy_) moveToPoint:CGPointMake(x,y)];
  }
  
  return self;
  
}

- (BOOL)isEmpty {
  return ((UIBezierPath*)proxy_).empty;
}

- (BOOL)isPointInPathWithFloat:(float)x
                     withFloat:(float)y {
  return [((UIBezierPath*)proxy_) containsPoint: CGPointMake(x,y)];
}

- (id)getPath {
  return proxy_;
}

+ (id)createProxy {
  return [UIBezierPath bezierPath];
}

- (RAREUIRectangle *)getRectangle {
  return nil;
}

- (RAREBezierPath *)getBezierPath {
  return self;
}

- (void)translateWithFloat:(float)x
                 withFloat:(float)y {
  CGAffineTransform transform = CGAffineTransformMakeTranslation(x, y);
  [((UIBezierPath*)proxy_)  applyTransform: transform];
}

- (void)copyAllFieldsTo:(RAREBezierPath *)other {
  [super copyAllFieldsTo:other];
  other->proxy_ = proxy_;
  other->x_ = x_;
  other->y_ = y_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getBounds", NULL, "LRAREUIRectangle", 0x101, NULL },
    { "arcWithFloat:withFloat:withFloat:withFloat:withFloat:withBoolean:", NULL, "LRAREiPath", 0x101, NULL },
    { "arcToWithFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPath", 0x101, NULL },
    { "close", NULL, "V", 0x101, NULL },
    { "copy__", NULL, "LRAREiPlatformPath", 0x1, NULL },
    { "copyEx", NULL, "LRAREBezierPath", 0x104, NULL },
    { "cubicToWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPath", 0x101, NULL },
    { "drawLineWithFloat:withFloat:withFloat:withFloat:", NULL, "V", 0x101, NULL },
    { "drawRectWithFloat:withFloat:withFloat:withFloat:", NULL, "V", 0x101, NULL },
    { "drawRoundedRectWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", NULL, "V", 0x101, NULL },
    { "lineToWithFloat:withFloat:", NULL, "LRAREiPath", 0x101, NULL },
    { "moveToWithFloat:withFloat:", NULL, "LRAREiPath", 0x101, NULL },
    { "quadToWithFloat:withFloat:withFloat:withFloat:", NULL, "LRAREiPath", 0x101, NULL },
    { "reset", NULL, "V", 0x101, NULL },
    { "rewind", NULL, "V", 0x101, NULL },
    { "startLineDrawingWithFloat:withFloat:withBoolean:", NULL, "LRAREiPath", 0x101, NULL },
    { "isEmpty", NULL, "Z", 0x101, NULL },
    { "isPointInPathWithFloat:withFloat:", NULL, "Z", 0x101, NULL },
    { "getPath", NULL, "LNSObject", 0x1, NULL },
    { "createProxy", NULL, "LNSObject", 0x108, NULL },
    { "getRectangle", NULL, "LRAREUIRectangle", 0x1, NULL },
    { "getBezierPath", NULL, "LRAREBezierPath", 0x1, NULL },
    { "translateWithFloat:withFloat:", NULL, "V", 0x101, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "proxy_", NULL, 0x0, "LNSObject" },
    { "x_", NULL, 0x0, "F" },
    { "y_", NULL, 0x0, "F" },
  };
  static J2ObjcClassInfo _RAREBezierPath = { "BezierPath", "com.appnativa.rare.platform.apple.ui.util", NULL, 0x1, 23, methods, 3, fields, 0, NULL};
  return &_RAREBezierPath;
}

@end
