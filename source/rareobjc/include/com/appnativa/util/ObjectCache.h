//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Code/Dev/appNativa/source/rareobjc/../util/src/com/appnativa/util/ObjectCache.java
//
//  Created by decoteaud on 3/11/16.
//

#ifndef _RAREUTObjectCache_H_
#define _RAREUTObjectCache_H_

@class JavaUtilConcurrentConcurrentHashMap;
@class RAREUTObjectCache_CacheComparator;
@protocol JavaUtilConcurrentFuture;
@protocol RAREUTObjectCache_iCacheReference;
@protocol RAREUTObjectCache_iCacheReferenceCreator;
@protocol RAREUTiScheduler;

#import "JreEmulation.h"
#include "java/lang/Runnable.h"
#include "java/lang/ref/SoftReference.h"
#include "java/util/Comparator.h"

@interface RAREUTObjectCache : NSObject < JavaLangRunnable > {
 @public
  id<JavaUtilConcurrentFuture> purgeFurture_;
  JavaUtilConcurrentConcurrentHashMap *cache_;
  int bufferSize_;
  BOOL purgeRunning_;
  float puregRatio_;
  BOOL purgeInline_;
  BOOL strongBuffer_;
  int maxSizeReached_;
  id<RAREUTiScheduler> purgeHandler_;
}

+ (RAREUTObjectCache_CacheComparator *)cacheComparator;
+ (void)setCacheComparator:(RAREUTObjectCache_CacheComparator *)cacheComparator;
+ (id<RAREUTObjectCache_iCacheReferenceCreator>)referenceCreator;
+ (void)setReferenceCreator:(id<RAREUTObjectCache_iCacheReferenceCreator>)referenceCreator;
- (id)init;
- (id)initWithInt:(int)initialCapacity;
- (id)initWithInt:(int)initialCapacity
        withFloat:(float)loadFactor
          withInt:(int)concurrencyLevel;
- (void)clear;
- (void)purge;
- (id)putWithId:(id)key
         withId:(id)value;
- (id)removeWithId:(id)key;
- (void)run;
- (int)size;
- (void)setBufferSizeWithInt:(int)size;
- (void)setPuregRatioWithFloat:(float)ratio;
- (void)setPurgeHandlerWithRAREUTiScheduler:(id<RAREUTiScheduler>)handler;
- (void)setPurgeInlineWithBoolean:(BOOL)purgeInline;
+ (void)setReferenceCreatorWithRAREUTObjectCache_iCacheReferenceCreator:(id<RAREUTObjectCache_iCacheReferenceCreator>)creator;
- (void)setStrongReferencesWithBoolean:(BOOL)strong;
- (id)getWithId:(id)key;
- (int)getBufferSize;
- (int)getCacheSize;
- (double)getPuregRatio;
- (BOOL)isEmpty;
- (BOOL)isPurgeInline;
- (BOOL)isStrongReferences;
- (id<RAREUTObjectCache_iCacheReference>)createCacheReferenceWithId:(id)key
                                                             withId:(id)value;
- (void)copyAllFieldsTo:(RAREUTObjectCache *)other;
@end

J2OBJC_FIELD_SETTER(RAREUTObjectCache, purgeFurture_, id<JavaUtilConcurrentFuture>)
J2OBJC_FIELD_SETTER(RAREUTObjectCache, cache_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(RAREUTObjectCache, purgeHandler_, id<RAREUTiScheduler>)

typedef RAREUTObjectCache ComAppnativaUtilObjectCache;

@protocol RAREUTObjectCache_iCacheReferenceCreator < NSObject, JavaObject >
- (id<RAREUTObjectCache_iCacheReference>)createCacheReferenceWithId:(id)key
                                                             withId:(id)value;
@end

@interface RAREUTObjectCache_CacheComparator : NSObject < JavaUtilComparator > {
}

- (int)compareWithId:(id)o1
              withId:(id)o2;
- (id)init;
@end

@protocol RAREUTObjectCache_iCacheReference < NSObject, JavaObject >
- (void)clear;
- (id<RAREUTObjectCache_iCacheReference>)makeStrong;
- (id)get;
- (id)getKey;
- (long long int)getTimestamp;
@end

@interface RAREUTObjectCache_CacheReference : JavaLangRefSoftReference < RAREUTObjectCache_iCacheReference > {
 @public
  id key_;
  id strong_;
  long long int timestamp_;
}

- (id)initWithId:(id)key
          withId:(id)referent;
- (void)clear;
- (id<RAREUTObjectCache_iCacheReference>)makeStrong;
- (id)get;
- (id)getKey;
- (long long int)getTimestamp;
- (void)copyAllFieldsTo:(RAREUTObjectCache_CacheReference *)other;
@end

J2OBJC_FIELD_SETTER(RAREUTObjectCache_CacheReference, key_, id)
J2OBJC_FIELD_SETTER(RAREUTObjectCache_CacheReference, strong_, id)

#endif // _RAREUTObjectCache_H_
