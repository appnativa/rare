/**************************************************************************
 * DebugResponse.java - Mon Aug 10 16:51:49 PDT 2009
 *
 * Copyright (c) appNativa 2006
 *
 * All rights reserved.
 *
 * Generated by the Sparse Notation(tm) To Java Compiler v1.0
 * Note 1: Code entered after the "//USER_IMPORTS_AND_COMMENTS_MARK{}" comment and before the class declaration will be preserved.
 * Note 2: Code entered out side of the other   comment blocks will be preserved
 * Note 3: If you edit the automatically generated comments and want to preserve your edits remove the //GENERATED_COMMENT{} tags
 */

package com.appnativa.studio.spot;

import com.appnativa.spot.SPOTAny;
import com.appnativa.spot.SPOTEnumerated;
import com.appnativa.spot.SPOTInteger;
import com.appnativa.spot.SPOTPrintableString;
import com.appnativa.spot.SPOTSequence;

//USER_IMPORTS_AND_COMMENTS_MARK{}

public class DebugResponse extends SPOTSequence {
  //GENERATED_MEMBERS{

  public SPOTInteger applicationID = new SPOTInteger();

  public SPOTInteger correlationID = new SPOTInteger(null, 0, false );

  public CMessageType messageType = new CMessageType();

  public SPOTAny value = new SPOTAny(true);

  public SPOTPrintableString statusMessage = new SPOTPrintableString();

  //}GENERATED_MEMBERS

  //GENERATED_METHODS{

  /**
   * Creates a new optional <code>DebugResponse</code> object.
   */
  public DebugResponse()  {
    this(true);
  }

  /**
   * Creates a new <code>DebugResponse</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   */
  public DebugResponse( boolean optional ) {
    super( optional, false );
    spot_setElements();
  }

  /**
   * Creates a new <code>DebugResponse</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   * @param setElements  <code>true</code> if a call to setElements should be made; <code>false</code> otherwise)
   */
  protected DebugResponse( boolean optional,boolean setElements ) {
    super( optional, setElements );
  }

  /**
   * Adds elements to the object elements map
   *
   */
  protected void spot_setElements()  {
    super.spot_setElements();
    spot_addElement( "applicationID", applicationID );
    spot_addElement( "correlationID", correlationID );
    spot_addElement( "messageType", messageType );
    spot_addElement( "value", value );
    spot_addElement( "statusMessage", statusMessage );
  }

  //}GENERATED_METHODS

  //GENERATED_INNER_CLASSES{

  /**
   * Class that defines the valid set of choices for
   * the <code>DebugResponse.messageType</code> ENUMERATED object
   */
  public static class CMessageType extends SPOTEnumerated {

    /** value in an integer with an HTTP error code */
    public final static int error = 0;
    /** value coresponds to the requested data */
    public final static int value = 1;
    /** value is a DebugUpdate opject */
    public final static int update = 2;
    /** value is a set of DebugPoint representing invalid breakpoints */
    public final static int invalid_breakpoints = 3;
    /** value is null */
    public final static int stop = 4;
    /**
     * Creates a new <code>CMessageType</code> object
     */
    public CMessageType()
    {
      super();
      spot_setChoices();
    }

    /**
     * Creates a new <code>CMessageType</code> object
     * 
     *  @param optional <code>true</code> if the node the object represents is optional
     */
    public CMessageType(boolean optional)
    {
      super(optional);
      spot_setChoices();
    }

    /**
     * Creates a new <code>CMessageType</code> object
     * 
     * @param val the value
     */
    public CMessageType( int val )
    {
      super();
      spot_setChoices();
      setValue(val);
    }

    /**
     * Creates a new <code>CMessageType</code> object
     * 
     * @param val       the value
     * @param optional  <code>true</code> if the node the object represents is optional
     */
    public CMessageType( int val, boolean optional)
    {
      super(optional);
      spot_setChoices();
      setValue(val);
    }

    /**
     * Creates a new <code>CMessageType</code> object
     * 
     * @param val        the value
     * @param defaultval the default value
     * @param optional   <code>true</code> if the node the object represents is optional
     */
    public CMessageType( String val, int defaultval, boolean optional)
    {
      super(optional);
      spot_setChoices();
      setValue(val);
      spot_setDefaultValue(defaultval);
    }

    /**
     * Creates a new <code>messageType</code> object
     * the <code>DebugResponse.messageType</code> ENUMERATED object
     * 
     * @param val        the value
     * @param defaultval the default value
     * @param optional   <code>true</code> if the node the object represents is optional
     */
    public CMessageType( String val, String defaultval, boolean optional)
    {
      super(optional);
      spot_setChoices();
      setValue(val);
      spot_setDefaultValue(defaultval);
    }

    /**
     * Retrieves the range of valid values for the object
     * 
     * @return the valid range as a displayable string
     */
    public String spot_getValidityRange()
    {
      return "{"
      +"error(0), "
      +"value(1), "
      +"update(2), "
      +"invalid_breakpoints(3), "
      +"stop(4) }";
    }

    private void spot_setChoices()
    {
      int    nchoices[] = {
              0,
              1,
              2,
              3,
              4
             };


      String schoices[] = {
              "error",
              "value",
              "update",
              "invalid_breakpoints",
              "stop"
             };

      spot_setChoices(schoices,nchoices);
    }
  }
  //}GENERATED_INNER_CLASSES
}
