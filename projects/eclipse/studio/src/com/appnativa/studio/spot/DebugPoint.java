/**************************************************************************
 * DebugPoint.java - Mon Aug 10 16:51:49 PDT 2009
 *
 * Copyright (c) appNativa 2006
 *
 * All rights reserved.
 *
 * Generated by the Sparse Notation(tm) To Java Compiler v1.0
 * Note 1: Code entered after the "//USER_IMPORTS_AND_COMMENTS_MARK{}" comment and before the class declaration will be preserved.
 * Note 2: Code entered out side of the other   comment blocks will be preserved
 * Note 3: If you edit the automatically generated comments and want to preserve your edits remove the //GENERATED_COMMENT{} tags
 */

package com.appnativa.studio.spot;

import com.appnativa.studio.iDebugger;
import com.appnativa.spot.SPOTEnumerated;
import com.appnativa.spot.SPOTInteger;
import com.appnativa.spot.SPOTPrintableString;
import com.appnativa.spot.SPOTSequence;

public class DebugPoint extends SPOTSequence  implements iDebugger.iDebugPoint  {
  //GENERATED_MEMBERS{

//GENERATED_COMMENT{}
  /** either a variable name function name or a url */ 
  public SPOTPrintableString reference = new SPOTPrintableString();

//GENERATED_COMMENT{}
  /** line number for a break point */ 
  public SPOTInteger lineNumber = new SPOTInteger();

//GENERATED_COMMENT{}
  /** command number for a break point */ 
  public SPOTInteger commandNumber = new SPOTInteger(null, 0, false );

  public CPointType pointType = new CPointType(null, CPointType.breakpoint, false );

  //}GENERATED_MEMBERS

  //GENERATED_METHODS{

  /**
   * Creates a new optional <code>DebugPoint</code> object.
   */
  public DebugPoint()  {
    this(true);
  }

  /**
   * Creates a new <code>DebugPoint</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   */
  public DebugPoint( boolean optional ) {
    super( optional, false );
    spot_setElements();
  }

  /**
   * Creates a new <code>DebugPoint</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   * @param setElements  <code>true</code> if a call to setElements should be made; <code>false</code> otherwise)
   */
  protected DebugPoint( boolean optional,boolean setElements ) {
    super( optional, setElements );
  }

  /**
   * Adds elements to the object elements map
   *
   */
  protected void spot_setElements()  {
    super.spot_setElements();
    spot_addElement( "reference", reference );
    spot_addElement( "lineNumber", lineNumber );
    spot_addElement( "commandNumber", commandNumber );
    spot_addElement( "pointType", pointType );
  }

  //}GENERATED_METHODS
  boolean _valid=true;
  boolean _enabled=true;
  public DebugPoint( String ref, int line ) {
    this(true);
    reference.setValue(ref);
    lineNumber.setValue(line);
  }
  public boolean isValid() {
    return _valid;
  }
  
  public void setValid(boolean valid) {
    _valid=valid;
  }
  
  public int getLineNumber() {
    return lineNumber.intValue();
  }

  public String getReference() {
    return reference.getValue();
  }

  public boolean isWatchpoint() {
    return pointType.intValue()==CPointType.watchpoint;
  }

  public boolean isBreakpoint() {
    return pointType.intValue()==CPointType.breakpoint;
  }

  public int getPointType() {
    return pointType.intValue();
  }
  
  public boolean isEnabled() {
    return _enabled;
  }
  
  public void setEnabled(boolean enabled) {
    _enabled=enabled;
  }
  
  public String toString() {
    String ref=getReference();
    if(ref==null) {
      ref=":"+lineNumber.stringValue();
    }
    else {
      ref+=":"+getLineNumber();
    }
    return ref;
  }

  //GENERATED_INNER_CLASSES{

  /**
   * Class that defines the valid set of choices for
   * the <code>DebugPoint.pointType</code> ENUMERATED object
   */
  public static class CPointType extends SPOTEnumerated {

    public final static int breakpoint = 1;
    public final static int watchpoint = 2;
    /**
     * Creates a new <code>CPointType</code> object
     */
    public CPointType()
    {
      super();
      spot_setChoices();
    }

    /**
     * Creates a new <code>CPointType</code> object
     * 
     *  @param optional <code>true</code> if the node the object represents is optional
     */
    public CPointType(boolean optional)
    {
      super(optional);
      spot_setChoices();
    }

    /**
     * Creates a new <code>CPointType</code> object
     * 
     * @param val the value
     */
    public CPointType( int val )
    {
      super();
      spot_setChoices();
      setValue(val);
    }

    /**
     * Creates a new <code>CPointType</code> object
     * 
     * @param val       the value
     * @param optional  <code>true</code> if the node the object represents is optional
     */
    public CPointType( int val, boolean optional)
    {
      super(optional);
      spot_setChoices();
      setValue(val);
    }

    /**
     * Creates a new <code>CPointType</code> object
     * 
     * @param val        the value
     * @param defaultval the default value
     * @param optional   <code>true</code> if the node the object represents is optional
     */
    public CPointType( String val, int defaultval, boolean optional)
    {
      super(optional);
      spot_setChoices();
      setValue(val);
      spot_setDefaultValue(defaultval);
    }

    /**
     * Creates a new <code>pointType</code> object
     * the <code>DebugPoint.pointType</code> ENUMERATED object
     * 
     * @param val        the value
     * @param defaultval the default value
     * @param optional   <code>true</code> if the node the object represents is optional
     */
    public CPointType( String val, String defaultval, boolean optional)
    {
      super(optional);
      spot_setChoices();
      setValue(val);
      spot_setDefaultValue(defaultval);
    }

    /**
     * Retrieves the range of valid values for the object
     * 
     * @return the valid range as a displayable string
     */
    public String spot_getValidityRange()
    {
      return "{"
      +"breakpoint(1), "
      +"watchpoint(2) }";
    }

    private void spot_setChoices()
    {
      int    nchoices[] = {
              1,
              2
             };


      String schoices[] = {
              "breakpoint",
              "watchpoint"
             };

      spot_setChoices(schoices,nchoices);
    }
  }
  //}GENERATED_INNER_CLASSES
}
