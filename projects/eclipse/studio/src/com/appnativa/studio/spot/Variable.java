/**************************************************************************
 * Variable.java - Thu Jul 16 08:27:21 PDT 2009
 *
 * Copyright (c) appNativa 2006
 *
 * All rights reserved.
 *
 * Generated by the Sparse Notation(tm) To Java Compiler v1.0
 * Note 1: Code entered after the "//USER_IMPORTS_AND_COMMENTS_MARK{}" comment and before the class declaration will be preserved.
 * Note 2: Code entered out side of the other   comment blocks will be preserved
 * Note 3: If you edit the automatically generated comments and want to preserve your edits remove the //GENERATED_COMMENT{} tags
 */

package com.appnativa.studio.spot;

import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Modifier;
import java.util.List;

import com.appnativa.studio.iDebugger.iVariable;
import com.appnativa.spot.SPOTBoolean;
import com.appnativa.spot.SPOTEnumerated;
import com.appnativa.spot.SPOTInteger;
import com.appnativa.spot.SPOTOctetString;
import com.appnativa.spot.SPOTPrintableString;
import com.appnativa.spot.SPOTSequence;
import com.appnativa.util.SNumber;

public class Variable extends SPOTSequence implements iVariable{
  //GENERATED_MEMBERS{

//GENERATED_COMMENT{}
  /** the name of the variable */ 
  public SPOTPrintableString name = new SPOTPrintableString();

//GENERATED_COMMENT{}
  /**  */ 
  public SPOTOctetString value = new SPOTOctetString();

  public CType type = new CType();

//GENERATED_COMMENT{}
  /** modifiers that correspond to the java Modifier class */ 
  public SPOTInteger modifiers = new SPOTInteger();

//GENERATED_COMMENT{}
  /** whether the variable has children */ 
  public SPOTBoolean hasChildren = new SPOTBoolean(null, false, false );

  //}GENERATED_MEMBERS

  //GENERATED_METHODS{

  /**
   * Creates a new optional <code>Variable</code> object.
   */
  public Variable()  {
    this(true);
  }

  /**
   * Creates a new <code>Variable</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   */
  public Variable( boolean optional ) {
    super( optional, false );
    spot_setElements();
  }

  /**
   * Creates a new <code>Variable</code> object.
   *
   * @param optional  <code>true</code> if the element is optional; <code>false</code> otherwise)
   * @param setElements  <code>true</code> if a call to setElements should be made; <code>false</code> otherwise)
   */
  protected Variable( boolean optional,boolean setElements ) {
    super( optional, setElements );
  }

  /**
   * Adds elements to the object elements map
   *
   */
  protected void spot_setElements()  {
    super.spot_setElements();
    spot_addElement( "name", name );
    spot_addElement( "value", value );
    spot_addElement( "type", type );
    type.spot_defineAttribute("isArray",null);
    type.spot_defineAttribute("arraySize",null);
    spot_addElement( "modifiers", modifiers );
    spot_addElement( "hasChildren", hasChildren );
  }

  //}GENERATED_METHODS
  
  public Variable(iVariable v) {
    this(true);
    set(v);
  }

  public Variable(String name, int type) {
    this(name, type, Modifier.PUBLIC);
  }

  public Variable(String name, Object value,int type) {
    this(name, type, Modifier.PUBLIC);
    setValue(value);
  }
  
  public Variable(String name, int type, int modifiers) {
    this(true);
    this.name.setValue(name);
    this.type.setValue(type);
    this.modifiers.setValue(modifiers);
    this.hasChildren.setValue(false);
  }

  public void set(iVariable v) {
    this.name.setValue(v.getName());
    this.type.setValue(v.getType());
    this.modifiers.setValue(v.getModifiers());
    this.hasChildren.setValue(v.hasChildren());
    setValue(v.getValue());
  }

  public void setValue(Object value) {
    String s=null;
    if(value!=null) {
      s=(value instanceof String) ? (String)value : value.toString();
      if(s.length()>252) {
        s=s.substring(0,252)+"...";
      }
    }
   this.value.setValue(s);

  }

  public boolean isArray() {
    return "true".equals(type.spot_getAttribute("isArray"));
  }

  public long getArraySize() {
    return SNumber.intValue(type.spot_getAttribute("arraySize"));
  }

  public int getType() {
    return (int) type.getValue();
  }
  public iVariable getChild(String name,boolean forChildrenOnly) {
    return null;
  }
  public int getModifiers() {
    return (int) modifiers.getValue();
  }

  public String getName() {
    return name.getValue();
  }

  public boolean hasChildren() {
    return hasChildren.booleanValue();
  }
  public Object getValue() {
    return value.getValue();
  }

  public List<iVariable> getChildren(int start, int max) {
    return null;
  }

  public boolean toSDF(Writer out, String classname, int depth, boolean validate, boolean outputempty) throws IOException {
    hasChildren();
    return super.toSDF(out, classname, depth, validate, outputempty);
  }
  public int compareTo(Object o) {
    if(o instanceof iVariable) {
      return name.getValue().compareTo(((iVariable)o).getName());
    }
    return -1;
  }

  public String spot_getName() {
    if (_theName == null) {
      _theName = Variable.class.getName();

      int i = _theName.lastIndexOf('.');

      if (i != -1) {
        StringBuilder buf = new StringBuilder(_theName);

        buf.setCharAt(i, ':');
        _theName = buf.toString();
      }
    }

    return _theName;
  }

  /**
   * Retrieves the SPOT class name for the specified class.
   *
   * @return The class name of the element
   */
  public String spot_getClassName() {
    return Variable.class.getName();
  }

  /**
   * Retrieves the short name of this class
   *
   * @return the short name of this class
   */
  public String spot_getClassShortName() {
    return "Variable";
  }

  //GENERATED_INNER_CLASSES{

  /**
   * Class that defines the valid set of choices for
   * the <code>Variable.type</code> ENUMERATED object
   */
  public static class CType extends SPOTEnumerated {

    public final static int var_local = 0;
    public final static int var_global = 1;
    public final static int var_instance = 2;
    /** a class variable (corresponds to a java static variable) */
    public final static int var_class = 3;
    public final static int var_constant = 4;
    /** a variable pointing to the inherited members of this variable children */
    public final static int var_inherited = 5;
    /** a variable pointing to the static members of this */
    public final static int var_static = 6;
    /**
     * Creates a new <code>CType</code> object
     */
    public CType()
    {
      super();
      spot_setAttributes();
      spot_setChoices();
    }

    /**
     * Creates a new <code>CType</code> object
     * 
     *  @param optional <code>true</code> if the node the object represents is optional
     */
    public CType(boolean optional)
    {
      super(optional);
      spot_setAttributes();
      spot_setChoices();
    }

    /**
     * Creates a new <code>CType</code> object
     * 
     * @param val the value
     */
    public CType( int val )
    {
      super();
      spot_setAttributes();
      spot_setChoices();
      setValue(val);
    }

    /**
     * Creates a new <code>CType</code> object
     * 
     * @param val       the value
     * @param optional  <code>true</code> if the node the object represents is optional
     */
    public CType( int val, boolean optional)
    {
      super(optional);
      spot_setAttributes();
      spot_setChoices();
      setValue(val);
    }

    /**
     * Creates a new <code>CType</code> object
     * 
     * @param val        the value
     * @param defaultval the default value
     * @param optional   <code>true</code> if the node the object represents is optional
     */
    public CType( String val, int defaultval, boolean optional)
    {
      super(optional);
      spot_setAttributes();
      spot_setChoices();
      setValue(val);
      spot_setDefaultValue(defaultval);
    }

    /**
     * Creates a new <code>type</code> object
     * the <code>Variable.type</code> ENUMERATED object
     * 
     * @param val        the value
     * @param defaultval the default value
     * @param optional   <code>true</code> if the node the object represents is optional
     */
    public CType( String val, String defaultval, boolean optional)
    {
      super(optional);
      spot_setAttributes();
      spot_setChoices();
      setValue(val);
      spot_setDefaultValue(defaultval);
    }

    /**
     * Retrieves the range of valid values for the object
     * 
     * @return the valid range as a displayable string
     */
    public String spot_getValidityRange()
    {
      return "{"
      +"var_local(0), "
      +"var_global(1), "
      +"var_instance(2), "
      +"var_class(3), "
      +"var_constant(4), "
      +"var_inherited(5), "
      +"var_static(6) }";
    }

    private void spot_setChoices()
    {
      int    nchoices[] = {
              0,
              1,
              2,
              3,
              4,
              5,
              6
             };


      String schoices[] = {
              "var_local",
              "var_global",
              "var_instance",
              "var_class",
              "var_constant",
              "var_inherited",
              "var_static"
             };

      spot_setChoices(schoices,nchoices);
    }

    private void spot_setAttributes()
    {
      spot_defineAttribute("isArray",null);
      spot_defineAttribute("arraySize",null);
    }
  }
  //}GENERATED_INNER_CLASSES

}
